// *** Source file generated by HIDL Version 1.3 from soapesp.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#include "soapesp.hpp"

// clarion interface stub for ISoapMessage 
class SCMCLWSTUB_ISoapMessage: public SCMStubBase, implements ISoapMessage // interface
	ISoapMessage &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_ISoapMessage(ISoapMessage *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_ISoapMessage() { _o.Release(); } 
	const char * _stdcall getMessageType()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapMessage_getMessageType;
		SCMCLW_INTRO_ISoapMessage_getMessageType;
#endif
		char * _return;
		_return = _o.getMessageType();
#ifdef SCMCLW_OUTRO_ISoapMessage_getMessageType;
		SCMCLW_OUTRO_ISoapMessage_getMessageType;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	StringBuffer & _stdcall toString(StringBuffer & str)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapMessage_toString;
		SCMCLW_INTRO_ISoapMessage_toString;
#endif
		StringBuffer & _return;
		_return = _o.toString(str);
#ifdef SCMCLW_OUTRO_ISoapMessage_toString;
		SCMCLW_OUTRO_ISoapMessage_toString;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	IEspContext * _stdcall queryContext()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapMessage_queryContext;
		SCMCLW_INTRO_ISoapMessage_queryContext;
#endif
		IEspContext * _return;
		_return = _o.queryContext();
#ifdef SCMCLW_OUTRO_ISoapMessage_queryContext;
		SCMCLW_OUTRO_ISoapMessage_queryContext;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IRpcMessage 
class SCMCLWSTUB_IRpcMessage: public SCMStubBase, implements IRpcMessage // interface
	IRpcMessage &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IRpcMessage(IRpcMessage *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IRpcMessage() { _o.Release(); } 
	IEspContext * _stdcall queryContext()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_queryContext;
		SCMCLW_INTRO_IRpcMessage_queryContext;
#endif
		IEspContext * _return;
		_return = _o.queryContext();
#ifdef SCMCLW_OUTRO_IRpcMessage_queryContext;
		SCMCLW_OUTRO_IRpcMessage_queryContext;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setContext(IEspContext * value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_setContext;
		SCMCLW_INTRO_IRpcMessage_setContext;
#endif
		_o.setContext(value);
#ifdef SCMCLW_OUTRO_IRpcMessage_setContext;
		SCMCLW_OUTRO_IRpcMessage_setContext;
#endif
		SCMCLW_OUTRO;
	}
	const char * _stdcall get_name()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_name;
		SCMCLW_INTRO_IRpcMessage_get_name;
#endif
		char * _return;
		_return = _o.get_name();
#ifdef SCMCLW_OUTRO_IRpcMessage_get_name;
		SCMCLW_OUTRO_IRpcMessage_get_name;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall set_name(const char * name)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_set_name;
		SCMCLW_INTRO_IRpcMessage_set_name;
#endif
		_o.set_name(name);
#ifdef SCMCLW_OUTRO_IRpcMessage_set_name;
		SCMCLW_OUTRO_IRpcMessage_set_name;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall set_ns(const char * ns)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_set_ns;
		SCMCLW_INTRO_IRpcMessage_set_ns;
#endif
		_o.set_ns(ns);
#ifdef SCMCLW_OUTRO_IRpcMessage_set_ns;
		SCMCLW_OUTRO_IRpcMessage_set_ns;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall set_nsuri(const char * nsuri)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_set_nsuri;
		SCMCLW_INTRO_IRpcMessage_set_nsuri;
#endif
		_o.set_nsuri(nsuri);
#ifdef SCMCLW_OUTRO_IRpcMessage_set_nsuri;
		SCMCLW_OUTRO_IRpcMessage_set_nsuri;
#endif
		SCMCLW_OUTRO;
	}
	StringBuffer & _stdcall get_nsuri(StringBuffer & nsuri)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_nsuri;
		SCMCLW_INTRO_IRpcMessage_get_nsuri;
#endif
		StringBuffer & _return;
		_return = _o.get_nsuri(nsuri);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_nsuri;
		SCMCLW_OUTRO_IRpcMessage_get_nsuri;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall get_text()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_text;
		SCMCLW_INTRO_IRpcMessage_get_text;
#endif
		char * _return;
		_return = _o.get_text();
#ifdef SCMCLW_OUTRO_IRpcMessage_get_text;
		SCMCLW_OUTRO_IRpcMessage_get_text;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall set_text(const char * text)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_set_text;
		SCMCLW_INTRO_IRpcMessage_set_text;
#endif
		_o.set_text(text);
#ifdef SCMCLW_OUTRO_IRpcMessage_set_text;
		SCMCLW_OUTRO_IRpcMessage_set_text;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall append_text(const char * text)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_append_text;
		SCMCLW_INTRO_IRpcMessage_append_text;
#endif
		_o.append_text(text);
#ifdef SCMCLW_OUTRO_IRpcMessage_append_text;
		SCMCLW_OUTRO_IRpcMessage_append_text;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall get_value(const char * path, StringAttr & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, StringBuffer & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, StringBuffer & value, bool bSimpleXml)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value, bSimpleXml);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, int & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, long & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, __int64 & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, unsigned long & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, unsigned & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, unsigned short & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, unsigned char & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, short & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, bool & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, double & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, float & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, StringArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, StringArray & value, bool simpleXml)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value, simpleXml);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, IntArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, ShortArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, Int64Array & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, BoolArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, FloatArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall get_value(const char * path, DoubleArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_get_value;
		SCMCLW_INTRO_IRpcMessage_get_value;
#endif
		bool _return;
		_return = _o.get_value(path, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_get_value;
		SCMCLW_OUTRO_IRpcMessage_get_value;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, const char * value, bool encodeXml)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value, encodeXml);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, const char * value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, StringBuffer & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, long value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, __int64 value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, unsigned long value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, int value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, unsigned value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, unsigned short value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, bool value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, double value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * childns, const char * childname, const char * childtype, StringArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, childns, childname, childtype, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * childns, const char * childname, const char * childtype, ShortArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, childns, childname, childtype, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * childns, const char * childname, const char * childtype, IntArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, childns, childname, childtype, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * childns, const char * childname, const char * childtype, Int64Array & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, childns, childname, childtype, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * childns, const char * childname, const char * childtype, BoolArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, childns, childname, childtype, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * childns, const char * childname, const char * childtype, FloatArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, childns, childname, childtype, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * childns, const char * childname, const char * childtype, DoubleArray & value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, childns, childname, childtype, value);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * ns, const char * name, const char * type, const char * value, IProperties & attrs)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, ns, name, type, value, attrs);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_value(const char * path, const char * name, const char * value, IProperties & attrs)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_value;
		SCMCLW_INTRO_IRpcMessage_add_value;
#endif
		_o.add_value(path, name, value, attrs);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_value;
		SCMCLW_OUTRO_IRpcMessage_add_value;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall add_attr(const char * path, const char * name, const char * value, IProperties & attrs)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_add_attr;
		SCMCLW_INTRO_IRpcMessage_add_attr;
#endif
		_o.add_attr(path, name, value, attrs);
#ifdef SCMCLW_OUTRO_IRpcMessage_add_attr;
		SCMCLW_OUTRO_IRpcMessage_add_attr;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall unmarshall(XJXPullParser * xpp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_unmarshall;
		SCMCLW_INTRO_IRpcMessage_unmarshall;
#endif
		_o.unmarshall(xpp);
#ifdef SCMCLW_OUTRO_IRpcMessage_unmarshall;
		SCMCLW_OUTRO_IRpcMessage_unmarshall;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall marshall(StringBuffer & outbuf, CMimeMultiPart * multipart)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_marshall;
		SCMCLW_INTRO_IRpcMessage_marshall;
#endif
		_o.marshall(outbuf, multipart);
#ifdef SCMCLW_OUTRO_IRpcMessage_marshall;
		SCMCLW_OUTRO_IRpcMessage_marshall;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall simple_marshall(StringBuffer & outbuf)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_simple_marshall;
		SCMCLW_INTRO_IRpcMessage_simple_marshall;
#endif
		_o.simple_marshall(outbuf);
#ifdef SCMCLW_OUTRO_IRpcMessage_simple_marshall;
		SCMCLW_OUTRO_IRpcMessage_simple_marshall;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setEncodeXml(bool encode)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_setEncodeXml;
		SCMCLW_INTRO_IRpcMessage_setEncodeXml;
#endif
		_o.setEncodeXml(encode);
#ifdef SCMCLW_OUTRO_IRpcMessage_setEncodeXml;
		SCMCLW_OUTRO_IRpcMessage_setEncodeXml;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall getEncodeXml()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_getEncodeXml;
		SCMCLW_INTRO_IRpcMessage_getEncodeXml;
#endif
		bool _return;
		_return = _o.getEncodeXml();
#ifdef SCMCLW_OUTRO_IRpcMessage_getEncodeXml;
		SCMCLW_OUTRO_IRpcMessage_getEncodeXml;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setSerializedContent(const char * c)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessage_setSerializedContent;
		SCMCLW_INTRO_IRpcMessage_setSerializedContent;
#endif
		_o.setSerializedContent(c);
#ifdef SCMCLW_OUTRO_IRpcMessage_setSerializedContent;
		SCMCLW_OUTRO_IRpcMessage_setSerializedContent;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IRpcSerializable 
class SCMCLWSTUB_IRpcSerializable: public SCMStubBase, implements IRpcSerializable // interface
	IRpcSerializable &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IRpcSerializable(IRpcSerializable *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IRpcSerializable() { _o.Release(); } 
	void _stdcall serialize(IEspContext * ctx, StringBuffer & buffer, const char * rootname)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcSerializable_serialize;
		SCMCLW_INTRO_IRpcSerializable_serialize;
#endif
		_o.serialize(ctx, buffer, rootname);
#ifdef SCMCLW_OUTRO_IRpcSerializable_serialize;
		SCMCLW_OUTRO_IRpcSerializable_serialize;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall unserialize(IRpcMessage & rpc, const char * tagname, const char * basepath)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcSerializable_unserialize;
		SCMCLW_INTRO_IRpcSerializable_unserialize;
#endif
		bool _return;
		_return = _o.unserialize(rpc, tagname, basepath);
#ifdef SCMCLW_OUTRO_IRpcSerializable_unserialize;
		SCMCLW_OUTRO_IRpcSerializable_unserialize;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for ISoapService 
class SCMCLWSTUB_ISoapService: public SCMStubBase, implements ISoapService // interface
	ISoapService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_ISoapService(ISoapService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_ISoapService() { _o.Release(); } 
	int _stdcall processRequest(ISoapMessage & request, ISoapMessage & response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapService_processRequest;
		SCMCLW_INTRO_ISoapService_processRequest;
#endif
		int _return;
		_return = _o.processRequest(request, response);
#ifdef SCMCLW_OUTRO_ISoapService_processRequest;
		SCMCLW_OUTRO_ISoapService_processRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for ISoapClient 
class SCMCLWSTUB_ISoapClient: public SCMStubBase, implements ISoapClient // interface
	ISoapClient &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_ISoapClient(ISoapClient *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_ISoapClient() { _o.Release(); } 
	int _stdcall setUsernameToken(const char * username, const char * password, const char * realm)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_setUsernameToken;
		SCMCLW_INTRO_ISoapClient_setUsernameToken;
#endif
		int _return;
		_return = _o.setUsernameToken(username, password, realm);
#ifdef SCMCLW_OUTRO_ISoapClient_setUsernameToken;
		SCMCLW_OUTRO_ISoapClient_setUsernameToken;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall disableKeepAlive()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_disableKeepAlive;
		SCMCLW_INTRO_ISoapClient_disableKeepAlive;
#endif
		_o.disableKeepAlive();
#ifdef SCMCLW_OUTRO_ISoapClient_disableKeepAlive;
		SCMCLW_OUTRO_ISoapClient_disableKeepAlive;
#endif
		SCMCLW_OUTRO;
	}
	int _stdcall postRequest(IRpcMessage & rpccall, IRpcMessage & response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(rpccall, response);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(const char * soapaction, IRpcMessage & rpccall, IRpcMessage & response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(soapaction, rpccall, response);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(const char * soapaction, IRpcMessage & rpccall, StringBuffer & responsebuf)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(soapaction, rpccall, responsebuf);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(const char * contenttype, const char * soapaction, IRpcMessage & rpccall, IRpcMessage & response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(contenttype, soapaction, rpccall, response);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(const char * contenttype, const char * soapaction, IRpcMessage & rpccall, StringBuffer & responsebuf)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(contenttype, soapaction, rpccall, responsebuf);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(IRpcMessage & rpccall, StringBuffer & responsebuf)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(rpccall, responsebuf);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(IRpcMessage & rpccall, StringBuffer & responsebuf, IRpcMessageArray * headers)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(rpccall, responsebuf, headers);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(const char * contenttype, const char * soapaction, IRpcMessage & rpccall, StringBuffer & responsebuf, IRpcMessageArray * headers)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(contenttype, soapaction, rpccall, responsebuf, headers);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall postRequest(const char * soapaction, IRpcMessage & rpccall, StringBuffer & responsebuf, IRpcMessageArray * headers)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ISoapClient_postRequest;
		SCMCLW_INTRO_ISoapClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(soapaction, rpccall, responsebuf, headers);
#ifdef SCMCLW_OUTRO_ISoapClient_postRequest;
		SCMCLW_OUTRO_ISoapClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IHttpServerService 
class SCMCLWSTUB_IHttpServerService: public SCMStubBase, implements IHttpServerService // interface
	IHttpServerService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IHttpServerService(IHttpServerService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IHttpServerService() { _o.Release(); } 
	int _stdcall processRequest()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IHttpServerService_processRequest;
		SCMCLW_INTRO_IHttpServerService_processRequest;
#endif
		int _return;
		_return = _o.processRequest();
#ifdef SCMCLW_OUTRO_IHttpServerService_processRequest;
		SCMCLW_OUTRO_IHttpServerService_processRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall onPost()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IHttpServerService_onPost;
		SCMCLW_INTRO_IHttpServerService_onPost;
#endif
		int _return;
		_return = _o.onPost();
#ifdef SCMCLW_OUTRO_IHttpServerService_onPost;
		SCMCLW_OUTRO_IHttpServerService_onPost;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall onGet()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IHttpServerService_onGet;
		SCMCLW_INTRO_IHttpServerService_onGet;
#endif
		int _return;
		_return = _o.onGet();
#ifdef SCMCLW_OUTRO_IHttpServerService_onGet;
		SCMCLW_OUTRO_IHttpServerService_onGet;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for ITransportClient 
class SCMCLWSTUB_ITransportClient: public SCMStubBase, implements ITransportClient // interface
	ITransportClient &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_ITransportClient(ITransportClient *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_ITransportClient() { _o.Release(); } 
	int _stdcall postRequest(ISoapMessage & request, ISoapMessage & response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_ITransportClient_postRequest;
		SCMCLW_INTRO_ITransportClient_postRequest;
#endif
		int _return;
		_return = _o.postRequest(request, response);
#ifdef SCMCLW_OUTRO_ITransportClient_postRequest;
		SCMCLW_OUTRO_ITransportClient_postRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspSoapBinding 
class SCMCLWSTUB_IEspSoapBinding: public SCMStubBase, implements IEspSoapBinding // interface
	IEspSoapBinding &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspSoapBinding(IEspSoapBinding *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspSoapBinding() { _o.Release(); } 
	int _stdcall processRequest(IRpcMessage * rpc_call, IRpcMessage * rpc_response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSoapBinding_processRequest;
		SCMCLW_INTRO_IEspSoapBinding_processRequest;
#endif
		int _return;
		_return = _o.processRequest(rpc_call, rpc_response);
#ifdef SCMCLW_OUTRO_IEspSoapBinding_processRequest;
		SCMCLW_OUTRO_IEspSoapBinding_processRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IRpcMessageBinding 
class SCMCLWSTUB_IRpcMessageBinding: public SCMStubBase, implements IRpcMessageBinding // interface
	IRpcMessageBinding &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IRpcMessageBinding(IRpcMessageBinding *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IRpcMessageBinding() { _o.Release(); } 
	void _stdcall setClientValue(unsigned val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_setClientValue;
		SCMCLW_INTRO_IRpcMessageBinding_setClientValue;
#endif
		_o.setClientValue(val);
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_setClientValue;
		SCMCLW_OUTRO_IRpcMessageBinding_setClientValue;
#endif
		SCMCLW_OUTRO;
	}
	unsigned _stdcall getClientValue()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_getClientValue;
		SCMCLW_INTRO_IRpcMessageBinding_getClientValue;
#endif
		unsigned _return;
		_return = _o.getClientValue();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_getClientValue;
		SCMCLW_OUTRO_IRpcMessageBinding_getClientValue;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setReqId(unsigned val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_setReqId;
		SCMCLW_INTRO_IRpcMessageBinding_setReqId;
#endif
		_o.setReqId(val);
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_setReqId;
		SCMCLW_OUTRO_IRpcMessageBinding_setReqId;
#endif
		SCMCLW_OUTRO;
	}
	unsigned _stdcall getReqId()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_getReqId;
		SCMCLW_INTRO_IRpcMessageBinding_getReqId;
#endif
		unsigned _return;
		_return = _o.getReqId();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_getReqId;
		SCMCLW_OUTRO_IRpcMessageBinding_getReqId;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setEventSink(int, void * val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_setEventSink;
		SCMCLW_INTRO_IRpcMessageBinding_setEventSink;
#endif
		_o.setEventSink(val);
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_setEventSink;
		SCMCLW_OUTRO_IRpcMessageBinding_setEventSink;
#endif
		SCMCLW_OUTRO;
	}
	void * _stdcall getEventSink()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_getEventSink;
		SCMCLW_INTRO_IRpcMessageBinding_getEventSink;
#endif
		void * _return;
		_return = _o.getEventSink();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_getEventSink;
		SCMCLW_OUTRO_IRpcMessageBinding_getEventSink;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setState(IInterface * state)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_setState;
		SCMCLW_INTRO_IRpcMessageBinding_setState;
#endif
		_o.setState(state);
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_setState;
		SCMCLW_OUTRO_IRpcMessageBinding_setState;
#endif
		SCMCLW_OUTRO;
	}
	IInterface * _stdcall queryState()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_queryState;
		SCMCLW_INTRO_IRpcMessageBinding_queryState;
#endif
		IInterface * _return;
		_return = _o.queryState();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_queryState;
		SCMCLW_OUTRO_IRpcMessageBinding_queryState;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setThunkHandle(int, void * val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_setThunkHandle;
		SCMCLW_INTRO_IRpcMessageBinding_setThunkHandle;
#endif
		_o.setThunkHandle(val);
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_setThunkHandle;
		SCMCLW_OUTRO_IRpcMessageBinding_setThunkHandle;
#endif
		SCMCLW_OUTRO;
	}
	void * _stdcall getThunkHandle()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_getThunkHandle;
		SCMCLW_INTRO_IRpcMessageBinding_getThunkHandle;
#endif
		void * _return;
		_return = _o.getThunkHandle();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_getThunkHandle;
		SCMCLW_OUTRO_IRpcMessageBinding_getThunkHandle;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setMethod(const char * method)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_setMethod;
		SCMCLW_INTRO_IRpcMessageBinding_setMethod;
#endif
		_o.setMethod(method);
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_setMethod;
		SCMCLW_OUTRO_IRpcMessageBinding_setMethod;
#endif
		SCMCLW_OUTRO;
	}
	const char * _stdcall getMethod()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_getMethod;
		SCMCLW_INTRO_IRpcMessageBinding_getMethod;
#endif
		char * _return;
		_return = _o.getMethod();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_getMethod;
		SCMCLW_OUTRO_IRpcMessageBinding_getMethod;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall lock()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_lock;
		SCMCLW_INTRO_IRpcMessageBinding_lock;
#endif
		_o.lock();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_lock;
		SCMCLW_OUTRO_IRpcMessageBinding_lock;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall unlock()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcMessageBinding_unlock;
		SCMCLW_INTRO_IRpcMessageBinding_unlock;
#endif
		_o.unlock();
#ifdef SCMCLW_OUTRO_IRpcMessageBinding_unlock;
		SCMCLW_OUTRO_IRpcMessageBinding_unlock;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IRpcResponseBinding 
class SCMCLWSTUB_IRpcResponseBinding: public SCMStubBase, implements IRpcResponseBinding // interface
	IRpcResponseBinding &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IRpcResponseBinding(IRpcResponseBinding *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IRpcResponseBinding() { _o.Release(); } 
	void _stdcall setRpcState(RpcMessageState state)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcResponseBinding_setRpcState;
		SCMCLW_INTRO_IRpcResponseBinding_setRpcState;
#endif
		_o.setRpcState(state);
#ifdef SCMCLW_OUTRO_IRpcResponseBinding_setRpcState;
		SCMCLW_OUTRO_IRpcResponseBinding_setRpcState;
#endif
		SCMCLW_OUTRO;
	}
	RpcMessageState _stdcall getRpcState()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcResponseBinding_getRpcState;
		SCMCLW_INTRO_IRpcResponseBinding_getRpcState;
#endif
		RpcMessageState _return;
		_return = _o.getRpcState();
#ifdef SCMCLW_OUTRO_IRpcResponseBinding_getRpcState;
		SCMCLW_OUTRO_IRpcResponseBinding_getRpcState;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall unserialize(IRpcMessage & rpc_response, const char * tag, const char * path)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcResponseBinding_unserialize;
		SCMCLW_INTRO_IRpcResponseBinding_unserialize;
#endif
		bool _return;
		_return = _o.unserialize(rpc_response, tag, path);
#ifdef SCMCLW_OUTRO_IRpcResponseBinding_unserialize;
		SCMCLW_OUTRO_IRpcResponseBinding_unserialize;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IRpcRequestBinding 
class SCMCLWSTUB_IRpcRequestBinding: public SCMStubBase, implements IRpcRequestBinding // interface
	IRpcRequestBinding &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IRpcRequestBinding(IRpcRequestBinding *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IRpcRequestBinding() { _o.Release(); } 
	const char * _stdcall getUrl()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcRequestBinding_getUrl;
		SCMCLW_INTRO_IRpcRequestBinding_getUrl;
#endif
		char * _return;
		_return = _o.getUrl();
#ifdef SCMCLW_OUTRO_IRpcRequestBinding_getUrl;
		SCMCLW_OUTRO_IRpcRequestBinding_getUrl;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setUrl(const char * val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcRequestBinding_setUrl;
		SCMCLW_INTRO_IRpcRequestBinding_setUrl;
#endif
		_o.setUrl(val);
#ifdef SCMCLW_OUTRO_IRpcRequestBinding_setUrl;
		SCMCLW_OUTRO_IRpcRequestBinding_setUrl;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall serialize(IRpcMessage & rpc_response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcRequestBinding_serialize;
		SCMCLW_INTRO_IRpcRequestBinding_serialize;
#endif
		_o.serialize(rpc_response);
#ifdef SCMCLW_OUTRO_IRpcRequestBinding_serialize;
		SCMCLW_OUTRO_IRpcRequestBinding_serialize;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall post(IRpcResponseBinding & response)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IRpcRequestBinding_post;
		SCMCLW_INTRO_IRpcRequestBinding_post;
#endif
		_o.post(response);
#ifdef SCMCLW_OUTRO_IRpcRequestBinding_post;
		SCMCLW_OUTRO_IRpcRequestBinding_post;
#endif
		SCMCLW_OUTRO;
	}
};
//end
