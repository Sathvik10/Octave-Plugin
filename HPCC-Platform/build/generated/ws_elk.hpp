// *** Include file generated by HIDL Version 1.3 from ws_elk.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_elk_SCM_INCL
#define ws_elk_SCM_INCL

#include "esp.hpp"

interface IConstGetConfigDetailsRequest : extends IEspRequest
{
};

interface IEspGetConfigDetailsRequest : extends IConstGetConfigDetailsRequest
{
	virtual void copy(IConstGetConfigDetailsRequest &from)=0;
};

interface IClientGetConfigDetailsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstGetConfigDetailsResponse : extends IEspResponse
{
	virtual bool getIntegrateKibana()=0;
	virtual const char * getKibanaAddress()=0;
	virtual const char * getKibanaPort()=0;
	virtual const char * getKibanaEntryPointURI()=0;
	virtual bool getReportElasticSearchHealth()=0;
	virtual const char * getElasticSearchAddresses()=0;
	virtual const char * getElasticSearchPort()=0;
	virtual bool getReportLogStashHealth()=0;
	virtual const char * getLogStashAddress()=0;
	virtual const char * getLogStashPort()=0;
};

interface IEspGetConfigDetailsResponse : extends IConstGetConfigDetailsResponse
{
	virtual void setIntegrateKibana(bool val)=0;
	virtual void setKibanaAddress(const char * val)=0;
	virtual void setKibanaPort(const char * val)=0;
	virtual void setKibanaEntryPointURI(const char * val)=0;
	virtual void setReportElasticSearchHealth(bool val)=0;
	virtual void setElasticSearchAddresses(const char * val)=0;
	virtual void setElasticSearchPort(const char * val)=0;
	virtual void setReportLogStashHealth(bool val)=0;
	virtual void setLogStashAddress(const char * val)=0;
	virtual void setLogStashPort(const char * val)=0;
	virtual void copy(IConstGetConfigDetailsResponse &from)=0;
};

interface IClientGetConfigDetailsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getIntegrateKibana()=0;
	virtual const char * getKibanaAddress()=0;
	virtual const char * getKibanaPort()=0;
	virtual const char * getKibanaEntryPointURI()=0;
	virtual bool getReportElasticSearchHealth()=0;
	virtual const char * getElasticSearchAddresses()=0;
	virtual const char * getElasticSearchPort()=0;
	virtual bool getReportLogStashHealth()=0;
	virtual const char * getLogStashAddress()=0;
	virtual const char * getLogStashPort()=0;
};



interface IConstws_elkPingRequest : extends IEspRequest
{
};

interface IEspws_elkPingRequest : extends IConstws_elkPingRequest
{
	virtual void copy(IConstws_elkPingRequest &from)=0;
};

interface IClientws_elkPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstws_elkPingResponse : extends IEspResponse
{
};

interface IEspws_elkPingResponse : extends IConstws_elkPingResponse
{
	virtual void copy(IConstws_elkPingResponse &from)=0;
};

interface IClientws_elkPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspws_elk : extends IEspService
{
	virtual bool onGetConfigDetails(IEspContext &context, IEspGetConfigDetailsRequest &req, IEspGetConfigDetailsResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspws_elkPingRequest &req, IEspws_elkPingResponse &resp)=0;
};

interface IClientws_elkEvents : extends IInterface
{
	virtual int onGetConfigDetailsComplete(IClientGetConfigDetailsResponse *resp,IInterface* state)=0;
	virtual int onGetConfigDetailsError(IClientGetConfigDetailsResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientws_elkPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientws_elkPingResponse *resp,IInterface* state)=0;
};

interface IClientws_elk : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientGetConfigDetailsRequest * createGetConfigDetailsRequest()=0;
	virtual IClientGetConfigDetailsResponse * GetConfigDetails(IClientGetConfigDetailsRequest *request)=0;
	virtual void async_GetConfigDetails(IClientGetConfigDetailsRequest *request, IClientws_elkEvents *events,IInterface* state=0)=0;

	virtual IClientws_elkPingRequest * createPingRequest()=0;
	virtual IClientws_elkPingResponse * Ping(IClientws_elkPingRequest *request)=0;
	virtual void async_Ping(IClientws_elkPingRequest *request, IClientws_elkEvents *events,IInterface* state=0)=0;


	virtual IClientGetConfigDetailsResponse *GetConfigDetailsFn()=0;

	virtual IClientws_elkPingResponse *PingFn()=0;
};



#ifndef ws_elk_API
#define ws_elk_API
#endif //ws_elk_API



extern "C" ws_elk_API IClientws_elk * createws_elkClient();



extern "C"  IEspGetConfigDetailsRequest *createGetConfigDetailsRequest(const char *serv=NULL);
extern "C"  IClientGetConfigDetailsRequest *createClientGetConfigDetailsRequest(const char *serv=NULL);
extern "C"  IEspGetConfigDetailsResponse *createGetConfigDetailsResponse(const char *serv=NULL);
extern "C"  IClientGetConfigDetailsResponse *createClientGetConfigDetailsResponse(const char *serv=NULL);
extern "C"  IEspws_elkPingRequest *createws_elkPingRequest(const char *serv=NULL);
extern "C"  IClientws_elkPingRequest *createClientws_elkPingRequest(const char *serv=NULL);
extern "C"  IEspws_elkPingResponse *createws_elkPingResponse(const char *serv=NULL);
extern "C"  IClientws_elkPingResponse *createClientws_elkPingResponse(const char *serv=NULL);

#endif // _ws_elk_SCM_INCL
//end
