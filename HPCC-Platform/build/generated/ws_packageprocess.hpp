// *** Include file generated by HIDL Version 1.3 from ws_packageprocess.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_packageprocess_SCM_INCL
#define ws_packageprocess_SCM_INCL

#include "esp.hpp"



interface IConstEchoRequest : extends IEspRequest
{
	virtual const char * getRequest()=0;
};

interface IEspEchoRequest : extends IConstEchoRequest
{
	virtual void setRequest(const char * val)=0;
	virtual void copy(IConstEchoRequest &from)=0;
};

interface IClientEchoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setRequest(const char * val)=0;
};



interface IConstEchoResponse : extends IEspResponse
{
	virtual const char * getResponse()=0;
};

interface IEspEchoResponse : extends IConstEchoResponse
{
	virtual void setResponse(const char * val)=0;
	virtual void copy(IConstEchoResponse &from)=0;
};

interface IClientEchoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getResponse()=0;
};



interface IConstBasePackageStatus : extends IEspStruct
{
	virtual int getCode()=0;
	virtual const char * getDescription()=0;
};

interface IEspBasePackageStatus : extends IConstBasePackageStatus
{
	virtual void setCode(int val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void copy(IConstBasePackageStatus &from)=0;
};

interface IClientBasePackageStatus : extends IInterface
{
	virtual void setCode(int val)=0;
	virtual void setDescription(const char * val)=0;
	virtual int getCode()=0;
	virtual const char * getDescription()=0;
};



interface IConstPackageMapEntry : extends IEspStruct
{
	virtual const char * getId()=0;
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
};

interface IEspPackageMapEntry : extends IConstPackageMapEntry
{
	virtual void setId(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void copy(IConstPackageMapEntry &from)=0;
};

interface IClientPackageMapEntry : extends IInterface
{
	virtual void setId(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual const char * getId()=0;
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
};



interface IConstAddPackageRequest : extends IEspRequest
{
	virtual const char * getInfo()=0;
	virtual bool getActivate()=0;
	virtual bool getOverWrite()=0;
	virtual const char * getTarget()=0;
	virtual const char * getPackageMap()=0;
	virtual const char * getProcess()=0;
	virtual const char * getDaliIp()=0;
	virtual bool getGlobalScope()=0;
	virtual const char * getSourceProcess()=0;
	virtual bool getAllowForeignFiles()=0;
	virtual bool getPreloadAllPackages()=0;
	virtual bool getReplacePackageMap()=0;
	virtual bool getUpdateSuperFiles()=0;
	virtual bool getUpdateCloneFrom()=0;
	virtual bool getAppendCluster()=0;
};

interface IEspAddPackageRequest : extends IConstAddPackageRequest
{
	virtual void setInfo(const char * val)=0;
	virtual void setActivate(bool val)=0;
	virtual void setOverWrite(bool val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setDaliIp(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setSourceProcess(const char * val)=0;
	virtual void setAllowForeignFiles(bool val)=0;
	virtual void setPreloadAllPackages(bool val)=0;
	virtual void setReplacePackageMap(bool val)=0;
	virtual void setUpdateSuperFiles(bool val)=0;
	virtual void setUpdateCloneFrom(bool val)=0;
	virtual void setAppendCluster(bool val)=0;
	virtual void copy(IConstAddPackageRequest &from)=0;
};

interface IClientAddPackageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setInfo(const char * val)=0;
	virtual void setActivate(bool val)=0;
	virtual void setOverWrite(bool val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setDaliIp(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setSourceProcess(const char * val)=0;
	virtual void setAllowForeignFiles(bool val)=0;
	virtual void setPreloadAllPackages(bool val)=0;
	virtual void setReplacePackageMap(bool val)=0;
	virtual void setUpdateSuperFiles(bool val)=0;
	virtual void setUpdateCloneFrom(bool val)=0;
	virtual void setAppendCluster(bool val)=0;
};




interface IConstAddPackageResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getFilesNotFound()=0;
};

interface IEspAddPackageResponse : extends IConstAddPackageResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setFilesNotFound(StringArray &val)=0;
	virtual void copy(IConstAddPackageResponse &from)=0;
};

interface IClientAddPackageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getFilesNotFound()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstCopyPackageMapRequest : extends IEspRequest
{
	virtual const char * getSourcePath()=0;
	virtual const char * getRemoteUserName()=0;
	virtual const char * getRemotePassword()=0;
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
	virtual const char * getPMID()=0;
	virtual bool getActivate()=0;
	virtual const char * getDaliIp()=0;
	virtual bool getGlobalScope()=0;
	virtual const char * getSourceProcess()=0;
	virtual bool getPreloadAllPackages()=0;
	virtual bool getReplacePackageMap()=0;
	virtual bool getUpdateSuperFiles()=0;
	virtual bool getUpdateCloneFrom()=0;
	virtual bool getAppendCluster()=0;
};

interface IEspCopyPackageMapRequest : extends IConstCopyPackageMapRequest
{
	virtual void setSourcePath(const char * val)=0;
	virtual void setRemoteUserName(const char * val)=0;
	virtual void setRemotePassword(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setPMID(const char * val)=0;
	virtual void setActivate(bool val)=0;
	virtual void setDaliIp(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setSourceProcess(const char * val)=0;
	virtual void setPreloadAllPackages(bool val)=0;
	virtual void setReplacePackageMap(bool val)=0;
	virtual void setUpdateSuperFiles(bool val)=0;
	virtual void setUpdateCloneFrom(bool val)=0;
	virtual void setAppendCluster(bool val)=0;
	virtual void copy(IConstCopyPackageMapRequest &from)=0;
};

interface IClientCopyPackageMapRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSourcePath(const char * val)=0;
	virtual void setRemoteUserName(const char * val)=0;
	virtual void setRemotePassword(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setPMID(const char * val)=0;
	virtual void setActivate(bool val)=0;
	virtual void setDaliIp(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setSourceProcess(const char * val)=0;
	virtual void setPreloadAllPackages(bool val)=0;
	virtual void setReplacePackageMap(bool val)=0;
	virtual void setUpdateSuperFiles(bool val)=0;
	virtual void setUpdateCloneFrom(bool val)=0;
	virtual void setAppendCluster(bool val)=0;
};



interface IConstCopyPackageMapResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getFilesNotFound()=0;
};

interface IEspCopyPackageMapResponse : extends IConstCopyPackageMapResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setFilesNotFound(StringArray &val)=0;
	virtual void copy(IConstCopyPackageMapResponse &from)=0;
};

interface IClientCopyPackageMapResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getFilesNotFound()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDeletePackageRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getPackageMap()=0;
	virtual const char * getProcess()=0;
	virtual bool getGlobalScope()=0;
	virtual IArrayOf<IConstPackageMapEntry> & getPackageMaps()=0;
};

interface IEspDeletePackageRequest : extends IConstDeletePackageRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPackageMaps(IArrayOf<IEspPackageMapEntry> &val)=0;
	virtual void setPackageMaps(IArrayOf<IConstPackageMapEntry> &val)=0;
	virtual void copy(IConstDeletePackageRequest &from)=0;
};

interface IClientDeletePackageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPackageMaps(IArrayOf<IEspPackageMapEntry> &val)=0;
	virtual void setPackageMaps(IArrayOf<IConstPackageMapEntry> &val)=0;
};



interface IConstDeletePackageResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
};

interface IEspDeletePackageResponse : extends IConstDeletePackageResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void copy(IConstDeletePackageResponse &from)=0;
};

interface IClientDeletePackageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstActivatePackageRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getPackageMap()=0;
	virtual const char * getProcess()=0;
	virtual bool getGlobalScope()=0;
};

interface IEspActivatePackageRequest : extends IConstActivatePackageRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void copy(IConstActivatePackageRequest &from)=0;
};

interface IClientActivatePackageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
};



interface IConstActivatePackageResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
};

interface IEspActivatePackageResponse : extends IConstActivatePackageResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void copy(IConstActivatePackageResponse &from)=0;
};

interface IClientActivatePackageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDeActivatePackageRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getPackageMap()=0;
	virtual const char * getProcess()=0;
	virtual bool getGlobalScope()=0;
};

interface IEspDeActivatePackageRequest : extends IConstDeActivatePackageRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void copy(IConstDeActivatePackageRequest &from)=0;
};

interface IClientDeActivatePackageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
};



interface IConstDeActivatePackageResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
};

interface IEspDeActivatePackageResponse : extends IConstDeActivatePackageResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void copy(IConstDeActivatePackageResponse &from)=0;
};

interface IClientDeActivatePackageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetPackageRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
};

interface IEspGetPackageRequest : extends IConstGetPackageRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void copy(IConstGetPackageRequest &from)=0;
};

interface IClientGetPackageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
};



interface IConstGetPackageResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual const char * getInfo()=0;
};

interface IEspGetPackageResponse : extends IConstGetPackageResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setInfo(const char * val)=0;
	virtual void copy(IConstGetPackageResponse &from)=0;
};

interface IClientGetPackageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual const char * getInfo()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetPackageMapByIdRequest : extends IEspRequest
{
	virtual const char * getPackageMapId()=0;
};

interface IEspGetPackageMapByIdRequest : extends IConstGetPackageMapByIdRequest
{
	virtual void setPackageMapId(const char * val)=0;
	virtual void copy(IConstGetPackageMapByIdRequest &from)=0;
};

interface IClientGetPackageMapByIdRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setPackageMapId(const char * val)=0;
};



interface IConstGetPackageMapByIdResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual const char * getInfo()=0;
};

interface IEspGetPackageMapByIdResponse : extends IConstGetPackageMapByIdResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setInfo(const char * val)=0;
	virtual void copy(IConstGetPackageMapByIdResponse &from)=0;
};

interface IClientGetPackageMapByIdResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual const char * getInfo()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstListPackageRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
};

interface IEspListPackageRequest : extends IConstListPackageRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void copy(IConstListPackageRequest &from)=0;
};

interface IClientListPackageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
};



interface IConstPackageListData : extends IEspStruct
{
	virtual const char * getId()=0;
	virtual const char * getQueries()=0;
};

interface IEspPackageListData : extends IConstPackageListData
{
	virtual void setId(const char * val)=0;
	virtual void setQueries(const char * val)=0;
	virtual void copy(IConstPackageListData &from)=0;
};

interface IClientPackageListData : extends IInterface
{
	virtual void setId(const char * val)=0;
	virtual void setQueries(const char * val)=0;
	virtual const char * getId()=0;
	virtual const char * getQueries()=0;
};



interface IConstPackageListMapData : extends IEspStruct
{
	virtual const char * getId()=0;
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
	virtual IArrayOf<IConstPackageListData> & getPkgListData()=0;
	virtual bool getActive()=0;
	virtual const char * getDescription()=0;
};

interface IEspPackageListMapData : extends IConstPackageListMapData
{
	virtual void setId(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setPkgListData(IArrayOf<IEspPackageListData> &val)=0;
	virtual void setPkgListData(IArrayOf<IConstPackageListData> &val)=0;
	virtual void setActive(bool val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void copy(IConstPackageListMapData &from)=0;
};

interface IClientPackageListMapData : extends IInterface
{
	virtual void setId(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setPkgListData(IArrayOf<IEspPackageListData> &val)=0;
	virtual void setPkgListData(IArrayOf<IConstPackageListData> &val)=0;
	virtual void setActive(bool val)=0;
	virtual void setDescription(const char * val)=0;
	virtual const char * getId()=0;
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
	virtual IArrayOf<IConstPackageListData> & getPkgListData()=0;
	virtual bool getActive()=0;
	virtual const char * getDescription()=0;
};



interface IConstListPackageResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual IArrayOf<IConstPackageListMapData> & getPkgListMapData()=0;
};

interface IEspListPackageResponse : extends IConstListPackageResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setPkgListMapData(IArrayOf<IEspPackageListMapData> &val)=0;
	virtual void setPkgListMapData(IArrayOf<IConstPackageListMapData> &val)=0;
	virtual void copy(IConstListPackageResponse &from)=0;
};

interface IClientListPackageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual IArrayOf<IConstPackageListMapData> & getPkgListMapData()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstListPackagesRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
	virtual const char * getProcessFilter()=0;
};

interface IEspListPackagesRequest : extends IConstListPackagesRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setProcessFilter(const char * val)=0;
	virtual void copy(IConstListPackagesRequest &from)=0;
};

interface IClientListPackagesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setProcessFilter(const char * val)=0;
};



interface IConstListPackagesResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual IArrayOf<IConstPackageListMapData> & getPackageMapList()=0;
};

interface IEspListPackagesResponse : extends IConstListPackagesResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setPackageMapList(IArrayOf<IEspPackageListMapData> &val)=0;
	virtual void setPackageMapList(IArrayOf<IConstPackageListMapData> &val)=0;
	virtual void copy(IConstListPackagesResponse &from)=0;
};

interface IClientListPackagesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual IArrayOf<IConstPackageListMapData> & getPackageMapList()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstValidatePackageRequest : extends IEspRequest
{
	virtual const char * getInfo()=0;
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
	virtual bool getActive()=0;
	virtual const char * getPMID()=0;
	virtual const char * getQueryIdToVerify()=0;
	virtual StringArray & getQueriesToVerify()=0;
	virtual bool getCheckDFS()=0;
	virtual bool getGlobalScope()=0;
};

interface IEspValidatePackageRequest : extends IConstValidatePackageRequest
{
	virtual void setInfo(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setActive(bool val)=0;
	virtual void setPMID(const char * val)=0;
	virtual void setQueryIdToVerify(const char * val)=0;
	virtual void setQueriesToVerify(StringArray &val)=0;
	virtual void setCheckDFS(bool val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void copy(IConstValidatePackageRequest &from)=0;
};

interface IClientValidatePackageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setInfo(const char * val)=0;
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setActive(bool val)=0;
	virtual void setPMID(const char * val)=0;
	virtual void setQueryIdToVerify(const char * val)=0;
	virtual void setQueriesToVerify(StringArray &val)=0;
	virtual void setCheckDFS(bool val)=0;
	virtual void setGlobalScope(bool val)=0;
};



interface IConstValidatePackageInfo : extends IEspStruct
{
	virtual StringArray & getUnmatched()=0;
};

interface IEspValidatePackageInfo : extends IConstValidatePackageInfo
{
	virtual void setUnmatched(StringArray &val)=0;
	virtual void copy(IConstValidatePackageInfo &from)=0;
};

interface IClientValidatePackageInfo : extends IInterface
{
	virtual void setUnmatched(StringArray &val)=0;
	virtual StringArray & getUnmatched()=0;
};



interface IConstValidatePackageQueries : extends IEspStruct
{
	virtual StringArray & getUnmatched()=0;
};

interface IEspValidatePackageQueries : extends IConstValidatePackageQueries
{
	virtual void setUnmatched(StringArray &val)=0;
	virtual void copy(IConstValidatePackageQueries &from)=0;
};

interface IClientValidatePackageQueries : extends IInterface
{
	virtual void setUnmatched(StringArray &val)=0;
	virtual StringArray & getUnmatched()=0;
};



interface IConstValidatePackageFiles : extends IEspStruct
{
	virtual StringArray & getUnmatched()=0;
	virtual StringArray & getNotInDFS()=0;
};

interface IEspValidatePackageFiles : extends IConstValidatePackageFiles
{
	virtual void setUnmatched(StringArray &val)=0;
	virtual void setNotInDFS(StringArray &val)=0;
	virtual void copy(IConstValidatePackageFiles &from)=0;
};

interface IClientValidatePackageFiles : extends IInterface
{
	virtual void setUnmatched(StringArray &val)=0;
	virtual void setNotInDFS(StringArray &val)=0;
	virtual StringArray & getUnmatched()=0;
	virtual StringArray & getNotInDFS()=0;
};



interface IConstValidatePackageResponse : extends IEspResponse
{
	virtual const char * getPMID()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getWarnings()=0;
	virtual StringArray & getErrors()=0;
	virtual IConstValidatePackageInfo & getPackages()=0;
	virtual IConstValidatePackageQueries & getQueries()=0;
	virtual IConstValidatePackageFiles & getFiles()=0;
};

interface IEspValidatePackageResponse : extends IConstValidatePackageResponse
{
	virtual void setPMID(const char * val)=0;
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setWarnings(StringArray &val)=0;
	virtual void setErrors(StringArray &val)=0;
	virtual IEspValidatePackageInfo & updatePackages()=0;
	virtual void setPackages(IConstValidatePackageInfo &ifrom)=0;
	virtual IEspValidatePackageQueries & updateQueries()=0;
	virtual void setQueries(IConstValidatePackageQueries &ifrom)=0;
	virtual IEspValidatePackageFiles & updateFiles()=0;
	virtual void setFiles(IConstValidatePackageFiles &ifrom)=0;
	virtual void copy(IConstValidatePackageResponse &from)=0;
};

interface IClientValidatePackageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getPMID()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getWarnings()=0;
	virtual StringArray & getErrors()=0;
	virtual IConstValidatePackageInfo & getPackages()=0;
	virtual IConstValidatePackageQueries & getQueries()=0;
	virtual IConstValidatePackageFiles & getFiles()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetQueryFileMappingRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getPMID()=0;
	virtual const char * getQueryName()=0;
	virtual bool getGlobalScope()=0;
};

interface IEspGetQueryFileMappingRequest : extends IConstGetQueryFileMappingRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setPMID(const char * val)=0;
	virtual void setQueryName(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void copy(IConstGetQueryFileMappingRequest &from)=0;
};

interface IClientGetQueryFileMappingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setPMID(const char * val)=0;
	virtual void setQueryName(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
};



interface IConstSuperFile : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual StringArray & getSubFiles()=0;
};

interface IEspSuperFile : extends IConstSuperFile
{
	virtual void setName(const char * val)=0;
	virtual void setSubFiles(StringArray &val)=0;
	virtual void copy(IConstSuperFile &from)=0;
};

interface IClientSuperFile : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setSubFiles(StringArray &val)=0;
	virtual const char * getName()=0;
	virtual StringArray & getSubFiles()=0;
};



interface IConstGetQueryFileMappingResponse : extends IEspResponse
{
	virtual StringArray & getUnmappedFiles()=0;
	virtual IArrayOf<IConstSuperFile> & getSuperFiles()=0;
};

interface IEspGetQueryFileMappingResponse : extends IConstGetQueryFileMappingResponse
{
	virtual void setUnmappedFiles(StringArray &val)=0;
	virtual void setSuperFiles(IArrayOf<IEspSuperFile> &val)=0;
	virtual void setSuperFiles(IArrayOf<IConstSuperFile> &val)=0;
	virtual void copy(IConstGetQueryFileMappingResponse &from)=0;
};

interface IClientGetQueryFileMappingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual StringArray & getUnmappedFiles()=0;
	virtual IArrayOf<IConstSuperFile> & getSuperFiles()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstTargetData : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual StringArray & getProcesses()=0;
};

interface IEspTargetData : extends IConstTargetData
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setProcesses(StringArray &val)=0;
	virtual void copy(IConstTargetData &from)=0;
};

interface IClientTargetData : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setProcesses(StringArray &val)=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual StringArray & getProcesses()=0;
};



interface IConstGetPackageMapSelectOptionsRequest : extends IEspRequest
{
	virtual bool getIncludeTargets()=0;
	virtual bool getIncludeProcesses()=0;
	virtual bool getIncludeProcessFilters()=0;
};

interface IEspGetPackageMapSelectOptionsRequest : extends IConstGetPackageMapSelectOptionsRequest
{
	virtual void setIncludeTargets(bool val)=0;
	virtual void setIncludeProcesses(bool val)=0;
	virtual void setIncludeProcessFilters(bool val)=0;
	virtual void copy(IConstGetPackageMapSelectOptionsRequest &from)=0;
};

interface IClientGetPackageMapSelectOptionsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIncludeTargets(bool val)=0;
	virtual void setIncludeProcesses(bool val)=0;
	virtual void setIncludeProcessFilters(bool val)=0;
};



interface IConstGetPackageMapSelectOptionsResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual IArrayOf<IConstTargetData> & getTargets()=0;
	virtual StringArray & getProcessFilters()=0;
};

interface IEspGetPackageMapSelectOptionsResponse : extends IConstGetPackageMapSelectOptionsResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setTargets(IArrayOf<IEspTargetData> &val)=0;
	virtual void setTargets(IArrayOf<IConstTargetData> &val)=0;
	virtual void setProcessFilters(StringArray &val)=0;
	virtual void copy(IConstGetPackageMapSelectOptionsResponse &from)=0;
};

interface IClientGetPackageMapSelectOptionsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual IArrayOf<IConstTargetData> & getTargets()=0;
	virtual StringArray & getProcessFilters()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstAddPartToPackageMapRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getProcess()=0;
	virtual const char * getPackageMap()=0;
	virtual bool getGlobalScope()=0;
	virtual const char * getPartName()=0;
	virtual const char * getContent()=0;
	virtual bool getDeletePrevious()=0;
	virtual const char * getDaliIp()=0;
	virtual const char * getSourceProcess()=0;
	virtual bool getAllowForeignFiles()=0;
	virtual bool getPreloadAllPackages()=0;
	virtual bool getUpdateSuperFiles()=0;
	virtual bool getUpdateCloneFrom()=0;
	virtual bool getAppendCluster()=0;
};

interface IEspAddPartToPackageMapRequest : extends IConstAddPartToPackageMapRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPartName(const char * val)=0;
	virtual void setContent(const char * val)=0;
	virtual void setDeletePrevious(bool val)=0;
	virtual void setDaliIp(const char * val)=0;
	virtual void setSourceProcess(const char * val)=0;
	virtual void setAllowForeignFiles(bool val)=0;
	virtual void setPreloadAllPackages(bool val)=0;
	virtual void setUpdateSuperFiles(bool val)=0;
	virtual void setUpdateCloneFrom(bool val)=0;
	virtual void setAppendCluster(bool val)=0;
	virtual void copy(IConstAddPartToPackageMapRequest &from)=0;
};

interface IClientAddPartToPackageMapRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPartName(const char * val)=0;
	virtual void setContent(const char * val)=0;
	virtual void setDeletePrevious(bool val)=0;
	virtual void setDaliIp(const char * val)=0;
	virtual void setSourceProcess(const char * val)=0;
	virtual void setAllowForeignFiles(bool val)=0;
	virtual void setPreloadAllPackages(bool val)=0;
	virtual void setUpdateSuperFiles(bool val)=0;
	virtual void setUpdateCloneFrom(bool val)=0;
	virtual void setAppendCluster(bool val)=0;
};



interface IConstAddPartToPackageMapResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getFilesNotFound()=0;
};

interface IEspAddPartToPackageMapResponse : extends IConstAddPartToPackageMapResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setFilesNotFound(StringArray &val)=0;
	virtual void copy(IConstAddPartToPackageMapResponse &from)=0;
};

interface IClientAddPartToPackageMapResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual StringArray & getFilesNotFound()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstRemovePartFromPackageMapRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getPackageMap()=0;
	virtual bool getGlobalScope()=0;
	virtual const char * getPartName()=0;
};

interface IEspRemovePartFromPackageMapRequest : extends IConstRemovePartFromPackageMapRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPartName(const char * val)=0;
	virtual void copy(IConstRemovePartFromPackageMapRequest &from)=0;
};

interface IClientRemovePartFromPackageMapRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPartName(const char * val)=0;
};



interface IConstRemovePartFromPackageMapResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
};

interface IEspRemovePartFromPackageMapResponse : extends IConstRemovePartFromPackageMapResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void copy(IConstRemovePartFromPackageMapResponse &from)=0;
};

interface IClientRemovePartFromPackageMapResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetPartFromPackageMapRequest : extends IEspRequest
{
	virtual const char * getTarget()=0;
	virtual const char * getPackageMap()=0;
	virtual bool getGlobalScope()=0;
	virtual const char * getPartName()=0;
};

interface IEspGetPartFromPackageMapRequest : extends IConstGetPartFromPackageMapRequest
{
	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPartName(const char * val)=0;
	virtual void copy(IConstGetPartFromPackageMapRequest &from)=0;
};

interface IClientGetPartFromPackageMapRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTarget(const char * val)=0;
	virtual void setPackageMap(const char * val)=0;
	virtual void setGlobalScope(bool val)=0;
	virtual void setPartName(const char * val)=0;
};



interface IConstGetPartFromPackageMapResponse : extends IEspResponse
{
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual const char * getContent()=0;
};

interface IEspGetPartFromPackageMapResponse : extends IConstGetPartFromPackageMapResponse
{
	virtual IEspBasePackageStatus & updateStatus()=0;
	virtual void setStatus(IConstBasePackageStatus &ifrom)=0;
	virtual void setContent(const char * val)=0;
	virtual void copy(IConstGetPartFromPackageMapResponse &from)=0;
};

interface IClientGetPartFromPackageMapResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstBasePackageStatus & getStatus()=0;
	virtual const char * getContent()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstWsPackageProcessPingRequest : extends IEspRequest
{
};

interface IEspWsPackageProcessPingRequest : extends IConstWsPackageProcessPingRequest
{
	virtual void copy(IConstWsPackageProcessPingRequest &from)=0;
};

interface IClientWsPackageProcessPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstWsPackageProcessPingResponse : extends IEspResponse
{
};

interface IEspWsPackageProcessPingResponse : extends IConstWsPackageProcessPingResponse
{
	virtual void copy(IConstWsPackageProcessPingResponse &from)=0;
};

interface IClientWsPackageProcessPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspWsPackageProcess : extends IEspService
{
	virtual bool onActivatePackage(IEspContext &context, IEspActivatePackageRequest &req, IEspActivatePackageResponse &resp)=0;
	virtual bool onAddPackage(IEspContext &context, IEspAddPackageRequest &req, IEspAddPackageResponse &resp)=0;
	virtual bool onAddPartToPackageMap(IEspContext &context, IEspAddPartToPackageMapRequest &req, IEspAddPartToPackageMapResponse &resp)=0;
	virtual bool onCopyPackageMap(IEspContext &context, IEspCopyPackageMapRequest &req, IEspCopyPackageMapResponse &resp)=0;
	virtual bool onDeActivatePackage(IEspContext &context, IEspDeActivatePackageRequest &req, IEspDeActivatePackageResponse &resp)=0;
	virtual bool onDeletePackage(IEspContext &context, IEspDeletePackageRequest &req, IEspDeletePackageResponse &resp)=0;
	virtual bool onEcho(IEspContext &context, IEspEchoRequest &req, IEspEchoResponse &resp)=0;
	virtual bool onGetPackage(IEspContext &context, IEspGetPackageRequest &req, IEspGetPackageResponse &resp)=0;
	virtual bool onGetPackageMapById(IEspContext &context, IEspGetPackageMapByIdRequest &req, IEspGetPackageMapByIdResponse &resp)=0;
	virtual bool onGetPackageMapSelectOptions(IEspContext &context, IEspGetPackageMapSelectOptionsRequest &req, IEspGetPackageMapSelectOptionsResponse &resp)=0;
	virtual bool onGetPartFromPackageMap(IEspContext &context, IEspGetPartFromPackageMapRequest &req, IEspGetPartFromPackageMapResponse &resp)=0;
	virtual bool onGetQueryFileMapping(IEspContext &context, IEspGetQueryFileMappingRequest &req, IEspGetQueryFileMappingResponse &resp)=0;
	virtual bool onListPackage(IEspContext &context, IEspListPackageRequest &req, IEspListPackageResponse &resp)=0;
	virtual bool onListPackages(IEspContext &context, IEspListPackagesRequest &req, IEspListPackagesResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspWsPackageProcessPingRequest &req, IEspWsPackageProcessPingResponse &resp)=0;
	virtual bool onRemovePartFromPackageMap(IEspContext &context, IEspRemovePartFromPackageMapRequest &req, IEspRemovePartFromPackageMapResponse &resp)=0;
	virtual bool onValidatePackage(IEspContext &context, IEspValidatePackageRequest &req, IEspValidatePackageResponse &resp)=0;
};

interface IClientWsPackageProcessEvents : extends IInterface
{
	virtual int onActivatePackageComplete(IClientActivatePackageResponse *resp,IInterface* state)=0;
	virtual int onActivatePackageError(IClientActivatePackageResponse *resp,IInterface* state)=0;
	virtual int onAddPackageComplete(IClientAddPackageResponse *resp,IInterface* state)=0;
	virtual int onAddPackageError(IClientAddPackageResponse *resp,IInterface* state)=0;
	virtual int onAddPartToPackageMapComplete(IClientAddPartToPackageMapResponse *resp,IInterface* state)=0;
	virtual int onAddPartToPackageMapError(IClientAddPartToPackageMapResponse *resp,IInterface* state)=0;
	virtual int onCopyPackageMapComplete(IClientCopyPackageMapResponse *resp,IInterface* state)=0;
	virtual int onCopyPackageMapError(IClientCopyPackageMapResponse *resp,IInterface* state)=0;
	virtual int onDeActivatePackageComplete(IClientDeActivatePackageResponse *resp,IInterface* state)=0;
	virtual int onDeActivatePackageError(IClientDeActivatePackageResponse *resp,IInterface* state)=0;
	virtual int onDeletePackageComplete(IClientDeletePackageResponse *resp,IInterface* state)=0;
	virtual int onDeletePackageError(IClientDeletePackageResponse *resp,IInterface* state)=0;
	virtual int onEchoComplete(IClientEchoResponse *resp,IInterface* state)=0;
	virtual int onEchoError(IClientEchoResponse *resp,IInterface* state)=0;
	virtual int onGetPackageComplete(IClientGetPackageResponse *resp,IInterface* state)=0;
	virtual int onGetPackageError(IClientGetPackageResponse *resp,IInterface* state)=0;
	virtual int onGetPackageMapByIdComplete(IClientGetPackageMapByIdResponse *resp,IInterface* state)=0;
	virtual int onGetPackageMapByIdError(IClientGetPackageMapByIdResponse *resp,IInterface* state)=0;
	virtual int onGetPackageMapSelectOptionsComplete(IClientGetPackageMapSelectOptionsResponse *resp,IInterface* state)=0;
	virtual int onGetPackageMapSelectOptionsError(IClientGetPackageMapSelectOptionsResponse *resp,IInterface* state)=0;
	virtual int onGetPartFromPackageMapComplete(IClientGetPartFromPackageMapResponse *resp,IInterface* state)=0;
	virtual int onGetPartFromPackageMapError(IClientGetPartFromPackageMapResponse *resp,IInterface* state)=0;
	virtual int onGetQueryFileMappingComplete(IClientGetQueryFileMappingResponse *resp,IInterface* state)=0;
	virtual int onGetQueryFileMappingError(IClientGetQueryFileMappingResponse *resp,IInterface* state)=0;
	virtual int onListPackageComplete(IClientListPackageResponse *resp,IInterface* state)=0;
	virtual int onListPackageError(IClientListPackageResponse *resp,IInterface* state)=0;
	virtual int onListPackagesComplete(IClientListPackagesResponse *resp,IInterface* state)=0;
	virtual int onListPackagesError(IClientListPackagesResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientWsPackageProcessPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientWsPackageProcessPingResponse *resp,IInterface* state)=0;
	virtual int onRemovePartFromPackageMapComplete(IClientRemovePartFromPackageMapResponse *resp,IInterface* state)=0;
	virtual int onRemovePartFromPackageMapError(IClientRemovePartFromPackageMapResponse *resp,IInterface* state)=0;
	virtual int onValidatePackageComplete(IClientValidatePackageResponse *resp,IInterface* state)=0;
	virtual int onValidatePackageError(IClientValidatePackageResponse *resp,IInterface* state)=0;
};

interface IClientWsPackageProcess : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientActivatePackageRequest * createActivatePackageRequest()=0;
	virtual IClientActivatePackageResponse * ActivatePackage(IClientActivatePackageRequest *request)=0;
	virtual void async_ActivatePackage(IClientActivatePackageRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientAddPackageRequest * createAddPackageRequest()=0;
	virtual IClientAddPackageResponse * AddPackage(IClientAddPackageRequest *request)=0;
	virtual void async_AddPackage(IClientAddPackageRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientAddPartToPackageMapRequest * createAddPartToPackageMapRequest()=0;
	virtual IClientAddPartToPackageMapResponse * AddPartToPackageMap(IClientAddPartToPackageMapRequest *request)=0;
	virtual void async_AddPartToPackageMap(IClientAddPartToPackageMapRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientCopyPackageMapRequest * createCopyPackageMapRequest()=0;
	virtual IClientCopyPackageMapResponse * CopyPackageMap(IClientCopyPackageMapRequest *request)=0;
	virtual void async_CopyPackageMap(IClientCopyPackageMapRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientDeActivatePackageRequest * createDeActivatePackageRequest()=0;
	virtual IClientDeActivatePackageResponse * DeActivatePackage(IClientDeActivatePackageRequest *request)=0;
	virtual void async_DeActivatePackage(IClientDeActivatePackageRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientDeletePackageRequest * createDeletePackageRequest()=0;
	virtual IClientDeletePackageResponse * DeletePackage(IClientDeletePackageRequest *request)=0;
	virtual void async_DeletePackage(IClientDeletePackageRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientEchoRequest * createEchoRequest()=0;
	virtual IClientEchoResponse * Echo(IClientEchoRequest *request)=0;
	virtual void async_Echo(IClientEchoRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientGetPackageRequest * createGetPackageRequest()=0;
	virtual IClientGetPackageResponse * GetPackage(IClientGetPackageRequest *request)=0;
	virtual void async_GetPackage(IClientGetPackageRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientGetPackageMapByIdRequest * createGetPackageMapByIdRequest()=0;
	virtual IClientGetPackageMapByIdResponse * GetPackageMapById(IClientGetPackageMapByIdRequest *request)=0;
	virtual void async_GetPackageMapById(IClientGetPackageMapByIdRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientGetPackageMapSelectOptionsRequest * createGetPackageMapSelectOptionsRequest()=0;
	virtual IClientGetPackageMapSelectOptionsResponse * GetPackageMapSelectOptions(IClientGetPackageMapSelectOptionsRequest *request)=0;
	virtual void async_GetPackageMapSelectOptions(IClientGetPackageMapSelectOptionsRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientGetPartFromPackageMapRequest * createGetPartFromPackageMapRequest()=0;
	virtual IClientGetPartFromPackageMapResponse * GetPartFromPackageMap(IClientGetPartFromPackageMapRequest *request)=0;
	virtual void async_GetPartFromPackageMap(IClientGetPartFromPackageMapRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientGetQueryFileMappingRequest * createGetQueryFileMappingRequest()=0;
	virtual IClientGetQueryFileMappingResponse * GetQueryFileMapping(IClientGetQueryFileMappingRequest *request)=0;
	virtual void async_GetQueryFileMapping(IClientGetQueryFileMappingRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientListPackageRequest * createListPackageRequest()=0;
	virtual IClientListPackageResponse * ListPackage(IClientListPackageRequest *request)=0;
	virtual void async_ListPackage(IClientListPackageRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientListPackagesRequest * createListPackagesRequest()=0;
	virtual IClientListPackagesResponse * ListPackages(IClientListPackagesRequest *request)=0;
	virtual void async_ListPackages(IClientListPackagesRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientWsPackageProcessPingRequest * createPingRequest()=0;
	virtual IClientWsPackageProcessPingResponse * Ping(IClientWsPackageProcessPingRequest *request)=0;
	virtual void async_Ping(IClientWsPackageProcessPingRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientRemovePartFromPackageMapRequest * createRemovePartFromPackageMapRequest()=0;
	virtual IClientRemovePartFromPackageMapResponse * RemovePartFromPackageMap(IClientRemovePartFromPackageMapRequest *request)=0;
	virtual void async_RemovePartFromPackageMap(IClientRemovePartFromPackageMapRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;

	virtual IClientValidatePackageRequest * createValidatePackageRequest()=0;
	virtual IClientValidatePackageResponse * ValidatePackage(IClientValidatePackageRequest *request)=0;
	virtual void async_ValidatePackage(IClientValidatePackageRequest *request, IClientWsPackageProcessEvents *events,IInterface* state=0)=0;


	virtual IClientActivatePackageResponse *ActivatePackageFn(const char * Target_, const char * PackageMap_, const char * Process_, bool GlobalScope_)=0;

	virtual IClientAddPackageResponse *AddPackageFn(const char * Info_, bool Activate_, bool OverWrite_, const char * Target_, const char * PackageMap_, const char * Process_, const char * DaliIp_, bool GlobalScope_, const char * SourceProcess_, bool AllowForeignFiles_, bool PreloadAllPackages_, bool ReplacePackageMap_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_)=0;

	virtual IClientAddPartToPackageMapResponse *AddPartToPackageMapFn(const char * Target_, const char * Process_, const char * PackageMap_, bool GlobalScope_, const char * PartName_, const char * Content_, bool DeletePrevious_, const char * DaliIp_, const char * SourceProcess_, bool AllowForeignFiles_, bool PreloadAllPackages_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_)=0;

	virtual IClientCopyPackageMapResponse *CopyPackageMapFn(const char * SourcePath_, const char * RemoteUserName_, const char * RemotePassword_, const char * Target_, const char * Process_, const char * PMID_, bool Activate_, const char * DaliIp_, bool GlobalScope_, const char * SourceProcess_, bool PreloadAllPackages_, bool ReplacePackageMap_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_)=0;

	virtual IClientDeActivatePackageResponse *DeActivatePackageFn(const char * Target_, const char * PackageMap_, const char * Process_, bool GlobalScope_)=0;

	virtual IClientDeletePackageResponse *DeletePackageFn(const char * Target_, const char * PackageMap_, const char * Process_, bool GlobalScope_, IArrayOf<IConstPackageMapEntry> &PackageMaps_)=0;

	virtual IClientEchoResponse *EchoFn(const char * Request_)=0;

	virtual IClientGetPackageResponse *GetPackageFn(const char * Target_, const char * Process_)=0;

	virtual IClientGetPackageMapByIdResponse *GetPackageMapByIdFn(const char * PackageMapId_)=0;

	virtual IClientGetPackageMapSelectOptionsResponse *GetPackageMapSelectOptionsFn(bool IncludeTargets_, bool IncludeProcesses_, bool IncludeProcessFilters_)=0;

	virtual IClientGetPartFromPackageMapResponse *GetPartFromPackageMapFn(const char * Target_, const char * PackageMap_, bool GlobalScope_, const char * PartName_)=0;

	virtual IClientGetQueryFileMappingResponse *GetQueryFileMappingFn(const char * Target_, const char * PMID_, const char * QueryName_, bool GlobalScope_)=0;

	virtual IClientListPackageResponse *ListPackageFn(const char * Target_, const char * Process_)=0;

	virtual IClientListPackagesResponse *ListPackagesFn(const char * Target_, const char * Process_, const char * ProcessFilter_)=0;

	virtual IClientWsPackageProcessPingResponse *PingFn()=0;

	virtual IClientRemovePartFromPackageMapResponse *RemovePartFromPackageMapFn(const char * Target_, const char * PackageMap_, bool GlobalScope_, const char * PartName_)=0;

	virtual IClientValidatePackageResponse *ValidatePackageFn(const char * Info_, const char * Target_, const char * Process_, bool Active_, const char * PMID_, const char * QueryIdToVerify_, StringArray &QueriesToVerify_, bool CheckDFS_, bool GlobalScope_)=0;
};



#ifndef WsPackageProcess_API
#define WsPackageProcess_API
#endif //WsPackageProcess_API



extern "C" WsPackageProcess_API IClientWsPackageProcess * createWsPackageProcessClient();


extern "C"  IEspEchoRequest *createEchoRequest(const char *serv=NULL);
extern "C"  IClientEchoRequest *createClientEchoRequest(const char *serv=NULL);
extern "C"  IEspEchoResponse *createEchoResponse(const char *serv=NULL);
extern "C"  IClientEchoResponse *createClientEchoResponse(const char *serv=NULL);
extern "C"  IEspBasePackageStatus *createBasePackageStatus(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientBasePackageStatus *createClientBasePackageStatus(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspPackageMapEntry *createPackageMapEntry(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientPackageMapEntry *createClientPackageMapEntry(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspAddPackageRequest *createAddPackageRequest(const char *serv=NULL);
extern "C"  IClientAddPackageRequest *createClientAddPackageRequest(const char *serv=NULL);
extern "C"  IEspAddPackageResponse *createAddPackageResponse(const char *serv=NULL);
extern "C"  IClientAddPackageResponse *createClientAddPackageResponse(const char *serv=NULL);
extern "C"  IEspCopyPackageMapRequest *createCopyPackageMapRequest(const char *serv=NULL);
extern "C"  IClientCopyPackageMapRequest *createClientCopyPackageMapRequest(const char *serv=NULL);
extern "C"  IEspCopyPackageMapResponse *createCopyPackageMapResponse(const char *serv=NULL);
extern "C"  IClientCopyPackageMapResponse *createClientCopyPackageMapResponse(const char *serv=NULL);
extern "C"  IEspDeletePackageRequest *createDeletePackageRequest(const char *serv=NULL);
extern "C"  IClientDeletePackageRequest *createClientDeletePackageRequest(const char *serv=NULL);
extern "C"  IEspDeletePackageResponse *createDeletePackageResponse(const char *serv=NULL);
extern "C"  IClientDeletePackageResponse *createClientDeletePackageResponse(const char *serv=NULL);
extern "C"  IEspActivatePackageRequest *createActivatePackageRequest(const char *serv=NULL);
extern "C"  IClientActivatePackageRequest *createClientActivatePackageRequest(const char *serv=NULL);
extern "C"  IEspActivatePackageResponse *createActivatePackageResponse(const char *serv=NULL);
extern "C"  IClientActivatePackageResponse *createClientActivatePackageResponse(const char *serv=NULL);
extern "C"  IEspDeActivatePackageRequest *createDeActivatePackageRequest(const char *serv=NULL);
extern "C"  IClientDeActivatePackageRequest *createClientDeActivatePackageRequest(const char *serv=NULL);
extern "C"  IEspDeActivatePackageResponse *createDeActivatePackageResponse(const char *serv=NULL);
extern "C"  IClientDeActivatePackageResponse *createClientDeActivatePackageResponse(const char *serv=NULL);
extern "C"  IEspGetPackageRequest *createGetPackageRequest(const char *serv=NULL);
extern "C"  IClientGetPackageRequest *createClientGetPackageRequest(const char *serv=NULL);
extern "C"  IEspGetPackageResponse *createGetPackageResponse(const char *serv=NULL);
extern "C"  IClientGetPackageResponse *createClientGetPackageResponse(const char *serv=NULL);
extern "C"  IEspGetPackageMapByIdRequest *createGetPackageMapByIdRequest(const char *serv=NULL);
extern "C"  IClientGetPackageMapByIdRequest *createClientGetPackageMapByIdRequest(const char *serv=NULL);
extern "C"  IEspGetPackageMapByIdResponse *createGetPackageMapByIdResponse(const char *serv=NULL);
extern "C"  IClientGetPackageMapByIdResponse *createClientGetPackageMapByIdResponse(const char *serv=NULL);
extern "C"  IEspListPackageRequest *createListPackageRequest(const char *serv=NULL);
extern "C"  IClientListPackageRequest *createClientListPackageRequest(const char *serv=NULL);
extern "C"  IEspPackageListData *createPackageListData(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientPackageListData *createClientPackageListData(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspPackageListMapData *createPackageListMapData(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientPackageListMapData *createClientPackageListMapData(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspListPackageResponse *createListPackageResponse(const char *serv=NULL);
extern "C"  IClientListPackageResponse *createClientListPackageResponse(const char *serv=NULL);
extern "C"  IEspListPackagesRequest *createListPackagesRequest(const char *serv=NULL);
extern "C"  IClientListPackagesRequest *createClientListPackagesRequest(const char *serv=NULL);
extern "C"  IEspListPackagesResponse *createListPackagesResponse(const char *serv=NULL);
extern "C"  IClientListPackagesResponse *createClientListPackagesResponse(const char *serv=NULL);
extern "C"  IEspValidatePackageRequest *createValidatePackageRequest(const char *serv=NULL);
extern "C"  IClientValidatePackageRequest *createClientValidatePackageRequest(const char *serv=NULL);
extern "C"  IEspValidatePackageInfo *createValidatePackageInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientValidatePackageInfo *createClientValidatePackageInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspValidatePackageQueries *createValidatePackageQueries(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientValidatePackageQueries *createClientValidatePackageQueries(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspValidatePackageFiles *createValidatePackageFiles(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientValidatePackageFiles *createClientValidatePackageFiles(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspValidatePackageResponse *createValidatePackageResponse(const char *serv=NULL);
extern "C"  IClientValidatePackageResponse *createClientValidatePackageResponse(const char *serv=NULL);
extern "C"  IEspGetQueryFileMappingRequest *createGetQueryFileMappingRequest(const char *serv=NULL);
extern "C"  IClientGetQueryFileMappingRequest *createClientGetQueryFileMappingRequest(const char *serv=NULL);
extern "C"  IEspSuperFile *createSuperFile(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientSuperFile *createClientSuperFile(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetQueryFileMappingResponse *createGetQueryFileMappingResponse(const char *serv=NULL);
extern "C"  IClientGetQueryFileMappingResponse *createClientGetQueryFileMappingResponse(const char *serv=NULL);
extern "C"  IEspTargetData *createTargetData(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTargetData *createClientTargetData(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetPackageMapSelectOptionsRequest *createGetPackageMapSelectOptionsRequest(const char *serv=NULL);
extern "C"  IClientGetPackageMapSelectOptionsRequest *createClientGetPackageMapSelectOptionsRequest(const char *serv=NULL);
extern "C"  IEspGetPackageMapSelectOptionsResponse *createGetPackageMapSelectOptionsResponse(const char *serv=NULL);
extern "C"  IClientGetPackageMapSelectOptionsResponse *createClientGetPackageMapSelectOptionsResponse(const char *serv=NULL);
extern "C"  IEspAddPartToPackageMapRequest *createAddPartToPackageMapRequest(const char *serv=NULL);
extern "C"  IClientAddPartToPackageMapRequest *createClientAddPartToPackageMapRequest(const char *serv=NULL);
extern "C"  IEspAddPartToPackageMapResponse *createAddPartToPackageMapResponse(const char *serv=NULL);
extern "C"  IClientAddPartToPackageMapResponse *createClientAddPartToPackageMapResponse(const char *serv=NULL);
extern "C"  IEspRemovePartFromPackageMapRequest *createRemovePartFromPackageMapRequest(const char *serv=NULL);
extern "C"  IClientRemovePartFromPackageMapRequest *createClientRemovePartFromPackageMapRequest(const char *serv=NULL);
extern "C"  IEspRemovePartFromPackageMapResponse *createRemovePartFromPackageMapResponse(const char *serv=NULL);
extern "C"  IClientRemovePartFromPackageMapResponse *createClientRemovePartFromPackageMapResponse(const char *serv=NULL);
extern "C"  IEspGetPartFromPackageMapRequest *createGetPartFromPackageMapRequest(const char *serv=NULL);
extern "C"  IClientGetPartFromPackageMapRequest *createClientGetPartFromPackageMapRequest(const char *serv=NULL);
extern "C"  IEspGetPartFromPackageMapResponse *createGetPartFromPackageMapResponse(const char *serv=NULL);
extern "C"  IClientGetPartFromPackageMapResponse *createClientGetPartFromPackageMapResponse(const char *serv=NULL);
extern "C"  IEspWsPackageProcessPingRequest *createWsPackageProcessPingRequest(const char *serv=NULL);
extern "C"  IClientWsPackageProcessPingRequest *createClientWsPackageProcessPingRequest(const char *serv=NULL);
extern "C"  IEspWsPackageProcessPingResponse *createWsPackageProcessPingResponse(const char *serv=NULL);
extern "C"  IClientWsPackageProcessPingResponse *createClientWsPackageProcessPingResponse(const char *serv=NULL);

#endif // _ws_packageprocess_SCM_INCL
//end
