! Clarion SCM Interfaces
! Include file generated by HIDL Version 1.3 from ws_packageprocess.ecm
! *** Not to be hand edited (changes will be lost on re-generation) ***

  OMIT('EndOfInclude',_ws_packageprocess_I_)
_ws_packageprocess_I_ EQUATE(1)

  INCLUDE('SCM.INT'),ONCE

cppClientEchoRequest  INTERFACE(cppInterface),COM
setRequest       PROCEDURE(CONST *CSTRING Request),PROC
    END



cppClientEchoResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getResponse      PROCEDURE(),*CSTRING,PROC
    END



cppClientBasePackageStatus  INTERFACE(cppInterface),COM
setCode          PROCEDURE(LONG Code),PROC
setDescription   PROCEDURE(CONST *CSTRING Description),PROC
getCode          PROCEDURE(),LONG,PROC
getDescription   PROCEDURE(),*CSTRING,PROC
    END



cppClientPackageMapEntry  INTERFACE(cppInterface),COM
setId            PROCEDURE(CONST *CSTRING Id),PROC
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
getId            PROCEDURE(),*CSTRING,PROC
getTarget        PROCEDURE(),*CSTRING,PROC
getProcess       PROCEDURE(),*CSTRING,PROC
    END



cppClientAddPackageRequest  INTERFACE(cppInterface),COM
setInfo          PROCEDURE(CONST *CSTRING Info),PROC
setActivate      PROCEDURE(boolean Activate),PROC
setOverWrite     PROCEDURE(boolean OverWrite),PROC
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setPackageMap    PROCEDURE(CONST *CSTRING PackageMap),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setDaliIp        PROCEDURE(CONST *CSTRING DaliIp),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
setSourceProcess  PROCEDURE(CONST *CSTRING SourceProcess),PROC
setAllowForeignFiles  PROCEDURE(CBOOL AllowForeignFiles),PROC
setPreloadAllPackages  PROCEDURE(CBOOL PreloadAllPackages),PROC
setReplacePackageMap  PROCEDURE(CBOOL ReplacePackageMap),PROC
setUpdateSuperFiles  PROCEDURE(CBOOL UpdateSuperFiles),PROC
setUpdateCloneFrom  PROCEDURE(CBOOL UpdateCloneFrom),PROC
setAppendCluster  PROCEDURE(CBOOL AppendCluster),PROC
    END



cppClientAddPackageResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getFilesNotFound  PROCEDURE(),*CSTRING,PROC
    END



cppClientCopyPackageMapRequest  INTERFACE(cppInterface),COM
setSourcePath    PROCEDURE(CONST *CSTRING SourcePath),PROC
setRemoteUserName  PROCEDURE(CONST *CSTRING RemoteUserName),PROC
setRemotePassword  PROCEDURE(CONST *CSTRING RemotePassword),PROC
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setPMID          PROCEDURE(CONST *CSTRING PMID),PROC
setActivate      PROCEDURE(boolean Activate),PROC
setDaliIp        PROCEDURE(CONST *CSTRING DaliIp),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
setSourceProcess  PROCEDURE(CONST *CSTRING SourceProcess),PROC
setPreloadAllPackages  PROCEDURE(CBOOL PreloadAllPackages),PROC
setReplacePackageMap  PROCEDURE(CBOOL ReplacePackageMap),PROC
setUpdateSuperFiles  PROCEDURE(CBOOL UpdateSuperFiles),PROC
setUpdateCloneFrom  PROCEDURE(CBOOL UpdateCloneFrom),PROC
setAppendCluster  PROCEDURE(CBOOL AppendCluster),PROC
    END



cppClientCopyPackageMapResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getFilesNotFound  PROCEDURE(),*CSTRING,PROC
    END



cppClientDeletePackageRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setPackageMap    PROCEDURE(CONST *CSTRING PackageMap),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
setPackageMaps   PROCEDURE(CONST *CSTRING PackageMaps),PROC
    END



cppClientDeletePackageResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
    END



cppClientActivatePackageRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setPackageMap    PROCEDURE(CONST *CSTRING PackageMap),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
    END



cppClientActivatePackageResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
    END



cppClientDeActivatePackageRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setPackageMap    PROCEDURE(CONST *CSTRING PackageMap),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
    END



cppClientDeActivatePackageResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
    END



cppClientGetPackageRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
    END



cppClientGetPackageResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getInfo          PROCEDURE(),*CSTRING,PROC
    END



cppClientGetPackageMapByIdRequest  INTERFACE(cppInterface),COM
setPackageMapId  PROCEDURE(CONST *CSTRING PackageMapId),PROC
    END



cppClientGetPackageMapByIdResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getInfo          PROCEDURE(),*CSTRING,PROC
    END



cppClientListPackageRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
    END



cppClientPackageListData  INTERFACE(cppInterface),COM
setId            PROCEDURE(CONST *CSTRING Id),PROC
setQueries       PROCEDURE(CONST *CSTRING Queries),PROC
getId            PROCEDURE(),*CSTRING,PROC
getQueries       PROCEDURE(),*CSTRING,PROC
    END



cppClientPackageListMapData  INTERFACE(cppInterface),COM
setId            PROCEDURE(CONST *CSTRING Id),PROC
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setPkgListData   PROCEDURE(CONST *CSTRING PkgListData),PROC
setActive        PROCEDURE(boolean Active),PROC
setDescription   PROCEDURE(CONST *CSTRING Description),PROC
getId            PROCEDURE(),*CSTRING,PROC
getTarget        PROCEDURE(),*CSTRING,PROC
getProcess       PROCEDURE(),*CSTRING,PROC
getPkgListData   PROCEDURE(),*CSTRING,PROC
getActive        PROCEDURE(),boolean,PROC
getDescription   PROCEDURE(),*CSTRING,PROC
    END



cppClientListPackageResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getPkgListMapData  PROCEDURE(),*CSTRING,PROC
    END



cppClientListPackagesRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setProcessFilter  PROCEDURE(CONST *CSTRING ProcessFilter),PROC
    END



cppClientListPackagesResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getPackageMapList  PROCEDURE(),*CSTRING,PROC
    END



cppClientValidatePackageRequest  INTERFACE(cppInterface),COM
setInfo          PROCEDURE(CONST *CSTRING Info),PROC
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setActive        PROCEDURE(CBOOL Active),PROC
setPMID          PROCEDURE(CONST *CSTRING PMID),PROC
setQueryIdToVerify  PROCEDURE(CONST *CSTRING QueryIdToVerify),PROC
setQueriesToVerify  PROCEDURE(CONST *CSTRING QueriesToVerify),PROC
setCheckDFS      PROCEDURE(CBOOL CheckDFS),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
    END



cppClientValidatePackageInfo  INTERFACE(cppInterface),COM
setUnmatched     PROCEDURE(CONST *CSTRING Unmatched),PROC
getUnmatched     PROCEDURE(),*CSTRING,PROC
    END



cppClientValidatePackageQueries  INTERFACE(cppInterface),COM
setUnmatched     PROCEDURE(CONST *CSTRING Unmatched),PROC
getUnmatched     PROCEDURE(),*CSTRING,PROC
    END



cppClientValidatePackageFiles  INTERFACE(cppInterface),COM
setUnmatched     PROCEDURE(CONST *CSTRING Unmatched),PROC
setNotInDFS      PROCEDURE(CONST *CSTRING NotInDFS),PROC
getUnmatched     PROCEDURE(),*CSTRING,PROC
getNotInDFS      PROCEDURE(),*CSTRING,PROC
    END



cppClientValidatePackageResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getPMID          PROCEDURE(),*CSTRING,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getWarnings      PROCEDURE(),*CSTRING,PROC
getErrors        PROCEDURE(),*CSTRING,PROC
getPackages      PROCEDURE(),ValidatePackageInfo,PROC
getQueries       PROCEDURE(),ValidatePackageQueries,PROC
getFiles         PROCEDURE(),ValidatePackageFiles,PROC
    END



cppClientGetQueryFileMappingRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setPMID          PROCEDURE(CONST *CSTRING PMID),PROC
setQueryName     PROCEDURE(CONST *CSTRING QueryName),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
    END



cppClientSuperFile  INTERFACE(cppInterface),COM
setName          PROCEDURE(CONST *CSTRING Name),PROC
setSubFiles      PROCEDURE(CONST *CSTRING SubFiles),PROC
getName          PROCEDURE(),*CSTRING,PROC
getSubFiles      PROCEDURE(),*CSTRING,PROC
    END



cppClientGetQueryFileMappingResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getUnmappedFiles  PROCEDURE(),*CSTRING,PROC
getSuperFiles    PROCEDURE(),*CSTRING,PROC
    END



cppClientTargetData  INTERFACE(cppInterface),COM
setName          PROCEDURE(CONST *CSTRING Name),PROC
setType          PROCEDURE(CONST *CSTRING Type),PROC
setProcesses     PROCEDURE(CONST *CSTRING Processes),PROC
getName          PROCEDURE(),*CSTRING,PROC
getType          PROCEDURE(),*CSTRING,PROC
getProcesses     PROCEDURE(),*CSTRING,PROC
    END



cppClientGetPackageMapSelectOptionsRequest  INTERFACE(cppInterface),COM
setIncludeTargets  PROCEDURE(CBOOL IncludeTargets),PROC
setIncludeProcesses  PROCEDURE(CBOOL IncludeProcesses),PROC
setIncludeProcessFilters  PROCEDURE(CBOOL IncludeProcessFilters),PROC
    END



cppClientGetPackageMapSelectOptionsResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getTargets       PROCEDURE(),*CSTRING,PROC
getProcessFilters  PROCEDURE(),*CSTRING,PROC
    END



cppClientAddPartToPackageMapRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setProcess       PROCEDURE(CONST *CSTRING Process),PROC
setPackageMap    PROCEDURE(CONST *CSTRING PackageMap),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
setPartName      PROCEDURE(CONST *CSTRING PartName),PROC
setContent       PROCEDURE(CONST *CSTRING Content),PROC
setDeletePrevious  PROCEDURE(boolean DeletePrevious),PROC
setDaliIp        PROCEDURE(CONST *CSTRING DaliIp),PROC
setSourceProcess  PROCEDURE(CONST *CSTRING SourceProcess),PROC
setAllowForeignFiles  PROCEDURE(CBOOL AllowForeignFiles),PROC
setPreloadAllPackages  PROCEDURE(CBOOL PreloadAllPackages),PROC
setUpdateSuperFiles  PROCEDURE(CBOOL UpdateSuperFiles),PROC
setUpdateCloneFrom  PROCEDURE(CBOOL UpdateCloneFrom),PROC
setAppendCluster  PROCEDURE(CBOOL AppendCluster),PROC
    END



cppClientAddPartToPackageMapResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getFilesNotFound  PROCEDURE(),*CSTRING,PROC
    END



cppClientRemovePartFromPackageMapRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setPackageMap    PROCEDURE(CONST *CSTRING PackageMap),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
setPartName      PROCEDURE(CONST *CSTRING PartName),PROC
    END



cppClientRemovePartFromPackageMapResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
    END



cppClientGetPartFromPackageMapRequest  INTERFACE(cppInterface),COM
setTarget        PROCEDURE(CONST *CSTRING Target),PROC
setPackageMap    PROCEDURE(CONST *CSTRING PackageMap),PROC
setGlobalScope   PROCEDURE(CBOOL GlobalScope),PROC
setPartName      PROCEDURE(CONST *CSTRING PartName),PROC
    END



cppClientGetPartFromPackageMapResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatus        PROCEDURE(),BasePackageStatus,PROC
getContent       PROCEDURE(),*CSTRING,PROC
    END



cppClientWsPackageProcessPingRequest  INTERFACE(cppInterface),COM
    END



cppClientWsPackageProcessPingResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
    END



cppClientWsPackageProcessEvents INTERFACE(cppInterface),COM
onActivatePackageComplete PROCEDURE(*cppClientActivatePackageResponse resp),PROC
onActivatePackageError PROCEDURE(*cppClientActivatePackageResponse resp),PROC
onAddPackageComplete PROCEDURE(*cppClientAddPackageResponse resp),PROC
onAddPackageError PROCEDURE(*cppClientAddPackageResponse resp),PROC
onAddPartToPackageMapComplete PROCEDURE(*cppClientAddPartToPackageMapResponse resp),PROC
onAddPartToPackageMapError PROCEDURE(*cppClientAddPartToPackageMapResponse resp),PROC
onCopyPackageMapComplete PROCEDURE(*cppClientCopyPackageMapResponse resp),PROC
onCopyPackageMapError PROCEDURE(*cppClientCopyPackageMapResponse resp),PROC
onDeActivatePackageComplete PROCEDURE(*cppClientDeActivatePackageResponse resp),PROC
onDeActivatePackageError PROCEDURE(*cppClientDeActivatePackageResponse resp),PROC
onDeletePackageComplete PROCEDURE(*cppClientDeletePackageResponse resp),PROC
onDeletePackageError PROCEDURE(*cppClientDeletePackageResponse resp),PROC
onEchoComplete PROCEDURE(*cppClientEchoResponse resp),PROC
onEchoError PROCEDURE(*cppClientEchoResponse resp),PROC
onGetPackageComplete PROCEDURE(*cppClientGetPackageResponse resp),PROC
onGetPackageError PROCEDURE(*cppClientGetPackageResponse resp),PROC
onGetPackageMapByIdComplete PROCEDURE(*cppClientGetPackageMapByIdResponse resp),PROC
onGetPackageMapByIdError PROCEDURE(*cppClientGetPackageMapByIdResponse resp),PROC
onGetPackageMapSelectOptionsComplete PROCEDURE(*cppClientGetPackageMapSelectOptionsResponse resp),PROC
onGetPackageMapSelectOptionsError PROCEDURE(*cppClientGetPackageMapSelectOptionsResponse resp),PROC
onGetPartFromPackageMapComplete PROCEDURE(*cppClientGetPartFromPackageMapResponse resp),PROC
onGetPartFromPackageMapError PROCEDURE(*cppClientGetPartFromPackageMapResponse resp),PROC
onGetQueryFileMappingComplete PROCEDURE(*cppClientGetQueryFileMappingResponse resp),PROC
onGetQueryFileMappingError PROCEDURE(*cppClientGetQueryFileMappingResponse resp),PROC
onListPackageComplete PROCEDURE(*cppClientListPackageResponse resp),PROC
onListPackageError PROCEDURE(*cppClientListPackageResponse resp),PROC
onListPackagesComplete PROCEDURE(*cppClientListPackagesResponse resp),PROC
onListPackagesError PROCEDURE(*cppClientListPackagesResponse resp),PROC
onPingComplete PROCEDURE(*cppClientWsPackageProcessPingResponse resp),PROC
onPingError PROCEDURE(*cppClientWsPackageProcessPingResponse resp),PROC
onRemovePartFromPackageMapComplete PROCEDURE(*cppClientRemovePartFromPackageMapResponse resp),PROC
onRemovePartFromPackageMapError PROCEDURE(*cppClientRemovePartFromPackageMapResponse resp),PROC
onValidatePackageComplete PROCEDURE(*cppClientValidatePackageResponse resp),PROC
onValidatePackageError PROCEDURE(*cppClientValidatePackageResponse resp),PROC

 END

cppClientWsPackageProcess INTERFACE(cppInterface),COM
setProxyAddress  PROCEDURE(CONST *CSTRING address),PROC
addServiceUrl  PROCEDURE(CONST *CSTRING url),PROC
removeServiceUrl  PROCEDURE(CONST *CSTRING url),PROC
setUsernameToken  PROCEDURE(CONST *CSTRING Username,CONST *CSTRING Password,CONST *CSTRING Realm ),PROC
createActivatePackageRequest  PROCEDURE(),*cppClientActivatePackageRequest,PROC
ActivatePackage  PROCEDURE(*cppClientActivatePackageRequest request),*cppClientActivatePackageResponse,PROC
async_ActivatePackage  PROCEDURE(*cppClientActivatePackageRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createAddPackageRequest  PROCEDURE(),*cppClientAddPackageRequest,PROC
AddPackage  PROCEDURE(*cppClientAddPackageRequest request),*cppClientAddPackageResponse,PROC
async_AddPackage  PROCEDURE(*cppClientAddPackageRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createAddPartToPackageMapRequest  PROCEDURE(),*cppClientAddPartToPackageMapRequest,PROC
AddPartToPackageMap  PROCEDURE(*cppClientAddPartToPackageMapRequest request),*cppClientAddPartToPackageMapResponse,PROC
async_AddPartToPackageMap  PROCEDURE(*cppClientAddPartToPackageMapRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createCopyPackageMapRequest  PROCEDURE(),*cppClientCopyPackageMapRequest,PROC
CopyPackageMap  PROCEDURE(*cppClientCopyPackageMapRequest request),*cppClientCopyPackageMapResponse,PROC
async_CopyPackageMap  PROCEDURE(*cppClientCopyPackageMapRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createDeActivatePackageRequest  PROCEDURE(),*cppClientDeActivatePackageRequest,PROC
DeActivatePackage  PROCEDURE(*cppClientDeActivatePackageRequest request),*cppClientDeActivatePackageResponse,PROC
async_DeActivatePackage  PROCEDURE(*cppClientDeActivatePackageRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createDeletePackageRequest  PROCEDURE(),*cppClientDeletePackageRequest,PROC
DeletePackage  PROCEDURE(*cppClientDeletePackageRequest request),*cppClientDeletePackageResponse,PROC
async_DeletePackage  PROCEDURE(*cppClientDeletePackageRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createEchoRequest  PROCEDURE(),*cppClientEchoRequest,PROC
Echo  PROCEDURE(*cppClientEchoRequest request),*cppClientEchoResponse,PROC
async_Echo  PROCEDURE(*cppClientEchoRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createGetPackageRequest  PROCEDURE(),*cppClientGetPackageRequest,PROC
GetPackage  PROCEDURE(*cppClientGetPackageRequest request),*cppClientGetPackageResponse,PROC
async_GetPackage  PROCEDURE(*cppClientGetPackageRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createGetPackageMapByIdRequest  PROCEDURE(),*cppClientGetPackageMapByIdRequest,PROC
GetPackageMapById  PROCEDURE(*cppClientGetPackageMapByIdRequest request),*cppClientGetPackageMapByIdResponse,PROC
async_GetPackageMapById  PROCEDURE(*cppClientGetPackageMapByIdRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createGetPackageMapSelectOptionsRequest  PROCEDURE(),*cppClientGetPackageMapSelectOptionsRequest,PROC
GetPackageMapSelectOptions  PROCEDURE(*cppClientGetPackageMapSelectOptionsRequest request),*cppClientGetPackageMapSelectOptionsResponse,PROC
async_GetPackageMapSelectOptions  PROCEDURE(*cppClientGetPackageMapSelectOptionsRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createGetPartFromPackageMapRequest  PROCEDURE(),*cppClientGetPartFromPackageMapRequest,PROC
GetPartFromPackageMap  PROCEDURE(*cppClientGetPartFromPackageMapRequest request),*cppClientGetPartFromPackageMapResponse,PROC
async_GetPartFromPackageMap  PROCEDURE(*cppClientGetPartFromPackageMapRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createGetQueryFileMappingRequest  PROCEDURE(),*cppClientGetQueryFileMappingRequest,PROC
GetQueryFileMapping  PROCEDURE(*cppClientGetQueryFileMappingRequest request),*cppClientGetQueryFileMappingResponse,PROC
async_GetQueryFileMapping  PROCEDURE(*cppClientGetQueryFileMappingRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createListPackageRequest  PROCEDURE(),*cppClientListPackageRequest,PROC
ListPackage  PROCEDURE(*cppClientListPackageRequest request),*cppClientListPackageResponse,PROC
async_ListPackage  PROCEDURE(*cppClientListPackageRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createListPackagesRequest  PROCEDURE(),*cppClientListPackagesRequest,PROC
ListPackages  PROCEDURE(*cppClientListPackagesRequest request),*cppClientListPackagesResponse,PROC
async_ListPackages  PROCEDURE(*cppClientListPackagesRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createPingRequest  PROCEDURE(),*cppClientWsPackageProcessPingRequest,PROC
Ping  PROCEDURE(*cppClientWsPackageProcessPingRequest request),*cppClientWsPackageProcessPingResponse,PROC
async_Ping  PROCEDURE(*cppClientWsPackageProcessPingRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createRemovePartFromPackageMapRequest  PROCEDURE(),*cppClientRemovePartFromPackageMapRequest,PROC
RemovePartFromPackageMap  PROCEDURE(*cppClientRemovePartFromPackageMapRequest request),*cppClientRemovePartFromPackageMapResponse,PROC
async_RemovePartFromPackageMap  PROCEDURE(*cppClientRemovePartFromPackageMapRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC
createValidatePackageRequest  PROCEDURE(),*cppClientValidatePackageRequest,PROC
ValidatePackage  PROCEDURE(*cppClientValidatePackageRequest request),*cppClientValidatePackageResponse,PROC
async_ValidatePackage  PROCEDURE(*cppClientValidatePackageRequest request, *cppClientWsPackageProcessEvents events,*cppInterface State),PROC

  END




  MAP
    MODULE('ws_packageprocess')
      createWsPackageProcessClient (),*cppClientWsPackageProcess, pascal, raw, name('_createWsPackageProcessClient@0')
    END

  END


EndOfInclude
