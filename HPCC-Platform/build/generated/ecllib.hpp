// *** Include file generated by HIDL Version 1.3 from ecllib.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ecllib_SCM_INCL
#define ecllib_SCM_INCL

#include "esp.hpp"



#ifndef ECL_CLIENT_API
#define ECL_CLIENT_API __declspec(dllimport)
#endif

enum InstantEclState
{
	ECL_OK = 0,
	ECL_CONNECTION_ERROR = 1,
	ECL_NORMAL_ERROR = 2
};



// IClientInstantEclResp is used to access the result set of the query
//

interface IClientInstantEclResp : extends IInterface
{
	virtual unsigned long getRequestId() = 0;
	virtual unsigned long getClientValue() = 0;
	virtual InstantEclState getState() = 0;
	virtual const char * getResultsXML() = 0;
};



// IClientInstantEclRequest is used to set up a simple ECL query
//

interface IClientInstantEclRequest : extends IInterface
{
	virtual void setUser(const char * user) = 0;
	virtual void setUserToken(const char * user, const char * password) = 0;
	virtual void setEclServer(const char * eclserver) = 0;
	virtual void setCluster(const char * cluster) = 0;
	virtual void setClientValue(unsigned long cv) = 0;
	virtual void setEclText(const char * text) = 0;
};


interface IClientInstantEclEvents : extends IInterface
{
	virtual int onComplete(IClientInstantEclResp & resp) = 0;
	virtual int onError(IClientInstantEclResp & resp) = 0;
};


interface IClientInstantEcl : extends IInterface
{
	virtual void addServiceUrl(const char * url) = 0;
	virtual void removeServiceUrl(const char * url) = 0;
	virtual IClientInstantEclRequest * createRequest() = 0;
	virtual IClientInstantEclResp * runEcl(IClientInstantEclRequest * request) = 0;
	virtual void runEclAsync(IClientInstantEclRequest * request, IClientInstantEclEvents & events) = 0;
};



extern "C" ECL_CLIENT_API IClientInstantEcl * createInstantEclClient();





#endif // _ecllib_SCM_INCL
//end
