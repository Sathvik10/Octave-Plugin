#line 2 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqllex.cpp"

#line 4 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqllex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define eclyy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer eclyy_create_buffer
#endif

#ifdef yy_delete_buffer
#define eclyy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer eclyy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define eclyy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer eclyy_scan_buffer
#endif

#ifdef yy_scan_string
#define eclyy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string eclyy_scan_string
#endif

#ifdef yy_scan_bytes
#define eclyy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes eclyy_scan_bytes
#endif

#ifdef yy_init_buffer
#define eclyy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer eclyy_init_buffer
#endif

#ifdef yy_flush_buffer
#define eclyy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer eclyy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define eclyy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state eclyy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define eclyy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer eclyy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define eclyypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state eclyypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define eclyypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state eclyypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define eclyyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack eclyyensure_buffer_stack
#endif

#ifdef yylex
#define eclyylex_ALREADY_DEFINED
#else
#define yylex eclyylex
#endif

#ifdef yyrestart
#define eclyyrestart_ALREADY_DEFINED
#else
#define yyrestart eclyyrestart
#endif

#ifdef yylex_init
#define eclyylex_init_ALREADY_DEFINED
#else
#define yylex_init eclyylex_init
#endif

#ifdef yylex_init_extra
#define eclyylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra eclyylex_init_extra
#endif

#ifdef yylex_destroy
#define eclyylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy eclyylex_destroy
#endif

#ifdef yyget_debug
#define eclyyget_debug_ALREADY_DEFINED
#else
#define yyget_debug eclyyget_debug
#endif

#ifdef yyset_debug
#define eclyyset_debug_ALREADY_DEFINED
#else
#define yyset_debug eclyyset_debug
#endif

#ifdef yyget_extra
#define eclyyget_extra_ALREADY_DEFINED
#else
#define yyget_extra eclyyget_extra
#endif

#ifdef yyset_extra
#define eclyyset_extra_ALREADY_DEFINED
#else
#define yyset_extra eclyyset_extra
#endif

#ifdef yyget_in
#define eclyyget_in_ALREADY_DEFINED
#else
#define yyget_in eclyyget_in
#endif

#ifdef yyset_in
#define eclyyset_in_ALREADY_DEFINED
#else
#define yyset_in eclyyset_in
#endif

#ifdef yyget_out
#define eclyyget_out_ALREADY_DEFINED
#else
#define yyget_out eclyyget_out
#endif

#ifdef yyset_out
#define eclyyset_out_ALREADY_DEFINED
#else
#define yyset_out eclyyset_out
#endif

#ifdef yyget_leng
#define eclyyget_leng_ALREADY_DEFINED
#else
#define yyget_leng eclyyget_leng
#endif

#ifdef yyget_text
#define eclyyget_text_ALREADY_DEFINED
#else
#define yyget_text eclyyget_text
#endif

#ifdef yyget_lineno
#define eclyyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno eclyyget_lineno
#endif

#ifdef yyset_lineno
#define eclyyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno eclyyset_lineno
#endif

#ifdef yyget_column
#define eclyyget_column_ALREADY_DEFINED
#else
#define yyget_column eclyyget_column
#endif

#ifdef yyset_column
#define eclyyset_column_ALREADY_DEFINED
#else
#define yyset_column eclyyset_column
#endif

#ifdef yywrap
#define eclyywrap_ALREADY_DEFINED
#else
#define yywrap eclyywrap
#endif

#ifdef yyalloc
#define eclyyalloc_ALREADY_DEFINED
#else
#define yyalloc eclyyalloc
#endif

#ifdef yyrealloc
#define eclyyrealloc_ALREADY_DEFINED
#else
#define yyrealloc eclyyrealloc
#endif

#ifdef yyfree
#define eclyyfree_ALREADY_DEFINED
#else
#define yyfree eclyyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define eclyywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 545
#define YY_END_OF_BUFFER 546
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2410] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  546,  544,   18,   17,
       16,  544,  531,  544,  536,  544,  544,  530,  538,  539,
      544,  544,  544,  544,  522,  522,  522,  544,  504,  509,
      506,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  540,  541,  536,  542,  543,
      482,  544,    3,    4,    5,  494,  495,  494,  498,  499,
      498,   25,   24,   22,   20,   21,   10,   11,    8,   10,
       14,   15,   14,   18,  507,  531,  531,  531,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,  536,    0,  441,    0,    0,
      515,  530,  529,  530,  501,    6,    0,  512,  526,    1,
       23,    0,  522,  522,    0,  521,  523,  522,  519,  521,
      519,  510,  500,  513,  503,  508,    0,  511,  505,  514,
      536,  536,  536,  536,  536,  536,  536,   79,  536,  536,
      536,  536,  536,  536,  536,  536,  536,    0,  536,  536,
      536,  536,  536,  536,  530,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  195,  536,  536,  483,  536,  536,  536,
      536,  536,  536,  536,  536,  231,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  281,  536,  536,  536,  471,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  530,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,    0,
      536,  536,  536,  536,  536,  536,    0,    3,    2,  494,
      494,  494,  498,  498,  498,   25,   22,   10,    9,    0,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   32,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,    0,    0,
        0,    0,  529,  496,    0,  524,    0,   19,  525,  520,
      521,  518,  519,  502,  516,    0,   68,  536,  536,  536,
      536,   74,  470,   76,  536,  536,  536,  536,  536,  536,
       87,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,   99,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  116,  536,  536,  536,  536,  122,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  135,  536,

      536,  536,  536,  536,  536,  147,  536,  536,  536,  536,
      536,  536,  536,  536,  158,  536,  536,  536,  536,  536,
      168,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      196,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  236,  536,  240,  536,  536,
      242,  536,  250,  536,  256,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  472,  536,
      536,  536,  536,  536,  536,  287,  536,  485,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  341,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  355,  536,
      359,  536,  536,  536,  536,  536,  536,  370,  536,  536,
      536,  536,  536,  536,  536,  378,  536,  536,  380,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  530,  527,  530,    0,  536,  536,
      536,  536,  536,  536,  536,  409,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

        0,  534,    0,    0,  423,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      537,  494,  497,    0,   67,   67,   67,   67,   67,   67,
       67,   67,   66,   67,   67,   28,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   35,   67,   67,
       67,   67,   67,   67,   67,  442,    0,    0,  528,    0,
        0,  526,    0,  520,  518,  517,   69,  536,  536,  536,
      536,  536,  536,   81,  536,  536,   84,  536,  536,  536,
      536,   90,  536,  536,  536,  536,   94,  536,   96,  536,
      536,  536,  101,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  117,  536,  536,  536,  121,  451,  536,  536,
      536,  536,  536,  536,  129,  536,  536,  536,  536,  536,
      139,  536,  536,  536,  536,  536,  536,  536,  149,  148,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      162,  536,  536,  536,  536,  536,  536,  536,  173,  536,
      536,  176,  180,  536,  536,  536,  536,  536,  536,  474,
      536,  536,  192,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  210,  212,  213,  536,
      536,  536,  536,  536,  221,  222,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  239,  536,  241,

      536,  536,  536,  536,  536,  536,  258,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  283,  536,  285,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  302,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  313,  536,  536,  536,  536,  536,  318,  450,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  342,  345,  536,  347,  536,
      536,  350,  536,  536,  536,  536,  536,  361,  536,  363,
      364,  536,  536,  368,  371,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  381,  536,  384,  536,  386,  536,
      536,  536,  536,  392,  536,  536,  536,  536,  398,  468,
      536,  400,  527,  496,    0,    0,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  454,  536,  536,  536,  536,
      536,  536,  413,  536,  415,  536,  536,  536,  536,  419,
      536,  536,  535,  533,    0,  535,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  494,  494,  497,  497,    0,   67,   67,   67,
       67,   67,   67,   67,   48,   45,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   54,   55,   30,
       67,   67,   67,   67,   67,   59,   67,   67,   67,   67,
       67,    0,  443,    0,    0,  525,   70,  536,  536,  536,
       77,   80,  536,  536,   85,  536,  536,  536,  536,  536,
      536,  536,  536,   95,  536,   97,  536,  102,  536,  536,
      536,  536,  536,  536,  486,  536,  118,  536,  536,  451,
      536,  536,  124,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  140,  142,  536,  536,    0,  536,
      536,  150,  536,  536,  152,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  469,  536,  167,  536,  536,  171,

      172,  536,  536,  536,  536,  536,  536,  536,  536,  184,
      185,  188,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  202,  536,  484,  536,  536,
      536,  536,  536,  536,  536,  536,  215,  536,  536,  220,
      536,  536,  536,  226,  536,  536,  536,  536,  233,  536,
      536,  491,  536,  536,  536,  536,  254,  536,  536,  260,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  290,  536,  536,  536,  536,  296,  536,  536,
      536,  536,  536,  304,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  316,  536,  317,  536,  449,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  334,  536,  336,  536,  339,  536,  536,  536,  348,
      536,  536,  536,  536,  536,  536,  536,  536,  365,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      379,  536,  536,  536,  536,  536,  536,  390,  536,  394,
      395,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  416,  536,  421,  418,  536,  536,  532,    0,  536,
      536,  427,  536,  536,  536,  431,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  494,  494,  497,    0,
       67,   41,   31,   67,   49,   67,   67,   67,   47,   67,
       26,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   36,   67,   67,   67,   67,    0,
        0,  536,  536,  536,   82,  536,   86,   88,   89,  536,
      536,  536,  536,   92,  536,  536,  536,  536,  104,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      126,  536,  536,  536,  536,  536,  536,  137,  138,  141,
      536,  536,  536,  488,  536,  536,  383,  536,  536,  536,

      155,  536,  157,  159,  160,  161,  536,  536,  536,  536,
      536,  536,  174,  536,  536,  536,  536,  536,  182,  183,
      536,  536,  475,  476,  536,  536,  190,  536,  536,  536,
      536,  198,  536,  200,  536,  203,  536,  536,  536,  536,
      207,  536,  536,  211,  536,  536,  536,  536,  536,  223,
      536,  225,  536,  536,  536,  536,  234,  536,  536,  238,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      257,  536,  536,  536,  264,  536,  536,  267,  536,  536,
      536,  536,  536,  273,  274,  275,  277,  278,  279,  536,
      536,  284,  536,  536,  291,  536,  294,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  314,  536,  536,  478,  319,  536,  321,  536,  536,
      536,  536,  536,  536,  536,  331,  332,  536,  335,  337,
      338,  536,  536,  343,  346,  536,  536,  536,  536,  357,
      360,  362,  447,  536,  536,  369,  372,  536,  374,  536,
      452,  536,  536,  536,  536,  536,  536,  536,  536,  391,
      536,  536,  536,  401,  536,  536,  536,  536,  536,  536,
      536,  536,  408,  454,  454,  536,  536,  536,  536,  536,
      536,  536,  536,  420,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  438,  536,  536,  536,  536,  536,
      536,  536,  493,  494,  497,    0,   42,   67,   67,   67,
       46,   67,   33,   37,   29,   67,   67,   67,   67,   67,
       39,   67,   57,   64,   58,   67,   67,   67,   67,  444,
        0,  536,  536,  536,  536,    0,   91,  536,  536,  448,
      536,  536,  536,  105,  536,  108,  110,  111,  536,  536,
      119,  536,  536,  123,  458,  125,  536,  536,  130,  536,
      536,  136,  536,  536,  146,  536,  536,  536,  536,  536,
      536,  536,  536,  165,  166,  536,  536,  175,  536,  536,
      179,  536,  186,  187,  473,  477,  191,  536,  536,  197,

      536,  536,  446,  536,  536,  536,  208,  209,  214,  536,
      536,  218,  536,  224,  536,  229,  536,  232,  536,  536,
      243,  536,  536,  536,  536,  536,  536,  536,  536,  253,
      536,  536,  536,  536,  536,  266,  268,  269,  536,  536,
      536,  280,  282,  536,  289,  536,  536,  536,  298,  299,
      300,  536,  536,  306,  536,  308,  536,  310,  311,  536,
      457,  536,  536,  536,  536,  536,  324,  536,  536,  328,
      536,  536,  536,  340,  344,  349,  536,  536,  354,  536,
      536,  373,  536,  452,  376,  377,  465,  536,  536,  536,
      536,  388,  536,  536,  536,  536,  536,  403,  453,  536,

      536,  536,  536,  536,  454,  536,  536,  536,  536,  411,
      536,  414,  536,  536,  536,  536,  536,  536,  429,  536,
       78,  144,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  493,  493,  494,    0,   67,   34,   67,   67,
       67,   67,   67,   67,   67,   52,   67,   64,   64,   67,
       27,   67,   67,    0,  536,  536,   75,   83,  492,  536,
      461,  536,  536,  536,    0,  536,  536,  536,  536,  536,
      120,  460,  536,  536,  536,  536,  143,  145,  536,  489,
      487,  151,  536,  536,  536,  163,  536,  536,  170,  178,

      536,  181,  193,  536,  536,  536,  445,  536,  204,  536,
      216,  536,  219,  536,  536,  536,  536,  536,  536,  246,
      536,  536,  536,  251,  536,  536,  259,  536,  536,  536,
      270,  536,  536,  536,  536,  295,  536,  536,  305,  307,
      536,  536,  457,  315,  536,  322,  536,  323,  536,  536,
      329,  536,  333,  536,  536,  536,  367,  375,  536,  385,
      536,  536,  536,  396,  536,  399,  459,  453,  536,  536,
      404,  536,  467,  406,  407,  410,  481,  536,  536,  412,
      536,  422,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,   63,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  493,    0,   43,
       40,   67,   67,   67,   67,   51,   67,   67,   67,   67,
       61,    0,   71,   72,  536,  462,  536,  536,  536,    0,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      490,  536,  154,  156,  536,  536,  536,  536,  536,  536,
      536,  205,  206,  536,  536,  536,  536,  536,  536,  536,
      247,  536,  249,  252,  255,  262,  536,  265,  536,  272,
      286,  292,  297,  536,  536,  536,  536,  464,  325,  536,
      536,  351,  536,  536,  536,  387,  389,  393,  397,  536,
      453,  405,  466,  455,  536,  536,  424,  536,  426,  536,

      536,  536,   73,  536,  536,  536,  432,  536,  536,  536,
      536,  536,  536,  293,  536,  536,  536,  536,  536,  536,
      493,    0,   65,   38,   67,   44,   53,   56,   67,   67,
        0,   93,  536,   98,  536,  103,    0,  107,  536,  114,
      536,  479,  460,  536,  128,  131,  132,  536,  153,  536,
      536,  536,  536,  194,  199,  536,  217,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  320,
      536,  536,  536,  353,  366,  382,  536,  455,  456,  417,
      425,  428,  430,  536,  112,  536,  536,  536,  536,  536,
      261,  536,  288,  536,  536,  536,  536,  536,  536,  493,

      493,    0,   67,   60,   62,    0,  463,  100,  106,  109,
      480,  127,  133,  536,  164,  536,  177,  536,  201,  227,
      536,  536,  536,  244,  536,  536,  536,  271,  536,  309,
      536,  536,  536,  536,  536,  456,  536,  536,  536,  536,
      536,  536,  189,  536,  536,  536,  536,  536,  536,  536,
      493,  493,    0,   50,    0,  134,  169,  536,  536,  536,
      536,  536,  248,  263,  536,  312,  326,  327,  330,  402,
      456,  536,  113,  536,  536,  536,  536,  303,  352,  536,
      536,  536,  536,  493,  493,    0,    0,  491,  230,  536,
      536,  245,  536,  228,  536,  536,  536,  536,  536,  536,

      536,  536,  493,    0,    0,  536,  536,  536,  115,  536,
      536,  536,  536,  358,  536,  536,    0,    0,  536,  237,
      536,  536,  536,  536,  433,  276,  536,  439,  536,    0,
        0,  536,  301,  536,  536,  536,  536,  536,  536,    0,
        0,  235,  536,  536,  536,  536,  536,  536,    0,    0,
      536,  536,  536,  536,  536,  536,    0,    0,  437,  536,
      536,  536,  536,  440,    0,    0,    0,  536,  536,  536,
      356,    0,    0,    0,  434,  435,  536,    0,    0,    0,
      536,    0,    0,    0,  536,    0,    0,    0,  436,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   13,    0,

        0,   12,    0,    0,    0,    0,    0,    7,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   27,   29,    1,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,    1,   64,    1,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,    1,   92,   93,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   94,    1,    1,    1,
       95,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   96,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[97] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    5,
        1,    6,    1,    1,    7,    1,    1,    1,    1,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    9,    1,
        1,    1,    1,    9,    8,    8,    8,    8,    8,    8,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   10,    4,    4,   11,    4,    4,
        1,    1,    1,    4,    8,    8,    8,    8,    8,    8,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   10,    4,    4,   11,    4,    4,
       12,   13,    1,    1,    1,    1

    } ;

static const flex_int16_t yy_base[2455] =
    {   0,
        0,    0,   94,   95,   96,   97,   99,  100, 2901, 2900,
      101,  103, 2761,  110,   98,  105, 2763, 5849,  114, 5849,
      119, 2676,  110,  138,    0,  138, 2694,  108, 2672, 5849,
     2684, 2685,  119,  110,  212,  195,  235, 2670,  124, 2668,
       95,  288,  314,  349,  229,  397,  413,  334,  230,  453,
       79,   91,  469,  470,  210,  506,  525,  232,  530,  581,
      628,  631,  411,  640,  298, 5849, 5849,  342, 5849, 5849,
     5849, 2605,    0, 5849, 2672,   92, 5849,  257, 2320, 5849,
     2319,    0, 5849,    0, 5849, 5849,    0, 5849, 5849, 2325,
     5849, 5849, 2126,  147, 5849,  192, 5849, 2080,   83,   82,

      122,  207,  573,  211,  223,    0,  462,  264,  239,  272,
      247,  292,  357,  243,  402,    0, 2117, 5849,  294,    0,
     5849,  246, 2036,    0, 5849, 5849, 2021, 5849,  700, 5849,
     2027,  709,  752,  467,  251,  312,  324, 5849,  339,  147,
      350, 5849, 5849, 5849, 1992, 5849,  210, 5849, 5849, 5849,
      355,  368,  373,  395,  450,  482,  390,  529,  516,  403,
      432,  711,  473,  473,  521,  526,  535, 2004,  620,  578,
      556,  756,  750,  558,  449,  568,  806,  749,  586,  639,
      632,  633,  652,  746,  689,  718,  810,  810,  782,  813,
      805,  731,  754,  801,  820,  798,  812,  836,  827,  816,

      830,  840,  849,  868,  857,  856,  871,  864,  868,  867,
      862,  884,  878,  876,  912,    0,  921,  864,  926,  870,
      897,  927,  918,  921,  979,    0,  926,  972,  917,  934,
      923,  942,  968,  965,  949,  973,  967,  987,  988,  986,
     1030,  993, 1075, 1003, 1026, 1022, 1022, 1038, 1081, 1040,
     1030, 1057, 1041, 1042, 1091, 1125, 1132, 1049, 1105, 1041,
     1133, 1057, 1142, 1146, 1086,  575, 2001, 1111, 1180, 1116,
     1136, 1138, 1168, 1136, 1149, 1185, 1193, 1200, 1158, 1273,
     1167, 1199, 1183, 1192, 1198, 1309, 1653,    0, 5849, 1206,
     1209, 1222, 1680, 1671, 1621,    0,    0,    0, 5849, 1497,

        0, 1197, 1210, 1204, 1287, 1249, 1235, 1222, 1236, 1236,
     1235, 1268, 1260, 1293, 1267, 1272, 1278, 1273, 1298, 1324,
     1312, 1318, 1310, 1334, 1327, 1319, 1336, 1321, 1438, 1396,
        0, 1302, 1379, 5849, 1373, 5849, 1388, 5849, 1397, 1352,
     5849, 1371, 5849, 5849, 5849, 1354,    0, 1374, 1389, 1377,
     1381, 1383,    0,    0, 1386, 1390, 1386, 1399, 1391, 1391,
        0, 1396, 1393, 1400, 1390, 1388, 1320, 1407, 1431, 1392,
     1402, 1403, 5849, 1413, 1413, 1418, 1449, 1438, 1435, 1437,
     1454, 1438, 1440, 1451, 1446, 1460, 1442, 1450,    0, 1464,
     1457, 1446, 1468, 1453, 1453, 1469, 1453, 1454,    0, 1474,

     1474, 1476, 1501, 1476, 1497, 1511, 1485, 1500, 1502, 1517,
     1507, 1506, 1516, 1503, 1516, 1521, 1515, 1510, 1510, 1529,
        0, 1533, 1514, 1529, 1515, 1553, 1524, 1527, 1538, 1565,
     1570, 1557, 1553, 1557, 1569, 1569, 1575, 1560, 1565, 1570,
        0, 1569, 1573, 1581, 1578, 1584, 1585, 1571, 1592, 1576,
     1581, 1583, 1582, 1625, 1596, 1593, 1606, 1625, 1615, 1629,
     1626, 1625, 1632, 1634, 1638, 1631, 1631,    0, 1626, 1620,
        0, 1645, 1676, 1643,    0, 1630, 1639, 1634, 1650, 1642,
     1685, 1646, 1658, 1674, 1685, 1670, 1681, 1690, 1689, 1683,
     1681, 1697, 1703, 1681, 1707,    0, 1705, 1728, 1693, 1701,

     1738, 1693, 1714, 1698, 1702, 1741, 1743, 1743, 1737, 1751,
     1738, 1738, 1746, 1742, 1760, 1753, 1751, 1750, 1788, 1765,
     1771, 1758, 1772, 1765, 1791, 1791, 1792, 1794, 1806, 1808,
     1798, 1801, 1798, 1797, 1812, 1818, 1799, 1799,    0, 1804,
     1819, 1819, 1805, 1814, 1813, 1816, 1813,    0, 1815, 1835,
     1825, 1835, 1859, 1840, 1863,    0, 1853, 1858, 1864, 1860,
     1860, 1856, 1858, 1872, 1873, 1860, 1875, 1867, 1868, 1871,
     1883, 1872, 1887, 1882,  577, 1371,    0,  628, 1885, 1872,
     1888, 1884, 1877, 1904, 1925,    0, 1353, 1919, 1920, 1910,
     1931, 1913, 1920, 1921, 1933, 1925, 1918, 1936, 1934, 1933,

      630, 5849, 2006,  633, 2001, 1925, 1928, 1931, 1934, 1938,
     1936, 1947, 1952, 1939, 1952, 1987, 1997, 1961, 2024, 1988,
     5849, 2020, 1363, 1316, 2019, 2025, 2008, 2007, 2018, 2047,
     2043, 2057, 2046, 2050, 2066, 2067, 2065, 2065, 2056, 2067,
     2072, 2071, 2059, 2070, 2079, 2074, 2075,    0, 2067, 2066,
     2084, 2071, 2075, 2071, 2080, 5849, 1237, 1318, 5849, 1310,
      722, 2136, 2149, 5849, 5849, 5849,    0, 2086, 2128, 2126,
     2130, 2121, 2138,    0, 2130, 2131, 1303, 2131, 2130, 2134,
     2139,    0, 2149, 2150, 2147, 2156,    0, 2145,    0, 2154,
     2156, 2152,    0, 2154, 2153, 2146, 2146, 2152, 2159, 2151,

     2150, 2166,    0, 2152, 2155, 2184,    0, 2218, 2200, 2198,
     2194, 2202, 2199, 2213, 2214, 2211, 2203, 2209, 2215, 2207,
     2217, 2221, 2224, 2225, 2205, 1304, 2218, 2231,    0,    0,
     2215, 2218, 2214, 2216, 2222, 2218, 2220, 2223, 2224, 2239,
     2271, 2268, 2254, 2268, 2261, 2273, 2259, 2276,    0, 2280,
     2281, 2275,    0, 2266, 2273, 2287, 2281, 2274, 2287, 2335,
     2279, 2286,    0, 2325, 2285, 2283, 2297, 2295, 2318, 2321,
     2318, 2332, 2322, 2328, 2329, 2343, 2340,    0,    0, 2337,
     2343, 2348, 2337, 2340,    0,    0, 2333, 2353, 2343, 2336,
     2354, 2341, 2348, 2337, 2350, 2370, 2367,    0, 2378,    0,

     2386, 2380, 2391, 2388, 2393, 2387,    0, 2391, 2397, 2381,
     2385, 2392, 2395, 2399, 2406, 2397, 2406, 2411, 2398, 2413,
     2397, 2402, 2413, 2411, 2420, 2402,    0, 2424,    0, 2430,
     2435, 2436, 2434, 2433, 2452, 2446, 2454, 2451, 2456, 2450,
     2455, 2456,    0, 2448, 2462, 2453, 2451, 2469, 2470, 2467,
     2468, 2449, 2470, 2467, 2457, 2474, 2465, 2476, 2477, 2527,
     2504, 2488, 2484, 2509, 2522, 2507, 2508, 2528, 2515, 2506,
     2514, 2514, 2514, 2532, 2528, 2534,    0, 2528,    0, 2536,
     2533,    0, 2525, 2539, 2536, 2541, 2535,    0, 2538,    0,
        0, 2528, 2548, 2545,    0, 2570, 2568, 2580, 2585, 2573,

     2573, 2584, 2574, 2586,    0, 2583,    0, 2579,    0, 2575,
     2583, 2581, 2583,    0, 2590, 2588, 2596, 2583,    0,    0,
     2600, 2589, 5849, 5849,  917,    0, 2596, 2591, 2592, 2597,
     2605, 2603, 2593, 2612, 2622, 1253, 2640, 2644, 2626, 2633,
     2627, 2629,    0, 2641,    0, 2643, 2647, 2648, 2646,    0,
     2646, 2635, 5849, 5849, 2709,  920, 2653, 2645, 2641, 2643,
     2657, 2649, 2656, 2703, 2685, 2695, 2698, 2695, 2707, 2704,
     2702, 2704, 2706, 2701, 2701, 1250, 2708, 2722, 2707, 2712,
     2725, 2710, 2777, 2755, 1293, 1271, 1264, 2717, 2707, 2722,
     2744, 2758, 2765, 2753,    0, 2761, 2765, 2767, 2755, 2760,

     2757, 2764, 2776, 2772, 2775, 2774, 2769,    0,    0,    0,
     2771, 2766, 2770, 2771, 2782,    0, 2783, 2768, 2782, 2787,
     2772, 1268, 5849, 2818, 2838, 2847,    0, 2835, 2834, 2840,
        0,    0, 2825, 2837,    0, 2827, 2832, 2844, 2848, 2847,
     2839, 2849, 2839,    0, 2855, 2848, 2844,    0, 2843, 2855,
     2856, 2841, 2849, 2859,    0, 2853, 2861, 2858, 2865, 2913,
     2875, 2907,    0, 2897, 2906, 2899, 2910, 2900, 2900, 2907,
     2908, 2915, 2916, 2914,    0, 2917, 2913, 2907, 1254, 2922,
     2922,    0, 2921, 2926, 2923, 2909, 2911, 2912, 2927, 2913,
     2930, 2920, 2931, 2922,    0, 2950,    0, 2954, 2953,    0,

        0, 2952, 2955, 2955, 2961, 2963, 2968, 2956, 2967,    0,
     2978,    0, 1233, 1200, 2963, 2978, 2977, 2971, 2985, 2982,
     2985, 2984, 2977, 2971, 2987,    0, 2988,    0, 2989, 3019,
     2978, 2985, 2991, 3008, 3025, 3025,    0, 3012, 3025, 3030,
     3028, 3019, 3013,    0, 3024, 3039, 3036, 3030, 3039, 3045,
     3031,    0, 3073, 3028, 3036, 3025, 3042, 3048, 3038,    0,
     3040, 3043, 3055, 3086, 3073, 3091, 3077, 3096, 3082, 3081,
     3088, 3081, 3088, 3083, 3086, 3080, 3093, 3087, 3104, 3098,
     3097, 3107,    0, 3093, 3096, 3112, 3105,    0, 3100, 3120,
     3125, 3129, 3146,    0, 3131, 3151, 3144, 3134, 3153, 3137,

     3154, 3157, 3155, 3146, 3152,    0, 3149,    0, 3159, 3208,
     3158, 3170, 3171, 3158, 3199, 3159, 3188, 3200, 3206, 3192,
     3199,    0, 3200, 3232, 3199, 3195, 3221, 3208, 3224,    0,
     3215, 3230, 3218, 3230, 3230, 3231, 3231, 3220,    0, 3245,
     3248, 3246, 3246, 3247, 3249, 3241, 3248, 3238, 3246, 3263,
        0, 3255, 3256, 3264, 3264, 3253, 3261,    0, 3273,    0,
        0, 3271, 3286, 3282, 3276, 3269, 3287, 3287, 3288, 3280,
     3276, 3295, 3295, 3350, 3314, 3302, 3310, 3320, 3330, 3323,
     3319,    0, 3315,    0,    0, 3321, 3333, 5849,    0, 3345,
     3346,    0, 3335, 3328, 3344,    0, 3329, 3330, 3353, 3356,

     3353, 3339, 1139, 3346, 3363, 3365, 3351, 3363, 1132, 3368,
     3354, 3354, 1129, 3360, 3374, 3382, 3409, 3390, 1179, 3388,
     3390,    0,    0, 3406,    0, 3390, 3402, 3404,    0, 3404,
        0, 3408, 3393, 3403, 3396, 3408, 3399, 3412, 3417, 3422,
     3414, 3415, 3416, 3427,    0, 3427, 3419, 3416, 3421, 1160,
     3431, 3447, 3429, 3447,    0, 3439,    0,    0,    0, 1140,
     3440, 3451, 3455,    0, 3454, 3455, 3469, 3456, 3458, 3455,
     3458, 3470, 3457, 3479, 3463, 3485, 3486, 3468, 3477, 3470,
        0, 3490, 3491, 3489, 3480, 3493, 3493,    0,    0,    0,
     3503, 3495, 3492, 5849, 3508, 3496,    0, 3495, 3503, 3527,

        0, 3520,    0,    0,    0,    0, 3526, 3512, 3527, 3528,
     3515, 3530,    0, 3532, 3522, 3531, 3529, 3531,    0,    0,
     3522, 3544,    0,    0, 3546, 1122,    0, 3543, 3539, 3551,
     3542,    0, 3549,    0, 3541,    0, 3538, 3567, 3568, 3559,
        0, 3569, 3569,    0, 3569, 3584, 3585, 3585, 3585,    0,
     3566,    0, 3571, 3581, 1080, 3582,    0, 3586, 3584,    0,
     3593, 3595, 3586, 3591, 3602, 3594, 3595, 3603, 3606, 3597,
        0, 3601, 3614, 3612,    0, 3619, 3609,    0, 3612, 3621,
     3614, 3612, 3638,    0,    0,    0,    0,    0,    0, 3640,
     3645,    0, 3641, 3647,    0, 3643,    0, 3648, 3645, 3641,

     3631, 3637, 3659, 3658, 3662, 3647, 3663, 3660, 3651, 3651,
     3668,    0, 3666, 3662,    0,    0, 3657, 3673, 3658, 3681,
     3684, 3689, 3679, 3702, 3693,    0,    0, 3690,    0, 3740,
        0, 3694, 3705,    0,    0, 3698, 3693, 3694, 3710,    0,
        0,    0,    0, 3696, 3705,    0,    0, 3716,    0, 3716,
     3766, 3715, 3717, 3744, 3748, 3757, 3747, 3750, 3744,    0,
     3752, 3765, 3748,    0, 3768, 3755, 3767, 3761, 3756, 3770,
     3771, 3765,    0, 3795, 3833, 3789, 3808, 3803, 3810, 3802,
     3803, 3809, 3801,    0, 3809, 3813, 3828, 3815, 3821, 3812,
     3831, 1075, 1074, 3820, 3817, 3822, 3834, 3831, 3828, 3835,

     1037, 3838, 3836, 3840,    0, 3852, 3851, 3864, 3867, 3860,
     3869, 3869, 3870, 3871, 1085, 3863,    0, 3864, 3883, 3877,
        0, 3881,    0, 3867,    0, 3891, 3879, 3882, 3881, 3892,
        0, 3888,    0, 3961,    0, 3886, 3910, 3914, 3939, 5849,
     3942, 3930, 3943, 3933, 3946, 1076,    0, 3945, 3951,    0,
     3958, 3951, 3955, 1062, 3960, 3948,    0,    0, 3949, 3949,
        0, 3956, 3959,    0, 4016,    0, 3974, 3967,    0, 3995,
     3990,    0, 4008, 4006, 4009, 4011, 4009, 4020, 4007, 4015,
     4007, 4025, 4012,    0,    0, 4023, 4029,    0, 4020, 4032,
        0, 4022,    0,    0,    0,    0,    0, 4025, 4034,    0,

     4025, 4036, 4085, 4047, 4039, 4051,    0,    0,    0, 4045,
     4041,    0, 4080,    0, 4071,    0, 4082,    0, 4076, 4083,
        0, 4076, 4072, 4069, 4069, 4085, 4089, 4076, 4077,    0,
     4089, 4094, 4097, 4098, 4088,    0,    0,    0, 4078, 4086,
     4079,    0,    0, 4092,    0, 4087, 4096, 4094,    0,    0,
        0, 4098, 4103,    0, 4087,    0, 4101,    0,    0, 4112,
     4161, 4139, 4132, 4150, 4152, 4133,    0, 4145, 4144,    0,
     4157, 4148, 4158,    0,    0,    0, 4149, 4156,    0, 4157,
     4155,    0, 4164, 4190,    0,    0,    0, 4149, 4165, 4159,
     4163,    0, 4169, 4167, 4186, 4200, 4194,    0, 4230, 4182,

     4203, 4205, 4206, 4206, 4239, 4207, 4208, 4230, 4231,    0,
     4242,    0, 4247, 4229, 4246, 4230, 4248, 4248,    0, 4239,
        0,    0, 4234, 1025, 4242, 4236, 4253, 1024, 4254, 4256,
     4257, 1022, 4257, 4259, 4251, 1021, 4251, 4253, 4263, 4261,
     1018, 4251, 4267, 4285, 4299, 4301, 4286,    0, 4302, 4293,
     4296, 4290, 4306, 4307, 4309,    0, 4301,    0, 4379, 4317,
        0, 4315, 4345, 4357, 4362, 4355,    0,    0, 5849, 4368,
     4394, 4365, 4362, 4358, 4372, 4369, 4381, 4386, 4383, 4390,
        0, 4423, 4385, 4399, 4387, 4398,    0,    0, 4421,    0,
        0,    0, 4408, 4422, 4423,    0, 4428, 4410,    0,    0,

     4416, 4419,    0, 4428, 4422, 4438, 4488, 4449,    0, 4444,
        0, 4461,    0, 4446, 4453, 4463, 4460, 4463, 4462,    0,
     4463, 4482, 1052,    0, 4478, 4473,    0, 4483, 4481, 4485,
        0, 4482, 4487, 4486, 4497,    0, 4489, 4498,    0,    0,
     4496, 4488, 4551,    0, 4523,    0, 4505,    0, 4522, 4515,
        0, 4509,    0, 4511, 4529, 4516,    0,    0, 4531,    0,
     4543, 4528, 4544,    0, 4537,    0, 4576, 4595, 4553, 4616,
        0, 4586, 4606,    0,    0,    0,    0, 4604, 4608,    0,
     4610,    0, 4609, 4603, 4611, 4614, 4614, 4605,  939,  927,
     4607, 4603,  921, 4616, 4606, 4621,    0,  919, 4625,  866,

      864, 4609, 4625, 4627, 4624, 4630,  863, 4628,  921,    0,
        0, 4620, 4623, 4611, 4633,    0, 4634, 4632, 4627, 4647,
        0, 4657,    0,    0, 4658, 4695, 4649, 4654, 4655, 4664,
     4658, 4652, 4675, 4675, 4686, 4706, 4684, 4707, 4687, 4708,
        0, 4713,    0,    0, 4708, 4707, 4714, 4718, 4704, 4704,
     4710,    0,    0, 4721, 4722, 4724, 4713, 4718, 4711, 4712,
        0, 4718,    0,    0,    0,    0, 4729,    0, 4715,    0,
        0,    0,    0, 4727, 4717, 4733, 4719,    0, 4731, 4750,
     4747,    0, 4758, 4757, 4754,    0,    0,    0,    0, 4769,
     4800,    0, 4818, 4827, 4790, 4791,    0, 4777,    0, 4778,

     4794, 4802,    0,  849, 4819, 4805,    0, 4829, 4812,  762,
      760, 4819,  751,    0, 4820, 4829, 4814, 4827, 4825, 4822,
     4836, 4824,    0,    0, 4826,    0,    0,    0, 4838, 4839,
      793,    0, 4889,    0, 4830,    0, 4844,    0, 4852,    0,
     4844,    0, 4903, 4879,    0,    0, 4894, 4884,    0, 4895,
     4886, 4897, 4900,    0,    0, 4884,    0, 4901, 4897, 4892,
     4903, 4901, 4901, 4907, 4909, 4908, 4903, 4891, 4898,    0,
     4913, 4916, 4911,    0,    0,    0, 4916, 4966, 4975,    0,
        0,    0,    0, 4939,    0,  703, 4965, 4968, 4963,  699,
        0, 4964,    0,  698,  697, 4969, 4972, 4963, 4967, 4993,

     4975, 4974, 4977,    0,    0, 4967, 5043,    0, 5849,    0,
        0,    0,    0, 4970,    0, 4971,    0, 4968,    0,    0,
     4986, 4971, 4977,    0, 4977, 4988, 4983,    0, 4990,    0,
     4977, 4977, 5033, 5023, 5022, 5055, 5085, 5046,  696, 5047,
     5027, 5038,    0, 5040,  695,  694,  693, 5051, 5042, 5056,
     5083, 5057, 5045,    0, 5056,    0,    0, 5049, 5052, 5058,
     5089, 5081,    0,    0, 5084,    0,    0,    0,    0,    0,
     5144,  692,    0,  690,  689, 5085, 5102,    0,    0, 5095,
      676, 5106, 5092, 5108, 5109,  693, 5099,    0,    0, 5096,
     5104,    0, 5120,    0,  632, 5109,  630,  627, 5107,  569,

      565, 5118, 5144, 5107,  608, 5118, 5145, 5142,    0, 5144,
     5147,  542, 5141,    0,  537, 5147, 5154, 5145, 5150,    0,
     5162, 5164, 5172, 5148,    0,    0, 5161,    0, 5153, 5165,
     5165, 5161,    0, 5171, 5172, 5169, 5182, 5171, 5174, 5193,
     5201,    0,  464, 5194, 5195, 5202, 5204,  452, 5218, 5206,
      433, 5203, 5204, 5214,  413,  394, 5204, 5224,    0,  366,
      365, 5212,  358,    0, 5206, 5208, 5226,  356,  351, 5216,
        0, 5214, 5212,  408,    0,    0, 5216, 5230, 5218, 5228,
      340,  339, 5237, 5238,  287,  330,  323, 5225,    0,  313,
      310, 5227,  302,  295, 5246,  294,  249, 5260, 5849,  246,

     5263, 5849,  240,  183,  152,  142,  136, 5849, 5849, 5332,
     5345, 5358, 5371, 5384, 5397, 5410, 5423, 5433, 5441, 5453,
     5466, 5479, 5492, 5505, 5518, 5531, 5544, 5554, 5562, 5570,
     5582, 5594, 5600, 5604, 5614, 5627, 5640, 5653, 5666, 5679,
     5692, 5705, 5715, 5723, 5734, 5746, 5759, 5772, 5782, 5793,
     5806, 5819, 5829, 5837
    } ;

static const flex_int16_t yy_def[2455] =
    {   0,
     2409,    1, 2410, 2410, 2411, 2411, 2412, 2412, 2413, 2413,
     2414, 2414, 2415, 2415, 2416, 2416, 2409, 2409, 2409, 2409,
     2409, 2409, 2417, 2409, 2418, 2419, 2409, 2420, 2409, 2409,
     2409, 2409, 2409, 2409, 2409,   35,   35, 2409, 2409, 2409,
     2409, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2409, 2409, 2418, 2409, 2409,
     2409, 2409, 2421, 2409, 2409, 2422, 2409, 2422, 2423, 2409,
     2423, 2424, 2409, 2425, 2409, 2409, 2426, 2409, 2409, 2426,
     2409, 2409, 2409, 2409, 2409, 2427, 2409, 2427, 2428, 2428,

     2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
     2428, 2428, 2428, 2428, 2428, 2418, 2429, 2409, 2430, 2431,
     2409, 2432, 2409, 2432, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409,  133, 2433, 2433, 2433, 2409, 2434,  136,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2409, 2418, 2418,
     2418, 2418, 2418, 2418, 2432, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2435, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2436,
     2418, 2418, 2418, 2418, 2418, 2418, 2409, 2437, 2409, 2438,
     2438, 2438, 2439, 2439, 2439, 2440, 2441, 2442, 2409, 2409,

     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2444, 2409,
     2445, 2446, 2409, 2409, 2409, 2409, 2409, 2409, 2409,  136,
     2409, 2434, 2409, 2409, 2409, 2409, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2409, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2435, 2409, 2435, 2447, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2436, 2409, 2436, 2436, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2409, 2438, 2448, 2409, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2409, 2445, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2409, 2409, 2447, 2447, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2409, 2409,  603, 2436, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2438, 2438, 2448, 2448, 2409, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,

     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2409, 2409, 2409, 2409, 2409, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2409, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2449, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2409,  603, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2438, 2438, 2448, 2409,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2409,
     2409, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2409, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2449, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2450, 2438, 2448, 2409, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2451, 2443, 2443, 2443, 2443, 2443, 2409,
     2409, 2418, 2418, 2418, 2418, 2409, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2449, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2450, 2450, 2438, 2409, 2443, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2452, 2451, 2443,
     2443, 2443, 2443, 2409, 2418, 2418, 2418, 2418, 2409, 2418,
     2418, 2418, 2418, 2418, 2409, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2453,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2450, 2409, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2443, 2409, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2409,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2453, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2450, 2409, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
     2409, 2418, 2418, 2418, 2418, 2418, 2409, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2450,

     2450, 2409, 2443, 2443, 2443, 2409, 2418, 2418, 2409, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2454, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2450, 2450, 2409, 2443, 2409, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2454, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2450, 2450, 2409, 2409, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,

     2418, 2418, 2450, 2409, 2409, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2409, 2409, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2409,
     2409, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2409,
     2409, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2409, 2409,
     2418, 2418, 2418, 2418, 2418, 2418, 2409, 2409, 2418, 2418,
     2418, 2418, 2418, 2418, 2409, 2409, 2409, 2418, 2418, 2418,
     2418, 2409, 2409, 2409, 2418, 2418, 2418, 2409, 2409, 2409,
     2418, 2409, 2409, 2409, 2418, 2409, 2409, 2409, 2418, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,

     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,    0, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409
    } ;

static const flex_int16_t yy_nxt[5946] =
    {   0,
       18,   19,   20,   21,   19,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   18,   32,   33,   34,   35,
       36,   37,   37,   37,   37,   37,   37,   37,   38,   39,
       40,   41,   18,   18,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   25,   25,
       66,   18,   67,   68,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   25,   25,
       69,   70,   71,   18,   18,   72,   74,   74,   77,   77,

       92,   80,   80,   85,   86,   85,   86,   92,   75,   75,
       81,   81,   89,   90,   93,   94,   97,   94,   94,  123,
       94,   93,   94,   94,  130,  149,  150,  210,  131,  212,
      291,  211,  302,  303,   78,   78,  128,  143,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  118,   94,  119,
       94,   94, 2408,  144,  145,  146,  147,  210, 2407,  212,
      291,  211,  302,  303,   78,   78,  135,  135, 2406,  124,
      304,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  106,  106,  108,  109,  106,  110,  106,  106,  111,
      112,  113,  114,  106,  115,  106,  106,  106,   97, 2405,

      304,  106,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  106,  106,  108,  109,  106,  110,  106,  106,  111,
      112,  113,  114,  106,  115,  106,  106,  106,  120,  132,
      140,  133,  133,  134,  134,  134,  134,  134,  134,  134,
      175,  345,  346,  175,  224,  305,  135,  136,  135,  137,
      135,  135,  141,   98,  134,  134, 2404,  333,  225,  310,
      140,  311, 2402,  176,  200, 2400,  138,  177,  201,  139,
      135,  178,  202,  317,  224,  305,  135,  136,  135,  137,
      135,  135,  141,  203,  240,  320,  241,  179,  225,  310,
      325,  311,  141,  176,  200,  291,  138,  177,  201,  139,

      135,  178,  202,  317,  292,  330,  315,  124,  141,  280,
     2399, 2397,  316,  203,  240,  320,  241,  179, 2396,  318,
      325,  319,  141,  151,  152,  291, 2394,  153,  154, 2393,
      321,  340,  340,  155,  292,  156,  315,  157,  141, 2391,
      158,  159,  316,  160,  281,  322, 2390,  282,  161,  318,
     2389,  319,  162,  151,  152, 2386,  163,  153,  154,  164,
      321,  165,  166,  155,  168,  156,  341,  157,  167,  141,
      158,  159,  196,  160,  281,  322,  283,  282,  161,  197,
      284,  141,  162,  169,  331,  198,  163,  285,  199,  164,
      170,  165,  166,  343,  171,  323,  341,  172,  167,  141,

      173,  174,  196, 2385,  343,  286,  283,  347,  324,  197,
      284,  141, 2380,  169, 2376,  198,  348,  285,  199, 2375,
      170, 2371,  175,  343,  171,  323,  349,  172, 2369, 2368,
      173,  174,  180,  181,  343,  350,  326,  347,  324,  355,
      327,  361,  182,  183,  184,  273,  348,  189,  185,  186,
      328,  190,  187,  274,  188,  191,  349, 2364,  192,  275,
      123,  193,  180,  181,  194,  350,  326,  195,  362,  355,
      327,  361,  182,  183,  184,  273, 2363,  189,  185,  186,
      328,  190,  187,  274,  188,  191,  134,  134,  192,  275,
      351,  193,  204,  205,  194,  352, 2359,  195,  362,  206,

      207,  312,  135,  213,  219,  208,  209,  214,  220,  313,
      124,  215,  221,  367,  314, 2356,  216,  217,  222,  353,
      351,  369,  204,  205,  223,  352,  368, 2351,  218,  206,
      207,  312,  135,  213,  219,  208,  209,  214,  220,  313,
      354,  215,  221,  367,  314,  226,  216,  217,  222,  353,
      359,  369,  227,  228,  223,  229,  368,  230,  218,  233,
      231,  232,  360,  234,  242,  356,  235,  236,  243,  370,
      354,  357,  244,  237,  371,  226,  238,  372,  245,  239,
      359,  358,  227,  228,  246,  229,  576,  230,  923,  233,
      231,  232,  360,  234,  242,  356,  235,  236,  243,  370,

     2328,  357,  244,  237,  371, 2326,  238,  372,  245,  239,
      379,  358, 2318,  389,  246,  247,  377,  248,  306,  249,
      307,  390,  250,  251,  308,  252,  378,  253, 2315,  254,
      309,  255, 2314,  400,  256,  257,  577,  258,  577,  576,
      379,  953,  266,  389,  956,  247,  377,  248,  306,  249,
      307,  390,  250,  251,  308,  252,  378,  253,  267,  254,
      309,  255,  259,  400,  256,  257,  260,  258,  268,  261,
      262,  374,  375,  376,  276,  401,  263,  402,  269,  264,
      270,  277,  278,  271,  272,  403,  265,  404,  279,  926,
     2312,  604,  259, 2311,  604, 2309,  260, 2304,  268,  261,

      262,  374,  375,  376,  276,  401,  263,  402,  269,  264,
      270,  277,  278,  271,  272,  403,  265,  404,  279,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  336,  337, 2300,
      409,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      363,  364, 2296, 2295,  410, 2294, 2280, 2279, 2278, 2273,
     2246, 2245, 2243,  365,  366,  425, 2239,  336,  337,  132,
      409,  133,  133,  134,  134,  134,  134,  134,  134,  134,
      363,  364,  405,  406,  410,  397,  135,  140,  135,  137,
      135,  135,  387,  365,  366,  425,  380, 2206,  388,  407,

      408,  398,  381,  382,  399,  426,  138,  383,  384,  141,
      385,  386,  405,  406, 2193,  397,  135,  140,  135,  137,
      135,  135,  387, 2191,  417, 2190,  380,  418,  388,  407,
      408,  398,  381,  382,  399,  426,  138,  383,  384,  141,
      385,  386,  391,  392,  411,  393,  413,  419,  412,  427,
      422,  430,  414,  394,  417,  395,  423,  418,  396,  415,
      431,  434,  424,  416,  437,  428,  420,  429,  435,  421,
      432,  436,  391,  392,  411,  393,  413,  419,  412,  427,
      422,  430,  414,  394,  433,  395,  423,  438,  396,  415,
      431,  434,  424,  416,  437,  428,  420,  429,  435,  421,

      432,  436,  439,  440,  442,  443,  450,  441,  444,  451,
      452,  448, 2185,  455,  433,  457,  445,  438,  446,  449,
      468,  474,  453,  458,  447, 2122, 2120, 2114,  923, 2113,
      456,  953,  439,  440,  442,  443,  450,  441,  444,  451,
      452,  448,  454,  455,  475,  457,  445,  459,  446,  449,
      468,  474,  453,  458,  447,  464,  460,  465,  461,  462,
      456,  466,  469,  478,  476,  463,  477,  479,  491,  467,
      496,  497,  454,  470,  475,  471,  498,  459,  926,  472,
      499,  604, 2111,  473, 2107,  464,  460,  465,  461,  462,
     2104,  466,  469,  478,  476,  463,  477,  479,  491,  467,

      496,  497, 2103,  470,  500,  471,  498,  505,  492,  472,
      499,  493,  503,  473,  480,  481,  504,  494,  482,  501,
      483,  502,  506,  507,  484,  508,  485,  486,  495,  509,
      487,  488,  489,  511,  500,  510,  490,  505,  492,  512,
      515,  493,  503,  526,  480,  481,  504,  494,  482,  501,
      483,  502,  506,  507,  484,  508,  485,  486,  495,  509,
      487,  488,  489,  511,  513,  510,  490,  530,  531,  512,
      515,  527,  532,  526,  540,  545,  546,  541,  514, 2063,
      528, 2006,  529,  557, 2001, 1997,  533, 1993, 1989,  542,
     1875, 1869,  560,  547,  513,  543,  986,  530,  531,  544,

     1832,  527,  532,  565,  540,  545,  546,  541,  514,  516,
      528,  517,  529,  557,  518,  519,  533,  534,  520,  542,
      521,  522,  560,  547,  523,  543,  535,  524,  525,  544,
      536,  537,  538,  565,  539,  574,  548, 1822, 1821,  516,
      558,  517,  549, 1717,  518,  519, 1696,  534,  520,  579,
      521,  522,  559,  585,  523, 1646,  535,  524,  525,  550,
      536,  537,  538,  551,  539,  574,  548,  554,  555, 1640,
      558,  561,  549,  552,  586,  562,  553,  587,  556,  579,
      571,  563,  559,  585,  564,  566,  567,  590,  572,  550,
     1615,  568, 1609,  551,  591, 1605,  569,  554,  555,  570,

      573,  561, 1599,  552,  586,  562,  553,  587,  556,  600,
      571,  563,  605,  588,  564,  566,  567,  590,  572,  589,
      580,  568,  581, 1424,  591,  582,  569,  592,  583,  570,
      573,  594,  584,  606,  607,  595,  593,  597,  608,  600,
      609,  596,  605,  588,  291,  598,  625,  291,  626,  589,
      580,  627,  581,  599, 1423,  582,  292,  592,  583,  622,
      291,  594,  584,  606,  607,  595,  593,  597,  608, 1394,
      609,  596,  633,  634,  291,  598,  625,  291,  626, 1350,
     1320,  627,  986,  599,  602,  635,  292,  636,  637,  622,
      291,  631,  603,  603,  603,  603,  603,  603,  603,  603,

      603,  632,  633,  634, 1319,  638,  639,  603,  603,  603,
      603,  603,  603, 1309,  642,  635, 1274,  636,  637, 1079,
      643,  631,  628,  629, 1035,  644, 1024, 1023, 1022,  645,
      640,  632,  987,  630,  604,  638,  639,  603,  603,  603,
      603,  603,  603,  610,  642,  611,  612,  613,  641,  614,
      643,  646,  628,  629,  615,  644,  616,  617,  618,  645,
      640,  619,  620,  630,  647,  648,  649,  650,  651,  652,
      653,  654,  655,  610,  986,  611,  612,  613,  641,  614,
      936,  646,  924,  684,  615,  666,  616,  617,  618,  660,
      659,  619,  620,  658,  647,  648,  649,  650,  651,  652,

      653,  654,  655,  661,  661,  656,  664,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  665,  667,  668,  669,  670,
      671,  672,  673,  674,  336,  663,  664,  675,  677,  678,
      679,  680,  681,  682,  683,  689,  685,  690,  691,  330,
      692,  693,  676,  686,  694,  665,  667,  668,  669,  670,
      671,  672,  673,  674,  336,  663,  687,  675,  677,  678,
      679,  680,  681,  682,  683,  689,  685,  690,  691,  688,
      692,  693,  676,  686,  694,  695,  696,  697,  698,  699,
      701,  702,  703,  704,  705,  706,  687,  707,  708,  709,

      710,  713,  711,  700,  714,  715,  716,  717,  718,  688,
      712,  719,  720,  624,  723,  695,  696,  697,  698,  699,
      701,  702,  703,  704,  705,  706,  729,  707,  708,  709,
      710,  713,  711,  700,  714,  715,  716,  717,  718,  721,
      712,  719,  720,  722,  723,  724,  730,  726,  725,  727,
      731,  732,  733,  734,  735,  737,  729,  728,  738,  740,
      741,  736,  742,  743,  739,  744,  747,  748,  749,  721,
      752,  745,  753,  722,  754,  724,  730,  726,  725,  727,
      731,  732,  733,  734,  735,  737,  746,  728,  738,  740,
      741,  736,  742,  743,  739,  744,  747,  748,  749,  750,

      752,  745,  753,  755,  754,  756,  757,  758,  759,  751,
      760,  761,  762,  763,  764,  765,  746,  766,  767,  769,
      770,  768,  771,  772,  773,  774,  775,  776,  777,  750,
      778,  779,  623,  755,  784,  756,  757,  758,  759,  751,
      760,  761,  762,  763,  764,  765,  785,  766,  767,  769,
      770,  768,  771,  772,  773,  774,  775,  776,  777,  786,
      778,  779,  780,  781,  784,  787,  788,  789,  790,  791,
      792,  794,  795,  796,  782,  797,  785,  799,  800,  783,
      798,  801,  295,  805,  806,  793,  807,  808,  809,  786,
      810,  294,  780,  781,  813,  787,  788,  789,  790,  791,

      792,  794,  795,  796,  782,  797,  814,  799,  800,  783,
      798,  801,  802,  805,  806,  793,  807,  808,  809,  811,
      810,  803,  815,  816,  813,  817,  820,  818,  804,  819,
      822,  823,  825,  812,  826,  827,  814,  828,  821,  829,
      824,  830,  802,  831,  834,  835,  839,  621,  840,  811,
      841,  803,  815,  816,  842,  817,  820,  818,  804,  819,
      822,  823,  825,  812,  826,  827,  832,  828,  821,  829,
      824,  830,  836,  831,  834,  835,  839,  833,  840,  843,
      841,  844,  845,  853,  842,  847,  849,  850,  846,  854,
      837,  838,  848,  855,  851,  856,  832,  857,  860,  861,

      858,  862,  836,  865,  859,  866,  867,  833,  852,  843,
      868,  844,  845,  853,  869,  847,  849,  850,  846,  854,
      837,  838,  848,  855,  851,  856,  863,  857,  860,  861,
      858,  862,  872,  865,  859,  866,  867,  873,  852,  864,
      868,  874,  870,  875,  869,  871,  877,  878,  879,  880,
      881,  882,  883,  884,  885,  886,  863,  889,  876,  887,
      888,  890,  872,  891,  892,  893,  894,  873,  895,  864,
      896,  874,  870,  875,  897,  871,  877,  878,  879,  880,
      881,  882,  883,  884,  885,  886,  898,  889,  876,  887,
      888,  890,  901,  891,  892,  893,  894,  899,  895,  902,

      896,  900,  903,  904,  897,  905,  906,  907,  908,  909,
      910,  911,  912,  913,  914,  915,  898,  916,  919,  917,
      922,  927,  901,  928,  929,  920,  930,  899,  931,  902,
      918,  900,  903,  904,  921,  905,  906,  907,  908,  909,
      910,  911,  912,  913,  914,  915,  932,  916,  919,  917,
      922,  927,  933,  928,  929,  920,  930,  934,  931,  935,
      918,  937,  938,  941,  921,  942,  943,  944,  945,  946,
      948,  949,  939,  950,  940,  951,  932,  952,  963,  964,
      965,  966,  933,  967,  968,  969,  947,  934,  970,  935,
      971,  937,  938,  941,  972,  942,  943,  944,  945,  946,

      948,  949,  939,  950,  940,  951,  978,  952,  963,  964,
      965,  966,  578,  967,  968,  969,  947,  954,  970,  373,
      971,  973,  982,  344,  972,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  338,  974,  978,  335,  957,  958,
      955,  955,  955,  955,  955,  955,  975,  334,  959,  976,
      960,  973,  982,  977,  961,  962,  983,  988,  984,  990,
      991,  992,  979,  993,  989,  974,  980,  604,  957,  958,
      955,  955,  955,  955,  955,  955,  975,  981,  959,  976,
      960,  994,  995,  977,  961,  962,  983,  988,  984,  990,
      991,  992,  979,  993,  989,  996,  980,  998,  999,  997,

     1000, 1002, 1003, 1004, 1005, 1006, 1007,  981, 1010, 1008,
     1011,  994,  995, 1012, 1001, 1009, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021,  996,  118,  998,  999,  997,
     1000, 1002, 1003, 1004, 1005, 1006, 1007, 1027, 1010, 1008,
     1011,   98,  300, 1012, 1001, 1009, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021,  662,  662,  662,  662,  662,
      662,  662,  662,  662, 1025, 1025, 1028, 1027, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1029, 1030, 1031,
     1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1048, 1028, 1049, 1050, 1051,

     1052, 1053, 1054, 1055, 1056, 1057, 1058, 1029, 1030, 1031,
     1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1048, 1059, 1049, 1050, 1051,
     1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1070, 1071, 1059, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085,
     1061, 1086, 1087, 1088, 1089, 1090, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1070, 1071, 1091, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085,

     1061, 1086, 1087, 1088, 1089, 1090, 1095, 1092, 1096, 1097,
     1098, 1099, 1100, 1101, 1102, 1103, 1091, 1093, 1104, 1107,
     1108, 1109, 1110, 1111, 1112, 1094, 1117,  299, 1118, 1105,
      295,  294, 1106, 1121, 1122, 1123, 1095, 1092, 1096, 1097,
     1098, 1099, 1100, 1101, 1102, 1103, 1124, 1093, 1104, 1107,
     1108, 1109, 1110, 1111, 1112, 1094, 1117, 1113, 1118, 1105,
     1114, 1119, 1106, 1121, 1122, 1123, 1120, 1125, 1127, 1128,
     1131, 1115, 1129, 1132, 1133, 1126, 1124, 1134, 1135, 1136,
     1137, 1116, 1138, 1130, 1139, 1140, 1141, 1142, 1143, 1144,
     1145, 1119, 1146, 1147, 1148, 1149, 1120, 1125, 1127, 1128,

     1131, 1115, 1129, 1132, 1133, 1126, 1150, 1134, 1135, 1136,
     1137, 1116, 1138, 1130, 1139, 1140, 1141, 1142, 1143, 1144,
     1145, 1151, 1146, 1147, 1148, 1149, 1152, 1153, 1154, 1155,
     1156, 1157, 1158, 1159, 1160, 1162, 1150, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1161,
     1175, 1151, 1176, 1177, 1178, 1179, 1152, 1153, 1154, 1155,
     1156, 1157, 1158, 1159, 1160, 1162, 1180, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1161,
     1175, 1181, 1176, 1177, 1178, 1179, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1180, 1192, 1193, 1194,

     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1181, 1206, 1207, 1208, 1209, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1214, 1192, 1193, 1194,
     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1215, 1206, 1207, 1208, 1209, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1212, 1214, 1216, 1217, 1213,
     1218, 1219, 1220, 1221, 1222, 1223, 1211, 1224, 1225, 1226,
     1227, 1215, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
     1236, 1239, 1240, 1242, 1241, 1212, 1237, 1216, 1217, 1213,
     1218, 1219, 1220, 1221, 1222, 1223, 1211, 1224, 1225, 1226,

     1227, 1238, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
     1236, 1239, 1240, 1242, 1241, 1243, 1237, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257,
     1258, 1256, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1271, 1243, 1272, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257,
     1258, 1256, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1271, 1273, 1272, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
      289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,  287,  148,

      142,  127,  126,  125,  121, 1273,   95, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
     1288, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1297, 1298, 1299,
     1300, 1301, 1302, 1289, 1289, 1289, 1289, 1289, 1289, 1303,
     1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1314, 1315,
     1313, 1316, 2409,   88, 1321, 1322, 1323, 1297, 1298, 1299,
     1300, 1301, 1302, 1289, 1289, 1289, 1289, 1289, 1289, 1303,
     1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1314, 1315,
     1313, 1316, 1317,  291, 1321, 1322, 1323, 1324, 1325, 1326,

     1327, 1318,  292, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1337, 1338, 1339,  291, 1340, 1341, 1342, 1343,
     1344, 1345, 1346,  291, 1347, 1348, 1349, 1324, 1325, 1326,
     1327, 1318,  292, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1337, 1338, 1339,  291, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1351, 1347, 1348, 1349, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1351, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,

     1376, 1377,   83,   83, 2409, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1378, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1379, 1380, 1378, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397,
     1398, 1399, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
     1400, 1379, 1380, 1409, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397,
     1398, 1399, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,

     1400, 1410, 1411, 1409, 1412, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1425, 1426, 1422, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 2409, 1440,
     1441, 1410, 1411, 1442, 1412, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1425, 1426, 1422, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1440,
     1441, 1443, 1444, 1442, 1445, 1446, 1439, 1447, 1448, 1450,
     1451, 1452, 1453, 1454, 1455, 1449, 1456, 1457, 1458, 1459,
     1460, 2409, 1467, 1468, 1469, 1470, 1471, 1472, 1438, 1473,
     1474, 1443, 1444, 1475, 1445, 1446, 1439, 1447, 1448, 1450,

     1451, 1452, 1453, 1454, 1455, 1449, 1456, 1457, 1458, 1459,
     1460, 1461, 1467, 1468, 1469, 1470, 1471, 1472, 1462, 1473,
     1474, 1476, 1463, 1475, 1464, 1477, 1465, 1466, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
     1490, 1461, 1491, 1492, 1493, 1494, 1495, 1496, 1462, 1497,
     1498, 1476, 1463, 1499, 1464, 1477, 1465, 1466, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
     1490, 1500, 1491, 1492, 1493, 1494, 1495, 1496, 1501, 1497,
     1498, 1502, 1503, 1499, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1514, 1515, 1516, 2409, 2409, 2409,

     2409, 1500, 2409, 2409, 2409, 2409, 1517, 1518, 1501, 1519,
     1520, 1502, 1503, 1523, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1514, 1515, 1516, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1517, 1518, 1521, 1519,
     1520, 1524, 1525, 1523, 1526, 1527, 1528, 1529, 1531, 1532,
     1522, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1521, 1541,
     1542, 1524, 1525, 1543, 1526, 1527, 1528, 1529, 1531, 1532,
     1522, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
     1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1553, 1541,

     1542, 1554, 1555, 1543, 1556, 1557, 1558, 1559, 1560, 1561,
     1562, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1553, 1571,
     1572, 1554, 1555, 1573, 1556, 1557, 1558, 1559, 1560, 1561,
     1562, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 1576, 1577,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,  116, 1571,
     1572, 1578, 1579, 1573, 1580, 1581, 1582, 1583, 1584, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1576, 1577,
     1585, 1586, 1588, 1589, 1587, 1590, 1591, 1592, 1593, 1594,
     1595, 1578, 1579, 1598, 1580, 1581, 1582, 1583, 1584, 1596,

     1600, 1601, 1597, 1602, 1603, 1604, 1606, 1607, 1608, 1610,
     1585, 1586, 1588, 1589, 1587, 1590, 1591, 1592, 1593, 1594,
     1595, 1611, 1612, 1598, 1613, 1614, 1616, 1617,  291, 1596,
     1600, 1601, 1597, 1602, 1603, 1604, 1606, 1607, 1608, 1610,
     1618, 1619, 1620, 1621, 1622, 1623, 1624,  291, 1625, 1626,
     1627, 1611, 1612, 1628, 1629, 1614, 1616, 1617,  291, 1630,
     1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1641,
     1618, 1619, 1620, 1621, 1622, 1623, 1624,  291, 1625, 1626,
     1627, 1642, 1643, 1628, 1629, 1644, 1645, 1647, 1648, 1630,
     1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1641,

     1649, 1650, 1651, 1652, 1653, 1654, 1656, 1657, 1658, 1659,
     1655, 1642, 1643, 1660, 1661, 1644, 1645, 1647, 1648, 1662,
     1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
     1649, 1650, 1651, 1652, 1653, 1654, 1656, 1657, 1658, 1659,
     1655, 1673, 1674, 1660, 1661, 1675, 1676, 1677, 1678, 1662,
     1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
     1689, 1673, 1674, 1690, 1691, 1675, 1676, 1677, 1678, 1692,
     1693, 1694, 1695, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,

     1689, 1704, 1705, 1690, 1691, 1706, 1707, 1708, 1709, 1692,
     1693, 1694, 1695, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1718, 1719, 1720,
     1721, 1704, 1705, 1722, 1723, 1706, 1707, 1708, 1709, 1724,
     1725, 1726, 1728, 1729, 1730, 1731, 1732, 1727, 1733, 1734,
     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1718, 1719, 1720,
     1721, 1735, 1736, 1722, 1723, 1737, 1738, 1739, 1740, 1724,
     1725, 1726, 1728, 1729, 1730, 1731, 1732, 1727, 1733, 1734,
     1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
     1751, 1735, 1736, 1752, 1753, 1737, 1738, 1739, 1740, 1754,

     1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1766,
     1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
     1751, 1764, 1767, 1752, 1753, 1765, 1768, 1769, 1770, 1754,
     1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1766,
     1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
     1781, 1764, 1767, 1782, 1783, 1765, 1768, 1769, 1770, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1785, 1786,
     1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
     1781, 1787, 1788, 1782, 1783, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1789, 1790, 1791, 1792, 1785, 1786,

     1793, 1796, 1797, 1794, 1798, 1799, 1800, 1801, 1802, 1803,
     1804, 1787, 1788, 1795, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 2409, 1789, 1790, 1791, 1792, 2409, 2409,
     1793, 1796, 1797, 1794, 1798, 1799, 1800, 1801, 1802, 1803,
     1804,  116, 1806, 1795, 1807, 1808, 1809, 1810, 1811, 1812,
     1813, 1814,  116,  116,  116,  116,  116,  116,  116,  116,
      116, 1815, 1816, 1817, 1818, 1819, 2409, 1820, 1823, 1824,
     1825, 1828, 1806, 1829, 1807, 1808, 1809, 1810, 1811, 1812,
     1813, 1814, 1826, 1830, 1831, 1827, 1833, 1834, 1835, 1836,
     1837, 1815, 1816, 1817, 1818, 1819, 1805, 1820, 1823, 1824,

     1825, 1828, 1838, 1829, 1839, 1840, 1841, 1842, 1844, 1845,
     1846, 1847, 1826, 1830, 1831, 1827, 1833, 1834, 1835, 1836,
     1837, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
     1857, 2409, 1838, 1860, 1839, 1840, 1841, 1842, 1844, 1845,
     1846, 1847, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     1861, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
     1857, 1858, 1858, 1860, 1858, 1858, 1858, 1858, 1858, 1862,
     1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858,
     1861, 1863, 1864, 1865, 1866, 1867, 1868, 1870, 1871, 1858,
     1858, 1858, 1858, 1858, 1858, 1872, 1873, 1874, 1876, 1862,

     1877, 1878, 1879, 1880, 1881, 2409, 2409, 2409, 2409, 2409,
     2409, 1863, 1864, 1865, 1866, 1867, 1868, 1870, 1871, 1883,
     1884, 1858, 1858, 1858, 2409, 1872, 1873, 1874, 1876, 1885,
     1877, 1878, 1879, 1880, 1881, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1886, 1887, 1888, 1889, 1890, 1883,
     1884, 1858, 1858, 1858, 1858, 1858, 1858, 1891, 1892, 1885,
     1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
     1903, 1904, 1905, 1906, 1886, 1887, 1888, 1889, 1890, 2409,
     2409, 2409, 2409, 1908, 1909, 1910, 1911, 1891, 1892, 1912,
     1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,

     1903, 1904, 1905, 1906, 1907, 1907, 1907, 1907, 1907, 1907,
     1907, 1907, 1907, 1908, 1909, 1910, 1911, 1913, 1914, 1912,
     1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
     1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1913, 1914, 1942,
     1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
     1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1944, 1945, 1942,
     1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1946,
     1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,

     1957, 1958, 1959, 1960, 1961, 1962, 1963, 1944, 1945, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1964, 1946,
     1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
     1957, 1958, 1959, 1960, 1961, 1962, 1963, 1965, 1966, 1967,
     1971, 1972, 1973, 1974, 1975, 1976, 1977,  116, 1964, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1965, 1966, 1967,
     1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1969, 1979,
     1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1990,
     1991, 1992, 1994, 1970, 1995, 1996, 1998, 1999, 2000, 2002,

     2003, 2004, 1805, 2005, 2007, 1844, 2409, 1978, 1969, 1979,
     1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1990,
     1991, 1992, 1994, 1844, 1995, 1996, 1998, 1999, 2000, 2002,
     2003, 2004, 2008, 2005, 2007, 1844, 1613,  291, 2009, 2010,
     2011, 2012, 2013, 2014, 2015, 2016,  292, 2017, 2018, 2409,
     2409, 2019, 2409, 1844, 2409, 2409, 2409, 2020, 2409, 2409,
     2409, 2409, 2008, 2409, 2409, 2409, 1613,  291, 2009, 2010,
     2011, 2012, 2013, 2014, 2015, 2016,  292, 2017, 2018, 1858,
     1858, 2019, 1858, 1858, 1858, 1858, 1858, 2020, 1858, 1858,
     1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 2021, 2022,

     2023, 2024, 2025, 2027, 2028, 2029, 2030, 1858, 1858, 1858,
     1858, 1858, 1858, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 2026, 2031, 2032, 2033, 2034, 2035, 2037, 2021, 2022,
     2023, 2024, 2025, 2027, 2028, 2029, 2030, 2038, 2039, 1858,
     1858, 1858, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 2040, 2031, 2032, 2033, 2034, 2035, 2037, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2038, 2039, 1858,
     1858, 1858, 1858, 1858, 1858, 2050, 2051, 2409, 2409, 2409,
     2409, 2040, 2409, 2409, 2409, 2409, 2036, 2052, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2053, 2054, 2055,

     2056, 2057, 2058, 2059, 2060, 2050, 2051, 1907, 1907, 1907,
     1907, 1907, 1907, 1907, 1907, 1907, 2061, 2052, 2062, 2064,
     2065, 2066, 2067, 2068, 2069, 2070, 2071, 2053, 2054, 2055,
     2056, 2057, 2058, 2059, 2060, 2072, 2073, 2074, 2075, 2076,
     2409, 2409, 2409, 2409, 2409, 2409, 2061, 2409, 2062, 2064,
     2065, 2066, 2067, 2068, 2069, 2070, 2071, 2077, 2078, 2079,
     2080, 2081, 2082, 2083, 2084, 2072, 2073, 2074, 2075, 2076,
     1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 2085,
     2086, 2087, 2088, 2089, 2409, 2409, 2409, 2077, 2078, 2079,
     2080, 2081, 2082, 2083, 2084, 1882, 1882, 1882, 1882, 1882,

     1882, 1882, 1882, 1882, 2090, 2409, 2409, 2409, 2409, 2085,
     2086, 2087, 2088, 2089, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 2092,  116, 2093, 2093, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2090,  116,  116,  116,  116,  116,
      116,  116,  116,  116, 2094, 2095, 2096, 2097, 2098, 2099,
     2100, 2101, 2102, 2092, 2105, 2106, 2108, 2109, 2110, 2112,
     2115, 2116, 2117, 2118, 2119, 2121, 1844, 2123, 2124, 2125,
     2126, 2127, 2128, 2129, 2094, 2095, 2096, 2097, 2098, 2099,
     2100, 2101, 2102, 2130, 2105, 2106, 2108, 2109, 2110, 2112,
     2115, 2116, 2117, 2118, 2119, 2121, 1844, 2123, 2124, 2125,

     2126, 2127, 2128, 2129, 2131, 2132, 2134, 2135, 2136, 2137,
     2138, 2139, 2140, 2130, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 2026, 2026, 2141, 2142, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2131, 2132, 2134, 2135, 2136, 2137,
     2138, 2139, 2140, 2144, 2145, 2146, 2147, 2149, 2150, 2151,
     2148, 2152, 2153, 2141, 2142, 2154, 2155, 2156, 2133, 2157,
     2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
     2168, 2169, 2170, 2144, 2145, 2146, 2147, 2149, 2150, 2151,
     2148, 2152, 2153, 2171, 2172, 2154, 2155, 2156, 2173, 2157,
     2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,

     2168, 2169, 2170, 2174, 2175, 2176, 2177, 2409,  116, 2409,
     2409, 2409, 2409, 2171, 2172, 2409, 2409, 2409, 2173, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 2179, 2180,
     2181, 2182, 2183, 2174, 2175, 2176, 2177, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2093, 2093, 2178, 2178, 2178, 2178,
     2178, 2178, 2178, 2178, 2178, 2184, 2186, 2187, 2179, 2180,
     2181, 2182, 2183, 2188, 2189, 2192, 2194, 2195, 2196, 2197,
     2198, 2199, 2200, 2202, 2201, 2203, 2204, 2205, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2184, 2186, 2187, 2208, 2209,
     2210, 2211, 2409, 2188, 2189, 2192, 2194, 2195, 2196, 2197,

     2198, 2199, 2200, 2202, 2201, 2203, 2204, 2205, 2207, 2207,
     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2212, 2208, 2209,
     2210, 2211, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2228, 2212, 2229, 2230,
     2231, 2232, 2233, 2234, 2235, 2409, 2409, 2409, 2409, 2409,
     2409, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2228, 2238, 2229, 2230,
     2231, 2232, 2233, 2234, 2235, 2178, 2178, 2178, 2178, 2178,
     2178, 2178, 2178, 2178, 2236, 2236, 2236, 2236, 2236, 2236,

     2236, 2236, 2236, 2240, 2241, 2242, 2244, 2238, 2251, 2247,
     2248, 2249, 2250, 1844, 2253, 2254, 2255, 2256, 2257, 2258,
     2259, 2252, 2008, 2260, 2261, 2262, 2263, 2264, 2265, 2266,
     2267, 1844, 2409, 2240, 2241, 2242, 2244, 2409, 2237, 2247,
     2248, 2249, 2250, 1844, 2253, 2254, 2255, 2256, 2257, 2258,
     2259, 2252, 2008, 2260, 2261, 2262, 2263, 2264, 2265, 2266,
     2267, 1844, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2268, 2269, 2270, 2236, 2236, 2236, 2236, 2236, 2236,
     2236, 2236, 2236, 2272, 2274, 2275, 2276, 2277, 2281, 2282,
     2283, 2409, 2285,  116, 2286, 1844, 2287, 2288, 2284, 2289,

     2290, 2268, 2269, 2270,  116,  116,  116,  116,  116,  116,
      116,  116,  116, 2272, 2274, 2275, 2276, 2277, 2281, 2282,
     2283, 1844, 2285, 2291, 2286, 1844, 2287, 2288, 2292, 2289,
     2290, 2293, 2297, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2298, 2299, 2301, 2302, 1844, 2303, 2305, 2306,
     2307, 1844,  116, 2291, 2308, 2310, 2313, 2316, 2292, 2317,
     2319, 2293, 2297, 2236, 2236, 2236, 2236, 2236, 2236, 2236,
     2236, 2236, 2298, 2299, 2301, 2302, 1844, 2303, 2305, 2306,
     2307, 2284, 1844, 2320, 2308, 2310, 2313, 2316, 2321, 2317,
     2319, 2008, 2322, 2323, 2327, 2329, 2330, 2331, 2332, 2324,

     2333, 2334, 2337, 2338, 2339, 2340, 2335, 2341, 2342, 2343,
     2325, 2284, 1844, 2320, 2336, 2344, 2345, 2346, 2321, 2347,
     2348, 2008, 2322, 2323, 2327, 2329, 2330, 2331, 2332, 2324,
     2333, 2334, 2337, 2338, 2339, 2340, 2335, 2341, 2342, 2343,
     2349, 2350, 2352, 2353, 2336, 2344, 2345, 2346, 2354, 2347,
     2348, 2355, 2357, 2358, 2360, 2361, 2362, 2365, 2366, 2370,
     2372, 2373, 2367, 2374, 2377, 2378, 2379, 2381, 2382, 2383,
     2349, 2350, 2352, 2353, 2384, 2387, 2388, 2392, 2354, 2395,
     2398, 2355, 2357, 2358, 2360, 2361, 2362, 2365, 2366, 2370,
     2372, 2373, 2367, 2374, 2377, 2378, 2379, 2381, 2382, 2383,

     2401, 2403, 2409, 2409, 2384, 2387, 2388, 2392, 2409, 2395,
     2398, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2401, 2403,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   96, 2409, 2409,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  116, 2409, 2409, 2409,
      116, 2409,  116,  116,  117,  117,  117, 2409,  117,  117,
      117,  117,  117,  122, 2409, 2409,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  288, 2409,  288,  288,
      288,  288, 2409,  288,  288,  288,  288,  288,  288,  290,
     2409,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  293, 2409,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  296, 2409,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  297, 2409,
     2409,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  298, 2409,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,   96, 2409, 2409,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  301, 2409, 2409,
     2409,  301, 2409,  301,  301,  117,  117, 2409, 2409,  117,
      117,  117,  117,  329, 2409,  329, 2409,  329,  329,  329,
      329,  329,  332, 2409, 2409,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  122, 2409, 2409,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  135, 2409, 2409,
      135,  342, 2409,  342,  575, 2409, 2409,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  601, 2409, 2409,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      288, 2409,  288,  288,  288,  288, 2409,  288,  288,  288,
      288,  288,  288,  290, 2409,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  293, 2409,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  296,
     2409,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  297, 2409, 2409,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  298, 2409,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  301, 2409,
     2409, 2409,  301, 2409,  301,  301,  329, 2409,  329, 2409,
      329,  329,  329,  329,  657, 2409, 2409,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  332, 2409, 2409,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  925,
     2409, 2409,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  985, 2409,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985, 1575, 2409, 2409, 2409, 1575,
     2409, 1575, 1575, 1843, 2409, 1843, 1843, 1843, 1843, 1843,

     1843, 1843, 1843, 1843, 1843, 1843, 1859, 2409, 1859, 1859,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1858,
     2409, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858,
     1858, 1858, 2091, 2409, 2409, 2409, 2091, 2409, 2091, 2091,
     2271, 2409, 2409, 2409, 2271, 2409, 2271, 2271,   17, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,

     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409
    } ;

static const flex_int16_t yy_chk[5946] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    5,    6,

       15,    7,    8,   11,   11,   12,   12,   16,    3,    4,
        7,    8,   14,   14,   15,   19,   23,   19,   19,   28,
       21,   16,   21,   21,   34,   41,   41,   51,   34,   52,
       76,   51,   99,  100,    5,    6,   33,   39,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   26,   94,   26,
       94,   94, 2407,   39,   39,   39,   39,   51, 2406,   52,
       76,   51,   99,  100,    5,    6,  140,  140, 2405,   28,
      101,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   96, 2404,

      101,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   26,   35,
       36,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       45,  147,  147,   58,   55,  102,   35,   35,   35,   35,
       35,   35,   36,   96,   37,   37, 2403,  122,   55,  104,
       36,  105, 2400,   45,   49, 2397,   35,   45,   49,   35,
       37,   45,   49,  109,   55,  102,   35,   35,   35,   35,
       35,   35,   36,   49,   58,  111,   58,   45,   55,  104,
      114,  105,   37,   45,   49,   78,   35,   45,   49,   35,

       37,   45,   49,  109,   78,  119,  108,  122,  135,   65,
     2396, 2394,  108,   49,   58,  111,   58,   45, 2393,  110,
      114,  110,   37,   42,   42,   78, 2391,   42,   42, 2390,
      112,  136,  136,   42,   78,   42,  108,   42,  135, 2387,
       42,   42,  108,   42,   65,  112, 2386,   65,   43,  110,
     2385,  110,   43,   42,   42, 2382,   43,   42,   42,   43,
      112,   43,   43,   42,   44,   42,  136,   42,   43,  136,
       42,   42,   48,   42,   65,  112,   68,   65,   43,   48,
       68,  137,   43,   44,  119,   48,   43,   68,   48,   43,
       44,   43,   43,  139,   44,  113,  136,   44,   43,  136,

       44,   44,   48, 2381,  141,   68,   68,  151,  113,   48,
       68,  137, 2374,   44, 2369,   48,  152,   68,   48, 2368,
       44, 2363,   63,  139,   44,  113,  153,   44, 2361, 2360,
       44,   44,   46,   46,  141,  154,  115,  151,  113,  157,
      115,  160,   46,   46,   46,   63,  152,   47,   46,   46,
      115,   47,   46,   63,   46,   47,  153, 2356,   47,   63,
      175,   47,   46,   46,   47,  154,  115,   47,  161,  157,
      115,  160,   46,   46,   46,   63, 2355,   47,   46,   46,
      115,   47,   46,   63,   46,   47,  134,  134,   47,   63,
      155,   47,   50,   50,   47,  155, 2351,   47,  161,   50,

       50,  107,  134,   53,   54,   50,   50,   53,   54,  107,
      175,   53,   54,  163,  107, 2348,   53,   53,   54,  156,
      155,  164,   50,   50,   54,  155,  163, 2343,   53,   50,
       50,  107,  134,   53,   54,   50,   50,   53,   54,  107,
      156,   53,   54,  163,  107,   56,   53,   53,   54,  156,
      159,  164,   56,   56,   54,   56,  163,   56,   53,   57,
       56,   56,  159,   57,   59,  158,   57,   57,   59,  165,
      156,  158,   59,   57,  166,   56,   57,  167,   59,   57,
      159,  158,   56,   56,   59,   56,  266,   56,  575,   57,
       56,   56,  159,   57,   59,  158,   57,   57,   59,  165,

     2315,  158,   59,   57,  166, 2312,   57,  167,   59,   57,
      171,  158, 2305,  174,   59,   60,  170,   60,  103,   60,
      103,  176,   60,   60,  103,   60,  170,   60, 2301,   60,
      103,   60, 2300,  179,   60,   60,  266,   60,  575,  578,
      171,  601,   62,  174,  604,   60,  170,   60,  103,   60,
      103,  176,   60,   60,  103,   60,  170,   60,   62,   60,
      103,   60,   61,  179,   60,   60,   61,   60,   62,   61,
       61,  169,  169,  169,   64,  180,   61,  181,   62,   61,
       62,   64,   64,   62,   62,  182,   61,  183,   64,  578,
     2298,  601,   61, 2297,  604, 2295,   61, 2286,   62,   61,

       61,  169,  169,  169,   64,  180,   61,  181,   62,   61,
       62,   64,   64,   62,   62,  182,   61,  183,   64,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  129,  129, 2281,
      185,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      162,  162, 2275, 2274,  186, 2272, 2247, 2246, 2245, 2239,
     2195, 2194, 2190,  162,  162,  192, 2186,  129,  129,  133,
      185,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      162,  162,  184,  184,  186,  178,  133,  133,  133,  133,
      133,  133,  173,  162,  162,  192,  172, 2131,  173,  184,

      184,  178,  172,  172,  178,  193,  133,  172,  172,  133,
      172,  172,  184,  184, 2113,  178,  133,  133,  133,  133,
      133,  133,  173, 2111,  189, 2110,  172,  189,  173,  184,
      184,  178,  172,  172,  178,  193,  133,  172,  172,  133,
      172,  172,  177,  177,  187,  177,  188,  190,  187,  194,
      191,  196,  188,  177,  189,  177,  191,  189,  177,  188,
      197,  199,  191,  188,  201,  195,  190,  195,  200,  190,
      198,  200,  177,  177,  187,  177,  188,  190,  187,  194,
      191,  196,  188,  177,  198,  177,  191,  202,  177,  188,
      197,  199,  191,  188,  201,  195,  190,  195,  200,  190,

      198,  200,  203,  204,  205,  206,  209,  204,  207,  210,
      211,  208, 2104,  213,  198,  214,  207,  202,  207,  208,
      218,  220,  212,  214,  207, 2009, 2007, 2001,  925, 2000,
      213,  956,  203,  204,  205,  206,  209,  204,  207,  210,
      211,  208,  212,  213,  221,  214,  207,  215,  207,  208,
      218,  220,  212,  214,  207,  217,  215,  217,  215,  215,
      213,  217,  219,  223,  222,  215,  222,  224,  227,  217,
      229,  230,  212,  219,  221,  219,  231,  215,  925,  219,
      232,  956, 1998,  219, 1993,  217,  215,  217,  215,  215,
     1990,  217,  219,  223,  222,  215,  222,  224,  227,  217,

      229,  230, 1989,  219,  233,  219,  231,  235,  228,  219,
      232,  228,  234,  219,  225,  225,  234,  228,  225,  233,
      225,  233,  236,  237,  225,  238,  225,  225,  228,  238,
      225,  225,  225,  239,  233,  238,  225,  235,  228,  240,
      242,  228,  234,  244,  225,  225,  234,  228,  225,  233,
      225,  233,  236,  237,  225,  238,  225,  225,  228,  238,
      225,  225,  225,  239,  241,  238,  225,  246,  247,  240,
      242,  245,  248,  244,  250,  253,  254,  251,  241, 1923,
      245, 1841,  245,  258, 1836, 1832,  248, 1828, 1824,  251,
     1654, 1646,  260,  254,  241,  252, 1615,  246,  247,  252,

     1601,  245,  248,  262,  250,  253,  254,  251,  241,  243,
      245,  243,  245,  258,  243,  243,  248,  249,  243,  251,
      243,  243,  260,  254,  243,  252,  249,  243,  243,  252,
      249,  249,  249,  262,  249,  265,  255, 1593, 1592,  243,
      259,  243,  255, 1455,  243,  243, 1426,  249,  243,  268,
      243,  243,  259,  270,  243, 1360,  249,  243,  243,  256,
      249,  249,  249,  256,  249,  265,  255,  257,  257, 1350,
      259,  261,  255,  256,  271,  261,  256,  272,  257,  268,
      264,  261,  259,  270,  261,  263,  263,  274,  264,  256,
     1319,  263, 1313,  256,  275, 1309,  263,  257,  257,  263,

      264,  261, 1303,  256,  271,  261,  256,  272,  257,  279,
      264,  261,  281,  273,  261,  263,  263,  274,  264,  273,
      269,  263,  269, 1114,  275,  269,  263,  276,  269,  263,
      264,  277,  269,  282,  283,  277,  276,  278,  284,  279,
      285,  277,  281,  273,  290,  278,  302,  291,  303,  273,
      269,  304,  269,  278, 1113,  269,  291,  276,  269,  292,
      292,  277,  269,  282,  283,  277,  276,  278,  284, 1079,
      285,  277,  307,  308,  290,  278,  302,  291,  303, 1022,
      987,  304,  986,  278,  280,  309,  291,  310,  311,  292,
      292,  306,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  306,  307,  308,  985,  312,  313,  280,  280,  280,
      280,  280,  280,  976,  315,  309,  936,  310,  311,  726,
      316,  306,  305,  305,  677,  317,  660,  658,  657,  318,
      314,  306,  624,  305,  280,  312,  313,  280,  280,  280,
      280,  280,  280,  286,  315,  286,  286,  286,  314,  286,
      316,  319,  305,  305,  286,  317,  286,  286,  286,  318,
      314,  286,  286,  305,  320,  321,  322,  323,  324,  325,
      326,  327,  328,  286,  623,  286,  286,  286,  314,  286,
      587,  319,  576,  367,  286,  346,  286,  286,  286,  335,
      333,  286,  286,  332,  320,  321,  322,  323,  324,  325,

      326,  327,  328,  337,  337,  330,  340,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  342,  348,  349,  350,  351,
      352,  355,  356,  357,  339,  339,  340,  358,  359,  360,
      362,  363,  364,  365,  366,  370,  368,  371,  372,  329,
      374,  375,  358,  368,  376,  342,  348,  349,  350,  351,
      352,  355,  356,  357,  339,  339,  369,  358,  359,  360,
      362,  363,  364,  365,  366,  370,  368,  371,  372,  369,
      374,  375,  358,  368,  376,  377,  378,  379,  380,  381,
      382,  383,  384,  385,  386,  387,  369,  388,  390,  391,

      392,  394,  393,  381,  395,  396,  397,  398,  400,  369,
      393,  401,  402,  300,  404,  377,  378,  379,  380,  381,
      382,  383,  384,  385,  386,  387,  407,  388,  390,  391,
      392,  394,  393,  381,  395,  396,  397,  398,  400,  403,
      393,  401,  402,  403,  404,  405,  408,  406,  405,  406,
      409,  410,  411,  412,  413,  414,  407,  406,  415,  416,
      417,  413,  418,  419,  415,  420,  423,  424,  425,  403,
      427,  422,  428,  403,  429,  405,  408,  406,  405,  406,
      409,  410,  411,  412,  413,  414,  422,  406,  415,  416,
      417,  413,  418,  419,  415,  420,  423,  424,  425,  426,

      427,  422,  428,  430,  429,  431,  432,  433,  434,  426,
      435,  436,  437,  438,  439,  440,  422,  442,  443,  444,
      445,  443,  446,  447,  447,  448,  449,  450,  451,  426,
      452,  453,  295,  430,  455,  431,  432,  433,  434,  426,
      435,  436,  437,  438,  439,  440,  456,  442,  443,  444,
      445,  443,  446,  447,  447,  448,  449,  450,  451,  457,
      452,  453,  454,  454,  455,  458,  459,  460,  461,  462,
      463,  464,  465,  466,  454,  467,  456,  469,  470,  454,
      467,  472,  294,  474,  476,  463,  477,  478,  479,  457,
      480,  293,  454,  454,  482,  458,  459,  460,  461,  462,

      463,  464,  465,  466,  454,  467,  483,  469,  470,  454,
      467,  472,  473,  474,  476,  463,  477,  478,  479,  481,
      480,  473,  484,  485,  482,  486,  488,  487,  473,  487,
      489,  489,  490,  481,  491,  492,  483,  493,  488,  494,
      489,  495,  473,  497,  499,  500,  502,  287,  503,  481,
      504,  473,  484,  485,  505,  486,  488,  487,  473,  487,
      489,  489,  490,  481,  491,  492,  498,  493,  488,  494,
      489,  495,  501,  497,  499,  500,  502,  498,  503,  506,
      504,  507,  508,  511,  505,  509,  510,  510,  508,  512,
      501,  501,  509,  513,  510,  514,  498,  515,  516,  517,

      515,  518,  501,  520,  515,  521,  522,  498,  510,  506,
      523,  507,  508,  511,  524,  509,  510,  510,  508,  512,
      501,  501,  509,  513,  510,  514,  519,  515,  516,  517,
      515,  518,  526,  520,  515,  521,  522,  527,  510,  519,
      523,  528,  525,  529,  524,  525,  530,  531,  532,  533,
      534,  535,  536,  537,  538,  540,  519,  542,  529,  541,
      541,  543,  526,  544,  545,  546,  547,  527,  549,  519,
      550,  528,  525,  529,  551,  525,  530,  531,  532,  533,
      534,  535,  536,  537,  538,  540,  552,  542,  529,  541,
      541,  543,  554,  544,  545,  546,  547,  553,  549,  555,

      550,  553,  557,  558,  551,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  568,  569,  552,  570,  572,  571,
      574,  579,  554,  580,  581,  573,  582,  553,  583,  555,
      571,  553,  557,  558,  573,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  568,  569,  584,  570,  572,  571,
      574,  579,  584,  580,  581,  573,  582,  584,  583,  585,
      571,  588,  589,  590,  573,  591,  592,  593,  594,  595,
      596,  597,  589,  598,  589,  599,  584,  600,  606,  607,
      608,  609,  584,  610,  611,  612,  595,  584,  613,  585,
      614,  588,  589,  590,  615,  591,  592,  593,  594,  595,

      596,  597,  589,  598,  589,  599,  618,  600,  606,  607,
      608,  609,  267,  610,  611,  612,  595,  603,  613,  168,
      614,  616,  620,  145,  615,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  131,  616,  618,  127,  605,  605,
      603,  603,  603,  603,  603,  603,  617,  123,  605,  617,
      605,  616,  620,  617,  605,  605,  622,  625,  622,  626,
      627,  628,  619,  629,  625,  616,  619,  603,  605,  605,
      603,  603,  603,  603,  603,  603,  617,  619,  605,  617,
      605,  630,  631,  617,  605,  605,  622,  625,  622,  626,
      627,  628,  619,  629,  625,  632,  619,  633,  634,  632,

      635,  636,  637,  638,  639,  640,  641,  619,  643,  642,
      644,  630,  631,  645,  635,  642,  646,  647,  649,  650,
      651,  652,  653,  654,  655,  632,  117,  633,  634,  632,
      635,  636,  637,  638,  639,  640,  641,  668,  643,  642,
      644,   98,   93,  645,  635,  642,  646,  647,  649,  650,
      651,  652,  653,  654,  655,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  663,  663,  669,  668,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  670,  671,  672,
      673,  675,  676,  678,  679,  680,  681,  683,  684,  685,
      686,  688,  690,  691,  692,  694,  669,  695,  696,  697,

      698,  699,  700,  701,  702,  704,  705,  670,  671,  672,
      673,  675,  676,  678,  679,  680,  681,  683,  684,  685,
      686,  688,  690,  691,  692,  694,  706,  695,  696,  697,
      698,  699,  700,  701,  702,  704,  705,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  709,  710,  711,  712,
      713,  714,  715,  716,  717,  718,  706,  719,  720,  721,
      722,  723,  724,  725,  727,  728,  731,  732,  733,  734,
      708,  735,  736,  737,  738,  739,  709,  710,  711,  712,
      713,  714,  715,  716,  717,  718,  740,  719,  720,  721,
      722,  723,  724,  725,  727,  728,  731,  732,  733,  734,

      708,  735,  736,  737,  738,  739,  742,  741,  743,  744,
      745,  746,  747,  748,  750,  751,  740,  741,  752,  754,
      755,  756,  757,  758,  759,  741,  761,   90,  762,  752,
       81,   79,  752,  765,  766,  767,  742,  741,  743,  744,
      745,  746,  747,  748,  750,  751,  768,  741,  752,  754,
      755,  756,  757,  758,  759,  741,  761,  760,  762,  752,
      760,  764,  752,  765,  766,  767,  764,  769,  770,  771,
      773,  760,  772,  774,  775,  769,  768,  776,  777,  780,
      781,  760,  782,  772,  783,  784,  787,  788,  789,  790,
      791,  764,  792,  793,  794,  795,  764,  769,  770,  771,

      773,  760,  772,  774,  775,  769,  796,  776,  777,  780,
      781,  760,  782,  772,  783,  784,  787,  788,  789,  790,
      791,  797,  792,  793,  794,  795,  799,  801,  802,  803,
      804,  805,  806,  808,  809,  810,  796,  811,  812,  812,
      813,  814,  815,  816,  817,  818,  819,  820,  821,  809,
      822,  797,  823,  824,  825,  826,  799,  801,  802,  803,
      804,  805,  806,  808,  809,  810,  828,  811,  812,  812,
      813,  814,  815,  816,  817,  818,  819,  820,  821,  809,
      822,  830,  823,  824,  825,  826,  831,  832,  833,  834,
      835,  836,  837,  838,  839,  840,  828,  841,  842,  844,

      845,  846,  847,  848,  849,  850,  851,  852,  853,  854,
      855,  830,  856,  857,  858,  859,  831,  832,  833,  834,
      835,  836,  837,  838,  839,  840,  862,  841,  842,  844,
      845,  846,  847,  848,  849,  850,  851,  852,  853,  854,
      855,  863,  856,  857,  858,  859,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  861,  862,  864,  865,  861,
      866,  867,  868,  869,  870,  871,  860,  872,  873,  874,
      875,  863,  876,  878,  880,  881,  883,  884,  885,  886,
      887,  892,  893,  894,  893,  861,  889,  864,  865,  861,
      866,  867,  868,  869,  870,  871,  860,  872,  873,  874,

      875,  889,  876,  878,  880,  881,  883,  884,  885,  886,
      887,  892,  893,  894,  893,  896,  889,  897,  898,  899,
      900,  901,  902,  903,  904,  906,  908,  910,  911,  912,
      913,  911,  915,  916,  917,  918,  921,  922,  927,  928,
      929,  930,  931,  932,  933,  896,  934,  897,  898,  899,
      900,  901,  902,  903,  904,  906,  908,  910,  911,  912,
      913,  911,  915,  916,  917,  918,  921,  922,  927,  928,
      929,  930,  931,  932,  933,  935,  934,  937,  938,  939,
      940,  941,  942,  944,  946,  947,  948,  949,  951,  952,
       75,  957,  958,  959,  960,  961,  962,  963,   72,   40,

       38,   32,   31,   29,   27,  935,   22,  937,  938,  939,
      940,  941,  942,  944,  946,  947,  948,  949,  951,  952,
      955,  957,  958,  959,  960,  961,  962,  963,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  964,  965,  966,
      967,  968,  969,  955,  955,  955,  955,  955,  955,  970,
      971,  972,  973,  974,  975,  977,  978,  979,  980,  981,
      979,  982,   17,   13,  988,  989,  990,  964,  965,  966,
      967,  968,  969,  955,  955,  955,  955,  955,  955,  970,
      971,  972,  973,  974,  975,  977,  978,  979,  980,  981,
      979,  982,  983,  984,  988,  989,  990,  991,  992,  993,

      994,  984,  984,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006, 1007,  983, 1011, 1012, 1013, 1014,
     1015, 1017, 1018,  984, 1019, 1020, 1021,  991,  992,  993,
      994,  984,  984,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006, 1007,  983, 1011, 1012, 1013, 1014,
     1015, 1017, 1018, 1024, 1019, 1020, 1021, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1028, 1029, 1030, 1033, 1034,
     1036, 1037, 1038, 1024, 1039, 1040, 1041, 1042, 1043, 1045,
     1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057,

     1058, 1059,   10,    9,    0, 1028, 1029, 1030, 1033, 1034,
     1036, 1037, 1038, 1061, 1039, 1040, 1041, 1042, 1043, 1045,
     1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057,
     1058, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1062, 1064, 1061, 1065, 1066, 1067, 1068, 1069, 1070,
     1071, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1085, 1062, 1064, 1094, 1065, 1066, 1067, 1068, 1069, 1070,
     1071, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,

     1085, 1096, 1098, 1094, 1099, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1111, 1115, 1116, 1111, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1127, 1129,    0, 1131,
     1132, 1096, 1098, 1133, 1099, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1111, 1115, 1116, 1111, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1127, 1129, 1130, 1131,
     1132, 1134, 1135, 1133, 1136, 1138, 1130, 1139, 1140, 1141,
     1142, 1143, 1145, 1146, 1147, 1140, 1148, 1149, 1149, 1150,
     1151,    0, 1154, 1155, 1156, 1157, 1158, 1159, 1130, 1161,
     1162, 1134, 1135, 1163, 1136, 1138, 1130, 1139, 1140, 1141,

     1142, 1143, 1145, 1146, 1147, 1140, 1148, 1149, 1149, 1150,
     1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1153, 1161,
     1162, 1164, 1153, 1163, 1153, 1165, 1153, 1153, 1166, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
     1178, 1153, 1179, 1180, 1181, 1182, 1184, 1185, 1153, 1186,
     1187, 1164, 1153, 1189, 1153, 1165, 1153, 1153, 1166, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
     1178, 1190, 1179, 1180, 1181, 1182, 1184, 1185, 1191, 1186,
     1187, 1192, 1193, 1189, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1202, 1203, 1204, 1205, 1207, 1209,    0,    0,    0,

        0, 1190,    0,    0,    0,    0, 1211, 1212, 1191, 1213,
     1214, 1192, 1193, 1216, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1202, 1203, 1204, 1205, 1207, 1209, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1211, 1212, 1215, 1213,
     1214, 1217, 1218, 1216, 1219, 1220, 1221, 1223, 1225, 1226,
     1215, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1215, 1236,
     1237, 1217, 1218, 1238, 1219, 1220, 1221, 1223, 1225, 1226,
     1215, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1249, 1236,

     1237, 1250, 1252, 1238, 1253, 1254, 1255, 1256, 1257, 1259,
     1262, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1249, 1271,
     1272, 1250, 1252, 1273, 1253, 1254, 1255, 1256, 1257, 1259,
     1262,    0,    0,    0,    0,    0,    0,    0, 1275, 1276,
     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1274, 1271,
     1272, 1277, 1278, 1273, 1279, 1280, 1281, 1283, 1286, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275, 1276,
     1287, 1290, 1291, 1293, 1290, 1294, 1295, 1297, 1298, 1299,
     1300, 1277, 1278, 1302, 1279, 1280, 1281, 1283, 1286, 1301,

     1304, 1305, 1301, 1306, 1307, 1308, 1310, 1311, 1312, 1314,
     1287, 1290, 1291, 1293, 1290, 1294, 1295, 1297, 1298, 1299,
     1300, 1315, 1316, 1302, 1317, 1318, 1320, 1321, 1318, 1301,
     1304, 1305, 1301, 1306, 1307, 1308, 1310, 1311, 1312, 1314,
     1324, 1326, 1327, 1328, 1330, 1332, 1333, 1317, 1334, 1335,
     1336, 1315, 1316, 1337, 1338, 1318, 1320, 1321, 1318, 1339,
     1340, 1341, 1342, 1343, 1344, 1346, 1347, 1348, 1349, 1351,
     1324, 1326, 1327, 1328, 1330, 1332, 1333, 1317, 1334, 1335,
     1336, 1352, 1353, 1337, 1338, 1354, 1356, 1361, 1362, 1339,
     1340, 1341, 1342, 1343, 1344, 1346, 1347, 1348, 1349, 1351,

     1363, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1369, 1352, 1353, 1374, 1375, 1354, 1356, 1361, 1362, 1376,
     1377, 1378, 1379, 1380, 1382, 1383, 1384, 1385, 1386, 1387,
     1363, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1369, 1391, 1392, 1374, 1375, 1393, 1395, 1396, 1398, 1376,
     1377, 1378, 1379, 1380, 1382, 1383, 1384, 1385, 1386, 1387,
     1399, 1400, 1402, 1407, 1408, 1409, 1410, 1411, 1412, 1414,
     1415, 1391, 1392, 1416, 1417, 1393, 1395, 1396, 1398, 1418,
     1421, 1422, 1425, 1428, 1429, 1430, 1431, 1433, 1435, 1437,
     1399, 1400, 1402, 1407, 1408, 1409, 1410, 1411, 1412, 1414,

     1415, 1438, 1439, 1416, 1417, 1440, 1442, 1443, 1445, 1418,
     1421, 1422, 1425, 1428, 1429, 1430, 1431, 1433, 1435, 1437,
     1446, 1447, 1448, 1449, 1451, 1453, 1454, 1456, 1458, 1459,
     1461, 1438, 1439, 1462, 1463, 1440, 1442, 1443, 1445, 1464,
     1465, 1466, 1467, 1468, 1469, 1470, 1472, 1466, 1473, 1474,
     1446, 1447, 1448, 1449, 1451, 1453, 1454, 1456, 1458, 1459,
     1461, 1476, 1477, 1462, 1463, 1479, 1480, 1481, 1482, 1464,
     1465, 1466, 1467, 1468, 1469, 1470, 1472, 1466, 1473, 1474,
     1483, 1490, 1491, 1493, 1494, 1496, 1498, 1499, 1500, 1501,
     1502, 1476, 1477, 1503, 1504, 1479, 1480, 1481, 1482, 1505,

     1506, 1507, 1508, 1509, 1510, 1511, 1513, 1514, 1517, 1519,
     1483, 1490, 1491, 1493, 1494, 1496, 1498, 1499, 1500, 1501,
     1502, 1518, 1520, 1503, 1504, 1518, 1521, 1522, 1523, 1505,
     1506, 1507, 1508, 1509, 1510, 1511, 1513, 1514, 1517, 1519,
     1524, 1525, 1528, 1532, 1533, 1536, 1537, 1538, 1539, 1544,
     1545, 1518, 1520, 1548, 1550, 1518, 1521, 1522, 1523, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1552, 1553,
     1524, 1525, 1528, 1532, 1533, 1536, 1537, 1538, 1539, 1544,
     1545, 1554, 1555, 1548, 1550, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1556, 1557, 1558, 1559, 1552, 1553,

     1561, 1563, 1565, 1562, 1566, 1567, 1568, 1569, 1570, 1571,
     1572, 1554, 1555, 1562, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574,    0, 1556, 1557, 1558, 1559,    0,    0,
     1561, 1563, 1565, 1562, 1566, 1567, 1568, 1569, 1570, 1571,
     1572, 1575, 1576, 1562, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1585, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1586, 1587, 1588, 1589, 1590,    0, 1591, 1594, 1595,
     1596, 1598, 1576, 1599, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1585, 1597, 1599, 1600, 1597, 1602, 1603, 1604, 1606,
     1607, 1586, 1587, 1588, 1589, 1590, 1575, 1591, 1594, 1595,

     1596, 1598, 1608, 1599, 1609, 1610, 1611, 1612, 1613, 1614,
     1616, 1618, 1597, 1599, 1600, 1597, 1602, 1603, 1604, 1606,
     1607, 1619, 1620, 1622, 1624, 1626, 1627, 1628, 1629, 1630,
     1632,    0, 1608, 1636, 1609, 1610, 1611, 1612, 1613, 1614,
     1616, 1618,    0,    0,    0,    0,    0,    0,    0,    0,
     1637, 1619, 1620, 1622, 1624, 1626, 1627, 1628, 1629, 1630,
     1632, 1634, 1634, 1636, 1634, 1634, 1634, 1634, 1634, 1638,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1637, 1639, 1641, 1642, 1643, 1644, 1645, 1648, 1649, 1634,
     1634, 1634, 1634, 1634, 1634, 1651, 1652, 1653, 1655, 1638,

     1656, 1659, 1660, 1662, 1663,    0,    0,    0,    0,    0,
        0, 1639, 1641, 1642, 1643, 1644, 1645, 1648, 1649, 1667,
     1668, 1634, 1634, 1634,    0, 1651, 1652, 1653, 1655, 1670,
     1656, 1659, 1660, 1662, 1663, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1671, 1673, 1674, 1675, 1676, 1667,
     1668, 1634, 1634, 1634, 1634, 1634, 1634, 1677, 1678, 1670,
     1679, 1680, 1681, 1682, 1683, 1686, 1687, 1689, 1690, 1692,
     1698, 1699, 1701, 1702, 1671, 1673, 1674, 1675, 1676,    0,
        0,    0,    0, 1704, 1705, 1706, 1710, 1677, 1678, 1711,
     1679, 1680, 1681, 1682, 1683, 1686, 1687, 1689, 1690, 1692,

     1698, 1699, 1701, 1702, 1703, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1704, 1705, 1706, 1710, 1713, 1715, 1711,
     1717, 1719, 1720, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
     1729, 1731, 1732, 1733, 1734, 1735, 1739, 1740, 1741, 1744,
     1746, 1747, 1748, 1752, 1753, 1755, 1757, 1713, 1715, 1760,
     1717, 1719, 1720, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
     1729, 1731, 1732, 1733, 1734, 1735, 1739, 1740, 1741, 1744,
     1746, 1747, 1748, 1752, 1753, 1755, 1757, 1762, 1763, 1760,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1764,
     1765, 1766, 1768, 1769, 1771, 1772, 1773, 1777, 1778, 1780,

     1781, 1783, 1788, 1789, 1790, 1791, 1793, 1762, 1763, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1794, 1764,
     1765, 1766, 1768, 1769, 1771, 1772, 1773, 1777, 1778, 1780,
     1781, 1783, 1788, 1789, 1790, 1791, 1793, 1795, 1796, 1797,
     1800, 1801, 1802, 1803, 1804, 1806, 1807, 1805, 1794, 1799,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1795, 1796, 1797,
     1800, 1801, 1802, 1803, 1804, 1806, 1807, 1808, 1799, 1809,
     1811, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1823, 1825,
     1826, 1827, 1829, 1799, 1830, 1831, 1833, 1834, 1835, 1837,

     1838, 1839, 1805, 1840, 1842, 1843,    0, 1808, 1799, 1809,
     1811, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1823, 1825,
     1826, 1827, 1829, 1844, 1830, 1831, 1833, 1834, 1835, 1837,
     1838, 1839, 1844, 1840, 1842, 1843, 1845, 1845, 1846, 1847,
     1849, 1850, 1851, 1852, 1853, 1854, 1845, 1855, 1857,    0,
        0, 1860,    0, 1844,    0,    0,    0, 1862,    0,    0,
        0,    0, 1844,    0,    0,    0, 1845, 1845, 1846, 1847,
     1849, 1850, 1851, 1852, 1853, 1854, 1845, 1855, 1857, 1859,
     1859, 1860, 1859, 1859, 1859, 1859, 1859, 1862, 1859, 1859,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1863, 1864,

     1865, 1866, 1870, 1872, 1873, 1874, 1875, 1859, 1859, 1859,
     1859, 1859, 1859, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1876, 1877, 1878, 1879, 1880, 1883, 1863, 1864,
     1865, 1866, 1870, 1872, 1873, 1874, 1875, 1884, 1885, 1859,
     1859, 1859, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1886, 1876, 1877, 1878, 1879, 1880, 1883, 1889, 1893,
     1894, 1895, 1897, 1898, 1901, 1902, 1904, 1884, 1885, 1859,
     1859, 1859, 1859, 1859, 1859, 1905, 1906,    0,    0,    0,
        0, 1886,    0,    0,    0,    0, 1882, 1908, 1889, 1893,
     1894, 1895, 1897, 1898, 1901, 1902, 1904, 1910, 1912, 1914,

     1915, 1916, 1917, 1918, 1919, 1905, 1906, 1907, 1907, 1907,
     1907, 1907, 1907, 1907, 1907, 1907, 1921, 1908, 1922, 1925,
     1926, 1928, 1929, 1930, 1932, 1933, 1934, 1910, 1912, 1914,
     1915, 1916, 1917, 1918, 1919, 1935, 1937, 1938, 1941, 1942,
        0,    0,    0,    0,    0,    0, 1921,    0, 1922, 1925,
     1926, 1928, 1929, 1930, 1932, 1933, 1934, 1945, 1947, 1949,
     1950, 1952, 1954, 1955, 1956, 1935, 1937, 1938, 1941, 1942,
     1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1959,
     1961, 1962, 1963, 1965,    0,    0,    0, 1945, 1947, 1949,
     1950, 1952, 1954, 1955, 1956, 1967, 1967, 1967, 1967, 1967,

     1967, 1967, 1967, 1967, 1969,    0,    0,    0,    0, 1959,
     1961, 1962, 1963, 1965, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1972, 1970, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1969, 1970, 1970, 1970, 1970, 1970,
     1970, 1970, 1970, 1970, 1978, 1979, 1981, 1983, 1984, 1985,
     1986, 1987, 1988, 1972, 1991, 1992, 1994, 1995, 1996, 1999,
     2002, 2003, 2004, 2005, 2006, 2008, 2008, 2012, 2013, 2014,
     2015, 2017, 2018, 2019, 1978, 1979, 1981, 1983, 1984, 1985,
     1986, 1987, 1988, 2020, 1991, 1992, 1994, 1995, 1996, 1999,
     2002, 2003, 2004, 2005, 2006, 2008, 2008, 2012, 2013, 2014,

     2015, 2017, 2018, 2019, 2022, 2025, 2027, 2028, 2029, 2030,
     2031, 2032, 2033, 2020, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 2026, 2026, 2034, 2035, 2036, 2036, 2036, 2036, 2036,
     2036, 2036, 2036, 2036, 2022, 2025, 2027, 2028, 2029, 2030,
     2031, 2032, 2033, 2037, 2038, 2039, 2040, 2042, 2045, 2046,
     2040, 2047, 2048, 2034, 2035, 2049, 2050, 2051, 2026, 2054,
     2055, 2056, 2057, 2058, 2059, 2060, 2062, 2067, 2069, 2074,
     2075, 2076, 2077, 2037, 2038, 2039, 2040, 2042, 2045, 2046,
     2040, 2047, 2048, 2079, 2080, 2049, 2050, 2051, 2081, 2054,
     2055, 2056, 2057, 2058, 2059, 2060, 2062, 2067, 2069, 2074,

     2075, 2076, 2077, 2083, 2084, 2085, 2090,    0, 2091,    0,
        0,    0,    0, 2079, 2080,    0,    0,    0, 2081, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2095, 2096,
     2098, 2100, 2101, 2083, 2084, 2085, 2090, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2093, 2093, 2094, 2094, 2094, 2094,
     2094, 2094, 2094, 2094, 2094, 2102, 2105, 2106, 2095, 2096,
     2098, 2100, 2101, 2108, 2109, 2112, 2115, 2116, 2117, 2118,
     2119, 2120, 2121, 2122, 2121, 2125, 2129, 2130,    0,    0,
        0,    0,    0,    0,    0, 2102, 2105, 2106, 2135, 2137,
     2139, 2141,    0, 2108, 2109, 2112, 2115, 2116, 2117, 2118,

     2119, 2120, 2121, 2122, 2121, 2125, 2129, 2130, 2133, 2133,
     2133, 2133, 2133, 2133, 2133, 2133, 2133, 2144, 2135, 2137,
     2139, 2141, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2147, 2148, 2150, 2151, 2152, 2153, 2156, 2158, 2159,
     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2144, 2167, 2168,
     2169, 2171, 2172, 2173, 2177,    0,    0,    0,    0,    0,
        0, 2147, 2148, 2150, 2151, 2152, 2153, 2156, 2158, 2159,
     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2184, 2167, 2168,
     2169, 2171, 2172, 2173, 2177, 2178, 2178, 2178, 2178, 2178,
     2178, 2178, 2178, 2178, 2179, 2179, 2179, 2179, 2179, 2179,

     2179, 2179, 2179, 2187, 2188, 2189, 2192, 2184, 2200, 2196,
     2197, 2198, 2199, 2201, 2202, 2203, 2206, 2214, 2216, 2218,
     2221, 2201, 2201, 2222, 2223, 2225, 2226, 2227, 2229, 2231,
     2232, 2200,    0, 2187, 2188, 2189, 2192,    0, 2179, 2196,
     2197, 2198, 2199, 2201, 2202, 2203, 2206, 2214, 2216, 2218,
     2221, 2201, 2201, 2222, 2223, 2225, 2226, 2227, 2229, 2231,
     2232, 2200, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2233, 2234, 2235, 2236, 2236, 2236, 2236, 2236, 2236,
     2236, 2236, 2236, 2238, 2240, 2241, 2242, 2244, 2248, 2249,
     2250,    0, 2252, 2237, 2253, 2252, 2255, 2258, 2251, 2259,

     2260, 2233, 2234, 2235, 2237, 2237, 2237, 2237, 2237, 2237,
     2237, 2237, 2237, 2238, 2240, 2241, 2242, 2244, 2248, 2249,
     2250, 2251, 2252, 2261, 2253, 2252, 2255, 2258, 2262, 2259,
     2260, 2265, 2276,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2277, 2280, 2282, 2283, 2284, 2285, 2287, 2290,
     2291, 2251, 2271, 2261, 2293, 2296, 2299, 2302, 2262, 2304,
     2306, 2265, 2276, 2271, 2271, 2271, 2271, 2271, 2271, 2271,
     2271, 2271, 2277, 2280, 2282, 2283, 2284, 2285, 2287, 2290,
     2291, 2303, 2303, 2307, 2293, 2296, 2299, 2302, 2308, 2304,
     2306, 2303, 2310, 2311, 2313, 2316, 2317, 2318, 2319, 2311,

     2321, 2322, 2324, 2327, 2329, 2330, 2323, 2331, 2332, 2334,
     2311, 2303, 2303, 2307, 2323, 2335, 2336, 2337, 2308, 2338,
     2339, 2303, 2310, 2311, 2313, 2316, 2317, 2318, 2319, 2311,
     2321, 2322, 2324, 2327, 2329, 2330, 2323, 2331, 2332, 2334,
     2340, 2341, 2344, 2345, 2323, 2335, 2336, 2337, 2346, 2338,
     2339, 2347, 2349, 2350, 2352, 2353, 2354, 2357, 2358, 2362,
     2365, 2366, 2358, 2367, 2370, 2372, 2373, 2377, 2378, 2379,
     2340, 2341, 2344, 2345, 2380, 2383, 2384, 2388, 2346, 2392,
     2395, 2347, 2349, 2350, 2352, 2353, 2354, 2357, 2358, 2362,
     2365, 2366, 2358, 2367, 2370, 2372, 2373, 2377, 2378, 2379,

     2398, 2401,    0,    0, 2380, 2383, 2384, 2388,    0, 2392,
     2395,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     2398, 2401, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
     2410, 2410, 2410, 2410, 2410, 2411, 2411, 2411, 2411, 2411,
     2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411, 2412, 2412,
     2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412,
     2412, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
     2413, 2413, 2413, 2413, 2414, 2414, 2414, 2414, 2414, 2414,
     2414, 2414, 2414, 2414, 2414, 2414, 2414, 2415, 2415, 2415,

     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
     2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
     2416, 2416, 2416, 2417,    0,    0, 2417, 2417, 2417, 2417,
     2417, 2417, 2417, 2417, 2417, 2417, 2418,    0,    0,    0,
     2418,    0, 2418, 2418, 2419, 2419, 2419,    0, 2419, 2419,
     2419, 2419, 2419, 2420,    0,    0, 2420, 2420, 2420, 2420,
     2420, 2420, 2420, 2420, 2420, 2420, 2421,    0, 2421, 2421,
     2421, 2421,    0, 2421, 2421, 2421, 2421, 2421, 2421, 2422,
        0, 2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
     2422, 2422, 2423,    0, 2423, 2423, 2423, 2423, 2423, 2423,

     2423, 2423, 2423, 2423, 2423, 2424,    0, 2424, 2424, 2424,
     2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2425,    0,
        0, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425,
     2425, 2426,    0, 2426, 2426, 2426, 2426, 2426, 2426, 2426,
     2426, 2426, 2426, 2426, 2427,    0,    0, 2427, 2427, 2427,
     2427, 2427, 2427, 2427, 2427, 2427, 2427, 2428,    0,    0,
        0, 2428,    0, 2428, 2428, 2429, 2429,    0,    0, 2429,
     2429, 2429, 2429, 2430,    0, 2430,    0, 2430, 2430, 2430,
     2430, 2430, 2431,    0,    0, 2431, 2431, 2431, 2431, 2431,
     2431, 2431, 2431, 2431, 2432,    0,    0, 2432, 2432, 2432,

     2432, 2432, 2432, 2432, 2432, 2432, 2432, 2433,    0,    0,
     2433, 2434,    0, 2434, 2435,    0,    0, 2435, 2435, 2435,
     2435, 2435, 2435, 2435, 2435, 2435, 2435, 2436,    0,    0,
     2436, 2436, 2436, 2436, 2436, 2436, 2436, 2436, 2436, 2436,
     2437,    0, 2437, 2437, 2437, 2437,    0, 2437, 2437, 2437,
     2437, 2437, 2437, 2438,    0, 2438, 2438, 2438, 2438, 2438,
     2438, 2438, 2438, 2438, 2438, 2438, 2439,    0, 2439, 2439,
     2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439, 2440,
        0, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440,
     2440, 2440, 2441,    0,    0, 2441, 2441, 2441, 2441, 2441,

     2441, 2441, 2441, 2441, 2441, 2442,    0, 2442, 2442, 2442,
     2442, 2442, 2442, 2442, 2442, 2442, 2442, 2442, 2443,    0,
        0,    0, 2443,    0, 2443, 2443, 2444,    0, 2444,    0,
     2444, 2444, 2444, 2444, 2445,    0,    0, 2445, 2445, 2445,
     2445, 2445, 2445, 2445, 2445, 2445, 2446,    0,    0, 2446,
     2446, 2446, 2446, 2446, 2446, 2446, 2446, 2446, 2446, 2447,
        0,    0, 2447, 2447, 2447, 2447, 2447, 2447, 2447, 2447,
     2447, 2447, 2448,    0, 2448, 2448, 2448, 2448, 2448, 2448,
     2448, 2448, 2448, 2448, 2448, 2449,    0,    0,    0, 2449,
        0, 2449, 2449, 2450,    0, 2450, 2450, 2450, 2450, 2450,

     2450, 2450, 2450, 2450, 2450, 2450, 2451,    0, 2451, 2451,
     2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451, 2452,
        0, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
     2452, 2452, 2453,    0,    0,    0, 2453,    0, 2453, 2453,
     2454,    0,    0,    0, 2454,    0, 2454, 2454, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,

     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */
/*%option c++ yyclass="HqlLex"*/
#define YY_NO_UNISTD_H 1
#line 26 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
#include "jmisc.hpp"
#include "hqlerrors.hpp"
#include "hql.hpp"
#include "hqlgram.hpp"
#include "eclrtl.hpp"

#include "hqlgram.h"

#define YY_DECL int HqlLex::doyyFlex(YYSTYPE & returnToken, yyscan_t yyscanner, HqlLex * lexer, bool lookup, const short * activeState)
#define register

//#define DEBUG_TOKEN 

#ifdef DEBUG_TOKEN
#define TraceReturnToken(id) PrintLog("Returning " #id " %s", str(name))
#else 
#define TraceReturnToken(id)
#endif

#ifdef FLEX_SCANNER
#define updatepos1          lexer->updatePosition(yyleng)
#define CUR_TOKEN_TEXT      yytext
#define CUR_TOKEN_LENGTH    yyleng
#else
#define updatepos1          lexer->updatePosition(CUR_TOKEN_LENGTH)
#define CUR_TOKEN_TEXT      lexer->yyText
#define CUR_TOKEN_LENGTH    lexer->yyLeng
#endif

#define setupdatepos        { lexer->setTokenPosition(returnToken); updatepos1; }
extern void hex2str(char * target, const char * digits, unsigned len);

#define LOOKUPSYM(sym)      (lookup && lexer->parserExpecting(sym, activeState))
#define RETURNSYM(sym)  \
        setupdatepos; \
        int mapped = lookup ? lexer->mapToken(sym) : sym; \
        if (mapped && LOOKUPSYM(mapped)) return mapped; \
        return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT)
        
#define RETURNHARD(sym) \
        setupdatepos; return sym;

int HqlLex::lookupIdentifierToken(YYSTYPE & returnToken, HqlLex * lexer, bool lookup, const short * activeState, const char * tokenText)
{
    if ((tokenText[0] == '$') && tokenText[1]==0)
        return '$';
        
    /* check $ */
    IIdAtom * cname = createIdAtom(tokenText);
    IAtom * name = cname->queryLower();
    if (lexer->macroParms)
    {
        StringBuffer macroval;
        if (lexer->macroParms->getProp(str(name), macroval))
        {
            lexer->pushText(macroval.str());
            return INTERNAL_READ_NEXT_TOKEN;
        }
    }
    
    IHqlExpression *expr; 
    //fprintf(stderr, "\nLookupSymbol %s\n",name->str());
    //Lookup expr last otherwise it leaks.
    if ( !lookup  || lexer->macroGathering || lexer->skipNesting|| !(expr=lexer->lookupSymbol(cname,returnToken)))
    {
        TraceReturnToken(UNKNOWN_ID);
        returnToken.setId(cname);
        return UNKNOWN_ID;
    }

    IHqlExpression * deprecated = queryMetaAttribute(deprecatedAtom, expr);
    if (deprecated)
    {
        IHqlExpression * alternative = deprecated->queryChild(0);
        StringBuffer alternativeText;
        if (alternative && alternative->queryValue())
            alternative->queryValue()->getStringValue(alternativeText);
        lexer->reportWarning(CategoryDeprecated, returnToken, ERR_DEPRECATED_ATTR, "Definition %s is marked as deprecated.  %s", str(name), alternativeText.str());
    }                   
    
#if defined(TRACE_MACRO)
    PrintLog("MACRO>> set expr at %d:%d\n",lexer->yyLineNo,lexer->yyColumn);
#endif

    if (expr->isMacro())
    {
        int ret_id; 
    
        if (expr->isAction())
            ret_id = DEFINITIONS_MACRO;
        else
            ret_id = VALUE_MACRO;
        
        OwnedHqlExpr ownedExpr = expr;
        lexer->pushMacro(expr);
        return ret_id;
    }
    
    returnToken.setExpr(expr);
    node_operator op = expr->getOperator();
    int token = UNKNOWN_ID;
    bool isFunction = expr->isFunction();
    ITypeInfo * exprType = expr->queryType();
    if (isFunction)
        exprType = exprType->queryChildType();
    type_t etc = exprType->getTypeCode();

    switch (etc)
    {
    case type_sortlist:
        token = SORTLIST_ID;
        break;
    case type_void:
        token = isFunction ? ACTION_FUNCTION : ACTION_ID;
        break;
    case type_transform:
        token = isFunction ? TRANSFORM_FUNCTION : TRANSFORM_ID;
        break;
    case type_dictionary:
        if (op == no_typedef)
            token = DICTIONARY_TYPE_ID;
        else
            token = isFunction ? DICTIONARY_FUNCTION : DICTIONARY_ID;
        break;
    case type_groupedtable:
    case type_table:
        if (op == no_typedef)
            token = DATASET_TYPE_ID;
        else
            token = isFunction ? DATASET_FUNCTION : DATASET_ID;
        break;
    case type_record:
        token = isFunction ? RECORD_FUNCTION : RECORD_ID;
        break;
    case type_row:
        token = isFunction ? DATAROW_FUNCTION : DATAROW_ID;
        break;
    case type_pattern:
    case type_rule:
    case type_token:
        if (op == no_typedef)
            token = PATTERN_TYPE_ID;
        else
            token = isFunction ? PATTERN_FUNCTION : PATTERN_ID;
        break;
    case type_feature:
        token = FEATURE_ID;
        break;
    case type_event:
        token = isFunction ? EVENT_FUNCTION : EVENT_ID;
        break;
    case type_scope:
        token = isFunction ? SCOPE_FUNCTION : SCOPE_ID;
        break;
    case type_set:
        if (op == no_typedef)
            token = SET_TYPE_ID;
        else
        {
            ITypeInfo * childType = exprType->queryChildType();
            if (childType && isDatasetType(childType))
                token = isFunction ? LIST_DATASET_FUNCTION : LIST_DATASET_ID;
            else
                token = isFunction ? VALUE_FUNCTION : VALUE_ID;
        }
        break;
    default:
        {
            if (expr->isType())
            {
                token = ALIEN_ID;
            }
            else if (op == no_typedef)
            {
                token = TYPE_ID;
            }                           
            else if (op == no_enum)
            {
                token = ENUM_ID;
            }                           
            else
            { 
                token = isFunction ? VALUE_FUNCTION : VALUE_ID;
            }
        }
    }

    if (((op == no_param) && expr->hasAttribute(fieldAtom)) || (op == no_indirect))
    {
        switch (token)
        {
        case VALUE_ID:
            token = VALUE_ID_REF;
            break;
        }
    }
    
    //This only returns a known token if the parser is expecting it at that point, otherwise it returns UNKNOWN_ID - if that
    //is expected.  It allows a much cleaner grammar, and solves issues with names clashing because they've already been used.
    if (!lexer->parserExpecting(token, activeState) && lexer->parserExpecting(UNKNOWN_ID, activeState))
    {
        returnToken.release();
        returnToken.setId(cname);
        token = UNKNOWN_ID;
    }

    TraceReturnToken(token);
    return token;
}

#line 2979 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqllex.cpp"

#line 2981 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqllex.cpp"

#define INITIAL 0
#define COMMENT 1
#define CPP 2
#define MULTISTRING 3
#define SLSL 4
#define SLSLHASH 5
#define PGPHEADER 6
#define PGPSIGN 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 264 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"


#line 3254 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqllex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2410 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2409 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 266 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; BEGIN(COMMENT); lexer->inComment = true; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 267 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        updatepos1; 
                        BEGIN(0); 
                        lexer->inComment = false; 

                        int startpos = returnToken.pos.position;
                        int endpos = lexer->yyPosition;
                        if (lexer->yyBuffer[startpos+2] == '*' && isspace((unsigned char)lexer->yyBuffer[startpos+3]))
                            lexer->javaDocComment.clear().append(endpos-startpos-5, lexer->yyBuffer+startpos+3);
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 277 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 278 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; lexer->updateNewline(); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 279 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 281 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        /* error pattern */
                        setupdatepos; 
                        assertex(!lexer->inComment); 
                        lexer->reportError(returnToken, ERR_COMMENT_NOTSTARTED,"Comment is not started: \"*/\" is illegal");
                    }                   
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 288 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; BEGIN(PGPHEADER); lexer->inSignature = true; lexer->checkSignature(returnToken); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 289 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; BEGIN(0); lexer->updateNewline(); lexer->inSignature = false; }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 290 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; BEGIN(0); lexer->updateNewline(); lexer->inSignature = false; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 291 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 292 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; lexer->updateNewline(); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 293 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; BEGIN(PGPSIGN); lexer->inSignature = true; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 294 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; BEGIN(0); lexer->inSignature = false; } 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 295 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 296 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; lexer->updateNewline(); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 299 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 300 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; lexer->updateNewline();
                        
                        #if defined(TRACE_MACRO)
                            PrintLog("MACRO>> Newline occurs: now at %d:%d\n", lexer->yyLineNo, lexer->yyColumn);
                        #endif
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 308 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 310 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; BEGIN(SLSLHASH); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 311 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        updatepos1;
                        lexer->updateNewline();
                        BEGIN(0);
                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 316 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 317 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; lexer->doSlashSlashHash(returnToken, CUR_TOKEN_TEXT); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 319 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; BEGIN(SLSL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 320 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; lexer->updateNewline(); BEGIN(0); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 321 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 323 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->macroGathering || lexer->skipNesting)
                            return SKIPPED;
                        lexer->doError(returnToken, true); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 330 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->macroGathering || lexer->skipNesting)
                            return SKIPPED;
                        lexer->doError(returnToken, false); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 337 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->macroGathering)
                            return SKIPPED;
                        lexer->beginNestedHash(HashStmtFor);
                        if (lexer->skipNesting)
                        {
                            lexer->skipNesting++;
                            return SKIPPED;
                        }
                        lexer->doFor(returnToken, false); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 350 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->macroGathering)
                            return SKIPPED;
                        lexer->beginNestedHash(HashStmtForAll);
                        if (lexer->skipNesting)
                        {
                            lexer->skipNesting++;
                            return SKIPPED;
                        }
                        lexer->doFor(returnToken, true); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 363 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->macroGathering)
                            return SKIPPED;
                        lexer->beginNestedHash(HashStmtLoop);
                        if (lexer->skipNesting)
                        {
                            lexer->skipNesting++;
                            return SKIPPED;
                        }
                        lexer->doLoop(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 376 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->macroGathering)
                            return SKIPPED;
                        lexer->hasHashbreak = true;
                        if (lexer->skipNesting)
                            return SKIPPED;
                        return HASHBREAK; 
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 385 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->macroGathering)
                            return SKIPPED;
                        lexer->beginNestedHash(HashStmtIf);
                        if (lexer->skipNesting)
                        {
                            lexer->skipNesting++;
                            return SKIPPED;
                        }
                        lexer->doIf(returnToken, false);
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 398 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doExpand(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 405 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doDeclare(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 412 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doSet(returnToken, false); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 419 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doTrace(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 426 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doExport(returnToken, false); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 433 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doExport(returnToken, true); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 440 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doMangle(returnToken, false); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 447 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doMangle(returnToken, true); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 454 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doApply(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 461 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doSet(returnToken, true); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 468 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        return(HASH_CONSTANT);
                    }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 474 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doDefined(returnToken);
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 481 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->macroGathering)
                            return SKIPPED;
                        return lexer->doElse(returnToken, lookup, activeState, false);
                    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 487 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->macroGathering)
                            return SKIPPED;
                        return lexer->doElse(returnToken, lookup, activeState, true);
                    }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 493 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->macroGathering)
                            return SKIPPED;
                        return lexer->doElse(returnToken, lookup, activeState, true);
                    }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 499 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->macroGathering)
                            return SKIPPED;
                        return lexer->doElse(returnToken, lookup, activeState, true);
                    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 505 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        return(HASH_OPTION); 
                    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 511 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doGetDataType(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 519 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doInModule(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 526 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        lexer->doIsValid(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 533 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        bool defined = lexer->doIsDefined(returnToken);
//                      RETURNHARD(defined ? TOK_TRUE : TOK_FALSE);
                        lexer->pushText(defined ? "true" : "false");
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 542 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        lexer->doLine(returnToken);
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 547 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        return(HASH_LINK); 
                    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 553 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        return(HASH_ONWARNING); 
                    }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 559 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        return(HASH_OPTION); 
                    }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 565 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        return(HASH_STORED); 
                    }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 571 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering || !lookup)
                            return SKIPPED; 
                        return lexer->doHashText(returnToken); 
                    }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 577 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (lexer->skipNesting || lexer->macroGathering)
                        {   
                            //PrintLog("lexer->skipNesting #UNIQUENAME");
                            return SKIPPED; 
                        }
                        lexer->doUniqueName(returnToken); 
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 587 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED; 
                        return(HASH_WORKUNIT); 
                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 593 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED;
                        return(HASH_WEBSERVICE);
                    }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 599 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        returnToken.setExpr(createIntegerConstant(lexer->yyLineNo, false));
                        return (INTEGER_CONST);
                    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 604 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        updatepos1;
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 608 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        updatepos1;
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 612 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
//Place #END last so the specialised versions are hit first
                        setupdatepos; 
                        if (lexer->macroGathering)
                            return SKIPPED;
                        return lexer->doEnd(returnToken, lookup, activeState);
                    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 619 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
//Trap any unknown #commands
                        /* otherwise, unknown # command */
                        setupdatepos; 
                        if (lexer->skipNesting)
                            return SKIPPED; 
                        StringBuffer msg("Unknown # command: ");
                        msg.append(CUR_TOKEN_TEXT);
                        lexer->reportError(returnToken, ERR_TMPLT_UNKNOWNCOMMAND, "%s", msg.str());
                        return INTERNAL_READ_NEXT_TOKEN;
                    }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 631 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ABS); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 632 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ACOS); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 633 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(AFTER); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 634 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(AGGREGATE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 635 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ALGORITHM); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 636 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ALIAS); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 637 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ALL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 638 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ALLNODES); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 639 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ANY); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 640 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(APPLY); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 641 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(_ARRAY_); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 642 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(AS); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 643 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ASCII); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 644 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ASIN); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 645 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_ASSERT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 646 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ASSTRING); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 647 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ATAN); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 648 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ATAN2); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 649 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ATMOST); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 650 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(AVE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 651 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BACKUP); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 652 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BEFORE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 653 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BEST); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 654 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BETWEEN); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 655 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_BITMAP); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 656 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BIG); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 657 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BLOB); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 658 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BLOOM); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 659 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BNOT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 660 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BUILD); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 661 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(BUILD); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 662 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_CPP); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 663 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CARDINALITY); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 664 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CASE); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 665 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_CATCH); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 666 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CHECKPOINT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 667 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CHOOSE); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 668 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CHOOSEN); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 669 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CHOOSENALL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 670 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CHOOSESETS); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 671 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CLUSTER); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 672 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CLUSTERSIZE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 673 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COGROUP); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 674 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COMBINE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 675 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__COMMON__); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 676 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__COMPOUND__); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 677 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COMPRESSED); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 678 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__COMPRESSED__); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 679 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COS); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 680 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COSH); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 681 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COUNT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 682 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COUNTER); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 683 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CRITICAL); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 684 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CRON); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 685 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CSV); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 686 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DATASET); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 687 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DEDUP); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 688 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DEFAULT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 689 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DEFINE); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 690 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DENORMALIZE); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 691 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DEPRECATED); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 692 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DESC); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 693 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DESC); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 694 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DICTIONARY); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 695 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DISTRIBUTE); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 696 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DISTRIBUTED); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 697 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DISTRIBUTION); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 698 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DIV); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 699 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(DYNAMIC); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 700 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EBCDIC); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 701 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ECLCRC); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 702 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ELSE); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 703 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ELSEIF); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 704 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ELSEIF); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 705 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EMBED); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 706 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EMBEDDED); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 707 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(_EMPTY_); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 708 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ENCODING); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 709 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ENCRYPT); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 710 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(END); }    // hard reserved to aid resyncing
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 711 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ENUM); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 712 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ENTH); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 713 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_ERROR); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 714 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EVALUATE); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 715 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EVENT); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 716 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EVENTEXTRA); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 717 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EVENTNAME); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 718 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EXCEPT); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 719 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EXCLUSIVE); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 720 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EXISTS); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 721 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EXP); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 722 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EXPIRE); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 723 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(EXPORT); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 724 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(EXTEND); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 725 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FAIL); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 726 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FAILCODE); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 727 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FAILMESSAGE); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 728 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FAILURE); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 729 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FEATURE); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 730 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FETCH); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 731 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FEW); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 732 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FILEPOSITION); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 733 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FILTERED); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 734 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FIRST); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 735 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_FIXED); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 736 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FLAT); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 737 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FORMAT_ATTR); }             // Dynamically enabled based on the context
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 738 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FORWARD); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 739 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FROM); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 740 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FROMUNICODE); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 741 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FROMJSON); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 742 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FROMXML); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 743 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(FULL); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 744 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(FUNCTION); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 745 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(GETENV); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 746 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(GLOBAL); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 747 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(GRAPH); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 748 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(GROUP); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 749 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(GROUPBY); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 750 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(GROUPED); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(GUARD); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 752 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__GROUPED__); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 753 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HAVING); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 754 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HEADING); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 755 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HINT); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 756 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HTTPCALL); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 757 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HTTPHEADER); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 758 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(IF); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 759 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(IFF); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 760 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(IFBLOCK); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 761 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_IGNORE); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 762 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(IMPLEMENTS); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 763 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(IMPORT); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 764 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(INDEPENDENT); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 765 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(INDEX); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 766 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(INLINE); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 767 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(INTERNAL); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 768 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(INTERFACE); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 769 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(INTFORMAT); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 770 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ISNULL); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 771 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ISVALID); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 772 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ITERATE); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 773 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(JOIN); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 774 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(JOINED); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 775 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(JSON_TOKEN); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 776 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(KEEP); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 777 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(KEYDIFF); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 778 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(KEYED); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 779 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(KEYPATCH); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 780 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(KEYUNICODE); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 781 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LABELED); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 782 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LABELED); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 783 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LABEL); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 784 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LAST); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 785 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LEFT); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 786 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LENGTH); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 787 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LIBRARY); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 788 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LIKELY); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 789 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LIMIT); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 790 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LINKCOUNTED); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 791 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LINKCOUNTED); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 792 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LITERAL); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 793 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LITTLE); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 794 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LN); }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 795 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LOADXML); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 796 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LOCAL); }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 797 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LOCALE); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 798 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LOCALFILEPOSITION); }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 799 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_LOG); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 800 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LOGICALFILENAME); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 801 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LOOKUP); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 802 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LOOP); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 803 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(LZW); }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 804 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MANY); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 805 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MAP); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 806 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MATCHED); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 807 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MATCHLENGTH); }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 808 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MATCHPOSITION); }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 809 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MATCHROW); }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 810 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MATCHTEXT); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 811 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MATCHUNICODE); }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 812 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MATCHUTF8); }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 813 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MAX); }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 814 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MAXCOUNT); }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 815 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MAXLENGTH); }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 816 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MAXSIZE); }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 817 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MERGE); }                   // May be dynamically converted to MERGE_ATTR
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 818 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MERGEJOIN); }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 819 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MIN); }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 820 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(MODULE); }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 821 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MOFN); }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 822 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(MULTIPLE); }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 823 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NAMED); }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 824 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NAMEOF); }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 825 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NAMESPACE); }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 826 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOBOUNDCHECK); }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 827 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOCASE); }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 828 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOCOMBINE); }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 829 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOCONST); }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 830 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOFOLD); }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 831 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOHOIST); }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 832 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOLOCAL); }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 833 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NONEMPTY); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 834 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOOVERWRITE); }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 835 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NORMALIZE); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 836 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOROOT); }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 837 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOSCAN); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 838 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOSORT); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 839 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__NOSTREAMING__); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 840 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOTHOR); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 841 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOTIFY); }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 842 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOTRIM); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 843 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOXPATH); }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 844 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(OF); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 845 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(OMITTED); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 846 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ONCE); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 847 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ONFAIL); }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 848 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ONLY); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 849 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ONWARNING); }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 850 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(OPT); }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 851 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__OPTION__); }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 852 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ORDERED); }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 853 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(OUTER); }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 854 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        //RETURNSYM(OUTPUT);
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        return(OUTPUT); 
                    }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 861 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(OVERWRITE); }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 862 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__OWNED__); }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 863 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PACKED); }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 864 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PARALLEL); }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 865 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PARSE); }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 866 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PARTITION); }               // May be dynamically converted to PARTITION_ATTR
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 867 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_PATTERN); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 868 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PENALTY); }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 869 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PERSIST); }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 870 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PHYSICALFILENAME); }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 871 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PIPE); }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 872 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__PLATFORM__); }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 873 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(POWER); }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 874 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PREFETCH); }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 875 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PRELOAD); }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 876 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PRIORITY); }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 877 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PRIVATE); }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 878 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PROBABILITY); }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 879 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PROCESS); }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 880 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PROJECT); }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 881 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PROXYADDRESS); }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 882 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PULL); }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 883 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(PULLED); }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 884 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(QUANTILE); }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 885 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(QUOTE); }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 886 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RANGE); }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 887 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RANK); }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 888 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RANKED); }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 889 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REALFORMAT); }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 890 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(RECORD); }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 891 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RECORDOF); }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 892 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RECOVERY); }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 893 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REFRESH); }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 894 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REGEXFIND); }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 895 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REGEXFINDSET); }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 896 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REGEXREPLACE); }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 897 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REGROUP); }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 898 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REJECTED); }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 899 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RELATIONSHIP); }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 900 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REMOTE); }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 901 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(REPEAT); }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 902 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RESPONSE); }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 903 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RETRY); }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 904 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RETURN); }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 905 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RIGHT); }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 906 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        returnToken.setInt(str2int64(CUR_TOKEN_LENGTH-5, (const char *)CUR_TOKEN_TEXT+5, 10)); 
                        RETURNSYM(RIGHT_NN); 
                    }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 910 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ROLLUP); }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 911 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ROUND); }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 912 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ROUNDUP); }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 913 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ROW); }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 914 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ROWS); }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 915 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ROWSET); }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 916 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ROWDIFF); }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 917 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RULE); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 918 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SAMPLE); }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 919 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SCAN); }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 920 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SCORE); }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 921 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SECTION); }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 922 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SELF); }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 923 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SEPARATOR); }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 924 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__SEQUENCE__); }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 925 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SEQUENTIAL); }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 926 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(SERVICE); }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 927 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SET); }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 928 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HASH_OPTION); }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 929 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(SHARED); }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 930 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__SIMPLIFIED__); }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 931 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SIN); }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 932 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SINGLE); }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 933 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SINH); }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 934 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SIZEOF); }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 935 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SKEW); }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 936 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SKIP); }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 937 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SMART); }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 938 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SOAPACTION); }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 939 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SOAPCALL); }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 940 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SORT); }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 941 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SORTED); }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 942 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SQL); }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 943 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SQRT); }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 944 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(STABLE); }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 945 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(STEPPED); }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 946 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(STORED); }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 947 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(STREAMED); }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 948 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SUBSORT); }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 949 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SUCCESS); }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 950 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(SUM); }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 951 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TABLE); }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 952 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TAN); }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 953 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TANH); }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 954 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TERMINATOR); }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 955 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(ESCAPE); }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 956 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(THEN); }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 957 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(THISNODE); }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 958 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(THOR); }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 959 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(THRESHOLD); }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 960 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TIMEOUT); }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 961 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TIMELIMIT); }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 962 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOKEN); }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 963 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOJSON); }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 964 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOPN); }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 965 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOUNICODE); }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 966 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOXML); }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 967 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TRACE); }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 968 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TRANSFER); }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 969 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNHARD(TRANSFORM); }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 970 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TRIM); }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 971 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TRUNCATE); }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 972 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TYPE); }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 973 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TYPEOF); }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 974 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(UNICODEORDER); }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 975 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(UNGROUP); }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 976 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(UNLIKELY); }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 977 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(UNORDERED); }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 978 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(UNSORTED); }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 979 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(UNSTABLE); }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 980 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(UPDATE); }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 981 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(USE); }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 982 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(VALIDATE); }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 983 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(VIRTUAL); }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 984 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(VOLATILE); }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 985 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WAIT); }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 986 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_WARNING); }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 987 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WHEN); }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 988 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WHICH); }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 989 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WHITESPACE); }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 990 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WIDTH); }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 991 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WILD); }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 992 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WITHIN); }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 993 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WHOLE); }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 994 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(WORKUNIT); }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 995 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XML_TOKEN); }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 996 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XMLDECODE); }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 997 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XMLDEFAULT); }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 998 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XMLENCODE); }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 999 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XMLNS); }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 1000 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XMLPROJECT); }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 1001 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XMLTEXT); }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 1002 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XMLUNICODE); }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 1003 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(XPATH); }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 1005 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        return (__DEBUG__);
                    }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 1009 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        returnToken.setExpr(createConstant(LANGUAGE_VERSION));
                        return (STRING_CONST);
                    }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 1014 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        returnToken.setExpr(createIntegerConstant(LANGUAGE_VERSION_MAJOR, false));
                        return (INTEGER_CONST);
                    }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 1019 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        returnToken.setExpr(createIntegerConstant(LANGUAGE_VERSION_MINOR, false));
                        return (INTEGER_CONST);
                    }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 1024 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        returnToken.setExpr(createIntegerConstant(LANGUAGE_VERSION_SUB, false));
                        return (INTEGER_CONST);
                    }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 1029 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        returnToken.setExpr(createConstant(queryLegacyImportSemantics()));
                        return (BOOL_CONST);
                    }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 1034 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
#ifdef _WIN32
                        returnToken.setExpr(createConstant("windows"));
#else
                        returnToken.setExpr(createConstant("linux"));
#endif
                        return (STRING_CONST);
                    }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 1045 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        return (__STAND_ALONE__);
                    }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 1049 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(__TARGET_PLATFORM__); }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 1051 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED;
                        lexer->doPreprocessorLookup(returnToken, false, 0);
                        return INTERNAL_READ_NEXT_TOKEN;
                    };
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 1059 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED;
                        lexer->doPreprocessorLookup(returnToken, true, 1);
                        return INTERNAL_READ_NEXT_TOKEN;
                    };
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 1066 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED;
                        lexer->doPreprocessorLookup(returnToken, false, 1);
                        return INTERNAL_READ_NEXT_TOKEN;
                    };
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 1074 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->skipNesting || lexer->macroGathering)
                            return SKIPPED;
                        lexer->doPreprocessorLookup(returnToken, true, 2);
                        return INTERNAL_READ_NEXT_TOKEN;
                    };
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 1081 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                      setupdatepos; 
                      if (!lookup)
                        return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                      unsigned size = atoi(CUR_TOKEN_TEXT+7);
                      if ((size == 0) || (size > 8))
                      {
                          lexer->reportError(returnToken, ERR_ILLSIZE_INT, "Invalid size for INTEGER type: can only be in range 1 to 8");
                          size = DEFAULT_INT_SIZE;
                      }
                      returnToken.setType(makeIntType(size, true)); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 1094 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        returnToken.setType(makeIntType(DEFAULT_INT_SIZE, true)); 
                        return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 1101 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        returnToken.setType(makeIntType(sizeof(size32_t), false));
                        return(SIMPLE_TYPE);
                    }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 1108 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        returnToken.setType(makeBoolType()); 
                        return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 1115 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                      unsigned size = atoi(CUR_TOKEN_TEXT+4);
                      switch (size)
                      {
                      case 4:
                      case 8:
                          break;
                      default:
                          lexer->reportError(returnToken, ERR_ILLSIZE_REAL, "Invalid size for REAL type: can be 4 or 8 only");
                          size = DEFAULT_REAL_SIZE;
                          break;
                      }
                      returnToken.setType(makeRealType(size)); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 1133 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        returnToken.setType(makeRealType(DEFAULT_REAL_SIZE)); 
                        return(SIMPLE_TYPE);
                    }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 1140 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      unsigned size = lexer->getTypeSize(4);
                      ITypeInfo *dataType = makeDataType(size);
                      if (!dataType)
                      {
                            lexer->reportError(returnToken, ERR_ILLSIZE_DATA, "Invalid size for DATA type");
                            dataType = makeDataType(0);
                      }
                      returnToken.setType(dataType); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 1155 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      unsigned size = lexer->getTypeSize(6);
                      ITypeInfo *strType = makeStringType(size,NULL,NULL);
                      if (!strType)
                      {
                            lexer->reportError(returnToken, ERR_ILLSIZE_STRING, "Invalid size for STRING type");
                            strType = makeStringType(1, NULL, NULL);
                      }
                      returnToken.setType(strType); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 1170 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                      //Note letter includes _ so this include en_US etc.
                      setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      unsigned digitstart = 7;
                      StringBuffer locale;
                      if(CUR_TOKEN_TEXT[digitstart] == '_')
                      {
                          digitstart++;
                          while(islower((unsigned char)CUR_TOKEN_TEXT[digitstart]) || isupper((unsigned char)CUR_TOKEN_TEXT[digitstart]) || (CUR_TOKEN_TEXT[digitstart] == '_'))
                            digitstart++;
                          getNormalizedLocaleName(digitstart-8, CUR_TOKEN_TEXT+8, locale);
                      }

                      unsigned length = lexer->getTypeSize(digitstart);
                      ITypeInfo *uniType = makeUnicodeType(length, createLowerCaseAtom(locale.str()));
                      if (!uniType)
                      {
                            lexer->reportError(returnToken, ERR_ILLSIZE_UNICODE, "Invalid size or locale for UNICODE type");
                            uniType = makeUnicodeType(1, 0);
                      }
                      returnToken.setType(uniType); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 1196 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      unsigned digitstart = 4;
                      StringBuffer locale;
                      if(CUR_TOKEN_TEXT[digitstart] == '_' && isalpha((unsigned char)CUR_TOKEN_TEXT[digitstart+1]))
                      {
                          digitstart++;
                          while(islower((unsigned char)CUR_TOKEN_TEXT[digitstart]) || isupper((unsigned char)CUR_TOKEN_TEXT[digitstart]) || 
                                ((CUR_TOKEN_TEXT[digitstart] == '_') && isalpha((unsigned char)CUR_TOKEN_TEXT[digitstart+1])))
                              digitstart++;
                          getNormalizedLocaleName(digitstart-5, CUR_TOKEN_TEXT+5, locale);
                      }

                      if(CUR_TOKEN_TEXT[digitstart] == '_')
                          digitstart++;
                      unsigned length = lexer->getTypeSize(digitstart);
                      ITypeInfo *uniType = makeUtf8Type(length, createLowerCaseAtom(locale.str()));
                      if (!uniType)
                      {
                            lexer->reportError(returnToken, ERR_ILLSIZE_UNICODE, "Invalid size or locale for UTF8 type");
                            uniType = makeUtf8Type(1, 0);
                      }
                      returnToken.setType(uniType); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 1224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      unsigned size = lexer->getTypeSize(9);
                      ITypeInfo *vStrType = makeVarStringType(size);
                      if (!vStrType)
                      {
                            lexer->reportError(returnToken, ERR_ILLSIZE_VARSTRING, "Invalid size for VARSTRING type");
                            vStrType = makeVarStringType(1);
                      }
                      returnToken.setType(vStrType); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 1239 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      unsigned digitstart = 10;
                      StringBuffer locale;
                      if(CUR_TOKEN_TEXT[digitstart] == '_')
                      {
                          digitstart++;
                          while(islower((unsigned char)CUR_TOKEN_TEXT[digitstart]) || isupper((unsigned char)CUR_TOKEN_TEXT[digitstart]) || (CUR_TOKEN_TEXT[digitstart] == '_'))
                              digitstart++;
                          getNormalizedLocaleName(digitstart-11, CUR_TOKEN_TEXT+11, locale);
                      }

                      unsigned length = lexer->getTypeSize(digitstart);
                      ITypeInfo *vUniType = makeVarUnicodeType(length, createLowerCaseAtom(locale.str()));
                      if(!vUniType)
                      {
                            lexer->reportError(returnToken, ERR_ILLSIZE_UNICODE, "Invalid size for VARUNICODE type");
                            vUniType = makeVarUnicodeType(1, 0);
                      }
                      returnToken.setType(vUniType); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 1264 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      unsigned size = lexer->getTypeSize(7);
                      ITypeInfo * type = makeQStringType(size);
                      assertex(type);
                      returnToken.setType(type); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 1275 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      returnToken.setType(makeDecimalType(MAX_DECIMAL_DIGITS,MAX_DECIMAL_PRECISION, true));
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 1283 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      returnToken.setType(makeDecimalType(MAX_DECIMAL_DIGITS,MAX_DECIMAL_PRECISION, true));
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 1291 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      bool isSigned = (CUR_TOKEN_TEXT[0] != 'U') && (CUR_TOKEN_TEXT[0] != 'u');
                      const char * trailing = isSigned ? CUR_TOKEN_TEXT+7 : CUR_TOKEN_TEXT+8;
                      const char * underscore = strchr(trailing,'_');
                      unsigned digits = atoi(trailing);
                      unsigned places = underscore ? atoi(underscore+1) : 0;
                      if (places > digits)
                      {
                          lexer->reportError(returnToken, ERR_ILLSIZE_DECIMAL, "Decimal type cannot have precision>digits");
                          places = 0;
                      }
                      unsigned leading = digits - places;
                      if (leading > MAX_DECIMAL_LEADING)
                      {
                          lexer->reportError(returnToken, ERR_ILLSIZE_DECIMAL, "Decimal type contains too many leading digits (>%d)", MAX_DECIMAL_LEADING);
                          leading = MAX_DECIMAL_LEADING;
                      }
                      if (places > MAX_DECIMAL_PRECISION)
                      {
                          lexer->reportError(returnToken, ERR_ILLSIZE_DECIMAL, "Decimal type contains too many trailing digits (>%d)", MAX_DECIMAL_PRECISION);
                          places = MAX_DECIMAL_LEADING;
                      }

                      ITypeInfo *decType = makeDecimalType(leading+places, places, isSigned);
                      returnToken.setType(decType); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 1322 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        /* error pattern: BITFIELD with no size */
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                       lexer->reportError(returnToken, ERR_ILLSIZE_BITFIELD, "Invalid size for BITFIELD type: a size must be specified");
                       returnToken.setType(makeBitfieldType(1)); 
                       return(SIMPLE_TYPE);     
                    }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 1332 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      int size = atoi(CUR_TOKEN_TEXT+8);
                      if (size<=0 || size>64)
                      {
                         lexer->reportError(returnToken, ERR_ILLSIZE_BITFIELD, "Invalid size for BITFIELD type: valid size 1..64");
                         size = 1;
                      }

                      Owned<ITypeInfo> int64 = makeIntType(8, false);
                      ITypeInfo * type = makeBitfieldType(size, int64.getClear());
                      assert(type!=NULL);

                      returnToken.setType(type); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 1351 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                      int size = atoi(CUR_TOKEN_TEXT+8);
                      const char * sep = strchr(CUR_TOKEN_TEXT+8, '_');
                      int baseSize = atoi(sep+1);

                      if (size<=0 || size>64)
                      {
                         lexer->reportError(returnToken, ERR_ILLSIZE_BITFIELD, "Invalid size for BITFIELD type: valid size 1..64");
                         size = 1;
                      }
                      switch (baseSize)
                      {
                      case 1: case 2: case 4: case 8:
                         break;
                      default:
                         lexer->reportError(returnToken, ERR_ILLSIZE_BITFIELD, "Invalid size for BITFIELD base type: valid size 1,2,4,8");
                         baseSize = 8;
                      }
                      if (size > baseSize*8)
                         lexer->reportError(returnToken, ERR_ILLSIZE_BITFIELD, "Invalid base size not large enough for BITFIELD ");

                      ITypeInfo * type = makeBitfieldType(size, makeIntType(baseSize,false));
                      assert(type!=NULL);

                      returnToken.setType(type); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 1382 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);

                        returnToken.setType(makeTableType(NULL));
                        return(SIMPLE_TYPE);
                    }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 1390 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        return(SWAPPED);
                    }
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 1396 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                      unsigned size = atoi(CUR_TOKEN_TEXT+8);
                      if ((size == 0) || (size > 8))
                      {
                          lexer->reportError(returnToken, ERR_ILLSIZE_UNSIGNED, "Invalid size for UNSIGNED type: can only be 1 to 8");
                          size = DEFAULT_INT_SIZE;
                      }
                      returnToken.setType(makeIntType(size, false)); 
                      return(SIMPLE_TYPE); 
                    }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 1409 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        if (!lookup)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        return(UNSIGNED); 
                    }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 1416 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_TRUE); }
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 1417 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_FALSE); }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 1419 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(AND); }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 1420 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(OR); }
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 1421 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(NOT); }
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 1422 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CRC); }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 1423 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HASH); }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 1424 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HASH32); }
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 1425 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HASH64); }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 1426 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(HASHMD5); }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 1427 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(RANDOM); }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 1428 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(COVARIANCE); }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 1429 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(CORRELATION); }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 1430 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(VARIANCE); }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 1431 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(NOT); }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 1432 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_IN); }
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 1433 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(INNER); }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 1434 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_OUT); }
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 1435 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ RETURNSYM(TOK_CONST); }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 1436 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(ENDMACRO); }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 1437 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(ENDCPP); }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 1438 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(ENDEMBED); }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 1439 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        if (!lookup || !LOOKUPSYM(ENCRYPTED) || lexer->macroGathering)
                            return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                        lexer->processEncrypted();
                        return ENCRYPTED;
                    }
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 1446 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 

                        int tok;
                        ECLlocation startLocation;
                        bool complex = false;
                        startLocation.set(returnToken.pos);
                        int startpos = lexer->yyPosition;
                        int endpos = startpos;
                        bool isFunctionMacro = (CUR_TOKEN_LENGTH != 5);
                        lexer->macroGathering++;
                        bool inEmbed = false;
                        bool embedColonSeen = false;
                        unsigned embedParens = 0;
                        while ((tok = lexer->yyLex(returnToken, false, activeState)) != ENDMACRO)
                        {
                            if (tok==EOF)
                            {
                                returnToken.setPosition(startLocation);
                                lexer->reportError(returnToken, ERR_MACRO_NOENDMACRO, "No matching ENDMACRO found");
                                lexer->macroGathering--;
                                return EOF;
                            }
                            else if ((tok == ASSIGN) || (tok == ';'))
                                complex = true;
                            else if (tok == '@')
                                isFunctionMacro = true;
                            else if (tok == UNKNOWN_ID && returnToken.queryId()->queryLower()==embedAtom)
                            {
                                inEmbed = true;
                                embedColonSeen = false;
                            }
                            // Hairy code - if it's the two param version of EMBED we DON'T want to look for ENDEMBED
                            if (inEmbed)
                            {
                                if (tok=='(')
                                    embedParens++;
                                else if (embedParens==1 && tok==':')
                                    embedColonSeen = true;
                                else if (embedParens==1 && tok==',' && !embedColonSeen)
                                    inEmbed = false;
                                else if (tok==')')
                                {
                                    embedParens--;
                                    if (!embedParens)
                                    {
                                        BEGIN(CPP);
                                        inEmbed = false;
                                    }
                                }
                            }
                            returnToken.release();
                        }
                        lexer->macroGathering--;
                        endpos = lexer->yyPosition;
                        if(complex || isFunctionMacro)
                            endpos -= 8; // remove the ENDMACRO token
                        
                        if (!lookup)
                            return MACRO;
                        
                        // keep the orginal format info (like blanks, newlines) for macro
                        int len = endpos-startpos;
                        Owned<IFileContents> macroContents;
                        if (!isFunctionMacro)
                        {
                            macroContents.setown(createFileContentsFromText(len, lexer->yyBuffer+startpos, lexer->sourcePath, lexer->yyParser->inSignedModule, lexer->yyParser->gpgSignature, 0));
#if defined(TRACE_TOKEN)
                            PrintLog("TOKEN>> macro body read: \"%.*s\"", len, lexer->yyBuffer+startpos);
#endif
                        }
                        else
                        {
                            complex = false;
                            const char * prefix = " @FUNCTION ";
                            const char * suffix = " END ENDMACRO ";
                            unsigned lenPrefix = strlen(prefix);
                            unsigned lenSuffix = strlen(suffix);

                            char * macroBuf = (char *) malloc(len+lenPrefix+lenSuffix);
                            memcpy(macroBuf, prefix, lenPrefix);
                            memcpy(macroBuf + lenPrefix, lexer->yyBuffer+startpos, len);
                            memcpy(macroBuf + lenPrefix + len, suffix, lenSuffix);
                            macroContents.setown(createFileContentsFromText(lenSuffix + len + lenPrefix, macroBuf, lexer->sourcePath,lexer->yyParser->inSignedModule, lexer->yyParser->gpgSignature, 0));
#if defined(TRACE_TOKEN)
                            PrintLog("TOKEN>> macro body read: \"%.*s\"",len+lenPrefix+lenSuffix, macroBuf);
#endif
                            free(macroBuf);
                        }


                        returnToken.setContents(macroContents.getClear());
                        returnToken.setPosition(startLocation);
#if defined(TRACE_MACRO)
                        PrintLog("MACRO>> macro defined in line %d, column %d\n", start.lineno, start.column);
#endif
                        
                        return complex ? COMPLEX_MACRO : MACRO;
                    }
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 1545 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        //Need to process using an exclusive start condition unlike MACRO because many
                        //tokens in C++ aren't legal in ECL, so lexer->yyLex() will generate errors.
                        setupdatepos; 
                        BEGIN(CPP);
                        lexer->inCpp = true;
                    }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 1552 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        lexer->inCpp = false;
                        int endpos = lexer->yyPosition;
                        //skip to the position of ENDC++ on the line (case insensitive)
                        while (memicmp(lexer->yyBuffer+endpos, "ENDC++", 6) != 0 && memicmp(lexer->yyBuffer+endpos, "ENDEMBED", 8) != 0)
                            endpos++;
                        const int lastpos = endpos + (tolower(lexer->yyBuffer[endpos+3])=='c' ? 6 : 8);
                            
                        updatepos1; 
                        BEGIN(0);
                        int startpos = returnToken.pos.position;
                        if (endpos-startpos >= 8 && memicmp(lexer->yyBuffer+startpos, "BEGINC++", 8)==0)
                            startpos += 8;
                        else
                            startpos += 1;  // Skip the ) of EMBED(xxx)

                        // keep the original format info (like blanks, newlines)
                        while (endpos != startpos && (lexer->yyBuffer[endpos-1] == 13 || lexer->yyBuffer[endpos-1] == 10))
                            endpos--;
                        int len = endpos-startpos;
#if defined(TRACE_TOKEN)
                        PrintLog("TOKEN>> C++ read: \"%.*s\"",len,lexer->yyBuffer+startpos);
#endif
                        //Return any characters found after the ENDC++
                        unsigned delta = lexer->yyPosition - lastpos;
                        yyless(CUR_TOKEN_LENGTH - delta);
                        lexer->yyPosition -= delta;
                        lexer->yyColumn -= delta;
                        OwnedHqlExpr cppText = createConstant(createUnicodeValue(lexer->yyBuffer+startpos, len, "", true, false));
                        OwnedHqlExpr annotated = createLocationAnnotation(cppText.getClear(), returnToken.pos);
                        OwnedHqlExpr options = extractCppBodyAttrs(len, lexer->yyBuffer+startpos);
                        returnToken.setExpr(createComma(annotated.getClear(), options.getClear()));
                        return CPPBODY;
                    }
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 1586 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 495:
/* rule 495 can match eol */
YY_RULE_SETUP
#line 1587 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; lexer->updateNewline(); }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 1589 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos; 
                        BEGIN(MULTISTRING);
                        lexer->inMultiString = true;
                    }
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 1594 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        lexer->inMultiString = false;
                        int endpos = lexer->yyPosition;
                        //skip to the position of ''' on the line)
                        while (memcmp(lexer->yyBuffer+endpos, "'''", 3) != 0)
                            endpos++;
                        const int lastpos = endpos + 3;
                        
                        updatepos1; 
                        BEGIN(0);

                        //Return any characters found after the closing '''
                        unsigned delta = lexer->yyPosition - lastpos;
                        yyless(CUR_TOKEN_LENGTH - delta);
                        lexer->yyPosition -= delta;
                        lexer->yyColumn -= delta;
                            
                        int startpos = returnToken.pos.position;
                        if (lexer->yyBuffer[startpos] == 'u')
                        {
                            bool isUtf8 = false;
                            startpos++;
                            if (lexer->yyBuffer[startpos]=='8')
                            {
                                isUtf8 = true;
                                startpos++;
                            }
                            startpos +=3;
                            int len = endpos-startpos;
                            Owned<IValue> unicodeValue;
                            // Special handling required for trailing \ char which suppresses the following linefeed, as unicode unescape does not handle it
                            StringBuffer source(len, lexer->yyBuffer+startpos);
                            source.replaceString("\\\n","");
                            if (isUtf8)
                            {
                                size32_t chars = rtlUtf8Length(source.length(), source.str());
                                unicodeValue.setown(createUtf8Value(chars, source.str(), "", true));
                            }
                            else
                                unicodeValue.setown(createUnicodeValue(source.str(), source.length(), "", true, true));
                            
                            returnToken.setExpr(createConstant(unicodeValue.getClear()));
                            return (UNICODE_CONST);
                        }
                        else
                        {
                            return lexer->processStringLiteral(returnToken, lexer->yyBuffer+startpos, lastpos-startpos, returnToken.pos.column, returnToken.pos.position);
                        }
                    }
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 1643 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; }
	YY_BREAK
case 499:
/* rule 499 can match eol */
YY_RULE_SETUP
#line 1644 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ updatepos1; lexer->updateNewline(); }
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 1647 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(TYPE_RPAREN) ; }
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 1648 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(TYPE_LPAREN) ; }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 1649 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(ORDER) ; }
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 1650 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(LE) ; }
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 1651 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(LT) ; }
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 1652 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        //x.<y>= n  really wants to be processed as x.<y> = n, not x.<y >= 
                        if (LOOKUPSYM(GT) && !LOOKUPSYM(GE))
                        {
                            yyless(1);
                            setupdatepos; 
                            return(GT); 
                        }
                        setupdatepos; 
                        return(GE); 
                    }
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 1663 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(GT) ; }
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 1664 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(NE) ; }
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 1665 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(NE) ; }
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 1666 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(EQ) ; }
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 1667 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(ASSIGN); }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 1668 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(GOESTO); }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 1669 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(DOTDOT); }
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 1670 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(SHIFTL); }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 1671 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(SHIFTR); }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 1672 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(ANDAND); }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 1673 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(FIELD_REF) ; }
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 1674 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return(FIELDS_REF) ; }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 1676 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        bool isSigned = toupper(CUR_TOKEN_TEXT[CUR_TOKEN_LENGTH-1]) != 'U';
                        unsigned len = isSigned ? CUR_TOKEN_LENGTH-2 : CUR_TOKEN_LENGTH-3;
                        returnToken.setExpr(createIntegerConstant(str2int64(len,(const char *)CUR_TOKEN_TEXT+2, 16), isSigned));
                        return(INTEGER_CONST);
                    }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 1683 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        bool isSigned = toupper(CUR_TOKEN_TEXT[CUR_TOKEN_LENGTH-1]) != 'U';
                        unsigned len = isSigned ? CUR_TOKEN_LENGTH-1 : CUR_TOKEN_LENGTH-2;
                        returnToken.setExpr(createIntegerConstant(str2int64(len,(const char *)CUR_TOKEN_TEXT, 16), isSigned));
                        return(INTEGER_CONST);
                    }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 1690 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        bool isSigned = toupper(CUR_TOKEN_TEXT[CUR_TOKEN_LENGTH-1]) != 'U';
                        unsigned len = isSigned ? CUR_TOKEN_LENGTH-2 : CUR_TOKEN_LENGTH-3;
                        returnToken.setExpr(createIntegerConstant(str2int64(len,(const char *)CUR_TOKEN_TEXT+2, 2), isSigned));
                        return(INTEGER_CONST);
                    }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 1697 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        bool isSigned = toupper(CUR_TOKEN_TEXT[CUR_TOKEN_LENGTH-1]) != 'U';
                        unsigned len = isSigned ? CUR_TOKEN_LENGTH-1 : CUR_TOKEN_LENGTH-2;
                        returnToken.setExpr(createIntegerConstant(str2int64(len,(const char *)CUR_TOKEN_TEXT, 2), isSigned));
                        return(INTEGER_CONST);
                    }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 1704 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        bool isSigned = toupper(CUR_TOKEN_TEXT[CUR_TOKEN_LENGTH-1]) != 'U';
                        unsigned len = isSigned ? CUR_TOKEN_LENGTH : CUR_TOKEN_LENGTH-1;
                        returnToken.setExpr(createIntegerConstant(str2int64(len, (const char *)CUR_TOKEN_TEXT, 10), isSigned));
                        return(INTEGER_CONST);
                    }
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 1711 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        unsigned digits = CUR_TOKEN_LENGTH-1;
                        if (digits > MAX_DECIMAL_LEADING)
                        {
                            lexer->reportError(returnToken, ERR_ILLSIZE_DECIMAL, "Decimal constant contains too many digits (>%d)", MAX_DECIMAL_LEADING);
                            digits = MAX_DECIMAL_LEADING;
                        }
                        Owned<ITypeInfo> type = makeDecimalType(digits, 0, true);
                        IValue * value = type->castFrom(CUR_TOKEN_LENGTH-1, CUR_TOKEN_TEXT);
                        returnToken.setExpr(createConstant(value));
                        return(REAL_CONST);
                    }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 1724 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        const char * dot = strchr(CUR_TOKEN_TEXT, '.');
                        unsigned before = (size32_t)(dot-CUR_TOKEN_TEXT);
                        unsigned after = CUR_TOKEN_LENGTH-2 - before;
                        if (before > MAX_DECIMAL_LEADING)
                        {
                            lexer->reportError(returnToken, ERR_ILLSIZE_DECIMAL, "Decimal constant contains too many integral digits (>%d)", MAX_DECIMAL_LEADING);
                            before = MAX_DECIMAL_LEADING;
                            after = 0;
                        }
                        if (after > MAX_DECIMAL_PRECISION)
                        {
                            lexer->reportWarning(CategoryCast, returnToken, ERR_ILLSIZE_DECIMAL, "Decimal constant may lose significant digits (>%d)", MAX_DECIMAL_PRECISION);
                            after = MAX_DECIMAL_PRECISION;
                        }
                        Owned<ITypeInfo> type = makeDecimalType(before+after, after, true);
                        IValue * value = type->castFrom(CUR_TOKEN_LENGTH-1, CUR_TOKEN_TEXT);
                        returnToken.setExpr(createConstant(value));
                        return(REAL_CONST);
                    }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 1745 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        double value = strtod((const char *)CUR_TOKEN_TEXT, NULL);
                        returnToken.setExpr(createConstant(value)); 
                        return(REAL_CONST);
                    }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 1751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos; 
                        returnToken.setExpr(createConstant((double) atof ((const char *)CUR_TOKEN_TEXT))); 
                        return(REAL_CONST);
                    }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 1757 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        int oldColumn = lexer->yyColumn; // in order to point out the exact position, old col needs to be saved.
                        int oldPosition = lexer->yyPosition;
                        setupdatepos;
                        StringBuffer msg;
                        bool utf8 = false;
                        unsigned start = 2;
                        if (CUR_TOKEN_TEXT[1] == '8')
                        {
                            utf8 = true;
                            start++;
                        }
                        unsigned ep;
                        if(!checkUnicodeLiteral(CUR_TOKEN_TEXT + start, CUR_TOKEN_LENGTH - (start+1), ep, msg))
                        {
                            int delta = ep + start;
                            returnToken.setPosition(lexer->yyLineNo, oldColumn+delta, oldPosition+delta, lexer->querySourcePath());
                            lexer->reportError(returnToken, ERR_ESCAPE_UNKNOWN, "%s", msg.str());
                            returnToken.setPosition(lexer->yyLineNo, oldColumn, oldPosition, lexer->querySourcePath());
                        }

                        size32_t size = CUR_TOKEN_LENGTH - (start+1);
                        const char * value = CUR_TOKEN_TEXT + start;
                        Owned<IValue> unicodeValue;
                        if (utf8)
                        {
                            size32_t length = rtlUtf8Length(size, value);
                            unicodeValue.setown(createUtf8Value(length, value, "", true));
                        }
                        else
                            unicodeValue.setown(createUnicodeValue(value, size, "", true, true));
                        
                        returnToken.setExpr(createConstant(unicodeValue.getClear()));
                        return (UNICODE_CONST);
                    }
	YY_BREAK
case 528:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1794 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        /* error pattern - a string immediately followed by a ' usually means someone thought they could use '' to escape a quote char */
                        /* It's usually going to hit a grammar error too, but patterns can legally be formed of two adjacent string tokens */
                        lexer->reportWarning(CategoryMistake, returnToken, ERR_STRING_DOUBLE_QUOTE, "'' is not an escaped quote character: use \\' instead");
                        int oldColumn = lexer->yyColumn;
                        int oldPosition = lexer->yyPosition;
                        setupdatepos;
                        return lexer->processStringLiteral(returnToken, CUR_TOKEN_TEXT, CUR_TOKEN_LENGTH-1, oldColumn, oldPosition);
                    }
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 1804 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        int oldColumn = lexer->yyColumn;
                        int oldPosition = lexer->yyPosition;
                        setupdatepos;
                        return lexer->processStringLiteral(returnToken, CUR_TOKEN_TEXT, CUR_TOKEN_LENGTH, oldColumn, oldPosition);
                    }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 1811 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{  
                        /* error pattern */
                        setupdatepos;
                        StringBuffer msg("String constant is not terminated: \"");
                        unsigned len = CUR_TOKEN_LENGTH;
                        if (len > 50)
                            msg.append(50, CUR_TOKEN_TEXT).append("...");
                        else
                            msg.append(CUR_TOKEN_TEXT);
                        msg.append("\"");
                        lexer->reportError(returnToken, ERR_STRING_UNENDED, "%s", msg.str());
                        // recovery 
                        returnToken.setExpr(createBlankString());
                        return STRING_CONST;                        
                    }
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 1827 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        /* error pattern */
                        setupdatepos;
                        lexer->reportError(returnToken, ERR_STRING_ILLDELIMITER, "\" is not legal string delimiter; use ' instead");
                        returnToken.setExpr(createBlankString());
                        return STRING_CONST;
                    }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 1834 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        unsigned len = (CUR_TOKEN_LENGTH-3)/2;    // round sign
                        char *data =(char *)malloc(len+1);
                        hex2str(data, (char *)CUR_TOKEN_TEXT+2, CUR_TOKEN_LENGTH-3);                        
                        returnToken.setExpr(createConstant(createDataValue(data, len)));
                        free(data);
                        return (DATA_CONST);
                    }
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 1844 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        /* error pattern: odd hex data */
                        setupdatepos;
                        lexer->reportWarning(CategorySyntax, returnToken, ERR_HEXDATA_ODDDIGITS,"hex data must have even number of hex digits");
                        char* str = (char*)malloc(CUR_TOKEN_LENGTH-1);
                        str[0] = '0'; // add a leading zero
                        strncpy(str+1,(char*)CUR_TOKEN_TEXT+2,CUR_TOKEN_LENGTH-3);
                        str[CUR_TOKEN_LENGTH-2] = 0;
                        unsigned len = (CUR_TOKEN_LENGTH-2)/2;    // round sign
                        char *data =(char *)malloc(len+1);
                        
                        hex2str(data, str, CUR_TOKEN_LENGTH-2);                     
                        returnToken.setExpr(createConstant(createDataValue(data, len)));
                        free(data);
                        free(str);
                        return (DATA_CONST);
                    }
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 1862 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        returnToken.setExpr(createConstant(createDataValue(NULL, 0U)));
                        return (DATA_CONST);
                    }
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 1868 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        /* error pattern: illegal char in hex data */
                        setupdatepos;
                        StringBuffer msg;
                        msg.append("hex data can only contains 0-9a-fA-F: ");
                        msg.append(CUR_TOKEN_TEXT);
                        lexer->reportError(returnToken, ERR_HEXDATA_ILL, "%s", msg.str());

                        // recovering
                        char data[2], str[3] = "00";
                        
                        hex2str((char*)data, (char*)str, 2);                        
                        returnToken.setExpr(createConstant(createDataValue(data, 2)));
                        
                        return (DATA_CONST);
                    }
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 1885 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        return lookupIdentifierToken(returnToken, lexer, lookup, activeState, CUR_TOKEN_TEXT);
                    }
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 1889 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        if (lexer->yyPosition != 3)
                            lexer->reportWarning(CategoryInformation, returnToken, ERR_STRING_ILLDELIMITER, "Misplaced BOM - should be at the start of the file");
                    }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 1895 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        lexer->onOpenBra();
                        return '(';
                    }
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 1900 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        lexer->onCloseBra();
                        return ')';
                    }
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 1905 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        lexer->onOpenBra();
                        return '[';
                    }
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 1910 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{
                        setupdatepos;
                        lexer->onCloseBra();
                        return ']';
                    }
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 1915 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ 
                        setupdatepos;
                        lexer->onOpenBra();
                        return '{';
                    }
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 1920 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{   
                        setupdatepos;
                        lexer->onCloseBra();
                        return '}';
                    }
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 1927 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
{ setupdatepos; return (CUR_TOKEN_TEXT[0]); }
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 1928 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"
ECHO;
	YY_BREAK
#line 7131 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqllex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(CPP):
case YY_STATE_EOF(MULTISTRING):
case YY_STATE_EOF(SLSL):
case YY_STATE_EOF(SLSLHASH):
case YY_STATE_EOF(PGPHEADER):
case YY_STATE_EOF(PGPSIGN):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2410 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2410 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2409);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1928 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqllex.l"

void HqlLex::doEnterEmbeddedMode(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    BEGIN(CPP);
}

