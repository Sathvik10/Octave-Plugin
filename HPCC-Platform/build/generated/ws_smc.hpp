// *** Include file generated by HIDL Version 1.3 from ws_smc.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_smc_SCM_INCL
#define ws_smc_SCM_INCL

#include "esp.hpp"



////////////////////////////////////////////////////////////
#include "ws_topology.hpp"
#include "ws_topology_esp.ipp"
#include "ws_workunits.hpp"
#include "ws_workunits_esp.ipp"

interface IConstActiveWorkunit : extends IEspStruct
{
	virtual const char * getWuid()=0;
	virtual const char * getState()=0;
	virtual int getStateID()=0;
	virtual const char * getOwner()=0;
	virtual const char * getJobname()=0;
	virtual const char * getServer()=0;
	virtual const char * getInstance()=0;
	virtual const char * getPriority()=0;
	virtual const char * getExtra()=0;
	virtual const char * getGraphName()=0;
	virtual const char * getDuration()=0;
	virtual const char * getGID()=0;
	virtual const char * getQueueName()=0;
	virtual int getMemoryBlocked()=0;
	virtual bool getIsPausing()=0;
	virtual const char * getWarning()=0;
	virtual const char * getClusterName()=0;
	virtual const char * getClusterType()=0;
	virtual const char * getClusterQueueName()=0;
	virtual const char * getTargetClusterName()=0;
};

interface IEspActiveWorkunit : extends IConstActiveWorkunit
{
	virtual void setWuid(const char * val)=0;
	virtual void setState(const char * val)=0;
	virtual void setStateID(int val)=0;
	virtual void setOwner(const char * val)=0;
	virtual void setJobname(const char * val)=0;
	virtual void setServer(const char * val)=0;
	virtual void setInstance(const char * val)=0;
	virtual void setPriority(const char * val)=0;
	virtual void setExtra(const char * val)=0;
	virtual void setGraphName(const char * val)=0;
	virtual void setDuration(const char * val)=0;
	virtual void setGID(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setMemoryBlocked(int val)=0;
	virtual void setIsPausing(bool val)=0;
	virtual void setWarning(const char * val)=0;
	virtual void setClusterName(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setClusterQueueName(const char * val)=0;
	virtual void setTargetClusterName(const char * val)=0;
	virtual void copy(IConstActiveWorkunit &from)=0;
};

interface IClientActiveWorkunit : extends IInterface
{
	virtual void setWuid(const char * val)=0;
	virtual void setState(const char * val)=0;
	virtual void setStateID(int val)=0;
	virtual void setOwner(const char * val)=0;
	virtual void setJobname(const char * val)=0;
	virtual void setServer(const char * val)=0;
	virtual void setInstance(const char * val)=0;
	virtual void setPriority(const char * val)=0;
	virtual void setExtra(const char * val)=0;
	virtual void setGraphName(const char * val)=0;
	virtual void setDuration(const char * val)=0;
	virtual void setGID(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setMemoryBlocked(int val)=0;
	virtual void setIsPausing(bool val)=0;
	virtual void setWarning(const char * val)=0;
	virtual void setClusterName(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setClusterQueueName(const char * val)=0;
	virtual void setTargetClusterName(const char * val)=0;
	virtual const char * getWuid()=0;
	virtual const char * getState()=0;
	virtual int getStateID()=0;
	virtual const char * getOwner()=0;
	virtual const char * getJobname()=0;
	virtual const char * getServer()=0;
	virtual const char * getInstance()=0;
	virtual const char * getPriority()=0;
	virtual const char * getExtra()=0;
	virtual const char * getGraphName()=0;
	virtual const char * getDuration()=0;
	virtual const char * getGID()=0;
	virtual const char * getQueueName()=0;
	virtual int getMemoryBlocked()=0;
	virtual bool getIsPausing()=0;
	virtual const char * getWarning()=0;
	virtual const char * getClusterName()=0;
	virtual const char * getClusterType()=0;
	virtual const char * getClusterQueueName()=0;
	virtual const char * getTargetClusterName()=0;
};



interface IConstTargetCluster : extends IEspStruct
{
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual const char * getStatusDetails()=0;
	virtual const char * getWarning()=0;
	virtual int getClusterType()=0;
	virtual int getClusterSize()=0;
	virtual int getClusterStatus()=0;
};

interface IEspTargetCluster : extends IConstTargetCluster
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setStatusDetails(const char * val)=0;
	virtual void setWarning(const char * val)=0;
	virtual void setClusterType(int val)=0;
	virtual void setClusterSize(int val)=0;
	virtual void setClusterStatus(int val)=0;
	virtual void copy(IConstTargetCluster &from)=0;
};

interface IClientTargetCluster : extends IInterface
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setStatusDetails(const char * val)=0;
	virtual void setWarning(const char * val)=0;
	virtual void setClusterType(int val)=0;
	virtual void setClusterSize(int val)=0;
	virtual void setClusterStatus(int val)=0;
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual const char * getStatusDetails()=0;
	virtual const char * getWarning()=0;
	virtual int getClusterType()=0;
	virtual int getClusterSize()=0;
	virtual int getClusterStatus()=0;
};



interface IConstThorCluster : extends IEspStruct
{
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual int getQueueAvailable()=0;
	virtual int getJobsRunning()=0;
	virtual int getJobsInQueue()=0;
	virtual int getQueueStatus2()=0;
	virtual const char * getThorLCR()=0;
	virtual int getClusterSize()=0;
};

interface IEspThorCluster : extends IConstThorCluster
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setQueueAvailable(int val)=0;
	virtual void setJobsRunning(int val)=0;
	virtual void setJobsInQueue(int val)=0;
	virtual void setQueueStatus2(int val)=0;
	virtual void setThorLCR(const char * val)=0;
	virtual void setClusterSize(int val)=0;
	virtual void copy(IConstThorCluster &from)=0;
};

interface IClientThorCluster : extends IInterface
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setQueueAvailable(int val)=0;
	virtual void setJobsRunning(int val)=0;
	virtual void setJobsInQueue(int val)=0;
	virtual void setQueueStatus2(int val)=0;
	virtual void setThorLCR(const char * val)=0;
	virtual void setClusterSize(int val)=0;
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual int getQueueAvailable()=0;
	virtual int getJobsRunning()=0;
	virtual int getJobsInQueue()=0;
	virtual int getQueueStatus2()=0;
	virtual const char * getThorLCR()=0;
	virtual int getClusterSize()=0;
};



interface IConstHThorCluster : extends IEspStruct
{
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual int getJobsRunning()=0;
	virtual int getJobsInQueue()=0;
	virtual int getQueueStatus2()=0;
	virtual int getClusterSize()=0;
};

interface IEspHThorCluster : extends IConstHThorCluster
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setJobsRunning(int val)=0;
	virtual void setJobsInQueue(int val)=0;
	virtual void setQueueStatus2(int val)=0;
	virtual void setClusterSize(int val)=0;
	virtual void copy(IConstHThorCluster &from)=0;
};

interface IClientHThorCluster : extends IInterface
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setJobsRunning(int val)=0;
	virtual void setJobsInQueue(int val)=0;
	virtual void setQueueStatus2(int val)=0;
	virtual void setClusterSize(int val)=0;
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual int getJobsRunning()=0;
	virtual int getJobsInQueue()=0;
	virtual int getQueueStatus2()=0;
	virtual int getClusterSize()=0;
};



interface IConstRoxieCluster : extends IEspStruct
{
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual int getJobsRunning()=0;
	virtual int getJobsInQueue()=0;
	virtual int getQueueStatus2()=0;
	virtual int getClusterSize()=0;
};

interface IEspRoxieCluster : extends IConstRoxieCluster
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setJobsRunning(int val)=0;
	virtual void setJobsInQueue(int val)=0;
	virtual void setQueueStatus2(int val)=0;
	virtual void setClusterSize(int val)=0;
	virtual void copy(IConstRoxieCluster &from)=0;
};

interface IClientRoxieCluster : extends IInterface
{
	virtual void setClusterName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setJobsRunning(int val)=0;
	virtual void setJobsInQueue(int val)=0;
	virtual void setQueueStatus2(int val)=0;
	virtual void setClusterSize(int val)=0;
	virtual const char * getClusterName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getQueueStatus()=0;
	virtual int getJobsRunning()=0;
	virtual int getJobsInQueue()=0;
	virtual int getQueueStatus2()=0;
	virtual int getClusterSize()=0;
};



interface IConstDFUJob : extends IEspStruct
{
	virtual const char * getTimeStarted()=0;
	virtual int getDone()=0;
	virtual int getTotal()=0;
	virtual const char * getCommand()=0;
};

interface IEspDFUJob : extends IConstDFUJob
{
	virtual void setTimeStarted(const char * val)=0;
	virtual void setDone(int val)=0;
	virtual void setTotal(int val)=0;
	virtual void setCommand(const char * val)=0;
	virtual void copy(IConstDFUJob &from)=0;
};

interface IClientDFUJob : extends IInterface
{
	virtual void setTimeStarted(const char * val)=0;
	virtual void setDone(int val)=0;
	virtual void setTotal(int val)=0;
	virtual void setCommand(const char * val)=0;
	virtual const char * getTimeStarted()=0;
	virtual int getDone()=0;
	virtual int getTotal()=0;
	virtual const char * getCommand()=0;
};



interface IConstServerJobQueue : extends IEspStruct
{
	virtual const char * getQueueName()=0;
	virtual StringArray & getQueueNames()=0;
	virtual IArrayOf<IConstServerJobQueue> & getQueues()=0;
	virtual const char * getServerName()=0;
	virtual const char * getServerType()=0;
	virtual const char * getQueueStatus()=0;
	virtual const char * getStatusDetails()=0;
	virtual const char * getNetworkAddress()=0;
	virtual int getPort()=0;
};

interface IEspServerJobQueue : extends IConstServerJobQueue
{
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueNames(StringArray &val)=0;
	virtual void setQueues(IArrayOf<IEspServerJobQueue> &val)=0;
	virtual void setQueues(IArrayOf<IConstServerJobQueue> &val)=0;
	virtual void setServerName(const char * val)=0;
	virtual void setServerType(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setStatusDetails(const char * val)=0;
	virtual void setNetworkAddress(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void copy(IConstServerJobQueue &from)=0;
};

interface IClientServerJobQueue : extends IInterface
{
	virtual void setQueueName(const char * val)=0;
	virtual void setQueueNames(StringArray &val)=0;
	virtual void setQueues(IArrayOf<IEspServerJobQueue> &val)=0;
	virtual void setQueues(IArrayOf<IConstServerJobQueue> &val)=0;
	virtual void setServerName(const char * val)=0;
	virtual void setServerType(const char * val)=0;
	virtual void setQueueStatus(const char * val)=0;
	virtual void setStatusDetails(const char * val)=0;
	virtual void setNetworkAddress(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual const char * getQueueName()=0;
	virtual StringArray & getQueueNames()=0;
	virtual IArrayOf<IConstServerJobQueue> & getQueues()=0;
	virtual const char * getServerName()=0;
	virtual const char * getServerType()=0;
	virtual const char * getQueueStatus()=0;
	virtual const char * getStatusDetails()=0;
	virtual const char * getNetworkAddress()=0;
	virtual int getPort()=0;
};



interface IConstStatusServerInfo : extends IEspStruct
{
	virtual IConstTargetCluster & getTargetClusterInfo()=0;
	virtual IConstServerJobQueue & getServerInfo()=0;
	virtual IArrayOf<IConstActiveWorkunit> & getWorkunits()=0;
};

interface IEspStatusServerInfo : extends IConstStatusServerInfo
{
	virtual IEspTargetCluster & updateTargetClusterInfo()=0;
	virtual void setTargetClusterInfo(IConstTargetCluster &ifrom)=0;
	virtual IEspServerJobQueue & updateServerInfo()=0;
	virtual void setServerInfo(IConstServerJobQueue &ifrom)=0;
	virtual void setWorkunits(IArrayOf<IEspActiveWorkunit> &val)=0;
	virtual void setWorkunits(IArrayOf<IConstActiveWorkunit> &val)=0;
	virtual void copy(IConstStatusServerInfo &from)=0;
};

interface IClientStatusServerInfo : extends IInterface
{
	virtual IEspTargetCluster & updateTargetClusterInfo()=0;
	virtual void setTargetClusterInfo(IConstTargetCluster &ifrom)=0;
	virtual IEspServerJobQueue & updateServerInfo()=0;
	virtual void setServerInfo(IConstServerJobQueue &ifrom)=0;
	virtual void setWorkunits(IArrayOf<IEspActiveWorkunit> &val)=0;
	virtual void setWorkunits(IArrayOf<IConstActiveWorkunit> &val)=0;
	virtual IConstTargetCluster & getTargetClusterInfo()=0;
	virtual IConstServerJobQueue & getServerInfo()=0;
	virtual IArrayOf<IConstActiveWorkunit> & getWorkunits()=0;
};



interface IConstActivityRequest : extends IEspRequest
{
	virtual const char * getChatURL()=0;
	virtual const char * getBannerContent()=0;
	virtual const char * getBannerColor()=0;
	virtual const char * getBannerSize()=0;
	virtual const char * getBannerScroll()=0;
	virtual bool getBannerAction_isNull()=0;
	virtual int getBannerAction()=0;
	virtual bool getEnableChatURL_isNull()=0;
	virtual bool getEnableChatURL()=0;
	virtual bool getFromSubmitBtn_isNull()=0;
	virtual bool getFromSubmitBtn()=0;
	virtual const char * getSortBy()=0;
	virtual bool getDescending_isNull()=0;
	virtual bool getDescending()=0;
};

interface IEspActivityRequest : extends IConstActivityRequest
{
	virtual void setChatURL(const char * val)=0;
	virtual void setBannerContent(const char * val)=0;
	virtual void setBannerColor(const char * val)=0;
	virtual void setBannerSize(const char * val)=0;
	virtual void setBannerScroll(const char * val)=0;
	virtual void setBannerAction_null()=0;
	virtual void setBannerAction(int val)=0;
	virtual void setEnableChatURL_null()=0;
	virtual void setEnableChatURL(bool val)=0;
	virtual void setFromSubmitBtn_null()=0;
	virtual void setFromSubmitBtn(bool val)=0;
	virtual void setSortBy(const char * val)=0;
	virtual void setDescending_null()=0;
	virtual void setDescending(bool val)=0;
	virtual void copy(IConstActivityRequest &from)=0;
};

interface IClientActivityRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setChatURL(const char * val)=0;
	virtual void setBannerContent(const char * val)=0;
	virtual void setBannerColor(const char * val)=0;
	virtual void setBannerSize(const char * val)=0;
	virtual void setBannerScroll(const char * val)=0;
	virtual void setBannerAction_null()=0;
	virtual void setBannerAction(int val)=0;
	virtual void setEnableChatURL_null()=0;
	virtual void setEnableChatURL(bool val)=0;
	virtual void setFromSubmitBtn_null()=0;
	virtual void setFromSubmitBtn(bool val)=0;
	virtual void setSortBy(const char * val)=0;
	virtual void setDescending_null()=0;
	virtual void setDescending(bool val)=0;
};



interface IConstActivityResponse : extends IEspResponse
{
	virtual const char * getBuild()=0;
	virtual IArrayOf<IConstThorCluster> & getThorClusters()=0;
	virtual IArrayOf<IConstRoxieCluster> & getRoxieClusters()=0;
	virtual IArrayOf<IConstHThorCluster> & getHThorClusters()=0;
	virtual IArrayOf<IConstTargetCluster> & getThorClusterList()=0;
	virtual IArrayOf<IConstTargetCluster> & getRoxieClusterList()=0;
	virtual IArrayOf<IConstTargetCluster> & getHThorClusterList()=0;
	virtual IArrayOf<IConstDFUJob> & getDFUJobs()=0;
	virtual IArrayOf<IConstActiveWorkunit> & getRunning()=0;
	virtual const char * getBannerContent()=0;
	virtual const char * getBannerColor()=0;
	virtual const char * getBannerSize()=0;
	virtual const char * getBannerScroll()=0;
	virtual const char * getChatURL()=0;
	virtual int getShowBanner()=0;
	virtual int getShowChatURL()=0;
	virtual const char * getSortBy()=0;
	virtual bool getDescending()=0;
	virtual bool getSuperUser()=0;
	virtual const char * getAccessRight()=0;
	virtual IArrayOf<IConstServerJobQueue> & getServerJobQueues()=0;
};

interface IEspActivityResponse : extends IConstActivityResponse
{
	virtual void setBuild(const char * val)=0;
	virtual void setThorClusters(IArrayOf<IEspThorCluster> &val)=0;
	virtual void setThorClusters(IArrayOf<IConstThorCluster> &val)=0;
	virtual void setRoxieClusters(IArrayOf<IEspRoxieCluster> &val)=0;
	virtual void setRoxieClusters(IArrayOf<IConstRoxieCluster> &val)=0;
	virtual void setHThorClusters(IArrayOf<IEspHThorCluster> &val)=0;
	virtual void setHThorClusters(IArrayOf<IConstHThorCluster> &val)=0;
	virtual void setThorClusterList(IArrayOf<IEspTargetCluster> &val)=0;
	virtual void setThorClusterList(IArrayOf<IConstTargetCluster> &val)=0;
	virtual void setRoxieClusterList(IArrayOf<IEspTargetCluster> &val)=0;
	virtual void setRoxieClusterList(IArrayOf<IConstTargetCluster> &val)=0;
	virtual void setHThorClusterList(IArrayOf<IEspTargetCluster> &val)=0;
	virtual void setHThorClusterList(IArrayOf<IConstTargetCluster> &val)=0;
	virtual void setDFUJobs(IArrayOf<IEspDFUJob> &val)=0;
	virtual void setDFUJobs(IArrayOf<IConstDFUJob> &val)=0;
	virtual void setRunning(IArrayOf<IEspActiveWorkunit> &val)=0;
	virtual void setRunning(IArrayOf<IConstActiveWorkunit> &val)=0;
	virtual void setBannerContent(const char * val)=0;
	virtual void setBannerColor(const char * val)=0;
	virtual void setBannerSize(const char * val)=0;
	virtual void setBannerScroll(const char * val)=0;
	virtual void setChatURL(const char * val)=0;
	virtual void setShowBanner(int val)=0;
	virtual void setShowChatURL(int val)=0;
	virtual void setSortBy(const char * val)=0;
	virtual void setDescending(bool val)=0;
	virtual void setSuperUser(bool val)=0;
	virtual void setAccessRight(const char * val)=0;
	virtual void setServerJobQueues(IArrayOf<IEspServerJobQueue> &val)=0;
	virtual void setServerJobQueues(IArrayOf<IConstServerJobQueue> &val)=0;
	virtual void copy(IConstActivityResponse &from)=0;
};

interface IClientActivityResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getBuild()=0;
	virtual IArrayOf<IConstThorCluster> & getThorClusters()=0;
	virtual IArrayOf<IConstRoxieCluster> & getRoxieClusters()=0;
	virtual IArrayOf<IConstHThorCluster> & getHThorClusters()=0;
	virtual IArrayOf<IConstTargetCluster> & getThorClusterList()=0;
	virtual IArrayOf<IConstTargetCluster> & getRoxieClusterList()=0;
	virtual IArrayOf<IConstTargetCluster> & getHThorClusterList()=0;
	virtual IArrayOf<IConstDFUJob> & getDFUJobs()=0;
	virtual IArrayOf<IConstActiveWorkunit> & getRunning()=0;
	virtual const char * getBannerContent()=0;
	virtual const char * getBannerColor()=0;
	virtual const char * getBannerSize()=0;
	virtual const char * getBannerScroll()=0;
	virtual const char * getChatURL()=0;
	virtual int getShowBanner()=0;
	virtual int getShowChatURL()=0;
	virtual const char * getSortBy()=0;
	virtual bool getDescending()=0;
	virtual bool getSuperUser()=0;
	virtual const char * getAccessRight()=0;
	virtual IArrayOf<IConstServerJobQueue> & getServerJobQueues()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSMCIndexRequest : extends IEspRequest
{
};

interface IEspSMCIndexRequest : extends IConstSMCIndexRequest
{
	virtual void copy(IConstSMCIndexRequest &from)=0;
};

interface IClientSMCIndexRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstSMCIndexResponse : extends IEspResponse
{
};

interface IEspSMCIndexResponse : extends IConstSMCIndexResponse
{
	virtual void copy(IConstSMCIndexResponse &from)=0;
};

interface IClientSMCIndexResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstCapability : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
};

interface IEspCapability : extends IConstCapability
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void copy(IConstCapability &from)=0;
};

interface IClientCapability : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
};




interface IConstPermission : extends IEspStruct
{
	virtual const char * getFeature()=0;
	virtual IArrayOf<IConstCapability> & getCapabilities()=0;
};

interface IEspPermission : extends IConstPermission
{
	virtual void setFeature(const char * val)=0;
	virtual void setCapabilities(IArrayOf<IEspCapability> &val)=0;
	virtual void setCapabilities(IArrayOf<IConstCapability> &val)=0;
	virtual void copy(IConstPermission &from)=0;
};

interface IClientPermission : extends IInterface
{
	virtual void setFeature(const char * val)=0;
	virtual void setCapabilities(IArrayOf<IEspCapability> &val)=0;
	virtual void setCapabilities(IArrayOf<IConstCapability> &val)=0;
	virtual const char * getFeature()=0;
	virtual IArrayOf<IConstCapability> & getCapabilities()=0;
};



interface IConstSMCPermissionsRequest : extends IEspRequest
{
};

interface IEspSMCPermissionsRequest : extends IConstSMCPermissionsRequest
{
	virtual void copy(IConstSMCPermissionsRequest &from)=0;
};

interface IClientSMCPermissionsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstSMCPermissionsResponse : extends IEspResponse
{
	virtual IArrayOf<IConstPermission> & getPermissions()=0;
};

interface IEspSMCPermissionsResponse : extends IConstSMCPermissionsResponse
{
	virtual void setPermissions(IArrayOf<IEspPermission> &val)=0;
	virtual void setPermissions(IArrayOf<IConstPermission> &val)=0;
	virtual void copy(IConstSMCPermissionsResponse &from)=0;
};

interface IClientSMCPermissionsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstPermission> & getPermissions()=0;
};




interface IConstSMCQueueRequest : extends IEspRequest
{
	virtual const char * getCluster()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getComment()=0;
	virtual const char * getServerType()=0;
	virtual const char * getNetworkAddress()=0;
	virtual int getPort()=0;
};

interface IEspSMCQueueRequest : extends IConstSMCQueueRequest
{
	virtual void setCluster(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setComment(const char * val)=0;
	virtual void setServerType(const char * val)=0;
	virtual void setNetworkAddress(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void copy(IConstSMCQueueRequest &from)=0;
};

interface IClientSMCQueueRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCluster(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setComment(const char * val)=0;
	virtual void setServerType(const char * val)=0;
	virtual void setNetworkAddress(const char * val)=0;
	virtual void setPort(int val)=0;
};




interface IConstSMCQueueResponse : extends IEspResponse
{
	virtual IConstStatusServerInfo & getStatusServerInfo()=0;
};

interface IEspSMCQueueResponse : extends IConstSMCQueueResponse
{
	virtual IEspStatusServerInfo & updateStatusServerInfo()=0;
	virtual void setStatusServerInfo(IConstStatusServerInfo &ifrom)=0;
	virtual void copy(IConstSMCQueueResponse &from)=0;
};

interface IClientSMCQueueResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstStatusServerInfo & getStatusServerInfo()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSMCJobRequest : extends IEspRequest
{
	virtual int getClusterType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getWuid()=0;
};

interface IEspSMCJobRequest : extends IConstSMCJobRequest
{
	virtual void setClusterType(int val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstSMCJobRequest &from)=0;
};

interface IClientSMCJobRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setClusterType(int val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setWuid(const char * val)=0;
};




interface IConstSMCJobResponse : extends IEspResponse
{
};

interface IEspSMCJobResponse : extends IConstSMCJobResponse
{
	virtual void copy(IConstSMCJobResponse &from)=0;
};

interface IClientSMCJobResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSMCJob : extends IEspStruct
{
	virtual const char * getWuid()=0;
	virtual const char * getQueueName()=0;
};

interface IEspSMCJob : extends IConstSMCJob
{
	virtual void setWuid(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void copy(IConstSMCJob &from)=0;
};

interface IClientSMCJob : extends IInterface
{
	virtual void setWuid(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual const char * getWuid()=0;
	virtual const char * getQueueName()=0;
};



interface IConstSMCPriorityRequest : extends IEspRequest
{
	virtual int getClusterType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getWuid()=0;
	virtual const char * getPriority()=0;
	virtual IArrayOf<IConstSMCJob> & getSMCJobs()=0;
};

interface IEspSMCPriorityRequest : extends IConstSMCPriorityRequest
{
	virtual void setClusterType(int val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setWuid(const char * val)=0;
	virtual void setPriority(const char * val)=0;
	virtual void setSMCJobs(IArrayOf<IEspSMCJob> &val)=0;
	virtual void setSMCJobs(IArrayOf<IConstSMCJob> &val)=0;
	virtual void copy(IConstSMCPriorityRequest &from)=0;
};

interface IClientSMCPriorityRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setClusterType(int val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setWuid(const char * val)=0;
	virtual void setPriority(const char * val)=0;
	virtual void setSMCJobs(IArrayOf<IEspSMCJob> &val)=0;
	virtual void setSMCJobs(IArrayOf<IConstSMCJob> &val)=0;
};




interface IConstSMCPriorityResponse : extends IEspResponse
{
};

interface IEspSMCPriorityResponse : extends IConstSMCPriorityResponse
{
	virtual void copy(IConstSMCPriorityResponse &from)=0;
};

interface IClientSMCPriorityResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetThorQueueAvailabilityRequest : extends IEspRequest
{
};

interface IEspGetThorQueueAvailabilityRequest : extends IConstGetThorQueueAvailabilityRequest
{
	virtual void copy(IConstGetThorQueueAvailabilityRequest &from)=0;
};

interface IClientGetThorQueueAvailabilityRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstGetThorQueueAvailabilityResponse : extends IEspResponse
{
	virtual IArrayOf<IConstThorCluster> & getThorClusters()=0;
};

interface IEspGetThorQueueAvailabilityResponse : extends IConstGetThorQueueAvailabilityResponse
{
	virtual void setThorClusters(IArrayOf<IEspThorCluster> &val)=0;
	virtual void setThorClusters(IArrayOf<IConstThorCluster> &val)=0;
	virtual void copy(IConstGetThorQueueAvailabilityResponse &from)=0;
};

interface IClientGetThorQueueAvailabilityResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstThorCluster> & getThorClusters()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstSetBannerRequest : extends IEspRequest
{
	virtual const char * getChatURL()=0;
	virtual const char * getBannerContent()=0;
	virtual const char * getBannerColor()=0;
	virtual const char * getBannerSize()=0;
	virtual const char * getBannerScroll()=0;
	virtual bool getBannerAction_isNull()=0;
	virtual int getBannerAction()=0;
	virtual bool getEnableChatURL_isNull()=0;
	virtual bool getEnableChatURL()=0;
	virtual bool getFromSubmitBtn_isNull()=0;
	virtual bool getFromSubmitBtn()=0;
};

interface IEspSetBannerRequest : extends IConstSetBannerRequest
{
	virtual void setChatURL(const char * val)=0;
	virtual void setBannerContent(const char * val)=0;
	virtual void setBannerColor(const char * val)=0;
	virtual void setBannerSize(const char * val)=0;
	virtual void setBannerScroll(const char * val)=0;
	virtual void setBannerAction_null()=0;
	virtual void setBannerAction(int val)=0;
	virtual void setEnableChatURL_null()=0;
	virtual void setEnableChatURL(bool val)=0;
	virtual void setFromSubmitBtn_null()=0;
	virtual void setFromSubmitBtn(bool val)=0;
	virtual void copy(IConstSetBannerRequest &from)=0;
};

interface IClientSetBannerRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setChatURL(const char * val)=0;
	virtual void setBannerContent(const char * val)=0;
	virtual void setBannerColor(const char * val)=0;
	virtual void setBannerSize(const char * val)=0;
	virtual void setBannerScroll(const char * val)=0;
	virtual void setBannerAction_null()=0;
	virtual void setBannerAction(int val)=0;
	virtual void setEnableChatURL_null()=0;
	virtual void setEnableChatURL(bool val)=0;
	virtual void setFromSubmitBtn_null()=0;
	virtual void setFromSubmitBtn(bool val)=0;
};



interface IConstSetBannerResponse : extends IEspResponse
{
};

interface IEspSetBannerResponse : extends IConstSetBannerResponse
{
	virtual void copy(IConstSetBannerResponse &from)=0;
};

interface IClientSetBannerResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstNotInCommunityEditionRequest : extends IEspRequest
{
	virtual const char * getEEPortal()=0;
};

interface IEspNotInCommunityEditionRequest : extends IConstNotInCommunityEditionRequest
{
	virtual void setEEPortal(const char * val)=0;
	virtual void copy(IConstNotInCommunityEditionRequest &from)=0;
};

interface IClientNotInCommunityEditionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEEPortal(const char * val)=0;
};



interface IConstNotInCommunityEditionResponse : extends IEspResponse
{
};

interface IEspNotInCommunityEditionResponse : extends IConstNotInCommunityEditionResponse
{
	virtual void copy(IConstNotInCommunityEditionResponse &from)=0;
};

interface IClientNotInCommunityEditionResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHPCCResource : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getFileName()=0;
	virtual const char * getVersion()=0;
};

interface IEspHPCCResource : extends IConstHPCCResource
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setFileName(const char * val)=0;
	virtual void setVersion(const char * val)=0;
	virtual void copy(IConstHPCCResource &from)=0;
};

interface IClientHPCCResource : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setFileName(const char * val)=0;
	virtual void setVersion(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getFileName()=0;
	virtual const char * getVersion()=0;
};



interface IConstHPCCResourceRepository : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstHPCCResource> & getHPCCResources()=0;
};

interface IEspHPCCResourceRepository : extends IConstHPCCResourceRepository
{
	virtual void setName(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setHPCCResources(IArrayOf<IEspHPCCResource> &val)=0;
	virtual void setHPCCResources(IArrayOf<IConstHPCCResource> &val)=0;
	virtual void copy(IConstHPCCResourceRepository &from)=0;
};

interface IClientHPCCResourceRepository : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setHPCCResources(IArrayOf<IEspHPCCResource> &val)=0;
	virtual void setHPCCResources(IArrayOf<IConstHPCCResource> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstHPCCResource> & getHPCCResources()=0;
};



interface IConstBrowseResourcesRequest : extends IEspRequest
{
};

interface IEspBrowseResourcesRequest : extends IConstBrowseResourcesRequest
{
	virtual void copy(IConstBrowseResourcesRequest &from)=0;
};

interface IClientBrowseResourcesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstBrowseResourcesResponse : extends IEspResponse
{
	virtual const char * getPortalURL()=0;
	virtual const char * getNetAddress()=0;
	virtual bool getOS_isNull()=0;
	virtual int getOS()=0;
	virtual bool getUseResource_isNull()=0;
	virtual bool getUseResource()=0;
	virtual IArrayOf<IConstHPCCResourceRepository> & getHPCCResourceRepositories()=0;
};

interface IEspBrowseResourcesResponse : extends IConstBrowseResourcesResponse
{
	virtual void setPortalURL(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setOS_null()=0;
	virtual void setOS(int val)=0;
	virtual void setUseResource_null()=0;
	virtual void setUseResource(bool val)=0;
	virtual void setHPCCResourceRepositories(IArrayOf<IEspHPCCResourceRepository> &val)=0;
	virtual void setHPCCResourceRepositories(IArrayOf<IConstHPCCResourceRepository> &val)=0;
	virtual void copy(IConstBrowseResourcesResponse &from)=0;
};

interface IClientBrowseResourcesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getPortalURL()=0;
	virtual const char * getNetAddress()=0;
	virtual bool getOS_isNull()=0;
	virtual int getOS()=0;
	virtual bool getUseResource_isNull()=0;
	virtual bool getUseResource()=0;
	virtual IArrayOf<IConstHPCCResourceRepository> & getHPCCResourceRepositories()=0;

	virtual const IMultiException& getExceptions()=0;
};



enum CRoxieControlCmdType { RoxieControlCmdType_Undefined=-1,CRoxieControlCmdType_ATTACH, CRoxieControlCmdType_DETACH, CRoxieControlCmdType_STATE, CRoxieControlCmdType_RELOAD, CRoxieControlCmdType_RELOAD_RETRY, };
typedef ArrayOf<CRoxieControlCmdType> RoxieControlCmdTypeArray;


interface IConstRoxieControlCmdRequest : extends IEspRequest
{
	virtual const char * getProcessCluster()=0;
	virtual CRoxieControlCmdType getCommand()=0;
	virtual const char* getCommandAsString()=0;
	virtual int getWait()=0;
};

interface IEspRoxieControlCmdRequest : extends IConstRoxieControlCmdRequest
{
	virtual void setProcessCluster(const char * val)=0;
	virtual void setCommand(CRoxieControlCmdType val)=0;
	virtual void setCommand(const char* val)=0;
	virtual void setWait(int val)=0;
	virtual void copy(IConstRoxieControlCmdRequest &from)=0;
};

interface IClientRoxieControlCmdRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setProcessCluster(const char * val)=0;
	virtual void setCommand(CRoxieControlCmdType val)=0;
	virtual void setCommand(const char* val)=0;
	virtual void setWait(int val)=0;
};



interface IConstRoxieControlEndpointInfo : extends IEspStruct
{
	virtual const char * getAddress()=0;
	virtual bool getAttached_isNull()=0;
	virtual bool getAttached()=0;
	virtual const char * getStateHash()=0;
	virtual const char * getStatus()=0;
};

interface IEspRoxieControlEndpointInfo : extends IConstRoxieControlEndpointInfo
{
	virtual void setAddress(const char * val)=0;
	virtual void setAttached_null()=0;
	virtual void setAttached(bool val)=0;
	virtual void setStateHash(const char * val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstRoxieControlEndpointInfo &from)=0;
};

interface IClientRoxieControlEndpointInfo : extends IInterface
{
	virtual void setAddress(const char * val)=0;
	virtual void setAttached_null()=0;
	virtual void setAttached(bool val)=0;
	virtual void setStateHash(const char * val)=0;
	virtual void setStatus(const char * val)=0;
	virtual const char * getAddress()=0;
	virtual bool getAttached_isNull()=0;
	virtual bool getAttached()=0;
	virtual const char * getStateHash()=0;
	virtual const char * getStatus()=0;
};



interface IConstRoxieControlCmdResponse : extends IEspResponse
{
	virtual IArrayOf<IConstRoxieControlEndpointInfo> & getEndpoints()=0;
};

interface IEspRoxieControlCmdResponse : extends IConstRoxieControlCmdResponse
{
	virtual void setEndpoints(IArrayOf<IEspRoxieControlEndpointInfo> &val)=0;
	virtual void setEndpoints(IArrayOf<IConstRoxieControlEndpointInfo> &val)=0;
	virtual void copy(IConstRoxieControlCmdResponse &from)=0;
};

interface IClientRoxieControlCmdResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstRoxieControlEndpointInfo> & getEndpoints()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetStatusServerInfoRequest : extends IEspRequest
{
	virtual const char * getServerName()=0;
	virtual const char * getServerType()=0;
	virtual const char * getNetworkAddress()=0;
	virtual int getPort()=0;
};

interface IEspGetStatusServerInfoRequest : extends IConstGetStatusServerInfoRequest
{
	virtual void setServerName(const char * val)=0;
	virtual void setServerType(const char * val)=0;
	virtual void setNetworkAddress(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void copy(IConstGetStatusServerInfoRequest &from)=0;
};

interface IClientGetStatusServerInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setServerName(const char * val)=0;
	virtual void setServerType(const char * val)=0;
	virtual void setNetworkAddress(const char * val)=0;
	virtual void setPort(int val)=0;
};



interface IConstGetStatusServerInfoResponse : extends IEspResponse
{
	virtual IConstStatusServerInfo & getStatusServerInfo()=0;
};

interface IEspGetStatusServerInfoResponse : extends IConstGetStatusServerInfoResponse
{
	virtual IEspStatusServerInfo & updateStatusServerInfo()=0;
	virtual void setStatusServerInfo(IConstStatusServerInfo &ifrom)=0;
	virtual void copy(IConstGetStatusServerInfoResponse &from)=0;
};

interface IClientGetStatusServerInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstStatusServerInfo & getStatusServerInfo()=0;

	virtual const IMultiException& getExceptions()=0;
};



enum CLockModes { LockModes_Undefined=-1,CLockModes_ALL, CLockModes_READ, CLockModes_WRITE, CLockModes_HOLD, CLockModes_SUB, };
typedef ArrayOf<CLockModes> LockModesArray;


interface IConstLock : extends IEspStruct
{
	virtual const char * getEPIP()=0;
	virtual const char * getXPath()=0;
	virtual const char * getLogicalFile()=0;
	virtual bool getSessionID_isNull()=0;
	virtual __int64 getSessionID()=0;
	virtual bool getDurationMS_isNull()=0;
	virtual unsigned int getDurationMS()=0;
	virtual const char * getTimeLocked()=0;
	virtual const char * getModes()=0;
	virtual StringArray & getModeNames()=0;
};

interface IEspLock : extends IConstLock
{
	virtual void setEPIP(const char * val)=0;
	virtual void setXPath(const char * val)=0;
	virtual void setLogicalFile(const char * val)=0;
	virtual void setSessionID_null()=0;
	virtual void setSessionID(__int64 val)=0;
	virtual void setDurationMS_null()=0;
	virtual void setDurationMS(unsigned int val)=0;
	virtual void setTimeLocked(const char * val)=0;
	virtual void setModes(const char * val)=0;
	virtual void setModeNames(StringArray &val)=0;
	virtual void copy(IConstLock &from)=0;
};

interface IClientLock : extends IInterface
{
	virtual void setEPIP(const char * val)=0;
	virtual void setXPath(const char * val)=0;
	virtual void setLogicalFile(const char * val)=0;
	virtual void setSessionID_null()=0;
	virtual void setSessionID(__int64 val)=0;
	virtual void setDurationMS_null()=0;
	virtual void setDurationMS(unsigned int val)=0;
	virtual void setTimeLocked(const char * val)=0;
	virtual void setModes(const char * val)=0;
	virtual void setModeNames(StringArray &val)=0;
	virtual const char * getEPIP()=0;
	virtual const char * getXPath()=0;
	virtual const char * getLogicalFile()=0;
	virtual bool getSessionID_isNull()=0;
	virtual __int64 getSessionID()=0;
	virtual bool getDurationMS_isNull()=0;
	virtual unsigned int getDurationMS()=0;
	virtual const char * getTimeLocked()=0;
	virtual const char * getModes()=0;
	virtual StringArray & getModeNames()=0;
};



interface IConstLockQueryRequest : extends IEspRequest
{
	virtual const char * getEPIP()=0;
	virtual const char * getXPath()=0;
	virtual bool getDurationMSLow_isNull()=0;
	virtual unsigned int getDurationMSLow()=0;
	virtual bool getDurationMSHigh_isNull()=0;
	virtual unsigned int getDurationMSHigh()=0;
	virtual const char * getTimeLockedLow()=0;
	virtual const char * getTimeLockedHigh()=0;
	virtual CLockModes getMode()=0;
	virtual const char* getModeAsString()=0;
	virtual bool getAllFileLocks_isNull()=0;
	virtual bool getAllFileLocks()=0;
};

interface IEspLockQueryRequest : extends IConstLockQueryRequest
{
	virtual void setEPIP(const char * val)=0;
	virtual void setXPath(const char * val)=0;
	virtual void setDurationMSLow_null()=0;
	virtual void setDurationMSLow(unsigned int val)=0;
	virtual void setDurationMSHigh_null()=0;
	virtual void setDurationMSHigh(unsigned int val)=0;
	virtual void setTimeLockedLow(const char * val)=0;
	virtual void setTimeLockedHigh(const char * val)=0;
	virtual void setMode(CLockModes val)=0;
	virtual void setMode(const char* val)=0;
	virtual void setAllFileLocks_null()=0;
	virtual void setAllFileLocks(bool val)=0;
	virtual void copy(IConstLockQueryRequest &from)=0;
};

interface IClientLockQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEPIP(const char * val)=0;
	virtual void setXPath(const char * val)=0;
	virtual void setDurationMSLow_null()=0;
	virtual void setDurationMSLow(unsigned int val)=0;
	virtual void setDurationMSHigh_null()=0;
	virtual void setDurationMSHigh(unsigned int val)=0;
	virtual void setTimeLockedLow(const char * val)=0;
	virtual void setTimeLockedHigh(const char * val)=0;
	virtual void setMode(CLockModes val)=0;
	virtual void setMode(const char* val)=0;
	virtual void setAllFileLocks_null()=0;
	virtual void setAllFileLocks(bool val)=0;
};



interface IConstLockQueryResponse : extends IEspResponse
{
	virtual IArrayOf<IConstLock> & getLocks()=0;
	virtual int getNumLocks()=0;
};

interface IEspLockQueryResponse : extends IConstLockQueryResponse
{
	virtual void setLocks(IArrayOf<IEspLock> &val)=0;
	virtual void setLocks(IArrayOf<IConstLock> &val)=0;
	virtual void setNumLocks(int val)=0;
	virtual void copy(IConstLockQueryResponse &from)=0;
};

interface IClientLockQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstLock> & getLocks()=0;
	virtual int getNumLocks()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstWsSMCPingRequest : extends IEspRequest
{
};

interface IEspWsSMCPingRequest : extends IConstWsSMCPingRequest
{
	virtual void copy(IConstWsSMCPingRequest &from)=0;
};

interface IClientWsSMCPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstWsSMCPingResponse : extends IEspResponse
{
};

interface IEspWsSMCPingResponse : extends IConstWsSMCPingResponse
{
	virtual void copy(IConstWsSMCPingResponse &from)=0;
};

interface IClientWsSMCPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspWsSMC : extends IEspService
{
	virtual bool onActivity(IEspContext &context, IEspActivityRequest &req, IEspActivityResponse &resp)=0;
	virtual bool onBrowseResources(IEspContext &context, IEspBrowseResourcesRequest &req, IEspBrowseResourcesResponse &resp)=0;
	virtual bool onClearQueue(IEspContext &context, IEspSMCQueueRequest &req, IEspSMCQueueResponse &resp)=0;
	virtual bool onGetStatusServerInfo(IEspContext &context, IEspGetStatusServerInfoRequest &req, IEspGetStatusServerInfoResponse &resp)=0;
	virtual bool onGetThorQueueAvailability(IEspContext &context, IEspGetThorQueueAvailabilityRequest &req, IEspGetThorQueueAvailabilityResponse &resp)=0;
	virtual bool onIndex(IEspContext &context, IEspSMCIndexRequest &req, IEspSMCIndexResponse &resp)=0;
	virtual bool onLockQuery(IEspContext &context, IEspLockQueryRequest &req, IEspLockQueryResponse &resp)=0;
	virtual bool onMoveJobBack(IEspContext &context, IEspSMCJobRequest &req, IEspSMCJobResponse &resp)=0;
	virtual bool onMoveJobDown(IEspContext &context, IEspSMCJobRequest &req, IEspSMCJobResponse &resp)=0;
	virtual bool onMoveJobFront(IEspContext &context, IEspSMCJobRequest &req, IEspSMCJobResponse &resp)=0;
	virtual bool onMoveJobUp(IEspContext &context, IEspSMCJobRequest &req, IEspSMCJobResponse &resp)=0;
	virtual bool onNotInCommunityEdition(IEspContext &context, IEspNotInCommunityEditionRequest &req, IEspNotInCommunityEditionResponse &resp)=0;
	virtual bool onPauseQueue(IEspContext &context, IEspSMCQueueRequest &req, IEspSMCQueueResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspWsSMCPingRequest &req, IEspWsSMCPingResponse &resp)=0;
	virtual bool onRemoveJob(IEspContext &context, IEspSMCJobRequest &req, IEspSMCJobResponse &resp)=0;
	virtual bool onResumeQueue(IEspContext &context, IEspSMCQueueRequest &req, IEspSMCQueueResponse &resp)=0;
	virtual bool onRoxieControlCmd(IEspContext &context, IEspRoxieControlCmdRequest &req, IEspRoxieControlCmdResponse &resp)=0;
	virtual bool onSetBanner(IEspContext &context, IEspSetBannerRequest &req, IEspSetBannerResponse &resp)=0;
	virtual bool onSetJobPriority(IEspContext &context, IEspSMCPriorityRequest &req, IEspSMCPriorityResponse &resp)=0;
	virtual bool onStopQueue(IEspContext &context, IEspSMCQueueRequest &req, IEspSMCQueueResponse &resp)=0;
};

interface IClientWsSMCEvents : extends IInterface
{
	virtual int onActivityComplete(IClientActivityResponse *resp,IInterface* state)=0;
	virtual int onActivityError(IClientActivityResponse *resp,IInterface* state)=0;
	virtual int onBrowseResourcesComplete(IClientBrowseResourcesResponse *resp,IInterface* state)=0;
	virtual int onBrowseResourcesError(IClientBrowseResourcesResponse *resp,IInterface* state)=0;
	virtual int onClearQueueComplete(IClientSMCQueueResponse *resp,IInterface* state)=0;
	virtual int onClearQueueError(IClientSMCQueueResponse *resp,IInterface* state)=0;
	virtual int onGetStatusServerInfoComplete(IClientGetStatusServerInfoResponse *resp,IInterface* state)=0;
	virtual int onGetStatusServerInfoError(IClientGetStatusServerInfoResponse *resp,IInterface* state)=0;
	virtual int onGetThorQueueAvailabilityComplete(IClientGetThorQueueAvailabilityResponse *resp,IInterface* state)=0;
	virtual int onGetThorQueueAvailabilityError(IClientGetThorQueueAvailabilityResponse *resp,IInterface* state)=0;
	virtual int onIndexComplete(IClientSMCIndexResponse *resp,IInterface* state)=0;
	virtual int onIndexError(IClientSMCIndexResponse *resp,IInterface* state)=0;
	virtual int onLockQueryComplete(IClientLockQueryResponse *resp,IInterface* state)=0;
	virtual int onLockQueryError(IClientLockQueryResponse *resp,IInterface* state)=0;
	virtual int onMoveJobBackComplete(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onMoveJobBackError(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onMoveJobDownComplete(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onMoveJobDownError(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onMoveJobFrontComplete(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onMoveJobFrontError(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onMoveJobUpComplete(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onMoveJobUpError(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onNotInCommunityEditionComplete(IClientNotInCommunityEditionResponse *resp,IInterface* state)=0;
	virtual int onNotInCommunityEditionError(IClientNotInCommunityEditionResponse *resp,IInterface* state)=0;
	virtual int onPauseQueueComplete(IClientSMCQueueResponse *resp,IInterface* state)=0;
	virtual int onPauseQueueError(IClientSMCQueueResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientWsSMCPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientWsSMCPingResponse *resp,IInterface* state)=0;
	virtual int onRemoveJobComplete(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onRemoveJobError(IClientSMCJobResponse *resp,IInterface* state)=0;
	virtual int onResumeQueueComplete(IClientSMCQueueResponse *resp,IInterface* state)=0;
	virtual int onResumeQueueError(IClientSMCQueueResponse *resp,IInterface* state)=0;
	virtual int onRoxieControlCmdComplete(IClientRoxieControlCmdResponse *resp,IInterface* state)=0;
	virtual int onRoxieControlCmdError(IClientRoxieControlCmdResponse *resp,IInterface* state)=0;
	virtual int onSetBannerComplete(IClientSetBannerResponse *resp,IInterface* state)=0;
	virtual int onSetBannerError(IClientSetBannerResponse *resp,IInterface* state)=0;
	virtual int onSetJobPriorityComplete(IClientSMCPriorityResponse *resp,IInterface* state)=0;
	virtual int onSetJobPriorityError(IClientSMCPriorityResponse *resp,IInterface* state)=0;
	virtual int onStopQueueComplete(IClientSMCQueueResponse *resp,IInterface* state)=0;
	virtual int onStopQueueError(IClientSMCQueueResponse *resp,IInterface* state)=0;
};

interface IClientWsSMC : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientActivityRequest * createActivityRequest()=0;
	virtual IClientActivityResponse * Activity(IClientActivityRequest *request)=0;
	virtual void async_Activity(IClientActivityRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientBrowseResourcesRequest * createBrowseResourcesRequest()=0;
	virtual IClientBrowseResourcesResponse * BrowseResources(IClientBrowseResourcesRequest *request)=0;
	virtual void async_BrowseResources(IClientBrowseResourcesRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCQueueRequest * createClearQueueRequest()=0;
	virtual IClientSMCQueueResponse * ClearQueue(IClientSMCQueueRequest *request)=0;
	virtual void async_ClearQueue(IClientSMCQueueRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientGetStatusServerInfoRequest * createGetStatusServerInfoRequest()=0;
	virtual IClientGetStatusServerInfoResponse * GetStatusServerInfo(IClientGetStatusServerInfoRequest *request)=0;
	virtual void async_GetStatusServerInfo(IClientGetStatusServerInfoRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientGetThorQueueAvailabilityRequest * createGetThorQueueAvailabilityRequest()=0;
	virtual IClientGetThorQueueAvailabilityResponse * GetThorQueueAvailability(IClientGetThorQueueAvailabilityRequest *request)=0;
	virtual void async_GetThorQueueAvailability(IClientGetThorQueueAvailabilityRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCIndexRequest * createIndexRequest()=0;
	virtual IClientSMCIndexResponse * Index(IClientSMCIndexRequest *request)=0;
	virtual void async_Index(IClientSMCIndexRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientLockQueryRequest * createLockQueryRequest()=0;
	virtual IClientLockQueryResponse * LockQuery(IClientLockQueryRequest *request)=0;
	virtual void async_LockQuery(IClientLockQueryRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCJobRequest * createMoveJobBackRequest()=0;
	virtual IClientSMCJobResponse * MoveJobBack(IClientSMCJobRequest *request)=0;
	virtual void async_MoveJobBack(IClientSMCJobRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCJobRequest * createMoveJobDownRequest()=0;
	virtual IClientSMCJobResponse * MoveJobDown(IClientSMCJobRequest *request)=0;
	virtual void async_MoveJobDown(IClientSMCJobRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCJobRequest * createMoveJobFrontRequest()=0;
	virtual IClientSMCJobResponse * MoveJobFront(IClientSMCJobRequest *request)=0;
	virtual void async_MoveJobFront(IClientSMCJobRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCJobRequest * createMoveJobUpRequest()=0;
	virtual IClientSMCJobResponse * MoveJobUp(IClientSMCJobRequest *request)=0;
	virtual void async_MoveJobUp(IClientSMCJobRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientNotInCommunityEditionRequest * createNotInCommunityEditionRequest()=0;
	virtual IClientNotInCommunityEditionResponse * NotInCommunityEdition(IClientNotInCommunityEditionRequest *request)=0;
	virtual void async_NotInCommunityEdition(IClientNotInCommunityEditionRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCQueueRequest * createPauseQueueRequest()=0;
	virtual IClientSMCQueueResponse * PauseQueue(IClientSMCQueueRequest *request)=0;
	virtual void async_PauseQueue(IClientSMCQueueRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientWsSMCPingRequest * createPingRequest()=0;
	virtual IClientWsSMCPingResponse * Ping(IClientWsSMCPingRequest *request)=0;
	virtual void async_Ping(IClientWsSMCPingRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCJobRequest * createRemoveJobRequest()=0;
	virtual IClientSMCJobResponse * RemoveJob(IClientSMCJobRequest *request)=0;
	virtual void async_RemoveJob(IClientSMCJobRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCQueueRequest * createResumeQueueRequest()=0;
	virtual IClientSMCQueueResponse * ResumeQueue(IClientSMCQueueRequest *request)=0;
	virtual void async_ResumeQueue(IClientSMCQueueRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientRoxieControlCmdRequest * createRoxieControlCmdRequest()=0;
	virtual IClientRoxieControlCmdResponse * RoxieControlCmd(IClientRoxieControlCmdRequest *request)=0;
	virtual void async_RoxieControlCmd(IClientRoxieControlCmdRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSetBannerRequest * createSetBannerRequest()=0;
	virtual IClientSetBannerResponse * SetBanner(IClientSetBannerRequest *request)=0;
	virtual void async_SetBanner(IClientSetBannerRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCPriorityRequest * createSetJobPriorityRequest()=0;
	virtual IClientSMCPriorityResponse * SetJobPriority(IClientSMCPriorityRequest *request)=0;
	virtual void async_SetJobPriority(IClientSMCPriorityRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;

	virtual IClientSMCQueueRequest * createStopQueueRequest()=0;
	virtual IClientSMCQueueResponse * StopQueue(IClientSMCQueueRequest *request)=0;
	virtual void async_StopQueue(IClientSMCQueueRequest *request, IClientWsSMCEvents *events,IInterface* state=0)=0;


	virtual IClientActivityResponse *ActivityFn(const char * ChatURL_, const char * BannerContent_, const char * BannerColor_, const char * BannerSize_, const char * BannerScroll_, int BannerAction_, bool EnableChatURL_, bool FromSubmitBtn_, const char * SortBy_, bool Descending_)=0;

	virtual IClientBrowseResourcesResponse *BrowseResourcesFn()=0;

	virtual IClientSMCQueueResponse *ClearQueueFn(const char * Cluster_, const char * QueueName_, const char * Comment_, const char * ServerType_, const char * NetworkAddress_, int Port_)=0;

	virtual IClientGetStatusServerInfoResponse *GetStatusServerInfoFn(const char * ServerName_, const char * ServerType_, const char * NetworkAddress_, int Port_)=0;

	virtual IClientGetThorQueueAvailabilityResponse *GetThorQueueAvailabilityFn()=0;

	virtual IClientSMCIndexResponse *IndexFn()=0;

	virtual IClientLockQueryResponse *LockQueryFn(const char * EPIP_, const char * XPath_, unsigned int DurationMSLow_, unsigned int DurationMSHigh_, const char * TimeLockedLow_, const char * TimeLockedHigh_, CLockModes Mode_, bool AllFileLocks_)=0;

	virtual IClientSMCJobResponse *MoveJobBackFn(int ClusterType_, const char * Cluster_, const char * QueueName_, const char * Wuid_)=0;

	virtual IClientSMCJobResponse *MoveJobDownFn(int ClusterType_, const char * Cluster_, const char * QueueName_, const char * Wuid_)=0;

	virtual IClientSMCJobResponse *MoveJobFrontFn(int ClusterType_, const char * Cluster_, const char * QueueName_, const char * Wuid_)=0;

	virtual IClientSMCJobResponse *MoveJobUpFn(int ClusterType_, const char * Cluster_, const char * QueueName_, const char * Wuid_)=0;

	virtual IClientNotInCommunityEditionResponse *NotInCommunityEditionFn(const char * EEPortal_)=0;

	virtual IClientSMCQueueResponse *PauseQueueFn(const char * Cluster_, const char * QueueName_, const char * Comment_, const char * ServerType_, const char * NetworkAddress_, int Port_)=0;

	virtual IClientWsSMCPingResponse *PingFn()=0;

	virtual IClientSMCJobResponse *RemoveJobFn(int ClusterType_, const char * Cluster_, const char * QueueName_, const char * Wuid_)=0;

	virtual IClientSMCQueueResponse *ResumeQueueFn(const char * Cluster_, const char * QueueName_, const char * Comment_, const char * ServerType_, const char * NetworkAddress_, int Port_)=0;

	virtual IClientRoxieControlCmdResponse *RoxieControlCmdFn(const char * ProcessCluster_, CRoxieControlCmdType Command_, int Wait_)=0;

	virtual IClientSetBannerResponse *SetBannerFn(const char * ChatURL_, const char * BannerContent_, const char * BannerColor_, const char * BannerSize_, const char * BannerScroll_, int BannerAction_, bool EnableChatURL_, bool FromSubmitBtn_)=0;

	virtual IClientSMCPriorityResponse *SetJobPriorityFn(int ClusterType_, const char * Cluster_, const char * QueueName_, const char * Wuid_, const char * Priority_, IArrayOf<IConstSMCJob> &SMCJobs_)=0;

	virtual IClientSMCQueueResponse *StopQueueFn(const char * Cluster_, const char * QueueName_, const char * Comment_, const char * ServerType_, const char * NetworkAddress_, int Port_)=0;
};



#ifndef WSSMC_API
#define WSSMC_API
#endif //WSSMC_API



extern "C" WSSMC_API IClientWsSMC * createWsSMCClient();



extern "C"  IEspActiveWorkunit *createActiveWorkunit(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientActiveWorkunit *createClientActiveWorkunit(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTargetCluster *createTargetCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTargetCluster *createClientTargetCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspThorCluster *createThorCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientThorCluster *createClientThorCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspHThorCluster *createHThorCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientHThorCluster *createClientHThorCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspRoxieCluster *createRoxieCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientRoxieCluster *createClientRoxieCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDFUJob *createDFUJob(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDFUJob *createClientDFUJob(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspServerJobQueue *createServerJobQueue(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientServerJobQueue *createClientServerJobQueue(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspStatusServerInfo *createStatusServerInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientStatusServerInfo *createClientStatusServerInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspActivityRequest *createActivityRequest(const char *serv=NULL);
extern "C"  IClientActivityRequest *createClientActivityRequest(const char *serv=NULL);
extern "C"  IEspActivityResponse *createActivityResponse(const char *serv=NULL);
extern "C"  IClientActivityResponse *createClientActivityResponse(const char *serv=NULL);
extern "C"  IEspSMCIndexRequest *createSMCIndexRequest(const char *serv=NULL);
extern "C"  IClientSMCIndexRequest *createClientSMCIndexRequest(const char *serv=NULL);
extern "C"  IEspSMCIndexResponse *createSMCIndexResponse(const char *serv=NULL);
extern "C"  IClientSMCIndexResponse *createClientSMCIndexResponse(const char *serv=NULL);
extern "C"  IEspCapability *createCapability(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientCapability *createClientCapability(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspPermission *createPermission(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientPermission *createClientPermission(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspSMCPermissionsRequest *createSMCPermissionsRequest(const char *serv=NULL);
extern "C"  IClientSMCPermissionsRequest *createClientSMCPermissionsRequest(const char *serv=NULL);
extern "C"  IEspSMCPermissionsResponse *createSMCPermissionsResponse(const char *serv=NULL);
extern "C"  IClientSMCPermissionsResponse *createClientSMCPermissionsResponse(const char *serv=NULL);
extern "C"  IEspSMCQueueRequest *createSMCQueueRequest(const char *serv=NULL);
extern "C"  IClientSMCQueueRequest *createClientSMCQueueRequest(const char *serv=NULL);
extern "C"  IEspSMCQueueResponse *createSMCQueueResponse(const char *serv=NULL);
extern "C"  IClientSMCQueueResponse *createClientSMCQueueResponse(const char *serv=NULL);
extern "C"  IEspSMCJobRequest *createSMCJobRequest(const char *serv=NULL);
extern "C"  IClientSMCJobRequest *createClientSMCJobRequest(const char *serv=NULL);
extern "C"  IEspSMCJobResponse *createSMCJobResponse(const char *serv=NULL);
extern "C"  IClientSMCJobResponse *createClientSMCJobResponse(const char *serv=NULL);
extern "C"  IEspSMCJob *createSMCJob(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientSMCJob *createClientSMCJob(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspSMCPriorityRequest *createSMCPriorityRequest(const char *serv=NULL);
extern "C"  IClientSMCPriorityRequest *createClientSMCPriorityRequest(const char *serv=NULL);
extern "C"  IEspSMCPriorityResponse *createSMCPriorityResponse(const char *serv=NULL);
extern "C"  IClientSMCPriorityResponse *createClientSMCPriorityResponse(const char *serv=NULL);
extern "C"  IEspGetThorQueueAvailabilityRequest *createGetThorQueueAvailabilityRequest(const char *serv=NULL);
extern "C"  IClientGetThorQueueAvailabilityRequest *createClientGetThorQueueAvailabilityRequest(const char *serv=NULL);
extern "C"  IEspGetThorQueueAvailabilityResponse *createGetThorQueueAvailabilityResponse(const char *serv=NULL);
extern "C"  IClientGetThorQueueAvailabilityResponse *createClientGetThorQueueAvailabilityResponse(const char *serv=NULL);
extern "C"  IEspSetBannerRequest *createSetBannerRequest(const char *serv=NULL);
extern "C"  IClientSetBannerRequest *createClientSetBannerRequest(const char *serv=NULL);
extern "C"  IEspSetBannerResponse *createSetBannerResponse(const char *serv=NULL);
extern "C"  IClientSetBannerResponse *createClientSetBannerResponse(const char *serv=NULL);
extern "C"  IEspNotInCommunityEditionRequest *createNotInCommunityEditionRequest(const char *serv=NULL);
extern "C"  IClientNotInCommunityEditionRequest *createClientNotInCommunityEditionRequest(const char *serv=NULL);
extern "C"  IEspNotInCommunityEditionResponse *createNotInCommunityEditionResponse(const char *serv=NULL);
extern "C"  IClientNotInCommunityEditionResponse *createClientNotInCommunityEditionResponse(const char *serv=NULL);
extern "C"  IEspHPCCResource *createHPCCResource(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientHPCCResource *createClientHPCCResource(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspHPCCResourceRepository *createHPCCResourceRepository(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientHPCCResourceRepository *createClientHPCCResourceRepository(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspBrowseResourcesRequest *createBrowseResourcesRequest(const char *serv=NULL);
extern "C"  IClientBrowseResourcesRequest *createClientBrowseResourcesRequest(const char *serv=NULL);
extern "C"  IEspBrowseResourcesResponse *createBrowseResourcesResponse(const char *serv=NULL);
extern "C"  IClientBrowseResourcesResponse *createClientBrowseResourcesResponse(const char *serv=NULL);
extern "C"  IEspRoxieControlCmdRequest *createRoxieControlCmdRequest(const char *serv=NULL);
extern "C"  IClientRoxieControlCmdRequest *createClientRoxieControlCmdRequest(const char *serv=NULL);
extern "C"  IEspRoxieControlEndpointInfo *createRoxieControlEndpointInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientRoxieControlEndpointInfo *createClientRoxieControlEndpointInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspRoxieControlCmdResponse *createRoxieControlCmdResponse(const char *serv=NULL);
extern "C"  IClientRoxieControlCmdResponse *createClientRoxieControlCmdResponse(const char *serv=NULL);
extern "C"  IEspGetStatusServerInfoRequest *createGetStatusServerInfoRequest(const char *serv=NULL);
extern "C"  IClientGetStatusServerInfoRequest *createClientGetStatusServerInfoRequest(const char *serv=NULL);
extern "C"  IEspGetStatusServerInfoResponse *createGetStatusServerInfoResponse(const char *serv=NULL);
extern "C"  IClientGetStatusServerInfoResponse *createClientGetStatusServerInfoResponse(const char *serv=NULL);
extern "C"  IEspLock *createLock(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientLock *createClientLock(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspLockQueryRequest *createLockQueryRequest(const char *serv=NULL);
extern "C"  IClientLockQueryRequest *createClientLockQueryRequest(const char *serv=NULL);
extern "C"  IEspLockQueryResponse *createLockQueryResponse(const char *serv=NULL);
extern "C"  IClientLockQueryResponse *createClientLockQueryResponse(const char *serv=NULL);
extern "C"  IEspWsSMCPingRequest *createWsSMCPingRequest(const char *serv=NULL);
extern "C"  IClientWsSMCPingRequest *createClientWsSMCPingRequest(const char *serv=NULL);
extern "C"  IEspWsSMCPingResponse *createWsSMCPingResponse(const char *serv=NULL);
extern "C"  IClientWsSMCPingResponse *createClientWsSMCPingResponse(const char *serv=NULL);

#endif // _ws_smc_SCM_INCL
//end
