// *** Source file generated by HIDL Version 1.3 from ecl.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#include "ecl.hpp"

// clarion interface stub for IEspInstantEclRequest 
class SCMCLWSTUB_IEspInstantEclRequest: public SCMStubBase, implements IEspInstantEclRequest // interface
	IEspInstantEclRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspInstantEclRequest(IEspInstantEclRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspInstantEclRequest() { _o.Release(); } 
	const char * _stdcall getUser()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspInstantEclRequest_getUser;
		SCMCLW_INTRO_IEspInstantEclRequest_getUser;
#endif
		char * _return;
		_return = _o.getUser();
#ifdef SCMCLW_OUTRO_IEspInstantEclRequest_getUser;
		SCMCLW_OUTRO_IEspInstantEclRequest_getUser;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getEclServer()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspInstantEclRequest_getEclServer;
		SCMCLW_INTRO_IEspInstantEclRequest_getEclServer;
#endif
		char * _return;
		_return = _o.getEclServer();
#ifdef SCMCLW_OUTRO_IEspInstantEclRequest_getEclServer;
		SCMCLW_OUTRO_IEspInstantEclRequest_getEclServer;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getCluster()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspInstantEclRequest_getCluster;
		SCMCLW_INTRO_IEspInstantEclRequest_getCluster;
#endif
		char * _return;
		_return = _o.getCluster();
#ifdef SCMCLW_OUTRO_IEspInstantEclRequest_getCluster;
		SCMCLW_OUTRO_IEspInstantEclRequest_getCluster;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getEclText()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspInstantEclRequest_getEclText;
		SCMCLW_INTRO_IEspInstantEclRequest_getEclText;
#endif
		char * _return;
		_return = _o.getEclText();
#ifdef SCMCLW_OUTRO_IEspInstantEclRequest_getEclText;
		SCMCLW_OUTRO_IEspInstantEclRequest_getEclText;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspInstantEclResp 
class SCMCLWSTUB_IEspInstantEclResp: public SCMStubBase, implements IEspInstantEclResp // interface
	IEspInstantEclResp &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspInstantEclResp(IEspInstantEclResp *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspInstantEclResp() { _o.Release(); } 
	void _stdcall setResultsXML(const char * results)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspInstantEclResp_setResultsXML;
		SCMCLW_INTRO_IEspInstantEclResp_setResultsXML;
#endif
		_o.setResultsXML(results);
#ifdef SCMCLW_OUTRO_IEspInstantEclResp_setResultsXML;
		SCMCLW_OUTRO_IEspInstantEclResp_setResultsXML;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IEspInstantEcl 
class SCMCLWSTUB_IEspInstantEcl: public SCMStubBase, implements IEspInstantEcl // interface
	IEspInstantEcl &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspInstantEcl(IEspInstantEcl *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspInstantEcl() { _o.Release(); } 
	bool _stdcall onInstantEcl(IEspContext & context, IEspInstantEclRequest & req, IEspInstantEclResp & resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspInstantEcl_onInstantEcl;
		SCMCLW_INTRO_IEspInstantEcl_onInstantEcl;
#endif
		bool _return;
		_return = _o.onInstantEcl(context, req, resp);
#ifdef SCMCLW_OUTRO_IEspInstantEcl_onInstantEcl;
		SCMCLW_OUTRO_IEspInstantEcl_onInstantEcl;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
//end
