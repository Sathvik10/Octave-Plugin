/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         eclyyparse
#define yylex           eclyylex
#define yyerror         eclyyerror
#define yydebug         eclyydebug
#define yynerrs         eclyynerrs


/* Copy the first part of user declarations.  */
#line 34 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:339  */

//The following allows the stack of shifted states to expand.  It indicates memcpy of the data is valid.
#define YYSTYPE_IS_TRIVIAL 1

#include "platform.h"
#include <stdio.h>
#include <stdlib.h>
#include "hql.hpp"
#include "jlib.hpp"
#include "jmisc.hpp"
#include "jexcept.hpp"
#include "hqlerrors.hpp"

#include "hqlgram.hpp"
#include "hqlfold.hpp"
#include "hqlpmap.hpp"
#include "hqlutil.hpp"
#include "hqlattr.hpp"
#include "hqlmeta.hpp"

#define REDEF_MSG(name)     StringBuffer msg;           \
                            msg.append(w"Identifier '"); \
                            msg.append(name.queryExpr()->queryName()->str()); \
                            msg.append("' before := ");                       \
                            msg.append(" is already defined");                 \
                            parser->reportError(ERR_ID_REDEFINE, name, msg.str())

#define REDEF_ERROR(name)                    \
                        {                    \
                            REDEF_MSG(name); \
                        }

#define REDEF_ERROR1(name,e1)                \
                        {                    \
                            REDEF_MSG(name); \
                            e1.release();    \
                        }

#define REDEF_ERROR2(name,e1,e2)             \
                        {                    \
                            REDEF_MSG(name); \
                            e1.release();    \
                            e2.release();    \
                        }

#define REDEF_ERROR3(name,e1,e2,e3)          \
                        {                    \
                            REDEF_MSG(name); \
                            e1.release();    \
                            e2.release();    \
                            e3.release();    \
                        }

inline int eclyylex(attribute * yylval, HqlGram* parser, const short int * yyssp)
{
    return parser->yyLex(yylval, yyssp);
}



static void eclsyntaxerror(HqlGram * parser, const char * s, short yystate, int token);
#define eclyyerror(parser, s) eclsyntaxerror(parser, s, yystate, yychar); if (parser->unsuppressImmediateSyntaxErrors()) yyerrok; if (parser->checkErrorCountAndAbort()) YYABORT;
#define ignoreBisonWarning(x)
#define ignoreBisonWarnings2(x,y)
#define ignoreBisonWarnings3(x,y,z)


#line 140 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "hqlgram.h".  */
#ifndef YY_ECLYY_HOME_SATHVIK_HPCC_HPCC_PLATFORM_BUILD_ECL_HQL_HQLGRAM_H_INCLUDED
# define YY_ECLYY_HOME_SATHVIK_HPCC_HPCC_PLATFORM_BUILD_ECL_HQL_HQLGRAM_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int eclyydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ABS = 258,
    ACOS = 259,
    AFTER = 260,
    AGGREGATE = 261,
    ALGORITHM = 262,
    ALIAS = 263,
    ALL = 264,
    ALLNODES = 265,
    AND = 266,
    ANY = 267,
    APPLY = 268,
    _ARRAY_ = 269,
    AS = 270,
    ASCII = 271,
    ASIN = 272,
    TOK_ASSERT = 273,
    ASSTRING = 274,
    ATAN = 275,
    ATAN2 = 276,
    ATMOST = 277,
    AVE = 278,
    BACKUP = 279,
    BEFORE = 280,
    BEST = 281,
    BETWEEN = 282,
    TOK_BITMAP = 283,
    BIG = 284,
    BLOB = 285,
    BLOOM = 286,
    BNOT = 287,
    BUILD = 288,
    CARDINALITY = 289,
    CASE = 290,
    TOK_CATCH = 291,
    CHECKPOINT = 292,
    CHOOSE = 293,
    CHOOSEN = 294,
    CHOOSENALL = 295,
    CHOOSESETS = 296,
    CLUSTER = 297,
    CLUSTERSIZE = 298,
    COGROUP = 299,
    __COMMON__ = 300,
    __COMPOUND__ = 301,
    COMBINE = 302,
    COMPRESSED = 303,
    __COMPRESSED__ = 304,
    CRITICAL = 305,
    TOK_CONST = 306,
    CORRELATION = 307,
    COS = 308,
    COSH = 309,
    COUNT = 310,
    COUNTER = 311,
    COVARIANCE = 312,
    CPPBODY = 313,
    TOK_CPP = 314,
    CRC = 315,
    CRON = 316,
    CSV = 317,
    DATASET = 318,
    __DEBUG__ = 319,
    DEDUP = 320,
    DEFAULT = 321,
    DEFINE = 322,
    DENORMALIZE = 323,
    DEPRECATED = 324,
    DESC = 325,
    DICTIONARY = 326,
    DISTRIBUTE = 327,
    DISTRIBUTED = 328,
    DISTRIBUTION = 329,
    DYNAMIC = 330,
    EBCDIC = 331,
    ECLCRC = 332,
    ELSE = 333,
    ELSEIF = 334,
    EMBED = 335,
    EMBEDDED = 336,
    _EMPTY_ = 337,
    ENCODING = 338,
    ENCRYPT = 339,
    ENCRYPTED = 340,
    END = 341,
    ENDCPP = 342,
    ENDEMBED = 343,
    ENTH = 344,
    ENUM = 345,
    TOK_ERROR = 346,
    ESCAPE = 347,
    EVALUATE = 348,
    EVENT = 349,
    EVENTEXTRA = 350,
    EVENTNAME = 351,
    EXCEPT = 352,
    EXCLUSIVE = 353,
    EXISTS = 354,
    EXP = 355,
    EXPIRE = 356,
    EXPORT = 357,
    EXTEND = 358,
    FAIL = 359,
    FAILCODE = 360,
    FAILMESSAGE = 361,
    FAILURE = 362,
    TOK_FALSE = 363,
    FEATURE = 364,
    FETCH = 365,
    FEW = 366,
    FILEPOSITION = 367,
    FILTERED = 368,
    FIRST = 369,
    TOK_FIXED = 370,
    FLAT = 371,
    FORMAT_ATTR = 372,
    FORWARD = 373,
    FROM = 374,
    FROMJSON = 375,
    FROMUNICODE = 376,
    FROMXML = 377,
    FULL = 378,
    FUNCTION = 379,
    GETENV = 380,
    GLOBAL = 381,
    GRAPH = 382,
    GROUP = 383,
    GROUPBY = 384,
    GROUPED = 385,
    __GROUPED__ = 386,
    GUARD = 387,
    HASH = 388,
    HASH32 = 389,
    HASH64 = 390,
    HASHMD5 = 391,
    HAVING = 392,
    HEADING = 393,
    HINT = 394,
    HTTPCALL = 395,
    HTTPHEADER = 396,
    IF = 397,
    IFF = 398,
    IFBLOCK = 399,
    TOK_IGNORE = 400,
    IMPLEMENTS = 401,
    IMPORT = 402,
    INDEPENDENT = 403,
    INLINE = 404,
    TOK_IN = 405,
    INNER = 406,
    INTERFACE = 407,
    INTERNAL = 408,
    INTFORMAT = 409,
    ISNULL = 410,
    ISVALID = 411,
    ITERATE = 412,
    JOIN = 413,
    JOINED = 414,
    JSON_TOKEN = 415,
    KEEP = 416,
    KEYDIFF = 417,
    KEYED = 418,
    KEYPATCH = 419,
    KEYUNICODE = 420,
    LABEL = 421,
    LABELED = 422,
    LAST = 423,
    LEFT = 424,
    LENGTH = 425,
    LIBRARY = 426,
    LIKELY = 427,
    LIMIT = 428,
    LINKCOUNTED = 429,
    LITERAL = 430,
    LITTLE = 431,
    LN = 432,
    LOADXML = 433,
    LOCAL = 434,
    LOCALE = 435,
    LOCALFILEPOSITION = 436,
    TOK_LOG = 437,
    LOGICALFILENAME = 438,
    LOOKUP = 439,
    LOOP = 440,
    LZW = 441,
    MANY = 442,
    MAP = 443,
    MATCHED = 444,
    MATCHLENGTH = 445,
    MATCHPOSITION = 446,
    MATCHROW = 447,
    MATCHTEXT = 448,
    MATCHUNICODE = 449,
    MATCHUTF8 = 450,
    MAX = 451,
    MAXCOUNT = 452,
    MAXLENGTH = 453,
    MAXSIZE = 454,
    MERGE = 455,
    MERGE_ATTR = 456,
    MERGEJOIN = 457,
    MIN = 458,
    MODULE = 459,
    MOFN = 460,
    MULTIPLE = 461,
    NAMED = 462,
    NAMEOF = 463,
    NAMESPACE = 464,
    NOBOUNDCHECK = 465,
    NOCASE = 466,
    NOCOMBINE = 467,
    NOCONST = 468,
    NOFOLD = 469,
    NOHOIST = 470,
    NOLOCAL = 471,
    NONEMPTY = 472,
    NOOVERWRITE = 473,
    NORMALIZE = 474,
    NOROOT = 475,
    NOSCAN = 476,
    NOSORT = 477,
    __NOSTREAMING__ = 478,
    NOT = 479,
    NOTHOR = 480,
    NOTIFY = 481,
    NOTRIM = 482,
    NOXPATH = 483,
    OF = 484,
    OMITTED = 485,
    ONCE = 486,
    ONFAIL = 487,
    ONLY = 488,
    ONWARNING = 489,
    OPT = 490,
    __OPTION__ = 491,
    OR = 492,
    ORDERED = 493,
    OUTER = 494,
    OUTPUT = 495,
    TOK_OUT = 496,
    OVERWRITE = 497,
    __OWNED__ = 498,
    PACKED = 499,
    PARALLEL = 500,
    PARSE = 501,
    PARTITION = 502,
    PARTITION_ATTR = 503,
    TOK_PATTERN = 504,
    PENALTY = 505,
    PERSIST = 506,
    PHYSICALFILENAME = 507,
    PIPE = 508,
    __PLATFORM__ = 509,
    POWER = 510,
    PREFETCH = 511,
    PRELOAD = 512,
    PRIORITY = 513,
    PRIVATE = 514,
    PROBABILITY = 515,
    PROCESS = 516,
    PROJECT = 517,
    PROXYADDRESS = 518,
    PULL = 519,
    PULLED = 520,
    QUANTILE = 521,
    QUOTE = 522,
    RANDOM = 523,
    RANGE = 524,
    RANK = 525,
    RANKED = 526,
    REALFORMAT = 527,
    RECORD = 528,
    RECORDOF = 529,
    RECOVERY = 530,
    REFRESH = 531,
    REGEXFIND = 532,
    REGEXFINDSET = 533,
    REGEXREPLACE = 534,
    REGROUP = 535,
    REJECTED = 536,
    RELATIONSHIP = 537,
    REMOTE = 538,
    REPEAT = 539,
    RESPONSE = 540,
    RETRY = 541,
    RETURN = 542,
    RIGHT = 543,
    RIGHT_NN = 544,
    ROLLUP = 545,
    ROUND = 546,
    ROUNDUP = 547,
    ROW = 548,
    ROWS = 549,
    ROWSET = 550,
    ROWDIFF = 551,
    RULE = 552,
    SAMPLE = 553,
    SCAN = 554,
    SCORE = 555,
    SECTION = 556,
    SELF = 557,
    SEPARATOR = 558,
    __SEQUENCE__ = 559,
    SEQUENTIAL = 560,
    SERVICE = 561,
    SET = 562,
    SHARED = 563,
    SIMPLE_TYPE = 564,
    __SIMPLIFIED__ = 565,
    SIN = 566,
    SINGLE = 567,
    SINH = 568,
    SIZEOF = 569,
    SKEW = 570,
    SKIP = 571,
    SMART = 572,
    SOAPACTION = 573,
    SOAPCALL = 574,
    SORT = 575,
    SORTED = 576,
    SQL = 577,
    SQRT = 578,
    STABLE = 579,
    __STAND_ALONE__ = 580,
    STEPPED = 581,
    STORED = 582,
    STREAMED = 583,
    SUBSORT = 584,
    SUCCESS = 585,
    SUM = 586,
    SWAPPED = 587,
    TABLE = 588,
    TAN = 589,
    TANH = 590,
    __TARGET_PLATFORM__ = 591,
    TERMINATOR = 592,
    THEN = 593,
    THISNODE = 594,
    THOR = 595,
    THRESHOLD = 596,
    TIMEOUT = 597,
    TIMELIMIT = 598,
    TOKEN = 599,
    TOJSON = 600,
    TOPN = 601,
    TOUNICODE = 602,
    TOXML = 603,
    TRACE = 604,
    TRANSFER = 605,
    TRANSFORM = 606,
    TRIM = 607,
    TRUNCATE = 608,
    TOK_TRUE = 609,
    TYPE = 610,
    TYPEOF = 611,
    UNICODEORDER = 612,
    UNGROUP = 613,
    UNLIKELY = 614,
    UNORDERED = 615,
    UNSIGNED = 616,
    UNSORTED = 617,
    UNSTABLE = 618,
    UPDATE = 619,
    USE = 620,
    VALIDATE = 621,
    VARIANCE = 622,
    VIRTUAL = 623,
    VOLATILE = 624,
    WAIT = 625,
    TOK_WARNING = 626,
    WHEN = 627,
    WHICH = 628,
    WHITESPACE = 629,
    WIDTH = 630,
    WILD = 631,
    WITHIN = 632,
    WHOLE = 633,
    WORKUNIT = 634,
    XML_TOKEN = 635,
    XMLDECODE = 636,
    XMLDEFAULT = 637,
    XMLENCODE = 638,
    XMLNS = 639,
    XMLPROJECT = 640,
    XMLTEXT = 641,
    XMLUNICODE = 642,
    XPATH = 643,
    FIELD_REF = 644,
    FIELDS_REF = 645,
    ANDAND = 646,
    EQ = 647,
    NE = 648,
    LE = 649,
    LT = 650,
    GE = 651,
    GT = 652,
    ORDER = 653,
    ASSIGN = 654,
    GOESTO = 655,
    DOTDOT = 656,
    DIV = 657,
    SHIFTL = 658,
    SHIFTR = 659,
    DATAROW_ID = 660,
    DATASET_ID = 661,
    DICTIONARY_ID = 662,
    SCOPE_ID = 663,
    VALUE_ID = 664,
    VALUE_ID_REF = 665,
    ACTION_ID = 666,
    UNKNOWN_ID = 667,
    RECORD_ID = 668,
    ALIEN_ID = 669,
    TRANSFORM_ID = 670,
    PATTERN_ID = 671,
    FEATURE_ID = 672,
    EVENT_ID = 673,
    ENUM_ID = 674,
    LIST_DATASET_ID = 675,
    SORTLIST_ID = 676,
    TYPE_ID = 677,
    SET_TYPE_ID = 678,
    PATTERN_TYPE_ID = 679,
    DATASET_TYPE_ID = 680,
    DICTIONARY_TYPE_ID = 681,
    DATAROW_FUNCTION = 682,
    DATASET_FUNCTION = 683,
    DICTIONARY_FUNCTION = 684,
    VALUE_FUNCTION = 685,
    ACTION_FUNCTION = 686,
    PATTERN_FUNCTION = 687,
    RECORD_FUNCTION = 688,
    EVENT_FUNCTION = 689,
    SCOPE_FUNCTION = 690,
    TRANSFORM_FUNCTION = 691,
    LIST_DATASET_FUNCTION = 692,
    VALUE_MACRO = 693,
    DEFINITIONS_MACRO = 694,
    BOOL_CONST = 695,
    INTEGER_CONST = 696,
    STRING_CONST = 697,
    DATA_CONST = 698,
    REAL_CONST = 699,
    UNICODE_CONST = 700,
    TYPE_LPAREN = 701,
    TYPE_RPAREN = 702,
    MACRO = 703,
    COMPLEX_MACRO = 704,
    ENDMACRO = 705,
    SKIPPED = 706,
    HASHEND = 707,
    HASHELIF = 708,
    HASHBREAK = 709,
    INDEX = 710,
    HASH_CONSTANT = 711,
    HASH_OPTION = 712,
    HASH_WORKUNIT = 713,
    HASH_STORED = 714,
    HASH_LINK = 715,
    HASH_ONWARNING = 716,
    HASH_WEBSERVICE = 717,
    INTERNAL_READ_NEXT_TOKEN = 718,
    YY_LAST_TOKEN = 719,
    LOWEST_PRECEDENCE = 720,
    reduceAttrib = 721,
    HIGHEST_PRECEDENCE = 722
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef int YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int eclyyparse (HqlGram* parser);

#endif /* !YY_ECLYY_HOME_SATHVIK_HPCC_HPCC_PLATFORM_BUILD_ECL_HQL_HQLGRAM_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 658 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  783
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   118240

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  489
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  536
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2185
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  5721

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   722

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   481,   471,   474,     2,
     476,   482,   469,   467,   480,   468,   475,   470,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   483,   479,
       2,     2,     2,   488,   487,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   477,     2,   484,   473,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   485,   472,   486,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   478
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   618,   618,   619,   623,   624,   626,   631,   633,   635,
     638,   643,   648,   650,   655,   660,   662,   667,   671,   675,
     680,   685,   690,   695,   700,   712,   721,   726,   734,   738,
     741,   744,   747,   751,   758,   759,   760,   761,   762,   767,
     771,   772,   780,   785,   796,   801,   807,   814,   819,   823,
     828,   835,   841,   845,   846,   855,   860,   870,   875,   883,
     884,   889,   896,   905,   911,   921,   928,   929,   930,   931,
     937,   938,   948,   952,   956,   963,   964,   968,   969,   970,
     976,   977,   978,   979,   980,   981,   982,   983,   984,   985,
     986,   987,   988,   995,   996,   997,   998,   999,  1004,  1011,
    1018,  1028,  1029,  1030,  1031,  1032,  1038,  1039,  1043,  1050,
    1064,  1084,  1088,  1097,  1103,  1111,  1123,  1131,  1139,  1146,
    1155,  1162,  1166,  1175,  1181,  1191,  1193,  1197,  1198,  1202,
    1203,  1214,  1219,  1223,  1227,  1232,  1239,  1240,  1244,  1257,
    1261,  1268,  1276,  1281,  1286,  1291,  1296,  1301,  1310,  1317,
    1328,  1329,  1330,  1334,  1335,  1336,  1337,  1338,  1339,  1340,
    1341,  1342,  1343,  1344,  1345,  1346,  1350,  1351,  1352,  1353,
    1354,  1355,  1356,  1357,  1358,  1367,  1368,  1369,  1370,  1371,
    1377,  1381,  1389,  1393,  1401,  1408,  1415,  1423,  1430,  1440,
    1442,  1446,  1447,  1451,  1452,  1458,  1465,  1470,  1479,  1492,
    1493,  1500,  1501,  1506,  1511,  1512,  1516,  1526,  1532,  1537,
    1543,  1549,  1554,  1559,  1564,  1576,  1585,  1590,  1591,  1595,
    1599,  1603,  1604,  1614,  1618,  1622,  1626,  1631,  1636,  1642,
    1647,  1652,  1657,  1663,  1668,  1673,  1678,  1683,  1687,  1691,
    1696,  1700,  1704,  1708,  1712,  1716,  1720,  1728,  1733,  1738,
    1742,  1749,  1750,  1751,  1752,  1753,  1757,  1758,  1764,  1765,
    1772,  1773,  1774,  1775,  1780,  1781,  1782,  1787,  1795,  1798,
    1807,  1808,  1812,  1813,  1820,  1821,  1822,  1826,  1827,  1828,
    1832,  1833,  1840,  1841,  1848,  1849,  1857,  1858,  1862,  1863,
    1870,  1871,  1875,  1876,  1883,  1887,  1888,  1898,  1903,  1912,
    1913,  1919,  1918,  1926,  1931,  1937,  1942,  1947,  1957,  1967,
    1983,  1987,  1993,  1995,  2003,  2010,  2011,  2012,  2019,  2025,
    2027,  2031,  2032,  2033,  2037,  2038,  2043,  2044,  2045,  2049,
    2064,  2072,  2076,  2077,  2079,  2091,  2101,  2109,  2124,  2144,
    2149,  2154,  2159,  2167,  2171,  2181,  2182,  2189,  2202,  2212,
    2218,  2224,  2230,  2239,  2240,  2247,  2257,  2262,  2265,  2270,
    2278,  2284,  2292,  2303,  2309,  2314,  2315,  2321,  2320,  2332,
    2333,  2337,  2342,  2350,  2355,  2363,  2364,  2368,  2373,  2380,
    2381,  2387,  2393,  2397,  2402,  2407,  2412,  2417,  2457,  2493,
    2510,  2522,  2535,  2546,  2554,  2558,  2562,  2566,  2570,  2578,
    2586,  2597,  2608,  2618,  2622,  2626,  2633,  2641,  2645,  2650,
    2654,  2658,  2662,  2663,  2669,  2675,  2681,  2688,  2695,  2701,
    2707,  2714,  2721,  2728,  2735,  2750,  2762,  2768,  2772,  2776,
    2782,  2788,  2792,  2800,  2801,  2806,  2818,  2825,  2833,  2840,
    2846,  2856,  2863,  2870,  2875,  2879,  2884,  2895,  2896,  2904,
    2910,  2920,  2921,  2926,  2934,  2938,  2939,  2943,  2944,  2952,
    2953,  2954,  2955,  2961,  2969,  2970,  2971,  2984,  2988,  2989,
    2994,  2998,  3002,  3006,  3007,  3008,  3009,  3013,  3017,  3021,
    3022,  3027,  3034,  3038,  3044,  3049,  3053,  3057,  3061,  3066,
    3070,  3074,  3081,  3092,  3108,  3115,  3119,  3120,  3128,  3132,
    3139,  3140,  3148,  3149,  3150,  3154,  3164,  3165,  3172,  3177,
    3187,  3188,  3192,  3197,  3205,  3210,  3216,  3221,  3225,  3232,
    3236,  3240,  3245,  3249,  3254,  3259,  3265,  3270,  3276,  3284,
    3285,  3290,  3298,  3305,  3309,  3318,  3319,  3323,  3324,  3329,
    3333,  3337,  3338,  3343,  3344,  3349,  3350,  3351,  3358,  3359,
    3360,  3361,  3365,  3369,  3373,  3377,  3383,  3388,  3393,  3398,
    3402,  3406,  3411,  3412,  3413,  3417,  3421,  3426,  3434,  3435,
    3439,  3440,  3445,  3448,  3452,  3459,  3463,  3467,  3471,  3475,
    3479,  3483,  3487,  3491,  3497,  3501,  3507,  3510,  3511,  3517,
    3518,  3523,  3524,  3529,  3536,  3542,  3546,  3552,  3556,  3563,
    3564,  3569,  3577,  3583,  3591,  3595,  3601,  3607,  3613,  3619,
    3620,  3625,  3629,  3635,  3644,  3653,  3659,  3665,  3671,  3678,
    3682,  3683,  3687,  3695,  3700,  3708,  3718,  3723,  3732,  3737,
    3746,  3747,  3754,  3755,  3763,  3767,  3774,  3780,  3784,  3790,
    3794,  3798,  3802,  3806,  3810,  3814,  3815,  3824,  3825,  3832,
    3835,  3842,  3843,  3851,  3858,  3865,  3869,  3870,  3878,  3882,
    3886,  3887,  3891,  3892,  3899,  3903,  3910,  3911,  3918,  3917,
    3926,  3931,  3942,  3949,  3956,  3957,  3964,  3963,  3972,  3980,
    3981,  3989,  3990,  3994,  3998,  4000,  4005,  4006,  4013,  4014,
    4018,  4023,  4031,  4032,  4033,  4035,  4039,  4043,  4044,  4049,
    4054,  4059,  4065,  4073,  4078,  4084,  4089,  4095,  4103,  4104,
    4108,  4116,  4121,  4125,  4126,  4130,  4131,  4135,  4139,  4146,
    4154,  4155,  4159,  4167,  4178,  4179,  4183,  4184,  4189,  4194,
    4199,  4201,  4205,  4212,  4217,  4218,  4219,  4220,  4221,  4222,
    4224,  4230,  4234,  4234,  4244,  4251,  4259,  4266,  4274,  4281,
    4289,  4296,  4303,  4304,  4314,  4323,  4333,  4342,  4351,  4361,
    4370,  4379,  4398,  4404,  4410,  4416,  4422,  4427,  4433,  4441,
    4450,  4459,  4463,  4472,  4476,  4483,  4493,  4499,  4507,  4518,
    4524,  4530,  4538,  4547,  4548,  4552,  4556,  4562,  4563,  4566,
    4568,  4569,  4570,  4574,  4575,  4576,  4580,  4584,  4588,  4607,
    4627,  4640,  4649,  4660,  4669,  4689,  4697,  4703,  4709,  4715,
    4721,  4726,  4733,  4737,  4742,  4746,  4747,  4750,  4770,  4771,
    4772,  4777,  4778,  4783,  4787,  4792,  4797,  4802,  4807,  4812,
    4817,  4822,  4826,  4830,  4834,  4838,  4842,  4848,  4852,  4857,
    4864,  4872,  4877,  4882,  4889,  4894,  4901,  4911,  4920,  4921,
    4930,  4931,  4939,  4941,  4945,  4947,  4953,  4958,  4962,  4966,
    4970,  4977,  4981,  4985,  4989,  4993,  4997,  4998,  5002,  5018,
    5046,  5065,  5084,  5091,  5099,  5119,  5125,  5135,  5141,  5151,
    5157,  5168,  5174,  5185,  5191,  5203,  5204,  5211,  5217,  5223,
    5229,  5239,  5240,  5248,  5249,  5250,  5258,  5292,  5310,  5324,
    5336,  5347,  5363,  5364,  5368,  5369,  5373,  5374,  5382,  5389,
    5396,  5397,  5405,  5416,  5417,  5421,  5422,  5426,  5429,  5433,
    5437,  5445,  5446,  5454,  5462,  5463,  5477,  5484,  5500,  5510,
    5515,  5522,  5532,  5540,  5548,  5556,  5566,  5576,  5587,  5598,
    5608,  5618,  5622,  5626,  5630,  5634,  5639,  5640,  5641,  5642,
    5643,  5644,  5648,  5649,  5704,  5708,  5715,  5719,  5727,  5735,
    5745,  5754,  5763,  5779,  5794,  5813,  5817,  5825,  5836,  5844,
    5849,  5855,  5864,  5865,  5875,  5881,  5886,  5893,  5900,  5912,
    5913,  5929,  5936,  5938,  5944,  5948,  5952,  5959,  5963,  5972,
    5976,  5981,  5985,  5995,  6008,  6019,  6025,  6031,  6036,  6043,
    6050,  6057,  6064,  6071,  6075,  6080,  6085,  6090,  6095,  6100,
    6105,  6110,  6115,  6121,  6126,  6131,  6136,  6143,  6148,  6154,
    6158,  6164,  6170,  6176,  6181,  6187,  6192,  6199,  6205,  6211,
    6217,  6223,  6229,  6251,  6263,  6268,  6273,  6282,  6299,  6316,
    6334,  6340,  6350,  6355,  6360,  6366,  6372,  6378,  6384,  6391,
    6399,  6407,  6412,  6417,  6422,  6427,  6433,  6439,  6445,  6451,
    6455,  6459,  6469,  6477,  6482,  6488,  6494,  6498,  6501,  6506,
    6511,  6520,  6521,  6522,  6523,  6524,  6529,  6530,  6531,  6532,
    6534,  6539,  6545,  6550,  6553,  6560,  6567,  6572,  6577,  6583,
    6590,  6596,  6606,  6613,  6624,  6628,  6632,  6636,  6640,  6644,
    6648,  6652,  6656,  6660,  6664,  6668,  6672,  6676,  6680,  6684,
    6688,  6692,  6696,  6700,  6704,  6710,  6716,  6722,  6727,  6732,
    6737,  6741,  6742,  6748,  6754,  6760,  6766,  6772,  6778,  6784,
    6792,  6799,  6806,  6816,  6822,  6827,  6832,  6847,  6854,  6861,
    6868,  6874,  6883,  6891,  6898,  6905,  6911,  6915,  6923,  6935,
    6944,  6957,  6962,  6975,  6980,  6987,  6991,  6995,  7003,  7008,
    7014,  7018,  7022,  7026,  7031,  7038,  7039,  7043,  7053,  7052,
    7076,  7077,  7078,  7082,  7087,  7088,  7089,  7090,  7091,  7102,
    7106,  7110,  7117,  7118,  7122,  7130,  7137,  7148,  7149,  7153,
    7154,  7158,  7159,  7163,  7164,  7168,  7169,  7176,  7177,  7178,
    7179,  7183,  7188,  7189,  7193,  7200,  7207,  7211,  7219,  7223,
    7229,  7234,  7238,  7243,  7258,  7265,  7267,  7266,  7281,  7300,
    7305,  7316,  7315,  7333,  7339,  7353,  7362,  7363,  7371,  7372,
    7381,  7395,  7401,  7405,  7406,  7423,  7428,  7432,  7438,  7437,
    7448,  7449,  7459,  7460,  7464,  7472,  7480,  7485,  7491,  7497,
    7503,  7502,  7510,  7511,  7516,  7522,  7530,  7531,  7534,  7537,
    7555,  7559,  7563,  7570,  7576,  7584,  7592,  7599,  7608,  7615,
    7623,  7629,  7637,  7641,  7647,  7654,  7660,  7667,  7671,  7676,
    7682,  7687,  7692,  7697,  7702,  7707,  7712,  7717,  7727,  7732,
    7738,  7749,  7757,  7765,  7773,  7785,  7803,  7804,  7809,  7810,
    7815,  7820,  7825,  7829,  7841,  7846,  7853,  7861,  7865,  7870,
    7875,  7880,  7885,  7899,  7917,  7934,  7955,  7965,  7972,  7979,
    8007,  8008,  8017,  8018,  8031,  8030,  8041,  8042,  8050,  8051,
    8056,  8062,  8069,  8070,  8075,  8106,  8108,  8110,  8112,  8114,
    8116,  8118,  8120,  8122,  8124,  8126,  8128,  8130,  8143,  8150,
    8160,  8161,  8169,  8173,  8177,  8192,  8207,  8215,  8220,  8245,
    8267,  8280,  8285,  8296,  8322,  8337,  8343,  8348,  8359,  8407,
    8421,  8439,  8454,  8467,  8478,  8514,  8521,  8530,  8538,  8546,
    8562,  8579,  8597,  8612,  8618,  8632,  8647,  8677,  8722,  8750,
    8759,  8769,  8777,  8782,  8787,  8805,  8817,  8822,  8827,  8832,
    8837,  8847,  8871,  8881,  8891,  8897,  8903,  8912,  8919,  8926,
    8932,  8957,  8963,  8967,  8978,  8990,  9024,  9036,  9063,  9098,
    9142,  9161,  9169,  9178,  9189,  9205,  9219,  9228,  9234,  9241,
    9249,  9259,  9272,  9285,  9290,  9296,  9303,  9329,  9336,  9344,
    9351,  9362,  9372,  9376,  9381,  9386,  9391,  9396,  9406,  9421,
    9436,  9455,  9465,  9497,  9507,  9517,  9524,  9531,  9537,  9544,
    9550,  9557,  9563,  9571,  9580,  9587,  9595,  9603,  9612,  9619,
    9627,  9632,  9638,  9643,  9648,  9662,  9667,  9673,  9678,  9684,
    9697,  9702,  9709,  9718,  9724,  9729,  9736,  9740,  9745,  9749,
    9753,  9757,  9761,  9774,  9786,  9794,  9795,  9803,  9804,  9812,
    9813,  9814,  9818,  9828,  9829,  9837,  9838,  9839,  9850,  9853,
    9857,  9861,  9865,  9873,  9876,  9880,  9884,  9891,  9895,  9899,
    9904,  9908,  9913,  9914,  9918,  9919,  9926,  9927,  9928,  9929,
    9934,  9935,  9939,  9940,  9945,  9949,  9950,  9957,  9958,  9959,
    9967,  9972,  9978,  9987,  9990,  9997,  9998, 10002, 10005, 10012,
   10017, 10020, 10029, 10032, 10039, 10046, 10047, 10054, 10059, 10063,
   10068, 10072, 10073, 10078, 10079, 10087, 10088, 10092, 10099, 10106,
   10115, 10116, 10125, 10127, 10131, 10136, 10143, 10149, 10160, 10179,
   10199, 10219, 10220, 10227, 10233, 10239, 10248, 10249, 10250, 10256,
   10257, 10258, 10264, 10265, 10281, 10282, 10298, 10302, 10303, 10304,
   10305, 10306, 10307, 10308, 10309, 10310, 10311, 10313, 10319, 10324,
   10326, 10328, 10330, 10337, 10341, 10348, 10349, 10354, 10355, 10359,
   10363, 10372, 10373, 10383, 10384, 10389, 10393, 10397, 10404, 10409,
   10418, 10423, 10428, 10434, 10440, 10446, 10452, 10458, 10466, 10467,
   10474, 10475, 10476, 10481, 10489, 10490, 10495, 10499, 10503, 10504,
   10512, 10517, 10521, 10528, 10529, 10532, 10533, 10538, 10539, 10540,
   10544, 10545, 10549, 10552, 10558, 10561, 10567, 10568, 10572, 10573,
   10578, 10582, 10590, 10591, 10592, 10597, 10609, 10612, 10616, 10621,
   10630, 10631, 10639, 10644, 10645, 10653, 10658, 10659, 10660, 10661,
   10670, 10677, 10685, 10686, 10687, 10691, 10692, 10696, 10707, 10709,
   10711, 10713, 10718, 10723, 10731, 10732, 10736, 10737, 10742, 10743,
   10744, 10745, 10746, 10747, 10748, 10749, 10750, 10751, 10752, 10753,
   10757, 10765, 10770, 10775, 10776, 10777, 10778, 10779, 10780, 10781,
   10782, 10784, 10786, 10792, 10799, 10806, 10812, 10818, 10823, 10828,
   10834, 10835, 10836, 10854, 10855, 10860, 10869, 10874, 10875, 10880,
   10881, 10882, 10883, 10892, 10893, 10901, 10907, 10914, 10919, 10924,
   10929, 10934, 10941, 10947, 10954, 10958, 10963, 10979, 10980, 10988,
   10989, 10993, 10998, 11002, 11012, 11013, 11017, 11018, 11023, 11027,
   11028, 11029, 11030, 11034, 11035, 11039, 11040, 11044, 11045, 11050,
   11054, 11058, 11062, 11067, 11077, 11081, 11082, 11087, 11088, 11089,
   11090, 11091, 11092, 11093, 11094, 11095, 11097, 11104, 11109, 11114,
   11118, 11122, 11123, 11124, 11128, 11129, 11130, 11131, 11132, 11133,
   11135, 11136, 11137, 11138, 11143, 11148, 11152, 11153, 11158, 11159,
   11167, 11173, 11177, 11184, 11188, 11192, 11196, 11205, 11214, 11223,
   11233, 11245, 11245, 11256, 11256, 11266, 11270, 11278, 11285, 11294,
   11302, 11312, 11321, 11328, 11335, 11342, 11349, 11353, 11357, 11361,
   11365, 11369, 11370, 11383, 11382, 11393, 11394, 11403, 11404, 11414,
   11424, 11428, 11436, 11437, 11449, 11455, 11454, 11466, 11470, 11471,
   11475, 11479, 11483, 11487, 11493, 11499, 11516, 11521, 11527, 11528,
   11529, 11531, 11532, 11533, 11534, 11535, 11536, 11537, 11541, 11542,
   11547, 11548, 11553, 11554, 11555, 11560, 11561, 11566, 11567, 11572,
   11573, 11578, 11579, 11580, 11588, 11589, 11594, 11602, 11603, 11608,
   11616, 11617, 11622, 11630, 11631, 11636, 11644, 11645, 11650, 11658,
   11659, 11664, 11673, 11674, 11679, 11688, 11689, 11694, 11702, 11703,
   11708, 11717, 11718, 11723, 11733, 11739, 11740, 11749, 11753, 11754,
   11758, 11768, 11769, 11770, 11774, 11779, 11784, 11792, 11797, 11802,
   11810, 11830, 11831, 11841, 11845, 11846, 11847, 11851, 11852, 11853,
   11854, 11855, 11856, 11857, 11858, 11862, 11874, 11879, 11880, 11881,
   11885, 11886, 11887, 11893, 11894, 11899, 11903, 11907, 11911, 11918,
   11919, 11923, 11924, 11929, 11933, 11934, 11941, 11942, 11943, 11948,
   11949, 11950, 11960, 11961, 11971, 11975, 11976, 11981, 11982, 11988,
   11989, 11990, 11995, 11996, 12000, 12004, 12010, 12011, 12019, 12031,
   12038, 12048, 12057, 12058, 12062, 12077, 12078, 12086, 12095, 12096,
   12104, 12113, 12114, 12118, 12130, 12131, 12135, 12147, 12148, 12156,
   12165, 12166, 12170, 12182, 12183, 12190, 12199, 12200, 12204, 12216,
   12217, 12218, 12219, 12220, 12221, 12224, 12227, 12231, 12235, 12236,
   12241, 12242, 12247, 12256, 12257, 12264, 12265, 12266, 12271, 12272,
   12279, 12294, 12303, 12313, 12322, 12327, 12337, 12347, 12355, 12356,
   12361, 12362, 12369, 12376, 12381, 12386, 12393, 12400, 12407, 12414,
   12420, 12431, 12432, 12433, 12442, 12452, 12462, 12473, 12485, 12493,
   12501, 12515, 12526, 12527, 12532, 12536, 12552, 12559, 12569, 12575,
   12580, 12581, 12590, 12595, 12603, 12610, 12616, 12625, 12633, 12639,
   12645, 12649, 12654, 12662, 12663, 12674, 12680, 12679, 12691, 12698,
   12706, 12713, 12714, 12718, 12721, 12725, 12729, 12734, 12742, 12743,
   12751, 12752, 12755, 12757, 12761, 12765, 12773, 12774, 12782, 12783,
   12793, 12794, 12803, 12804, 12812, 12813, 12824, 12829, 12837, 12847,
   12849, 12854, 12855, 12862, 12865, 12869, 12870, 12877, 12878, 12885,
   12886, 12893, 12899, 12905, 12911, 12917, 12927, 12928, 12937, 12938,
   12942, 12943, 12951, 12960, 12961, 12962
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABS", "ACOS", "AFTER", "AGGREGATE",
  "ALGORITHM", "ALIAS", "ALL", "ALLNODES", "AND", "ANY", "APPLY",
  "_ARRAY_", "AS", "ASCII", "ASIN", "TOK_ASSERT", "ASSTRING", "ATAN",
  "ATAN2", "ATMOST", "AVE", "BACKUP", "BEFORE", "BEST", "BETWEEN",
  "TOK_BITMAP", "BIG", "BLOB", "BLOOM", "BNOT", "BUILD", "CARDINALITY",
  "CASE", "TOK_CATCH", "CHECKPOINT", "CHOOSE", "CHOOSEN", "CHOOSENALL",
  "CHOOSESETS", "CLUSTER", "CLUSTERSIZE", "COGROUP", "__COMMON__",
  "__COMPOUND__", "COMBINE", "COMPRESSED", "__COMPRESSED__", "CRITICAL",
  "TOK_CONST", "CORRELATION", "COS", "COSH", "COUNT", "COUNTER",
  "COVARIANCE", "CPPBODY", "TOK_CPP", "CRC", "CRON", "CSV", "DATASET",
  "__DEBUG__", "DEDUP", "DEFAULT", "DEFINE", "DENORMALIZE", "DEPRECATED",
  "DESC", "DICTIONARY", "DISTRIBUTE", "DISTRIBUTED", "DISTRIBUTION",
  "DYNAMIC", "EBCDIC", "ECLCRC", "ELSE", "ELSEIF", "EMBED", "EMBEDDED",
  "_EMPTY_", "ENCODING", "ENCRYPT", "ENCRYPTED", "END", "ENDCPP",
  "ENDEMBED", "ENTH", "ENUM", "TOK_ERROR", "ESCAPE", "EVALUATE", "EVENT",
  "EVENTEXTRA", "EVENTNAME", "EXCEPT", "EXCLUSIVE", "EXISTS", "EXP",
  "EXPIRE", "EXPORT", "EXTEND", "FAIL", "FAILCODE", "FAILMESSAGE",
  "FAILURE", "TOK_FALSE", "FEATURE", "FETCH", "FEW", "FILEPOSITION",
  "FILTERED", "FIRST", "TOK_FIXED", "FLAT", "FORMAT_ATTR", "FORWARD",
  "FROM", "FROMJSON", "FROMUNICODE", "FROMXML", "FULL", "FUNCTION",
  "GETENV", "GLOBAL", "GRAPH", "GROUP", "GROUPBY", "GROUPED",
  "__GROUPED__", "GUARD", "HASH", "HASH32", "HASH64", "HASHMD5", "HAVING",
  "HEADING", "HINT", "HTTPCALL", "HTTPHEADER", "IF", "IFF", "IFBLOCK",
  "TOK_IGNORE", "IMPLEMENTS", "IMPORT", "INDEPENDENT", "INLINE", "TOK_IN",
  "INNER", "INTERFACE", "INTERNAL", "INTFORMAT", "ISNULL", "ISVALID",
  "ITERATE", "JOIN", "JOINED", "JSON_TOKEN", "KEEP", "KEYDIFF", "KEYED",
  "KEYPATCH", "KEYUNICODE", "LABEL", "LABELED", "LAST", "LEFT", "LENGTH",
  "LIBRARY", "LIKELY", "LIMIT", "LINKCOUNTED", "LITERAL", "LITTLE", "LN",
  "LOADXML", "LOCAL", "LOCALE", "LOCALFILEPOSITION", "TOK_LOG",
  "LOGICALFILENAME", "LOOKUP", "LOOP", "LZW", "MANY", "MAP", "MATCHED",
  "MATCHLENGTH", "MATCHPOSITION", "MATCHROW", "MATCHTEXT", "MATCHUNICODE",
  "MATCHUTF8", "MAX", "MAXCOUNT", "MAXLENGTH", "MAXSIZE", "MERGE",
  "MERGE_ATTR", "MERGEJOIN", "MIN", "MODULE", "MOFN", "MULTIPLE", "NAMED",
  "NAMEOF", "NAMESPACE", "NOBOUNDCHECK", "NOCASE", "NOCOMBINE", "NOCONST",
  "NOFOLD", "NOHOIST", "NOLOCAL", "NONEMPTY", "NOOVERWRITE", "NORMALIZE",
  "NOROOT", "NOSCAN", "NOSORT", "__NOSTREAMING__", "NOT", "NOTHOR",
  "NOTIFY", "NOTRIM", "NOXPATH", "OF", "OMITTED", "ONCE", "ONFAIL", "ONLY",
  "ONWARNING", "OPT", "__OPTION__", "OR", "ORDERED", "OUTER", "OUTPUT",
  "TOK_OUT", "OVERWRITE", "__OWNED__", "PACKED", "PARALLEL", "PARSE",
  "PARTITION", "PARTITION_ATTR", "TOK_PATTERN", "PENALTY", "PERSIST",
  "PHYSICALFILENAME", "PIPE", "__PLATFORM__", "POWER", "PREFETCH",
  "PRELOAD", "PRIORITY", "PRIVATE", "PROBABILITY", "PROCESS", "PROJECT",
  "PROXYADDRESS", "PULL", "PULLED", "QUANTILE", "QUOTE", "RANDOM", "RANGE",
  "RANK", "RANKED", "REALFORMAT", "RECORD", "RECORDOF", "RECOVERY",
  "REFRESH", "REGEXFIND", "REGEXFINDSET", "REGEXREPLACE", "REGROUP",
  "REJECTED", "RELATIONSHIP", "REMOTE", "REPEAT", "RESPONSE", "RETRY",
  "RETURN", "RIGHT", "RIGHT_NN", "ROLLUP", "ROUND", "ROUNDUP", "ROW",
  "ROWS", "ROWSET", "ROWDIFF", "RULE", "SAMPLE", "SCAN", "SCORE",
  "SECTION", "SELF", "SEPARATOR", "__SEQUENCE__", "SEQUENTIAL", "SERVICE",
  "SET", "SHARED", "SIMPLE_TYPE", "__SIMPLIFIED__", "SIN", "SINGLE",
  "SINH", "SIZEOF", "SKEW", "SKIP", "SMART", "SOAPACTION", "SOAPCALL",
  "SORT", "SORTED", "SQL", "SQRT", "STABLE", "__STAND_ALONE__", "STEPPED",
  "STORED", "STREAMED", "SUBSORT", "SUCCESS", "SUM", "SWAPPED", "TABLE",
  "TAN", "TANH", "__TARGET_PLATFORM__", "TERMINATOR", "THEN", "THISNODE",
  "THOR", "THRESHOLD", "TIMEOUT", "TIMELIMIT", "TOKEN", "TOJSON", "TOPN",
  "TOUNICODE", "TOXML", "TRACE", "TRANSFER", "TRANSFORM", "TRIM",
  "TRUNCATE", "TOK_TRUE", "TYPE", "TYPEOF", "UNICODEORDER", "UNGROUP",
  "UNLIKELY", "UNORDERED", "UNSIGNED", "UNSORTED", "UNSTABLE", "UPDATE",
  "USE", "VALIDATE", "VARIANCE", "VIRTUAL", "VOLATILE", "WAIT",
  "TOK_WARNING", "WHEN", "WHICH", "WHITESPACE", "WIDTH", "WILD", "WITHIN",
  "WHOLE", "WORKUNIT", "XML_TOKEN", "XMLDECODE", "XMLDEFAULT", "XMLENCODE",
  "XMLNS", "XMLPROJECT", "XMLTEXT", "XMLUNICODE", "XPATH", "FIELD_REF",
  "FIELDS_REF", "ANDAND", "EQ", "NE", "LE", "LT", "GE", "GT", "ORDER",
  "ASSIGN", "GOESTO", "DOTDOT", "DIV", "SHIFTL", "SHIFTR", "DATAROW_ID",
  "DATASET_ID", "DICTIONARY_ID", "SCOPE_ID", "VALUE_ID", "VALUE_ID_REF",
  "ACTION_ID", "UNKNOWN_ID", "RECORD_ID", "ALIEN_ID", "TRANSFORM_ID",
  "PATTERN_ID", "FEATURE_ID", "EVENT_ID", "ENUM_ID", "LIST_DATASET_ID",
  "SORTLIST_ID", "TYPE_ID", "SET_TYPE_ID", "PATTERN_TYPE_ID",
  "DATASET_TYPE_ID", "DICTIONARY_TYPE_ID", "DATAROW_FUNCTION",
  "DATASET_FUNCTION", "DICTIONARY_FUNCTION", "VALUE_FUNCTION",
  "ACTION_FUNCTION", "PATTERN_FUNCTION", "RECORD_FUNCTION",
  "EVENT_FUNCTION", "SCOPE_FUNCTION", "TRANSFORM_FUNCTION",
  "LIST_DATASET_FUNCTION", "VALUE_MACRO", "DEFINITIONS_MACRO",
  "BOOL_CONST", "INTEGER_CONST", "STRING_CONST", "DATA_CONST",
  "REAL_CONST", "UNICODE_CONST", "TYPE_LPAREN", "TYPE_RPAREN", "MACRO",
  "COMPLEX_MACRO", "ENDMACRO", "SKIPPED", "HASHEND", "HASHELIF",
  "HASHBREAK", "INDEX", "HASH_CONSTANT", "HASH_OPTION", "HASH_WORKUNIT",
  "HASH_STORED", "HASH_LINK", "HASH_ONWARNING", "HASH_WEBSERVICE",
  "INTERNAL_READ_NEXT_TOKEN", "YY_LAST_TOKEN", "LOWEST_PRECEDENCE",
  "reduceAttrib", "'+'", "'-'", "'*'", "'/'", "'%'", "'|'", "'^'", "'&'",
  "'.'", "'('", "'['", "HIGHEST_PRECEDENCE", "';'", "','", "'$'", "')'",
  "':'", "']'", "'{'", "'}'", "'@'", "'?'", "$accept", "hqlQuery",
  "hqlQueryBody", "setActiveToExpected", "importSection", "startIMPORT",
  "endIMPORT", "importItem", "importSelectorList", "importItems",
  "importSelector", "importId", "defineType", "explicitDatasetType",
  "explicitDatasetType1", "explicitDictionaryType", "explicitRowType",
  "explicitRowType1", "transformType", "propType", "paramType",
  "patternParamType", "object", "goodObject", "goodTypeObject",
  "badObject", "macro", "embedBody", "embedPrefix", "embedCppPrefix",
  "compoundAttribute", "startCompoundAttribute", "returnAction",
  "compoundModule", "startCompoundModule", "moduleDefinitions",
  "moduleBase", "moduleOptions", "moduleOption", "abstractModuleList",
  "abstractModuleItem", "complexType", "startTYPE", "defineid",
  "knownOrUnknownId", "knownId", "knownFunction1", "scopeFlag",
  "defineidWithOptScope", "definePatternIdWithOptScope", "definePatternId",
  "optDefinitions", "definitions", "attributeDefinition", "definition",
  "simpleDefinition", "metaCommandWithNoSemicolon", "moduleDefinition",
  "setMetaCommand", "hashStoredValue", "optfailure", "failclause",
  "failure", "warningAction", "optPersistOpts", "persistOpts",
  "persistOpt", "optStoredFieldFormat", "globalOpts", "globalOpts2",
  "globalOpt", "optFewMany", "independentOptions",
  "commaIndependentOptions", "independentOption", "fewMany",
  "optKeyedDistributeAttrs", "keyedDistributeAttribute",
  "optDistributeAttrs", "distributeAttribute", "transformDef", "transform",
  "$@1", "startInlineTransform", "opt_join_transform_flags",
  "startTransform", "transformOptions", "transformOption",
  "transformations", "transformation", "transformPrefix",
  "transformPrefixList", "transformPrefixItem",
  "conditionalAttributeAssignment", "conditionalAssignments",
  "beginConditionalScope", "conditionalAssignmentElseClause",
  "defineTransformObject", "beginDefineTransformObject", "transformation1",
  "transformDst", "transformDstRecord", "startSelf", "transformDstSelect",
  "transformDstField", "dotScope", "recordScope", "simpleRecord",
  "globalRecordId", "$@2", "semiComma", "actionlist",
  "sequentialActionlist", "sequentialAction", "action", "actionStmt",
  "failAction", "assertActions", "assertAction", "assertFlags",
  "indexRecordDef", "optBuildFlags", "buildFlags", "buildFlag",
  "localAttribute", "bloomAttr", "hashedIndexAttr", "beginIndexList",
  "endIndexScope", "optBloomFlags", "bloomFlag", "optCommonAttrs",
  "commonAttribute", "hintAttribute", "hintList", "hintItem", "hintName",
  "hintExprList", "hintExpr", "orderAttribute", "optAppendAttrs",
  "pullAttr", "expireAttr", "optDatasetFlags", "datasetFlags",
  "datasetFlag", "optIndexFlags", "indexFlags", "indexFlag",
  "compressMode", "optOutputFlags", "outputFlags", "outputFlag",
  "soapFlags", "soapFlag", "onFailAction", "clusterAttr",
  "stringExpressionList", "expressionList", "optOutputWuFlags",
  "outputWuFlags", "outputWuFlag", "fromXmlOptions", "fromXmlOption",
  "applyActions", "applyOption", "keyDiffFlags", "keyDiffFlag",
  "optRecordDef", "optOpt", "scopedActionId", "$@3", "eventObject", "$@4",
  "event", "parmdef", "reqparmdef", "realparmdef", "params", "param",
  "formalQualifiers", "formalQualifier", "paramDefinition",
  "nestedParmdef", "beginNestedParamDef", "defvalue", "defFuncValue",
  "functionModifiers", "service", "startService", "funcDefs", "funcDef",
  "attribs", "attriblist", "attrib", "funcRetType", "payloadPart", "@5",
  "recordDef", "dsRecordDef", "dsEnd", "UnknownIdList", "startrecord",
  "recordBase", "recordOptions", "recordOption", "endrecord",
  "endOfRecordMarker", "abstractDataset", "optSemiComma", "optFieldDefs",
  "fieldDefs", "fieldDef", "optFieldAttrs", "fieldAttrs", "fieldAttr",
  "ifblock", "beginIfBlock", "qualifiedTypeId", "enumTypeId", "optParams",
  "optDefaultValue", "defaultValue", "setType", "simpleType",
  "userTypedefType", "userTypedefSet", "userTypedefPattern",
  "userTypedefDataset", "userTypedefDictionary", "childDatasetOptions",
  "childDatasetOption", "typeDef", "scalarType", "query",
  "optCommaExpression", "optExpression", "optConstBoolArg", "booleanExpr",
  "constExpression", "expression", "startCompoundExpression",
  "beginInlineFunctionToken", "endInlineFunctionToken", "optCondList",
  "condList", "chooseList", "chooseItem", "scalarExpression",
  "heterogeneous_expr_list", "heterogeneous_expr_list_open", "compareExpr",
  "compareOp", "expr", "rangeOrIndices", "rangeExpr", "primexpr",
  "primexpr1", "optCount", "evaluateTopFilter", "alienTypeInstance", "$@6",
  "sizeof_type_target", "sizeof_expr_target", "fieldSelectedFromRecord",
  "optMaxMin", "beginCounterScope", "endCounterScope", "optAscDesc",
  "optExtraFilter", "regexOpt", "xmlEncodeFlags", "aggregateFlags",
  "aggregateFlag", "transfer", "atomicValue", "moduleScopeDot",
  "pseudoResolutionScope", "abstractModule", "$@7",
  "scopeFunctionWithParameters", "$@8", "libraryName", "leaveScope",
  "scopeProjectOpts", "scopeProjectOpt", "qualifiedFieldName",
  "globalValueAttribute", "$@9", "dataSetOrRowList", "dataSetOrRow",
  "dataRow", "$@10", "simpleDataRow", "dictionary", "simpleDictionary",
  "dictionaryList", "scopedDictionaryId", "$@11",
  "globalScopedDictionaryId", "dataSet", "simpleDataSet", "dataSetList",
  "mergeDataSetList", "mergeDataSetItem", "cogroupDataSetList",
  "cogroupDataSetItem", "sideEffectOptions", "optQuantileOptions",
  "quantileOptions", "quantileOption", "limitOptions", "limitOption",
  "catchOption", "projectOptions", "projectOption", "prefetchAttribute",
  "loopOptions", "loopOption", "graphOptions", "graphOption",
  "remoteOptions", "distributedFlags", "distributedFlag", "optStepFlags",
  "stepFlag", "sectionArguments", "sectionArgument", "enumDef",
  "enumBegin", "enumFirst", "enumValues", "enumValue",
  "indexTopRecordAndName", "nullRecordDef", "failDatasetParam", "mode",
  "dsOption", "lookupOption", "dsOptions", "optDsOptions",
  "thorFilenameOrList", "indexListOpt", "csvOptions", "csvOption",
  "headingOptions", "headingOption", "xmlOptions", "xmlOption",
  "optPipeOptions", "pipeOptions", "pipeOption", "pipeFormatOption",
  "setCountList", "choosesetAttr", "pipe", "choosenExtra", "choosenFlags",
  "choosenFlag", "inlineFieldValue2", "inlineFieldValue",
  "inlineFieldValueGoesTo", "inlineFieldValues",
  "inlineFieldValuesWithGoesto", "inlineDatasetValue",
  "inlineDatasetValueList", "transformList", "optJoinFlags", "JoinFlags",
  "JoinFlag", "joinLimitOptions", "joinLimitOption", "mergeJoinFlags",
  "mergeJoinFlag", "skewAttribute", "optDistributionFlags",
  "DistributionFlags", "DistributionFlag", "optTrimFlags", "TrimFlags",
  "commaTrimFlag", "TrimFlag", "optSortList", "optTraceFlags",
  "traceFlags", "traceFlag", "doParseFlags", "parseFlags", "parseFlag",
  "xmlParseFlags", "xmlParseFlag", "startGROUP", "endGROUP",
  "startSortOrder", "endSortOrder", "startTopFilter", "startRightFilter",
  "startRightRowsRecord", "startLeftRightSeqFilter",
  "startTopLeftSeqFilter", "startTopLeftRightSeqFilter",
  "startTopLeftRightSeqSetDatasets", "startPointerToMember", "$@12",
  "endPointerToMember", "$@13", "startSimpleFilter", "startLeftSeqRow",
  "startRightRow", "startLeftRowsSeqFilter", "startLeftSeqFilter",
  "startLeftDelaySeqFilter", "startRightDistributeSeqFilter",
  "endSelectorSequence", "startLeftRowsGroup", "startLeftRows",
  "startRightRowsGroup", "endRowsGroup", "endSimpleFilter", "endTopFilter",
  "endTopLeftFilter", "endTopLeftRightFilter", "scopedDatasetId", "$@14",
  "globalScopedDatasetId", "setOfDatasets", "scopedListDatasetId", "$@15",
  "actualParameters", "actualList", "optActualValue", "namedActual",
  "actualValue", "anyFunction", "valueFunction", "actionFunction",
  "datarowFunction", "datasetFunction", "dictionaryFunction",
  "scopeFunction", "transformFunction", "recordFunction",
  "listDatasetFunction", "eventFunction", "optFieldMaps", "fieldMaps",
  "fieldMaps1", "fieldMap", "sortListOptCurleys", "sortList",
  "nonDatasetList", "nonDatasetExpr", "simpleSortItem", "sortItem",
  "expandedSortListByReference", "optDedupFlags", "dedupFlags",
  "dedupFlag", "rollupExtra", "rollupFlags", "rollupFlag", "conditions",
  "mapSpec", "mapItem", "beginList", "sortListExpr", "ignoreDummyList",
  "caseSpec", "caseItem", "mapDatasetSpec", "mapDatasetItem",
  "mapDictionarySpec", "mapDictionaryItem", "caseDatasetSpec",
  "caseDatasetItem", "caseDictionarySpec", "caseDictionaryItem",
  "mapDatarowSpec", "mapDatarowItem", "caseDatarowSpec", "caseDatarowItem",
  "mapActionSpec", "mapActionItem", "caseActionSpec", "caseActionItem",
  "const", "stringConstExpr", "stringOrUnicodeConstExpr",
  "optConstExpression", "pattern", "optPatternOr", "patternOr",
  "optPatternOrItem", "patternOrItem", "beginPatternScope",
  "startRootPattern", "endRootPattern", "patternOrItemValue", "pattern2",
  "optNotAttr", "checkedPattern", "pattern0",
  "globalFeaturedPatternAttribute", "globalPatternAttribute", "$@16",
  "patternParameters", "beginPatternParameters", "endPatternParameters",
  "patternActualList", "optPatternActualValue", "namedPatternActual",
  "patternParamval", "optMinimal", "optPatternList", "patternList",
  "patternReference", "patternSelector", "patternOrRuleRef",
  "patternOrRuleId", "patternOrRuleFunction",
  "defineFeatureIdWithOptScope", "defineFeatureId", "featureParameters",
  "featureIdList", "featureDefine", "featureCompound", "featureList",
  "featureGuards", "featureGuard", "featureId", "featureValue",
  "featureValueList", "featureModifiers", "startDistributeAttrs",
  "startHeadingAttrs", "startStoredAttrs", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,    43,    45,    42,
      47,    37,   124,    94,    38,    46,    40,    91,   722,    59,
      44,    36,    41,    58,    93,   123,   125,    64,    63
};
# endif

#define YYPACT_NINF -5158

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-5158)))

#define YYTABLE_NINF -2184

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
   34479,  -205,  -178,   -71,     6,   147, -5158,   164,   219,  3495,
     -62,   236,   251,   275,   309,   318,   342,   981,110114,   396,
     519,   533,   560,   618, -5158,   638, -5158,   643,   700,   723,
     776,   790,   793,   807,   818, -5158,   847,   860,   868,   881,
     884,   904,   976,  1010,  1051,  1061,   -40,  1079,  3495,  1090,
   35097,  1096,  1101,  1122,  1128,  1175,  1181,  1222,   440,  1234,
    1265,  1288, -5158, 11500,  1306,  1315,  1325,  1336,  1351,  1359,
    1367,  1379,  4591,  1386,  1416,  1435,  1442,  1464,  1472,  1496,
    1545, -5158, -5158,  1570,  1583,  1587,  1590,  1593,  1597,  1602,
    1620,  1630, -5158,  1641,  1656,  1660,  1667,  3921,   981,  1683,
    1686,  1702,  1705,  1708,  1711,  1712,  1723,  1724,  1730,  1741,
    1746,  1760,  1761,  1765,  1778,  1779, -5158,  1786,  1792,  1799,
    1804,  1817,  1824,  1825,103922,  1830,  1834,  1851,  1858,  1862,
     981,  1867,  1868,  1877, 11500,  1878, -5158,  1883,  1887,  1897,
    1902,  1903,  1906,  1918,  1945,  1951,  1954,  1961, -5158,  1968,
    1973,  1974,  1983,  1988,  1991, 66144, -5158, -5158,  1995,  2006,
    2029,  2030,  2042,  2055,  2056,  9922,  2060,    93,  2061,    -3,
     696, -5158,  2065,  2069,  2077,  2090,  2094,  2097,  2112,  2118,
    2119, -5158,  2122,  2136,  3495,  2142,  2143,  2146,  2149,  2164,
    2165, -5158,  2183, 11500,  2184,  2227,  2228,  2232,  2233,  2247,
    2254,  2266,  2270, -5158,  2276,  2280,  2283,  2286,  2296,   893,
    2307,  2308,  2311,  2319,  2330,  2331,116125,  2336,  2348,  2352,
    2356,  2360,  2363, 66144, -5158, -5158, -5158,  1077, -5158, -5158,
    1083, -5158, -5158, -5158, -5158,   -59, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, 69026, 59835,
   -5158, -5158, -5158, -5158, -5158, -5158,  8283,  2364,  2378,  2383,
    2386,  2387,  2390,  2391,  2394,110114,110114, -5158, 77162,  1085,
   -5158, -5158, -5158, -5158,  1707, -5158, -5158,   242, 11500, -5158,
   -5158, -5158, -5158,  1520,  2395, -5158, 16216,  2405,  2405, -5158,
   35585, -5158, -5158, -5158, 60320,   194,  2384,   144, -5158,  1560,
    1669, -5158, -5158, -5158, -5158,   955, 31831,  1810, -5158, -5158,
   -5158, -5158, 11500, -5158, -5158, -5158, -5158,  1843,  1669,    94,
     221, -5158,  2991, -5158,  1744,110114, -5158, 10003,   436,  1979,
   -5158, -5158, -5158,  1601, -5158,  -163, -5158, -5158, -5158,  2793,
    2420,  2084,  2294,  2425, -5158, 11500,  2102, -5158,  2438,  2447,
    2451,  2452,  2459,  2470,  2475,  2479, -5158, -5158,  -107, -5158,
   -5158,103922,103922,116125,116125, -5158,116125,  2494,  4024,  2501,
    3495,  2515, -5158,  5525, -5158, -5158,    94,   726, -5158,116125,
  103922,103922,103922,103922,103922,104398,  2385,  2403, -5158,  2543,
    2558,  2559,  2564,  2567,  2574,  2575,  2579,  2583,  2591,  2598,
    2599,  2602,  1702,  2623,  2629,  2630,  2641,  2030,  2657,  2658,
    2666,103922,  1085,  1810,    94, -5158, 10899,  1647,    13,  1107,
   -5158,116125,103922,103922,103922,116125,116125,116125,103922, 14334,
  116125,116532,103922,103922, 95316,116939, -5158, 79070,  2297,116125,
  116125,113101,116125,116125,116125, -5158,116125, 66144, -5158,  8031,
   -5158,116125, 79550, 70463, 95792,  2424,104874,103922, -5158, 74280,
    2433, 96272, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,116125,  8031,
  103922,  8031,103922, 70463,116125,116125,116125, -5158, -5158, -5158,
   -5158, -5158,116125,103922,103922,103922,103922,103922,103922,116125,
  116125,116125,103922,116125,103922,103922, 96752,103922,116125,  2670,
   -5158, -5158,   967, -5158,103922,103922,103922,103922,116125,103922,
  114007,  7044,  8320,  8379, 86252, 86732, 87212,105350,116125,116125,
  105826,116125, 70463, 70463,103922,103922,111834,116125, -5158,  3132,
    6726, 70463, 85300, 66144, -5158, 70463, -5158, -5158,116125,116125,
   -5158,103922,103922,116125,116125,116125,116125,116125,  2468,116125,
  103922,103922,103922, 66144,103922,103922,103922,116125, 97228,  2674,
   -5158,  2678, 66144,  2686,  2690,  2691, -5158,  2703, 66144,  2458,
   -5158,  2484,  2715, -5158, -5158, -5158, -5158, -5158,  2721,  2737,
    2741, -5158,  2744,  2749,  2752, 67589, -5158, -5158, -5158, -5158,
    2397,  2361, -5158, -5158,  2924,  2925, -5158, -5158, -5158, 36555,
   -5158, -5158, -5158, -5158, -5158,  1013, -5158, -5158, -5158,  9761,
     176, -5158,  1810, -5158, -5158, -5158, -5158,    94, -5158, -5158,
   10077,  1979,  3132,    13,  6726, -5158,  6008,  2102, -5158,  2438,
    2470,  2753,  2760,116125,103922,103922,112241,116125,116125,116125,
    8031, -5158,116125, -5158, -5158,  4287,116125, -5158,  6594,103922,
  103922, 32761,  7282,103922, -5158, -5158,103922,103922,  5525, -5158,
   -5158,116125,106302,116125,103922,103922,103922, -5158,116125,116125,
  103922,116125,116125,103922,113554,103922,103922, 66144,103922,116125,
  103922,116125, -5158,116125,117346, 85300, 70463, 97228,103922,  2767,
    2768,  2779,  2782,  2787,  2788,  2799,  2803,  2843,  2846,  2858,
    2865,  2866,  2879,  2887,  2894,  2897,  2898,  2094,  2902,  2906,
    2915,  2920,116125,115311, -5158,  1020,    94,  7419,  1107,103922,
  103922,103922,103922,103922,103922,  2577, -5158,  2621,   347,  2644,
   10512,    28,  5035,  6368, -5158,  1033,  1843,  8031,   176, -5158,
    2698,    94,   913,113554,103922,103922,103922,103922,103922,103922,
      -6, -5158, -5158,109158,  2716,  2723,  2832,    94, 10733,   693,
    1187, -5158, 70939, -5158,  2918,  3293,  2918,   248,   433, -5158,
   -5158,  5525, -5158,  2923, -5158,  3188, -5158, -5158,  9263, 11500,
   -5158,  2961,  3047, -5158,  2972,  3182, -5158,  1074,  1843, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158,  3003,  3007, -5158,
    7805, -5158,  9034,  8031,  6195, -5158, -5158, 11500,  3012,  3022,
   -5158,  2361, 83388, 74760,   876, 11500, 11500,  2384,   290, 60805,
   64699,   200, -5158, -5158, 61779, 11500, 11500, -5158,    94, 11500,
   -5158, 10257,  3132,    13,  6726,   357, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158,    86, -5158, -5158,103922,103922,110114,110114,
     188, -5158, -5158, -5158, -5158, -5158, -5158,110114,110114,110114,
  110114,110114,110114,110114,110114,110114,110114,110114,110114,110114,
   87692, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,116125,
    3318,116125,116125,116125,116125,116125, -5158, 97704, -5158, -5158,
  116125,103922, -5158,116125,116125,116125,116125,116125,116125, -5158,
   91028, -5158, -5158, -5158, -5158, -5158,103922, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158,  6523, -5158,  3009,  3028,  1107,
    3050,  1633,110567,  1107,  3061,  8031,103922,  5525,   375,    86,
   -5158, -5158,  3062,  3066,  3071,  6726,  3075,  3077,  3078,  3095,
     467,   569, -5158,  3098, -5158,116125,103922, 98184,117753,116125,
   24184,103922,103922,103922,103922,103922,103922,103922,103922,103922,
  106778,    86, -5158, -5158, -5158,   119,  3106,  3111,  1401,  3116,
    1523,  3120,  3121,  3122,  2253,  4501,  3129,  3134,  3156,  3168,
    3174,  3183,  3186,  3191,  3194,  3201,  3208,  3215,  3219,  3225,
   14334, -5158,  3233,    94,  1626,  3239,   597,  3243,  3172,  3242,
     961,  3245,   674,   804, -5158,  1042,  3253, 73328,  3265,  3268,
    1085,   176, -5158, 10865,  2572,   830,  3778,  3257,   744,  1107,
    3275,  3276,113554,  3290,   170,    94,  9874,   823, -5158,  1150,
   -5158,  3299,  1277,   179,  1547,  3019, -5158,   187,  1391,   663,
    5703, 70463,  3303,  3316,    94,  3319, 11024,  1039,  3132,  4702,
   -5158,  3321, -5158,   961,  1400,   863,  6726,  3322, -5158,   187,
    1428,  1441,  9120,   663,  5703, -5158, -5158,  3323,  3320,   195,
    3328,   288,  1524,  1529,  3340,  2549,  5806,  1107,  3343,  1540,
    3347, 73328, 73328, 73328, 73328,  3366,  3368,  3370, -5158,  3371,
    3372,  3355,  3359,  1107,  3375,  3378,  3379,  2102,  4093,  1559,
    6726,  4440,  1563,  3380,  3385, -5158,  3388,  1572,  5581,  8031,
    3390,  1651,  3391,  3181,  5386,  3393, -5158,  3477,  3402, -5158,
    1690, -5158,  1745, -5158,  3405, -5158,  1770, -5158, -5158, -5158,
   -5158,  8718,  1462,  1789,   243, -5158,  3409, -5158, -5158, -5158,
     857,   438, -5158,   588,   596, -5158,  3407,  9655,  3800,   668,
   -5158,  3408,  3917,   702, -5158,  3410,  4005,   871,  1060,  1809,
    3417,  3418,  3421,  3425,  1130,  1837,  3426,  2035,  3429,  3430,
    4171,  1014,  5479,  3433,  3434,  4191,  1067,  5506,  3435,  4348,
    1141,  5517,  3437,  4520,  5528,  3411,   884,  3431,  2865,  2897,
    3449,  3455,  3461,  3462,  2296,  3463, -5158, -5158, -5158, -5158,
    1107,  1882, -5158,  1107,  3464,  3460,  3470,  5641, -5158,  1907,
    3466,    94,  8935,  3475, 70463,  3476,  3484,  1076,  3339,   782,
    3485, 70463,  1107,  3486,  3494,  3499,  3506,  3507,  5596,  3508,
      65,  1647,  3509,  3510,  3501,  3511, -5158,   377,  3513,  3514,
    3521,  3524,  3527,  3534,  6221,  3537,  3542,  3546,  5630,  3543,
   -5158,  3547,  3551,116125,103922, -5158,  2426, -5158,103922,  5525,
   -5158,  3467, 11500, -5158,113554,  2715, -5158,  3582,    94,  9571,
   -5158,  4138, -5158, -5158, -5158, 37040, -5158, 37525,   491, 16421,
    3007, -5158, -5158, -5158,  2393,  3107, -5158,  3557,  1077,  3564,
    3565, -5158, -5158, -5158, -5158, -5158, -5158,  2405,   981, 15512,
   -5158, 11500,   176, -5158, -5158, -5158,  2705,  3568,    86, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158,   -95,  3654, -5158,   610, -5158, -5158, -5158, -5158,  3570,
    1926,  3571,114414,  3572, -5158,  3576,  3577,    94,  9460,  2423,
    3574,  3580,  1671,  1722,  1390,   277,  5762, 70463, -5158, -5158,
   -5158,  2155,  3584,  3589,  3590,  3592,  3593,   176,  1810, -5158,
   -5158, -5158, -5158,  3586,  3586, -5158, 10636,  3132,  6726,  8031,
     325,  3598,  6726,  3599,116125,116125,  3600,  3603,  3606,   740,
  116125,  5776,  1173,  1938,  3610,  1978,  3611,  3615,  3616,  4614,
    1157,  5750,  1965,  3619,  3620,  2075,  3621,  3624,  3473,  6246,
     343,  3079,  3626,  3625,  3627,  3633,  3632,  3634,  3638,  3635,
    1267,  3641, -5158,  1996, -5158,  3644,  3646,  4327,  6267,  3647,
    3648,103922,116125,103922,116125, 14334,113554,113554,116125,103922,
  103922,116125,116125,103922,116125,116125,116125,116125,116125,116125,
  116125,103922,116125,  3064,  4167,  3650,  3204,116125,    86, -5158,
    3653,  3652,  3658,  3659,  3660,  3661, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158,    86, -5158, -5158,  3666,   176,  3676,
    3680,  3681,  3683,  3684,  3710,  3675,  3716, -5158, -5158,  2047,
   -5158,  3721,  3724,110114,110114, -5158, -5158, -5158, -5158,110114,
    1304, -5158, -5158,  3132,    13,  6518, -5158,  1337, -5158, -5158,
   -5158,   433, -5158,   312,   433, -5158, -5158, -5158,  3723, -5158,
    3587,  2104, -5158,  1979, 38010,   101,  3727,  2125, -5158,  8990,
   36070,  2595,  3729, 66144, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158,  3795, -5158, -5158, -5158,  3732,  3733,  3734,  3735,  3736,
    3737,  3739,  3741,  3744,  3745,  3746,  3747,  3750,  3751,  3754,
    3760,  3762,  3761, -5158,  7099,  3772,   171, -5158,  3832, -5158,
    2361, 79070,103922,  3848,   370,  8605,  3774,  3775,  3780, -5158,
   -5158,  2361,  2361, -5158, 61292,    92,   656,   876,   200, 63725,
   64212, -5158,    92,  3859,    92, -5158, -5158,  4178,  1142,  2361,
     471,    86, -5158,  2361, -5158, -5158, -5158, 38495, -5158,  4246,
    1497,  8438,    13,110114,110114,  8474,  1276,  1377,  1377,  1742,
    1742,  1276,  1276,  1276,  3792,  3792, -5158,  8438, 91504,103922,
    3878,  3796, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, 69026, 59835,    13,116125,  1450,
    2156,  1647,  1647,   632,   613,  1450,  2156, -5158,  3801,  3806,
    -167,  1450,  2156,  1107,  1107,   632,   613,   613,  1450,  2156,
  103922,103922,   -92, -5158,  3887, -5158,  3803, 65664, 65664, 65664,
   65664, 65664, 65664, 65664, 65664, -5158, -5158,   687,  3812,  3813,
   -5158, -5158, -5158,  8031, -5158,  3817,  3818,  3822,  3824,  3826,
    3828,  3829,  3830,  3835,  3837,110567, -5158,  1113,    94, 10151,
    1647,  1107, 14334,  3834, -5158, 38980,  5525, -5158, -5158, 98660,
    3833,107254, -5158, -5158,103922,103922,103922, -5158,103922,116125,
    3840,  1647,  7895,  5998,  3842,  3843,  3924,  3852,  3854, -5158,
   39465,103922,  3860, -5158, -5158,103922,   150, 80035,103922,103922,
  111427, -5158, -5158, -5158, -5158,103922,103922, 70463, 99136, 14334,
  103922,103922,103922, 14334, 14334, 14334,103922, 14334, 14334,103922,
      86, -5158, -5158,116125,103922,103922, -5158, -5158,103922,  3846,
   -5158, -5158, -5158,  2173,103922,103922,   -81,  3855,   884,103922,
   -5158,  2598,  3863,  3867,  1602,   773,  1702, -5158,  1765,  3872,
    1817,  3877,  3879, -5158,  3882,  3884,  3886, -5158,  4094, -5158,
    6726, -5158, -5158, -5158,  1248, -5158, -5158, -5158, -5158,103922,
  103922, 80511,  2174, -5158, -5158, 99616, -5158,   981, -5158, 75245,
    3889,  3892,116125,  3893,114858, -5158,    86, -5158, -5158,  8031,
   -5158,  3894,103922, -5158,  3896, -5158,  4131, -5158, -5158,103922,
   -5158,  3897,103922, -5158,  3898,  3899, -5158, -5158,    86, -5158,
  103922, -5158, 11500, -5158, -5158, -5158,  3900, -5158, -5158,  2191,
   -5158,  3901,103922, -5158,103922, -5158,  3903,  3904, -5158,116125,
  103922,103922,103922,103922, -5158,103922, -5158,   300,  3906, 88168,
    3907, 88168,  3908, -5158,  3923, -5158, -5158, -5158, -5158,  1571,
    1609,  1676,  1684,103922,103922, 70463, 70463,103922, -5158, -5158,
   -5158, -5158,116125,116125,  4143, -5158,  2215,103922,100092, -5158,
   -5158,  5525,  5525,103922, -5158,103922, -5158,103922, -5158, -5158,
   -5158, -5158, -5158,  3925, 70463,103922,103922, -5158,103922, -5158,
  103922, 70463, -5158, -5158, -5158, -5158, -5158,  8379, -5158,103922,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158,103922, -5158,103922,111834, -5158, -5158,103922, -5158,
  103922, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,103922,
      -6,103922,103922, -5158,103922,103922,111834, -5158,103922, -5158,
   -5158, -5158,103922, -5158,103922,    86, -5158, -5158, -5158,   491,
   -5158, -5158, -5158, -5158,  3423,  3919,  5525, -5158,  3927,  3928,
    5948,  3929,   491,103922, -5158,  8031,103922,103922,103922,  3931,
  116125,  5525,  6004, -5158, -5158,103922,103922,103922,103922,103922,
   -5158,  7772,  7772,103922,103922,103922,116125, -5158, -5158,103922,
    3934,  2484,   923,  3926,   432,  8031,  -133,  3938, -5158,   176,
    2590, -5158,    86, -5158, -5158, -5158,  3943,  3944,  3945,  3947,
   -5158, -5158,  3948,  3949,  3950,  3954,  3955,  3957,  3960,  3961,
    3962,  3967, -5158, -5158,  3941,  3966, 66144,  3972, -5158, -5158,
   17112, -5158,107730, -5158, -5158, -5158,   136, -5158,   177, 18347,
   -5158,  3975, -5158,  2405,  4136,  8774, -5158, -5158,  4046, -5158,
   -5158,  8031,  2484, -5158, -5158, -5158,  2405, 65664, -5158, -5158,
   39950, -5158, -5158, -5158,  3981,  3984,  3988, -5158,  3989,  3990,
    3991, 67589,103922,103922,  2218, 65664, 65664, 88644,103922, -5158,
   -5158,    94,  6509,  3993,100572, -5158, -5158,    86, -5158, -5158,
   -5158,  8031,  8678, -5158, -5158,116125, 11500,103922,   491,103922,
   -5158, -5158, -5158, -5158,  1178,  3992,  3996,   373, -5158,103922,
  103922,  4002,  3261,  4003, -5158, -5158,103922, -5158,  4008, 14334,
  103922, -5158,103922,  8678, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158,103922,103922, -5158, 91980,  4013,  4010,  8283,  6594,
    6594, -5158, -5158,   218,  4014,  3626, -5158, -5158, -5158,103922,
   -5158, -5158, -5158,  6004,103922,103922,  4328, -5158, 14334, 14334,
   14334, 14334, -5158, -5158,  4019,  6019,  4029,  2689,  3361,  4033,
    5998,  1623,  6354,  4034,  4039,  1107,  2725,  3503,  4071,  2883,
    3536,  2947,  3712,  3053,  3757,  3218,  4409,  4748,  3357,  4889,
    4041,  1949,  6664, -5158,116125,   981, -5158,  4495,  4040,  6004,
   -5158, -5158, -5158, 40435,  8031, 76201,  4042,  4043, 80991,103922,
  103922,103922,103922, -5158,   134,    -6, -5158, -5158,116125, -5158,
   -5158, 40920,  1647, -5158, 14334,  4044,106778,106778, -5158, -5158,
   -5158, -5158,  4510,   433,   -85,  5525, -5158, -5158,  2405, -5158,
   -5158, -5158, -5158,  4051, -5158, -5158, -5158, -5158, -5158, -5158,
    3727,  5406,  4481, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
     172, -5158, -5158, -5158,  4141, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, 11500, -5158,  8990, -5158, -5158, -5158, 11500,
   -5158,    94, 10039,  1979,   660, -5158, -5158,  1669, -5158, -5158,
     567, -5158, -5158,  4056, -5158,103922,103922,  2297,  2297, 14334,
   92456, 89120,103922,   498,103922,103922,103922, 14334,103922, -5158,
   14334, 85300,  7805, -5158,  3832, -5158, -5158,  1305,  4137,  3973,
    4058,103922, -5158,  4096,103922,103922,  4137,  4137,   495,    92,
   -5158, -5158,    92, -5158, -5158, 62264, 62751, -5158,    92,    92,
   -5158, -5158, -5158, 65184, -5158, -5158,  4455,  4137,103922,  4137,
   -5158, 41405,  4137, 83388, -5158, 41890, 69026,110114,  2213,  8438,
      13,  4059, -5158, 92932, -5158,  4097,   709,  4103,    51,  5087,
    7046, -5158,    13, 81476,  4062, -5158,  4070,  4072,101052, -5158,
   -5158, -5158,  4145, -5158,  2458, -5158,  4156,  4160,   225,  4170,
    4177,   337,  2486,  -138,  3677,  -122,  4084,  4098, -5158, -5158,
   -5158,  4180,  4095,  4099,  4105,  4109,  4111,  4112,  4113, -5158,
   -5158,  2595,   176,  4117,103922, 81952,110567,103922,103922,103922,
  110567,110567,110567,110567,110567, -5158,    86, -5158, -5158,  4116,
    4119, -5158,  2236,  5525, 42375,  5525, -5158, -5158,  2583,  4120,
   -5158,  2237, -5158,  4121,  4122,  4128, -5158, -5158, -5158,103922,
  103922,103922,103922,103922, 42860,116125, 67109,  4129, 70463,  4140,
    4126, -5158, -5158,    86,  4130, -5158,  2256, -5158,   811,  4147,
    6726,  2285,  4133,  4185,  4148,  4139,  4144, -5158,  1107,  2288,
   -5158, 14334,  4151,  4152,  4153,  4223,  4157,  4172,  4154,  5866,
   -5158, 43345, 14334,  1107,  2289,  4176,  4181, -5158, -5158,  1093,
   -5158,  4184,  4188, -5158,103922, -5158,  3132,  6726,103922,116125,
   -5158, -5158,103922,103922,103922, 97228, -5158,103922, -5158, 73328,
   73328, -5158,  4158,  2299, 89596, -5158, -5158,    94, 10292, -5158,
    1318,  1335,   223, -5158,  4194,  4796,  4168,  4149,103922,  1386,
  103922, -5158, -5158,  4378, -5158, -5158,  3132,  6726, -5158, -5158,
   75245,  4195,  8031,    94, 10566,  1338, -5158, 43830,113554,   380,
   -5158, 83868,  4175, -5158, -5158, 71891, -5158, -5158,  4189,  4196,
   70463, -5158,  4197, -5158, -5158, -5158, 44315,  4198, 70463,  4199,
   -5158, -5158, -5158,  2337,  4203, -5158, -5158,  4207, -5158,  4212,
   -5158,  4214,  4217, -5158, -5158, -5158,  4220, -5158, -5158,  3340,
   -5158,  3340, -5158, -5158,103922, -5158, 73804, 73328, -5158, -5158,
   -5158, -5158,  3801,  4222,  2353,  4224,   622,  1467,   662,  4380,
    2400,  4225,  1727,   754,  5204,  4231,  6004,103922,  4233,  6702,
    4232,116125, -5158,  4241,103922,  2407,   838,  4242,  1348,  4247,
    4243,  4248,103922, -5158, -5158,  3132,    13,  6726,  4249, -5158,
    4277,  6056, -5158,  4278,  1168, -5158,  4332,  4851, -5158,  4252,
   -5158, -5158, -5158, -5158,  4244,  4253, -5158,  2412, 73328,103922,
    4254, -5158,  4255,  2429,  4260,  4263,103922,  4264,  4265, -5158,
    4268,  6726,  4269,  4272,  2430, -5158, 44800, -5158, 69987,  4274,
   -5158, -5158,  4275, -5158,  4281,  4285, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158,  4290, -5158,  4283, -5158, -5158,  1024,
   -5158, -5158,  2136, -5158, -5158,  4293,  4298, -5158,   320,  4305,
    4306, -5158, -5158, -5158,  1647,  4307,  1979,  6004,  4309,    94,
     771,  8678, -5158,  4313,  4314,  4317,  4317,  4319,  4329,   324,
    4322,   348,  4324,  4330,  4331,  4333, -5158, -5158, -5158,  4334,
  103922,  4336,103922,103922,   383,109638,110114, 11500, -5158, -5158,
   45285, -5158,103922,103922,103922, 66144,103922,103922,103922,103922,
   91504,    -6,   108,103922,103922,103922, -5158,  5124, -5158,  4703,
    4338, -5158,  1753, 77162,  4483, -5158, 16896, -5158, -5158,  4427,
    4352, -5158, -5158, -5158, -5158, -5158,  4433, -5158, -5158,   391,
    4355,  2484,  4353, 45770, 66624,  4389, -5158, -5158,  1421, -5158,
    4358,  4359,  1379,  4363,  4364,    94, 10975,  4369,  4368,    86,
    3441,  1085, -5158,  3132,  6726, -5158, -5158,   497,  4365, -5158,
   -5158, 46255,114414,   408,  8678,  4376,   445,    94,  2367,  2072,
   -5158,  2439,  4379,  4382, -5158, -5158, -5158, -5158, -5158,  4386,
    4387, -5158, -5158, -5158,  4388, -5158,  4392,  4128, -5158,  4396,
     176, -5158,  4390,  4398,  4393,  4395,  4411,  4412, -5158, -5158,
   -5158, 91980,   449,  4407,  4408,  4413, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158,  2463, -5158, -5158,  4414,  4128, -5158,  4423,
    4429,  4429,  4429,  4429, -5158,111834,116125,116125,116125,116125,
    8031, 46740,  3545,  4302,  4421, -5158, -5158,  4130, 47225,  8031,
   77638,  4436,   176, 63238,    94, 10695,  4441, -5158, -5158,  8363,
    3676,  3676,  4442, -5158,  3132,  6726,  4444,  4445,  4446, -5158,
   -5158, -5158, -5158, -5158,  4450, -5158, 93408,  4443, -5158,  1647,
    1107,103922, -5158, -5158, -5158, -5158,  4527, -5158, -5158, -5158,
   -5158,  2923,   322,  5525, -5158, -5158, 11500,  4141, -5158,  4464,
   -5158, 66144, -5158,  -105, -5158, -5158,  -105,    86, -5158, -5158,
   -5158, -5158, -5158, -5158,  4549, -5158,  4463,  2595, -5158,   -38,
    1669, -5158, -5158,  4462, -5158,  4465,  4467, -5158, -5158, -5158,
    4469,  4475,  4486,  2474, -5158, -5158, -5158,  4482,  4484,  4491,
    2491,  4498,  2506,  4497,103922, -5158,  2507, -5158,  1350,  4533,
   -5158,103922, -5158, -5158, -5158, -5158, -5158,  3132,    13,  6726,
    4503,  4504,  4506, -5158, -5158, -5158,    92, -5158, -5158, -5158,
   -5158,  1142, -5158, -5158,  4508, -5158, 47710, 83388, -5158, 69026,
    4518,   715,  4519,  1418,  2450,  5927,  2370,  8438,110114, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,  4130, -5158,
   -5158, -5158, -5158,  4524,  4604, -5158, -5158, -5158, 75721, 75721,
   -5158, -5158, -5158, 65664, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158,  6004,  4529,  4532,  4534,  4613, -5158, 48195,
  110567, -5158,  4831,  4535, 11981, -5158,  5525,   649,  4538,  5006,
   -5158, 98660,  4552, -5158,  4553,  2512,103922,  4557,  4558,103922,
     508,  3161, -5158,  4563,  4565,  4567,  4568,   884,  4571,  4573,
   -5158,  4329,  4574, -5158,  4575, -5158, -5158, -5158,  4576, -5158,
    4579,   198,  2118,  4581, -5158,  4584, 99616,  4582, -5158,  4583,
   -5158, -5158, -5158, -5158, -5158,   176, -5158,  6726, -5158, -5158,
    4586,  -130,  1189,  6067,  4597, -5158,  2524, -5158,  2525, -5158,
    4599, -5158,  2540, -5158, -5158,  6004, -5158,  1084,  4589,103922,
   -5158,116125, -5158, -5158, 78594,  4598,103922, -5158, 93884, -5158,
  111427, -5158, -5158, 14334, 14334, 14334,103922,103922, -5158, -5158,
   48680, 14334,  4555, -5158,103922,103922, -5158, -5158, -5158, -5158,
   -5158, -5158,103922,103922, -5158,  4600,  4605,  4602,  4906,  2546,
    4609,  2580,  4606,  4615,103922,  4616, -5158, -5158, -5158, 82432,
    4607,    86, -5158, -5158,  3857,  4620,  6004,  4623,  4585,  4590,
    4631,  4634, -5158,  1285, -5158,   176, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158,103922,   450,  4632, 49165,113554,
   -5158,  4637,  4639, -5158,  4636, -5158,  4636,  6726,  4636, -5158,
   -5158,  2603,  4648,  4651,  3882,  4654, -5158,  1451,  4649, -5158,
   81476,  4653,   491, -5158, -5158, 49650, 70463, -5158, -5158,103922,
   -5158, -5158,103922,  2604, -5158,  2608, -5158, -5158,   300,  4656,
    4659, -5158,  4664,   880,  1816,  1816,  4663,103922, 14334, -5158,
  103922,  5525,116125, -5158,116125, -5158,116125, -5158, 14334, -5158,
  103922,116125, -5158,116125, -5158,116125, -5158,103922,  4130,  4666,
  103922,103922, -5158,  1107, -5158,103922,  4669,103922, -5158, -5158,
   -5158, -5158, -5158,  3056,  4678, -5158,  4668, -5158,116125, -5158,
  116125, -5158,116125, -5158, -5158, -5158, -5158,  2609, -5158,  1832,
    4681, -5158,  2615, -5158, -5158, -5158, -5158,  4680,  6127, -5158,
   -5158, -5158, -5158, -5158,103922, -5158, 50135, 85300, -5158, -5158,
  103922,103922,103922,103922,  3423, -5158,  4685, -5158, -5158,  5889,
   73328,  1123,  4689,  6881, -5158, -5158, -5158,  2618, -5158,    86,
   -5158, -5158, -5158,   176, -5158, -5158,  5066,  4690,  4691,103922,
  103922, -5158,  4990, -5158,  4990, -5158,101534,  4701,  4975,  4705,
  103922, -5158,  2484, -5158,  4706,  2484, -5158, -5158,  8438,  7599,
   -5158, 50620, 67589,  4709,  4710,  4711,  4713,  4714,  4715,  4716,
    4719,  4720,  2669,  4721,  4726,  4730,  4731,  4732,  4735,  4736,
   -5158, -5158,103922, -5158,  2832, -5158, -5158, 33809,  1331, -5158,
   36070, -5158, -5158, -5158, -5158,  4740, -5158, 66624,  4742,  4747,
   10116, -5158,  4835, -5158, -5158, -5158, 76686,  4746,  4753,  6004,
      86,  6004, -5158, -5158,  4756,    94,  1575, 90072, -5158, 94360,
   94360, -5158,100572, -5158, 51105,114414, -5158, -5158, -5158,    86,
   -5158, -5158,  5184,  4758,103922, -5158, -5158, -5158,  8031,103922,
   72367, -5158, 72367, 85776,  4759,  4760,  4768, -5158,  4767,  2673,
   -5158,  4776, -5158, -5158,103922,103922,103922, 84344, -5158, -5158,
   -5158, -5158, -5158, -5158,102010, -5158, -5158,  4778,  2695,103922,
     178,  4779,  4782,  4783,  4784,103922,  4977,  1220,   736,  1916,
    1286,  1647,  1107,116125, -5158,  4785,  8031, 99616, -5158, -5158,
   -5158, 99616, -5158,  4792,  4794, -5158,  4329, -5158,  4795, -5158,
   -5158, -5158,   233, -5158,  4797, -5158, -5158, -5158, -5158,  4798,
   -5158,  4793,  4800, -5158, -5158, -5158, -5158, -5158,103922, -5158,
    2700, -5158,  4857,112694,  4803, -5158, -5158,   908, -5158, -5158,
    8031, -5158, -5158,  4549,  4805, -5158,  4549, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158,  6949, -5158, -5158, -5158,     4,
       9, -5158, 14167,  4811, -5158,  2722, -5158, -5158,  2726, -5158,
     630,  4809,103922,   889, -5158,  2729, -5158, -5158,   134, 78118,
   -5158, -5158,103922, -5158,115718,  4810,  4815,  2734,  5219, -5158,
   -5158, -5158, -5158,  1979,  3132,    13,  6726, -5158, -5158, -5158,
   -5158, -5158, -5158,  2361, 83388,  4817,   779,  4820,  1427,  2766,
     982,  6399,  2755,   107,   107,   107,   107,   107,   107,   107,
    8438, -5158, -5158, 75721, -5158,   176, -5158, -5158, 10205,  1979,
    3132,    13,  2341,  2102, -5158, -5158, -5158,   199, -5158, -5158,
   -5158,110567,110567,110567, 51590,110567,  4825, -5158,  4826,  4827,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158,  4120, -5158, -5158,
   -5158,   -67,  8031,103922, -5158,103922,   116, 98184,103922,103922,
   -5158,103922,103922, -5158,103922, -5158, -5158,103922,103922,  4832,
   82908, 69511, -5158, -5158, 70463, -5158, -5158, -5158,103922,103922,
   -5158,103922, -5158,103922, 70463, -5158,  4823, 52075, -5158, -5158,
   -5158, -5158,  2598, -5158,  4833,  4836, -5158, -5158, -5158,  1096,
   -5158, -5158,  2770, -5158, 73328, -5158, -5158, 70463,  4837,  4839,
   14334, -5158,  4130,  4840, -5158,  4128, -5158,  4128, -5158, -5158,
  103922, -5158, -5158,103922, -5158, -5158,  5061, -5158,103922, -5158,
    4842, -5158,  4846,  8031, -5158, 52560, 89596, -5158, -5158,  8031,
   -5158,  1019,  4847,103922,103922,103922,103922,  4854, -5158,  4856,
    4859, -5158,  4860,  4861,  4858, -5158,  4623,  4862,  4858, -5158,
   -5158,  4863, -5158,  8031,113554, -5158, -5158, -5158,   118, -5158,
    4864,  4870,  4865, -5158,  5289, -5158,103922,103922,   153, 71891,
    4871, -5158,  4874, -5158,  4878, 70463, -5158,  4879,  4887,    52,
   -5158, -5158, -5158, -5158, -5158,116125, -5158, -5158, -5158, -5158,
   -5158,  4897,  4902,  4903,  1177,  3487,  1201,  5097,  4905,  4907,
    3851,  1207,  5208,  4908,  4909,  6004, -5158, -5158, -5158, -5158,
    4910, 65664, -5158, -5158,  4868, -5158, -5158, -5158,  4243, -5158,
  103922, -5158, -5158, -5158, -5158, -5158, -5158,  6004,  6004,  4914,
   85300,  4917,  4921,  4923,  4899, -5158, 68074,  4924, -5158,   176,
    6592,  4935, -5158, -5158, -5158,  1846,  4940, -5158, -5158, -5158,
    4941, -5158, -5158,  4942,  4939, -5158, -5158, -5158,   320,  4947,
    6004,   -26, -5158, -5158, -5158, 53045,  6004, -5158, -5158, -5158,
   -5158, -5158, -5158,  4948,  4954,  4943,  4943, -5158,  4331, -5158,
   -5158,  4331,  4955, -5158,  4956,110114, -5158, 67589, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158,  4957,  1299, 18962,  4945, -5158,
    3132,    13,  6726, -5158, -5158, -5158, -5158, -5158,  4944, -5158,
   -5158,  1669, -5158,  4963,  4967,   107,   107,103922, -5158,  5149,
   -5158, -5158,  3132,  6726, -5158, -5158, 76686,  4130, -5158,  4959,
   53530, -5158,    94, 11081,  1372, -5158, -5158,  1516,110974, -5158,
   -5158, -5158, 54015,  8678, -5158, -5158,  4966, -5158,   228,  4970,
   73328,  4971,  1537,  4979, -5158,  4981,  4987, -5158, -5158,  4984,
   -5158, 73328, -5158, -5158, -5158, -5158, 73328,  4985, -5158,  4988,
    4992,  4993,  6582,  9665,  4994,103922,  2774, -5158, -5158, -5158,
    4995, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,  5072,
    2153,  3794, -5158, -5158, 54500, 77638, -5158,   116,103922, -5158,
  103922, -5158, -5158,103922,  8363, -5158, -5158, -5158, 93408, -5158,
   97228,  1903,  4130,  4130, -5158, -5158, -5158,   510, -5158, -5158,
    2816, -5158, 54985, -5158,    94,  7363, -5158,  1232,  1232, -5158,
    5115,  5005,  5007, -5158,  5008, -5158,  5010,  5011,  5014,  5017,
    5018,  5019, -5158,  5020,  5021,  5023,103922, -5158, -5158, -5158,
    2694, -5158, -5158, -5158, -5158, 12990,   996,   546, -5158,  4997,
   -5158,   889, -5158, -5158, -5158, -5158, -5158,  5022, -5158, -5158,
    5025,  5024,  5029,  5032, -5158,  2817, -5158, -5158, -5158, -5158,
    4986,  5033,  1367, -5158,  1107,  4497, -5158,   611,  5034, -5158,
    5038,  4137,   107,   107,   107,   107,   107,   107,   107,   107,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
    5015,  5121,  5039,   491, -5158,  2820, 70463,110567,103922, -5158,
   -5158,  5042, -5158, -5158,103922,   481,  5046, 73328, -5158,  2824,
   -5158, -5158, -5158, -5158,  5048,  5414,  5058,  5060,  5064,  5065,
   73328,  5068,  5067,  5070, 69511,  5073,  5078,  4832, -5158, -5158,
   -5158,  3132,    13,  6726,    38, -5158,  5128,  6189, -5158,  5150,
    1215, -5158,  5160,  4958, -5158,  5085,  5168, -5158, -5158, 14334,
    2263,  2263,   666,  1889,  8031,103922,  5088,  6004,  5091,  2827,
    5093,  2830, -5158,  5094,  5096,  5100, -5158,  5104,   512, 55470,
   89596,   506, -5158, -5158, -5158,  5109, -5158,  5108,  5110,  5111,
    5116,  3951, 84824,103922,103922, 84824,  9523,  5122,  5125,  2965,
    5122,  5122, 72367, -5158,   525, 73328, 73328, -5158, -5158, 94840,
    5127, -5158, -5158, -5158,  5129,  5130, -5158, -5158, -5158, -5158,
   81476,  5131,103922, -5158,  2606,  5132,  5139, -5158, -5158,  1107,
   -5158, -5158,  8031, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158,  5137,  5138,  2835,  2838,
   -5158,  5147,  6004, -5158,  5141,  6726, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158,103922, -5158, -5158,
   -5158,  5143,  5161, -5158,  5164, -5158,  5165,  5166, -5158, -5158,
   -5158, -5158, -5158,  5172,  2136, -5158, -5158,  5173,  5176, -5158,
   -5158,  5156, -5158, -5158, -5158,  4130, -5158, -5158, -5158,  8678,
    5178, -5158,  3951,   135, 84824,  1123, -5158, -5158,  5180, -5158,
   -5158, -5158, 55955,  6004,  2853,  2871,  5182, -5158, -5158,  5356,
    5181,  5186,  5188,  5191, -5158, -5158,  6855, -5158, -5158,103922,
   -5158, -5158, -5158, -5158,  5187,  5189,  5278,  5210,   107,   107,
   -5158, -5158, -5158, -5158, -5158, -5158,  5209, 56440, -5158,114414,
   -5158, -5158,110974,    94,  9720, 56925,  8678, -5158, 12469, -5158,
    8031,   631, -5158, -5158,103922,103922,   907, -5158, -5158,   848,
    4130, -5158,  1537, -5158, 72367, -5158, -5158, -5158, -5158,  5211,
  103922, -5158, -5158,  5212,116125, 77638,  5217,  5218,  5220,  2872,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, 83388,
      86, -5158, -5158, -5158, -5158, -5158,  1017, -5158, -5158,102490,
   -5158, -5158, -5158,110114,103922, -5158, -5158,  9178, -5158,  5222,
    5221, -5158, 89596, -5158,    94,  6866,   996,  5216,  3607,   206,
   -5158,  5265, -5158,102490, -5158, -5158, -5158, -5158,103922,103922,
  103922,  2663, -5158,  2663,  5228, -5158, -5158,  5236,  5233, -5158,
  103922, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158,  5302, -5158,  5310, -5158, 71415, -5158,  5324,  4243, 14334,
   14334, -5158,  4546,  8031,  1613,103922, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158,  1933,103922, -5158, -5158, -5158, 99616,  5243,
  103922, -5158,116125, -5158,116125, -5158,116125, -5158, -5158, 14334,
   -5158,  4836, -5158, -5158, -5158, -5158,   234,  5246, -5158,  4130,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,  8031, -5158,
   77638,  5245,  1019, -5158, -5158, -5158, -5158, -5158, -5158,  5252,
    5254,  5255,  5256, -5158,  5257,  5260, -5158,  5261,  5258,  5259,
    5266,  5270,  5271, -5158, -5158,  2266, -5158,  2884, -5158,  5275,
    5274,  2899,  5283, -5158, -5158,  5285, -5158,  5286, -5158,  5290,
   -5158,  5291,  5292, -5158, -5158, -5158, -5158, -5158, -5158,  5296,
   -5158, -5158, -5158,  4858, -5158, -5158,  5287,  4555, -5158,  2007,
    2018, -5158, -5158, -5158,  5305, -5158,  5305, -5158, -5158, -5158,
   -5158,  4130, -5158, -5158,  4130, -5158,  6004, -5158, -5158,   249,
   -5158,  5041,  7689, -5158, -5158,  1463, -5158, -5158, -5158,  5300,
  103922, -5158, -5158, 73328,  4130,  4130,  5306,  3951,103922,103922,
   84824,103922,103922,103922, 84824, 68550,  5308,  2910,  2927, -5158,
     176, -5158, -5158,  5312,  5317,  2938, -5158,  5318,  6004,  6004,
     992, -5158, -5158,  7394, -5158,  5321, -5158, -5158, -5158, -5158,
   -5158, -5158,  5655,  5433,103922,103922, -5158, -5158, -5158, -5158,
   -5158, -5158, 89596, -5158, -5158, -5158,  8678,  5316, -5158, -5158,
    5326,  5327, -5158,  5328,  5332,  5333,  5334,  5351,  5353,  5354,
    5363,  5365,  5368,  5369, -5158,  5370,  2957, -5158,  2967, -5158,
   -5158,   262,   292,  5352, -5158, -5158,  5366,  5374, -5158,  5375,
   -5158,  5376, -5158,  5377, -5158,  1647,  1107, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158,  3607,  3607,  5380,  5371, -5158, 11147,
    3813,  2970, -5158,    62,  5382,  5385,  5389,  7492,  5391,  5395,
    5394,  1231,   665,  5397,  5404, -5158, -5158,  5288,  5405,103922,
      86, -5158, 91504,   546,  3607,  3607,  3607,  3607, -5158, -5158,
    3813, -5158,   914,  5408,  5410,  5411, -5158,  5407, -5158,    -6,
    5733,  5413,  5418, -5158, -5158,  2971,  2046, -5158,110567,  5419,
    2080,  2103, -5158,  5423,   673, 72852,  5422, -5158, -5158,  5424,
   -5158,  4832, -5158,  7992,  8031, -5158,  5425, -5158, -5158,   543,
   -5158, -5158,103922, -5158,103922,103922,103922,103922,103922, -5158,
    3951,103922,103922,103922, 84824, -5158,  5429, -5158, -5158,103922,
  103922,103922,103922,    -6,103922,  9523,  5122, -5158, -5158, -5158,
   -5158,  4636,   801, -5158,  5430, -5158,  5431,  5436, -5158,  5440,
    2974,  8456, -5158, -5158,  5556, -5158,   773,  5447,  5450,  2992,
   -5158, -5158,  5451, -5158,  1221,  5452, -5158, -5158, -5158,  5453,
    5454,   775,  5458, -5158,  5702,  5461,    89,   111,  1250, -5158,
   -5158, -5158,  5462,  5459, -5158, -5158,  5463, -5158, -5158,  5460,
   -5158, -5158, -5158, -5158, -5158, -5158,  5464,  6726,  2993,  2124,
    5467,  5468, -5158,  5469,  5470,  5476,  3010,  5477,  5465,  5480,
    3015, -5158, -5158,  5561, -5158, -5158, -5158, -5158,  5486,  2058,
   -5158, -5158, -5158, -5158, -5158,  4130, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158,  5494,  5495,  5496, -5158, -5158,
   -5158,  5493,  3008, -5158, -5158,  5421,  5498, -5158, -5158, -5158,
   57410,110974,  8031,103922,103922,108206,103922,103922,  4694,103922,
    5751,103922,103922,103922,103922,103922,103922, 11218, -5158,  8456,
   -5158,  8456, -5158,  6445, -5158, 73328, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, 57895,   546,   546, -5158,  2297,102490, -5158,
    5500,102490, -5158, -5158,  5497, -5158, -5158,108682,  5504, -5158,
    5577, -5158,  -112, -5158,103922, -5158, -5158, -5158, 89596,  5508,
     546,   546,   546,   546,102490, -5158, -5158, -5158, -5158,  3031,
   -5158,  5511, 73328, -5158, -5158, -5158, -5158, -5158, -5158,  4962,
    4638,  5521,  5524,  5527, -5158, -5158, -5158,  5519, -5158,  3036,
     297, -5158, -5158,  5522, 90552,  5526,  5536,  5537,  5553,  3037,
   -5158,  5529,  5554,  5557, -5158, -5158,  5560,  5562,  5564,  5568,
    3054,  5570, -5158, -5158, -5158,  5459,  5558,  5571, -5158, -5158,
   -5158, -5158,  1084, -5158,  3084,103922, -5158,  5041, -5158,102966,
   -5158, -5158, -5158,103922,116125, -5158, -5158,  1274,103922, -5158,
     124, -5158, -5158, -5158, -5158, -5158, -5158,103922, 11541, -5158,
   11541, -5158,116125, -5158,  2351, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158,  6881, -5158, -5158,  5567, -5158, -5158,
   -5158, -5158, -5158, -5158,  5654,  5669,103922, -5158,  5592, -5158,
   -5158, -5158,  5593,103922,103922,  3008, -5158, -5158, -5158,  1299,
   -5158, -5158, -5158, -5158,110974,   549,  5529,  5529,  1059,  5597,
    5601,  3085,  5603,  5604,  5529,  5606,  5607,  5609,  5610,  5617,
    5619,  5620,  5598,  3088,   307, -5158,  3099,  5602,  3110,  3133,
   -5158,  1537, -5158, -5158,103922,  5621, -5158,  2595, -5158,  3813,
   -5158,  1779,  5626, -5158,  5629,  1264,  5631,  3138, -5158, 58380,
   -5158, -5158, -5158, -5158,  2169, -5158, -5158,  5632,103922,103922,
     138, -5158, -5158, -5158, -5158,  8456,  7992, -5158, -5158,  5638,
   -5158, -5158, -5158,  3144, -5158, -5158, -5158, -5158, -5158,  5850,
   -5158,103922,  5639, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158,  5642,  6004, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
  103922, -5158, -5158,  3151,  5640,103922,  5646,  5241, -5158, -5158,
   -5158,  5647,  5649,  5650, -5158, -5158,  1107,  3178, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158,103922,  5652,  5656,  5657,  5738,
     981, -5158,  2058, -5158, -5158,  5658,  5662,  5663, -5158, -5158,
    3193,  5667,  5675, -5158, -5158, -5158,103922, -5158, -5158, -5158,
    5676, -5158, -5158, -5158, -5158, -5158, -5158, -5158,  8031, -5158,
    8456, -5158, -5158,  8031,  7422, -5158, -5158, -5158, -5158, -5158,
   -5158,  3813,  1433,103446,  5677, -5158,  5726, -5158, -5158,103922,
   -5158, 89596, -5158, -5158, -5158,  6098,  5683,  6628,  5687,  5698,
   -5158,  3200, -5158,  6799, 90552, -5158,  5699, -5158, -5158, -5158,
    5459, -5158, -5158, -5158,102966, -5158,103922,  5700, -5158, -5158,
    3207, -5158, -5158, -5158, -5158, -5158, -5158, -5158,  5706, -5158,
    9610, -5158,   981, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
    8456, -5158, -5158, -5158,  5709, -5158,   572,  3216,   616,  5716,
    3222, -5158, -5158,  2595, -5158,  5714,  5714, -5158,  5713,  5719,
   -5158, -5158, -5158,103922, -5158,  8456,   842,  5720, -5158, -5158,
   -5158,  5721, -5158,  5722,  5727,  5724, -5158,  3445, -5158,  3238,
   -5158, -5158, -5158, -5158,  5735, -5158, -5158, -5158, -5158,  5737,
     207,  5739, -5158,  5743,  5744, -5158, -5158, -5158,  6007, -5158,
    6200,  5747,  5752,  5755, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158,  3260, -5158,  3271, -5158,  3280,  8031, -5158, -5158, -5158,
    3813,  6011,  5756,  5763, -5158, -5158, -5158, -5158, -5158, -5158,
  103922, -5158, -5158, -5158, -5158, -5158, -5158,    94, -5158, -5158,
   -5158,103922,103922, -5158, -5158, -5158,  2234,103922,103922,  5993,
   -5158, -5158,103922,  8379, -5158, -5158,  8456, -5158,  8456, -5158,
     621, -5158, -5158, -5158, -5158, -5158,  5764, -5158, -5158,  5765,
    5766,  5767,  -101,  5772,  5773,  5778, -5158,  5779,  5780,  5783,
    3284,  3285, -5158,  3297, -5158, -5158, -5158, 58865, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158,  8456, -5158, 13827, -5158,  3300, -5158, 13827,    94,  2037,
   -5158, -5158, -5158,    86, -5158, -5158, -5158, 13827, -5158, 59350,
   13827
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,     0,     0,     0,     0,  1156,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1841,     0,
       0,     0,     0,     0,  1135,     0,  1134,     0,     0,     0,
       0,     0,     0,     0,  1066,  1067,     0,     0,    42,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1078,  1076,     0,     0,   175,   444,
    1071,  1073,  2055,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1257,     0,     0,     0,     0,     0,     0,     0,
       0,   177,     0,     0,     0,  1102,  1106,  1107,     0,  1103,
    1104,  1105,     0,     0,     0,     0,   123,     0,     0,     0,
       0,     0,     0,     0,  1841,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1163,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   773,     0,
       0,     0,     0,     0,     0,  1841,  1258,  1259,     0,     0,
       0,    38,     0,     0,     0,     0,     0,     0,     0,   861,
     176,   866,     0,     0,     0,     0,  1087,     0,     0,     0,
       0,  1160,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1164,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2054,     0,     0,     0,     0,     0,   867,
       0,     0,     0,     0,     0,     0,     0,  1121,     0,     0,
       0,     0,     0,  1841,  1256,  1865,  1326,   143,  1233,   666,
     142,   365,   145,   850,  1872,   875,   877,   879,   881,   883,
    1920,  1923,  1926,  1914,  1917,  1935,  1929,  1938,  1841,     0,
    2056,  2050,  2057,  2051,  2052,  2053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1841,  1841,  1206,  1841,  2019,
     200,  1210,   774,   912,     0,     3,   204,     0,     0,    36,
      40,    37,    39,  1215,   129,   180,     0,   682,   682,   182,
       0,   201,   191,   199,     0,   206,  1841,     0,   752,   364,
     220,   377,   412,   433,   379,   892,     0,   895,    35,   893,
     894,   865,     0,    48,    52,    34,   891,     5,   220,     0,
     910,   924,   945,   952,   972,  1841,   979,     0,     0,     0,
    1213,  1202,  1232,   220,  1252,   220,  1296,  1298,  1322,   220,
    1328,     0,     0,     0,  1350,  1861,     0,  1867,     0,     0,
       0,     0,     0,     0,     0,     0,  1203,  2049,     0,  2156,
     203,  1841,  1841,     0,     0,  2019,     0,    42,     0,     0,
       0,     0,  1208,     0,    44,  1215,     0,     0,   872,     0,
    1841,  1841,  1841,  1841,  1841,  1841,     0,     0,   870,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1841,  2019,     0,     0,   975,     0,     0,     0,     0,
    1861,     0,  1841,  1841,  1841,     0,     0,     0,  1841,     0,
       0,     0,  1841,  1841,  1841,     0,  2019,  1841,     0,     0,
       0,     0,     0,     0,     0,   873,     0,  1841,    47,     0,
       2,     0,  1841,  1841,  1841,     0,  1841,  1841,   178,  1841,
       0,  1841,   153,   154,   155,   163,   156,   157,   150,   158,
     159,   161,   164,   162,   165,   160,   166,   167,   168,   169,
     170,   171,   172,   173,   174,  2158,   151,   152,     0,     0,
    1841,     0,  1841,  1841,     0,     0,     0,    41,  2019,  2019,
    2019,  2019,     0,  1841,  1841,  1841,  1841,  1841,  1841,     0,
       0,     0,  1841,     0,  1841,  1841,  1841,  1841,     0,    49,
      45,    51,     0,   871,  1841,  1841,  1841,  1841,     0,  1841,
       0,     0,     0,     0,  1841,  1841,  1841,  1841,     0,     0,
    1841,     0,  1841,  1841,  1841,  1841,     0,     0,   925,     0,
       0,  1841,  1841,  1841,  2019,  1841,   868,  2019,     0,     0,
     184,  1841,  1841,     0,     0,     0,     0,     0,     0,     0,
    1841,  1841,  1841,  1841,  1841,  1841,  1841,     0,   917,     0,
     111,     0,  1841,     0,     0,     0,   119,     0,  1841,     0,
      98,   725,   311,   141,   848,   299,   674,   875,  1898,  1900,
    1903,  1905,  1907,  1909,  1912,  1841,   109,   110,   106,   107,
       0,   818,    87,    88,     0,     0,    90,   189,    86,     0,
     378,    84,    85,   312,   312,  1841,    83,    89,    82,     0,
      81,  1168,    94,   101,   102,   104,    79,     0,   103,    97,
       0,    91,    80,    78,    77,    93,     0,    95,    96,  1902,
    1911,     0,     0,     0,  1841,  1841,     0,     0,     0,     0,
       0,   185,     0,   357,  2019,     0,     0,   179,     0,  1841,
    1841,     0,     0,  1841,  1832,  1832,  1841,  1841,     0,    46,
    1832,     0,  1841,     0,  1841,  1841,  1841,   187,     0,     0,
    1841,     0,     0,  1841,     0,  1841,  1841,  1841,  1841,     0,
    1841,     0,   869,     0,     0,  1841,  1841,   917,  1841,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2019,     0,     0,     0,   928,  1841,
    1841,  1841,  1841,  1841,  1841,     0,   149,     0,     0,     0,
       0,     0,     0,     0,   193,   892,     0,     0,   892,   895,
       0,     0,     0,   663,  1841,  1841,  1841,  1841,  1841,  1841,
       0,   974,   973,  1841,     0,     0,     0,     0,     0,     0,
       0,  1155,  1841,     1,     0,     0,     0,    19,     0,   147,
       9,     0,   125,   128,    38,   861,   181,   183,     0,     0,
    2157,  2019,     0,   681,  2159,     0,   192,   892,     6,   205,
    1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,     0,   360,
       0,   900,     0,     0,     0,    10,   816,     0,    42,     0,
     798,   818,  1841,  1841,     0,     0,     0,  1841,   892,     0,
       0,   788,   793,   815,     0,     0,     0,   796,     0,     0,
     799,     0,   814,   812,   813,     0,   817,   359,   188,   202,
     896,   913,   914,     0,   683,   189,  1841,  1841,  1841,  1841,
       0,   946,   947,   948,   950,   949,   951,  1841,  1841,  1841,
    1841,  1841,  1841,  1841,  1841,  1841,  1841,  1841,  1841,  1841,
     971,   978,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,
    1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,
    1225,  1225,  1225,  1225,  1225,  1225,  1207,  1205,  1204,     0,
       0,     0,     0,     0,     0,     0,   358,  1841,   899,  1331,
       0,  1841,   898,     0,     0,     0,     0,     0,     0,   356,
    1841,   897,  1843,  1842,  1857,   148,  1841,  1238,   668,  1250,
    1863,  1324,  1221,   367,  1875,     0,   197,     0,     0,  1850,
       0,     0,     0,  1834,     0,     0,  1841,     0,     0,     0,
     189,  1225,     0,     0,   451,  1834,     0,     0,     0,     0,
       0,     0,   628,     0,  2019,     0,  1841,  1841,     0,     0,
       0,  1841,  1841,  1841,  1841,  1841,  1841,  1841,  1841,  1841,
    1841,     0,   189,  1225,  2183,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     444,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2019,     0,     0,     0,     0,     0,     0,     0,     0,
    1189,     0,     0,     0,  1195,     0,     0,  1841,     0,  1121,
    2019,   885,  1619,     0,     0,     0,     0,     0,     0,  1839,
    1990,     0,     0,  2019,     0,     0,     0,     0,  2183,     0,
    2019,     0,     0,     0,     0,     0,  1083,     0,     0,     0,
       0,  1841,     0,     0,     0,     0,     0,     0,  1167,     0,
    1079,     0,  1077,  1189,     0,     0,  1195,     0,   443,     0,
       0,     0,     0,     0,     0,  1072,  1074,     0,     0,     0,
       0,     0,     0,     0,   270,   270,   270,  1848,  1185,     0,
       0,  1841,  1841,  1841,  1841,     0,     0,     0,   908,     0,
       0,     0,     0,  1837,     0,     0,     0,  1840,     0,     0,
    1621,     0,     0,     0,     0,  1223,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1185,     0,     0,  2016,
       0,  2025,     0,  2028,     0,  2037,     0,  2043,  2152,  2154,
    1108,     0,     0,     0,     0,  2146,  2148,  2150,  2151,  1112,
       0,     0,  1113,     0,     0,  1109,     0,     0,     0,     0,
    1110,     0,     0,     0,  1111,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1501,     0,   490,   491,
     520,   522,     0,   524,   519,   526,   502,  1500,   503,   504,
    1499,     0,  1497,  1849,     0,     0,     0,     0,  1941,     0,
       0,     0,     0,     0,  1841,     0,   630,     0,   630,   630,
     630,  1841,  1838,     0,     0,     0,     0,     0,  2060,     0,
       0,  1846,     0,     0,     0,     0,  1019,     0,     0,     0,
       0,     0,     0,    79,    77,     0,     0,     0,  1495,     0,
     919,     0,   918,     0,  1841,    99,     0,  1569,  1841,     0,
     100,     0,     0,   719,     0,     0,  1932,     0,     0,     0,
       7,     0,    92,   112,   113,     0,   140,     0,     0,   319,
    1225,  1225,  1225,   718,     0,     0,   177,    55,   163,   365,
     875,   736,   738,   737,    53,   739,   734,     0,    61,     0,
     720,     0,   740,   735,    59,   741,     0,   853,     0,   189,
    1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,
    1225,  1576,  1574,  1571,     0,  1572,  1570,   301,   676,     0,
       0,     0,     0,  2019,  2019,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1841,   862,   864,
     863,     0,     0,     0,     0,     0,     0,  1177,  1176,  1171,
    1170,  1173,  1172,  1182,  1182,  1178,     0,  1175,  1174,     0,
       0,     0,  1838,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1786,     0,     0,     0,
       0,     0,  1774,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   679,     0,   680,     0,     0,     0,     0,     0,
       0,  1841,     0,  1841,     0,     0,     0,     0,     0,  1841,
    1841,     0,     0,  1841,     0,     0,     0,     0,     0,     0,
       0,  1841,     0,     0,     0,     0,     0,     0,     0,  1225,
       0,     0,  1193,     0,     0,     0,    13,   670,   766,  1236,
    1211,  1253,  1332,  1201,     0,   189,  1225,     0,   662,   541,
       0,     0,     0,     0,     0,     0,     0,   511,   510,     0,
     506,   508,     0,  1841,  1841,   982,   189,  1307,  1442,  1841,
       0,   371,  1960,  1961,  1963,  1495,  2021,     0,  1957,    18,
      16,     0,    15,     0,     0,    29,    31,    30,    25,    26,
      28,     0,   136,   138,     0,     0,   715,     0,   686,     0,
       0,     0,     0,  1841,    11,  1247,  1862,  1323,  1230,  1248,
    1873,     0,   361,   363,   362,     0,     0,     0,   244,     0,
     237,   240,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     0,   219,   221,     0,   753,   754,   756,     0,   755,
     818,  1841,  1841,     0,     0,     0,     0,     0,     0,   781,
     776,   818,   818,  1225,     0,   742,   790,     0,   788,     0,
       0,   787,     0,     0,     0,   369,   370,     0,   788,   818,
     818,     0,   189,   818,  1225,  1843,   189,     0,   926,   927,
       0,   936,   939,  1841,  1841,   955,   959,   960,   961,   953,
     954,   956,   957,   958,   963,   964,   962,   932,   971,  1841,
     966,     0,   965,  1249,  1866,  1327,  1209,  1235,   667,   366,
     851,  1874,   876,   878,   880,   882,   884,  1921,  1924,  1927,
    1915,  1918,  1936,  1930,  1939,  1841,     0,   940,     0,  1346,
    1343,   943,   944,  1344,  1341,  1345,  1342,  2015,   500,  1297,
       0,  1340,  1337,   941,   942,  1338,  1335,  1334,  1339,  1336,
    1841,  1841,     0,  1234,     0,  1330,     0,  1880,  1880,  1880,
    1880,  1880,  1880,  1880,  1880,  2176,  2163,     0,     0,  2164,
    2165,  1031,  1010,     0,  1353,     0,   444,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2019,     0,     0,     0,
    2021,  2021,     0,     0,   189,     0,     0,  1858,  1009,  1841,
       0,  1841,  1040,  1011,  1841,  1841,  1841,  1145,  1841,     0,
       0,  1167,     0,     0,     0,     0,     0,     0,     0,   189,
       0,  1841,   455,   901,  2019,  1841,     0,  1841,  1841,  1841,
       0,  1133,  1288,  1480,  2019,  1841,  1841,  1841,  1841,     0,
    1841,  1841,  1841,     0,     0,     0,  1841,     0,     0,  1841,
       0,   189,  1225,     0,  1841,  1841,  1007,  1014,  1841,     0,
     986,  1140,   987,     0,  1841,  1841,  1974,     0,  1757,  1841,
    1968,  1985,     0,     0,  1984,  1257,   490,  1969,  1970,     0,
     491,     0,  1540,  1978,     0,  1971,     0,  1972,     0,  1764,
    1965,  1986,  1983,  1973,     0,  1964,  1967,  1954,  1966,  1841,
    1841,  1841,     0,  1476,  1477,  1841,  1185,     0,  1161,  1841,
       0,  1989,     0,     0,     0,    50,     0,   189,  1225,     0,
    1858,   292,  1841,  1858,  1767,  1858,     0,  1003,  1478,  1841,
    2019,     0,  1841,  1082,     0,     0,   428,   426,     0,   189,
    1841,  1225,     0,   429,   427,  1080,     0,  1141,   991,     0,
     997,     0,  1841,  1086,  1841,   442,     0,     0,  1075,     0,
    1841,  1841,  1841,  1841,  1158,  1841,   434,     0,     0,  1841,
       0,  1841,     0,  1856,     0,  1830,  1858,  2019,  2019,     0,
       0,     0,     0,  1841,  1841,  1841,  1841,  1841,  1068,  1069,
    1185,  1854,     0,     0,     0,  1126,     0,  1841,  1841,  1090,
    1025,     0,     0,  1841,  1151,  1841,  1005,  1841,   380,  1137,
    1283,  1472,  1017,     0,  1841,  1841,  1841,  1448,  1841,  1313,
    1841,  1841,   399,  1225,  1225,  1095,  1096,     0,  1094,  1841,
    1100,  1101,  1290,  1114,  1117,  1097,  1115,  1118,  1098,  1116,
    1119,  1099,  1841,  1143,  1841,     0,  2019,  1854,  1841,  1144,
    1841,  1146,   410,  1028,  1281,  1300,  1397,   409,  1027,  1280,
    1299,  1396,  1029,  1282,  1301,  1398,  1138,  1284,  1473,  1841,
       0,  1841,  1841,  1832,  1841,  1841,     0,  1389,  1841,   411,
    1030,  1399,  1841,   407,  1841,     0,   189,  1225,  1070,   788,
     373,   375,   376,   440,     0,     0,     0,   436,     0,     0,
     663,     0,   788,  1841,  1832,     0,  1841,  1841,  1841,     0,
       0,     0,     0,  1185,  1858,  1841,  1841,  1841,  1841,  1841,
     761,     0,     0,  1841,  1841,  1841,     0,  1406,  1060,  1841,
       0,   725,   725,     0,     0,     0,   730,   724,   726,   308,
       0,   306,     0,   189,  1225,   823,     0,     0,     0,     0,
     842,   841,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   839,   819,   844,     0,   821,  1841,     0,   190,   139,
     319,   298,  1841,   324,   328,   336,     0,   315,     0,   320,
     321,     0,   326,   682,     0,     0,  1180,  1179,     0,   733,
      54,     0,   725,    60,   717,   721,     0,  1880,  1169,   189,
       0,   849,   300,   675,  1899,  1901,  1904,  1906,  1908,  1910,
    1913,  1841,  1841,  1841,     0,  1880,  1880,  1841,  1841,  1020,
    1022,     0,     0,     0,  1841,  1273,  1274,     0,   189,  1225,
    1275,     0,     0,  1484,  1870,     0,     0,  1841,   788,  1841,
     983,  1006,  1013,  1063,     0,     0,     0,     0,  1461,  1841,
    1841,     0,  1834,     0,  1023,  1128,  1841,  1214,     0,     0,
    1841,  1142,  1841,     0,  1858,  1008,  1015,  1139,  1286,  1302,
    1475,  1035,  1841,  1841,  1034,  1841,     0,  1785,     0,     0,
       0,    57,    58,     0,     0,  1775,  1776,  1024,   874,  1841,
    1858,  1153,  1858,     0,  1841,  1841,     0,   403,     0,     0,
       0,     0,  1059,  1129,     0,     0,     0,     0,     0,     0,
       0,   270,   270,     0,     0,  1621,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   189,     0,     0,  1122,     0,     0,     0,
    1124,  1125,   189,     0,     0,  1841,     0,     0,   663,  1841,
    1841,  1841,  1841,   213,     0,     0,   215,  2019,     0,   977,
     976,     0,  1962,   439,     0,     0,  1841,  1841,  1154,    23,
      21,    24,    20,     0,     0,     0,   129,   121,   682,   208,
     126,   134,   132,     0,   131,   133,   130,   716,   685,  2019,
     715,     0,     0,   692,   693,   697,   698,    72,    73,    74,
       0,   695,   696,    63,   712,  1898,  1900,  1903,  1909,  1912,
      66,    67,    68,     0,    70,     0,   690,   688,    65,     0,
      62,     0,     0,    69,   712,  1902,   108,   220,    75,    76,
       0,  2161,  2019,     0,  1843,  1841,  1841,     0,     0,     0,
    1841,  1841,  1841,     0,  1841,  1841,  1841,     0,  1841,  2185,
       0,  1841,     0,   759,     0,   758,   771,     0,   855,     0,
       0,  1841,   775,     0,  1841,  1841,   855,   855,     0,   742,
     783,   784,     0,   748,   782,     0,     0,   777,     0,     0,
     794,   795,   745,     0,   744,   846,     0,   855,  1841,   855,
     189,     0,   855,  1841,  1987,     0,  1841,  1841,     0,   935,
     937,     0,   968,   969,   980,     0,     0,     0,     0,     0,
       0,   194,   938,  1841,     0,  1245,     0,     0,  1841,  1244,
    1844,  1351,     0,  2019,  2019,  2019,     0,     0,  1896,  1886,
    1897,  1894,  1888,  1889,  1945,  1895,     0,  1877,  1878,  1882,
    1881,  1893,     0,     0,     0,     0,     0,     0,     0,  1225,
     198,     0,  1836,     0,  1841,  1841,     0,  1841,  1841,  1841,
       0,     0,     0,     0,     0,   438,     0,   189,  1225,     0,
    1550,   651,     0,     0,     0,     0,  1355,   453,   452,   451,
     449,     0,   447,   451,     0,  1189,   629,  1195,  2019,  1841,
    1841,  1841,  1841,  1841,     0,     0,  1841,     0,  1841,     0,
       0,  1532,  1534,     0,   500,   923,     0,   921,  1320,     0,
    1499,     0,  1676,     0,     0,  1668,     0,  1506,  1505,     0,
    1503,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     189,     0,     0,  1835,     0,     0,     0,  1190,   985,     0,
    1858,     0,     0,  1760,  1841,  1979,  1980,  1981,  1841,     0,
    1758,  1759,  1841,  1841,  1841,   904,  1832,  1841,  1977,  1841,
    1841,  1002,     0,     0,  1841,  1702,  1699,     0,     0,  1698,
       0,     0,     0,    43,     0,     0,     0,     0,  1841,  2000,
    1841,  1999,  1997,     0,  1994,  1995,  2001,  2002,  1991,  1860,
    1841,     0,     0,     0,     0,     0,   189,     0,     0,     0,
    1304,  1841,     0,  1552,  1366,  1841,  2021,  1354,     0,   500,
    1841,  1459,     0,  1318,  1460,   189,     0,     0,  1841,     0,
     989,   990,  1457,     0,     0,  1317,  1458,     0,   647,     0,
     647,     0,     0,   274,   275,   276,   271,   272,  1016,   270,
    1278,   270,  1470,  1852,  1841,  1404,  1841,  1841,   998,   999,
    1000,  1001,   500,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1841,     0,     0,
       0,     0,  1858,     0,  1841,     0,     0,  1213,     0,     0,
    1524,     0,  1841,  2045,  2018,  2039,  2030,  2027,   908,  2017,
       0,     0,  2026,     0,     0,  2029,     0,     0,  2038,     0,
    2044,  2153,  2155,  2147,     0,     0,  1195,     0,  1841,  1841,
       0,  1195,     0,     0,     0,     0,  1841,     0,     0,  1498,
       0,  1835,     0,     0,     0,   189,     0,  1942,   787,     0,
     634,   640,     0,   490,     0,     0,   491,   642,   644,   641,
     639,   637,   519,   643,     0,   645,   631,   632,   390,     0,
     392,   391,   639,  1858,  1858,     0,     0,  2019,  1653,  1653,
       0,  2061,   909,  1433,  1847,     0,  1226,     0,     0,     0,
       0,     0,  1392,     0,     0,  1187,  1187,     0,   906,     0,
       0,     0,     0,  1191,  1191,     0,  1496,   920,   673,     0,
    1841,     0,  1841,  1841,     0,  1841,  1841,     0,   304,   189,
       0,  1933,  1841,  1841,  1841,  1841,  1841,  1841,  1841,  1841,
     971,     0,     0,  1841,  1841,  1841,   820,     0,   120,     0,
       0,   313,     0,  1841,     0,   297,   317,   348,   318,     0,
    1225,   345,   342,   323,   322,   327,     0,  1225,  1843,     0,
       0,   725,     0,     0,  1841,     0,  1577,  1575,     0,  1568,
       0,     0,  1853,     0,     0,     0,     0,     0,     0,     0,
       0,  2019,  1685,  1688,  1686,  1690,  1692,   788,     0,  1687,
     189,     0,     0,     0,     0,     0,     0,     0,     0,  1165,
     186,     0,     0,     0,  1183,  1184,  1061,  1062,  1289,     0,
       0,  2019,  1833,  2019,  1555,  2019,     0,  1189,  1195,     0,
    2019,  1412,     0,     0,     0,     0,     0,  1087,  1793,  1787,
    1858,  1841,     0,     0,     0,     0,  1781,  1779,  1780,  1782,
    1778,  1026,  1777,     0,  1409,  1494,     0,  1189,  1195,     0,
    1508,  1508,  1508,  1508,  2019,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1194,  1123,   500,     0,     0,
    1841,     0,  1581,     0,     0,     0,     0,  1578,  1858,     0,
     541,   541,     0,   216,   218,   217,     0,     0,     0,   254,
     255,   252,   251,   253,     0,   507,  1841,   529,  1240,  1243,
    1242,  1841,   372,  1869,  1959,  1958,     0,    27,    32,    33,
     137,   127,     0,     0,   687,   684,     0,   712,   694,   786,
      71,  1841,   701,   712,   691,   689,   712,     0,  1225,  1225,
    1225,  1225,  1225,  1225,   713,   702,     0,     0,  2160,  2071,
     220,     8,  1231,     0,   282,     0,     0,   282,   286,   287,
       0,   277,     0,     0,   280,   284,   282,     0,     0,     0,
       0,     0,     0,  1563,  1841,   282,     0,   222,     0,     0,
     757,  1841,   803,   854,   797,   847,   800,   801,   809,   807,
       0,     0,     0,   806,   808,  1843,     0,   750,   749,   747,
     746,   788,   845,   805,     0,   802,     0,  1841,   810,  1841,
       0,     0,     0,     0,     0,     0,     0,   933,  1841,   981,
     970,   967,   671,   767,  1237,  1212,  1254,  1333,   500,  2014,
    1246,  1348,  1349,     0,     0,  1890,  1892,  1891,  1841,  1841,
    2019,  1887,  1239,  1880,   669,  1251,  1864,  1325,  1222,   368,
    1876,  2177,  2166,     0,     0,     0,     0,     0,   189,     0,
       0,  1285,     0,     0,     0,  1858,     0,     0,     0,     0,
    1858,  1841,     0,  1012,     0,     0,  1841,     0,     0,  1841,
       0,     0,   461,     0,     0,     0,     0,   485,   482,   533,
     470,   906,   487,   467,     0,   460,   476,   459,     0,   471,
       0,     0,   465,     0,   472,     0,  1841,     0,   456,   457,
     474,   475,   464,   473,   479,   454,   489,   466,   468,  1858,
       0,     0,     0,     0,     0,  2022,     0,  2031,     0,  2034,
       0,  2040,     0,  2046,  1130,     0,   189,     0,     0,  1841,
     988,     0,  1319,  1452,  1841,     0,  1841,  1858,  1841,  2019,
       0,  1858,  2019,     0,     0,     0,  1841,  1841,  1131,  1479,
       0,     0,     0,  1852,  1841,  1841,  1197,  1199,  1200,  1196,
    1198,   984,  1841,  1841,   930,     0,   929,     0,     0,     0,
       0,     0,     0,   905,  1841,     0,  1956,  1955,  1620,  1841,
       0,     0,   189,  1225,     0,     0,     0,   535,     0,     0,
       0,     0,   886,     0,  1186,   769,  1186,  1186,  1162,  1832,
    1998,  1993,  1996,  1852,  1992,  1841,     0,     0,     0,     0,
    1858,     0,     0,   294,   292,   295,   292,  1851,   292,  1858,
    1858,     0,     0,     0,  1772,  1768,  1769,  1767,     0,  1004,
    1841,     0,  1585,  2021,  1081,     0,  1841,  1858,   430,  1841,
    1085,   441,  1841,     0,  1088,     0,  1159,   435,     0,     0,
       0,  1383,     0,     0,     0,     0,     0,  1841,     0,   395,
    1841,     0,     0,  1261,     0,  1309,     0,  1444,     0,   397,
    1841,     0,  1263,     0,  1311,     0,  1446,  1841,   500,     0,
    1841,  1841,  1127,  1622,  1408,  1841,     0,  1841,  1091,  1224,
    1218,  1216,  1152,     0,     0,   381,     0,   992,     0,  1447,
       0,  1312,     0,  1294,   398,  2149,  1045,     0,  1858,     0,
       0,  1047,     0,   528,   505,   521,   523,     0,  1834,   525,
     527,  1185,  1185,   408,  1841,   405,     0,  1841,   374,   415,
    1841,  1841,  1841,  1841,     0,   437,   568,   389,   414,     0,
    1841,     0,     0,     0,  1858,  1018,  1185,     0,  1852,     0,
     189,  1225,  1186,  1186,  2019,  1868,     0,     0,     0,  1841,
    1841,  1614,     0,   765,     0,   763,  1841,     0,     0,     0,
    1841,   117,   725,   116,     0,   725,   105,   728,   729,     0,
     727,     0,  1841,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     822,   118,  1841,   303,   908,   331,   316,     0,  1841,   343,
       0,   325,  1181,    56,   723,     0,   852,  1841,     0,     0,
       0,   307,  1576,  1573,   302,   677,  1841,     0,  2004,     0,
       0,     0,  1021,   189,     0,     0,     0,  1841,  1691,   369,
     370,  1695,  1841,  1697,     0,     0,  1270,  1852,  1852,     0,
     189,  1225,     0,     0,  1841,  1434,   413,  1858,     0,  1841,
    1841,  1440,  1841,  1841,     0,     0,     0,  1487,     0,     0,
    1858,  1783,  1832,  1089,  1841,  1841,  1841,  1841,  1393,  1788,
    1287,  1041,  1042,  1043,  1841,  1147,  1852,     0,     0,  1841,
       0,     0,     0,     0,     0,  1841,     0,     0,     0,     0,
       0,  2039,  2027,     0,  1136,     0,     0,  1841,  1582,   189,
    1225,  1841,  1416,     0,   554,   558,   906,   556,   560,   550,
     549,   553,     0,   545,   546,   562,   563,   564,   542,   543,
     548,     0,     0,   212,   209,   210,   211,   214,  1841,   518,
       0,   512,   514,     0,     0,    22,   207,     0,   703,   704,
       0,   711,   710,   713,  2019,   700,   713,   699,   189,    64,
    1899,  1901,  1904,  1910,  1913,     0,   707,   195,  2162,     0,
    2062,  2065,  1841,     0,   236,     0,   243,   245,     0,   238,
       0,     0,  1841,     0,   241,     0,   248,   250,     0,  1841,
     230,   229,  1841,   225,     0,     0,   268,     0,     0,   227,
     760,   772,   856,   860,   857,   859,   858,   778,   779,   780,
    1988,   751,   743,   818,  1841,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     934,   501,  1347,  1841,  2019,  1896,  1886,  1897,     0,  1894,
    1888,  1889,  1945,  1895,  1883,  1893,  1885,     0,  1879,  2019,
    2019,     0,     0,     0,     0,     0,     0,  1474,     0,     0,
     655,   652,   393,   452,   450,   448,  1483,   451,  1858,  1052,
    1858,     0,     0,  1841,  2019,  1841,     0,  1841,  1841,  1841,
     486,  1841,  1841,  2019,  1841,   478,   477,  1841,  1841,   455,
    1841,  1841,   386,   402,  1841,   994,  1316,  1451,  1841,  1841,
    1450,  1841,  1315,  1841,  1841,   401,     0,     0,  1386,   922,
    1321,  1684,  1682,  1683,  1678,  1677,  1680,  1356,  1357,  1673,
    1672,  1674,   908,  1670,  1841,  1504,  1388,  1841,     0,     0,
       0,  1855,   500,     0,  1376,  1189,  1195,  1189,  1195,  1982,
    1841,  1762,  1975,  1841,  1755,  1763,     0,  1541,  1841,  1765,
       0,  1976,     0,     0,   189,     0,  1841,  1701,  1700,     0,
    1703,     0,     0,  1841,  1841,  1841,  1841,  1587,  1586,  1594,
       0,  1589,  1590,  1592,  1617,  1596,   535,   535,  1617,  2019,
    1358,     0,  1305,     0,     0,  1303,  2019,  2019,     0,   293,
       0,     0,   288,  1360,     0,  1858,  1841,  1841,     0,  1841,
       0,  1858,   500,  1427,  1584,  1841,  1048,     0,   500,     0,
    1292,  1291,   273,  1279,  1471,     0,  1831,  2021,  1402,  1403,
    1856,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1185,   656,   656,  1092,
       0,  1880,  1527,  1526,     0,  1528,  1530,  1531,  1524,  1385,
    1841,  1858,  1387,  1860,  1856,  1858,  1833,     0,     0,     0,
    1841,     0,     0,     0,     0,   633,  1841,     0,  1859,  1859,
       0,     0,  2072,  2125,  2126,     0,  1662,  1666,  1660,  1661,
       0,  1657,  1667,  1664,  1654,  1655,  1658,  1430,  1653,     0,
       0,     0,   122,  1277,   189,     0,     0,  1535,  1535,  1185,
    1188,  1064,  1065,     0,     0,   665,   665,  1192,  1191,  1036,
    1038,  1191,     0,   672,     0,  1841,   731,  1841,   824,   825,
     827,   838,   826,   828,   829,   830,   831,   843,   833,   834,
     832,   835,   837,   836,   840,     0,     0,   319,     0,   337,
     338,   340,   339,   349,   351,   352,  1225,   350,   346,   344,
    1225,   220,   722,     0,     0,     0,     0,  1841,  2010,     0,
    2007,  2008,  2012,  2013,  2005,  1860,  1841,   500,   189,     0,
       0,  1276,     0,     0,     0,  1693,  1694,   788,     0,  1272,
    1271,   189,     0,     0,  1166,  1120,     0,  1157,     0,     0,
    1841,     0,  1951,     0,  1560,  1558,     0,  1562,  1561,  1555,
    1858,  1841,  2019,  1050,  1858,  1411,  1841,     0,  2019,     0,
       0,     0,     0,     0,     0,  1841,     0,   382,  1054,  1858,
       0,  1509,  1511,  1512,  1510,   446,  1132,  1293,  1486,     0,
       0,     0,  1485,  1579,     0,  1841,  1580,     0,  1841,   559,
    1841,   552,   551,  1841,     0,  1858,  1858,   516,  1841,   509,
     517,   532,   500,   500,  1241,  1352,   135,     0,   705,   709,
       0,   706,     0,  1907,     0,     0,   714,  2071,  2071,  2104,
    2078,     0,     0,  2091,     0,  2092,     0,     0,     0,     0,
       0,     0,  2111,     0,     0,     0,  1841,  2059,  2019,  2019,
       0,  2109,  2058,  2108,  2070,  2074,  2077,  2080,  2110,  2123,
     196,     0,   233,   223,   278,   279,   239,     0,   281,   242,
       0,     0,   265,     0,   264,     0,   258,   260,   261,   262,
     256,     0,  1566,  1567,  1565,  1563,   246,     0,     0,   224,
       0,   855,     0,     0,     0,     0,     0,     0,     0,     0,
     915,   916,   445,   768,   911,  1219,  1255,  1329,  1871,  1884,
       0,     0,     0,   788,  1948,     0,  1841,     0,  1841,  2019,
    2019,     0,  1481,  1051,  1841,     0,     0,  1841,   494,     0,
     626,   565,   566,   567,     0,     0,     0,     0,     0,     0,
    1841,     0,     0,     0,  1841,     0,     0,   455,   458,  2048,
    2024,  2042,  2036,  2033,     0,  2023,     0,     0,  2032,     0,
       0,  2035,     0,     0,  2041,     0,     0,  2047,  1533,     0,
       0,     0,     0,     0,     0,  1841,     0,     0,     0,     0,
       0,     0,   931,     0,     0,     0,  1833,     0,     0,     0,
    1841,   535,   539,   540,   536,   537,  1422,     0,     0,     0,
       0,     0,  1841,  1841,  1841,  1841,     0,     0,     0,     0,
       0,     0,  1841,  1185,     0,  1841,  1841,  1858,  1858,  1841,
       0,  1554,  1553,  1365,     0,     0,  1772,  1770,  1858,   431,
    1841,     0,  1841,  1084,     0,     0,     0,   649,   648,  1186,
    1405,  1852,     0,   394,   995,  1220,  1260,  1308,  1443,   396,
     996,  1262,  1310,  1445,  1032,  1186,     0,  1704,     0,     0,
    1093,     0,     0,  1525,     0,  1186,  1044,  1852,  2019,  1046,
    1502,  1186,  1186,   406,   636,   646,   638,  1841,   580,   575,
     576,   573,     0,   572,     0,   577,   584,     0,   579,   598,
     578,   592,   581,     0,   597,   595,   586,     0,   582,   591,
     587,   569,   570,   589,   593,   500,   387,  1826,  1826,     0,
       0,  1833,     0,     0,  1841,     0,  1858,  1431,     0,  1228,
    1229,  1227,     0,     0,     0,     0,  1513,  1033,   907,     0,
       0,     0,     0,     0,   114,   115,     0,   314,   331,  1841,
     332,   329,   330,   341,   353,     0,     0,     0,     0,     0,
     305,   678,  2011,  2009,  1852,  2006,     0,     0,  1856,     0,
    1689,  1696,     0,     0,     0,     0,     0,  1435,     0,   416,
       0,     0,  1833,  1833,  1841,  1841,     0,  1556,  1441,     0,
     500,  1049,  1784,  1858,  1841,  1789,  1792,  1791,  1790,     0,
    1841,  1148,  1053,     0,     0,  1841,     0,     0,     0,     0,
     544,  1417,  1858,   513,   515,   530,   531,   785,   708,  1841,
       0,  1225,  2067,  2068,  2066,  2079,     0,  2019,  2019,  1841,
    2019,  2019,  2019,  1841,  1841,  2019,  2019,     0,  2019,     0,
    2019,  1225,  1841,  2075,     0,     0,  2076,     0,  1841,     0,
    2099,  2098,  2100,  1841,  2124,   283,   285,   247,  1841,  1841,
    1841,     0,   231,     0,     0,   226,  1564,     0,   268,   235,
    1841,   804,  1919,  1937,  1916,  1931,  1922,  1928,  1925,  1940,
    1946,     0,  1944,   787,  1947,  1841,  1856,     0,  1524,     0,
       0,  1858,     0,     0,   496,  1841,   625,   484,   463,   483,
     534,   488,   462,     0,  1841,   469,   480,  1858,  1841,     0,
    1841,   993,     0,  1449,     0,  1314,     0,  1295,   400,     0,
    1682,  1679,  1681,  1673,  1671,  1507,     0,     0,  1852,   500,
    1058,  1858,  1056,  1858,  1756,  1542,  1766,  1761,     0,  1425,
    1841,     0,     0,   890,   887,   889,   888,  1626,  1625,     0,
    1628,     0,     0,  1637,     0,     0,  1627,     0,     0,  1623,
       0,     0,     0,  1648,  1652,  1651,  1650,     0,  1644,  1653,
       0,     0,     0,  1601,  1602,     0,  1608,     0,  1603,     0,
    1597,     0,  1605,  1599,  1600,  1598,  1613,  1615,  1604,  1618,
     770,  1420,  1426,  1617,  1423,  1419,     0,     0,  1306,     0,
       0,  1359,  1361,   290,   288,   291,   288,  1852,  1771,  1773,
     432,   500,  1428,  1583,   500,  1852,     0,  1547,  1407,     0,
    1852,     0,     0,  1186,   310,     0,   424,   425,  1217,     0,
    1841,  1543,  1371,  1841,   500,   500,     0,     0,  1841,  1841,
    1841,  1841,  1841,  1841,  1841,  1841,     0,     0,     0,  2073,
    2073,  2129,  1858,     0,     0,     0,  1656,     0,     0,     0,
       0,  1852,  1852,     0,  1186,  1514,   664,   764,   762,  1037,
    1039,   732,     0,     0,  1841,  1841,  1843,   335,  1934,  1943,
    1374,  1860,  1841,  1860,   189,  1225,     0,     0,   616,   604,
       0,     0,   615,   610,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   611,     0,     0,   620,     0,   599,
     609,     0,     0,  1952,  1858,  1858,     0,     0,  2020,     0,
    1410,     0,  1149,     0,   404,  2042,  2033,   557,   555,   561,
     547,  1415,   189,  1908,  1841,  1841,     0,     0,  2175,     0,
    2173,     0,  2169,  2165,     0,     0,  2060,     0,     0,  2140,
       0,     0,     0,     0,     0,  2102,  2144,     0,  2143,  1841,
       0,  1225,   971,  2087,  1841,  1841,  1841,  1841,  2101,  2179,
    2178,  2180,     0,     0,     0,     0,   259,   257,   232,     0,
       0,     0,     0,  1950,  1949,     0,     0,  1852,     0,     0,
       0,     0,  1482,     0,     0,  1841,     0,   627,  1858,     0,
     383,   455,  1858,     0,     0,  1377,     0,  1057,  1055,     0,
    1421,   538,  1841,  2184,  1841,  1841,  1841,  1841,  1841,  1588,
       0,  1841,  1841,  1841,  1841,  1595,     0,  1591,  1593,  1841,
    1841,  1841,  1841,     0,  1841,     0,     0,  1833,  1186,  1186,
     296,   292,     0,   289,     0,  1364,     0,     0,  1414,     0,
       0,     0,  1264,  1384,     0,  1757,     0,     0,     0,     0,
    1753,  1740,     0,  1722,     0,     0,  1725,  1719,  1718,     0,
    1721,     0,     0,  1727,  1726,  1729,     0,     0,     0,  1744,
    1728,  1746,     0,  1704,  1723,  1743,  1705,  1706,  1741,     0,
     659,   658,   661,   660,   657,  1529,     0,  1186,     0,     0,
       0,     0,   635,     0,     0,     0,     0,     0,  1653,     0,
       0,   571,   388,     0,  1852,  1852,  1859,  1859,     0,  2019,
    1367,  1663,  1659,  1665,  1432,   500,  1539,  1537,  1536,  1538,
    1390,  1391,  1520,  1517,  1518,     0,     0,  1513,  1523,  1515,
    1522,     0,     0,   333,   331,     0,     0,   355,  1852,  1852,
       0,     0,     0,  1841,  1841,  1841,  1841,  1841,     0,  1841,
       0,  1841,  1841,  1841,  1841,  1841,  1841,     0,   418,     0,
     417,     0,  1266,     0,  1859,  1841,  1437,  1439,  1559,  1557,
    1833,  1833,  1150,     0,  2084,  2083,  2121,     0,  1841,  2120,
       0,  1841,  2105,  2122,     0,  2107,  2119,  1841,     0,  2103,
       0,  2113,     0,  2112,  1841,  2106,  2019,   189,  1841,     0,
    2082,  2081,  2085,  2086,  1841,  2182,   267,   266,   263,     0,
     234,     0,  1841,  1856,  1856,  1488,  1551,   654,   653,     0,
       0,     0,     0,   496,  1858,   493,   481,     0,   495,     0,
       0,  1856,  1424,     0,  1841,     0,     0,     0,     0,     0,
    1624,   902,     0,     0,  1645,  1675,     0,     0,     0,     0,
       0,     0,  1616,  1418,  2003,  1704,     0,     0,  1852,  1429,
    1852,   650,     0,  1856,     0,  1841,  1832,     0,  1856,  1841,
    1717,  1711,  1832,  1841,     0,  1712,  1708,     0,  1841,  1724,
       0,  1713,  1715,  1737,  1738,  1714,  1709,  1841,     0,   309,
       0,  1852,     0,  1543,     0,  1856,  1860,  1852,  1852,   574,
     588,   594,   585,   596,     0,   590,   583,  1828,  1827,  1455,
    1456,  1795,  1795,  2127,     0,     0,  1841,  2138,  2130,  2131,
    2135,  2134,     0,  1841,  1841,     0,  1186,  1859,  1516,     0,
     354,   347,  1373,  1375,     0,     0,   902,   902,     0,     0,
       0,     0,     0,     0,   902,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   600,     0,     0,     0,     0,
    1852,  1953,  1858,  1858,  1841,     0,  2170,     0,  2174,  2171,
    2097,  2141,  2140,  2093,     0,     0,     0,     0,  2145,     0,
    2088,  2181,   269,   228,     0,  1852,  1852,     0,  1841,  1841,
       0,   497,   492,  1858,   384,     0,     0,  1852,  1636,     0,
    1641,  1640,  1642,     0,  1638,  1630,  1631,  1632,  1633,     0,
    1634,  1841,     0,  1646,  1647,  1611,  1609,  1607,  1610,  1612,
    1606,     0,     0,  1858,  1363,  1413,  1549,  1548,  1852,  1265,
    1841,  1754,  1860,     0,     0,  1841,     0,     0,  1716,  1710,
    1747,     0,     0,     0,  1707,  1368,  1186,     0,  1546,  1545,
    1544,  1852,  1852,  1400,  1401,  1841,     0,  1794,     0,     0,
    2019,  2139,  2019,  2128,  1186,     0,     0,     0,  1852,   334,
       0,     0,     0,   621,   622,   605,  1841,   617,   623,   624,
       0,   619,   606,   602,   612,   607,   608,   603,     0,   419,
       0,  1268,  1267,     0,     0,  1859,  1859,   420,  1438,  1436,
    2118,  2167,     0,  1841,     0,  2114,     0,  2116,  2115,  1841,
    2089,  1841,  1856,  1490,  1489,     0,     0,     0,     0,     0,
     495,     0,  1378,     0,  1841,  1629,     0,   903,  1649,  1852,
    1704,  1362,  1382,  1852,  1841,  1732,  1841,     0,  1736,  1720,
       0,  1730,  1731,  1739,  1543,  1856,  1379,  1369,     0,  1852,
       0,  1852,  2019,  2136,  2132,  1852,  1521,  1519,  1859,  1493,
       0,  1462,   601,   613,     0,   614,     0,     0,     0,     0,
       0,  1852,  1852,     0,  2172,  2140,  2140,  2094,     0,     0,
    1852,   498,   499,  1841,   385,     0,     0,     0,  1639,  1635,
    1394,     0,  1370,     0,     0,     0,  1833,     0,  1742,     0,
    1852,  1829,  1454,  1797,     0,  1814,  1804,  1798,  1821,     0,
    1822,     0,  1811,     0,     0,  1812,  1803,  1800,     0,  1820,
    1801,     0,     0,     0,  1799,  1825,  1796,  1453,  2137,  1372,
    1852,     0,   618,     0,  1269,     0,     0,  1859,   422,   421,
    2168,     0,     0,     0,  2117,  2090,  1491,  1643,  1856,  1733,
    1841,  1735,  1745,  1750,  1749,  1752,  1751,     0,  1748,  1856,
    1380,  1841,  1841,  1815,  1817,  1816,     0,  1841,  1841,  1818,
    1802,  2019,  1841,     0,  1492,  1463,     0,  1464,     0,  1859,
       0,  1852,  2141,  2095,  2096,  1852,     0,   189,  1852,     0,
       0,     0,     0,     0,     0,     0,  1819,     0,     0,     0,
       0,     0,  1852,     0,   423,  1395,  1734,     0,  1381,  1807,
    1808,  1809,  1810,  1823,  1824,  1805,  1806,  1813,  1465,  1859,
    1466,     0,  1859,     0,  1852,     0,  1852,     0,     0,     0,
    1467,  1859,  1468,     0,  1225,  1852,   189,     0,  1469,     0,
       0
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -5158, -5158,  6183, -5158, -1283, -5158,  5483, -5158, -5158, -5158,
   -1365, -5158, -5158,  6495,   129,  7360, -1422,  4951,  -503,  4953,
   -5158, -5158,  2732,  -125, -5158, -5158, -5158, -5158, -5158, -5158,
   -5158, -5158, -5158,   282, -5158, -5158, -5158,  3953, -5158, -5158,
    3952, -5158, -5158,  -276,   192, -5158, -5158,  -489,  4725, -5158,
    5999,   518,  5665, -5158,    79,  5997, -5158, -5158,   581,  3980,
    -302, -5158,  3881,  2568, -5158,  1662,  1668,  1663, -1053, -5158,
    2921, -5158, -5158, -1891, -3577, -2343,  -986, -5158, -3280, -5158,
   -5158, 25537, -5158, -5158, -5158, -5158,  5679, -5158,  4186,  3420,
    2238, -5158,  4187, -5158, -4377, -5158,  1001, -5158, -5158, -5158,
   -5158, -5158, -5158, -5158, -5158, 29912,  3690,  -633, -5158, -5158,
   -1235,  -945,  -990,  3526, 21393, -5158, -1775, -5158, -1688, -2457,
   -5158, -3697,  2492, -5158, -3487, -2939, -2924,  2505,   829,  1127,
   -5158, -1468,  8250, -1290, -2001,  4021, -5158, -5158,  2150,  3740,
   -5158, -5158, -3598, -3728,  1632, -5158,  -909,  2158, -5158,  2168,
   -5158, -5158,  1534, -4403,  1211, -4634, -3628, -5158,  -407,   699,
   -5158,  2877,  3662, -5158, -5158, -5158,  2376, -5158,  4297,  2312,
   -5158, -5158,  -520, -5158,  3956,  -234,  -139,  -236,  2665,  4011,
   -5158,  3997,  3998,  3302, -5158, -2237, -3097,  4015, -5158, -5158,
   -5158,  5036, -1947, -5158,  3520, -5158, -1490, -5158, 19354, -5158,
   -4240,  3964, -2241, -5158,  5532,  4762, -1488, -5158, -5158,  -822,
    4749,  -740, -1477,  -769,  3505, -5158, -5158, -5158, -5158, 17124,
   -5158, -2356, -5158,  8648,   166,   944, -5158, -5158, -5158, -5158,
   -5158, -5158,    56,  -191,   217, -3832, -5158, -3008,  -390,  -492,
   24797,     0,   332, -1927,  5673,  -825, -5158,  3115,    25, -2562,
   -5158, -5158, -5158,  -715,  4729, -2823,    76, -5158, -5158, -5158,
    -253, -5158, -5158, -5158,   308,  4989, -1131, -2433,  3554, -1052,
   -2769, -5158, -1004, -5158, -5158, -5158,  5092, -5158, 20337, -5158,
    4430, -5158, -5158, 15249, -5158, -5158, -5158, -3389, -5158, -5158,
    2714, 14495, -5158, -5158, 17466, -5158,  3127, -5158, -5158, -5158,
   10325, -5158,  -519,  -477,  4367, -5158,  3125, -1016,  1301, -5158,
    1302, -3853, -5158, -5158,  2375, -5158, -2561, -5052, -5158, -5158,
   -5158, -5158, -5158, -5158,  2279, -5158,  2159, -5158, -5158, -5158,
   -5158, -5158,  3515,  4107,  2596,  -875,  2036,  1423, -2047, -5158,
   -3806, -1841, -5158, -4340, -5158, -5158,   928, -4189,  1440, -2752,
   -5158,  1941,  1944, -5158,  2086,  2435, -5158,  2095,  2093, -5158,
   -1455, -5158,  2873, -5158,  -628, -1819, -5158, -4861, -5158,  1183,
   -5158, -5158, -5158, -4614, -2513,  3087, -5158,  2518, -5158, -5158,
    4216, -5158, -5158, -5158, -5158,  3491,  1171, -5158, -5158,  1982,
   -5158,  5347, -1246,  -660, -3883,   747, -1519, -5158, -5158,  -482,
    5818,  1635,  2587, -5158, -1623, -5158, -5158,  5820, -5158,   522,
    -313,   551, -5158,  -650, -5158,  4473,  1715, -2878, -5158,  8405,
   -3644, -3855, -5158, -5158,  3614,  5725, -5158, -5158, -1601, -5158,
    3310, -5158, -3012, -1373,    53, -5158, -5158, -5158, -5158,  1784,
   -5158, -5158, -5158, -5158, -5158, -5158, -5158,  1831, -3499, -1034,
   -5158,  -756, -5158, -2580,  -250, -5158, -5158,  3838, -5158, -5158,
    2392,  6147,  4722, -1910,  5466, -3435, -1706, -5158,  2654, -5158,
    4526, -5158,  4525, -5158,  2671, -5158,  2664, -5158,  4541, -5158,
    2672, -5158,  4528, -5158,  2681, -5158,  -419, -5158,  1598, -2324,
   -5158, -5158,  2305,  3448, -5158, -5158,  1717, -5158, -5158,  2322,
    2313, -3308, -5158, -3433, -5158, -5158, -5158, -5158, -5158,  1098,
   -5158, -5157, -5071, -5158, -5158,  1713,  4559, -5158,  -529,  -425,
   -5158,  6261, -5158, -5158, -5158,  -947, -5158, -5158,  1392, -1547,
    1369, -5158, -5158,  -456, -5158, -5158
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   274,   275,   805,   276,   277,  1540,   786,   787,  1548,
    1549,  1550,   278,   279,   280,   281,  1333,  1334,   282,  1336,
    2373,  2374,  2387,  2487,   611,  2389,   612,   613,   614,   615,
     616,   617,  2127,   375,   284,  1554,   792,   793,  2346,  1551,
    1552,   618,   619,   285,   945,   486,   487,   286,   287,   288,
     289,  1315,   290,   291,  2128,   293,   294,  2340,   620,  3022,
     821,  1592,  1593,  3034,  4634,  4255,  4256,  4268,  1930,  2696,
    2697,  3721,  3093,  3715,  3094,  3095,  4400,  4774,  2662,  3354,
     621,   622,  2175,   623,  4793,   624,  1318,  2881,  2136,  2137,
    2138,  2139,  2140,  2141,  4076,  4077,  4521,  2142,  2143,  2888,
    2889,  2890,  2891,  4088,  4089,   296,   297,   298,   299,  1723,
    1621,  1530,  2049,  2050,   300,   301,   302,  2541,   303,  1760,
    3237,  2557,  3238,  3239,  1236,  3240,  3241,  4307,  5374,  4966,
    5203,  2474,  1849,  1238,  1519,  1520,  1521,  3680,  3681,  1239,
    3684,  4193,  3243,  3902,  4374,  4375,  2306,  3668,  3669,  4314,
    4007,  4481,  4482,  4878,  4879,  4880,  3244,  4309,   981,  2055,
    2806,  2807,  3383,  4418,  2532,  3801,  4438,  5064,  1507,  4510,
     304,  1718,   627,  2176,  1453,   802,  1001,   864,  1557,  1558,
    2375,  2376,  2377,  3693,  3694,  3062,  3706,  2348,   628,   629,
    1339,  1340,  1303,  2097,  2098,  1341,  1622,  1623,   755,  3336,
    4761,  2417,   306,   839,   840,  1610,  2433,  2434,  2378,  1624,
    1615,   841,   842,  1312,  2124,  2125,   843,   844,   631,   413,
    2158,  3112,  3113,   308,   309,   310,   311,   312,   313,   314,
    1862,  3332,   315,   316,   756,  5392,  3312,  3501,  1290,  4908,
     318,   777,   970,  4282,  1291,  1292,  2566,  2567,   320,  3310,
    3306,   321,   889,   322,  1661,  1662,   323,   324,  3593,  1085,
     638,  1347,  1403,  1404,   639,  2205,  1934,  3916,  3497,  1819,
    3507,  2298,  1823,  3299,   325,   326,   416,   328,   329,  3981,
     330,  1722,  1146,  1565,  3487,  4501,   331,   332,  1717,  3037,
    3038,   549,  1719,   334,   418,   336,  2569,   337,  1721,   338,
     550,   340,  1536,  2571,  1242,  2579,  2580,  3631,  4834,  4835,
    5109,  3434,  3988,  2564,  4504,  5098,  1851,  5068,  5430,  5020,
    5407,  3193,  3361,  4402,  3604,  4139,  3735,  4265,   645,   646,
    1365,  2174,  1366,  1509,  3016,  1895,  3914,  4757,  3670,  4759,
    4387,  1057,  1956,  4728,  4729,  5383,  5384,  4737,  4738,  4996,
    4024,  4025,  4026,  2574,  3863,  3915,  3275,  3855,  3856,  2925,
    2926,  3582,  2927,  2928,  2929,  2630,  2631,  4794,  5056,  5057,
    5520,  5638,  5029,  1852,  1853,  2666,  3365,  3366,  2244,  2245,
    2246,  2980,  4147,  2236,  2237,  2969,  5436,  5437,  5606,  4817,
    5288,  1937,  3957,  1414,  3601,  2213,  2594,  2513,  1134,  1263,
    1060,  1135,   341,   342,  1713,  1714,   343,  1272,  2825,  1118,
    1244,   960,  3359,  3391,  2917,  2727,  3873,  2703,  1715,  2536,
    4487,  3343,   344,  1720,   420,   346,   347,  1724,  2496,  2497,
    2498,  2499,  2500,   648,   348,   349,   350,   351,   352,   353,
     651,   354,   355,   652,  3171,  4292,  4293,  4294,  4131,  4132,
    1537,  1855,  1856,  1857,  1858,  1870,  1871,  2648,  3567,  3568,
    4104,   929,  1158,  1159,  3079,  3606,  2325,  3254,  3255,  1160,
    1161,  1162,  1163,  3256,  3257,  3258,  3259,  1164,  1165,  3260,
    3261,  1166,  1167,  3262,  3263,   356,   357,  4233,  2069,  5297,
    3709,  3710,  4592,  4593,  3712,  4011,  5086,  4234,  4235,  4619,
    4236,  4237,  4238,  4239,  4490,  5088,  5089,  5443,  5298,  5299,
    5300,  5301,  5168,  4927,  4928,  1174,  1175,  1176,  4013,  4014,
     358,   359,  1562,  2390,  1728,  4910,  5482,  4911,  4912,  1730,
    4941,  4942,  4624,  2307,  5214,  3104
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     319,  1177,  1177,  1177,  1177,  1177,  1177,  1177,  1729,   376,
     796,  2562,  2454,  1854,  2391,  1415,   860,  1747,   414,  1058,
    1420,  2123,  1627,  1376,  2634,  1973,  1538,  1042,  1380,  2773,
     610,   928,  1249,   932,  2840,  2842,  2134,   941,  3300,  3316,
    3317,  1906,  3305,  3248,  2529,  2530,  4012,  3531,   376,  1094,
     319,   803,   803,   849,   804,  2655,   856,  3090,  1289,  4039,
    3098,  1928,  1603,  1932,  3013,  2749,  3482,  3484,  3080,  1241,
    3123,  3124,   376,  2542,  3929,  3509,  3930,   775,  3931,   292,
    3665,  1282,  3198,  2130,  2144,  1275,  3202,  1939,  1940,  1941,
    1942,  3133,  1909,  3135,   415,  3666,  3138,   376,   745,  1616,
    1618,  4259,  1698,  4133,  1628,  1178,  1178,  1178,  1178,  1178,
    1178,  1178,  4391,  4450,  1127,  1129,  4137,  2502,  2503,  2504,
    2505,  2506,  2507,  2508,   414,  2432,  1335,  1147,  2438,   292,
    1199,  4258,  4325,  1205,  2442,  4443,  2444,  2372,  4447,  1157,
    1338,  4842,  2440,  2441,  2849,  2851,  4248,  3075,  3358,   548,
    4764,  4765,  4823,  1640,  1641,   637,  3784,  3786,  5055,  3165,
    3166,  3167,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,  1656,  1657,  3362,  2329,  5030,  2430,  2332,
     863,   822,   822,   388,   376,  1452,  2384,   822,  4388,  4390,
     822,  1413,  5269,  4280,  -378,  1017,  4741,  4016,   822, -2064,
    4290,   497,  1891,  4161,  1894,  2900,   822,  3825,   649,  4499,
     861,  4934,  5160,  3820,  3457,  1643,   736,   317,   861,  2341,
    3533,  5427,  2885,   637,  1911,  3029,   665,  2976,  1916,  1917,
    4311,  4935,   866,  5643,  1517,  3059,   822,   969,  3030,   822,
    2603,  4207,  4181,   784,  1538,   822, -2063,   378,   319,   319,
    4534,  4017,  1273,  2342,  1020,   485,   761,  1227,  5261,  2855,
     822,   -78,  3328,  1543,   523,   414,   414,   317,  1100,   445,
    3834,  2062,  2343,   822,   360,  1423,   649,   -95,  3329,  3031,
    5263,  5484,   283,  5533,  4416,  4162,   761,  3061,   822,  3534,
     319,  3535,   955,  5421,   319,  2324,   556,  2172,   361,   822,
    5355,   822,  4312,   822,   930,  4825,   848,   895,   822,  2478,
    1447,  5499,   760,  1766,   931,  1983,  3032,  2475,   822,  3351,
     820,   634,  1072,  4231,  2344,   414,   560,  3048,   754,   930,
     252,   822,   283,  4304,   912,   822,   822,   971,  1644,   931,
    -146,   771,   772,  2856,  2501,  2501,  2501,  2501,  2501,  2501,
    2501,  2501,  3835,  2651,   822,   946,  4936,   661,   822,   822,
    3363,  3826,   846,   736,   736,  4488,   736,  1544,   376,   806,
     376,  3692,   956,   376,  5401,  5608,  -811,  5262,  4483,   736,
   -1208,   822,  2560,  3353,   822,   687,  4500,  2977,  3049,   634,
    1449,   822,  2479,  3330,   822,   985,  4182,  2198,  5202,  5264,
    2687,   891,   822,  5644,  4417,   362,  1518,   823,  4480,  4313,
    5645,  2693,  5422,   823,   379,  3835,   823,  -146,  1402,   822,
    -146,   736,  3536,  4163,   823,   736,   736,   736,  1253,  1033,
     736,   736,   823,  2728, -2064,   736,   446,   848,  4680,   736,
     736,  1065,   736,   736,   736,  3060,   736,   637,  1281,   761,
    2892,   736,   848,  1084,  5161,  1363,   822,  1295,   867,   848,
     822,   822,   823,  1300,  3017,   823,  2561,  5073,  4406,  2345,
     789,   823,  5579,   666,  1390,  4022,  4208,  1393,  1500,  2887,
     930, -2063,   363,  4707,  5622,  5623,   823,  2694,   736,   761,
     931,   761,   822,  1084,   736,   736,   736,   497,  1348,   823,
     649,  3155,   736,   918,   858,  3033,  2978,   808,  4164,   736,
     736,   736,  2324,   736,   823,  4023,  1778,   822,   736,  2782,
    4681,   822,  1029,   822,  1700,   823,   918,   823,   736,   823,
     736,   376,   376,   376,   823,  2695,   822,  3331,   736,   736,
     918,   736,  1084,  1084,   823,  2071,   736,   736,  1782,   817,
     818,  1084,  1251,   637,   822,  1084,  2902,   823,   736,   736,
     822,   823,   823,   736,   736,   736,   736,   736,   663,   736,
     801,   862,  1444,   637,  2910,  2911,  1753,   736,  2431,   862,
     823,   295,   637,   822,   823,   823,   849,   849,   637,   856,
     856,   849,  2979,  4281,   856,   952,  4198,  1488,  4937,  4201,
    -742,  1783,  1774,  1775,  1776,  1308,   649,   823,  4822,  3088,
     823,  4291,  1881,   634,   850,  1625,  1626,   823,  5244,   319,
     823,  5076,  1504,   364,   -81,  5080,   649,   822,   823,   761,
    4679,   295,   822,  5411,  5055,   649,  5055,   273,   824,   824,
     365,   649,   775,  4711,   824,   823,   376,   824,  4179,  5571,
    5220,   865,  1875,   736, -2019,   824,  1377,   736,   736,   736,
     761,  1888,   736,   824,  4625,   376,   736,  1890,   376,  4884,
    4885,   848,   761,  -378,   674,  1920,   822,  -378,   376,  1619,
    1620,   736,   823,   736,   822,  3089,   823,   823,   736,   736,
    -811,   736,   736,   824,  1065,   366,   824,   637,   292,   736,
    2537,   736,   824,   736,   736,  1251,  1084,  4560,  4548,  1631,
    4549,   785,   380,  1987,  4973, -2019,  4549,   824,   823,   634,
     822,  1560,  3088, -2019,  2330,  1988,   822,   381,  4637,  5021,
     824,  5022,   736,   736,  5333,  2635,   -91,  5309,  5336,   634,
    5339,  4244,  5141,   823,  5142,   824,  1002,   823,   634,   823,
     649,   382,  3890,  3803,   634,  4693,   824,   761,   824,  2196,
     824,  4289,   823,  1065,  3860,   824,  5233,   942,  1922,  -811,
    -811,  3082,  5143,   414,  5144,   824,  -811,  5376,  1635,  5144,
     823,  2331,  1084,   895,  2501,   383,   823,  5470,   824,  5471,
     822,   376,   824,   824,   384,  1344,  2439,  1498,  3089,  1100,
    3481,  3686,  2501,  2501,  3502,  4959,  2446,  2208,   458,   823,
     912,   824,   918,   971,  2788,   824,   824,  4245,   385,  2726,
    3689,  1337,   761,   761,   761,  2241,  3695,  2788,  3504,  3697,
     295,  2418,   848,   848,  3861,  1338,  1335,  1400,   824,   848,
     848,   824,  2426,  2427,   848,  1545,  4231,  2134,   824,   771,
    1338,   824,  2422,   823,   946,  2948,  2134,  2076,   823,   824,
    2447,  2449,  3350,   634,  2452,  3516,   414,   414,   414,   414,
    3532,   295,   421,  3553,  1616,   295,   824,   414,   414,   414,
     414,   414,   414,   414,   414,   414,   414,   414,   414,   414,
    3586,  1638,  1639,  4766,  1810,   846,   846,  3578,  1917,   921,
     846,  2886,   823,  3917,  3918,  2394,  1546,   918,  1987,   916,
     823,   917,  2853,   824,  1547,  4773,  3125,   824,   824,   736,
    1990,   736,   736,   736,   736,   736,  1876,  3588,  2458,  2459,
     736,  3620,  3922,   736,   736,   736,   736,   736,   736,  3126,
    1227,  3127,  2831,   495,  3128,  1898,   823,  1765,  2448,   824,
    3129,  3130,   823,  2372,  3555,   376,  1311,  5006,  2440,  2441,
    3368,  4662,  1748,  2788,  3182,   761,   822,   376,  3047,  1349,
    1625,  1626,  5333,  5339,   824,   924,  3579,  3580,   824,  1405,
     824,  1035,   925,   926,   927,   736,  3901,  3767,   736,   736,
    1065,  1061,  4587,   824,  4709,   422,  5118,   386,  5119,  1225,
    3088, -2078,  2384,  4259,   933,  4259,  2610,  4768,  5255,   423,
      17,   824,  2611,  4620,  5256,  4621,   823,   824,   895,  1600,
    4134, -2078,  4904,   921,  1125,  5212,  1225,  1611,  1612,   899,
    1033,  5450,   901,  4258,  4622,  4258,   424,  1629,  1630,  1108,
     824,  1633,  4905,  2135,   822,   912,  1227,  3077,   971,  1766,
    1156,  1767,  3061,  3078,  5613,  3092,  1606,   387,  1987,  4037,
    4038,  1136,  1065,  5257,   667,  4891,  1987,  5547,  1002,  4137,
    1991,  5550,  3074,   495,  1607,  1608,  3089,  1814,  1992,  2273,
    2274,  1084,  4421,  2278,   824,   822,  2793,   938,   939,   824,
     940,  1225,  4372,  1505,   425,   895,  3268,   918,  5615,   635,
    1225,  2152,  3401,  5683,  2509,  1538,   925,   926,   927,  1526,
    2619,  2620,  2045,   964,   426,  1269,  4448,  4883,  2712,   427,
    1609,  1726,   912,  2796,  5234,   971,   972,   933,   976,   930,
     930,  1227,   983,   824,   895,  2435,  2436,  5611,  1987,   931,
     931,   824,  3404,  1890,  3405,  5172, -2078,   850,   850,   761,
    1995,   904,   850,  5200,  1766,  5096,  1821,    98,  1227,  3153,
     930,   912,  5550,  4135,   971,  4136,  4617,   635,  1004,  2102,
     931,  2793,  1987,  1011,  1012,  1527,   428,   824,  1037,   895,
    1632,  1044,  1046,   824,  1998,  4016,  1351,  4483,  1067,  1068,
    1069,  1070,   823,  1071,  3764,  1636,  3718,  5063,  2793,   429,
     295,  3371,   702,   936,   937,  3725,   912,  2104,  2796,  3491,
     938,   939,  2420,   940,  3737,   918,  3406,  4480,  3407,  1932,
    4595,   930,  2217,  1227,  1867,   130,  1868,  2789,  2626,  4231,
    1230,   931,  1227,  2629,  3413,  2796,  3414,  1231,  2187,  4017,
    2815,  2626,  1119,  1120,  3396,  3665,  2629,   824,  1842,   930,
     895,  4018,   430,  5680,  1084,  5681,  3296,  1230,  4273,   931,
    3666,  1084,  2054,  2793,  1231,   895,   431,  5342,  5343,   432,
     823,   930,   909,  1983,  5207,  3552,  4496,   912,   930,  4512,
     971,   931,  4513,   433,  1200,  1201,  1822,  1206,   931,  1984,
     171,  3271,   912,   736,   434,   971,   376,   930,  5705,   376,
    2796,  1754,  1260,  1879,  1065,  1880,  1264,   931,  1266,  3297,
    4933,   823,  1864,  1274,   952,   319,  1233,   319,  3248,   761,
    3429,   895,  1230,   435,  2587,   376,   898,  2619,  2620,  1231,
     930,  1230,   899,  1779,  4888,   901,   436,   204,  1231,   761,
     931,  1987,   209,  1233,   437,  1908,   911,  3907,   912,  1842,
    4301,  1506,  2802,  2001,  -144,  1235,   656,   438,  4019,  3317,
     439,   849,  3956,  4020,   856,  1811,   849,   849,  2749,   856,
     856,  3355,  2181,  2776,  2944,   895,  2942,  4518,  4519,  2802,
     440,  2945,  1235,  1637,   952,  4520,  4257,  1084, -2078,  4618,
    4196,   635,   904,   905,  5184,  3829,   806,  1877,   918,  2573,
    5185,  3908,   912,  2850,  2817,   971,  1302,  4021,  1233,   761,
    2583,  2584,  2585,  1392,   736,   736,  1899,  1233,   817,  1320,
     736,  5432,  1321,   824,  1418,   810,   811,   812,  2597,  1424,
    1425,  -144,  -144,   814,   825,  2388,  1433,   495,  2393,  1436,
     815,  1818,  5291,  5292,  2802,  3909,  1446,  1235,  1448,   930,
    3166,  1451,   441,  2802,  5250,  4045,  1235,  4046,  1177,   931,
    5251,  4277,   736,  4022,   736,  1033,  1065,  1065,   736, -2069,
    1225,   736,   736,  -144,   736,   736,   736,   736,   736,   736,
     736,   930,   736,  5265,  5451,  5452,   442,   736,  1755,  5266,
    1344,   931,  5460,  3204,  2096,   746,  2015,   635,   933,   918,
    5340,   824,  3750,  4023,  2153,  1344,  3475,  5418,  2457,  -144,
    1510,  3805,  -144,  5419,   918,  4231,  4231,   635,   495,  1902,
    1780,  1903,  1824,   414,   414,  3648,   635,   443,  2767,   414,
    3708,  1337,   635,  2156,   930,   540,   495,   444,  3910,  3645,
    2002,  5453,   824,  3205,   931,  4231,  4231,  4231,  4231,  2020,
    -144,   918, -1208,  1564,   319,   447,  2056,  5513,  2057,  2381,
     637,   376,  1178,   637,  3219,  4052,   449,  2846,  4054,   781,
    3044,  3045,   451,  1345,   936,   937,  2821,   452,   933,   934,
     935,   938,   939,  2046,   940,  2573,  2750,  2123,  2753,  3013,
    2756,  2585,  1625,  1626,   761,  2525,  5154,  5155,   453,  2319,
    2320,   848,  1227,  2134,   454,   772,   495,  3911,   930,  2526,
    2008,   921,  2385,   649,   848,  2380,   649,   919,   931,   848,
     848,  1619,  1620,  2024,   930,  3912,  5180,  5181,  5182,  5183,
    1882,  3367,  1883,  2339,   931,   930,  1747,   319,  3751,  2229,
    2103,   635,  2793,   414,   414,   931,  3389,  2886,  3390,   495,
    3441,   455,   918,  2220,   936,   937,   930,   456,  3986,  4425,
    4853,   938,   939,  5448,   940,  3913,   931,  3944,   930,  1528,
     846,  3836,  3394,  3395,   930,   846,   846,   933,   931,  2796,
    2159,  5060,   930,  4427,   931,   319,   319,   924,   736,  4432,
    3771,   920,   931,  5632,   925,   926,   927,  4685,   457,  2847,
    3402,  1230,  3403,  3131, -2069,  5061,  5170,   783,  1231,  2188,
     459, -2069, -2069,  5171, -2069, -2069, -2069,   637,   637,   637,
     637,   637,   637,   637,   637,  3372,   634,  2619,  2620,   634,
    2621,  5237,   976,   761,  3449,  1067,  4083,  4084,  4085,  5486,
    4086,   460,  3147,   495,  4087,  1748,  5487,  2254,   886,   887,
     888,   919,  1033,   936,   937,   319,   376,  1886,  4114,  1887,
     938,   939,  3447,   940,   461,  2471,  3415,  3452,  3416,   736,
     649,   649,   649,   649,   649,   649,   649,   649,  4957,   878,
     319,   921,   488,  1625,  1626,  3109,  2563,  1233,  2323,  3110,
     736,   489,   933,   934,   935,  3785,  3785,  1084,  3324,  1033,
    2501,   490,  3325,  1033,  1033,  1033,  4173,  1033,  1033,  2954,
    4176,  3248,   491,   736,  5414,  3326,  2326,  2327,  3324,  3327,
    2293,  2328,  3347,  2802,   952,   920,  1235,   492,  3431,  3562,
    3109,  5551,  5552,  1362,  3740,   493,  2302,  4283,  4284,  4285,
    4286,  4287,  4288,   494,   881,   882,   883,   884,   885,   886,
     887,   888,  3324,   921,  2135,   495,  4540,   924,   921,   922,
     923,  2627,   498,  2135,   925,   926,   927,  2160,   936,   937,
    2195,  1892,   736,  1893,  2653,   938,   939,   919,   940,   761,
    1766,  1786,  1907,   634,   634,   634,   634,   634,   634,   634,
     634,  1452,   499,   918,  5610,   877,   295,  3766,   295,   878,
     879,   880,   918,  3083,  4609,  3608,  4275,   803,  1912,  2896,
    1913,   500,  3099,  5553,   933,  4641,  3103,  5554,   501,   736,
    2901,  1914,   850,  1915,  4638,   926,   927,   850,   850,   924,
    2619,  3939,  3121,  3122,   924,  3627,   925,   926,   927,   650,
     502,   925,   926,   927,  1985,  1084,  1084,  3402,   503,  3403,
    3974,   920,   736,   736,  3609,   895,  3314,  2058,  2059,  2061,
     898,   376,   376,  2450,   881,   882,   883,   884,   885,   886,
     887,   888,   504,  5661,  1084,  3632,  3633,  3634,  3085,  3086,
     911,  1084,   912,   895,  3628,  1506,  4787,   376,   898,  4327,
     936,   937,   921,   922,   923,  3579,  3580,   938,   939,   790,
     940,  2878,  4790,  1788,  1923,   736,  1924,   650,   911,  1925,
     912,  1926,  4801,   971,   921,  5682,  2619,  2620,  4804,  4805,
    1935,   505,  1936,  2303,   933,  2490,  2490,  2490,  2490,  2490,
    2490,  2490,  2490,  2636,   895,   819,   736,   897,   921,  1954,
    1004,  1955,  2919,  1958,  2321,  1959,   506,  2973,  2974,  2975,
    2619,  2620,  1963,  2708,  1964,  5704,   376,   910,  5706,   507,
     761,   912,   921,   508,  1812,   761,   509,  5715,   924,   510,
     736,   376,  2829,   511,   386,   925,   926,   927,   512,  5574,
    2527,   761,   761,  2847,   820,  3076,   736,    17,  2619,  2620,
     924,  2709,  2619,  4965,  2679,   761,   513,   925,   926,   927,
     936,   937,   803,  1929,  3052,  3581,   514,   938,   939,  5179,
     940,  3671,  3672,   921,   924,  1734,  3307,   515,   921,   922,
     923,   925,   926,   927,  4115,  4116,   637,  3185,  3186,  3187,
     761,  1967,   516,  1968,   387,   295,   517,  2324,   924,   761,
    3518,  3519,  2590,   518,   878,   925,   926,   927,  3958,  3959,
    2451,   761,   820,  2193,  2455,  2619,  2620,   637,  2710,   524,
     319,  2211,   525,  2619,  2620,  4484,  2711,  2218,  4530,  4531,
    1976,  1308,  1977,  1202,  1203,   637,   637,  2915,   526,   649,
     933,   527,   849,   849,   528,   856,   856,   529,   530,   924,
     849,   761,  2937,   856,   924,   736,   925,   926,   927,   531,
     532,   925,   926,   927,  2194,  1005,   533,  3411,  2656,  3412,
     649,   883,   884,   885,   886,   887,   888,   534,   295,  1033,
    5679,   890,   535,  2937,  3148,  1978,  1418,  1979,   649,   649,
    2675,   650,  1625,  1626,    98,  3543,   536,   537,   761,   376,
     376,   538,  3067,  5671,  1181,  1183,  1184,  1189,  1193,  1197,
    1981,  4420,  1982,  2829,   539,   540,   936,   937,  1033,  1033,
    1033,  1033,   541,   938,   939,  5294,   940,   295,   542,  5099,
    1225,  1986,  2534,  4906,  4907,   543,  4914,  4915,  4916,  5058,
     544,  4919,  4920,  1345,  4924,   857,  4926,  3574,  4257,  1766,
    4257,  2003,   634,   545,   736,  2619,  2620,  2554,  3956,  2829,
     546,   547,   130,   319,   761,  3014,   551,   921,   848,  3752,
     552,  2619,  2620,  4138,  3993,  5365,  5366,  1766,   736,  2009,
    5110,   319,   859,   634,  1033,  2619,  2620,   553,  4491,  2591,
    3997,  3998,  4206,  5377,   554,   376,   295,   650,   555,  4758,
     921,   634,   634,   557,   558,  4642,  4643,  4644,  4645,  4646,
    4647,  4648,  4649,   559,   561,  4030,   921,   650,  1225,   562,
    5059,   295,  2036,   563,  2037,  5408,   650,   171,  2619,  2620,
    5412,  4695,   650,   564,  3851,  2381,   369,  2785,   565,   566,
    4441,  3537,   567,   924,  3559,  3317,    82,  2042,  2940,  2043,
     925,   926,   927,  4690,   568,  2657,  3411,  5431,  3412,  1033,
    3785,  5111,  1227,   919,  4356,    94,  2178,  1033,  2179,   386,
    1033,  1251,  2619,  2620,   204,  4968,   924,  2676,  1766,   209,
    2221,   569,    17,   925,   926,   927,   933,   570,  2385,  2260,
     571,  2380,   924,  3770,  2859,   848,   848,   572,   116,   925,
     926,   927,  2793,   848,   573,   895,  4015,  2231,   897,   574,
     575,   319,  1351,   848,   918,   319,   319,   414,  2223,   576,
    2224,  3004,  5428,   921,   577,  2490,   921,   578,   910,   387,
    5295,   653,   912,  2104,  4411,  5714,  2256,   920,  2257,  2796,
    4415,   650,   654,  2490,  2490,  2091,  2619,  2620,  3321,  5010,
    1227,   846,   846,  1753,   942,    58,   371,  2619,  2620,   846,
    5011,  1230,   936,   937,   635,   655,   656,   635,  1231,   938,
     939,   376,   940,  2188,  1876,   848,  1748,  2011,   657,  2930,
    1748,  1748,  1748,  1748,  1748,  2619,  2620,  2315,  5194,  2316,
    2793,   658,   659,   376,   319,   376,   662,   664, -2133,   924,
   -2133,   668,   924,  3057,   921,   669,   925,   926,   927,   925,
     926,   927,  3592,   670,   319,   736,   848,  2234,  1084,  1625,
    1626,   183,  5197,   895,  2786,  3063,   671,  2796,   369,    98,
     672,  3066,  1326,   673,   899,  5235,  5236,   901,    82,   946,
     904,  1033,  1625,  1626,  2335,  5198,  2336,  1233,   674,  1230,
     912,   319,  1033,   971,   675,   676,  1231,    94,   677,  5110,
     919,  4848,  4849,  2619,  2620,  2349,  5276,  2350,  2501,   736,
    2135,   877,   678,  1225,  5560,   878,   879,   880,   680,   681,
     924,  2860,   682,  2802,  2915,   683,  1235,   925,   926,   927,
     116,   939,  4276,   940,  5273,  2937,   919,   130,  3355,  4536,
     684,   685,   372,  3874,   921,   922,   923,  5580,  2619,  2620,
    1168,  5492,   761,  2599,  2632,  2600,  2633,   319,  1065,   686,
     688,   635,   635,   635,   635,   635,   635,   635,   635,   246,
    1084,  2599,   373,  2681,   920,  1233,   319,  2903,  1084,  3919,
     881,   882,   883,   884,   885,   886,   887,   888,   371,   943,
    3489,  3897,   775,  3920,   378,  2731,  3898,  2732,  2908,   919,
    2909,   170,   171,   689,   690,  3214,  2931,   267,   691,   692,
     920,  2802,   445,  1505,  1235,   271,  3194,  3199,  3195,  3200,
     924,   273,   919,   693,  4585,  4586,  2829,   925,   926,   927,
     694,   736,   933,   934,   935,  1792,  3269,   369,  3270,   252,
    3526,   295,   695,   850,   850,  1227,   696,    82,   369,   204,
    5665,   850,   697,   183,   209,  5058,   698,  5058,    82,   699,
     849,  5668,   700,   856,  3219,  2036,    94,  3273,  3280,  3292,
    3281,  3293,   701,   920,  3088,   895,  3570,    94,  3713,  3319,
     898,  3320,  1351,   703,   704,  2793,   319,   705,  1084,   810,
     811,   812,  5110,   813,  2134,   706,   920,   814,  3589,   116,
     911,  3337,   912,  2104,   815,  3591,   707,   708,   936,   937,
     116,  3001,   739,  1301,   933,   938,   939,  3379,   940,  3380,
    3008,  1538,  2796,  4358,   740,  4360,  3170,  2829,   741,  4251,
    4353,  2937,   742,  3398,   372,  3399,   743,  4971,  4033,   744,
     763,   921,   922,   923,  1230,  4437,  1311,   946,  3890,  3769,
    3089,  1231,  5358,  5517,   764,   414,   414,   371,  3188,   765,
     319,   246,   766,   767,   373,   637,   768,   769,   371,  4252,
     770,   791,  4359,  5447,  4361,  3321,  1310,   921,   922,   923,
    3408,   801,  3409,   816,   295,   -80,   761,  3427,  2573,  3428,
     936,   937,  2036,   855,  3448,  3266, -1845,   938,   939,   267,
     940,   927,   295,   319,   637,  2190,  1092,   271,  4506,  2315,
    3464,  3454,  3465,   273,   947,  1105,   919,   924,   649,  3594,
    3575,  3595,   183,   948,   925,   926,   927,   949,   950,  3767,
    1233,   319,  2181,   183,  2937,   951,  3691,  4119,  4120,  4253,
     921,   922,   923,  3624,  2626,  3625,   952,  3559,  5189,  2629,
    1276,   953,  4148,   924,  3723,   954,  3724,  1305,  4758,  3322,
     925,   926,   927,   921,   922,   923,  2802,  1302,  3136,  1235,
     965,  3729,  1225,  3730,  4484,  4254,  4157,   966,  4001,  4002,
    4003,   921,  1313,  1314,  4271,  1002,  3732,  3738,  3733,  3739,
     920,   967,  2599,  5524,  3810,   736,   736,   736,   736,   736,
     761,   319,  5230,   372,  3839,  3841,  3840,  3842,   319,   761,
    3014,  5535,  1725,   848,   372,  1225,   924,  4816,   868,   984,
    3844,   595,  3845,   925,   926,   927,  3883,  3907,  3884,  1929,
     246,   634,   295,   373,   379,   985,   295,  4094,  4372,   924,
     986,   246,  1306,   987,  2827,  3189,   925,   926,   927,  2096,
     988,   446,  4913,   376,  1863,   989,  1496,   924,  4653,   990,
    3886,   637,  3887,  1225,   925,   926,   927,   991,   267,   846,
     635,  1497,  2858,  5102,   496,   992,   271,   376,   993,   267,
     921,  3908,   273,  3934,  3949,  3935,  3950,   271,  3949,  2599,
    3951,  3991,  4889,   273,  1499,  2599,  4551,  3995,  4031,   994,
    4032,   635,   895,   896,  1227,   995,   996,  4559,  3290,  4775,
    1983,  3982,  4562,   895,   649,   295,   921,   997,   898,   635,
     635,     9,  5103,  4150,   909,  3909,  1984,   901,   902,   912,
     904,   905,  4611,   666,   998,   295,   319,   848,   911,   319,
     912,   869,   999,  1506,  2793,  1503,  1149,  1227,   414,  2315,
    1293,  4067,  4075,  2599,  1294,  4144,   924,   921,   922,   923,
    1020,  3490,  1296,   925,   926,   927,  1297,  1298,   848,   848,
     367,  1792,   295,   637,  3348,  2599,  5104,  4159,   519,  1299,
    4188,  2796,  4189,  2829,   933,   934,   935,  2793,    48,   319,
    1748,  1304,   924,  3375,  1033,  1227,   376, -1920,  1523,   925,
     926,   927,  4241,  1230,  4242,  1524,  4241,  1970,  4243,  4241,
    1231,  4249,  1322, -1923,  4241,   870,  4269, -1917,  3910,  3983,
   -1935,   649,   649,  5117,  2796, -1941,   649,   634, -1932,  1367,
    4247,  4976,   946,   924,  4279,  2793,  1368,   368,   295,  4160,
     925,   926,   927,  1461,  1462,  4276,  1230,  3322,  3688,   369,
    4352,  3573, -1669,  1231,  4570,  1463,  4571,   295,  1464,    82,
     936,   937,  4767,  1465,  1466,  2829,  4138,   938,   939,  3590,
     940,   736,  2796,  4664,   921,  1467,   820,  5105,    94,  1468,
     736,    97,   919,  1033,  1033,  1033,  4673,  3911,  3984,  1233,
     319,  1033,  2829,  4232,  1230,  4541,  2349,  4631,  4588,  4632,
    4655,  1231,  4656,  3466,  4665,  3912,  4666,  2599,  5106,  4701,
    2599,   116,  4703,  5016,  1525,  4795,  5017,  4796,  4795,  1469,
    4797,   850,  1470,  1844,  3575,  2802,  2829,  5677,  1235,  4318,
    4319,   919,  1233,  4830,  1471,  4831,  5070,  5071,   921,   634,
    4516,  1472,  1473,   650,   650,  3913,  3649,   650,   319,  1065,
     924,  4830,  1766,  4832,  4900,  1474,   920,   925,   926,   927,
    1264,  4769,  4770,  1475,  4994,  2014,  4995,   295,  2802,   371,
    1476,  1235,  3985,  1477,  1478,   319,  1084,  3521,  1479,  4994,
    1233,  4998,  1480,   871,   872,   873,   874,   875,   876,   877,
    5083,  1481,  5084,   878,   879,   880,  1482,  1539,  1033,  3698,
    1327,   376,   736,  1555,   736,   920,   736,  5083,  1033,  5085,
     933,   736,  1541,   736,   924,   736,  2802,   665,  4994,  1235,
    5093,   925,   926,   927,  1613,  2388,   855,   855,  1029,  2019,
    1225,   855,  2790,  2563,   183,   184,  1504,  5137,   736,  5138,
     736,   295,   736,  1556,   921,  4405,  1560,  5139,  3584,  5140,
    5158,  5192,  5159,  5193,  5242,   921,  5243,  1561,   881,   882,
     883,   884,   885,   886,   887,   888,   319,  1251,  1688,  1563,
     933,  4654,  5247,  5274,  5248,  5275,  3777,  3777,  1572,  2937,
    4094,  2490,  1574,   761,   295,  3004,   936,   937,  1601,   919,
    4994,  1731,  5282,   938,   939,  4994,   940,  5286,  1602,  1889,
    5633,   650,   650,   650,   650,   650,   650,   650,   650,     9,
    1732,  2315,   295,  5362,  1501,   372,  5375,  5389,  5138,  5390,
     924,   319,  1308,   921,   922,   923,  2791,   925,   926,   927,
    1733,   924,   238,   239,  2315,  2023,  5399,  2792,   925,   926,
     927,  1752,   246,   273,  1757,   373,   936,   937,  1758,  1020,
     637,  1759,   933,   938,   939,  1761,   940,   637,   367,  1762,
    1763,  2242,  1227,   920,  5139,  5456,  5409,  5457,  5139,  2829,
    5469,  2829,   921,   922,   923,  1764,    48,  4112,  1768,  5139,
     267,  5472,   295,   369,   319,  2181,  1784,   369,   271,   295,
    5474,  1785,  5475,    82,   273,   933,  1787,    82,   761,   924,
    1789,  1790,  2793,   649,  1791,  1794,   925,   926,   927,   921,
    1795,  4913,    94,  5139,   345,  5476,    94,   848,  5489,  4209,
    5490,  4956,  2794,   919,  5504,   368,  5505,  5302,   936,   937,
    2795,  5514,  1796,  5515,   855,   938,   939,   369,   940,  2796,
    3768,  2797,  4211,   736,  1797,   116,   761,    82,   924,   116,
    1798,  2798,   933,  3894,  1816,   925,   926,   927,  5274,  1799,
    5525,  1230,  1800,  1970,   345,  2799,    94,  1801,  1231,   370,
    1802,   936,   937,  5540,  4212,  5541,  4940,  1803,   938,   939,
    5565,   940,  5475,   736,  1804,   924,  1528,  5577,  4578,  5578,
     761,  1805,   925,   926,   927,  1806,  5139,   920,  5614,   116,
    2027,  1807,  5139,   371,  5617,  4204,  3794,   371,   855,   855,
     855,   855,  4204,  1809,  4960,  4961,   634,   295,  5274,  1813,
    5639,  4213,  4775,  1815,  1817,  2324,  2324,  1820,   936,   937,
     921,   922,   923,  1825,   736,   938,   939,  1866,   940,  4214,
    5139,  1859,  5655,  2952,  1860,  2736,  2738,  1233,   921,   369,
    2800,  5656,   933,  5657,   848,  1869,  1872,   371,  2385,    82,
    5658,  5634,  5659,  2801,  5139,  5139,  5698,  5699,   183,  5069,
     295,  4788,   183,   848,  1873,  4215,  4579,  5701,    94,  5702,
    5139,  1885,  5711,  2802,  3847,  1896,  1235,  2803,  5013,  4527,
    5014,  1748,  1748,  1748,   319,  1748,  1305,  4802,  1897,  1900,
    1919,  2135,  5636,  1905,  1910,  1918,   924,  2804,  1921,   635,
    4216,   116,   761,   925,   926,   927,  4232,  1029,  4217,  2054,
    1927,  4034,   183,   184,   924,  1933,   649,  1935,   936,   937,
     848,   925,   926,   927,  1084,   938,   939,  1948,   940,  2228,
    3895,  1949,  4218,  1793,  1084,   625,  1943,   319,  1944,   372,
    1945,  1946,  1947,   372,   231,  1950,  4219,  4220,  1951,  1952,
     595,  1961,  1960,   345,   921,   922,   923,  1084,  1962,   371,
    1033,   295,  1966,  1969,   245,  1972,   246,  1974,   921,   373,
     246,  1306,  1975,  2827,  4850,  1980,  1989,  2029,  4917,  1993,
    1996,  4221,  1999,   761,   933,   319,  2915,  2004,  2005,   761,
     799,  2006,  4108,   372,   345,  2007,  2010,  2030,   345,  4222,
     650,  2012,  2013,   625,   267,  2017,  2018,  2022,   267,  2026,
     238,  4121,   271,   761,  1065,  2031,   271,   933,   273,   295,
     246,  2032,   273,   373,   183,     9,   921,  2033,  2034,  2035,
     924,   650,  2039,  2095,  2038,  1084,  2044,   925,   926,   927,
     919,  4223,  2040,  2239,   924,   736,   295,  2048,  2053,   650,
     650,   925,   926,   927,  2054,  2060,  2063,  4717,   267,  4426,
     936,   937,  4224,  1631,  2064,  2829,   271,   938,   939,  2065,
     940,   637,   273,  2074,   367,  1971,  2066,  2067,  2070,  2072,
    2073,  2075,   519,  2077,  2078,  3156,   625,  2829,  2829,   369,
    1251,  2079,    48,   936,   937,   635,  2080,  2081,  4035,    82,
     938,   939,   924,   940,  -909,   372,   228,  2083,  2016,   925,
     926,   927,  2084,  1168,   920,  2087,  2085,  4718,    94,  2088,
    2829,  2089,  2101,  2151,   649,   319,  2829,   243,     9,  1169,
    -158,  -160,   246,  4719,  2157,  4226,  2173,   295,  4975,   252,
    2177,   368,  4227,  2180,  2191,   414,  2183,  1308,  2185,  2186,
    2192,   116,  2334,   369,  2199,  4590,  2204,   919,   933,   934,
     935,  2200,  2201,    82,  2202,  2203,   -77,   761,  2209,  2210,
     267,  3777,  2214,  4228,  4229,  2215,  2216,   367,   271,  4720,
    2222,  4110,    94,  2225,   273,    97,  2347,  2226,  2227,  2232,
    2233,  2235,   295,   933,  2238,    48,  2243,  2247,  4122,  2248,
     319,  5341,  4918,  2249,  2250,  2253,  2251,   635,  4543,   371,
    2252,  2255,   319,  2937,  2258,   116,  2259,  5015,  2392,  2262,
    2263,  4939,  1522,  2295,  2296,  5018,  4943,   625,  2297,  2299,
    5023,   920,  2300,  2301,   936,   937,  2305,   634,   933,  4721,
    4722,   938,   939,   761,   940,   919, -2183,  2313,  5364,   650,
    2308,  2309,  3170,  2310,  2311,   295,   369,  4174,  2105,   933,
     934,   935,  2106,  2107,   319,  3014,    82,  2108,  4723,   936,
     937,  5100,  5101,   371,   183,   933,   938,   939,  4923,   940,
    2312,   921,   922,   923,  2021,    94,  2314,  2317,   370,  4232,
    2318,   855,   319,  2333,  2109,  2394,   855,   855,  2395,  2396,
    2397,  2398,  2399,  2400,  5349,  2401,  4202,  2402,  4724,  2110,
    2403,  2404,  2405,  2406,   936,   937,  2407,  2408,   116,   920,
    2409,   938,   939,   345,   940,  4614,  2410,  4940,  2411,  2025,
     824,  2412,   921,   625,  2416,   936,   937,  2421,   183,   184,
    2423,  2424,   938,   939,  4725,   940,  2425,   866,  1865,  2443,
    4726,   936,   937,   625,  2445,   372,   888,   924,   938,   939,
     231,   940,   625,  4278,   925,   926,   927,  1227,   625,  2463,
    2464,  2473,  1994,   931,  2480,  2511,   371,  2481,  4727,  2490,
     245,  2510,   246,  2514,  2515,   373,  1084,  1748,  2516,  1388,
    2517,     9,  2518,   386,  2519,  2520,  2521,  5195,   921,   922,
     923,  2522,  2111,  2523,  2533,  2540,    17,  5075,   924,  5077,
    2548,   919,  2549,  2550,  2551,   925,   926,   927,  2598,   372,
     267,  2604,  2552,  4431,  2553,  2112,  2113,  2114,   271,  2608,
    2556,   919,  1374,  2609,   273,  2115,   238,   239,  2612,  1033,
     367,   183,   184,  2613,   761,  2614,   246,  2829,  2615,   373,
    2616,   625,  2617,   387,   933,   934,   935,  2618,    48,   319,
    2915,  2649,  2650,  2652,  2661,   295,  2665,  2668,  2730,  2671,
    2673,  2674,  2680,  2682,   924,  2685,  2686,   625,  2698,  2700,
    2702,   925,   926,   927,   267,   920,   921,   922,   923,  1997,
    5481,  2808,   271,  2704,  2187,  2742,  2852,  2116,   273,  2810,
    2811,  2814,  4369,  2823,  2829,   920,  2848,   368,  2857,  2862,
    2863,  2864,   761,  2865,  2866,  2867,  2868,  2876,   295,   369,
    2869,  2870,   372,  2871,  5289,  5290,  2872,  2873,  2874,    82,
     936,   937,  2829,  2875,  1526,  2117,  2877,   938,   939,   238,
     940,  2879,  2880,  1865,  2895,  3114,  2898, -1921,    94,   246,
   -1924,   370,   373,    98, -1918, -1936, -1942, -1933,  5312,  5313,
    2989,  2999,   924,  2920,  2946,  4930,   295,   919,  2947,   925,
     926,   927,  2951,  2953,   933,  4232,  4232,  2000,  2955,  2937,
    2971,   116,  5215,  5216,   635,  2970,  2981,   267,   919,  2994,
    5222,  5223,   319,  2829,  3005,   271,  2118,  5226,  5227,  2995,
    5229,   273,  5231,  2996,  2997,  4232,  4232,  4232,  4232,  2998,
    2119,  3000,  3006,  3019,  3018,  3046,  2120,  3053,  3043,   625,
     625,   130,  3058,  3061,   625,  3081,  3111,   319,  3120,  2181,
    3115,  3132,  4543,  3149,  3159,   319,  2937,  3152,  2937,   371,
     761,   920,  4502,  3154,  3160,  3168,  3161,  3164,   933,  3169,
     936,   937,   921,   922,   923,  1069,  3172,   938,   939,   -79,
     940,  1392,   920,  1953,   736,  3014,   -97,  3174,  3173,   -96,
    2121,  3175,   921,   922,   923,  3276,  5410,  3176,  5404,   848,
    5405,  3177,  5415,  3178,  3179,  3180,   171,  3183,  3191,  3192,
    3197,  3201,  3265,   414,  3203,     9,  5620,   761,  1818,  4857,
    3267,  3249,  2915,  3274,   183,   184,   295,  1502,  4204,  3278,
    3279,  5425,  3264,  3285,  2122,  3339,  4537,  5433,  5434,  3272,
    3277,  3282,  3283,  3284,   936,   937,  3288,  3286,   924,  4545,
    3318,   938,   939,   204,   940,   925,   926,   927,   209,   650,
    3338,  3342,  3287,  2014,   367,  2915,  3294,  3360,   924,  1033,
    1033,  3295,  2937,   761,  3302,   925,   926,   927,  3303,  5348,
     919,  3369,    48,  2019,  3333,  3345,  3370,  3438,  3440,  3374,
    3377,  3378,   736,  3871,   736,  3381,   736,  3382,   369,  1033,
    5477,   295,  4939,   933,  3384,   372,  3386,   369,    82,  3387,
    3388,  5337,  3397,   295,  3400,  3410,   233,    82,   761,   597,
    3014,  3417,   238,  3420,  3422,  5493,  5494,    94,   921,   922,
     923,  3425,   246,  3433,  3430,   373,    94,  5502,  3445,  3432,
    3435,  3437,  3442,   369,  3444,  3446,  3451,  3453,  5345,   921,
     922,   923,  3455,    82,   920,  3456,  3459,  3460,  3461,  3462,
     116,  3470,  3157,  5356,  3463,   295,  3469,  3471,  5512,   116,
     267,  3472,    94,  3474,   919,   370,  3473,  2829,   271,   936,
     937,   933,   934,   935,   273,  3478,   938,   939,  3479,   940,
     369,  5526,  5527,   295,  5357,  3483,  2829,  3486,  3485,  3541,
      82,  3488,  2829,  3494,   924,   116,  3495,  3496,  5539,  3499,
     933,   925,   926,   927,  3503,  3500,  3505,  2260,   371,    94,
    3506,  3508,   386,  3510,  3542,   924,  3511,   371,  3513,   148,
     149,  3545,   925,   926,   927,    17,  3547,  3548,  2829,  2829,
    2023,   933,  3550,  2829,  3554,  3556,   369,  3687,   920,  3561,
    3564,  3565,   116,  3566,  3569,   650,    82,   936,   937,  3571,
    3572,  3583,  2915,   371,   938,   939,  2937,   940,  3587,  5570,
    3406,  3596,  3407,  5572,  3597,    94,  3598,  3599,  3603,  3614,
    3612,  3615,   387,   183,  3607,  4854,   936,   937,  3610,  5582,
    3613,  5607,   183,   938,   939,  5609,   940,  3616,  3617,  3621,
    3622,  2028,   933,   934,   935,  3623,  3626,  1305,   116,  3629,
     371,  5618,  5619,  3644,  4204,  4204,  1305,   936,   937,  3630,
    5626,   921,   922,   923,   938,   939,  3647,   940,   183,   184,
    1957,  3651,  4902,  3683,  3673,   635,  3674,  3675,  3676,   345,
    5640,   345,  3677,   799,  4204,  4204,  4204,  4204,   369,  3685,
    3690,  3705,  3707,  5528,  3714,  3741,  3490,  3716,    82,  3717,
     295,  3719,   650,   650,   372,  3720,   371,   650,  1748,   231,
    5654,   595,  3722,   372,  3726,   183,  3727,    94,   936,   937,
     595,  3728,    98,  2829,   761,   938,   939,  3734,   940,   245,
    3731,   246,  1306,  1793,  2934,  3747,  3748,   924,  3749,  1305,
     246,  1306,  3753,  2827,   925,   926,   927,  3763,  3765,   372,
     116,   919,  2027,  3773,  3796,   921,   922,   923,  3772,  3790,
    5322,  5684,  3791,  3793,  3792,  5685,   238,  3797,  5688,   267,
    3804,   183,   855,   855,  1017,  5332,   246,   271,   267,   373,
     855,   272,  5700,   273,  3808,  3809,   271,  3812,  3813,  3814,
     130,  3815,   273,  3816,  3817,  1305,   372,  3818,  1225,  3819,
    3821,  3822,  3823,   595,  5710,  3824,  5712,  3827,   371,  5024,
    3828,  3903,  3830,  3831,   267,  5718,  3904,   496,  3833,   148,
     149,  3848,   271,   246,  1306,   920,  2827,  3838,   273,  3843,
    3857,   924,  3879,   295,  3881,  3880,  3888,  3893,   925,   926,
     927,  3885,   327,   933,   934,   935,  2228,  3889,  3891,  5559,
    3899,   377,   372,  3901,   369,   171,  5025,  3905,   919,   595,
    3906,   267,  3923,  3926,    82,  3927,  3928,  5673,   295,   271,
     319,  4543,   761,   183,  3936,   273,   295,  3937,  2829,   246,
    1306,  3941,  2827,    94,  3938,  3943,  4040,   761,  3953,   933,
     377,  3954,   327,  2829,  3955,  3960,  3975,  1305,  3990,  5669,
    5670,  3979,   204,   319,  2105,  5674,  5675,   209,  2106,  2107,
    3989,  3994,  3996,  2108,   377,  4006,   116,   267,   345,   936,
     937,  4027,  4041,  4042,  2838,   271,   938,   939,  2915,   940,
    1227,   273,   920,  4049,  1904,   919,  4047,  4050,  4053,   522,
    2109,  4058,  4059,  4060,  1832,  4061,  4062,  4063,  4064,   761,
    2829,  4065,  4066,  4068,   372,  2110,   855,   855,  4069,   231,
    5026,   595,  4070,  4071,  4072,   936,   937,  4073,  4074,  4092,
    2793,  4095,   938,   939,   371,   940,  4096,  2172,  4105,   245,
    2041,   246,  1306,  4106,  2934,   148,   149,   919,  4111,  4124,
    4125,  4140,   921,   922,   923,  4141,  1839,   640,  4142,  4143,
     625,   345,   855,   625,   736,  5296,  4146,  2796,  4190,   920,
    4158,  4165,  5177,  1227,  4166,  4167,  4168,  4172,  4177,   267,
    4178,  4180,   736,  4183,  4270,  4185,   377,   271,  4184,  1230,
     933,   272,  4186,   273,   761,  4195,  1231,  4199,  5027,   183,
    4240,  4246,  4266,   855,   855,  4267,  4272,   933,  2111,  4274,
     345,  4298,  4299,  4300,   625,  4348,  4364,  4401,   737,   625,
     625,   920,  4324,  4350,  4543,   640,  4351,  4354,   924,  4355,
    4357,  2112,  2113,  2114,  4366,   925,   926,   927,  4367,  4376,
    4381,  2115,  4382,  3443,   650,  4383,  4384,  4385,  4386,  4595,
     750,   327,  4389,  4393,  4442,  4399,  4397,   376,   762,   921,
     922,   923,  4398,  4408,  4410,   855,   936,   937,  4412,   319,
     778,  4413,  5028,   938,   939,  1233,   940,  4414,   933,   345,
     372,  2230,  5120,   936,   937,   231,  2829,  4422,   798,  4457,
     938,   939,   327,   940,  4423,  4424,   327,  4429,  3882,  4430,
    4434,  4435,  4440,  2116,   345,   245,  4453,   246,   851,  4454,
     757,  2802,  2829,  4455,  1235,  4456,  4486,   625,   625,   625,
     625,   625,   625,   625,   625,  4489,  4492,  4493,  4494,  4495,
    5153, -1225,  4533,  4509,  4523,   924,   921,   922,   923,  4497,
    4507,  2117,   925,   926,   927,   267,  4508,  4514,  4515,  4517,
    4687,  4538,  4528,   271,   936,   937,  4529,   272,  4547,   273,
    4550,   938,   939,  4552,   940,   737,   737,  4554,   737,  3289,
     377,  4553,   377,  4555,  4556,   968,  4633,  4563,   761,  3056,
    4565,   737,  4574,   761,  4566,  4567,  4568,  4573,   921,   922,
     923,  4597,  4623,  4598,  4599,  1501,  4600,  4601,   933,   650,
    4602,  2915,  2118,  4603,  4604,  4605,  4606,  4607,  3489,  4608,
    4628,  4650,   924,  4204,  4626,  4629,  2119,  4627,  4630,   925,
     926,   927,  2120,   737,  4640,  4635,  4639,   737,   737,   737,
    4651,  1034,   737,   737,  4661,  4652,  4663,   737,  4682,  1053,
    4667,   737,   737,  1066,   737,   737,   737,  3156,   737,   640,
    4669,  1074,  4670,   737,  1053,  1086,  4671,  4672,  4674,  4675,
    4684,  1102,  4676,   376,   924,  4677,  5567,   650,  4678,  1266,
    4686,   925,   926,   927,   936,   937,  2121,  4688,  4689,  5713,
    4698,   938,   939,  4700,   940,  4702,  4704,  5637,  4705,  4428,
     737,  1074,  4706,  1074,  4708,  1086,   737,   737,   737,  4712,
    4713,  4836,  4714,  4715,   737,   933,   934,   935,  4716,   933,
     855,   737,   737,   737,  4760,   737,  5296,  4762,  5296,  4777,
     737,  4778,  4779,  4782,  4785,  4786,   761,  4791,  4792,  4807,
     737,  4800,  1171,  1180,  1180,  1180,  1187,  1187,  1187,  4798,
     737,   737,   933,   737,  1086,  1086,  4815,  4808,   737,   737,
    4809,  4810,  4811,  1086,  1252,   640,   376,  1086,  4812,  4813,
     737,   737,  4814,   376,  4821,   737,   737,   737,   737,   737,
    4828,   737,  4833,  4837,  4844,   640,  4845,   369,  4838,   737,
    4839,   936,   937,  4840,   640,   936,   937,    82,   938,   939,
     640,   940,   938,   939,  3415,   940,  3416,   319,  4846,  4847,
    4433,  4851,  4932,  4892,  4894,  5359,    94,  1309,  5296,  4897,
    4898,   295,  4899,  5708,  4925, -2142,  4938,  5708,   936,   937,
    4948,   327,  4949,  4950,  4953,   938,   939,  5708,   940,   319,
    5708,  1346,  4291,  5519,  4958,  4972,  4974,  4980,  4982,   116,
    4983,  4984,  4985,  4986,   295,   782,  4987,  4988,  1364,  4990,
    4989,  5113,  4991,   788,   799,   737,  4992,  4993,  1378,   737,
     737,   737,  1074,   799,   737,  3481,  4997,  1391,   737,  4999,
    1364,  5000,  5001,  1406,  1074,   650,  5002,  5003,  5004,  5007,
     968,  5114,  5175,   737,   345,   737,  5005,   933,   934,   935,
     737,   737,  5065,   737,   737,  5012,  1066,   371,  5072,   640,
    5082,   737,  5122,   737,  5091,   737,   737,  1252,  1086,  5092,
    5094,  5112,  5123,  5124,  5125,   933,   934,   935,  5126,  5127,
    5128,   462,   463,   464,   465,   466,   625,   467,   468,   469,
     470,   471,   472,   473,   737,   737,   474,  5129,   475,  5130,
    5131,   962,  5145,   476,   477,   478,   479,   480,   481,  5132,
     482,  5133,   483,   484,  5134,  5135,  5136,   625,  5148,  1074,
    4637,  5157,   183,   936,   937,  1066,  5149,  5150,  5151,  5152,
     938,   939,  5156,   940,  5162,   625,   625,  5163,  1971,  2068,
     933,   934,   935,  5166,  1086,  5167,  5169,  2603,  1000,  5173,
     647,   936,   937,   968,  5174,  5176,  5259,  4631,   938,   939,
    5186,   940,  5187,  5188,  1865,  5190,  4668,   933,   934,   935,
    5191,  5196,  1047,  5199,  5204,  5310,  5206,  5211,   933,   934,
     935,  5225,  5238,  5239,  1074,  1074,  1074,   345,  5240,   933,
     934,   935,  5241,  5245,  1053,  1605,  5246,  5249,  5252,  5253,
    5254,   851,   851,   372,  5258,   345,   851,  5260,  5267,  5268,
     295,  5287,  5271,  5270,  5272,  5284,   936,   937,   647,  5277,
    5278,  5279,  5280,   938,   939,  1225,   940,  2790,  5281,  5283,
     246,  2016,  5285,   373,  1121,  1122,  1123,  1124,  5293,  5667,
    5303,  5304,   933,   936,   937,  5307,  5305,  5347,  5325,  5350,
     938,   939,  5311,   940,   936,   937,  5353,   933,  2021,  5354,
    5360,   938,   939,  5363,   940,   936,   937,  5368,   267,  2025,
    5369,  5373,   938,   939,  5378,   940,   271,  5370,  5385,  5391,
    2028,   737,   273,   737,   737,   737,   737,   737,  5386,  5387,
    1254,   933,   737,  1261,   386,   737,   737,   737,   737,   737,
     737,   369,   933,   934,   935,  5388,  5393,    17,  5402,  5394,
    5667,    82,  5395,  5435,  5396,  5716,  5397,  1727,   936,   937,
    5398,  2791,  5400,  5403,  1749,   938,   939,  1074,   940,   968,
      94,  1965,  2792,   936,   937,   345,  5439,   855,  5440,   345,
     938,   939,  5442,   940,  5468,  5444,  2068,   737,  5473,  5454,
     737,   737,  1772,  5455,   387,  5458,  5459,  1227,  5461,  5462,
     369,  5463,  5464,   116,   933,   934,   935,   936,   937,  5465,
      82,  5466,  5467,  5480,   938,   939,  5483,   940,   936,   937,
    2086,  5485,  5495,  5488,  5503,   938,   939,  5506,   940,    94,
    5516,  5508,  1034,  2041,  5509,   625,   625,  2793,  5518,  5521,
    1387,  5522,  5523,   625,  5529,  4090,  5530,  5532,  5558,  5531,
    5536,   933,   934,   935,  5537,  5538,   369,  2794,   345,  5542,
     369,   371,   116,   933,  1066,  2795,    82,  5543,  5545,  5557,
      82,  5549,   148,   149,  2796,  5561,  2797,   933,   345,  5562,
     936,   937,   647,  1086,  5563,    94,  2798,   938,   939,    94,
     940,  5569,  5576,  1890,    98,  5687,  1230,   855,  5581,   855,
    2799,  5612,  5616,  1231,  5621,  5624,  5649,   933,   934,   935,
    1487,  5625,  5627,  5628,  5629,   345,  5631,  5630,   116,  5650,
     371,  5641,   116,  5642,  5662,  5646,   183,   936,   937,  5647,
    5648,   148,   149,  5651,   938,   939,  5676,   940,  5652,   936,
     937,  5653,  2230,   450,  5719,  1137,   938,   939,  5663,   940,
    1305,  1074,  2197,   936,   937,  5664,  5686,  5689,  5690,  5691,
     938,   939,   130,   940,  5692,  5693,  2219,   933,   934,   935,
    5694,  5695,  5696,  1137,  1137,  5697,   371,  1559,   295,  1542,
     371,   345,  1233,   936,   937,  2812,  2150,  2149,   647,  2338,
     938,   939,  4091,   940,  1317,   797,  1931,  3050,  2801,  3051,
     345,   809,  3028,  3107,  1277,  4947,  4250,   372,   647,  4946,
     295,  4951,   231,  1319,   595,  1168,  3546,   647,  2802,  3952,
    5449,  1235,  2803,   647,  3468,  4522,  2882,   171,   933,   934,
     935,  1169,   245,  4328,   246,  1306,  2894,  2934,  4320,  5564,
    5371,   183,  2804,   936,   937,   183,  3035,   369,  4583,  3298,
     938,   939,  4580,   940,  4981,  4576,  1086,    82,  3289,  5081,
    5335,  4005,  3385,  1086,  4439,  1305,   372,  2813,  4511,  4200,
    3054,   231,   267,  2429,   204,  3055,    94,  3106,  3696,   209,
     271,  1614,  3064,  3065,   272,  2155,   273,  3520,  3108,  2437,
    1459,   245,  3540,   246,  3849,   737,   757,  2461,   968,   933,
    3498,   968,  2737,  2206,   936,   937,  1066,  4194,  3850,   116,
     345,   938,   939,  2779,   940,  3865,  3768,   327,  5306,   327,
     933,  2145,   372,  4505,  5308,  3021,  1361,   522,  4557,   595,
    1362,   267,   647,  3563,  4636,  4763,  4326,   233,  5232,   271,
     597,  1346,  5568,   272,  5224,   273,  4826,  4824,  4694,   246,
    1306,  4485,  2827,   246,  4692,  4691,   373,   933,   934,   935,
    1769,   855,  1225,  5424,  3940,  4117,  4407,   371,   933,   934,
     935,  2982,  3619,  5438,  2182,   936,   937,  1938,   148,   149,
    4818,  1369,   938,   939,   345,   940,  1381,   267,  1890,  1086,
    2769,   267,  5009,  3788,  4954,   271,   936,   937,  3344,   271,
     944,   273,  4335,   938,   939,   273,   940,  1808,  4535,  1786,
     799,  1074,  2752,  2755,   374,  4341,   737,   737,  5337,  2760,
    4338,  2575,   737,  4594,  5164,  4344,  1861,   345,   933,   934,
     935,  2758,   183,   936,   937,  4347,   855,  3711,  4858,  1874,
     938,   939,  4596,   940,   936,   937,  1884,  5087,  3439,   386,
    5534,   938,   939,   448,   940,   345,  2763,   800,  4616,  3837,
    5346,     0,    17,  5361,   737,   625,   737,  1034,  1066,  1066,
     737,     0,     0,   737,   737,     0,   737,   737,   737,   737,
     737,   737,   737,  4859,   737,     0,     0,     0,     0,   737,
     933,   934,   935,  4860,  1227,     0,  4861,   369,     0,     0,
       0,     0,   520,     0,   936,   937,     0,    82,     0,   387,
       0,   938,   939,   372,   940,     0,     0,  1597,   231,  2952,
     386,     0,   933,   934,   935,   345,    94,     0,     0,     0,
    4862,     0,   345,    17,  2793,     0,     0,  4863,   245,     0,
     246,     0,     0,   757,     0,     0,     0,   933,   934,   935,
       0,     0,     0,     0,     0,  4864,   327,     0,     0,   116,
     608,  2382,   640,  1727,  4865,   640,   936,   937,   933,   934,
     935,  2796,     0,   938,   939,   369,   940,     0,   267,     0,
     387,  4683,  1598,     0,     0,    82,   271,  4866,     0,   679,
     272,     0,   273,  1230,     0,     0,  1074,     0,   936,   937,
    1231,     0,     0,  1053,    94,   938,   939,     0,   940,    98,
       0,  2082,     0,   625,     0,     0,   851,   371,  4867,     0,
       0,   851,   851,   936,   937,     0,     0,   855,   608,     0,
     938,   939,     0,   940,     0,     0,  2240,   116,   855,   327,
    4868,  4869,     0,   855,   936,   937,   369,     0,     0,     0,
       0,   938,   939,     0,   940,   933,    82,  2261,  4870,     0,
     345,   625,     0,     0,     0,     0,     0,     0,     0,   933,
     934,   935,     0,  4871,     0,    94,     0,   130,     0,  1233,
      98,     0,   183,     0,     0,     0,     0,   750,   327,     0,
     737,     0,     0,     0,     0,   371,     0,  4872,  4873,     0,
     933,   934,   935,     0,     0,     0,  1305,  4874,   116,     0,
       0,   835,     0,   345,     0,  2802,     0,     0,  1235,   640,
     640,   640,   640,   640,   640,   640,   640,     0,  1502,     0,
       0,   936,   937,     0,     0,  1074,     0,     0,   938,   939,
       0,   940,   171,  4875,  1931,   936,   937,  1749,   130,  1487,
    2184,     0,   938,   939,  1034,   940,     0,   327,   968,     0,
     183,     0,     0,   372,     0,     0,   371,     0,   625,   625,
     595,   737,     0,   625,     0,   520,   936,   937,     0,     0,
       0,     0,   327,   938,   939,     0,   940,     0,  4278,   204,
     246,  1306,   737,  2827,   209,     0,     0,     0,     0,  1086,
       0,  1034,     0,     0,   855,  1034,  1034,  1034,     0,  1034,
    1034,     0,     0,   171,   345,   737,     0,   855,     0,   933,
     934,   935,     0,     0,   892,   893,   894,   895,   267,     0,
       0,   183,     0,     0,  1351,     0,   271,     0,   899,   900,
       0,   372,   273,     0,     0,     0,   906,   907,   908,     0,
    1725,   369,   608,  4016,   912,  2104,   913,  2189,     0,     0,
     204,    82,     0,  2628,     0,   209,     0,     0,   246,     0,
       0,   373,   345,     0,   737,     0,  2654,     0,     0,     0,
      94,  1074,     0,   933,   934,   935,     0,     0,     0,   855,
       0,     0,   855,   855,     0,   936,   937,     0,     0,   345,
       0,     0,   938,   939,     0,   940,   267,  4017,  2086,     0,
     895,     0,   372,   116,   271,   898,     0,  1351,  1983,  4018,
     273,   737,     0,   233,     0,     0,   597,     0,     0,   933,
     934,   935,     0,   369,  1984,   911,     0,   912,  2104,   246,
    3591,     0,   373,    82,     0,     0,     0,  1086,  1086,     0,
       0,     0,     0,     0,   737,   737,     0,     0,   608,   936,
     937,     0,    94,   968,   968,   933,   938,   939,     0,   940,
       0,   371,  2197,     0,     0,     0,  1086,   267,   608,     0,
       0,     0,     0,  1086,     0,   271,     0,   608,     0,  1180,
     345,   273,     0,   608,     0,   116,     0,     0,     0,     0,
       0,   369,     0,   933,     0,   936,   937,   737,     0,     0,
       0,    82,   938,   939,     0,   940,     0,     0,  1965,     0,
       0,     0,     0,     0,     0,     0,  4019,   933,   934,   935,
      94,  4020,     0,     0,  1331,     0,   183,     0,   737,     0,
       0,   936,   937,     0,     0,   345,     0,     0,   938,   939,
       0,   940,     0,   371,  2261,     0,     0,     0,   968,     0,
       0,   855,  1074,   116,   148,   149,     0,  1074,     0,     0,
    1389,     0,   737,   968,  2830,  4021,     0,     0,     0,   936,
     937,     0,     0,  1074,  1074,     0,   938,   939,   737,   940,
       0,     0,  3421,     0,     0,     0,   369,  1074,     0,     0,
       0,     0,   608,   936,   937,     0,    82,     0,   345,     0,
     938,   939,     0,   940,     0,     0,     0,   372,   183,     0,
       0,   371,  2524,     0,     0,    94,     0,     0,   640,     0,
       0,  4022,  2145,     0,     0,     0,     0,     0,     0,   243,
       0,  2145,     0,     0,   246,     0,     0,   373,     0,     0,
     625,   369,   855,  1074,     0,     0,     0,     0,   116,   640,
    2558,    82,   327,   877,     0,     0,     0,   878,   879,   880,
    2581,  4023,     0,  1309,     0,     0,     0,   640,   640,  2916,
      94,     0,   267,     0,   895,   896,   183,     0,     0,     0,
     271,  1351,  1983,  1074,  2938,   647,   273,   737,   647,   372,
       0,     0,     0,     0,   231,     0,   909,     0,  1984,     0,
       0,   912,  2104,   116,  4931,     0,   371,     0,     0,     0,
       0,  1034,     0,     0,   245,  2938,   246,     0,     0,   757,
       0,     0,   881,   882,   883,   884,   885,   886,   887,   888,
     762,  1364,  1364,     0,   835,   835,     0,  4841,     0,   835,
       0,     0,     0,     0,     0,  2830,     0,     0,     0,     0,
    1034,  1034,  1034,  1034,   267,     0,  2670,   372,     0,     0,
       0,   371,   271,     0,     0,     0,   272,     0,   273,     0,
       0,   183,   148,   149,     0,     0,  2365,  2366,     0,   243,
    2367,   601,  4203,  2368,   246,  2369,   737,   373,     0,     0,
     855,  2830,     0,     0,     0,   327,  1074,  3015,     0,     0,
    1053,  1225,     0,  2706,  2707,     0,     0,     0,   345,     0,
     737,     0,     0,   327,     0,     0,  1034,     0,     0,     0,
       0,     0,   267,     0,   369,     0,   183,   968,     0,  1225,
     271,     0,     0,     0,    82,     0,   273,   933,   934,   935,
       0,     0,  2495,  2495,  2495,  2495,  2495,  2495,  2495,  2495,
       0,     0,   372,    94,     0,     0,     0,   521,     0,  5102,
    1168,   345,     0,   625,     0,     0,     0,  2382,     0,     0,
       0,     0,  2768,     0,     0,     0,  1169,     0,     0,   246,
       0,     0,   373,     0,     0,  5549,   116,     0,     0,     0,
       0,  1034,     0,     0,     0,     0,  3157,     0,     0,  1034,
       0,     0,  1034,  1252,     0,  4858,     0,   372,  5103,   345,
       0,  2413,   231,   936,   937,   609,     0,   267,     0,     0,
     938,   939,     0,   940,     0,   271,  1179,   851,   851,     0,
       0,   273,   245,  1227,   246,   851,   369,   757,     0,     0,
       0,     0,     0,   327,   371,  1053,    82,   327,   750,     0,
    4859,     0,   855,     0,     0,   148,   149,     0,     0,     0,
    4860,  1227,  5104,  4861,     0,    94,     0,     0,     0,     0,
       0,     0,   267,  2793,     0,  1409,  2414,     0,     0,     0,
     271,     0,     0,   609,   272,     0,   273,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4862,   116,     0,
       0,  2793,     0,  1727,  4863,     0,     0,  1053,  1749,   183,
    2796,     0,  1749,  1749,  1749,  1749,  1749,     0,     0,     0,
       0,     0,  4864,     0,     0,   968,   327,   968,     0,     0,
       0,  4865,  1230,     0,     0,     0,     0,     0,  2796,  1231,
       0,     0,     0,     0,     0,     0,   327,   737,  1053,   345,
    1086,     0,     0,     0,  4866,     0,   371,     0,     0,     0,
    1230,     0,     0,  5105,     0,     0,   836,  1231,     0,     0,
       0,   625,     0,  1034,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,  1034,  4867,     0,     0,     0,     0,
     372,   799,     0,     0,  5106,   231,  1225,     0,  5031,     0,
       0,   737,     0,     0,     0,     0,     0,  4868,  4869,  1844,
       0,  5032,     0,     0,     0,   245,  2916,   246,  1233,     0,
     757,   183,     0,     0,   345,  4870,     0,  2938,     0,     0,
       0,     0,   855,     0,     0,     0,   345,     0,     0,     0,
    4871,     0,     0,     0,  1074,  1305,  1233,     0,     0,   327,
    1066,     0,     0,     0,  2802,   267,     0,  1235,     0,     0,
       0,     0,  1086,   271,  4872,  4873,     0,   272,   327,   273,
    1086,   895,     0,     0,  4874,     0,     0,     0,     0,   855,
       0,     0,  2802,  3036,     0,  1235,     0,     0,   345,     0,
    3069,  3070,     0,   909,  3071,  1356,  4591,  3072,   912,  3073,
    5033,   971,   372,     0,     0,     0,     0,   609,     0,   595,
    4875,     0,  5034,     0,     0,  1559,   345,  5035,  2830,  5036,
     520,     0,  5037,   737,   892,   893,   894,   895,  1227,   246,
    1306,   369,  2827,     0,  1331,     0,     0,     0,   899,   900,
    5038,    82,  1575,     0,     0,     0,   906,   907,   908,     0,
    5039,   647,  5040,     0,   912,  1576,   913,  1489,  5041,     0,
      94,     0,  5042,     0,     0,     0,     0,   267,  2793,     0,
       0,     0,  1577,  5043,  1578,   271,  5044,     0,   327,     0,
    1086,   273,  2495,     0,     0,     0,     0,     0,     0,     0,
     877,     0,     0,   116,   878,   879,   880,     0,     0,     0,
    2495,  2495,     0,     0,     0,  2796,     0,     0,     0,     0,
       0,  5045,  1579,   609,   369,     0,     0,     0,     0,  2830,
       0,  4866,  5046,  2938,    82,     0,     0,  1230,     0,     0,
       0,  1580,     0,   609,  1231,     0,  5047,     0,     0,     0,
       0,     0,   609,    94,     0,     0,     0,     0,   609,     0,
       0,   371,   327,  1581,     0,     0,  2838,   640,     0,   881,
     882,   883,   884,   885,   886,   887,   888,     0,     0,     0,
       0,     0,  1582,     0,  5165,   778,   116,  5048,  2145,     0,
       0,     0,     0,   345,     0,     0,     0,     0,     0,  1332,
       0,     0,     0,     0,  5049,   327,  3560,   877,     0,  1225,
       0,   878,   879,   880,  1844,     0,  5050,     0,     0,     0,
       0,     0,  3576,  1233,  3206,     0,   183,  5051,     0,     0,
       0,     0,     0,   327,  2182,     0,  2938,     0,     0,     0,
    5052,     0,     0,     0,   371,     0,  1583,     0,     0,  1584,
    1305,     0,     0,     0,     0,   148,   149,     0,     0,  2802,
       0,     0,  1235,     0,  2370,   608,  1585,   609,   608,     0,
       0,     0,     0,  1586,     0,     0,   881,   882,   883,   884,
     885,   886,   887,   888,     0,  4858,     0,     0,     0,  4055,
    1587,  4056,     0,     0,     0,     0,     0,   737,   737,   737,
     737,   737,  1074,   327,     0,     0,     0,   372,     0,   183,
     327,  1074,  3015,     0,   595,   851,  1588,     0,     0,   835,
       0,     0,     0,     0,   835,   835,   345,     0,     0,     0,
    4859,     0,     0,     0,   246,  1306,     0,  2827,     0,     0,
    4860,  1227,  1589,  4861,   369,  1590,     0,     0,     0,     0,
       0,     0,     0,     0,    82,   968,     0,     0,     0,     0,
       0,   345,     0,   640,     0,     0,     0,     0,     0,   345,
       0,     0,   267,    94,     0,     0,     0,  4862,     0,  1727,
     271,  2793,     0,   369,  4863,     0,   273,  1591,     0,     0,
     372,  3146,     0,    82,     0,   231,     0,     0,     0,     0,
       0,     0,  4864,     0,     0,     0,   116,     0,     0,   836,
     836,  4865,    94,     0,   836,   245,     0,   246,  2796,     0,
     757,     0,   608,   608,   608,   608,   608,   608,   608,   608,
       0,     0,     0,     0,  4866,     0,     0,     0,   327,  1053,
    1230,   750,     0,     0,     0,   116,     0,  1231,     0,     0,
       0,     0,     0,     0,     0,   267,     0,     0,     0,     0,
       0,     0,     0,   271,   371,  4867,     0,   272,     0,   273,
    3778,  3778,     0,     0,     0,   640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2830,     0,  4868,  4869,     0,
    3146,   327,  1749,  3480,     0,     0,  1034,     0,   968,     0,
       0,     0,     0,   371,     0,  4870,     0,     0,     0,   386,
     892,   893,   894,   895,   148,   149,     0,     0,   898,     0,
    4871,     0,    17,     0,   899,   900,  1233,   901,     0,   183,
       0,     0,   906,   907,   908,     0,     0,     0,   911,     0,
     912,     0,   913,  1878,  4872,  4873,     0,     0,     0,     0,
       0,     0,     0,  1305,  4874,     0,     0,     0,     0,     0,
       0,     0,  2802,     0,     0,  1235,     0,  2830,   183,   387,
       0,     0,     0,   737,     0,     0,     0,     0,     0,     0,
    1225,     0,   737,     0,     0,  1034,  1034,  1034,     0,     0,
    4875,     0,   327,  1034,  2830,     0,     0,  3577,     0,     0,
       0,     0,     0,     0,  3213,     0,     0,     0,     0,     0,
     372,     0,     0,     0,     0,     0,     0,   595,     0,     0,
       0,  3653,     0,     0,     0,     0,  3576,  3600,  2830,  3602,
       0,  3605,     0,     0,     0,   369,  3611,   246,  1306,     0,
    2827,     0,     0,     0,     0,    82,  3654,     0,  3655,   372,
     327,  1066,     0,     0,   231,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,     0,     0,     0,     0,    98,
    3635,     0,   369,  1225,   245,   267,   246,   327,  1086,   757,
       0,     0,    82,   271,     0,  3656,     0,     0,  3657,   273,
       0,     0,     0,     0,     0,     0,     0,   116,     0,     0,
    1034,    94,     0,   968,   737,     0,   737,     0,   737,     0,
    1034,     0,  1227,   737,   267,   737,     0,   737,     0,     0,
       0,     0,   271,     0,     0,     0,   272,     0,   273,     0,
       0,   369,     0,     0,   116,     0,     0,   130,     0,     0,
     737,    82,   737,     0,   737,     0,     0,     0,     0,  4858,
       0,     0,  2793,     0,     0,   371,     0,  2838,     0,     0,
      94,     0,     0,     0,     0,     0,   148,   149,   327,  1252,
       0,  3658,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4010,     0,     0,     0,  1074,     0,     0,     0,  2796,
       0,     0,   371,   116,  4859,     0,     0,     0,     0,     0,
     647,     0,   171,     0,  4860,  1227,     0,  4861,  3659,     0,
       0,  1230,     0,     0,     0,     0,     0,     0,  1231,     0,
     183,  3228,     0,   327,  1309,     0,     0,     0,     0,     0,
    3660,   608,     0,     0,     0,     0,     0,     0,     0,  3146,
       0,  4862,     0,     0,     0,  2793,  3787,     0,  4863,   204,
       0,   371,   640,     0,   209,     0,  3661,   183,     0,  3560,
       0,     0,   608,     0,     0,     0,  4864,     0,     0,     0,
       0,  2830,     0,  2830,     0,  4865,     0,     0,     0,  4113,
     608,   608,  2796,     0,     0,     0,   327,  2182,     0,     0,
       0,     0,     0,  3662,  3663,   521,     0,  1233,  4866,  3664,
    1074,   372,     0,     0,  1230,     0,   231,     0,     0,  1332,
       0,  1231,   233,     0,     0,   597,   183,     0,     0,  1053,
       0,     0,     0,     0,     0,     0,   245,     0,   246,  4867,
       0,   757,     0,  2802,     0,     0,  1235,     0,   372,     0,
       0,     0,     0,     0,   345,   737,  1168,     0,  1074,     0,
       0,  4868,  4869,     0,     0,  3864,     0,     0,  3867,     0,
       0,     0,  1169,     0,     0,   246,   267,     0,   373,  4870,
       0,     0,     0,     0,   271,     0,  3146,   345,   272,     0,
     273,     0,     0,     0,  4871,   737,     0,     0,     0,     0,
    1233,     0,  1074,     0,     0,     0,   647,   372,     0,     0,
       0,     0,     0,   267,     0,  1168,  1237,  4205,  4872,  4873,
       0,   271,  1182,   633,  4230,     0,     0,   273,  4874,     0,
       0,  1169,     0,     0,   246,     0,  2802,   373,     0,  1235,
     369,     0,     0,     0,     0,     0,   737,     0,     0,     0,
      82,     0,     0,     0,     0,     0,   877,     0,     0,     0,
     878,   879,   880,     0,  4875,     0,  1053,     0,     0,    94,
       0,     0,   267,     0,     0,     0,     0,     0,     0,     0,
     271,     0,  3146,     0,  3762,  3778,   273,     0,     0,     0,
    2370,   633,     0,     0,     0,     0,   878,   879,   880,     0,
       0,     0,   116,  1749,  1749,  1749,   327,  1749,     0,     0,
       0,     0,     0,  3783,  3783,     0,     0,     0,  2495,     0,
       0,     0,     0,     0,  1074,   881,   882,   883,   884,   885,
     886,   887,   888,     0,     0,     0,   774,     0,     0,  2371,
     609,     0,  1053,   609,     0,     0,  1086,     0,     0,     0,
     835,   835,     0,     0,  3762,     0,  1086,     0,   835,   327,
     371,   881,   882,   883,   884,   885,   886,   887,   888,     0,
       0,   148,   149,     0,   845,     0,     0,     0,     0,  1086,
    3605,     0,  1034,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   836,     0,     0,     0,     0,   836,
     836,     0,     0,     0,     0,  1074,     0,   327,  2916,     0,
       0,  1074,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2351,     0,     9,   183,   386,     0,  2352,     0,
     892,   893,   894,   895,   896,  1074,  1066,     0,   898,    17,
       0,     0,     0,     0,   899,   900,     0,   901,   902,  1305,
       0,     0,   906,   907,   908,   909,     0,  1086,   911,     0,
     912,  2353,   913,  1634,     0,     0,     0,   737,     0,     0,
       0,     0,     0,   367,     0,     0,     0,     0,     0,     0,
       0,   519,     0,     0,     0,     0,   387,  2830,     0,     0,
       0,    48,     0,   640,  3146,     0,     0,   609,   609,   609,
     609,   609,   609,   609,   609,     0,   372,     0,     0,  2830,
    2830,   231,  1252,   595,     0,   633,     0,     0,     0,     0,
       0,  3146,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   245,     0,   246,  1306,     0,  2934,     0,     0,     0,
     368,     0,  2830,   892,   893,   894,   895,   327,  2830,     0,
       0,     0,   369,     0,  1983,     0,     0,   899,   900,     0,
       0,     0,    82,     0,     0,   906,   907,   908,     0,  1309,
    1984,   267,     0,   912,     0,   913,  1489,     0,     0,   271,
    1559,    94,     0,   272,  1325,   273,    98,     0,     0,  2145,
       0,     0,     0,     0,     0,     0,   369,     0,     0,     0,
     893,     0,   895,     0,     0,     0,    82,   898,     0,     0,
       0,     0,  3146,   899,   116,     0,   901,   902,     0,   904,
     905,   633,   327,  2354,     0,    94,     0,   911,     0,   912,
    4544,     0,  1506,  2897,   327,  2938,     0,     0,     0,     0,
       0,   633,     0,     0,     0,  2355,     0,     0,     0,     0,
     633,  2356,     0,     0,   130,     0,   633,     0,   116,  2357,
       0,     0,     0,     0,     0,  1074,     0,  3146,     0,     0,
       0,     0,   371,     0,     0,  4295,  4296,     0,  1594,     0,
       0,     0,     0,   148,   149,     0,   327,  3015,     0,     0,
       0,     0,     0,     0,     0,   647,     0,  1343,     0,     0,
    4308,     0,  3762,  1327,     0,     0,     0,  2358,     0,  4308,
       0,     0,     0,     0,   327,     0,   371,   795,     0,   171,
       0,   345,     0,     0,     0,     0,     0,   148,   149,     0,
    3146,     0,     0,     0,     0,     0,     0,   183,   184,  1399,
     369,     0,     0,     0,     0,     0,     0,  4615,     0,     0,
      82,     0,     0,   345,  2359,     0,     0,     0,     0,     0,
     892,   893,   894,   895,   896,   633,   204,     0,     0,    94,
       0,   209,     0,  1352,   899,   900,     0,     0,  2360,     0,
     608,   183,   906,   907,   908,   909,     0,     0,  3762,  2047,
     912,     0,   913,  1003,     0,     0,     0,     0,     0,  2361,
    2362,     0,   116,     0,     0,  4392,     0,     0,  1086,  1749,
       0,     0,  4395,  4396,     0,     0,  2363,     0,   372,     0,
       0,     0,  2364,   231,     0,     0,     0,     0,     0,   233,
       0,     0,   597,   236,     0,   238,   239,  2365,  2366,     0,
     243,  2367,   601,   602,  2368,   246,  2369,     0,   757,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     371,  1034,   372,     0,     0,     0,  1074,   231,     0,  2830,
       0,   148,   149,     0,     0,     0,     0,     0,     0,     0,
       0,   327,  2916,   267,     0,     0,     0,   245,     0,   246,
       0,   271,   757,     0,     0,   272,     0,   273,     0,  3762,
       0,   774,     0,     0,     0,     0,   609,   845,   845,     0,
       0,     0,   845,     0,     0,     0,     0,     0,  3783,     0,
       0,     0,     0,     0,     0,   183,  2830,   267,   835,     0,
       0,     0,     0,     0,  1074,   271,     0,   609,     0,   272,
    3146,   273,     0,     0,     0,   892,   893,   894,   895,   896,
    1225,     0,     0,   898,  2830,   609,   609,     0,     0,   899,
     900,     0,   901,     0,     0,     0,  4742,   906,   907,   908,
     909,  4743,     0,   911,     0,   912,   608,   913,  1634,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4744,     0,     0,     0,     0,     0,  4745,     0,
       0,  2938,     0,     0,     0,     0,   372,     0,     0,     0,
    4921,   231,     0,     0,   327,  2830,     0,     0,  4746,     0,
       0,     0,     0,     0,     0,     0,     0,  4747,  3605,     0,
       0,   245,     0,   246,  4564,     0,   757,  1225,     0,  5583,
     252,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,  2182,  5584,     0,  4544,     0,  5585,   327,  2938,     0,
    2938,     0,  1074,     0,     0,  5586,     0,     0,     0,  3762,
       0,   267,     0,     0,  4748,     0,     0,     0,     0,   271,
       0,     0,  1227,   272,     0,   273,   737,  3015,   608,   893,
    3762,   895,     0,     0,     0,     0,   898,     0,     0,     0,
       0,  1053,   899,     0,     0,   901,   902,   903,   904,   905,
       0,  4909,     0,     0,     0,  4610,   911,     0,   912,  1074,
       0,  1506,  2793,     0,  2916,     0,  2495,  2838,     0,     0,
    4230,     0,     0,     0,     0,  4909,     0,     0,     0,     0,
    4749,     0,     0,     0,  5587,  3762,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2371,     0,     0,  5588,  2796,
       0,     0,     0,     0,     0,     0,     0,  2916,     0,  1227,
       0,  1034,  1034,     0,  2938,  1074,     0,     0,  4750,  4751,
       0,  1230,  1323,     0,     0,  4659,  4660,     0,  1231,     0,
       0,  5589,     0,     0,   737,     9,   737,   386,   737,     0,
    4752,  1034,  3762,     0,     0,     0,     0,     0,     0,  2793,
      17,  4753,     0,     0,     0,   836,   836,  5590,     0,  5591,
    1074,     0,  3015,   836,     0,     0,  5592,   369,  5593,  5594,
       0,     0,  1324,  5595,     0,     0,     0,    82,     0,     0,
       0,  5596,     0,     0,   367,     0,  2796,     0,  4754,     0,
       0,  5597,   519,     0,  5598,     0,    94,   387,     0,     0,
       0,     0,    48,  3762,     0,     0,     0,  1233,  1230,     0,
       0,     0,     0,     0,     0,  1231,  5599,     0,     0,  2830,
       0,     0,     0,    58,     0,   892,   893,   894,   895,   116,
       0,     0,     0,   898,     0,  1351,     0,     0,  2830,   899,
     900,     0,     0,  2802,  2830,  4755,  1235,   906,   907,   908,
       0,   368,     0,   911,     0,   912,  2104,   913,  2189,     0,
       0,     0,     0,   369,     0,     0,     0,     0,     0,  5600,
       0,     0,     0,    82,  4803,     0,     0,     0,     0,     0,
    2830,  2830,     0,     0,     0,  2830,  5601,   371,     0,     0,
       0,     0,    94,     0,  1233,  1325,     0,    98,   148,   149,
    1326,     0,     0,     0,  2916,     0,     0,  5602,  2938,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   116,     0,     0,     0,     0,
    2802,     0,     0,  1235,     0,  5603,   892,   893,   894,   895,
     896,     0,   897,     0,   898,     0,  1351,  1343,  5604,     0,
     899,   900,   183,     0,     0,     0,  4230,  4230,   906,   907,
     908,   909,   910,     0,   911,   130,   912,  2104,   913,  1360,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3762,   371,     0,     0,  4230,  4230,  4230,  4230,
       0,     0,     0,     0,   148,   149,     0,  1237,     0,     0,
    2577,     0,     0,     0,     0,   608,     0,     0,     0,     0,
    1749,     0,     0,     0,  1327,     0,     0,     0,     0,     0,
     892,   893,   894,   895,   896,  2830,  1074,     0,   795,   170,
     171,  1983,     0,   372,   899,   900,     0,     0,   231,     0,
       0,     0,   906,   907,   908,   909,     0,  1984,   183,   184,
     912,     0,   913,  1003,     0,  3146,     0,     0,   245,     0,
     246,     0,     0,   757,     0,     0,     0,     0,     0,     0,
       0,     0,   200,     0,     0,     0,     0,   204,     0,  2644,
       0,     0,   209,     0,     0,   892,   893,   894,   895,     0,
       0,     0,     0,   898,     0,  1351,     0,     0,   267,   899,
     900,   656,     0,     0,     0,     0,   271,   906,   907,   908,
     272,     0,   273,   911,     0,   912,  2104,   913,  4855,     0,
       0,     0,     0,     0,     0,     0,   462,   463,   464,  1328,
     466,     0,   467,   468,  1329,   470,   471,   472,   473,     0,
       0,   474,     0,  1330,   236,     0,   238,   239,   476,   477,
     478,   479,   480,   481,   245,   482,   246,   483,   484,   757,
       0,     0,     0,     0,     0,     0,     0,  2379,   633,     0,
       0,   633,   327,  4544,  1074,     0,     0,     0,     0,     0,
    2830,     0,     0,     0,     0,   609,     0,     0,     0,  1074,
       0,     0,     0,     0,   267,  2830,     0,     0,     0,     0,
       0,     0,   271,     0,     0,   327,   272,     0,   273,     0,
    4909,     0,     0,  4909,     0,  1237,     0,     0,     0,     0,
       0,     0,   845,     0,  3762,     0,     0,   845,   845,     0,
    2916,     0,     0,     0,     0,     0,  4909,     0,     0,   892,
     893,   894,   895,     0,     0,  2660,  1237,   898,  2664,     0,
    2667,  1074,  2830,   899,   900,     0,     0,     0,     0,     0,
    3146,   906,   907,   908,  2805,     0,     0,   911,     0,   912,
    2805,   913,  1878,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   339,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
       0,  2705,   474,   419,   475,     0,   737,     0,     0,   476,
     477,   478,   479,   480,   481,     0,   482,     0,   483,   484,
       0,     0,     0,     0,   737,   633,   633,   633,   633,   633,
     633,   633,   633,   836,     0,   339,  1074,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   660,     0,
       0,     0,     0,     0,     0,     0,  4544,     0,   892,   893,
     894,   895,   896,     0,   897,     0,   898,     0,     0,     0,
       0,   609,   899,   900,     0,   901,   902,   903,   904,   905,
     906,   907,   908,   909,   910,  3762,   911,     0,   912,  1727,
     913,   914,   915,     0,     0,  3068,     0,   895,     0,     0,
       0,   327,   898,     0,     0,     0,     0,     0,   899,     0,
       0,   901,   902,     0,   904,   905,  3069,  3070,  2830,   909,
    3071,  1356,  1357,  3072,   912,  3073,   608,  1506,     0,  2832,
     644,     0,   892,   893,   894,   895,   896,     0,   897,     0,
     898,  1350,  1351,     0,  2830,  1352,   899,   900,     0,   901,
     902,     0,   904,   905,  1353,  1354,   908,   909,  1355,  1356,
    1357,  1358,   912,  1359,   913,  1360,     0,     0,     0,     0,
       0,   892,   893,   894,   895,   896,     0,   897,     0,   898,
       0,  1351,     0,   609,  1352,   899,   900,     0,     0,     0,
       0,   738,     0,   906,   907,   908,   909,   910,   644,   911,
    2047,   912,  2104,   913,  1360,     0,   892,   893,   894,   895,
    1074,     0,   897,     0,     0,  1074,     0,     0,     0,     0,
     899,   900,     0,   753,   339,     0,     0,  3762,   906,   907,
     908,     0,   910,  2916,     0,     0,   912,     0,   913,  2528,
     419,   419,     0,   780,     0,  5566,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     892,   893,   894,   895,   896,   339,     0,     0,   898,   339,
       0,     0,     0,     0,   899,   900,     0,     0,     0,  2961,
       0,   854,  1353,  1354,   908,   909,  3071,  1356,  1357,  3072,
     912,  3073,   913,  1634,     0,  1727,     0,     0,     0,     0,
     419,     0,     0,     0,     0,  2984,     0,  2985,     0,     0,
       0,     0,   892,   893,   894,   895,   896,     0,     0,  2830,
     898,  1350,     0,     0,     0,     0,   899,   900,     0,   901,
     902,     0,   904,   905,   906,   907,   908,   909,   959,   961,
     911,   963,   912,     0,   913,  1634,     0,   892,   893,   894,
     895,   896,     0,     0,   963,   898,   975,  1351,  1074,     0,
     975,   899,   900,     0,     0,  3605,     0,     0,     0,   906,
     907,   908,   909,  3158,     0,   911,     0,   912,  2104,   913,
    3323,     0,     0,     0,     0,     0,   753,     0,  5672,     0,
       0,     0,     0,     0,     0,  1180,   963,     0,  1008,     0,
    1010,   963,   963,  1015,     0,   959,   963,     0,     0,   975,
     963,     0,  1056,     0,  1059,   959,   963,   963,   963,   963,
       0,   963,   644,     0,   633,     0,  1075,  1080,  1089,   327,
       0,  1096,     0,     0,  1104,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  5709,     0,     0,     0,  5709,
       0,     0,     0,     0,     0,   633,  3242,     0,     0,  5709,
       0,   327,  5709,   959,     0,     0,     0,     0,  1116,  1117,
     963,   963,     0,   633,   633,     0,     0,  1117,     0,     0,
       0,     0,     0,     0,  1133,   959,  1138,  1140,  1141,     0,
       0,     0,     0,  1148,     0,     0,     0,     0,     0,     0,
       0,  1154,     0,  1117,     0,  1173,     0,     0,     0,     0,
       0,     0,   975,   963,   419,   975,  1207,  1212,  1217,  1221,
    1224,  1240,  1243,     0,     0,     0,  1247,     0,   644,     0,
     975,     0,     0,  1262,   963,     0,   975,     0,  1268,   959,
    1243,   963,  1262,     0,   419,     0,     0,     0,  1284,     0,
    2644,     0,  1288,     0,     0,     0,     0,   644,     0,     0,
     609,     0,     0,   644,     0,     0,     0,   892,   893,   894,
     895,   896,     0,   897,     0,   898,     0,     0,     0,     0,
     753,   899,   900,     0,     0,     0,     0,     0,     0,   906,
     907,   908,   909,   910,   339,   911,     0,   912,     0,   913,
     914,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   892,   893,   894,   895,     0,     0,     0,  1059,   898,
    3605,  1379,   419,   419,   419,   899,   900,  1386,     0,     0,
       0,   963,     0,   906,   907,   908,  1408,     0,  1412,   911,
       0,   912,   975,   913,  1489,  3301,  1421,   975,   963,     0,
       0,  1431,     0,   419,   963,     0,   419,   963,  1439,  1441,
       0,     0,   644,  2379,   963,     0,   963,     0,  1243,   963,
       0,  1458,     0,     0,     0,     0,     0,     0,     0,  3146,
       0,   892,   893,   894,   895,   896,     0,     0,     0,   898,
    1350,     0,     0,     0,     0,   899,   900,  1484,  1486,   902,
       0,     0,     0,   906,   907,   908,   909,     0,     0,   911,
       0,   912,     0,   913,  1634,     0,     0,     0,     0,     0,
       0,     0,     0,   845,   845,     0,     0,     0,   963,     0,
       0,   845,     0,     0,     0,     0,     0,     0,   419,     0,
     892,   893,   894,   895,   896,     0,     0,  1535,   898,     0,
    1351,     0,     0,     0,   899,   900,     0,     0,     0,     0,
       0,     0,   906,   907,   908,   909,     0,     0,   911,     0,
     912,  2104,   913,  3650,     0,     0,     0,  3424,   892,   893,
     894,   895,   896,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   899,   900,     0,   901,   902,   753,   780,     0,
     906,   907,   908,   909,   854,   854,     0,     0,   912,   854,
     913,  1003,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   419,   419,     0,     0,     0,     0,     0,
       0,     0,   419,   419,   419,   419,   419,   419,   419,   419,
     419,   419,   419,   419,   419,     0,     0,     0,  3476,  3477,
       0,     0,     0,     0,     0,  1225,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   419,  1237,  1690,   419,   419,  1694,
    1696,     0,     0,     0,     0,   419,     0,     0,  1702,  1703,
    1704,  1706,  1707,  1709,     0,     0,     0,     0,     0,  3667,
     892,   893,   894,   895,   896,     0,     0,     0,   898,     0,
       0,  5332,     0,     0,   899,   900,     0,  1751,     0,     0,
       0,     0,   906,   907,   908,   909,     0,     0,   911,     0,
     912,  4858,   913,  1634,   892,   893,   894,   895,   896,     0,
     963,     0,  1056,   963,   419,  1773,  1116,     0,   899,   900,
    1212,  1217,  1247,  1412,  1458,  1535,   906,   907,   908,   909,
       0,     0,     0,     0,   912,     0,   913,  1003,     0,     0,
       0,   609,     0,     0,     0,     0,  4859,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4860,  1227,     0,  4861,
     369,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,  1850,     0,     0,  3618,     0,     0,     0,     0,
     892,   893,   894,   895,   896,     0,     0,  1484,     0,    94,
    1351,     0,     0,  4862,   899,   900,     0,  2793,     0,     0,
    4863,     0,   906,   907,   908,   909,   753,     0,     0,     0,
     912,  2104,   913,  3323,     0,     0,     0,     0,  4864,     0,
       0,     0,   116,  3652,     0,     0,     0,  4865,     0,   892,
     893,   894,   895,   896,  2796,   897,     0,     0,     0,     0,
       0,     0,     0,   899,   900,     0,  1850,  1850,  1850,  1850,
    4866,   906,   907,   908,   909,   910,  1230,     0,     0,   912,
       0,   913,  1901,  1231,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     371,  4867,     0,     0,     0,     0,   892,   893,   894,   895,
     896,   148,   149,     0,   898,     0,     0,     0,     0,     0,
     899,   900,     0,  4868,  4869,     0,     0,     0,   906,   907,
     908,   909,     0,   633,   911,     0,   912,  3158,   913,  1003,
       0,  4870,     0,     0,  3853,     0,     0,     0,     0,     0,
    2577,   774,     0,     0,     0,     0,  4871,     0,     0,     0,
       0,     0,  1233,     0,     0,   183,     0,     0,  1225,     0,
    5031,     0,   892,   893,   894,   895,   896,     0,     0,     0,
    4872,  4873,     0,  5032,  2509,     0,   899,   900,     0,     0,
    4874,     0,     0,     0,   906,   907,   908,   909,  2802,     0,
       0,  1235,   912,     0,   913,  1003,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3802,     0,     0,     0,     0,  3806,  4875,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   963,     0,
    3158,     0,     0,     0,     0,     0,   372,     0,     0,   419,
       0,   231,     0,     0,     0,     0,     0,     0,     0,     0,
     339,     0,   339,     0,     0,     0,     0,     0,     0,     0,
       0,   245,  5033,   246,  3832,     0,   757,     0,     0,     0,
       0,   845,     0,     0,  5034,     0,     0,     0,     0,  5035,
       0,  5036,     0,     0,  5037,     0,     0,     0,     0,     0,
    1227,     0,  3858,  3987,     0,     0,  3866,     0,     0,     0,
       0,   267,  5038,     0,     0,     0,     0,  1484,     0,   271,
       0,     0,  5039,   272,  5040,   273,     0,     0,     0,   633,
    5041,     0,     0,     0,  5042,     0,     0,     0,     0,     0,
    2793,     0,     0,     0,  2805,  5043,     0,     0,  5044,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   963,
    2212,     0,     0,     0,     0,   963,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3925,     0,  2796,     0,     0,
       0,     0,     0,  5045,  3932,  3933,     0,     0,     0,     0,
       0,     0,     0,  4866,  5046,     0,     0,     0,     0,  1230,
       0,     0,  3946,     0,     0,     0,  1231,  2265,  5047,  2268,
       0,  2270,  1773,  2272,     0,     0,  2275,  2277,     0,  2280,
    2282,  2284,  2286,  2287,   963,  2289,     0,  2292,     0,     0,
       0,     0,  1288,     0,     0,     0,  4100,     0,     0,     0,
       0,   633,     0,     0,     0,     0,     0,     0,     0,  5048,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  5049,     0,   419,   419,
       0,     0,     0,  3992,   419,     0,  1844,     0,  5050,     0,
       0,     0,     0,     0,     0,  1233,     0,     0,     0,  5051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   339,
       0,     0,  5052,     0,     0,   644,     0,     0,   644,  4029,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2802,     0,     0,  1235,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,     0,     0,
     474,     0,   475,     0,     0,     0,  2419,   476,   477,   478,
     479,   480,   481,  4192,   482,     0,   483,   484,     0,   854,
       0,     0,     0,     0,   854,   854,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   339,     0,     0,     0,     0,     0,   419,   419,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3798,     0,     0,     0,
       0,  1016,     0,     0,     8,     0,     0,     0,     0,  1017,
       0,     0,  4127,     0,     0,     0,  3799,     0,     0,     0,
    2470,   339,     0,   419,   579,  4145,  1018,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2494,  2494,  2494,  2494,  2494,  2494,  2494,  2494,
       0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1484,     0,     0,     0,  1019,     0,     0,     0,     0,     0,
     339,  3242,     0,     0,     0,  1020,     0,     0,     0,     0,
       0,     0,     0,     0,  1751,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   339,  2470,  1021,     0,     0,
       0,     0,  2570,     0,     0,  2578,     0,     0,     0,     0,
       0,     0,  1089,  1022,  1023,     0,     0,     0,     0,     0,
       0,  1412,     0,    82,  2589,     0,     0,     0,  2593,     0,
       0,     0,     0,    88,     0,    90,     0,     0,     0,     0,
       0,  4373,    94,     0,  2607,     0,     0,     0,     0,   100,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1024,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   116,  1535,     0,     0,     0,
       0,     0,     0,  1025,  2647,  1026,     0,  2593,   633,  1288,
       0,     0,     0,     0,     0,     0,  1027,   126,     0,     0,
       0,     0,     0,  4302,     0,  4303,     0,     0,     0,   128,
       0,   129,     0,     0,     0,     0,   131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   371,  2593,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4479,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2719,  2724,     0,     0,     0,     0,     0,  2593,  2729,     0,
       0,     0,     0,     0,     0,     0,   168,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2747,
    1028,  2751,     0,     0,     0,     0,     0,     0,   183,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4403,     0,     0,     0,     0,   210,  4409,     0,     0,     0,
       0,   212,     0,  1029,     0,     0,  4100,     0,     0,     0,
       0,  1240,     0,  2781,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   372,
       0,     0,   229,     0,     0,   419,  4446,     0,     0,     0,
    4449,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1288,   244,     0,     0,     0,   246,     0,     0,  1030,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3667,     0,     0,   258,   259,   260,
     261,   262,   263,   264,     0,     0,     0,     0,     0,     0,
       0,   644,     0,     0,   267,     0,     0,     0,  1031,     0,
       0,     0,   271,     0,     0,     0,     0,     0,   273,     0,
       0,     0,     0,     0,     0,     0,  1225,     0,     0,     0,
       0,     0,  2494,     0,     0,   339,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2470,     0,     0,     0,
    2494,  2494,     0,     0,     0,     0,     0,     0,     0,  2924,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     419,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4857,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4558,     0,     0,     0,  4561,
       0,     0,  4858,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4572,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3242,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4581,  4582,     0,     0,     0,     0,     0,  4859,     0,     0,
    3853,  3853,     0,     0,     0,     0,     0,  4860,  1227,     0,
    4861,   369,     0,     0,     0,     0,     0,     0,     0,  3003,
       0,    82,     0,     0,     0,     0,     0,     0,   339,   633,
       0,     0,     0,     0,  3025,     0,  4756,  3025,     0,  4373,
      94,     0,     0,  3040,  4862,     0,   339,     0,  2793,     0,
       0,  4863,     0,     0,     0,     0,     0,     0,     0,     0,
    3158,     0,     0,     0,  3158,     0,     0,     0,     0,  4864,
       0,     0,     0,   116,     0,     0,     0,     0,  4865,     0,
       0,     0,     0,     0,     0,  2796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4866,     0,     0,     0,     0,     0,  1230,     0,     0,
       0,     0,     0,     0,  1231,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   371,  4867,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   148,   149,     0,     0,  3119,     0,     0,     0,
       0,     0,     0,     0,  4868,  4869,     0,     0,     0,     0,
     854,   854,     0,     0,     0,     0,     0,     0,   854,     0,
       0,     0,  4870,     0,     0,     0,   339,     0,  2470,     0,
     339,  3145,   419,     0,     0,     0,     0,  4871,     0,     0,
       0,     0,     0,  1233,     0,     0,   183,     0,  4877,     0,
       0,     0,  4771,  4772,     0,     0,     0,     0,     0,     0,
       0,  4872,  4873,  4780,     0,     0,     0,     0,     0,     0,
    1305,  4874,     0,     0,     0,     0,     0,     0,     0,  2802,
       0,     0,  1235,     0,     0,     0,     0,     0,     0,     0,
    1104,  2272,     0,     0,     0,  2280,  2282,  2287,  2292,  1288,
       0,     0,     0,     0,     0,     0,     0,  4875,     0,   339,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2719,  2724,  2747,   372,     0,   339,
    3211,  3247,   231,  3253,   595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4827,   245,     0,   246,  1306,     0,  2934,     0,     0,
       0,     0,     0,     0,     0,     0,   339,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3308,     0,     0,     0,   975,     0,
       0,     0,   267,     0,  1850,  1850,     0,     0,     0,   753,
     271,     0,     0,     0,   272,     0,   273,     0,     0,     0,
       0,     0,  4373,     0,     0,     0,     0,     0,  4890,     0,
       0,     0,     0,     0,     0,  2647,     0,     0,     0,     0,
       0,     0,   339,  3003,     0,     0,  3357,  4901,     0,     0,
    1850,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   339,  4209,  2470,     0,     0,     0,     0,  4210,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4211,     0,     0,     0,     0,
       0,  1850,  1850,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  5054,     0,     0,  5062,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3423,  4212,     0,     0,
       0,     0,     0,     0,     0,  4479,  4962,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    5097,     0,  4970,  5108,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1850,     0,     0,     0,     0,     0,     0,
       0,  3458,     0,     0,  4213,     0,  4977,     0,  4978,     0,
       0,   339,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4214,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   369,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4215,     0,
       0,    94,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     419,   419,     0,     0,     0,   339,     0,     0,     0,     0,
     644,     0,     0,  4216,   116,     0,     0,     0,     0,     0,
       0,  4217,     0,     0,     0,     0,     0,     0,   780,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4877,     0,  4218,     0,  5090,   339,  3145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4219,
    4220,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   371,     0,     0,  4756,   339,  3003,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4877,     0,     0,  4221,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  5146,
    5147,     0,  4222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   183,     0,     0,
    1240,  3636,  3638,  3640,  3642,     0,   339,     0,     0,     0,
       0,     0,     0,   339,  4223,   753,     0,     0,   854,     0,
       0,  1305,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4224,  4225,     0,     0,     0,
       0,     0,  5108,     0,     0,     0,  3145,     0,     0,     0,
       0,     0,     0,  5205,     0,     0,     0,  5208,     0,     0,
       0,     0,     0,     0,     0, -1841,   644,  4877,     0,  4877,
       0,  4877,     0,  4877,     0,     0,     0,     0,   372,   228,
       0,     0,     0,     0,     0,   595,  1168,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     243,     0,  1169,     0,     0,   246,  1306,     0,  4612,     0,
       0,     0,   252,     0,     0,  4227,  3746,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   339,  3145,   267,  3761,     0,  4228,  4229,     0,     0,
       0,   271,     0,   419,     0,     0,     0,   273,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  5406,  3782,  3782,     0,     0,     0,  2494,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   339,  3003,     0,     0,  5054,     0,
    5054,     0,     0,     0,  5429,     0,     0,     0,     0,     0,
       0,  3253,     0,     0,  3761,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  5108,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   419,     0,     0,     0,
       0,     0,     0,     0,     0,  2578,     0,     0,     0,  5372,
       0,     0,     0,     0,     0,   339,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4877,  4877,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3458,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   339,  3211,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     339,  3145,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4877,     0,     0,     0,  4877,     0,     0,   419,     0,   419,
       0,  3967,     0,     0,     0,     0,   419,     0,   419,     0,
    3972,     0,     0,     0,     0,     0,     0,  5478,  5479,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3642,     0,   419,     0,   419,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  5500,     0,
    5605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4877,   339,  3145,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1850,     0,     0,  5511,     0,
       0,     0,     0,     0,     0,  4877,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1016,     0,     0,
       8,     0,     0,     0,     0,  1017,   339,  3145,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     579,     0,  1018,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4082,     0,     0,   644,     0,     0,     0,     0,
       0,     0,  3761,     0,     0,     0,     0,     0,     0,     0,
       0,  4103,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,  1535,     0,  2924,  2924,  4877,  2924,  4877,   339,
    3211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1019,     0,     0,     0,     0,  1850,     0,  1850,     0,     0,
       0,  1020,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4152,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4877,     0,  1021,     0,     0,     0,     0,     0,     0,
    3253,     0,     0,     0,     0,     0,     0,     0,  4171,  1022,
    1023,     0,     0,     0,     0,     0,     0,     0,     0,    82,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
       0,    90,     0,     0,     0,     0,     0,     0,    94,     0,
       0,     0,     0,     0,     0,   100,     0,     0,  3040,     0,
       0,     0,     0,     0,     0,  1024,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   116,     0,     0,     0,     0,     0,     0,     0,  1025,
       0,  1026,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1027,   126,     0,     0,     0,     0,     0,  4264,
       0,     0,     0,     0,     0,   128,     0,   129,     0,     0,
       0,     0,   131,     0,     0,     0,     0,     0,     0,  3761,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   371,
       0,     0,     0,     0,     0,     0,     0,     0,  3782,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3638,  3640,  3642,   339,
    3211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4315,   975,     0,     0,  1028,     0,     0,   975,
       0,     0,     0,     0,   183,     0,  3247,     0,     0,  4333,
       0,     0,     0,     0,  4337,     0,     0,     0,     0,     0,
       0,     0,   339,     0,     0,     0,     0,     0,  1305,  4209,
       0,     0,     0,     0,     0,  4210,     0,     0,     0,  1850,
       0,   210,     0,     0,     0,     0,     0,   212,     0,  1029,
       0,     0,  4211,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     339,  2470,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4212,   372,     0,     0,   229,     0,
       0,     0,   595,     0,     0,     0,     0,     0,     0,  4171,
       0,     0,     0,     0,     0,     0,     0,     0,   244,     0,
       0,     0,   246,  1306,  1850,  5707,     0,     0,     0,     0,
    3761,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4419,  4213,     0,   258,   259,   260,   261,   262,   263,   264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4214,
     267,     0,     0,     0,  1031,     0,  2494,     0,   271,   369,
       0,     0,     0,     0,   273,  4445,     0,     0,     0,    82,
       0,     0,     0,     0,     0,  3761,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4215,     0,     0,    94,     0,
       0,     0,     0,     0,  1016,     0,     0,     8,     0,     0,
       0,     0,  1017,     0,     0,     0,     0,     0,     0,     0,
     339,     0,     0,     0,     0,     0,     0,   579,     0,  1018,
    4216,   116,     0,     0,     0,     0,     0,     0,  4217,     0,
     419,     0,  3761,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4218,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,     0,     0,     0,  4219,  4220,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1019,     0,   371,
       0,  4103,     0,     0,     0,   339,     0,     0,  1020,     0,
       0,     0,     0,  4171,     0,     0,     0,   339,     0,     0,
       0,  4221,     0,     0,     0,  1850,     0,     0,     0,     0,
    1021,     0,     0,     0,     0,     0,  1850,     0,     0,  4222,
       0,  1850,     0,     0,     0,     0,  1022,  1023,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,     0,     0,     0,   183,   333,    88,     0,    90,   339,
    2470,     0,     0,     0,     0,    94,     0,     0,     0,     0,
       0,  4223,   100,   417,     0,     0,     0,     0,     0,     0,
       0,     0,  1024,     0,     0,     0,     0,   339,     0,     0,
       0,     0,  4224,  4225,     0,     0,     0,     0,   116,     0,
       0,     0,     0,     0,     0,   333,  1025,     0,  1026,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1027,
     126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   372,   228,     0,     0,   131,
       0,     0,     0,  1168,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   371,   243,     0,  1169,
       0,     0,   246,     0,     0,  4226,     0,     0,     0,   252,
       0,     0,  4227,     0,     0,     0,     0,     0,     0,     0,
       0,  3253,  4171,     0,     0,     0,     0,     0,     0,  4333,
       0,     0,  1850,     0,     0,     0,     0,     0,     0,   168,
     267,     0,     0,  4228,  4229,  1850,     0,     0,   271,  3247,
     642,     0,     0,  1028,   273,     0,     0,     0,     0,     0,
       0,   183,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   339,  3145,     0,     0,   210,     0,
       0,     0,     0,     0,   212,     0,  1029,     0,     0,     0,
       0,   417,     0,     0,     0,     0,     0,  1850,   642,     0,
    1850,  1850,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   372,   752,   333,   229,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     417,   417,     0,     0,     0,   244,     0,     0,     0,   246,
       0,     0,  1030,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   333,     0,     0,     0,   333,
     258,   259,   260,   261,   262,   263,   264,     0,     0,     0,
       0,   852,     0,     0,     0,     0,     0,   267,     0,     0,
       0,  1031,     0,     0,     0,   271,     0,     0,     0,     0,
     417,   273,     0,     0,     0,     0,     0,   339,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   417,   417,
       0,   417,   339,     0,  4171,     0,     0,  1484,     0,     0,
     339,     0,     0,     0,   417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1850,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4896,
    3145,     0,     0,     0,     0,     0,   752,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   417,     0,     0,     0,
     417,   417,   417,  1014,     0,   417,   417,     0,   419,     0,
     417,     0,  1054,     0,   417,   417,   417,   417,   417,   417,
       0,   417,   642,     0,     0,     0,   417,     0,  1088,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1850,     0,     0,   417,     0,     0,     0,     0,  1115,   417,
     417,   417,     0,     0,     0,     0,     0,   417,     0,     0,
       0,     0,     0,     0,   417,   417,   417,  4896,   417,   419,
       0,   419,     0,   417,     0,     0,     0,     0,     0,     0,
       0,  1153,     0,   417,     0,  1172,     0,     0,     0,  1188,
    1192,  1196,     0,   417,   417,  3761,   417,  1210,  1215,  1219,
    1223,   417,   417,     0,     0,     0,     0,     0,   642,     0,
    1258,     0,     0,   417,   417,     0,     0,     0,   417,   417,
    1271,   417,   417,     0,   417,     0,     0,     0,   642,     0,
       0,     0,   417,     0,     0,     0,     0,   642,     0,     0,
       0,     0,     0,   642,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     752,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  5067,     0,     0,  1850,     0,
       0,     0,     0,     0,     0,     0,     0,   975,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   417,     0,
       0,  1271,  1382,  1383,  1384,     0,     0,   417,     0,     0,
       0,   417,     0,     0,     0,     0,  1407,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   417,  3761,   417,     0,
       0,  1429,     0,  1432,   417,     0,  1435,   417,  1438,   417,
       0,     0,   642,     0,   417,     0,   417,     0,   417,   417,
       0,  1457,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1483,   417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,  1533,     0,     0,
       0,     0,     0,  4896,     0,     0,     0,     0,     0,     0,
    1850,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   752,     0,     0,
       0,     0,     0,     0,   852,   852,     0,     0,     0,   852,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   417,   417,     0,     0,     0,     0,     0,
       0,     0,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   417,     0,  1689,  1691,  1692,  1693,
    1695,     0,     0,     0,     0,   417,     0,     0,  1701,   417,
     417,  1705,   417,  1708,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   339,  3003,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1750,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1850,     0,     0,     0,     0,     0,     0,     0,   339,     0,
     417,     0,  1054,   417,  1771,   417,  1115,     0,     0,     0,
    1210,  1215,     0,     0,  1457,  1533,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1850,     0,     0,
       0,     0,     0,     0,     0,     0,     9,     0,   386,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,  1533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1483,     0,     0,
       0,     0,     0,  1324,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   367,   752,     0,     0,  5417,
       0,     0,     0,   519,     0,     0,     0,     0,   387,     0,
       0,     0,     0,    48,     0,     0,     0,  5426,  2154,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    58,     0,  1533,  1533,  1533,  1533,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3211,
       0,     0,   368,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   369,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,   339,     0,  1325,     0,    98,     0,
       0,  1326,     0,  5497,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   116,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   371,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   148,   149,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2100,
       0,     0,     0,     0,     0,  1327,     0,     0,     0,     0,
     333,     0,   333,     0,     0,     0,     0,     0,     0,   795,
     170,   171,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   183,
     184,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   200,     0,     0,     0,  1483,   204,     0,
       0,     0,     0,   209,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   417,
     417,     0,     0,     0,     0,   417,     0,   462,   463,   464,
    1328,   466,     0,   467,   468,  1329,   470,   471,   472,   473,
       0,     0,   474,     0,  1330,   236,     0,   238,   239,   476,
     477,   478,   479,   480,   481,   245,   482,   246,   483,   484,
     757,     0,     0,     0,     0,     0,     0,   417,     0,  2267,
       0,   417,   417,  2271,     0,     0,   417,  2276,     0,  2279,
    2281,  2283,  2285,   417,   417,  2288,     0,  2291,     0,     0,
       0,     0,   417,     0,     0,   267,     0,     0,     0,     0,
       0,     0,     0,   271,     0,     0,     0,   272,     0,   273,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   339,     0,     0,     0,     0,     0,   417,   417,
       0,     0,     0,     0,  2322,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   339,     0,     0,     0,     0,   333,
       0,     0,     0,     0,     0,   642,     0,     0,   642,     0,
    1566,  1567,  1568,  1569,  1570,  1571,  1573,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1054,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   852,
       0,     0,     0,     0,   852,   852,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   333,     0,     0,     0,     0,     0,   417,   417,
       0,  1663,  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,
    1672,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,
    1682,  1683,  1684,  1685,  1686,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2469,   333,     0,   417,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
    1756,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       9,     0,   386,     0,     0,     0,     0,     0,     0,     0,
    1483,     0,     0,     0,     0,    17,     0,     0,     0,     0,
     333,     0,  1781,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1750,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   333,  2469,     0,     0,   367,
       0,     0,     0,     0,     0,   417,     0,   519,     0,     0,
       0,     0,   387,     0,     0,     0,     0,    48,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2606,    63,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   368,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1533,     0,   369,     0,
       0,     0,     0,     0,  2646,     0,     0,   417,    82,   417,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,     0,     0,
      97,     0,    98,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   417,     0,     0,     0,     0,     0,
     116,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     9,     0,   386,     0,     0,
    2717,  2722,     0,     0,     0,     0,     0,   417,   417,     0,
      17,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,     0,     0,     0,     0,   134,     0,     0,     0,  2745,
       0,     0,     0,     0,     0,  2757,     0,     0,   371,     0,
       0,     0,     0,     0,   367,     0,     0,     0,     0,   148,
     149,     0,   519,     0,     0,     0,     0,   387,     0,     0,
     417,     0,    48,     0,     0,     0,     0,  2131,     0,   794,
       0,     0,     0,   165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   795,     0,   171,     0,     0,     0,     0,
       0,   417,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   183,   184,     0,     0,     0,     0,     0,
       0,   368,     0,     0,     0,     0,     0,     0,     0,     0,
     193,     0,     0,  2132,     0,  2824,     0,   200,    81,  2146,
    2147,  2148,   204,    82,     0,     0,     0,   209,     0,     0,
       0,   417,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,     0,     0,    97,     0,    98,     0,  2161,
    2162,  2163,  2164,  2165,  2166,  2167,  2168,  2169,  2170,  2171,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   642,   225,     0,   227,   116,     0,     0,   230,   231,
       0,   232,     0,     0,     0,   233,     0,     0,   235,   236,
     237,   238,   239,     0,     0,     0,     0,     0,     0,   245,
       0,   246,  2492,     0,   757,   333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,  2469,     0,     0,     0,
    2492,  2492,     0,     0,     0,     0,     0,     0,     0,  2923,
       0,     0,     0,   371,     0,     0,     0,     0,     0,   267,
    2939,     0,     0,     0,   148,   149,     0,   271,     0,     0,
       0,   272,     0,   273,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   794,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   795,     0,
     171,     0,     0,     0,     0,     0,     0,     0,  2294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   183,   184,
       0,     0,     0,     0,     0,  2304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   200,     0,     0,     0,     0,   204,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,     0,  3002,
       0,     0,     0,     0,     0,     0,     0,     0,   333,     0,
       0,     0,     0,     0,  3024,     0,     0,  3024,     0,     0,
       0,     0,     0,  3039,     0,     0,   333,     0,     0,     0,
       0,  1533,  1533,     0,     0,     0,     0,   225,     0,   227,
       0,     0,     0,   230,   231,     0,   232,     0,     0,     0,
     233,     0,     0,   235,   236,     0,   238,   239,     0,     0,
       0,     0,     0,     0,   245,     0,   246,     0,     0,   757,
    2133,     0,  2428,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2453,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   267,     0,     0,     0,     0,     0,
    1625,  1626,   271,     0,     0,     0,   272,     0,   273,     0,
       9,     0,   386,     0,  -319,     0,  3117,     0,     0,     0,
       0,     0,     0,     0,     0,    17,     0,     0,     0,     0,
     852,   852,     0,     0,     0,     0,     0,     0,   852,     0,
       0,     0,     0,     0,     0,     0,   333,     0,  2469,     0,
     333,  3144,   417,     0,     0,     0,     0,     0,     0,   367,
       0,     0,     0,     0,     0,     0,     0,   519,     0,     0,
       0,     0,   387,     0,     0,     0,     0,    48,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2271,     0,     0,     0,  2279,  2281,   417,  2291,   417,
       0,     0,     0,     0,     0,     0,   368,     0,     0,   333,
       0,     0,     0,     0,     0,     0,     0,     0,  2132,     0,
       0,     0,     0,    81,  2717,  2722,  2745,     0,    82,   333,
    3210,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2592,     0,     0,     0,     0,     0,    94,     0,     0,
      97,     0,    98,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   333,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     116,     0,     0,     0,   417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1533,  1533,     0,     0,     0,   752,
       0,     0,     0,     0,   307,     0,     9,  2658,   386,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,    17,     0,     0,     0,  2646,     0,     0,     0,     0,
    2678,     0,   333,  3002,     0,     0,     0,     0,   371,     0,
    1533,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     149,   333,     0,  2469,   307,   367,     0,     0,     0,     0,
       0,     0,     0,   519,     0,     0,     0,     0,   387,   794,
       0,     0,     0,    48,     0,     0,     0,     0,  -319,     0,
       0,  1533,  1533,   795,     0,   171,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   183,   184,     0,   417,     0,     0,     0,
       0,     0,  2761,  2762,     0,     0,     0,     0,     0,     0,
       0,     0,   368,     0,     0,     0,     0,   200,     0,     0,
       0,     0,   204,     0,  2132,     0,     0,   209,     0,    81,
       0,     0,     0,  1533,    82,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   632,
       0,   333,     0,    94,     0,     0,    97,     0,    98,     0,
       0,     0,     0,     0,     0,     0,  2787,     0,     0,     0,
       0,     0,   225,     0,   227,     0,     0,     0,   230,   231,
       0,   232,     0,     0,     0,   233,   116,     0,   235,   236,
       0,   238,   239,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,     0,   757,  2133,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   632,     0,     0,
     417,   417,     0,  2861,     0,   333,   130,     0,     0,     0,
     642,     0,     0,     0,     0,     0,     0,     0,     0,   267,
       0,     0,     0,   307,   371,     0,     0,   271,     0,     0,
     759,   272,     0,   273,     0,   148,   149,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   333,  3144,
       0,     0,     0,     0,     0,   794,     0,     0,     0,     0,
     759,     0,     0,     0,   307,     0,     0,     0,   307,   795,
       0,   171,     0,     0,     0,     0,   333,  3002,  2880,     0,
     307,     0,     0,     0,     0,     0,     0,     0,  2932,   183,
     184,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   200,     0,     0,   335,     0,   204,     0,
       0,     0,     0,   209,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     417,   417,  3637,  3639,  3641,     0,   333,     0,     0,     0,
       0,     0,     0,   333,     0,   752,     0,     0,   852,     0,
       0,     0,     0,     0,     0,     0,   335,     0,   225,     0,
     227,     0,     0,     0,   230,   231,     0,   232,     0,     0,
       0,   233,     0,     0,   235,   236,  3144,   238,   239,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,     0,
     757,  2133,     0,     0,     0,     0,   642,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,   267,     0,     0,     0,     0,
       0,     0,     0,   271,     0,     0,     0,   272,     0,   273,
       0,     0,     0,     0,     0,     0,  3744,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   643,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   333,  3144,     0,  3759,     0,     0,     0,     0,     0,
       0,     0,     0,   417,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3780,  3780,     0,     0,     0,  2492,     0,
       0,     0,     0,     0,     0,     0,     0,   632,     0,     0,
       0,     0,     0,     0,   333,  3002,     0,     0,     0,   643,
       0,     0,     0,     0,     0,     0,     0,   632,     0,     0,
       0,     0,     0,     0,  3759,     0,   632,     0,     0,     0,
       0,     0,   632,     0,     0,   335,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   779,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   335,     0,  3181,     0,
     335,     0,     0,     0,     0,     0,   417,     0,     0,     0,
     759,     0,   853,     0,     0,   417,     0,  3190,     0,     0,
       0,     0,     0,     0,     0,   333,     0,     0,     0,   759,
       0,     0,   759,     0,     0,  1398,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   333,  3210,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     333,  3144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3965,     0,   417,
    1043,   417,     0,  1055,     0,     0,  3970,     0,   417,     0,
     417,     0,     0,   643,     0,     0,     0,     0,  1079,     0,
       0,     0,  1095,     0,     0,  1103,     0,     0,     0,     0,
       0,     0,     0,   417,     0,   417,     0,  3641,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,   333,  3144,   307,   307,     0,     0,     0,   307,     0,
       0,     0,     0,     0,     0,  1533,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1211,  1216,
    1220,     0,     0,     0,     0,     0,   333,  3144,     0,   643,
       0,  1259,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   643,
       0,     0,  4080,     0,     0,   642,     0,     0,   643,     0,
       0,     0,  3759,     0,   643,     0,     0,     0,     0,     0,
       0,  4102,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1533,     0,  2923,  2923,     0,  2923,     0,   333,
    3210,     0,     0,     0,     0,   335,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1533,     0,  1533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4170,  3549,
       0,     0,     0,     0,     0,     0,  3551,     0,     0,     0,
       0,     0,  1430,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   643,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3039,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   779,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   417,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1534,  3759,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3780,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3637,  3639,  3641,   333,
    3210,     0,     0,     0,     0,     0,     0,     0,     0,   779,
       0,     0,     0,     0,     0,   853,   853,     0,     0,     0,
     853,     0,  1054,     0,     0,     0,     0,  3699,  3700,  3701,
    3702,  3703,  3704,     0,     0,     0,     0,     0,     0,  4331,
       0,     0,     0,     0,     0,  1642,     0,     0,  4343,     0,
       0,     0,   333,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1533,
       0,     9,     0,   386,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    17,     0,     0,     0,
       0,     0,     0,     0,     0,  1687,     0,     0,     0,     0,
     333,  2469,     0,     0,     0,     0,  1699,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     367,     0,     0,     0,     0,     0,     0,     0,   519,  4170,
       0,     0,     0,   387,     0,     0,     0,     0,    48,     0,
       0,     0,     0,     0,  1533,     0,     0,     0,     0,   307,
    3759,   307,     0,   759,     0,     0,     0,     0,     0,     0,
     417,     0,     0,  1055,     0,     0,  1103,     0,     0,     0,
       0,  1211,  1216,     0,     0,     0,  1534,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2492,   368,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2132,
       0,     0,     0,     0,    81,  3759,     0,     0,     0,    82,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1534,     0,     0,     0,     0,    94,     0,
       0,    97,     0,    98,     0,     0,     0,     0,     0,     0,
     333,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     417,   116,  3759,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3896,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1534,  1534,  1534,
    1534,   130,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4102,     0,     0,     0,   333,     0,     0,     0,   371,
       0,     0,     0,  4170,     0,     0,     0,   333,     0,     0,
     148,   149,     0,     0,     0,  1533,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1533,     0,     0,     0,
     794,  1533,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   795,     0,   171,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   333,
    2469,     0,     0,     0,   183,   184,     0,     0,   307,     0,
       0,     0,     0,   759,   632,     0,     0,   632,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   333,   200,     0,
       0,     0,     0,   204,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
    4036,     0,     0,   307,   307,     0,     0,     0,     0,     0,
       0,     0,     0,   225,     0,   227,     0,     0,     0,   230,
     231,   307,   232,     0,     0,     0,   233,     0,     0,   235,
     236,     0,   238,   239,     0,     0,     0,     0,     0,     0,
     245,   335,   246,   335,     0,   757,  2133,     0,     0,     0,
       0,     0,  4170,     0,     0,     0,     0,     0,     0,  4331,
       0,     0,  1533,     0,     0,     0,     0,     0,     0,     0,
     307,     0,     0,     0,     0,  1533,     0,     0,     0,     0,
     267,     0,     0,     0,     0,     0,  2893,     0,   271,     0,
       0,     0,   272,     0,   273,     0,     0,     0,     0,     0,
    4123,   632,   632,   632,   632,   632,   632,   632,   632,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   333,  3144,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
       0,     0,     0,     0,     0,     0,     0,  1533,     0,     0,
    1533,  1533,     0,     0,     0,     0,     0,     0,     0,  4175,
       0,     0,     0,     0,   307,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1079,  1103,     0,     0,     0,     0,     0,     0,
    1211,  1216,  1220,     0,     0,     0,  1430,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     9,     0,   386,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,     0,     0,     0,     0,     0,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     335,     0,     0,     0,     0,   367,   643,     0,     0,   643,
       0,     0,   333,   519,  4170,     0,     0,  1483,   387,     0,
     333,     0,     0,    48,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1533,
       0,     0,     0,     0,     0,     0,     0,  1055,     0,  4895,
    3144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     853,     0,     0,     0,     0,   853,   853,     0,     0,     0,
       0,     0,   368,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,   335,  2132,     0,     0,     0,     0,    81,
    2460,     0,     0,     0,    82,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,     0,     0,    97,     0,    98,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1533,     0,   335,     0,  2472,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   116,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   417,     0,   417,
       0,  4895,     0,  2493,  2493,  2493,  2493,  2493,  2493,  2493,
    2493,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3759,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,     0,     0,   371,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   148,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   335,     0,     0,     0,
     632,     0,     0,  2568,   759,   794,     0,     0,     0,     0,
       0,     0,     0,   759,     0,     0,     0,     0,     0,   795,
       0,   171,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   632,     0,     0,   307,     0,     0,     0,     0,   183,
     184,     0,     0,     0,     0,     0,     0,     0,  1533,   632,
     632,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   200,     0,     0,     0,     0,   204,     0,
       0,     0,     0,   209,     0,     0,     0,  1534,     0,     0,
       0,     0,     0,     0,     0,  4524,     0,  4525,     0,  4526,
       0,     0,     0,     0,     0,     0,     0,  3759,     0,     0,
       0,     0,     0,     0,   305,     0,     0,     0,     0,     0,
       0,     0,   759,   759,   759,     0,     0,     0,   225,     0,
     227,     0,     0,     0,   230,   231,     0,   232,     0,     0,
       0,   233,     0,     0,   235,   236,     0,   238,   239,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,     0,
     757,  2133,     0,     0,   305,     0,     0,     0,     0,     0,
       0,  2718,  2723,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,     0,     0,   267,     0,     0,     0,     0,
    2746,     0,     0,   271,  2754,   307,     0,   272,     0,   273,
       0,     0,     0,  4895,     0,     0,     0,     0,     0,     0,
    1533,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   759,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   630,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     307,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,     0,     0,   307,     0,   630,     0,   307,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   643,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   748,     0,     0,     0,     0,     0,     0,     0,
     758,     0,     0,     0,     0,   333,  3002,     0,     0,     0,
       0,     0,     0,  2493,     0,     0,   335,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1533,  2493,  2493,     0,   807,     0,     0,     0,   333,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
     838,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,     0,     0,     0,  1533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   417,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   417,     0,   335,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,     0,     0,     0,     0,     0,   335,     0,     0,
       0,  1051,  1534,  1534,     0,  1064,     0,     0,     0,     0,
     307,   630,     0,  1073,     0,     0,  1077,     0,     0,  3210,
       0,     0,     0,  1099,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4903,     0,     0,  1109,     0,  1111,     0,     0,     0,     0,
       0,     0,     0,     0,   333,     0,     0,     0,     0,     0,
    4929,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3118,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   853,   853,     0,     0,     0,     0,   630,     0,   853,
     307,     0,     0,     0,     0,     0,     0,   335,     0,     0,
       0,   335,     0,     0,     0,     0,     0,   630,     0,     0,
       0,     0,     0,     0,     0,     0,   630,     0,     0,     0,
       0,     0,   630,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   748,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1103,     0,  1342,   307,     0,  1211,  1216,     0,   632,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     335,     0,     0,     0,     0,     0,     0,   307,     0,     0,
     759,     0,     0,     0,  1385,  2718,  2723,  2746,     0,     0,
     335,     0,     0,     0,  3252,  1397,  1410,   307,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1440,     0,
       0,   630,     0,     0,     0,   307,     0,   335,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1534,  1534,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  5121,     0,     0,     0,     0,     0,
       0,   748,     0,     0,     0,     0,     0,  1508,     0,     0,
       0,     0,     0,   335,     0,   307,     0,     0,     0,     0,
       0,  1534,   307,     0,     0,     0,     0,   307,     0,     0,
       0,     0,   335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1534,  1534,     0,     0,  1595,  1596,  1599,     0,
    5178,     0,   333,     0,     0,   632,   748,  1604,     0,     0,
       0,     0,     0,   838,   838,     0,     0,     0,   838,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1534,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,     0,     0,     0,     0,     0,     0,     0,
     307,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   632,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,  1051,
       0,     0,     0,     0,     0,     0,   335,     0,     0,     0,
       0,   643,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1099,     0,     0,     0,     0,   779,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   335,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,     0,   748,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2568,     0,  2718,  2723,  2746,     0,   335,     0,     0,
       0,     0,   307,     0,   335,     0,     0,     0,     0,   853,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   641,     0,     0,     0,     0,     0,     0,   307,
       0,     0,     0,  1064,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   643,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3745,     0,     0,
       0,     0,     0,     0,     0,   751,     0,     0,     0,     0,
     307,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,     0,     0,  3760,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3781,  3781,     0,     0,     0,  2493,
       0,     0,     0,     0,     0,   307,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,     0,     0,  2099,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3252,     0,   632,  3760,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1342,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
     751,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2568,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   751,     0,
       0,     0,     0,     0,     0,     0,   335,     0,     0,     0,
       0,     0,     0,  2207,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   641,     0,     0,     0,     0,     0,
    1087,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   335,     0,     0,     0,     0,     0,
    1077,  1099,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3966,     0,     0,     0,     0,     0,     0,     0,     0,  3971,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     641,     0,  1257,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1270,     0,     0,     0,  2746,     0,     0,     0,
     641,     0,     0,   758,   630,     0,     0,   630,   307,   641,
       0,     0,     0,     0,     0,   641,     0,     0,     0,     0,
       0,     0,   335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   751,     0,     0,     0,  1534,     0,  2415,     0,
       0,     0,     0,     0,     0,  1051,     0,     0,     0,     0,
       0,     0,     0,  5717,     0,     0,     0,     0,   838,     0,
       0,   307,     0,   838,   838,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   335,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4081,     0,  1419,   643,     0,     0,   307,
       0,     0,     0,  3760,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   641,     0,     0,     0,     0,  2466,
       0,     0,     0,  1534,     0,     0,     0,     0,     0,     0,
     335,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1534,     0,  1534,   751,
       0,  2488,  2488,  2488,  2488,  2488,  2488,  2488,  2488,     0,
       0,     0,     0,     0,     0,     0,     0,  2512,     0,     0,
       0,     0,     0,     0,   751,     0,     0,     0,     0,     0,
       0,  3252,     0,     0,     0,   632,     0,     0,     0,  3760,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   751,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   759,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3760,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2659,   307,     0,     0,     0,     0,  3781,
       0,     0,     0,     0,     0,     0,   307,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2718,  2723,  2746,
     335,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1055,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
    4332,     0,     0,     0,  1270,     0,     0,  4340,     0,     0,
       0,     0,     0,   335,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,     0,     0,     0,
    1534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,     0,     0,     0,     0,     0,   751,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3760,     0,     0,     0,     0,     0,     0,     0,     0,   751,
       0,     0,     0,     0,     0,  1534,     0,     0,     0,     0,
       0,  3760,     0,     0,  1508,     0,     0,     0,   751,  2818,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2839,  2841,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2493,     0,  2854,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3760,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     630,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,     0,
       0,   335,     0,     0,     0,  2899,     0,     0,     0,     0,
       0,  2488,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3760,     0,  2466,     0,     0,     0,  2488,
    2488,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2933,  2936,     0,   626,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   335,  2960,     0,     0,
       0,     0,     0,     0,  3760,     0,     0,     0,   335,     0,
       0,     0,  2972,     0,     0,     0,  1534,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1534,     0,     0,
       0,     0,  1534,     0,     0,     0,   626,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,     0,     0,     0,
       0,     0,     0,  2092,     0,     0,  2094,     0,     0,     0,
     335,   747,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2466,  3012,
       0,   307,  1508,     0,     0,     0,     0,     0,   335,   307,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   751,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   758,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3252,  3760,     0,     0,     0,     0,     0,     0,
    4332,     0,     0,  1534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1534,     0,     0,   838,
     838,     0,     0,     0,     0,     0,     0,   838,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2466,     0,     0,
    3141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1032,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,     0,     0,     0,     0,
     626,     0,     0,     0,     0,     0,  1082,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1534,     0,
       0,  1534,  1534,     0,     0,     0,     0,     0,     0,  1099,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1113,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2383,   641,     0,     0,
     641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3245,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1208,  1213,     0,     0,     0,
       0,     0,     0,     0,  1245,     0,   626,     0,  1255,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   626,     0,   335,     0,
       0,     0,     0,     0,     0,   626,     0,     0,     0,     0,
       0,   626,     0,     0,     0,     0,     0,     0,     0,  3335,
       0,     0,     0,     0,     0,     0,     0,     0,   747,     0,
       0,     0,     0,   335,     0,  3760,  3346,     0,     0,     0,
       0,   335,  2466,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2468,     0,     0,     0,     0,     0,     0,     0,
    1534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2491,  2491,  2491,  2491,  2491,  2491,
    2491,  2491,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   751,     0,     0,     0,     0,     0,     0,     0,
     626,     0,     0,  2468,     0,     0,     0,     0,     0,  1455,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2468,     0,
       0,  1534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1087,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1531,  3760,     0,     0,     0,
       0,     0,     0,     0,     0,  3493,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   630,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3141,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1534,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,  2716,     0,     0,     0,     0,     0,   748,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3760,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2972,  1531,     0,     0,     0,     0,
       0,     0,     0,  3141,   748,     0,     0,   838,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2809,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2826,     0,
       0,     0,     0,     0,     0,   630,     0,     0,     0,     0,
       0,     0,     0,   747,  4332,     0,     0,     0,     0,     0,
       0,  1534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   641,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   747,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,     0,
       0,  3141,     0,  3756,  2491,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2468,     0,
       0,     0,  2491,  2491,     0,     0,     0,     0,     0,     0,
       0,     0,  3775,  3775,     0,     0,     0,  2488,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   335,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1534,     0,     0,     0,     0,     0,     0,     0,   335,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2468,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2468,     0,     0,     0,     0,     0,  2051,     0,     0,
       0,     0,     0,     0,  2051,     0,     0,     0,  1534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3141,     0,     0,     0,     0,     0,     0,
       0,     0,  2383,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2468,     0,     0,  3143,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,     0,     0,     0,     0,
       0,     0,     0,  4009,     0,     0,     0,  4028,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2269,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2716,     0,  3143,     0,     0,     0,  3141,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2716,     0,     0,     0,
       0,     0,  3143,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   630,     0,     0,     0,     0,     0,
       0,  3756,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2468,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4128,   626,     0,     0,   626,     0,     0,     0,
       0,   751,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1410,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2468,     0,     0,     0,     0,
    3756,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2468,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4197,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2465,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3756,     0,
     626,   626,   626,   626,   626,   626,   626,   626,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3775,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   747,     0,
       0,     0,     0,     0,     0,  2531,     0,     0,     0,     0,
       0,     0,     0,   335,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   751,     0,  4305,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3012,   335,     0,     0,     0,     0,
    1082,     0,  1113,     0,     0,     0,  1208,  1213,  1245,     0,
    1455,  1531,   641,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3143,     0,     0,     0,     0,     0,  4368,     0,     0,
       0,     0,     0,  4371,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2468,
       0,   751,     0,     0,     0,     0,     0,  4394,  3756,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2716,  2488,     0,     0,  2714,  2720,
       0,     0,     0,     0,     0,     0,  3143,   751,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2743,     0,     0,
       0,     0,     0,     0,  2759,     0,     0,     0,  3143,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   641,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3756,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3743,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3756,     0,  3143,     0,  3758,  2466,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3779,  3779,  2207,     0,     0,
    2491,     0,     0,     0,     0,     0,     0,     0,     0,   626,
       0,     0,     0,     0,     0,     0,     0,  2468,     0,  2466,
       0,     0,     0,  3758,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3758,     0,     0,     0,
     626,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2465,     0,     0,     0,   626,   626,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2956,     0,     0,     0,     0,     0,     0,     0,
    2716,     0,     0,     0,     0,     0,     0,     0,  3143,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2990,  2991,  2992,  2993,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3143,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4696,     0,
       0,     0,     0,  3143,     0,     0,     0,  3042,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3964,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4789,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3087,     0,     0,     0,     0,     0,     0,     0,
    3102,     0,     0,  3105,  3143,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4820,     0,     0,     0,     0,     0,  3140,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3143,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   641,     0,     0,
       0,     0,     0,     0,  3758,     0,   748,     0,     0,     0,
    3141,     0,  4881,     0,  4882,     0,     0,     0,     0,  1113,
       0,     0,     0,  1208,  1213,  1245,  1455,  1531,     0,     0,
       0,     0,  3143,     0,     0,     0,     0,     0,     0,  3141,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3756,     0,     0,     0,     0,     0,     0,
       0,  3250,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4922,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1531,     0,     0,     0,     0,     0,
    3758,     0,     0,  3758,     0,  2465,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4881,  4964,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4979,  1531,  3756,     0,     0,     0,     0,     0,
       0,  2465,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3758,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3779,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2716,     0,
       0,     0,  3143,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2051,     0,     0,     0,     0,     0,     0,     0,     0,
       4,     0,     5,     0,   389,     0,     0,     0,     0,     0,
      10,     0,   391,     0,     0,     0,     0,  3758,     0,     0,
    3756,     0,     0,    17,     0,     0,     0,     0,     0,   709,
     710,     0,   711,    23,     0,    25,     0,     0,    27,   712,
     713,    30,     0,  2468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   393,     0,    40,
       0,     0,    41,     0,     0,   394,    43,    44,   626,     0,
      46,  3758,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,   714,     0,     0,     0,     0,
       0,     0,  3758,     0,     0,     0,     0,     0,   715,     0,
       0,     0,     0,     0,    64,     0,     0,  3140,     0,     0,
       0,     0,     0,     0,    65,     0,    67,     0,     0,     0,
     716,    70,    71,     0,   399,     0,     0,     0,  2491,     0,
       0,    77,     0,     0,    78,     0,   717,   718,  5210,     0,
       0,     0,     0,     0,     0,     0,    82,  3758,     0,     0,
       0,    86,    87,     0,     0,     0,     0,   719,     0,     0,
       0,     0,     0,    92,     0,    94,     0,    96,     0,     0,
      98,     0,     0,   720,     0,     0,     0,     0,     0,   103,
       0,     0,   721,  2468,     0,     0,   108,     0,     0,     0,
       0,     0,     0,     0,   113,     0,   114,     0,   116,     0,
       0,     0,     0,     0,  3758,     0,   722,     0,   723,   724,
     725,   122,     0,   123,     0,     0,     0,     0,     0,   726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,     0,
     132,   133,     0,     0,     0,     0,     0,   135,     0,     0,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,     0,   144,   626,  3758,     0,   148,   149,     0,
    2468,     0,     0,     0,   153,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,  2466,  5315,   407,   162,   163,
       0,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,  5334,     0,   171,     0,     0,     0,     0,     0,     0,
     727,     0,     0,   409,   178,   179,     0,     0,     0,     0,
     728,   183,  2468,   185,   186,     0,     0,   188,     0,     0,
       0,     0,     0,   729,     0,     0,     0,     0,     0,     0,
     195,     0,  3755,   198,   730,     0,     0,     0,     0,     0,
     204,     0,   206,     0,   208,   209,     0,     0,     0,     0,
       0,     0,     0,  5334,     0,     0,   731,     0,     0,     0,
       0,     0,     0,   751,     0,     0,   626,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2465,     0,     0,     0,  3800,     0,   224,
     225,   226,   372,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,   233,   234,     0,   597,     0,     0,     0,
       0,   240,   241,   242,     0,     0,     0,   245,     0,   246,
       0,   247,  1062,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3758,     0,     0,     0,  2818,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
     733,   734,     0,     0,     0,   271,     0,     0,  3141,   272,
       0,   273,     0,     0,     0,     0,  2714,  2720,  2743,     0,
       0,     0,     0,     0,  3140,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3143,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3140,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3962,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3968,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  5546,     0,     0,     0,     0,  5548,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3758,     0,     0,   751,
       0,     0,     0,  3143,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3143,     0,     0,  3140,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3758,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   626,     0,     0,     0,     0,     0,   751,
    3755,     0,   636,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    5660,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     636,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   749,     0,  3758,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   776,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   847,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   957,   958,
       0,     0,     0,     0,     0,     0,  3758,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   973,   974,   977,
     978,   979,   982,     0,  2714,  2720,  2743,     0,  3140,  3758,
       0,     0,     0,  3758,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   749,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1006,
    1007,  1009,     0,     0,     0,  1013,     0,  4329,     0,  1038,
    1039,   982,     0,     0,  1052,     0,     0,  4345,     0,     0,
       0,     0,     0,     0,   636,     0,     0,     0,     0,  1078,
    1083,  1091,     0,   982,  1097,     0,  1101,     0,  1107,     0,
    3250,     0,     0,  3755,     0,     0,  2468,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1110,     0,  1112,
    1114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1126,  1128,  1128,  1130,  1131,  1132,     0,     0,     0,  1139,
       0,  1142,  1143,  1145,  1128,     0,     0,     0,     0,     0,
       0,  1150,  1151,  1152,  1155,     0,  1128,     0,     0,     0,
       0,  1186,  1191,  1195,   982,     0,     0,   982,  3755,  1209,
    1214,  1218,  1222,     0,     0,     0,     0,     0,  1246,  1250,
     636,     0,  1256,     0,     0,     0,     0,     0,  1265,  1267,
       0,     0,     0,     0,     0,     0,     0,  1278,  1279,  1280,
    1283,  1285,  1286,  1287,   626,  1128,     0,     0,     0,   636,
       0,     0,     0,     0,     0,   636,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   749,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3755,  1370,  1371,     0,     0,     0,     0,     0,  2468,     0,
       0,     0,     0,     0,     0,     0,  1394,  1395,  1401,     0,
    1411,     0,     0,  1416,  1417,     0,     0,     0,     0,   982,
       0,  1426,  1427,  1428,     0,     0,     0,  1434,     0,     0,
    1437,     0,  1442,  1443,   636,  1445,     0,  1128,     0,     0,
       0,     0,  1454,  1456,  1128,  1460,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2468,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1490,  1491,  1492,  1493,
    1494,  1495,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1511,  1512,  1513,  1514,  1515,  1516,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   749,
     776,     0,     0,     0,     0,     0,   847,   847,     0,     0,
       0,   847,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3143,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3758,     0,     0,     0,     0,     0,  1660,     0,  3250,
    3755,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1128,     0,     0,     0,   982,     0,
       0,     0,     0,     0,     0,     0,     0,  1712,     0,     0,
       0,     0,  3140,  1716,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1770,  1052,     0,     0,     0,  1114,  1128,
    1128,  1128,  1209,  1214,  1246,  1777,  1456,  1532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3758,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   749,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1532,  1532,
    1532,  1532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3143,     0,     0,     0,   751,     0,     0,     0,     0,     0,
       0,  2052,  1531,  1531,  2468,     0,     0,  3758,  2052,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4329,     0,     0,     0,     0,     0,     0,     0,
       0,  2090,     0,     0,     0,  2093,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1307,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2052,     0,     0,     0,     0,     0,
       0,     0,     0,  1375,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2264,     0,
    2266,     0,     0,     0,     0,     0,  1128,  1128,     0,     0,
    1128,     0,     0,     0,     0,     0,     0,     0,  2290,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4329,     0,     0,     0,     0,     0,   636,     0,     0,
     636,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1052,  1128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   847,     0,     0,     0,     0,   847,   847,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1660,  2462,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2467,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2476,  2477,     0,
       0,     0,     0,     0,  2489,  2489,  2489,  2489,  2489,  2489,
    2489,  2489,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2539,     0,  2543,     0,
       0,  2544,  2545,  2546,     0,  2547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2467,     0,
       0,     0,  2559,     0,  2565,  2572,  1128,     0,     0,     0,
       0,     0,   974,  2582,  1083,  1101,     0,  1128,  1128,  1128,
       0,     0,     0,  2586,     0,     0,  2588,     0,     0,     0,
       0,  2595,  2596,     0,     0,  1128,     0,     0,     0,     0,
       0,  2601,  2602,     0,     0,     0,  2605,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2622,  2623,  1532,     0,
       0,     0,  1052,     0,     0,     0,  2645,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2663,
       0,     0,     0,     0,     0,     0,  2669,     0,     0,  2672,
       0,     0,     0,     0,     0,     0,     0,  2677,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2683,
       0,  2684,     0,     0,     0,     0,     0,  2688,  2689,  2690,
    2691,     0,  2692,     0,     0,     0,  2699,     0,  2701,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1128,  2713,  2715,  2721,  2725,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2733,  2735,     0,     0,     0,     0,
    2739,     0,  2740,     0,  2741,     0,     0,     0,     0,     0,
       0,  2744,  2748,  1128,     0,  1128,     0,  1128,  1128,     0,
       0,     0,     0,     0,     0,     0,  2764,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2765,
       0,  2766,     0,     0,     0,  2770,     0,  2771,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2772,     0,  2774,  2775,
       0,  2777,  2778,     0,     0,  2780,     0,     0,     0,  2783,
       0,  2784,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2816,     0,     0,  2819,  2820,  2822,     0,     0,     0,     0,
       0,     0,  2833,  2834,  2835,  2836,  2837,     0,     0,     0,
    2843,  2844,  2845,     0,     0,     0,  1128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1307,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   636,     0,     0,     0,     0,     0,  2884,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2489,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2467,  2906,
    2907,     0,  2489,  2489,  2914,  2918,     0,     0,     0,     0,
       0,  2922,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2941,     0,  2943,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2949,  2950,     0,     0,
       0,     0,     0,   982,     0,     0,     0,  2957,     0,  2958,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2962,
    2963,     0,  2968,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2983,     0,     0,     0,
       0,  2987,  2988,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3140,     0,     0,     0,
     747,     0,  1052,     0,     0,  3020,  3023,  3026,  3027,  3023,
    2465,     0,     0,  3755,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1532,  1532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2822,  3084,     0,     0,     0,  3091,  3096,  3097,
       0,  2822,  3100,  3101,     0,  2822,     0,     0,  1454,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3116,     0,
       0,  2822,  2822,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   847,   847,     0,     0,     0,     0,     0,     0,
     847,     0,     0,     0,     0,  3134,     0,     0,     0,     0,
    2467,     0,     0,  3142,     0,     0,     0,     0,     0,     0,
    3151,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1128,     0,     0,     0,     0,  3163,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3184,  1101,     0,  1128,  1128,  1128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2715,  2721,  2744,  3207,
    3208,     0,     0,  3246,     0,  3251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2625,     0,
       0,  3304,     0,     0,     0,  2822,     0,     0,     0,  3309,
    3304,  3311,  3313,     0,  3315,     0,  1532,  1532,     0,     0,
       0,   749,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3340,     0,  3341,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2645,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3356,     0,
       0,     0,  1532,     0,     0,     0,     0,  3373,     0,     0,
       0,     0,     0,     0,     0,  2467,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3392,     0,  1532,  1532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3419,     0,     0,     0,     0,     0,
       0,  3426,     0,     0,     0,     0,     0,     0,     0,  3436,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1532,  3450,     0,     0,     0,
       0,     0,     0,  3304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2052,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2828,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3512,     0,  3514,
    3515,     0,     0,     0,     0,     0,     0,     0,     0,  3523,
    3524,  3525,   636,  3527,  3528,  3529,  3530,  1660,     0,     0,
    2822,  3538,  3539,     0,     0,     0,     0,     0,     0,     0,
    3544,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3142,     0,     0,     0,     0,     0,     0,  2905,     0,
       0,     0,     0,     0,  2913,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2935,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2959,     0,     0,     0,     0,     0,     0,     0,  2968,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2986,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   749,     0,     0,
     847,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3682,     0,     0,  3007,     0,  3142,     0,
       0,     0,  3011,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   636,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3736,     0,     0,     0,     0,     0,     0,  3742,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3142,     0,  3757,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3776,  3776,     0,     0,     0,
    2489,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3807,     0,
       0,     0,     0,  3811,     0,     0,  3757,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1052,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2565,     0,     0,     0,
       0,  3854,     0,  2744,     0,  3862,     0,     0,     0,     0,
       0,     0,     0,  3868,  3869,     0,     0,     0,     0,     0,
       0,  3875,  3876,     0,     0,     0,     0,     0,     0,  3877,
    3878,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3304,     0,     0,     0,     0,  3892,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3921,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1307,     0,     0,     0,     0,     0,  3942,     0,     0,
       0,     0,  3334,  3142,     0,     0,  3947,     0,     0,  3948,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3961,     0,     0,  3963,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3969,     0,     0,
       0,     0,     0,     0,  3973,     0,     0,  3976,  3977,     0,
       0,     0,  3978,     0,  3980,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3999,     0,  3418,  3142,     0,     0,  2822,  2822,  2822,
    4004,     0,     0,     0,     0,     0,     0,  1532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4043,  4044,     0,     0,
       0,     0,     0,  4048,     0,     0,     0,  4051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3142,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1128,
       0,     0,     0,     0,  4079,     0,     0,   636,     0,     0,
       0,     0,     0,     0,  3757,     0,     0,     0,     0,     0,
       0,     0,     0,  4101,  1307,     0,     0,     0,  3492,     0,
       0,     0,     0,     0,  1532,     0,  2922,  2922,     0,  2922,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4126,     0,     0,     0,     0,  4129,  1532,     0,  1532,
    2546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4149,  2822,  4151,  4154,     0,     0,     0,     0,     0,
       0,  4156,     0,     0,     0,     0,  1128,     0,     0,     0,
       0,     0,  4169,     0,     0,     0,     0,     0,     0,     0,
       0,  3558,     0,     0,  1052,     0,     0,     0,  1052,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2905,
       0,  1307,     0,     0,     0,  4187,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2822,
       0,     0,     0,     0,     0,     0,  4260,     0,     0,  4261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1307,     0,     0,
       0,  3757,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3776,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4306,     0,  4310,     0,  1052,  4316,  4317,     0,  2822,  2822,
       0,  4321,     0,     0,  4322,  4323,     0,  1052,  3246,     0,
       0,  4330,     0,     0,     0,  4334,  4336,     0,  4339,     0,
    4342,  4346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1532,     0,     0,  4346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4362,     0,     0,
    4363,     0,     0,     0,     0,  4365,     0,     0,     0,     0,
       0,     0,     0,  2467,     0,     0,     0,     0,     0,     0,
    4377,  4378,  4379,  4380,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3789,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4404,  2822,     0,  1532,     0,     0,     0,
       0,     0,  3757,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2489,     0,
       0,     0,     0,     0,     0,     0,     0,  4444,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3757,     0,     0,
       0,     0,  3846,  1052,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3872,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3757,     0,     0,     0,     0,     0,
       0,     0,     0,  3900,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4532,     0,     0,     0,     0,     0,
       0,     0,     0,  4101,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1532,     0,
       0,     0,     0,  1532,     0,     0,     0,     0,     0,     0,
       0,     0,  4569,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2467,     0,     0,  4577,     0,  2822,     0,     0,
     982,     0,     0,     0,     0,  3682,     0,  4584,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4008,     0,     0,     0,
       0,     0,     0,   749,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4657,  4093,  4658,     0,     0,     0,     0,
       0,  4330,     0,     0,  1532,     0,  4107,     0,  4109,     0,
       0,     0,     0,     0,     0,     0,     0,  1532,     0,     0,
       0,  3246,  3558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4697,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3142,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4736,
    4739,  4740,  4736,     0,     0,     0,     0,     0,     0,  1532,
       0,     0,  1532,  1532,     0,     0,  4776,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4781,     0,  4783,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4806,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4736,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4843,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4886,  4887,     0,     0,     0,     0,     0,     0,     0,
       0,  1532,     0,     0,     0,     0,     0,  4893,     0,     0,
       0,     0,  3142,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3757,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2822,     0,     0,     0,
       0,  2822,     0,     0,     0,     0,     0,     0,     0,   749,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2822,     0,     0,     0,     0,  2822,  4944,  4945,     0,     0,
       0,     0,     0,  2905,     0,     0,     0,  4952,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4967,     0,     0,     0,     0,     0,     0,     0,
       0,  4969,     0,     0,     0,  1052,     0,  4330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3757,     0,     0,
       0,     0,  4436,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4451,  4452,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4498,     0,     0,
       0,     0,     0,  2905,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4093,     0,     0,  5066,     0,     0,
    1532,     0,     0,     0,     0,  5074,  2822,  4736,  2822,  5078,
    5079,  4736,  1052,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  5115,  5116,     0,     0,     0,     0,     0,     0,  3757,
       0,     0,     0,     0,     0,  4093,     0,     0,     0,     0,
    2905,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2905,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2467,     0,     0,  1660,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4613,     0,     0,     0,     0,     0,     0,  5213,
       0,  2822,  2822,  5217,  5218,  5219,     0,     0,  5221,  2822,
    2822,  4736,     0,     0,     0,     0,  2822,  2822,  5228,  2822,
       0,  2822,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4699,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    5316,  5317,  5319,  5320,  5321,     0,  5324,     0,  5326,  5327,
    5328,  5329,  5330,  5331,     0,     0,     0,     0,     0,     0,
       0,     0,  1532,     0,     0,     0,     0,     0,     0,     0,
       0,  4784,     0,     0,     0,  2822,     0,     0,  2822,     0,
       0,     0,     0,     0,  5352,     0,     0,     0,     0,     0,
       0,  1128,     0,     0,     0,  2467,     0,     0,     0,  4799,
       0,  2822,     0,     0,     0,     0,     0,     0,     0,  1532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  5382,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4819,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3558,     0,  3304,     0,     0,     0,  5413,     0,     0,     0,
    5416,     0,     0,     0,     0,  5420,     0,     0,     0,     0,
       0,     0,     0,     0,  5423,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4093,     0,     0,  1307,
       0,     0,     0,  3558,     0,  4876,     0,     0,     0,     0,
       0,     0,     0,  5441,     0,     0,     0,     0,     0,     0,
    5445,  5446,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   735,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3757,     0,     0,     0,     0,     0,     0,     0,  1307,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  5496,  5498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  5507,     0,
       0,     0,  4955,     0,     0,     0,     0,     0,     0,  4963,
       0,     0,     0,     0,     0,     0,     0,  3304,     0,     0,
       0,     0,  3304,     0,     0,     0,     0,     0,   837,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2822,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4093,     0,     0,
       0,     0,     0,  5544,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,   735,     0,   735,     0,
    5556,     0,     0,     0,     0,     0,  1128,     0,  3757,     0,
       0,   735,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  5382,     0,     0,  5008,     0,     0,     0,     0,     0,
       0,  5573,     0,  5575,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  5019,     0,     0,     0,     0,     0,  5053,
       0,     0,     0,   735,     0,     0,     0,   735,   735,   735,
       0,     0,   735,   735,     0,     0,     0,   735,     0,     0,
       0,   735,   735,   735,   735,   735,   735,     0,   735,     0,
    5496,     0,     0,   735,     0,  5095,  4093,     0,     0,     0,
    5107,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4093,
       0,     0,     0,  4093,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,     0,   735,   735,   735,     0,
       0,     0,     0,     0,   735,     0,     0,     0,     0,     0,
       0,   735,   735,   735,     0,   735,     0,  5666,     0,     0,
     735,     0,     0,     0,     0,     0,     0,     0,  2822,  2822,
     735,     0,   735,     0,  2822,  2822,     0,     0,     0,  5678,
     735,   735,     0,   735,     0,     0,     0,     0,   735,   735,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,   735,     0,     0,     0,   735,   735,   735,   735,   735,
       0,   735,     0,     0,     0,     0,     0,     0,     0,   735,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    5209,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,   735,   735,
     735,   735,     0,     0,   735,     0,     0,     0,   735,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,   735,     0,     0,     0,     0,
     735,   735,     0,   735,   735,     0,   735,     0,     0,     0,
       0,   735,     0,   735,     0,   735,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2905,     0,
       0,     0,     0,     0,     0,  5323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
    5338,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2905,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  5367,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   837,   837,     0,     0,     0,   837,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,   735,   735,   735,   735,   735,     0,     0,
       0,     0,   735,     0,     0,   735,   735,   735,   735,   735,
     735,  3558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,     0,
     735,   735,   735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  5501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  5510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   837,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4093,     0,
       0,     0,     0,   837,   837,   837,   837,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  5635,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3558,     0,     0,     0,  1307,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2905,     0,     0,  4093,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,   735,     0,     0,
       0,     0,   735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,   735,     0,   735,   735,
     735,     0,     0,   735,   735,     0,   735,   735,   735,   735,
     735,   735,   735,     0,   735,     0,     0,     0,     0,   735,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   837,     0,     0,     0,
       0,   837,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,   826,     0,     2,     3,     0,     4,     0,     5,
       6,   389,     0,   827,     0,     9,     0,    10,    11,   391,
      13,    14,    15,     0,    16,     0,     0,     0,     0,     0,
      17,     0,     0,    18,   735,   735,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   828,    39,    40,     0,     0,    41,
       0,     0,    42,    43,    44,     0,     0,    46,    47,     0,
       0,     0,    48,    49,     0,     0,     0,   735,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,     0,     0,     0,     0,     0,     0,   735,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,    72,     0,     0,    73,    74,    75,    76,    77,     0,
       0,    78,     0,   400,   401,   829,     0,     0,     0,     0,
       0,     0,   735,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,     0,    91,     0,   735,     0,
      92,    93,    94,    95,    96,    97,     0,    98,    99,     0,
     402,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,   113,     0,   114,   115,   116,     0,     0,     0,   117,
       0,     0,     0,   404,     0,   405,   120,   121,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,     0,   132,   133,     0,
       0,     0,     0,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   735,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,     0,
     171,   172,   173,     0,   174,   175,     0,   176,     0,     0,
     409,   178,   179,     0,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,     0,   194,   195,   196,   197,
     198,   199,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,     0,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,   735,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0, -1841,     0,     0,     0,
     735,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,   830,     0,   831,   231,   594,     0,     0,     0,     0,
     233,   234,     0,   597,   236,     0,   238,   239,   240,   241,
     242,   243,     0,     0,   245,     0,   246,     0,   247,   832,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
       0,     0,     0,     0,   267,     0,     0,   833,   412,     0,
       0,   834,   271,     0,     0,     0,   272,     0,   273,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   837,   837,     0,
       0,     0,     0,     0,     0,   837,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   735,     0,
       0,     0,   735,   735,   735,   735,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   837,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,     0,     0,   837,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   837,   837,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     837,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1396,     0,     2,     3,     0,     4,     0,     5,
       6,   389,     0,     0,     0,     0,     0,    10,    11,   391,
      13,    14,    15,     0,    16,     0,     0,     0,     0,     0,
      17,     0,     0,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   393,    39,    40,     0,     0,    41,
       0,     0,   394,    43,    44,     0,     0,    46,    47,     0,
       0,     0,     0,    49,   735,     0,     0,     0,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,   399,     0,     0,    73,    74,    75,    76,    77,     0,
       0,    78,     0,   400,   401,     0,     0,   735,   735,   735,
     735,   735,     0,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,   837,    91,     0,     0,     0,
      92,    93,    94,    95,    96,     0,     0,    98,    99,     0,
     402,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,   113,     0,   114,   115,   116,     0,     0,     0,   117,
       0,     0,     0,   404,     0,   405,   120,   121,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,     0,   132,   133,     0,
       0,     0,     0,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,     0,
     171,   172,   173,     0,   174,   175,     0,   176,     0,     0,
     409,   178,   179,     0,   180,     0,   181,   182,   183,     0,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,   735,     0,     0,     0,   194,   195,   196,   197,
     198,   199,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,     0,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,     0,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0, -1841,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,     0,     0,     0,   231,   594,     0,     0,     0,     0,
     233,   234,     0,   735,   236,     0,     0,     0,   240,   241,
     242,   243,   735,     0,   245,     0,   246,     0,   247,   832,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       0,     0,   271,     0,     0,     0,   272,     0,   273,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,   735,     0,   735,     0,
       0,     0,     0,   735,     0,   735,     0,   735,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,     0,   735,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   837,     0,   837,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,   735,   735,     0,   735,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   837,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4078,     0,     2,     3,     0,     4,     0,     5,     6,   389,
       0,     0,     0,     0,     0,   390,    11,   391,    13,    14,
      15,     0,    16,     0,     0,     0,   735,     0,     0,     0,
       0,    18,     0,     0,   392,    21,     0,    22,    23,    24,
      25,   837,    26,    27,    28,    29,    30,     0,     0,     0,
       0,    31,    32,    33,    34,    35,    36,   735,     0,    37,
       0,     0,   393,    39,    40,     0,     0,    41,     0,     0,
     394,    43,    44,     0,     0,   395,    47,     0,     0,     0,
       0,    49,     0,     0,     0,     0,     0,     0,    51,     0,
      52,     0,   396,     0,    54,    55,     0,     0,    56,    57,
       0,     0,     0,   397,    60,    61,     0,    62,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,    68,   398,    70,    71,     0,   399,
       0,     0,    73,    74,    75,    76,    77,     0,     0,    78,
       0,   400,   401,     0,     0,     0,     0,     0,     0,     0,
       0,    82,     0,    83,    84,    85,    86,    87,     0,     0,
       0,     0,    89,     0,    91,     0,     0,     0,    92,    93,
      94,    95,    96,     0,     0,     0,    99,     0,   402,     0,
       0,   102,     0,     0,   103,     0,     0,   403,   105,   106,
     107,   108,   109,   110,   111,   112,     0,     0,     0,   113,
       0,   114,   115,   116,     0,     0,     0,   117,     0,     0,
       0,   404,     0,   405,   120,   121,   122,     0,   123,     0,
     735,     0,     0,   124,   406,     0,     0,     0,     0,   127,
       0,     0,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   837,     0,   132,   133,     0,   837,     0,
       0,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,   143,   144,   145,
     146,   147,     0,     0,     0,     0,   150,   151,   152,   153,
     154,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   407,   162,   163,   164,     0,   166,     0,     0,
       0,   167,     0,     0,     0,     0,   408,     0,     0,   172,
     173,     0,   174,   175,     0,   176,     0,     0,   409,   178,
     179,     0,   180,     0,   181,   182,   183,     0,   185,   186,
     187,     0,   188,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,     0,   194,   195,   196,   197,   198,   199,
       0,   201,   202,   203,     0,     0,   205,   206,   207,   208,
       0,     0,     0,     0,     0,     0,   211,     0,     0,     0,
       0,   410,   214,     0,     0,   215,   216,     0,   217,     0,
     218,     0,   219,     0,   220,   221,   222,     0,     0,     0,
       0,     0,     0,     0, -1841,     0,     0,     0,     0,   735,
       0,     0,     0,     0,   224,   225,   226,   372,   228,   837,
       0,     0,     0,     0,     0,     0,     0,     0,   233,   234,
       0,     0,   837,     0,     0,     0,   240,   241,   242,   243,
       0,     0,     0,     0,   246,     0,   247,   411,     0,   250,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,   257,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   265,   266,     0,     0,
       0,     0,   267,     0,     0,   268,   412,     0,     0,     0,
     271,     0,     0,     0,     0,     0,   273,     0,     0,     0,
       0,     0,     0,     0,   837,     0,     0,   837,   837,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   837,     0,     0,   -12,
       1,     0,     2,     3,     0,     4,   735,     5,     6,     7,
       0,     0,     8,     9,     0,    10,    11,    12,    13,    14,
      15,     0,    16,     0,     0,     0,     0,     0,    17,     0,
       0,    18,    19,     0,    20,    21,     0,    22,    23,    24,
      25,     0,    26,    27,    28,    29,    30,     0,     0,     0,
       0,    31,    32,    33,    34,    35,    36,     0,     0,    37,
       0,     0,    38,    39,    40,     0,     0,    41,     0,     0,
      42,    43,    44,    45,     0,    46,    47,     0,     0,     0,
      48,    49,     0,     0,    50,     0,     0,   837,    51,     0,
      52,     0,    53,     0,    54,    55,     0,     0,    56,    57,
       0,    58,     0,    59,    60,    61,     0,    62,    63,    64,
       0,     0,     0,     0,   735,     0,   735,     0,   735,    65,
      66,    67,     0,     0,    68,    69,    70,    71,     0,    72,
       0,     0,    73,    74,    75,    76,    77,     0,     0,    78,
       0,    79,    80,     0,     0,     0,    81,     0,     0,     0,
       0,    82,     0,    83,    84,    85,    86,    87,     0,     0,
       0,    88,    89,    90,    91,     0,     0,     0,    92,    93,
      94,    95,    96,    97,     0,    98,    99,   100,   101,     0,
       0,   102,     0,     0,   103,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   112,     0,     0,     0,   113,
       0,   114,   115,   116,     0,     0,     0,   117,     0,     0,
       0,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,     0,     0,   124,   125,   126,     0,     0,     0,   127,
       0,     0,     0,     0,     0,   837,     0,   128,     0,   129,
       0,     0,     0,   130,   131,   132,   133,     0,   134,     0,
       0,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,     0,     0,     0,     0,     0,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,     0,     0,   177,   178,
     179,     0,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,     0,   210,     0,     0,   211,     0,     0,   212,
       0,   213,   214,     0,     0,   215,   216,     0,   217,     0,
     218,     0,   219,     0,   220,   221,   222,     0,     0,     0,
     735,     0,     0,     0, -1841,     0,     0,   837,     0,   223,
       0,     0,     0,     0,   224,   225,   226,   227,   228,     0,
     229,   230,   231,     0,   232,     0,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,     0,     0,     0,   265,   266,     0,     0,
       0,     0,   267,     0,     0,   268,   269,     0,   270,     0,
     271,     0,     0,     0,   272,     0,   273,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   837,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -12,     1,     0,
       2,     3,     0,     4,   837,     5,     6,     7,     0,     0,
       8,     9,     0,    10,    11,    12,    13,    14,    15,     0,
      16,     0,     0,     0,     0,     0,    17,     0,     0,    18,
      19,     0,    20,    21,     0,    22,    23,    24,    25,     0,
      26,    27,    28,    29,    30,     0,     0,     0,     0,    31,
      32,    33,    34,    35,    36,     0,     0,    37,     0,     0,
      38,    39,    40,     0,     0,    41,   735,     0,    42,    43,
      44,    45,     0,    46,    47,     0,     0,     0,    48,    49,
       0,     0,     0,     0,   735,     0,    51,     0,    52,     0,
      53,     0,    54,    55,     0,     0,    56,    57,     0,    58,
       0,    59,    60,    61,     0,    62,    63,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,    67,
       0,     0,    68,    69,    70,    71,   735,    72,     0,     0,
      73,    74,    75,    76,    77,     0,     0,    78,     0,    79,
      80,     0,     0,     0,    81,     0,     0,     0,     0,    82,
       0,    83,    84,    85,    86,    87,     0,     0,     0,    88,
      89,    90,    91,     0,     0,     0,    92,    93,    94,    95,
      96,    97,     0,    98,    99,   100,   101,     0,     0,   102,
       0,     0,   103,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,   112,     0,     0,     0,   113,     0,   114,
     115,   116,     0,     0,     0,   117,     0,     0,     0,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,     0,
       0,   124,   125,   126,     0,     0,     0,   127,     0,     0,
       0,     0,     0,     0,     0,   128,     0,   129,     0,     0,
       0,   130,   131,   132,   133,     0,   134,     0,     0,     0,
     135,   136,   137,     0,   138,     0,     0,     0,   139,   140,
       0,   141,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,     0,
       0,     0,     0,     0,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,     0,
     174,   175,     0,   176,     0,     0,   177,   178,   179,     0,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,     0,     0,   192,     0,     0,     0,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
       0,   210,     0,     0,   211,     0,     0,   212,     0,   213,
     214,     0,     0,   215,   216,     0,   217,     0,   218,     0,
     219,     0,   220,   221,   222,     0,     0,     0,     0,     0,
       0,     0, -1841,     0,     0,     0,     0,   223,     0,     0,
       0,     0,   224,   225,   226,   227,   228,     0,   229,   230,
     231,     0,   232,     0,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,     0,     0,     0,     0,     0,     0,
       0,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,     0,     0,     0,   265,   266,     0,     0,     0,     0,
     267,     0,     0,   268,   269,     0,   270,     0,   271,     0,
       0,     0,   272,     0,   273,    -4,     1,     0,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,   -14,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,  2386,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,   579,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,   580,     0,
      37,   581,     0,    38,    39,    40,     0,   582,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
     583,    48,    49,     0,     0,     0,     0,     0,     0,    51,
     584,    52,     0,    53,   585,    54,    55,     0,     0,    56,
      57,     0,     0,     0,    59,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,   586,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,   587,     0,   588,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,   589,   166,     0,
       0,     0,   167,     0,   590,   168,   591,   169,     0,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,   592,   201,   202,   203,   593,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,   229,     0,   231,   594,   595,     0,     0,   596,   233,
     234,     0,   597,   236,     0,   238,   239,   598,   599,   242,
     243,   600,   601,   602,   603,   246,   604,   247,   605,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   606,   607,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,     0,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,  1316,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  2126,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,  2129,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,  2337,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  2456,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  2535,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  2555,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  2904,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3009,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3041,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3137,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3139,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3196,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3209,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3291,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3349,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3376,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3467,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3522,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3557,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3585,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3643,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3646,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3754,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3795,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3870,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  3924,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  3945,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4000,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  4057,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4118,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  4297,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4349,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  4370,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4503,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  4539,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4546,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  4575,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4589,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  4710,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4829,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  4852,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  4856,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  5314,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  5344,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  5491,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,  5703,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,  5720,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,   270,
       0,   271,     0,     0,     0,   272,     1,   273,     2,     3,
       0,     4,     0,     5,     6,     7,     0,     0,     8,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,    19,     0,
      20,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,    38,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,    45,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,    53,     0,
      54,    55,     0,     0,    56,    57,     0,    58,     0,    59,
      60,    61,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,    69,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,    79,    80,     0,
       0,     0,    81,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,    88,    89,    90,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,   100,   101,     0,     0,   102,     0,     0,
     103,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,   128,     0,   129,     0,     0,     0,   130,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   177,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,   210,
       0,     0,   211,     0,     0,   212,     0,   213,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   227,   228,     0,   229,   230,   231,     0,
     232,     0,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   269,     0,   270,     0,   271,     0,     0,     0,
     272,     1,   273,     2,     3,     0,     4,     0,     5,     6,
       7,     0,     0,     8,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,    19,     0,    20,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,    38,    39,    40,     0,     0,    41,     0,
       0,    42,    43,    44,    45,     0,    46,    47,     0,     0,
       0,    48,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,    53,     0,    54,    55,     0,     0,    56,
      57,     0,    58,     0,    59,    60,    61,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,    69,    70,    71,     0,
      72,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,    79,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,    88,    89,    90,    91,     0,     0,     0,    92,
      93,    94,    95,    96,    97,     0,    98,    99,   100,   101,
       0,     0,   102,     0,     0,   103,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     129,     0,     0,     0,   130,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   177,
     178,   179,     0,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,   210,     0,     0,   211,     0,     0,
     212,     0,   213,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   227,   228,
       0,   229,   230,   231,     0,   232,     0,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   269,     0,     0,
       0,   271,     0,     0,     0,   272,   826,   273,     2,     3,
       0,     4,     0,     5,     6,   389,     0,   827,     0,     9,
       0,    10,    11,   391,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,     0,     0,
     392,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,   828,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,     0,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,  -789,     0,     0,    51,     0,    52,     0,   396,     0,
      54,    55,     0,     0,    56,    57,     0,     0,     0,   397,
      60,    61,     0,    62,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,   398,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,   400,   401,   829,
       0,     0,     0,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,     0,    89,     0,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,     0,   402,     0,     0,   102,     0,     0,
     103,     0,     0,   403,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   404,     0,   405,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     406,     0,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
       0,   132,   133,     0,     0,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   407,   162,
     163,   164,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,   169,     0,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   409,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,     0,
     194,   195,   196,   197,   198,   199,     0,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,     0,
       0,     0,   211,     0,     0,     0,     0,   410,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,  -789,     0,     0,     0,     0,
     224,   225,   226,   372,   228,   830,     0,   831,   231,   594,
       0,     0,     0,     0,   233,   234,     0,   597,   236,     0,
     238,   239,   240,   241,   242,   243,     0,     0,   245,     0,
     246,     0,   247,   832,     0,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   412,     0,     0,   834,   271,     0,     0,     0,
     272,  -789,   273,   826,     0,     2,     3,     0,     4,     0,
       5,     6,   389,     0,   827,     0,     9,     0,    10,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,    17,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   828,    39,    40,     0,     0,
      41,     0,     0,    42,    43,    44,     0,     0,    46,    47,
       0,     0,     0,    48,    49,     0,     0,     0,  -789,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,    72,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,   829,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,    97,     0,    98,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   169,
       0,   171,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0, -1841,     0,     0,
       0,     0,  -789,     0,     0,     0,     0,   224,   225,   226,
     372,   228,   830,     0,   831,   231,   594,     0,     0,     0,
       0,   233,   234,     0,   597,   236,     0,   238,   239,   240,
     241,   242,   243,     0,     0,   245,     0,   246,     0,   247,
     832,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,  1617,   271,     0,     0,     0,   272,  -789,   273,
     826,     0,     2,     3,     0,     4,     0,     5,     6,   389,
       0,   827,     0,     9,     0,    10,    11,   391,    13,    14,
      15,     0,    16,     0,     0,     0,     0,     0,    17,     0,
       0,    18,     0,     0,   392,    21,     0,    22,    23,    24,
      25,     0,    26,    27,    28,    29,    30,     0,     0,     0,
       0,    31,    32,    33,    34,    35,    36,     0,     0,    37,
       0,     0,   828,    39,    40,     0,     0,    41,     0,     0,
      42,    43,    44,     0,     0,    46,    47,     0,     0,     0,
      48,    49,     0,     0,     0,  -788,     0,     0,    51,     0,
      52,     0,   396,     0,    54,    55,     0,     0,    56,    57,
       0,     0,     0,   397,    60,    61,     0,    62,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,    68,   398,    70,    71,     0,    72,
       0,     0,    73,    74,    75,    76,    77,     0,     0,    78,
       0,   400,   401,   829,     0,     0,     0,     0,     0,     0,
       0,    82,     0,    83,    84,    85,    86,    87,     0,     0,
       0,     0,    89,     0,    91,     0,     0,     0,    92,    93,
      94,    95,    96,    97,     0,    98,    99,     0,   402,     0,
       0,   102,     0,     0,   103,     0,     0,   403,   105,   106,
     107,   108,   109,   110,   111,   112,     0,     0,     0,   113,
       0,   114,   115,   116,     0,     0,     0,   117,     0,     0,
       0,   404,     0,   405,   120,   121,   122,     0,   123,     0,
       0,     0,     0,   124,   406,     0,     0,     0,     0,   127,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,     0,   132,   133,     0,     0,     0,
       0,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   407,   162,   163,   164,     0,   166,     0,     0,
       0,   167,     0,     0,     0,     0,   169,     0,   171,   172,
     173,     0,   174,   175,     0,   176,     0,     0,   409,   178,
     179,     0,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,     0,   194,   195,   196,   197,   198,   199,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,     0,     0,     0,     0,   211,     0,     0,     0,
       0,   410,   214,     0,     0,   215,   216,     0,   217,     0,
     218,     0,   219,     0,   220,   221,   222,     0,     0,     0,
       0,     0,     0,     0, -1841,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   224,   225,   226,   372,   228,   830,
       0,   831,   231,   594,     0,     0,     0,     0,   233,   234,
       0,   597,   236,     0,   238,   239,   240,   241,   242,   243,
       0,     0,   245,     0,   246,     0,   247,   832,     0,   250,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,   257,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   265,   266,     0,     0,
       0,     0,   267,     0,     0,   268,   412,     0,  1625,  1626,
     271,     0,     0,     0,   272,   826,   273,     2,     3,     0,
       4,     0,     5,     6,   389,     0,   827,     0,     9,     0,
      10,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,    17,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   828,    39,    40,
       0,     0,    41,     0,     0,    42,    43,    44,     0,     0,
      46,    47,     0,     0,     0,    48,    49,     0,     0,     0,
    -791,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,    72,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,   829,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,    97,     0,
      98,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   169,     0,   171,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0, -1841,
       0,     0,     0,     0,  -791,     0,     0,     0,     0,   224,
     225,   226,   372,   228,   830,     0,   831,   231,   594,     0,
       0,     0,     0,   233,   234,     0,   597,   236,     0,   238,
     239,   240,   241,   242,   243,     0,     0,   245,     0,   246,
       0,   247,   832,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     0,     0,   271,     0,     0,     0,   272,
    -791,   273,   826,     0,     2,     3,     0,     4,     0,     5,
       6,   389,     0,   827,     0,     9,     0,    10,    11,   391,
      13,    14,    15,     0,    16,     0,     0,     0,     0,     0,
      17,     0,     0,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   828,    39,    40,     0,     0,    41,
       0,     0,    42,    43,    44,     0,     0,    46,    47,     0,
       0,     0,    48,    49,     0,     0,     0,  -792,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,    72,     0,     0,    73,    74,    75,    76,    77,     0,
       0,    78,     0,   400,   401,   829,     0,     0,     0,     0,
       0,     0,     0,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,     0,    91,     0,     0,     0,
      92,    93,    94,    95,    96,    97,     0,    98,    99,     0,
     402,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,   113,     0,   114,   115,   116,     0,     0,     0,   117,
       0,     0,     0,   404,     0,   405,   120,   121,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,     0,   132,   133,     0,
       0,     0,     0,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,     0,
     171,   172,   173,     0,   174,   175,     0,   176,     0,     0,
     409,   178,   179,     0,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,     0,   194,   195,   196,   197,
     198,   199,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,     0,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,     0,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0, -1841,     0,     0,     0,
       0,  -792,     0,     0,     0,     0,   224,   225,   226,   372,
     228,   830,     0,   831,   231,   594,     0,     0,     0,     0,
     233,   234,     0,   597,   236,     0,   238,   239,   240,   241,
     242,   243,     0,     0,   245,     0,   246,     0,   247,   832,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       0,     0,   271,     0,     0,     0,   272,  -792,   273,   826,
       0,     2,     3,     0,     4,     0,     5,     6,   389,     0,
     827,     0,     9,     0,    10,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,    17,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   828,    39,    40,     0,     0,    41,     0,     0,    42,
      43,    44,     0,     0,    46,    47,     0,     0,     0,    48,
      49,     0,     0,     0,  2430,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,    72,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,   829,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,    97,     0,    98,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   169,     0,   171,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0, -1841,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,   830,     0,
     831,   231,   594,     0,     0,     0,     0,   233,   234,     0,
     597,   236,     0,   238,   239,   240,   241,   242,   243,     0,
       0,   245,     0,   246,     0,   247,   832,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   833,   412,     0,     0,   834,   271,
       0,     0,     0,   272,  2431,   273,   826,     0,     2,     3,
       0,     4,     0,     5,     6,   389,     0,   827,     0,     9,
       0,    10,    11,   391,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,    17,     0,     0,    18,     0,     0,
     392,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,   828,    39,
      40,     0,     0,    41,     0,     0,    42,    43,    44,     0,
       0,    46,    47,     0,     0,     0,    48,    49,     0,     0,
       0,  -369,     0,     0,    51,     0,    52,     0,   396,     0,
      54,    55,     0,     0,    56,    57,     0,     0,     0,   397,
      60,    61,     0,    62,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,   398,    70,    71,     0,    72,     0,     0,    73,    74,
      75,    76,    77,     0,     0,    78,     0,   400,   401,   829,
       0,     0,     0,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,     0,    89,     0,
      91,     0,     0,     0,    92,    93,    94,    95,    96,    97,
       0,    98,    99,     0,   402,     0,     0,   102,     0,     0,
     103,     0,     0,   403,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   404,     0,   405,
     120,   121,   122,     0,   123,     0,     0,     0,     0,   124,
     406,     0,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
       0,   132,   133,     0,     0,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   407,   162,
     163,   164,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,   169,     0,   171,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   409,   178,   179,     0,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,     0,
     194,   195,   196,   197,   198,   199,     0,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,     0,     0,
       0,     0,   211,     0,     0,     0,     0,   410,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
   -1841,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   372,   228,   830,     0,   831,   231,   594,
       0,     0,     0,     0,   233,   234,     0,   597,   236,     0,
     238,   239,   240,   241,   242,   243,     0,     0,   245,     0,
     246,     0,   247,   832,     0,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   412,     0,     0,     0,   271,     0,     0,     0,
     272,  -369,   273,   826,     0,     2,     3,     0,     4,     0,
       5,     6,   389,     0,   827,     0,     9,     0,    10,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,    17,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   828,    39,    40,     0,     0,
      41,     0,     0,    42,    43,    44,     0,     0,    46,    47,
       0,     0,     0,    48,    49,     0,     0,     0,  -370,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,    72,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,   829,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,    97,     0,    98,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   169,
       0,   171,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0, -1841,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,   830,     0,   831,   231,   594,     0,     0,     0,
       0,   233,   234,     0,   597,   236,     0,   238,   239,   240,
     241,   242,   243,     0,     0,   245,     0,   246,     0,   247,
     832,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,     0,     0,     0,   272,  -370,   273,
     826,     0,     2,     3,     0,     4,     0,     5,     6,   389,
       0,   827,     0,     9,     0,    10,    11,   391,    13,    14,
      15,     0,    16,     0,     0,     0,     0,     0,    17,     0,
       0,    18,     0,     0,   392,    21,     0,    22,    23,    24,
      25,     0,    26,    27,    28,    29,    30,     0,     0,     0,
       0,    31,    32,    33,    34,    35,    36,     0,     0,    37,
       0,     0,   828,    39,    40,     0,     0,    41,     0,     0,
      42,    43,    44,     0,     0,    46,    47,     0,     0,     0,
      48,    49,     0,     0,     0,     0,     0,     0,    51,     0,
      52,     0,   396,     0,    54,    55,     0,     0,    56,    57,
       0,     0,     0,   397,    60,    61,     0,    62,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,    68,   398,    70,    71,     0,    72,
       0,     0,    73,    74,    75,    76,    77,     0,     0,    78,
       0,   400,   401,   829,     0,     0,     0,     0,     0,     0,
       0,    82,     0,    83,    84,    85,    86,    87,     0,     0,
       0,     0,    89,     0,    91,     0,     0,     0,    92,    93,
      94,    95,    96,    97,     0,    98,    99,     0,   402,     0,
       0,   102,     0,     0,   103,     0,     0,   403,   105,   106,
     107,   108,   109,   110,   111,   112,     0,     0,     0,   113,
       0,   114,   115,   116,     0,     0,     0,   117,     0,     0,
       0,   404,     0,   405,   120,   121,   122,     0,   123,     0,
       0,     0,     0,   124,   406,     0,     0,     0,     0,   127,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,     0,   132,   133,     0,     0,     0,
       0,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   407,   162,   163,   164,     0,   166,     0,     0,
       0,   167,     0,     0,     0,     0,   169,     0,   171,   172,
     173,     0,   174,   175,     0,   176,     0,     0,   409,   178,
     179,     0,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,     0,   194,   195,   196,   197,   198,   199,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,     0,     0,     0,     0,   211,     0,     0,     0,
       0,   410,   214,     0,     0,   215,   216,     0,   217,     0,
     218,     0,   219,     0,   220,   221,   222,     0,     0,     0,
       0,     0,     0,     0, -1841,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   224,   225,   226,   372,   228,   830,
       0,   831,   231,   594,     0,     0,     0,     0,   233,   234,
       0,   597,   236,     0,   238,   239,   240,   241,   242,   243,
       0,     0,   245,     0,   246,     0,   247,   832,     0,   250,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,   257,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   265,   266,     0,     0,
       0,     0,   267,     0,     0,   268,   412,     0,     0,  1617,
     271,     0,     0,     0,   272,   826,   273,     2,     3,     0,
       4,     0,     5,     6,   389,     0,   827,     0,     9,     0,
      10,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,    17,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   828,    39,    40,
       0,     0,    41,     0,     0,    42,    43,    44,     0,     0,
      46,    47,     0,     0,     0,    48,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,    72,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,   829,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,    97,     0,
      98,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   169,     0,   171,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0, -1841,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,   830,     0,   831,   231,   594,     0,
       0,     0,     0,   233,   234,     0,   597,   236,     0,   238,
     239,   240,   241,   242,   243,     0,     0,   245,     0,   246,
       0,   247,   832,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     0,     0,   271,     0,     2,     3,   272,
       4,   273,     5,     6,     7,     0,     0,     8,     9,     0,
      10,    11,    12,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,    17,     0,     0,    18,   579,     0,    20,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,   580,     0,    37,   581,     0,    38,    39,    40,
       0,   582,    41,     0,     0,    42,    43,    44,    45,     0,
      46,    47,     0,     0,   583,    48,    49,     0,     0,     0,
       0,     0,     0,    51,   584,    52,     0,    53,   585,    54,
      55,     0,     0,    56,    57,     0,     0,     0,    59,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,   586,    68,
      69,    70,    71,     0,    72,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,    79,    80,     0,     0,
       0,   587,     0,   588,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,    88,    89,    90,    91,
       0,     0,     0,    92,    93,    94,    95,    96,    97,     0,
      98,    99,   100,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,  2482,   117,     0,     0,     0,   118,     0,   119,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   125,
     126,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,   128,     0,   129,     0,     0,     0,   130,   131,
     132,   133,     0,  2483,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,  2484,   166,     0,     0,     0,   167,     0,   590,   168,
     591,   169,     0,   171,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   177,   178,   179,     0,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,  2485,   194,
     195,   196,   197,   198,   199,   592,   201,   202,   203,   593,
     204,   205,   206,   207,   208,   209,     0,     0,   210,     0,
       0,   211,     0,     0,   212,     0,   213,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0, -1841,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,   229,  2486,   231,   594,   595,
       0,     0,   596,   233,   234,     0,   597,   236,     0,   238,
     239,   598,   599,   242,   243,   600,   601,   602,   603,   246,
     604,   247,   605,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   606,   607,     0,     0,     0,     0,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   269,     0,     0,     0,   271,     0,     2,     3,   272,
       4,   273,     5,     6,     7,     0,     0,     8,     9,     0,
      10,    11,    12,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,    17,     0,     0,    18,   579,     0,    20,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,   580,     0,    37,   581,     0,    38,    39,    40,
       0,   582,    41,     0,     0,    42,    43,    44,    45,     0,
      46,    47,     0,     0,   583,    48,    49,     0,     0,     0,
       0,     0,     0,    51,   584,    52,     0,    53,   585,    54,
      55,     0,     0,    56,    57,     0,     0,     0,    59,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,   586,    68,
      69,    70,    71,     0,    72,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,    79,    80,     0,     0,
       0,   587,     0,   588,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,    88,    89,    90,    91,
       0,     0,     0,    92,    93,    94,    95,    96,    97,     0,
      98,    99,   100,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   118,     0,   119,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   125,
     126,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,   128,     0,   129,     0,     0,     0,   130,   131,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,   589,   166,     0,     0,     0,   167,     0,   590,   168,
     591,   169,     0,   171,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   177,   178,   179,     0,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,   592,   201,   202,   203,   593,
     204,   205,   206,   207,   208,   209,     0,     0,   210,     0,
       0,   211,     0,     0,   212,     0,   213,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,   229,     0,   231,   594,   595,
       0,     0,   596,   233,   234,     0,   597,   236,     0,   238,
     239,   598,   599,   242,   243,   600,   601,   602,   603,   246,
     604,   247,   605,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   606,   607,     0,     0,     0,     0,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   269,     0,     0,     0,   271,     0,     2,     3,   272,
       4,   273,     5,     6,     7,     0,     0,     8,     0,     0,
     390,    11,    12,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,   579,     0,    20,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,   581,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,    45,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,    53,   585,    54,
      55,     0,     0,    56,    57,     0,     0,     0,    59,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
      69,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,    79,    80,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,    88,    89,    90,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,   100,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   118,     0,   119,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   125,
     126,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,   128,     0,   129,     0,     0,     0,     0,   131,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,   168,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   177,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,  1305,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,   210,     0,
       0,   211,     0,     0,   212,     0,   213,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,   229,     0,   231,     0,   595,
       0,     0,   596,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,   244,     0,   245,  1248,   246,
    1306,   247,   605,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   269,     0,     0,     0,   271,     0,     0,     0,   272,
       0,   273,     2,     3,     0,     4,  1225,     5,     6,   389,
       0,     0,     0,     0,     0,   390,    11,   391,    13,    14,
      15,     0,    16,  3212,     0,     0,     0,     0,     0,     0,
    3213,    18,     0,     0,   392,    21,     0,    22,    23,    24,
      25,  3214,    26,    27,    28,    29,    30,  3215,     0,     0,
       0,    31,    32,    33,    34,    35,    36,     0,     0,    37,
       0,     0,  3216,    39,  3217,     0,     0,    41,     0,     0,
     394,    43,  3218,     0,     0,   395,    47,     0,     0,     0,
       0,    49,     0,     0,     0,     0,     0,     0,    51,     0,
      52,     0,   396,     0,    54,    55,     0,     0,    56,    57,
    3219,     0,     0,   397,    60,    61,     0,    62,     0,    64,
    3220,  3221,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,    68,   398,    70,    71,     0,   399,
       0,     0,    73,    74,    75,    76,    77,     0,  1227,    78,
       0,   400,   401,     0,     0,     0,     0,     0,     0,     0,
       0,    82,     0,    83,    84,    85,    86,    87,     0,     0,
       0,     0,    89,     0,    91,     0,     0,     0,    92,    93,
      94,    95,    96,     0,     0,     0,    99,     0,  1836,     0,
       0,   102,     0,     0,   103,     0,     0,   403,   105,   106,
     107,   108,   109,   110,   111,   112,     0,  3222,     0,   113,
    3223,   114,   115,   116,     0,     0,  3224,   117,     0,     0,
       0,   404,     0,   405,   120,  1840,   122,  3225,   123,  3226,
       0,     0,     0,   124,   406,     0,     0,     0,     0,   127,
       0,     0,     0,     0,     0,     0,     0,  1230,     0,     0,
       0,  3227,     0,     0,  1231,   132,   133,  3228,     0,     0,
    3229,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   407,   162,   163,   164,     0,   166,     0,     0,
       0,   167,     0,     0,     0,     0,  3230,     0,     0,   172,
     173,     0,   174,   175,  1844,   176,     0,     0,   409,  3231,
    3232,     0,   180,  1233,   181,   182,   183,     0,   185,   186,
     187,     0,   188,   189,   190,   191,     0,     0,   192,     0,
    3233,     0,     0,     0,   194,   195,   196,   197,   198,   199,
       0,   201,   202,   203,     0,     0,   205,   206,   207,  1234,
       0,     0,  1235,  3234,     0,     0,   211,     0,     0,     0,
       0,   410,   214,     0,  3235,   215,   216,     0,   217,     0,
     218,     0,   219,     0,   220,   221,   222,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   224,   225,   226,   372,   228,     0,
       0,     0,   231,     0,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   245,     0,   246,     0,   247,   832,     0,   250,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,   257,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   265,   266,     0,     0,
       0,     0,   267,     0,     0,   268,   412,     0,     0,  3236,
     271,     0,     2,     3,   272,     4,   273,     5,     6,     7,
       0,     0,     8,     0,     0,   390,    11,    12,    13,    14,
      15,     0,    16,     0,     0,     0,     0,     0,     0,     0,
       0,    18,   579,     0,    20,    21,     0,    22,    23,    24,
      25,     0,    26,    27,    28,    29,    30,     0,     0,     0,
       0,    31,    32,    33,    34,    35,    36,     0,     0,    37,
       0,     0,   393,    39,    40,     0,     0,    41,     0,     0,
     394,    43,    44,    45,     0,   395,    47,     0,     0,     0,
       0,    49,     0,     0,     0,     0,     0,     0,    51,     0,
      52,     0,    53,     0,    54,    55,     0,     0,    56,    57,
       0,     0,     0,    59,    60,    61,     0,    62,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,    68,    69,    70,    71,     0,   399,
       0,     0,    73,    74,    75,    76,    77,     0,     0,    78,
       0,    79,    80,     0,     0,     0,     0,     0,     0,     0,
       0,    82,     0,    83,    84,    85,    86,    87,     0,     0,
       0,    88,    89,    90,    91,     0,     0,     0,    92,    93,
      94,    95,    96,     0,     0,     0,    99,   100,   402,     0,
       0,   102,     0,     0,   103,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   112,     0,     0,     0,   113,
       0,   114,   115,   116,     0,     0,     0,   117,     0,     0,
       0,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,     0,     0,   124,   125,   126,     0,     0,     0,   127,
       0,     0,     0,     0,     0,     0,     0,   128,     0,   129,
       0,     0,     0,     0,   131,   132,   133,     0,     0,     0,
       0,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   407,   162,   163,   164,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   408,     0,     0,   172,
     173,     0,   174,   175,     0,   176,     0,     0,   177,   178,
     179,     0,   180,     0,   181,   182,   183,     0,   185,   186,
     187,     0,   188,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,     0,   194,   195,   196,   197,   198,   199,
    1305,   201,   202,   203,     0,     0,   205,   206,   207,   208,
       0,     0,     0,   210,     0,     0,   211,     0,     0,   212,
       0,   213,   214,     0,     0,   215,   216,     0,   217,     0,
     218,     0,   219,     0,   220,   221,   222,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   224,   225,   226,   372,   228,     0,
     229,     0,   231,     0,   595,     0,     0,     0,   233,   234,
       0,     0,     0,     0,     0,     0,   240,   241,   242,   243,
     244,     0,   245,     0,   246,  1306,   247,   605,     0,   250,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,     0,     0,     0,   265,   266,     0,     0,
       0,     0,   267,     0,     0,   268,   269,     0,     0,     0,
     271,     0,     0,     0,   272,     0,   273,     2,     3,     0,
       4,  1225,     5,     6,   389,     0,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,  4458,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,  3214,    26,    27,    28,
      29,    30,  4459,  4460,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,  4461,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,  1048,
     395,    47,     0,     0,     0,     0,    49,     0,  4462,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,  3219,     0,  4463,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,  4464,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,  4465,     0,    73,    74,    75,
      76,    77,     0,  1227,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,  4466,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,  1836,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,  4467,   117,     0,     0,     0,   404,     0,   405,   120,
    1840,   122,  4468,   123,     0,     0,     0,     0,   124,   406,
       0,     0,  4469,     0,   127,     0,     0,     0,     0,     0,
       0,     0,  1230,     0,     0,     0,  4470,  4471,     0,  1231,
     132,   133,     0,     0,     0,  4472,     0,  4473,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,  1233,   181,
     182,  4474,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,  4475,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,  1234,     0,     0,  1235,  4476,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,  4477,
     215,   216,     0,   217,  4478,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,  1225,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,  4458,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,  3214,    26,    27,    28,    29,    30,  4459,  4460,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,  4461,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,  1048,   395,    47,     0,     0,
       0,     0,    49,     0,  4462,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,  3219,     0,  4463,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,  4464,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,  4465,     0,    73,    74,    75,    76,    77,     0,  1227,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
    4466,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,  1836,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,  4467,   117,     0,
       0,     0,   404,     0,   405,   120,  1840,   122,  4468,   123,
       0,     0,     0,     0,   124,   406,     0,     0,  4469,     0,
     127,     0,     0,     0,     0,     0,     0,     0,  1230,     0,
       0,     0,  4470,  4471,     0,  1231,   132,   133,     0,     0,
       0,  4472,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,  1233,   181,   182,  4474,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
    4475,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
    1234,     0,     0,  1235,  4476,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,  4477,   215,   216,     0,   217,
    4478,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,     7,   273,     0,     8,
       0,     0,   390,    11,    12,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,   579,
       0,    20,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
      45,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,    53,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
      59,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,    69,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,    79,    80,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,    88,    89,
      90,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,   100,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   118,     0,
     119,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   125,   126,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,   128,     0,   129,     0,     0,     0,
       0,   131,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   177,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
     210,     0,     0,   211,     0,     0,   212,     0,   213,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,   229,     0,   231,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,   244,     0,   245,
       0,   246,     0,   247,   248,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   269,     0,     0,     0,   271,     0,     0,
       0,   272,     0,   273,     2,     3,     0,     4,  1225,     5,
       6,   389,     0,     0,     0,     0,     0,   390,    11,   391,
      13,    14,    15,     0,    16,  3212,     0,     0,     0,     0,
       0,     0,  3213,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,  3214,    26,    27,    28,    29,    30,  3215,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,  3216,    39,  3217,     0,     0,    41,
       0,     0,   394,    43,  3218,     0,     0,   395,    47,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,  3219,     0,     0,   397,    60,    61,     0,    62,
       0,    64,  3220,  3221,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,   399,     0,     0,    73,    74,    75,    76,    77,     0,
    1227,    78,     0,   400,   401,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,     0,    91,     0,     0,     0,
      92,    93,    94,    95,    96,     0,     0,     0,    99,     0,
    1836,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,  3222,
       0,   113,  3223,   114,   115,   116,     0,     0,  3224,   117,
       0,     0,     0,   404,     0,   405,   120,  1840,   122,  3225,
     123,  3226,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,  1230,
       0,     0,     0,  3227,     0,     0,  1231,   132,   133,  3228,
       0,     0,  3229,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,     0,     0,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,  3230,     0,
       0,   172,   173,     0,   174,   175,  1844,   176,     0,     0,
     409,  3231,  3232,     0,   180,  1233,   181,   182,   183,     0,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,  3233,     0,     0,     0,   194,   195,   196,   197,
     198,   199,     0,   201,   202,   203,     0,     0,   205,   206,
     207,  1234,     0,     0,  1235,  3234,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,  3235,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   240,   241,
     242,   243,     0,     0,     0,     0,   246,     0,   247,   411,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       2,     3,   271,     4,     0,     5,     6,     7,   273,     0,
       8,     0,     0,   390,    11,    12,    13,    14,    15,     0,
      16,     0,     0,     0,     0,     0,     0,     0,     0,    18,
     579,     0,    20,    21,     0,    22,    23,    24,    25,     0,
      26,    27,    28,    29,    30,     0,     0,     0,     0,    31,
      32,    33,    34,    35,    36,     0,     0,    37,     0,     0,
     393,    39,    40,     0,     0,    41,     0,     0,   394,    43,
      44,    45,     0,   395,    47,     0,     0,     0,     0,    49,
       0,     0,     0,     0,     0,     0,    51,     0,    52,     0,
      53,     0,    54,    55,     0,     0,    56,    57,     0,     0,
       0,    59,    60,    61,     0,    62,     0,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,    67,
       0,     0,    68,    69,    70,    71,     0,   399,     0,     0,
      73,    74,    75,    76,    77,     0,     0,    78,     0,    79,
      80,     0,     0,     0,     0,     0,     0,     0,     0,    82,
       0,    83,    84,    85,    86,    87,     0,     0,     0,    88,
      89,    90,    91,     0,     0,     0,    92,    93,    94,    95,
      96,     0,     0,     0,    99,   100,   402,     0,     0,   102,
       0,     0,   103,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,   112,     0,     0,     0,   113,     0,   114,
     115,   116,     0,     0,     0,   117,     0,     0,     0,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,     0,
       0,   124,   125,   126,     0,     0,     0,   127,     0,     0,
       0,     0,     0,     0,     0,   128,     0,   129,     0,     0,
       0,     0,   131,   132,   133,     0,     0,     0,     0,     0,
     135,   136,   137,     0,   138,     0,     0,     0,   139,   140,
       0,   141,     0,   142,     0,   143,   144,   145,   146,   147,
       0,     0,     0,     0,   150,   151,   152,   153,   154,     0,
       0,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     407,   162,   163,   164,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   408,     0,     0,   172,   173,     0,
     174,   175,     0,   176,     0,     0,   177,   178,   179,     0,
     180,     0,   181,   182,   183,     0,   185,   186,   187,     0,
     188,   189,   190,   191,     0,     0,   192,     0,     0,     0,
       0,     0,   194,   195,   196,   197,   198,   199,     0,   201,
     202,   203,     0,     0,   205,   206,   207,   208,     0,     0,
       0,   210,     0,     0,   211,     0,     0,   212,     0,   213,
     214,     0,     0,   215,   216,     0,   217,     0,   218,     0,
     219,     0,   220,   221,   222,     0,     0,     0,     0,     0,
       0,     0, -1841,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   224,   225,   226,   372,   228,     0,   229,     0,
       0,     0,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,     0,     0,   240,   241,   242,   243,   244,     0,
       0,     0,   246,     0,   247,  1081,     0,   250,   251,   252,
     253,   254,   255,   256,     0,     0,     0,     0,     0,     0,
       0,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,     0,     0,     0,   265,   266,     0,     0,     0,     0,
     267,     0,     0,   268,   269,     0,     2,     3,   271,     4,
       0,     5,     6,     7,   273,     0,     8,     0,     0,   390,
      11,    12,    13,    14,    15,     0,    16,     0,     0,     0,
       0,     0,     0,     0,     0,    18,   579,     0,    20,    21,
       0,    22,    23,    24,    25,     0,    26,    27,    28,    29,
      30,     0,     0,     0,     0,    31,    32,    33,    34,    35,
      36,     0,     0,    37,     0,     0,   393,    39,    40,     0,
       0,    41,     0,     0,   394,    43,    44,    45,     0,   395,
      47,     0,     0,     0,     0,    49,     0,     0,     0,     0,
       0,     0,    51,     0,    52,     0,    53,     0,    54,    55,
       0,     0,    56,    57,     0,     0,     0,    59,    60,    61,
       0,    62,     0,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,    66,    67,     0,     0,    68,    69,
      70,    71,     0,   399,     0,     0,    73,    74,    75,    76,
      77,     0,     0,    78,     0,    79,    80,     0,     0,     0,
       0,     0,     0,     0,     0,    82,     0,    83,    84,    85,
      86,    87,     0,     0,     0,    88,    89,    90,    91,     0,
       0,     0,    92,    93,    94,    95,    96,     0,     0,     0,
      99,   100,   402,     0,     0,   102,     0,     0,   103,     0,
       0,   104,   105,   106,   107,   108,   109,   110,   111,   112,
       0,     0,     0,   113,     0,   114,   115,   116,     0,     0,
       0,   117,     0,     0,     0,   118,     0,   119,   120,   121,
     122,     0,   123,     0,     0,     0,     0,   124,   125,   126,
       0,     0,     0,   127,     0,     0,     0,     0,     0,     0,
       0,   128,     0,   129,     0,     0,     0,     0,   131,   132,
     133,     0,     0,     0,     0,     0,   135,   136,   137,     0,
     138,     0,     0,     0,   139,   140,     0,   141,     0,   142,
       0,   143,   144,   145,   146,   147,     0,     0,     0,     0,
     150,   151,   152,   153,   154,     0,     0,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   407,   162,   163,   164,
       0,   166,     0,     0,     0,   167,     0,     0,   168,     0,
     408,     0,     0,   172,   173,     0,   174,   175,     0,   176,
       0,     0,   177,   178,   179,     0,   180,     0,   181,   182,
     183,     0,   185,   186,   187,     0,   188,   189,   190,   191,
       0,     0,   192,     0,     0,     0,     0,     0,   194,   195,
     196,   197,   198,   199,     0,   201,   202,   203,     0,     0,
     205,   206,   207,   208,     0,     0,     0,   210,     0,     0,
     211,     0,     0,   212,     0,   213,   214,     0,     0,   215,
     216,     0,   217,     0,   218,     0,   219,     0,   220,   221,
     222,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   224,   225,
     226,   372,   228,     0,   229,     0,     0,     0,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,     0,     0,
     240,   241,   242,   243,   244,     0,     0,     0,   246,     0,
     247,  1081,     0,   250,   251,   252,   253,   254,   255,   256,
       0,     0,     0,     0,     0,     0,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,     0,     0,     0,
     265,   266,     0,     0,     0,     0,   267,     0,     0,   268,
     269,     0,     2,     3,   271,     4,     0,     5,     6,     7,
     273,     0,     8,     0,     0,   390,    11,    12,    13,    14,
      15,     0,    16,     0,     0,     0,     0,     0,     0,     0,
       0,    18,   579,     0,    20,    21,     0,    22,    23,    24,
      25,     0,    26,    27,    28,    29,    30,     0,     0,     0,
       0,    31,    32,    33,    34,    35,    36,     0,     0,    37,
       0,     0,   393,    39,    40,     0,     0,    41,     0,     0,
     394,    43,    44,    45,     0,   395,    47,     0,     0,     0,
       0,    49,     0,     0,     0,     0,     0,     0,    51,     0,
      52,     0,    53,     0,    54,    55,     0,     0,    56,    57,
       0,     0,     0,    59,    60,    61,     0,    62,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,    68,    69,    70,    71,     0,   399,
       0,     0,    73,    74,    75,    76,    77,     0,     0,    78,
       0,    79,    80,     0,     0,     0,     0,     0,     0,     0,
       0,    82,     0,    83,    84,    85,    86,    87,     0,     0,
       0,    88,    89,    90,    91,     0,     0,     0,    92,    93,
      94,    95,    96,     0,     0,     0,    99,   100,   402,     0,
       0,   102,     0,     0,   103,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   112,     0,     0,     0,   113,
       0,   114,   115,   116,     0,     0,     0,   117,     0,     0,
       0,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,     0,     0,   124,   125,   126,     0,     0,     0,   127,
       0,     0,     0,     0,     0,     0,     0,   128,     0,   129,
       0,     0,     0,     0,   131,   132,   133,     0,     0,     0,
       0,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,   143,   144,   145,
     146,   147,     0,     0,     0,     0,   150,   151,   152,   153,
     154,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   407,   162,   163,   164,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   408,     0,     0,   172,
     173,     0,   174,   175,     0,   176,     0,     0,   177,   178,
     179,     0,   180,     0,   181,   182,   183,     0,   185,   186,
     187,     0,   188,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,     0,   194,   195,   196,   197,   198,   199,
       0,   201,   202,   203,     0,     0,   205,   206,   207,   208,
       0,     0,     0,   210,     0,     0,   211,     0,     0,   212,
       0,   213,   214,     0,     0,   215,   216,     0,   217,     0,
     218,     0,   219,     0,   220,   221,   222,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   224,   225,   226,   372,   228,     0,
     229,     0,     0,     0,     0,     0,     0,     0,   233,   234,
       0,     0,     0,     0,     0,     0,   240,   241,   242,   243,
     244,     0,     0,     0,   246,     0,   247,  1081,     0,   250,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,     0,     0,     0,   265,  1529,     0,     0,
       0,     0,   267,     0,     0,   268,   269,     0,     2,     3,
     271,     4,  1225,     5,     6,   389,   273,     0,     0,     0,
       0,   390,    11,  1826,    13,    14,    15,     0,    16,     0,
       0,  1827,     0,     0,     0,     0,     0,    18,     0,     0,
     392,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,   393,    39,
    1828,     0,     0,    41,     0,     0,   394,    43,    44,     0,
       0,   395,    47,     0,     0,     0,     0,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,   396,     0,
      54,    55,  1829,     0,    56,    57,     0,     0,     0,   397,
      60,    61,     0,    62,     0,    64,  1830,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,   398,    70,    71,     0,  1831,     0,     0,    73,    74,
      75,    76,    77,     0,  1227,    78,     0,   400,   401,     0,
       0,     0,     0,     0,     0,     0,     0,    82,  1832,    83,
      84,    85,    86,    87,  1833,     0,     0,     0,  1834,     0,
      91,     0,     0,     0,  1835,    93,    94,    95,    96,     0,
       0,     0,    99,     0,  1836,     0,     0,   102,     0,     0,
     103,     0,  1837,   403,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,  1838,     0,   114,   115,   116,
    1839,     0,     0,   117,     0,     0,     0,   404,     0,   405,
     120,  1840,   122,     0,   123,     0,     0,     0,     0,   124,
     406,     0,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,  1230,     0,     0,     0,     0,     0,     0,
    1231,   132,  1841,     0,     0,     0,     0,     0,   135,   136,
     137,  1842,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,  1843,     0,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   407,   162,
     163,   164,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,   408,     0,     0,   172,   173,     0,   174,   175,
    1844,   176,     0,     0,   409,   178,  1845,     0,   180,  1233,
     181,   182,   183,     0,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,  1846,     0,     0,     0,
     194,   195,   196,   197,   198,   199,  1305,   201,   202,   203,
       0,     0,   205,   206,   207,  1234,     0,  1847,  1235,     0,
       0,     0,   211,     0,     0,     0,     0,   410,   214,     0,
       0,   215,   216,  1848,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   372,   228,     0,     0,     0,     0,     0,
     595,     0,     0,     0,   233,   234,     0,     0,     0,     0,
       0,     0,   240,   241,   242,   243,     0,     0,     0,     0,
     246,  1306,   247,  2624,     0,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,  1529,     0,     0,     0,     0,   267,     0,
       0,   268,   412,     0,     2,     3,   271,     4,  1225,     5,
       6,   389,   273,     0,     0,     0,     0,   390,    11,  1826,
      13,    14,    15,  3362,    16,     0,     0,  1827,     0,     0,
       0,     0,     0,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   393,    39,  1828,     0,     0,    41,
       0,     0,   394,    43,    44,     0,     0,   395,    47,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,  1829,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,  1830,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,  1831,     0,     0,    73,    74,    75,    76,    77,     0,
    1227,    78,     0,   400,   401,     0,     0,     0,     0,     0,
       0,     0,     0,    82,  1832,    83,    84,    85,    86,    87,
    1833,     0,     0,     0,  1834,     0,    91,     0,     0,     0,
    1835,    93,    94,    95,    96,     0,     0,     0,    99,     0,
    1836,     0,     0,   102,     0,     0,   103,     0,  1837,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,  1838,     0,   114,   115,   116,  1839,     0,  3363,   117,
       0,     0,     0,   404,     0,   405,   120,  1840,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,  1230,
       0,     0,     0,     0,     0,     0,  1231,   132,  1841,     0,
       0,     0,     0,     0,   135,   136,   137,  1842,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,  1843,     0,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   408,     0,
       0,   172,   173,     0,   174,   175,  3364,   176,     0,     0,
     409,   178,  1845,     0,   180,  1233,   181,   182,   183,     0,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,  1846,     0,     0,     0,   194,   195,   196,   197,
     198,   199,     0,   201,   202,   203,     0,     0,   205,   206,
     207,  1234,     0,  1847,  1235,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,     0,   215,   216,  1848,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   240,   241,
     242,   243,     0,     0,     0,     0,   246,     0,   247,   411,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,  1529,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       2,     3,   271,     4,  1225,     5,     6,   389,   273,     0,
       0,     0,     0,   390,    11,  1826,    13,    14,    15,     0,
      16,     0,     0,  1827,     0,     0,     0,     0,     0,    18,
       0,     0,   392,    21,     0,    22,    23,    24,    25,     0,
      26,    27,    28,    29,    30,     0,     0,     0,     0,    31,
      32,    33,    34,    35,    36,     0,     0,    37,     0,     0,
     393,    39,  1828,     0,     0,    41,     0,     0,   394,    43,
      44,     0,     0,   395,    47,     0,     0,     0,     0,    49,
       0,     0,     0,     0,     0,     0,    51,     0,    52,     0,
     396,     0,    54,    55,  1829,     0,    56,    57,     0,     0,
       0,   397,    60,    61,     0,    62,     0,    64,  1830,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,    67,
       0,     0,    68,   398,    70,    71,     0,  1831,     0,     0,
      73,    74,    75,    76,    77,     0,  1227,    78,     0,   400,
     401,     0,     0,     0,     0,     0,     0,     0,     0,    82,
    1832,    83,    84,    85,    86,    87,  1833,     0,     0,     0,
    1834,     0,    91,     0,     0,     0,  1835,    93,    94,    95,
      96,     0,     0,     0,    99,     0,  1836,     0,     0,   102,
       0,     0,   103,     0,  1837,   403,   105,   106,   107,   108,
     109,   110,   111,   112,     0,     0,     0,  1838,     0,   114,
     115,   116,  1839,     0,     0,   117,     0,     0,     0,   404,
       0,   405,   120,  1840,   122,     0,   123,     0,     0,     0,
       0,   124,   406,     0,     0,     0,     0,   127,     0,     0,
       0,     0,     0,     0,     0,  1230,     0,     0,     0,     0,
       0,     0,  1231,   132,  1841,     0,     0,     0,     0,     0,
     135,   136,   137,  1842,   138,     0,     0,     0,   139,   140,
       0,   141,     0,   142,     0,   143,   144,   145,   146,   147,
    1843,     0,     0,     0,   150,   151,   152,   153,   154,     0,
       0,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     407,   162,   163,   164,     0,   166,     0,     0,     0,   167,
       0,     0,     0,     0,   408,     0,     0,   172,   173,     0,
     174,   175,  1844,   176,     0,     0,   409,   178,  1845,     0,
     180,  1233,   181,   182,   183,     0,   185,   186,   187,     0,
     188,   189,   190,   191,     0,     0,   192,     0,  1846,     0,
       0,     0,   194,   195,   196,   197,   198,   199,     0,   201,
     202,   203,     0,     0,   205,   206,   207,  1234,     0,  1847,
    1235,     0,     0,     0,   211,     0,     0,     0,     0,   410,
     214,     0,     0,   215,   216,  1848,   217,     0,   218,     0,
     219,     0,   220,   221,   222,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   224,   225,   226,   372,   228,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   233,   234,     0,     0,
       0,     0,     0,     0,   240,   241,   242,   243,     0,     0,
       0,     0,   246,     0,   247,   411,     0,   250,   251,   252,
     253,   254,   255,   256,     0,     0,     0,     0,     0,     0,
       0,     0,   257,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   265,  1529,     0,     0,     0,     0,
     267,     0,     0,   268,   412,     0,     0,     0,   271,     0,
       0,     0,  4130,     0,   273,     2,     3,     0,     4,  1225,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
    1826,    13,    14,    15,     0,    16,     0,     0,  1827,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,  1828,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,  1829,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,  1830,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,  1831,     0,     0,    73,    74,    75,    76,    77,
       0,  1227,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,  1832,    83,    84,    85,    86,
      87,  1833,     0,     0,     0,  1834,     0,    91,     0,     0,
       0,  1835,    93,    94,    95,  5201,     0,     0,     0,    99,
       0,  1836,     0,     0,   102,     0,     0,   103,     0,  1837,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,  1838,     0,   114,   115,   116,  1839,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,  1840,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
    1230,     0,     0,     0,     0,     0,     0,  1231,   132,  1841,
       0,     0,     0,     0,     0,   135,   136,   137,  1842,   138,
       0,     0,  5202,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,  1843,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,  1844,   176,     0,
       0,   409,   178,  1845,     0,   180,  1233,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,  1846,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,  1234,     0,  1847,  1235,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
    1848,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
    1529,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,  1225,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,  1826,    13,    14,    15,
       0,    16,     0,     0,  1827,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,  1828,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,  1829,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,  1830,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,  1831,     0,
       0,    73,    74,    75,    76,    77,     0,  1227,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,  1832,    83,    84,    85,    86,    87,  1833,     0,     0,
       0,  1834,     0,    91,     0,     0,     0,  1835,    93,    94,
      95,    96,     0,     0,     0,    99,     0,  1836,     0,     0,
     102,     0,     0,   103,     0,  1837,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,  1838,     0,
     114,   115,   116,  1839,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,  1840,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,  1230,     0,     0,     0,
       0,     0,     0,  1231,   132,  1841,     0,     0,     0,     0,
       0,   135,   136,   137,  1842,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,  1843,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,  1844,   176,     0,     0,   409,   178,  1845,
       0,   180,  1233,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,  1846,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,  1234,     0,
    1847,  1235,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,  1848,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,  1529,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,  1225,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,  1826,    13,    14,    15,     0,    16,     0,     0,
    1827,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,  1828,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,  1829,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,  1830,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,  1831,     0,     0,    73,    74,    75,
      76,    77,     0,  1227,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,  1832,    83,    84,
      85,    86,    87,  1833,     0,     0,     0,  1834,     0,    91,
       0,     0,     0,  1835,    93,    94,    95,    96,     0,     0,
       0,    99,     0,  1836,     0,     0,   102,     0,     0,   103,
       0,  1837,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,  1838,     0,   114,   115,   116,  1839,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
    1840,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,  1230,     0,     0,     0,     0,     0,     0,  1231,
     132,  1841,     0,     0,     0,     0,     0,   135,   136,   137,
    1842,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,  1843,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,  3393,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,  1844,
     176,     0,     0,   409,   178,  1845,     0,   180,  1233,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,  1846,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,  1234,     0,  1847,  1235,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,  1848,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,  1529,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,    10,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,    46,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,    98,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,   231,     0,     0,     0,     0,     0,   233,
     234,     0,   597,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   245,     0,   246,     0,   247,   832,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     0,
       0,   271,  1098,     2,     3,   272,     4,   273,     5,     6,
     389,     0,     0,     0,     0,     0,    10,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,    17,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,    46,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,    98,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   169,     0,   171,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,   231,     0,     0,     0,     0,     0,   233,
     234,     0,   597,   236,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   245,     0,   246,     0,   247,   832,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   773,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     0,
       0,   271,     0,     0,     0,   272,     0,   273,     2,     3,
       0,     4,  1225,     5,     6,   389,     0,     0,     0,     0,
       0,   390,    11,   391,    13,    14,    15,     0,    16,     0,
       0,  2637,     0,     0,     0,     0,     0,    18,     0,     0,
     392,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,   393,    39,
      40,     0,     0,    41,     0,     0,   394,    43,    44,     0,
       0,   395,    47,     0,     0,     0,     0,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,   396,     0,
      54,    55,  2638,     0,    56,    57,     0,     0,     0,   397,
      60,    61,     0,    62,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,   398,    70,    71,     0,   399,     0,     0,  2639,    74,
      75,    76,    77,     0,  1227,    78,     0,   400,   401,     0,
       0,     0,     0,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,  2640,     0,    89,     0,
      91,     0,     0,     0,    92,    93,    94,    95,    96,     0,
       0,     0,    99,     0,  1836,     0,     0,   102,     0,     0,
     103,     0,  2641,   403,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   404,     0,   405,
     120,  1840,   122,     0,   123,     0,     0,     0,     0,   124,
     406,     0,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,  1230,     0,     0,     0,     0,     0,     0,
    1231,   132,   133,     0,     0,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,  2642,     0,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   407,   162,
     163,   164,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,   408,     0,     0,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   409,   178,   179,     0,   180,  1233,
     181,   182,   183,     0,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,     0,
     194,   195,   196,   197,   198,   199,     0,   201,   202,   203,
       0,     0,   205,   206,   207,  1234,     0,     0,  1235,     0,
       0,     0,   211,     0,     0,     0,     0,   410,   214,     0,
       0,   215,   216,  2643,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   372,   228,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   233,   234,     0,     0,     0,     0,
       0,     0,   240,   241,   242,   243,     0,     0,     0,     0,
     246,     0,   247,   411,     0,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   412,     0,     2,     3,   271,     4,     0,     5,
       6,   389,   273,     0,     0,     0,     0,   390,    11,   391,
      13,    14,    15,     0,    16,     0,     0,     0,     0,     0,
       0,     0,     0,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   393,    39,    40,     0,     0,    41,
       0,     0,   394,    43,    44,     0,     0,   395,    47,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,   399,     0,     0,    73,    74,    75,    76,    77,     0,
       0,    78,     0,   400,   401,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,     0,    91,     0,     0,     0,
      92,    93,    94,    95,    96,     0,     0,     0,    99,     0,
     402,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,   113,     0,   114,   115,   116,     0,     0,     0,   117,
       0,     0,     0,   404,     0,   405,   120,   121,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
    2483,     0,     0,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,  3774,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   408,     0,
       0,   172,   173,     0,   174,   175,     0,   176,     0,     0,
     409,   178,   179,     0,   180,     0,   181,   182,   183,     0,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,  2485,   194,   195,   196,   197,
     198,   199,     0,   201,   202,   203,     0,     0,   205,   206,
     207,   208,     0,     0,     0,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,     0,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,     0,     0,     0,   231,     0,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   598,   599,
     242,   243,  2367,   601,   602,  2368,   246,  2369,   247,   832,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       0,     0,   271,     0,     2,     3,   272,     4,   273,     5,
       6,   389,     0,     0,     0,     0,     0,   390,    11,   391,
      13,    14,    15,     0,    16,     0,     0,     0,     0,     0,
       0,     0,     0,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   393,    39,    40,     0,     0,    41,
       0,     0,   394,    43,    44,     0,  1048,   395,    47,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,   399,     0,     0,    73,    74,    75,    76,    77,     0,
       0,    78,     0,   400,   401,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,     0,    91,     0,     0,     0,
      92,    93,    94,    95,    96,     0,     0,     0,    99,     0,
     402,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,   113,     0,   114,   115,   116,     0,     0,     0,   117,
       0,     0,     0,   404,     0,   405,   120,   121,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,     0,     0,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   408,     0,
       0,   172,   173,     0,   174,   175,     0,   176,     0,     0,
     409,   178,   179,     0,   180,     0,   181,   182,   183,     0,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,     0,   194,   195,   196,   197,
     198,   199,  1305,   201,   202,   203,     0,     0,   205,   206,
     207,   208,     0,     0,     0,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,     0,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,     0,     0,     0,   231,     0,   595,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   245,     0,   246,  1306,   247,  3010,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       0,     0,   271,     0,     0,     0,   272,     0,   273,     2,
       3,     0,     4,  1225,     5,     6,   389,     0,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,  4097,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,  1227,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,  1836,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,  1840,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,  1230,     0,     0,     0,     0,     0,
       0,  1231,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,  4098,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
    1233,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,  1234,     0,     0,  1235,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,  4099,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,    10,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,    17,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,    46,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,    98,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   169,
       0,   171,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,   597,   236,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   773,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,  1305,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,   231,     0,   595,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   245,     0,   246,  1306,   247,  3010,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     0,     0,   271,
       0,     2,     3,   272,     4,   273,     5,     6,   389,     0,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
    3214,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,  3219,
       0,     0,   397,    60,    61,     0,    62,     0,    64,  3088,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,  4251,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,  3089,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,  4252,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,  4253,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
    4254,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,  1225,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,  3851,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,  3852,     0,     0,    73,    74,    75,
      76,    77,     0,  1227,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,  1836,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
    1840,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,  1230,     0,     0,     0,     0,     0,     0,  1231,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,  1233,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,  1234,     0,     0,  1235,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,  1048,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,  1049,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,   231,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   245,     0,   246,     0,   247,   832,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,  1050,     0,     0,
       0,   271,     0,     2,     3,   272,     4,   273,     5,     6,
     389,     0,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,   231,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   245,     0,   246,     0,   247,   832,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     0,
       0,   271,  1076,     0,     0,   272,     0,   273,     2,     3,
       0,     4,  1225,     5,     6,   389,     0,     0,     0,     0,
       0,   390,    11,   391,    13,    14,    15,     0,    16,     0,
       0,     0,     0,     0,     0,     0,     0,    18,     0,     0,
     392,    21,     0,    22,    23,    24,    25,     0,    26,    27,
      28,    29,    30,     0,     0,     0,     0,    31,    32,    33,
      34,    35,    36,     0,     0,    37,     0,     0,   393,    39,
    1226,     0,     0,    41,     0,     0,   394,    43,    44,     0,
       0,   395,    47,     0,     0,     0,     0,    49,     0,     0,
       0,     0,     0,     0,    51,     0,    52,     0,   396,     0,
      54,    55,     0,     0,    56,    57,     0,     0,     0,   397,
      60,    61,     0,    62,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
      68,   398,    70,    71,     0,   399,     0,     0,    73,    74,
      75,    76,    77,     0,  1227,    78,     0,   400,   401,     0,
       0,     0,     0,     0,     0,     0,     0,    82,     0,    83,
      84,    85,    86,    87,     0,     0,     0,     0,    89,     0,
      91,     0,     0,     0,    92,    93,    94,    95,    96,     0,
       0,     0,    99,     0,  1836,     0,     0,   102,     0,     0,
     103,     0,     0,   403,   105,   106,   107,   108,   109,   110,
     111,   112,     0,     0,     0,   113,     0,   114,   115,   116,
       0,     0,     0,   117,     0,     0,     0,   404,     0,   405,
     120,  1840,   122,     0,   123,     0,     0,     0,     0,   124,
     406,     0,     0,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,  1230,     0,     0,     0,     0,     0,     0,
    1231,   132,   133,     0,     0,     0,     0,     0,   135,   136,
     137,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,   143,   144,   145,   146,   147,     0,     0,
       0,     0,   150,   151,   152,   153,   154,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   407,   162,
     163,   164,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,   408,     0,     0,   172,   173,     0,   174,   175,
       0,   176,     0,     0,   409,   178,  1232,     0,   180,  1233,
     181,   182,   183,     0,   185,   186,   187,     0,   188,   189,
     190,   191,     0,     0,   192,     0,     0,     0,     0,     0,
     194,   195,   196,   197,   198,   199,     0,   201,   202,   203,
       0,     0,   205,   206,   207,  1234,     0,     0,  1235,     0,
       0,     0,   211,     0,     0,     0,     0,   410,   214,     0,
       0,   215,   216,     0,   217,     0,   218,     0,   219,     0,
     220,   221,   222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   372,   228,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   233,   234,     0,     0,     0,     0,
       0,     0,   240,   241,   242,   243,     0,     0,     0,     0,
     246,     0,   247,   411,     0,   250,   251,   252,   253,   254,
     255,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,   266,     0,     0,     0,     0,   267,     0,
       0,   268,   412,     0,     2,     3,   271,     4,     0,     5,
       6,   389,   273,     0,     0,     0,     0,   390,    11,   391,
      13,    14,    15,     0,    16,     0,     0,     0,     0,     0,
       0,     0,     0,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   393,    39,    40,     0,     0,    41,
       0,     0,   394,    43,    44,     0,     0,   395,    47,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,   399,     0,     0,    73,    74,    75,    76,    77,     0,
       0,    78,     0,   400,   401,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,     0,    91,     0,     0,     0,
      92,    93,    94,    95,    96,     0,     0,     0,    99,     0,
     402,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,   113,     0,   114,   115,   116,     0,     0,     0,   117,
       0,     0,     0,   404,     0,   405,   120,   121,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,     0,     0,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,     0,     0,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   408,     0,
       0,   172,   173,     0,   174,   175,     0,   176,     0,     0,
     409,   178,   179,     0,   180,     0,   181,   182,   183,     0,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,     0,   194,   195,   196,   197,
     198,   199,  1305,   201,   202,   203,     0,     0,   205,   206,
     207,   208,     0,     0,     0,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,     0,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,     0,     0,     0,   231,     0,   595,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   245,     0,   246,  1306,   247,  2624,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,  1529,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       0,     0,   271,     0,     2,     3,  1374,     4,   273,     5,
       6,   389,     0,     0,     0,     0,     0,   390,    11,   391,
      13,    14,    15,     0,    16,     0,     0,     0,     0,     0,
       0,     0,     0,    18,     0,     0,   392,    21,     0,    22,
      23,    24,    25,     0,    26,    27,    28,    29,    30,     0,
       0,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,    37,     0,     0,   393,    39,    40,     0,     0,    41,
       0,     0,   394,    43,    44,     0,     0,   395,    47,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,    52,     0,   396,     0,    54,    55,     0,     0,
      56,    57,     0,     0,     0,   397,    60,    61,     0,    62,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,    68,   398,    70,    71,
       0,   399,     0,     0,    73,    74,    75,    76,    77,     0,
       0,    78,     0,   400,   401,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,    83,    84,    85,    86,    87,
       0,     0,     0,     0,    89,     0,    91,     0,     0,     0,
      92,    93,    94,    95,    96,     0,     0,     0,    99,     0,
     402,     0,     0,   102,     0,     0,   103,     0,     0,   403,
     105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
       0,   113,     0,   114,   115,   116,     0,     0,     0,   117,
       0,     0,     0,   404,     0,   405,   120,   121,   122,     0,
     123,     0,     0,     0,     0,   124,   406,     0,     0,     0,
       0,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,     0,     0,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   407,   162,   163,   164,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   408,     0,
       0,   172,   173,     0,   174,   175,     0,   176,     0,     0,
     409,   178,   179,     0,   180,     0,   181,   182,   183,     0,
     185,   186,   187,     0,   188,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,     0,   194,   195,   196,   197,
     198,   199,     0,   201,   202,   203,     0,     0,   205,   206,
     207,   208,     0,     0,     0,     0,     0,     0,   211,     0,
       0,     0,     0,   410,   214,     0,     0,   215,   216,     0,
     217,     0,   218,     0,   219,     0,   220,   221,   222,     0,
       0,     0,     0,     0,     0,     0, -1841,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
     228,     0,     0,     0,   231,     0,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   245,     0,   246,     0,   247,   832,
       0,   250,   251,   252,   253,   254,   255,   256,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
       0,     0,     0,     0,   267,     0,     0,   268,   412,     0,
       0,     0,   271,     0,     0,     0,   272,     0,   273,     2,
       3,     0,     4,  1225,     5,     6,   389,     0,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,  1227,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,  1836,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,  1840,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,  1230,     0,     0,     0,     0,     0,
       0,  1231,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
    1233,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,  1234,     0,     0,  1235,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,   231,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   245,     0,   246,     0,   247,
     832,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,  1098,     2,     3,   272,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,    10,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,    17,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,    46,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,    98,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,   171,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,  1048,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,   231,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   245,     0,   246,     0,   247,   832,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     0,     0,   271,
       0,     2,     3,   272,     4,   273,     5,     6,   389,     0,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,   231,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   245,     0,   246,     0,   247,   832,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     0,     0,   271,
       0,     2,     3,   272,     4,   273,     5,     6,   389,     0,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,  1227,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,  3351,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,  3352,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,  3353,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,  1844,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,  4153,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,   231,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   245,     0,   246,
       0,   247,   832,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     0,     0,   271,     0,     2,     3,   272,
       4,   273,     5,     6,   389,     0,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,  4730,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,  4731,  4732,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,  4733,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,  4734,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,  4735,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,   581,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,   585,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,   596,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,  1248,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,  4134,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,  1227,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,  1836,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,  1840,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,  4135,   138,  4136,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,  1168,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,  1169,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,  1185,     2,     3,     0,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,  1168,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,  1169,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,  1190,     2,     3,     0,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,  1168,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,  1169,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,  1194,     2,     3,     0,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,  1658,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0, -1841,     0,     0,
       0,     0,     0,  1659,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,  2693,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,  2694,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,  2695,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,  2912,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,  1305,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,   595,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
    1306,   247,  2624,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,  3088,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,  3092,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,  3089,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,  1305,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,   595,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,  1306,   247,  2624,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,   231,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   245,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
    1529,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,     0,     2,     3,  1374,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,  5379,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,  5380,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,  5381,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,  1710,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1711,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0, -1841,
       0,     0,     0,     0,     0,  1659,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,  2964,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,  2965,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,  2966,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,  2967,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,  3088,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,  3089,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0, -1841,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,  3150,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3678,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
    3679,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,  3859,     0,    52,     0,   396,     0,    54,
      55,     0,  3860,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,  3861,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0, -1841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,  2921,     0,     0,
       0,   271,     0,     2,     3,  1374,     4,   273,     5,     6,
     389,     0,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,  4773,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,  1227,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,  1040,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,  1041,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,  1090,     2,     3,     0,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,  1106,     2,     3,     0,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,  1144,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0, -1841,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     0,     0,   271,  1697,     2,     3,     0,
       4,   273,     5,     6,   389,     0,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,  1048,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,  1049,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,  1050,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,  2537,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,  2538,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     0,     0,   271,  1098,     2,
       3,     0,     4,   273,     5,     6,   389,     0,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,  1048,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,  2734,   271,     0,     2,     3,     0,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,  2921,
       0,     0,     0,   271,     0,     2,     3,  1374,     4,   273,
       5,     6,   389,     0,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     0,     0,   271,     0,     0,  3162,     2,     3,   273,
       4,     0,     5,     6,   389,     0,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,  4047,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     0,
    4155,   271,     0,     2,     3,     0,     4,   273,     5,     6,
     389,     0,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,  1725,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     0,     0,   271,     0,     2,
       3, -2019,     4,   273,     5,     6,   389,     0,  5555,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,  5351,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,   980,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,  1093,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,  1198,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,   268,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,  1204,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,   115,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
    1422,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,   115,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,   124,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,   216,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,  1529,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,    12,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,   124,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,   216,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   266,     0,     0,     0,     0,   267,     0,     0,
     268,   412,     0,     2,     3,   271,     4,     0,     5,     6,
     389,   273,     0,     0,     0,     0,   390,    11,   391,    13,
      14,    15,     0,    16,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,     0,   392,    21,     0,    22,    23,
      24,    25,     0,    26,    27,    28,    29,    30,     0,     0,
       0,     0,    31,    32,    33,    34,    35,    36,     0,     0,
      37,     0,     0,   393,    39,    40,     0,     0,    41,     0,
       0,   394,    43,    44,     0,     0,   395,    47,     0,     0,
       0,     0,    49,     0,     0,     0,     0,     0,     0,    51,
       0,    52,     0,   396,     0,    54,    55,     0,     0,    56,
      57,     0,     0,     0,   397,    60,    61,     0,    62,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,    68,   398,    70,    71,     0,
     399,     0,     0,    73,    74,    75,    76,    77,     0,     0,
      78,     0,   400,   401,     0,     0,     0,     0,     0,     0,
       0,     0,    82,     0,    83,    84,    85,    86,    87,     0,
       0,     0,     0,    89,     0,    91,     0,     0,     0,    92,
      93,    94,    95,    96,     0,     0,     0,    99,     0,   402,
       0,     0,   102,     0,     0,   103,     0,     0,   403,   105,
     106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     113,     0,   114,   115,   116,     0,     0,     0,   117,     0,
       0,     0,   404,     0,   405,   120,   121,   122,     0,   123,
       0,     0,     0,     0,   124,   406,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
       0,     0,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,     0,   141,     0,   142,     0,   143,   144,
     145,   146,   147,     0,     0,     0,     0,   150,   151,   152,
     153,   154,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   407,   162,   163,   164,     0,   166,     0,
       0,     0,   167,     0,     0,     0,     0,   408,     0,     0,
     172,   173,     0,   174,   175,     0,   176,     0,     0,   409,
     178,   179,     0,   180,     0,   181,   182,   183,     0,   185,
     186,   187,     0,   188,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,     0,   194,   195,   196,   197,   198,
     199,     0,   201,   202,   203,     0,     0,   205,   206,   207,
     208,     0,     0,     0,     0,     0,     0,   211,     0,     0,
       0,     0,   410,   214,     0,     0,   215,   216,     0,   217,
       0,   218,     0,   219,     0,   220,   221,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   224,   225,   226,   372,   228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,     0,     0,     0,     0,     0,     0,   240,   241,   242,
     243,     0,     0,     0,     0,   246,     0,   247,   411,     0,
     250,   251,   252,   253,   254,   255,   256,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   266,     0,
       0,     0,     0,   267,     0,     0,  2883,   412,     0,     2,
       3,   271,     4,     0,     5,     6,   389,   273,     0,     0,
       0,     0,   390,    11,   391,    13,    14,    15,     0,    16,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   392,    21,     0,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,     0,     0,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,    37,     0,     0,   393,
      39,    40,     0,     0,    41,     0,     0,   394,    43,    44,
       0,     0,   395,    47,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,    52,     0,   396,
       0,    54,    55,     0,     0,    56,    57,     0,     0,     0,
     397,    60,    61,     0,    62,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,    68,   398,    70,    71,     0,   399,     0,     0,    73,
      74,    75,    76,    77,     0,     0,    78,     0,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      83,    84,    85,    86,    87,     0,     0,     0,     0,    89,
       0,    91,     0,     0,     0,    92,    93,    94,    95,    96,
       0,     0,     0,    99,     0,   402,     0,     0,   102,     0,
       0,   103,     0,     0,   403,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,     0,   113,     0,   114,  5318,
     116,     0,     0,     0,   117,     0,     0,     0,   404,     0,
     405,   120,   121,   122,     0,   123,     0,     0,     0,     0,
     124,   406,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
     136,   137,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,   143,   144,   145,   146,   147,     0,
       0,     0,     0,   150,   151,   152,   153,   154,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   407,
     162,   163,   164,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   408,     0,     0,   172,   173,     0,   174,
     175,     0,   176,     0,     0,   409,   178,   179,     0,   180,
       0,   181,   182,   183,     0,   185,   186,   187,     0,   188,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
       0,   194,   195,   196,   197,   198,   199,     0,   201,   202,
     203,     0,     0,   205,   206,   207,   208,     0,     0,     0,
       0,     0,     0,   211,     0,     0,     0,     0,   410,   214,
       0,     0,   215,   216,     0,   217,     0,   218,     0,   219,
       0,   220,   221,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,     0,     0,     0,
       0,     0,     0,   240,   241,   242,   243,     0,     0,     0,
       0,   246,     0,   247,   411,     0,   250,   251,   252,   253,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,   266,     0,     0,     0,     0,   267,
       0,     0,   268,   412,     0,     2,     3,   271,     4,     0,
       5,     6,   389,   273,     0,     0,     0,     0,   390,    11,
     391,    13,    14,    15,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,   392,    21,     0,
      22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
       0,     0,     0,     0,    31,    32,    33,    34,    35,    36,
       0,     0,    37,     0,     0,   393,    39,    40,     0,     0,
      41,     0,     0,   394,    43,    44,     0,     0,   395,    47,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,    52,     0,   396,     0,    54,    55,     0,
       0,    56,    57,     0,     0,     0,   397,    60,    61,     0,
      62,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,    68,   398,    70,
      71,     0,   399,     0,     0,    73,    74,    75,    76,    77,
       0,     0,    78,     0,   400,   401,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,    83,    84,    85,    86,
      87,     0,     0,     0,     0,    89,     0,    91,     0,     0,
       0,    92,    93,    94,    95,    96,     0,     0,     0,    99,
       0,   402,     0,     0,   102,     0,     0,   103,     0,     0,
     403,   105,   106,   107,   108,   109,   110,   111,   112,     0,
       0,     0,   113,     0,   114,  5351,   116,     0,     0,     0,
     117,     0,     0,     0,   404,     0,   405,   120,   121,   122,
       0,   123,     0,     0,     0,     0,   124,   406,     0,     0,
       0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
     143,   144,   145,   146,   147,     0,     0,     0,     0,   150,
     151,   152,   153,   154,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   407,   162,   163,   164,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,   408,
       0,     0,   172,   173,     0,   174,   175,     0,   176,     0,
       0,   409,   178,   179,     0,   180,     0,   181,   182,   183,
       0,   185,   186,   187,     0,   188,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,   196,
     197,   198,   199,     0,   201,   202,   203,     0,     0,   205,
     206,   207,   208,     0,     0,     0,     0,     0,     0,   211,
       0,     0,     0,     0,   410,   214,     0,     0,   215,   216,
       0,   217,     0,   218,     0,   219,     0,   220,   221,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,     0,     0,     0,     0,     0,     0,   240,
     241,   242,   243,     0,     0,     0,     0,   246,     0,   247,
     411,     0,   250,   251,   252,   253,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
     266,     0,     0,     0,     0,   267,     0,     0,   268,   412,
       0,     2,     3,   271,     4,     0,     5,     6,   389,   273,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,     0,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,     0,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     0,     0,   271,
    1522,     2,     3,     0,     4,   273,     5,     6,   389,     0,
       0,     0,     0,     0,   390,    11,   391,    13,    14,    15,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,   392,    21,     0,    22,    23,    24,    25,
       0,    26,    27,    28,    29,    30,     0,     0,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,    37,     0,
       0,   393,    39,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,    47,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,    52,
       0,   396,     0,    54,    55,     0,     0,    56,    57,     0,
       0,     0,   397,    60,    61,     0,    62,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,    68,   398,    70,    71,     0,   399,     0,
       0,    73,    74,    75,    76,    77,     0,     0,    78,     0,
     400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    83,    84,    85,    86,    87,     0,     0,     0,
       0,    89,     0,    91,     0,     0,     0,    92,    93,    94,
      95,    96,     0,     0,     0,    99,     0,   402,     0,     0,
     102,     0,     0,   103,     0,     0,   403,   105,   106,   107,
     108,   109,   110,   111,   112,     0,     0,     0,   113,     0,
     114,   115,   116,     0,     0,     0,   117,     0,     0,     0,
     404,     0,   405,   120,   121,   122,     0,   123,     0,     0,
       0,     0,     0,   406,     0,     0,     0,     0,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,   143,   144,   145,   146,
     147,     0,     0,     0,     0,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   407,   162,   163,   164,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,   408,     0,     0,   172,   173,
       0,   174,   175,     0,   176,     0,     0,   409,   178,   179,
       0,   180,     0,   181,   182,   183,     0,   185,   186,   187,
       0,   188,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,     0,   194,   195,   196,   197,   198,   199,     0,
     201,   202,   203,     0,     0,   205,   206,   207,   208,     0,
       0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     410,   214,     0,     0,   215,     0,     0,   217,     0,   218,
       0,   219,     0,   220,   221,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,   228,     0,     0,
    3517,     0,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,   243,     0,
       0,     0,     0,   246,     0,   247,   411,     0,   250,   251,
     252,   253,   254,   255,   256,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   266,     0,     0,     0,
       0,   267,     0,     0,   268,   412,     0,     2,     3,   271,
       4,     0,     5,     6,   389,   273,     0,     0,     0,     0,
     390,    11,   391,    13,    14,    15,     0,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,   392,
      21,     0,    22,    23,    24,    25,     0,    26,    27,    28,
      29,    30,     0,     0,     0,     0,    31,    32,    33,    34,
      35,    36,     0,     0,    37,     0,     0,   393,    39,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,    47,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,    52,     0,   396,     0,    54,
      55,     0,     0,    56,    57,     0,     0,     0,   397,    60,
      61,     0,    62,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,    68,
     398,    70,    71,     0,   399,     0,     0,    73,    74,    75,
      76,    77,     0,     0,    78,     0,   400,   401,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,    83,    84,
      85,    86,    87,     0,     0,     0,     0,    89,     0,    91,
       0,     0,     0,    92,    93,    94,    95,    96,     0,     0,
       0,    99,     0,   402,     0,     0,   102,     0,     0,   103,
       0,     0,   403,   105,   106,   107,   108,   109,   110,   111,
     112,     0,     0,     0,   113,     0,   114,   115,   116,     0,
       0,     0,   117,     0,     0,     0,   404,     0,   405,   120,
     121,   122,     0,   123,     0,     0,     0,     0,     0,   406,
       0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,   143,   144,   145,   146,   147,     0,     0,     0,
       0,   150,   151,   152,   153,   154,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   407,   162,   163,
     164,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,   408,     0,     0,   172,   173,     0,   174,   175,     0,
     176,     0,     0,   409,   178,   179,     0,   180,     0,   181,
     182,   183,     0,   185,   186,   187,     0,   188,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,   196,   197,   198,   199,     0,   201,   202,   203,     0,
       0,   205,   206,   207,   208,     0,     0,     0,     0,     0,
       0,   211,     0,     0,     0,     0,   410,   214,     0,     0,
     215,     0,     0,   217,     0,   218,     0,   219,     0,   220,
     221,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,   243,     0,     0,     0,     0,   246,
       0,   247,   411,     0,   250,   251,   252,   253,   254,   255,
     256,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     4,     0,     5,     0,     7,     0,     0,
       8,   265,   266,   390,     0,    12,     0,   267,     0,     0,
     268,   412,     0,     0,     0,   271,     0,     0,     0,     0,
     579,   273,  1735,   710,     0,   711,    23,     0,    25,     0,
       0,    27,   712,   713,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     393,     0,    40,     0,     0,    41,     0,     0,   394,    43,
      44,    45,     0,   395,     0,     0,     0,     0,     0,    49,
       0,     0,     0,     0,     0,     0,    51,     0,   714,     0,
    1019,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1736,     0,     0,     0,     0,     0,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,     0,    67,
       0,     0,     0,  1737,    70,    71,     0,   399,     0,     0,
       0,     0,     0,     0,    77,     0,     0,    78,     0,  1738,
    1739,     0,     0,     0,     0,     0,     0,     0,     0,    82,
       0,     0,     0,     0,    86,    87,     0,     0,     0,    88,
     719,    90,     0,     0,     0,     0,    92,     0,    94,     0,
      96,     0,     0,     0,     0,   100,   720,     0,     0,     0,
       0,     0,   103,     0,     0,  1740,     0,     0,     0,   108,
       0,     0,     0,     0,     0,     0,     0,   113,     0,   114,
       0,   116,     0,     0,     0,     0,     0,     0,     0,  1741,
       0,  1742,   724,   725,   122,     0,   123,     0,     0,     0,
       0,     0,  1743,   126,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   128,     0,   129,     0,     0,
       0,     0,   131,   132,   133,     0,     0,     0,     0,     0,
     135,     0,     0,     0,   138,     0,     0,     0,   139,   140,
       0,   141,     0,   142,     0,     0,   144,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   153,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,     0,     0,
     407,   162,   163,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   727,     0,     0,   177,   178,   179,     0,
       0,     0,     0,   728,   183,     0,   185,   186,     0,     0,
     188,     0,     0,     0,     0,     0,   729,     0,     0,     0,
       0,     0,     0,   195,     0,     0,   198,   730,     0,     0,
       0,     0,     0,     0,     0,   206,     0,   208,     0,     0,
       0,   210,     0,     0,     0,     0,     0,   212,     0,  1744,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   220,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   224,   225,   226,   372,     0,     0,   229,     0,
       4,     0,     5,     0,   389,     0,   233,   234,     0,     0,
     390,     0,   391,     0,   240,   241,   242,     0,   244,     0,
       0,     0,   246,     0,   247,  1745,     0,     0,     0,   709,
     710,     0,   711,    23,     0,    25,     0,     0,    27,   712,
     713,    30,   257,   258,   259,   260,   261,   262,   263,   264,
       0,     0,     0,     0,     0,     0,     0,   393,     0,    40,
     267,     0,    41,   733,  1746,   394,    43,    44,   271,     0,
     395,     0,     0,     0,   273,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,   714,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   715,     0,
       0,     0,     0,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,     0,    67,     0,     0,     0,
     716,    70,    71,     0,   399,     0,     0,     0,     0,     0,
       0,    77,     0,     0,    78,     0,   717,   718,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,    86,    87,     0,     0,     0,     0,   719,     0,     0,
       0,     0,     0,    92,     0,    94,     0,    96,     0,     0,
       0,     0,     0,   720,     0,     0,     0,     0,     0,   103,
       0,     0,   721,     0,     0,     0,   108,     0,     0,     0,
       0,     0,     0,     0,   113,     0,   114,     0,   116,     0,
       0,     0,     0,     0,     0,     0,   722,     0,   723,   724,
     725,   122,     0,   123,     0,     0,     0,     0,     0,   726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,     0,     0,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,     0,   144,     0,     0,     0,   148,   149,     0,
       0,     0,     0,     0,   153,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,     0,     0,   407,   162,   163,
       0,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     727,     0,     0,   409,   178,   179,     0,     0,     0,     0,
     728,   183,     0,   185,   186,     0,     0,   188,     0,     0,
       0,     0,     0,   729,     0,     0,     0,     0,     0,     0,
     195,     0,     0,   198,   730,  1305,     0,     0,     0,     0,
       0,     0,   206,     0,   208,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   731,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,     0,     0,     0,     0,   231,     0,   595,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,     0,     0,     0,   245,     0,   246,
    1306,   247,  4542,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     4,  1225,     5,     0,   389,     0,     0,
       0,     0,     0,   390,     0,   391,     0,   267,     0,     0,
     733,   734,     0,     0,     0,   271,     0,     0,     0,   272,
       0,   273,   709,   710,     0,   711,    23,     0,    25,     0,
       0,    27,   712,   713,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     393,     0,    40,     0,     0,    41,     0,     0,   394,    43,
      44,     0,     0,   395,     0,     0,     0,     0,     0,    49,
       0,     0,     0,     0,     0,     0,    51,     0,   714,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   715,     0,     0,     0,     0,     0,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,     0,    67,
       0,     0,     0,   716,    70,    71,  2576,   399,     0,     0,
       0,     0,     0,     0,    77,     0,  1227,    78,     0,   717,
     718,     0,     0,     0,     0,     0,     0,     0,     0,    82,
       0,     0,     0,     0,    86,    87,     0,     0,     0,     0,
     719,     0,     0,     0,     0,     0,    92,     0,    94,     0,
      96,     0,     0,     0,     0,     0,  1228,     0,     0,     0,
       0,     0,   103,     0,     0,   721,     0,     0,     0,   108,
       0,     0,     0,     0,     0,     0,     0,   113,     0,   114,
       0,   116,     0,     0,     0,     0,     0,     0,     0,   722,
       0,   723,   724,  1229,   122,     0,   123,     0,     0,     0,
       0,     0,   726,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1230,     0,     0,     0,     0,
       0,     0,  1231,   132,   133,     0,     0,     0,     0,     0,
     135,     0,     0,     0,   138,     0,     0,     0,   139,   140,
       0,   141,     0,   142,     0,     0,   144,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   153,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,     0,     0,
     407,   162,   163,     0,     0,   166,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   727,     0,     0,   409,   178,   179,     0,
       0,  1233,     0,   728,   183,     0,   185,   186,     0,     0,
     188,     0,     0,     0,     0,     0,   729,     0,     0,     0,
       0,     0,     0,   195,     0,     0,   198,   730,     0,     0,
       0,     0,     0,     0,     0,   206,     0,  1234,     0,     0,
    1235,     0,     0,     0,     0,     0,     0,     0,     0,   731,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   220,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   224,   225,   226,   372,     0,     0,     0,     0,
       4,  1225,     5,     0,   389,     0,   233,   234,     0,     0,
     390,     0,   391,     0,   240,   241,   242,     0,     0,     0,
       0,     0,   246,     0,   247,   732,     0,     0,     0,   709,
     710,     0,   711,    23,     0,    25,     0,     0,    27,   712,
     713,    30,   257,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   393,     0,  1226,
     267,     0,    41,   733,   734,   394,    43,    44,   271,     0,
     395,     0,     0,     0,   273,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,   714,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   715,     0,
       0,     0,     0,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,     0,    67,     0,     0,     0,
     716,    70,    71,     0,   399,     0,     0,     0,     0,     0,
       0,    77,     0,  1227,    78,     0,   717,   718,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,    86,    87,     0,     0,     0,     0,   719,     0,     0,
       0,     0,     0,    92,     0,    94,     0,    96,     0,     0,
       0,     0,     0,  1228,     0,     0,     0,     0,     0,   103,
       0,     0,   721,     0,     0,     0,   108,     0,     0,     0,
       0,     0,     0,     0,   113,     0,   114,     0,   116,     0,
       0,     0,     0,     0,     0,     0,   722,     0,   723,   724,
    1229,   122,     0,   123,     0,     0,     0,     0,     0,   726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1230,     0,     0,     0,     0,     0,     0,  1231,
     132,   133,     0,     0,     0,     0,     0,   135,     0,     0,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,     0,   144,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   153,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,     0,     0,   407,   162,   163,
       0,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     727,     0,     0,   409,   178,  1232,     0,     0,  1233,     0,
     728,   183,     0,   185,   186,     0,     0,   188,     0,     0,
       0,     0,     0,   729,     0,     0,     0,     0,     0,     0,
     195,     0,     0,   198,   730,     0,     0,     0,     0,     0,
       0,     0,   206,     0,  1234,     0,     0,  1235,     0,     0,
       0,     0,     0,     0,     0,     0,   731,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,     0,     0,     0,     0,     4,     0,     5,
       0,   389,     0,   233,   234,     0,     0,   390,     0,   391,
       0,   240,   241,   242,     0,     0,     0,     0,     0,   246,
       0,   247,   732,     0,     0,     0,   709,   710,     0,   711,
      23,     0,    25,     0,     0,    27,   712,   713,    30,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   393,     0,    40,   267,     0,    41,
     733,   734,   394,    43,    44,   271,     0,   395,     0,     0,
       0,   273,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,   714,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   715,     0,     0,     0,     0,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,     0,    67,     0,     0,     0,   716,    70,    71,
       0,   399,     0,     0,     0,     0,     0,     0,    77,     0,
       0,    78,     0,   717,   718,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,     0,     0,     0,    86,    87,
       0,     0,     0,     0,   719,     0,     0,     0,     0,     0,
      92,     0,    94,     0,    96,     0,     0,     0,     0,     0,
     720,     0,     0,     0,     0,     0,   103,     0,     0,   721,
       0,     0,     0,   108,     0,     0,     0,     0,     0,     0,
       0,   113,     0,   114,     0,   116,     0,     0,     0,     0,
       0,     0,     0,   722,     0,   723,   724,   725,   122,     0,
     123,     0,     0,     0,     0,     0,   726,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,     0,     0,     0,   135,     0,     0,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,     0,
     144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   153,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,     0,     0,   407,   162,   163,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   727,     0,     0,
     409,   178,   179,     0,     0,     0,     0,   728,   183,     0,
     185,   186,     0,     0,   188,     0,     0,     0,     0,     0,
     729,     0,     0,     0,     0,     0,     0,   195,     0,     0,
     198,   730,  1305,     0,     0,     0,     0,     0,     0,   206,
       0,   208,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   731,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   220,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
       0,     0,     0,     0,   231,     0,   595,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   240,   241,
     242,     0,     0,     0,   245,     0,   246,  1306,   247,  1372,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       4,  1225,     5,     0,   389,     0,     0,     0,     0,     0,
     390,     0,   391,     0,   267,     0,     0,   733,  1373,     0,
       0,     0,   271,     0,     0,     0,  1374,     0,   273,   709,
     710,     0,   711,    23,     0,    25,     0,     0,    27,   712,
     713,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   393,     0,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,     0,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,   714,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   715,     0,
       0,     0,     0,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,     0,    67,     0,     0,     0,
     716,    70,    71,     0,   399,     0,     0,     0,     0,     0,
       0,    77,     0,  1227,    78,     0,   717,   718,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,    86,    87,     0,     0,     0,     0,   719,     0,     0,
       0,     0,     0,    92,     0,    94,     0,    96,     0,     0,
       0,     0,     0,  1228,     0,     0,     0,     0,     0,   103,
       0,     0,   721,     0,     0,     0,   108,     0,     0,     0,
       0,     0,     0,     0,   113,     0,   114,     0,   116,     0,
       0,     0,     0,     0,     0,     0,   722,     0,   723,   724,
    1229,   122,     0,   123,     0,     0,     0,     0,     0,   726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1230,     0,     0,     0,     0,     0,     0,  1231,
     132,   133,     0,     0,     0,     0,     0,   135,     0,     0,
       0,   138,     0,     0,     0,   139,   140,     0,  4191,     0,
     142,     0,     0,   144,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   153,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,     0,     0,   407,   162,   163,
       0,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     727,     0,     0,   409,   178,   179,     0,     0,  1233,     0,
     728,   183,     0,   185,   186,     0,     0,   188,     0,     0,
       0,     0,     0,   729,     0,     0,     0,     0,     0,     0,
     195,     0,     0,   198,   730,     0,     0,     0,     0,     0,
       0,     0,   206,     0,  1234,     0,     0,  1235,     0,     0,
       0,     0,     0,     0,     0,     0,   731,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,     0,     0,     0,     0,     4,     0,     5,
       0,   389,     0,   233,   234,     0,     0,   390,     0,   391,
       0,   240,   241,   242,     0,     0,     0,     0,     0,   246,
       0,   247,   732,     0,     0,     0,   709,   710,     0,   711,
      23,     0,    25,     0,     0,    27,   712,   713,    30,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   393,     0,    40,   267,     0,    41,
     733,   734,   394,    43,    44,   271,     0,   395,     0,     0,
       0,   273,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,   714,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   715,     0,     0,     0,     0,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,     0,    67,     0,     0,     0,   716,    70,    71,
       0,   399,     0,     0,     0,     0,     0,     0,    77,     0,
       0,    78,     0,   717,   718,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,     0,     0,     0,    86,    87,
       0,     0,     0,     0,   719,     0,     0,     0,     0,     0,
      92,     0,    94,     0,    96,     0,     0,     0,     0,     0,
     720,     0,     0,     0,     0,     0,   103,     0,     0,   721,
       0,     0,     0,   108,     0,     0,     0,     0,     0,     0,
       0,   113,     0,   114,     0,   116,     0,     0,     0,     0,
       0,     0,     0,   722,     0,   723,   724,   725,   122,     0,
     123,     0,     0,     0,     0,     0,   726,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,     0,     0,     0,   135,     0,     0,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,     0,
     144,     0,     0,     0,   148,   149,     0,     0,     0,     0,
       0,   153,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,     0,     0,   407,   162,   163,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   727,     0,     0,
     409,   178,   179,     0,     0,     0,     0,   728,   183,     0,
     185,   186,     0,     0,   188,     0,     0,     0,     0,     0,
     729,     0,     0,     0,     0,     0,     0,   195,     0,     0,
     198,   730,     0,     0,     0,     0,     0,     0,     0,   206,
       0,   208,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   731,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   220,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
       0,     0,     0,     0,   231,     0,     0,     0,     0,     0,
     233,   234,     0,     0,     0,     0,     0,     0,   240,   241,
     242,     0,     0,     0,   245,     0,   246,     0,   247,  1062,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       4,     0,     5,     0,   389,     0,     0,     0,     0,     0,
     390,     0,   391,     0,   267,     0,     0,   733,  1063,     0,
       0,     0,   271,     0,     0,     0,   272,     0,   273,   709,
     710,     0,   711,    23,     0,    25,     0,     0,    27,   712,
     713,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   393,     0,    40,
       0,     0,    41,     0,     0,   394,    43,    44,     0,     0,
     395,     0,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,   714,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   715,     0,
       0,     0,     0,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,     0,    67,     0,     0,     0,
     716,    70,    71,     0,   399,     0,     0,     0,     0,     0,
       0,    77,     0,     0,    78,     0,   717,   718,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,    86,    87,     0,     0,     0,     0,   719,     0,     0,
       0,     0,     0,    92,     0,    94,     0,    96,     0,     0,
       0,     0,     0,   720,     0,     0,     0,     0,     0,   103,
       0,     0,   721,     0,     0,     0,   108,     0,     0,     0,
       0,     0,     0,     0,   113,     0,   114,     0,   116,     0,
       0,     0,     0,     0,     0,     0,   722,     0,   723,   724,
     725,   122,     0,   123,     0,     0,     0,     0,     0,   726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,     0,     0,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,     0,   144,     0,     0,     0,   148,   149,     0,
       0,     0,     0,     0,   153,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,     0,     0,   407,   162,   163,
       0,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     727,     0,     0,   409,   178,   179,     0,     0,     0,     0,
     728,   183,     0,   185,   186,     0,     0,   188,     0,     0,
       0,     0,     0,   729,     0,     0,     0,     0,     0,     0,
     195,     0,     0,   198,   730,     0,     0,     0,     0,     0,
       0,     0,   206,     0,   208,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   731,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,     0,     0,     0,   245,     0,   246,
       0,   247,  1062,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     4,     0,     5,     0,   389,     0,     0,
       0,     0,     0,   390,     0,   391,     0,   267,     0,     0,
     733,   734,     0,     0,     0,   271,     0,     0,     0,   272,
       0,   273,   709,   710,     0,   711,    23,     0,    25,     0,
       0,    27,   712,   713,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     393,     0,    40,     0,     0,    41,     0,     0,   394,    43,
      44,     0,     0,   395,     0,     0,     0,     0,     0,    49,
       0,     0,     0,     0,     0,     0,    51,     0,   714,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   715,     0,     0,     0,     0,     0,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,     0,    67,
       0,     0,     0,   716,    70,    71,     0,   399,     0,     0,
       0,     0,     0,     0,    77,     0,     0,    78,     0,   717,
     718,     0,     0,     0,     0,     0,     0,     0,     0,    82,
       0,     0,     0,     0,    86,    87,     0,     0,     0,     0,
     719,     0,     0,     0,     0,     0,    92,     0,    94,     0,
      96,     0,     0,     0,     0,     0,   720,     0,     0,     0,
       0,     0,   103,     0,     0,   721,     0,     0,     0,   108,
       0,     0,     0,     0,     0,     0,     0,   113,     0,   114,
       0,   116,     0,     0,     0,     0,     0,     0,     0,   722,
       0,   723,   724,   725,   122,     0,   123,     0,     0,     0,
       0,     0,   726,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,     0,     0,     0,
     135,     0,     0,     0,   138,     0,     0,     0,   139,   140,
       0,   141,     0,   142,     0,     0,   144,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   153,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,     0,     0,
     407,   162,   163,     0,     0,   166,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   727,     0,     0,   409,   178,   179,     0,
       0,     0,     0,   728,   183,     0,   185,   186,     0,     0,
     188,     0,     0,     0,     0,     0,   729,     0,     0,     0,
       0,     0,     0,   195,     0,     0,   198,   730,     0,     0,
       0,     0,     0,     0,     0,   206,     0,   208,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   731,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   220,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   224,   225,   226,   372,     0,     0,     0,     0,
       4,     0,     5,  1168,   389,     0,   233,   234,     0,     0,
     390,     0,   391,     0,   240,   241,   242,     0,     0,  1169,
       0,     0,   246,     0,   247,   732,     0,     0,     0,   709,
     710,     0,   711,    23,     0,    25,     0,     0,    27,   712,
     713,    30,   257,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   393,     0,    40,
     267,     0,    41,   733,   734,   394,    43,    44,   271,  1170,
     395,     0,     0,     0,   273,     0,    49,     0,     0,     0,
       0,     0,     0,    51,     0,   714,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   715,     0,
       0,     0,     0,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,     0,    67,     0,     0,     0,
     716,    70,    71,     0,   399,     0,     0,     0,     0,     0,
       0,    77,     0,     0,    78,     0,   717,   718,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,    86,    87,     0,     0,     0,     0,   719,     0,     0,
       0,     0,     0,    92,     0,    94,     0,    96,     0,     0,
       0,     0,     0,   720,     0,     0,     0,     0,     0,   103,
       0,     0,   721,     0,     0,     0,   108,     0,     0,     0,
       0,     0,     0,     0,   113,     0,   114,     0,   116,     0,
       0,     0,     0,     0,     0,     0,   722,     0,   723,   724,
     725,   122,     0,   123,     0,     0,     0,     0,     0,   726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,     0,     0,     0,   135,     0,     0,
       0,   138,     0,     0,     0,   139,   140,     0,   141,     0,
     142,     0,     0,   144,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   153,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,     0,     0,   407,   162,   163,
       0,     0,   166,     0,     0,     0,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     727,     0,     0,   409,   178,   179,     0,     0,     0,     0,
     728,   183,     0,   185,   186,     0,     0,   188,     0,     0,
       0,     0,     0,   729,     0,     0,     0,     0,     0,     0,
     195,     0,     0,   198,   730,  1305,     0,     0,     0,     0,
       0,     0,   206,     0,   208,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   731,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     225,   226,   372,     0,     0,     0,     0,     0,     0,   595,
       0,     0,     0,   233,   234,     0,     0,     0,     0,     0,
       0,   240,   241,   242,     0,     0,     0,     0,     0,   246,
    1306,   247,  1372,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,     5,     0,   389,   257,
       0,     0,     0,     0,   390,     0,   391,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
     733,   734,     0,   709,   710,   271,   711,    23,     0,    25,
       0,   273,    27,   712,   713,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   393,     0,    40,     0,     0,    41,     0,     0,   394,
      43,    44,     0,     0,   395,     0,     0,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,   714,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   715,     0,     0,     0,     0,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,     0,
      67,     0,     0,     0,   716,    70,    71,     0,   399,     0,
       0,     0,     0,     0,     0,    77,     0,     0,    78,     0,
     717,   718,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,     0,     0,     0,    86,    87,     0,     0,     0,
       0,   719,     0,     0,     0,     0,     0,    92,     0,    94,
       0,    96,     0,     0,     0,     0,     0,   720,     0,     0,
       0,     0,     0,   103,     0,     0,   721,     0,     0,     0,
     108,     0,     0,     0,     0,     0,     0,     0,   113,     0,
     114,     0,   116,     0,     0,     0,     0,     0,     0,     0,
     722,     0,   723,   724,   725,   122,     0,   123,     0,     0,
       0,     0,     0,   726,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,     0,     0,     0,   138,     0,     0,     0,   139,
     140,     0,   141,     0,   142,     0,     0,   144,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   153,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,     0,
       0,   407,   162,   163,     0,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   727,     0,     0,   409,   178,   179,
       0,     0,     0,     0,   728,   183,     0,   185,   186,     0,
       0,   188,     0,     0,     0,     0,     0,   729,     0,     0,
       0,     0,     0,     0,   195,     0,     0,   198,   730,     0,
       0,     0,     0,     0,     0,     0,   206,     0,   208,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     731,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   220,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,     0,     0,     0,
       0,   231,     0,     0,     0,     0,     0,   233,   234,     0,
       0,     0,     0,     0,     0,   240,   241,   242,     0,     0,
       0,   245,     0,   246,     0,   247,   732,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     4,     0,     5,
       0,   389,     0,     0,     0,     0,     0,   390,     0,   391,
       0,   267,     0,     0,   733,   734,     0,     0,     0,   271,
       0,     0,     0,  1374,     0,   273,   709,   710,     0,   711,
      23,     0,    25,     0,     0,    27,   712,   713,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   393,     0,    40,     0,     0,    41,
       0,     0,   394,    43,    44,     0,     0,   395,     0,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      51,     0,   714,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   715,     0,     0,     0,     0,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,     0,    67,     0,     0,     0,   716,    70,    71,
       0,   399,     0,     0,     0,     0,     0,     0,    77,     0,
       0,    78,     0,   717,   718,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,     0,     0,     0,    86,    87,
       0,     0,     0,     0,   719,     0,     0,     0,     0,     0,
      92,     0,    94,     0,    96,     0,     0,     0,     0,     0,
     720,     0,     0,     0,     0,     0,   103,     0,     0,   721,
       0,     0,     0,   108,     0,     0,     0,     0,     0,     0,
       0,   113,     0,   114,     0,   116,     0,     0,     0,     0,
       0,     0,     0,   722,     0,   723,   724,   725,   122,     0,
     123,     0,     0,     0,     0,     0,   726,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,     0,     0,     0,   135,     0,     0,     0,   138,     0,
       0,     0,   139,   140,     0,   141,     0,   142,     0,     0,
     144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   153,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,     0,     0,   407,   162,   163,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   727,     0,     0,
     409,   178,   179,     0,     0,     0,     0,   728,   183,     0,
     185,   186,     0,     0,   188,     0,     0,     0,     0,     0,
     729,     0,     0,     0,     0,     0,     0,   195,     0,     0,
     198,   730,     0,     0,     0,     0,     0,     0,     0,   206,
       0,   208,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   731,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   220,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   225,   226,   372,
       0,     0,     0,     0,     4,     0,     5,     0,   389,     0,
     233,   234,     0,     0,   390,     0,   391,     0,   240,   241,
     242,     0,     0,     0,     0,     0,   246,     0,   247,   732,
       0,     0,     0,   709,   710,     0,   711,    23,     0,    25,
       0,     0,    27,   712,   713,    30,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1485,     0,
       0,   393,     0,    40,   267,     0,    41,   733,   734,   394,
      43,    44,   271,     0,   395,     0,     0,     0,   273,     0,
      49,     0,     0,     0,     0,     0,     0,    51,     0,   714,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   715,     0,     0,     0,     0,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,     0,
      67,     0,     0,     0,   716,  4262,    71,     0,   399,     0,
       0,     0,     0,     0,     0,    77,     0,     0,    78,     0,
     717,   718,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,     0,     0,     0,    86,    87,     0,     0,     0,
       0,   719,     0,     0,     0,     0,     0,    92,     0,    94,
       0,    96,     0,     0,     0,     0,     0,   720,     0,     0,
       0,     0,     0,   103,     0,     0,   721,     0,     0,     0,
     108,     0,     0,     0,     0,     0,     0,     0,   113,     0,
     114,     0,   116,     0,     0,     0,     0,     0,     0,     0,
     722,     0,   723,   724,   725,   122,     0,   123,     0,     0,
       0,     0,     0,   726,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,     0,     0,
       0,   135,     0,     0,     0,   138,     0,  4263,     0,   139,
     140,     0,   141,     0,   142,     0,     0,   144,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   153,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,     0,
       0,   407,   162,   163,     0,     0,   166,     0,     0,     0,
     167,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   727,     0,     0,   409,   178,   179,
       0,     0,     0,     0,   728,   183,     0,   185,   186,     0,
       0,   188,     0,     0,     0,     0,     0,   729,     0,     0,
       0,     0,     0,     0,   195,     0,     0,   198,   730,     0,
       0,     0,     0,     0,     0,     0,   206,     0,   208,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     731,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   220,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   224,   225,   226,   372,     0,     0,     0,
       0,     4,     0,     5,     0,   389,     0,   233,   234,     0,
       0,   390,     0,   391,     0,   240,   241,   242,     0,     0,
       0,     0,     0,   246,     0,   247,   732,     0,     0,     0,
     709,   710,     0,   711,    23,     0,    25,     0,     0,    27,
     712,   713,    30,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   393,     0,
      40,   267,     0,    41,   733,   734,   394,    43,    44,   271,
       0,   395,     0,     0,     0,   273,     0,    49,     0,     0,
       0,     0,     0,     0,    51,     0,   714,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   715,
       0,     0,     0,     0,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,     0,    67,     0,     0,
       0,   716,    70,    71,     0,   399,     0,     0,     0,     0,
       0,     0,    77,     0,     0,    78,     0,   717,   718,     0,
       0,     0,     0,     0,     0,     0,     0,    82,     0,     0,
       0,     0,    86,    87,     0,     0,     0,     0,   719,     0,
       0,     0,     0,     0,    92,     0,    94,     0,    96,     0,
       0,     0,     0,     0,   720,     0,     0,     0,     0,     0,
     103,     0,     0,   721,     0,     0,     0,   108,     0,     0,
       0,     0,     0,     0,     0,   113,     0,   114,     0,   116,
       0,     0,     0,     0,     0,     0,     0,   722,     0,   723,
     724,   725,   122,     0,   123,     0,     0,     0,     0,     0,
     726,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,     0,     0,     0,     0,     0,   135,     0,
       0,     0,   138,     0,     0,     0,   139,   140,     0,   141,
       0,   142,     0,     0,   144,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   153,     0,     0,     0,     0,
       0,     0,     0,   156,   157,   158,     0,     0,   407,   162,
     163,     0,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   727,     0,     0,   409,   178,   179,     0,     0,     0,
       0,   728,   183,     0,   185,   186,     0,     0,   188,     0,
       0,     0,     0,     0,   729,     0,     0,     0,     0,     0,
       0,   195,     0,     0,   198,   730,     0,     0,     0,     0,
       0,     0,     0,   206,     0,   208,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   731,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     220,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,   225,   226,   372,     0,     0,     0,     0,     4,     0,
       5,     0,   389,     0,   233,   234,     0,     0,   390,     0,
     391,     0,   240,   241,   242,     0,     0,     0,     0,     0,
     246,     0,   247,   732,     0,     0,     0,   709,   710,     0,
     711,    23,     0,    25,     0,     0,    27,   712,   713,    30,
     257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   393,     0,    40,   267,     0,
      41,   733,   734,   394,    43,    44,   271,     0,   395,     0,
       0,     0,   273,     0,    49,     0,     0,     0,     0,     0,
       0,    51,     0,   714,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   715,     0,     0,     0,
       0,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,     0,    67,     0,     0,     0,   716,    70,
    1036,     0,   399,     0,     0,     0,     0,     0,     0,    77,
       0,     0,    78,     0,   717,   718,     0,     0,     0,     0,
       0,     0,     0,     0,    82,     0,     0,     0,     0,    86,
      87,     0,     0,     0,     0,   719,     0,     0,     0,     0,
       0,    92,     0,    94,     0,    96,     0,     0,     0,     0,
       0,   720,     0,     0,     0,     0,     0,   103,     0,     0,
     721,     0,     0,     0,   108,     0,     0,     0,     0,     0,
       0,     0,   113,     0,   114,     0,   116,     0,     0,     0,
       0,     0,     0,     0,   722,     0,   723,   724,   725,   122,
       0,   123,     0,     0,     0,     0,     0,   726,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,     0,     0,     0,   135,     0,     0,     0,   138,
       0,     0,     0,   139,   140,     0,   141,     0,   142,     0,
       0,   144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   153,     0,     0,     0,     0,     0,     0,     0,
     156,   157,   158,     0,     0,   407,   162,   163,     0,     0,
     166,     0,     0,     0,   167,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   727,     0,
       0,   409,   178,   179,     0,     0,     0,     0,   728,   183,
       0,   185,   186,     0,     0,   188,     0,     0,     0,     0,
       0,   729,     0,     0,     0,     0,     0,     0,   195,     0,
       0,   198,   730,     0,     0,     0,     0,     0,     0,     0,
     206,     0,   208,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   731,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   220,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   225,   226,
     372,     0,     0,     0,     0,     4,     0,     5,     0,   389,
       0,   233,   234,     0,     0,   390,     0,   391,     0,   240,
     241,   242,     0,     0,     0,     0,     0,   246,     0,   247,
     732,     0,     0,     0,   709,   710,     0,   711,    23,     0,
      25,     0,     0,    27,   712,   713,    30,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   393,     0,    40,   267,     0,    41,   733,   734,
     394,    43,    44,   271,     0,   395,     0,     0,     0,   273,
       0,    49,     0,     0,     0,     0,     0,     0,    51,     0,
     714,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   715,     0,     0,     0,     0,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
       0,    67,     0,     0,     0,   716,    70,  1045,     0,   399,
       0,     0,     0,     0,     0,     0,    77,     0,     0,    78,
       0,   717,   718,     0,     0,     0,     0,     0,     0,     0,
       0,    82,     0,     0,     0,     0,    86,    87,     0,     0,
       0,     0,   719,     0,     0,     0,     0,     0,    92,     0,
      94,     0,    96,     0,     0,     0,     0,     0,   720,     0,
       0,     0,     0,     0,   103,     0,     0,   721,     0,     0,
       0,   108,     0,     0,     0,     0,     0,     0,     0,   113,
       0,   114,     0,   116,     0,     0,     0,     0,     0,     0,
       0,   722,     0,   723,   724,   725,   122,     0,   123,     0,
       0,     0,     0,     0,   726,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,     0,
       0,     0,   135,     0,     0,     0,   138,     0,     0,     0,
     139,   140,     0,   141,     0,   142,     0,     0,   144,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   153,
       0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
       0,     0,   407,   162,   163,     0,     0,   166,     0,     0,
       0,   167,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   727,     0,     0,   409,   178,
     179,     0,     0,     0,     0,   728,   183,     0,   185,   186,
       0,     0,   188,     0,     0,     0,     0,     0,   729,     0,
       0,     0,     0,     0,     0,   195,     0,     0,   198,   730,
       0,     0,     0,     0,     0,     0,     0,   206,     0,   208,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   731,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   220,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   224,   225,   226,   372,     0,     0,
       0,     0,     4,     0,     5,     0,   389,     0,   233,   234,
       0,     0,   390,     0,   391,     0,   240,   241,   242,     0,
       0,     0,     0,     0,   246,     0,   247,   732,     0,     0,
       0,   709,   710,     0,   711,    23,     0,    25,     0,     0,
      27,   712,   713,    30,   257,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   393,
       0,    40,   267,     0,    41,   733,   734,   394,    43,    44,
     271,     0,   395,     0,     0,     0,   273,     0,    49,     0,
       0,     0,     0,     0,     0,    51,     0,   714,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     715,     0,     0,     0,     0,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,     0,    67,     0,
       0,     0,   716,    70,  1450,     0,   399,     0,     0,     0,
       0,     0,     0,    77,     0,     0,    78,     0,   717,   718,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
       0,     0,     0,    86,    87,     0,     0,     0,     0,   719,
       0,     0,     0,     0,     0,    92,     0,    94,     0,    96,
       0,     0,     0,     0,     0,   720,     0,     0,     0,     0,
       0,   103,     0,     0,   721,     0,     0,     0,   108,     0,
       0,     0,     0,     0,     0,     0,   113,     0,   114,     0,
     116,     0,     0,     0,     0,     0,     0,     0,   722,     0,
     723,   724,   725,   122,     0,   123,     0,     0,     0,     0,
       0,   726,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,     0,     0,     0,   135,
       0,     0,     0,   138,     0,     0,     0,   139,   140,     0,
     141,     0,   142,     0,     0,   144,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   153,     0,     0,     0,
       0,     0,     0,     0,   156,   157,   158,     0,     0,   407,
     162,   163,     0,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   727,     0,     0,   409,   178,   179,     0,     0,
       0,     0,   728,   183,     0,   185,   186,     0,     0,   188,
       0,     0,     0,     0,     0,   729,     0,     0,     0,     0,
       0,     0,   195,     0,     0,   198,   730,     0,     0,     0,
       0,     0,     0,     0,   206,     0,   208,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   731,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   225,   226,   372,     0,     0,     0,     0,     4,
       0,     5,     0,   389,     0,   233,   234,     0,     0,   390,
       0,   391,     0,   240,   241,   242,     0,     0,     0,     0,
       0,   246,     0,   247,   732,     0,     0,     0,   709,   710,
       0,   711,    23,     0,    25,     0,     0,    27,   712,   713,
      30,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   393,     0,    40,   267,
       0,    41,   733,   734,   394,    43,    44,   271,     0,   395,
       0,     0,     0,   273,     0,    49,     0,     0,     0,     0,
       0,     0,    51,     0,   714,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   715,     0,     0,
       0,     0,     0,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,     0,    67,     0,     0,     0,   716,
      70,    71,     0,   399,     0,     0,     0,     0,     0,     0,
      77,     0,     0,    78,     0,   717,   718,     0,     0,     0,
       0,     0,     0,     0,     0,    82,     0,     0,     0,     0,
      86,    87,     0,     0,     0,     0,   719,     0,     0,     0,
       0,     0,    92,     0,    94,     0,    96,     0,     0,     0,
       0,     0,   720,     0,     0,     0,     0,     0,   103,     0,
       0,   721,     0,     0,     0,   108,     0,     0,     0,     0,
       0,     0,     0,   113,     0,   114,     0,   116,     0,     0,
       0,     0,     0,     0,     0,   722,     0,   723,   724,   725,
     122,     0,   123,     0,     0,     0,     0,     0,   726,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,     0,     0,     0,   135,     0,     0,     0,
     138,     0,     0,     0,   139,   140,     0,   141,     0,   142,
       0,     0,   144,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   153,     0,     0,     0,     0,     0,     0,
       0,   156,   157,   158,     0,     0,   407,   162,   163,     0,
       0,   166,     0,     0,     0,   167,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   727,
       0,     0,   409,   178,   179,     0,     0,     0,     0,   728,
     183,     0,   185,   186,     0,     0,   188,     0,     0,     0,
       0,     0,   729,     0,     0,     0,     0,     0,     0,   195,
       0,     0,   198,   730,     0,     0,     0,     0,     0,     0,
       0,   206,     0,   208,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   731,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   220,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   224,   225,
     226,   372,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   233,   234,     0,     0,     0,     0,     0,     0,
     240,   241,   242,     0,     0,     0,     0,     0,   246,     0,
     247,   732,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   257,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   267,     0,     0,   733,
    1063,     0,     0,     0,   271,     0,     0,     0,     0,     0,
     273
};

static const yytype_int16 yycheck[] =
{
       0,   530,   531,   532,   533,   534,   535,   536,   955,     9,
     286,  1786,  1635,  1047,  1561,   675,   318,   962,    18,   438,
     680,  1311,   844,   656,  1865,  1156,   782,   434,   656,  2030,
     155,   333,   552,   335,  2081,  2082,  1319,   339,  2599,  2619,
    2620,  1093,  2604,  2556,  1750,  1751,  3479,  2870,    48,   456,
      50,   287,   288,   306,   288,  1874,   306,  2400,   577,  3494,
    2403,  1114,   831,  1116,  2305,  1975,  2818,  2819,  2392,   546,
    2426,  2427,    72,  1761,  3354,  2844,  3356,   268,  3358,     0,
    3019,   573,  2539,  1318,  1319,   567,  2543,  1121,  1122,  1123,
    1124,  2447,  1096,  2449,    18,  3019,  2452,    97,   223,   839,
     840,  3729,   927,  3602,   844,   530,   531,   532,   533,   534,
     535,   536,  3918,  3996,   504,   505,  3603,  1718,  1719,  1720,
    1721,  1722,  1723,  1724,   124,  1615,   629,   517,  1618,    50,
     537,  3729,  3829,   540,  1622,  3988,  1624,  1559,  3993,   529,
     629,  4518,  1619,  1620,  2091,  2092,  3723,  2384,  2661,   124,
    4390,  4391,  4492,   868,   869,   155,  3168,  3169,  4792,  2483,
    2484,  2485,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,    22,  1541,  4791,    86,  1544,
     319,    11,    11,    17,   184,   705,  1559,    11,  3916,  3917,
      11,   673,  5053,    86,     0,    18,  4385,    62,    11,   237,
       1,    72,  1077,    25,  1079,  2152,    11,     9,   155,   235,
     124,     5,   150,  3221,  2776,    27,   216,     0,   124,   118,
     112,  5273,    86,   223,  1099,    91,   229,     9,  1103,  1104,
     114,    25,    11,    26,   240,    63,    11,   376,   104,    11,
     321,   237,     9,     1,  1000,    11,   237,   309,   248,   249,
    4105,   116,   565,   152,   104,    63,   256,   139,   169,   392,
      11,   399,    39,    15,    98,   265,   266,    50,   459,   309,
     400,  1261,   171,    11,   479,   682,   223,   399,    55,   145,
     169,  5352,     0,  5440,   232,   107,   286,   392,    11,   181,
     290,   183,   399,   169,   294,  1530,   130,   392,   476,    11,
     412,    11,   186,    11,   467,  4494,   306,   408,    11,   401,
     700,   173,   256,   480,   477,   416,   182,   484,    11,   201,
     483,   155,   447,  3712,   223,   325,   134,   412,   249,   467,
     442,    11,    50,   400,   435,    11,    11,   438,   150,   477,
     399,   265,   266,   476,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,   482,  1872,    11,   477,   150,   165,    11,    11,
     207,   163,   306,   363,   364,  4009,   366,   119,   368,   290,
     370,   476,   479,   373,  5235,  5532,    86,   288,  4006,   379,
     475,    11,   232,   265,    11,   193,   412,   169,   473,   223,
     703,    11,   484,   170,    11,   476,   163,  1387,   260,   288,
    1919,   325,    11,   196,   352,   476,   412,   237,  4006,   293,
     203,   111,   288,   237,   476,   482,   237,   476,   671,    11,
     479,   421,   314,   245,   237,   425,   426,   427,   553,   429,
     430,   431,   237,  1952,   472,   435,   476,   437,   400,   439,
     440,   441,   442,   443,   444,   273,   446,   447,   573,   449,
    2138,   451,   452,   453,   392,   646,    11,   582,   237,   459,
      11,    11,   237,   588,  2305,   237,   316,  4807,   315,   368,
     278,   237,  5524,   476,   665,   340,   472,   668,   450,   302,
     467,   472,   476,  4366,  5555,  5556,   237,   187,   488,   489,
     477,   491,    11,   493,   494,   495,   496,   368,   637,   237,
     447,   450,   502,   475,   312,   371,   288,   290,   330,   509,
     510,   511,  1747,   513,   237,   380,   998,    11,   518,  2038,
     482,    11,   372,    11,   931,   237,   475,   237,   528,   237,
     530,   531,   532,   533,   237,   235,    11,   314,   538,   539,
     475,   541,   542,   543,   237,   480,   546,   547,  1004,   405,
     406,   551,   552,   553,    11,   555,  2157,   237,   558,   559,
      11,   237,   237,   563,   564,   565,   566,   567,   475,   569,
     476,   485,   697,   573,  2175,  2176,   966,   577,   486,   485,
     237,     0,   582,    11,   237,   237,   839,   840,   588,   839,
     840,   844,   374,   486,   844,   476,  3693,   736,   392,  3696,
     400,   482,   992,   993,   994,   605,   553,   237,  4491,   111,
     237,   412,  1068,   447,   306,   479,   480,   237,  5021,   619,
     237,  4810,   761,   476,   399,  4814,   573,    11,   237,   629,
    4327,    50,    11,  5247,  5268,   582,  5270,   487,   468,   468,
     476,   588,   833,  4371,   468,   237,   646,   468,  3656,  5510,
    4990,   319,   482,   653,   412,   468,   656,   657,   658,   659,
     660,   482,   662,   468,  4241,   665,   666,   480,   668,  4552,
    4553,   671,   672,   479,   476,   480,    11,   483,   678,   479,
     480,   681,   237,   683,    11,   187,   237,   237,   688,   689,
     400,   691,   692,   468,   694,   476,   468,   697,   619,   699,
      51,   701,   468,   703,   704,   705,   706,  4142,   480,   848,
     482,   469,   476,   470,   480,   473,   482,   468,   237,   553,
      11,   399,   111,   481,   412,   482,    11,   476,   117,   480,
     468,   482,   732,   733,  5137,  1866,   399,  5114,  5141,   573,
    5143,   111,   480,   237,   482,   468,   414,   237,   582,   237,
     697,   476,  3314,   104,   588,    89,   468,   757,   468,   482,
     468,  3773,   237,   763,    98,   468,  5006,   410,   480,   479,
     480,  2394,   480,   773,   482,   468,   486,   480,   421,   482,
     237,   469,   782,   408,  2157,   476,   237,   480,   468,   482,
      11,   791,   468,   468,   476,   629,  1618,   450,   187,   990,
     480,   479,  2175,  2176,   480,  4658,  1628,   482,   368,   237,
     435,   468,   475,   438,  2049,   468,   468,   187,   476,  1950,
    3057,   629,   822,   823,   824,   482,  3063,  2062,   480,  3066,
     249,  1600,   832,   833,   168,  1324,  1339,   671,   468,   839,
     840,   468,  1611,  1612,   844,   412,  4235,  2130,   468,   773,
    1339,   468,   482,   237,   477,   482,  2139,   480,   237,   468,
    1629,  1630,   482,   697,  1633,   482,   866,   867,   868,   869,
    2871,   290,   476,   482,  1614,   294,   468,   877,   878,   879,
     880,   881,   882,   883,   884,   885,   886,   887,   888,   889,
     482,   866,   867,  4392,  1033,   839,   840,   400,  1773,   391,
     844,  2136,   237,  3336,  3337,   410,   473,   475,   470,   473,
     237,   475,   480,   468,   481,   114,   421,   468,   468,   919,
     482,   921,   922,   923,   924,   925,  1065,   482,  1643,  1644,
     930,   482,   482,   933,   934,   935,   936,   937,   938,  2429,
     139,  2429,  2073,   476,  2432,  1084,   237,   480,   477,   468,
    2438,  2439,   237,  2375,  2901,   955,   485,  4763,  2435,  2436,
    2666,   480,   962,  2198,  2511,   965,    11,   967,  2333,   637,
     479,   480,  5375,  5376,   468,   467,   479,   480,   468,   671,
     468,   430,   474,   475,   476,   985,   480,   479,   988,   989,
     990,   440,   482,   468,   482,   476,  4851,    16,  4853,     7,
     111,     5,  2375,  4631,   391,  4633,   233,   482,   233,   476,
      29,   468,   239,   467,   239,   469,   237,   468,   408,   827,
     113,    25,     5,   391,   502,   482,     7,   835,   836,   419,
    1030,   482,   422,  4631,   488,  4633,   476,   845,   846,   488,
     468,   849,    25,  1319,    11,   435,   139,   480,   438,   480,
     528,   482,   392,   486,   482,   166,   180,    76,   470,  3492,
    3493,   510,  1062,   288,   368,  4564,   470,  5470,   736,  4556,
     482,  5474,   412,   476,   198,   199,   187,   480,   482,  1469,
    1470,  1081,  3960,  1473,   468,    11,   179,   474,   475,   468,
     477,     7,    73,   761,   476,   408,  2564,   475,   482,   155,
       7,  1337,   480,   482,   417,  1861,   474,   475,   476,   777,
     479,   480,  1251,   366,   476,   564,  3994,   486,  1943,   476,
     244,   955,   435,   216,  5007,   438,   379,   391,   381,   467,
     467,   139,   385,   468,   408,   479,   480,  5540,   470,   477,
     477,   468,   480,   480,   482,   480,   150,   839,   840,  1149,
     482,   425,   844,   480,   480,   163,   482,   176,   139,   450,
     467,   435,  5565,   256,   438,   258,   170,   223,   421,  1308,
     477,   179,   470,   426,   427,   482,   476,   468,   431,   408,
     848,   434,   435,   468,   482,    62,   415,  4815,   441,   442,
     443,   444,   237,   446,   479,   863,  3087,  4795,   179,   476,
     619,  2669,   309,   467,   468,  3096,   435,   436,   216,   438,
     474,   475,  1602,   477,  3105,   475,   480,  4815,   482,  2272,
     224,   467,   482,   139,   480,   244,   482,  2049,  1861,  4618,
     238,   477,   139,  1861,   480,   216,   482,   245,  1377,   116,
    2062,  1874,   495,   496,  2712,  4184,  1874,   468,   256,   467,
     408,   128,   476,  5656,  1254,  5658,   163,   238,   479,   477,
    4184,  1261,   480,   179,   245,   408,   476,  5150,  5151,   476,
     237,   467,   430,   416,  4971,  2898,  4028,   435,   467,  4048,
     438,   477,  4051,   476,   537,   538,   482,   540,   477,   432,
     309,   480,   435,  1293,   476,   438,  1296,   467,  5701,  1299,
     216,   969,   555,   480,  1304,   482,   559,   477,   561,  2599,
    4618,   237,   482,   566,   476,  1315,   324,  1317,  3831,  1319,
     482,   408,   238,   476,  1806,  1325,   413,   479,   480,   245,
     467,   238,   419,  1001,   486,   422,   476,   356,   245,  1339,
     477,   470,   361,   324,   476,   482,   433,    62,   435,   256,
    3807,   438,   360,   482,   399,   363,   476,   476,   235,  3939,
     476,  1614,   482,   240,  1614,  1033,  1619,  1620,  3278,  1619,
    1620,  2661,  1372,  2033,   196,   408,  2198,    78,    79,   360,
     476,   203,   363,   865,   476,    86,  3729,  1387,   392,   393,
     482,   447,   425,   426,   480,  3236,  1317,  1065,   475,  1789,
     486,   116,   435,   480,  2064,   438,   483,   284,   324,  1409,
    1800,  1801,  1802,   666,  1414,  1415,  1084,   324,   405,   406,
    1420,  5276,   409,   468,   677,   405,   406,   407,  1818,   682,
     683,   476,   399,   413,   479,  1560,   689,   476,  1563,   692,
     420,   480,  5086,  5087,   360,   160,   699,   363,   701,   467,
    3774,   704,   476,   360,   233,  3502,   363,  3504,  1987,   477,
     239,   479,  1462,   340,  1464,  1465,  1466,  1467,  1468,   237,
       7,  1471,  1472,   399,  1474,  1475,  1476,  1477,  1478,  1479,
    1480,   467,  1482,   233,  5316,  5317,   476,  1487,   970,   239,
    1324,   477,  5324,  2545,  1302,   412,   482,   553,   391,   475,
    5144,   468,  3125,   380,  1338,  1339,   482,   233,    11,   476,
     763,  3199,   479,   239,   475,  4904,  4905,   573,   476,   480,
    1002,   482,   480,  1523,  1524,  3013,   582,   476,  2005,  1529,
    3077,  1339,   588,  1341,   467,   476,   476,   476,   253,  3007,
     480,   482,   468,  2547,   477,  4934,  4935,  4936,  4937,   482,
     476,   475,   475,   479,  1554,   476,   480,  5412,   482,  1559,
    1560,  1561,  1987,  1563,   101,  3512,   476,  2086,  3515,   484,
    2326,  2327,   476,   629,   467,   468,  2068,   476,   391,   392,
     393,   474,   475,  1251,   477,  1975,  1976,  2877,  1978,  3830,
    1980,  1981,   479,   480,  1594,   482,  4904,  4905,   476,  1523,
    1524,  1601,   139,  2886,   476,  1529,   476,   322,   467,  1748,
     480,   391,  1559,  1560,  1614,  1559,  1563,   150,   477,  1619,
    1620,   479,   480,   482,   467,   340,  4934,  4935,  4936,  4937,
     480,  2665,   482,  1554,   477,   467,  2581,  1637,  3126,   482,
    1308,   697,   179,  1643,  1644,   477,  2699,  2882,  2701,   476,
     482,   476,   475,   480,   467,   468,   467,   476,  3433,   482,
    4538,   474,   475,  5307,   477,   380,   477,  3373,   467,   482,
    1614,   482,  2706,  2707,   467,  1619,  1620,   391,   477,   216,
    1348,   218,   467,   482,   477,  1685,  1686,   467,  1688,   482,
    3158,   224,   477,  5576,   474,   475,   476,   482,   476,  2089,
     480,   238,   482,  2443,   472,   242,   475,     0,   245,  1377,
     476,   479,   480,   482,   482,   483,   484,  1717,  1718,  1719,
    1720,  1721,  1722,  1723,  1724,  2670,  1560,   479,   480,  1563,
     482,  5011,   985,  1733,  2768,   988,   405,   406,   407,   475,
     409,   476,  2457,   476,   413,  1745,   482,   480,   472,   473,
     474,   150,  1752,   467,   468,  1755,  1756,   480,  3577,   482,
     474,   475,  2766,   477,   476,  1686,   480,  2771,   482,  1769,
    1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,  4656,   402,
    1780,   391,   476,   479,   480,   480,  1786,   324,   484,   484,
    1790,   476,   391,   392,   393,  3168,  3169,  1797,   480,  1799,
    3173,   476,   484,  1803,  1804,  1805,  3647,  1807,  1808,  2216,
    3651,  4324,   476,  1813,  5249,   480,   479,   480,   480,   484,
    1488,   484,   484,   360,   476,   224,   363,   476,   480,   408,
     480,  5475,  5476,   412,   484,   476,  1504,  3764,  3765,  3766,
    3767,  3768,  3769,   476,   467,   468,   469,   470,   471,   472,
     473,   474,   480,   391,  2130,   476,   484,   467,   391,   392,
     393,  1861,   476,  2139,   474,   475,   476,  1349,   467,   468,
     480,   480,  1872,   482,  1874,   474,   475,   150,   477,  1879,
     480,   480,   482,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
    1724,  2411,   476,   475,  5538,   398,  1315,   479,  1317,   402,
     403,   404,   475,  2395,  4228,  2957,   479,  2143,   480,  2143,
     482,   476,  2404,   480,   391,  4271,  2408,   484,   476,  1919,
    2156,   480,  1614,   482,  4267,   475,   476,  1619,  1620,   467,
     479,   480,  2424,  2425,   467,  2987,   474,   475,   476,   155,
     476,   474,   475,   476,   482,  1945,  1946,   480,   476,   482,
    3418,   224,  1952,  1953,  2958,   408,  2616,  1258,  1259,  1260,
     413,  1961,  1962,  1631,   467,   468,   469,   470,   471,   472,
     473,   474,   476,  5617,  1974,  2991,  2992,  2993,  2397,  2398,
     433,  1981,   435,   408,  2988,   438,  4419,  1987,   413,  3830,
     467,   468,   391,   392,   393,   479,   480,   474,   475,   479,
     477,  2126,  4435,   480,   480,  2005,   482,   223,   433,   480,
     435,   482,  4445,   438,   391,  5659,   479,   480,  4451,  4452,
     480,   476,   482,  1505,   391,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  1867,   408,   475,  2036,   411,   391,   480,
    1293,   482,  2181,   480,  1526,   482,   476,  2238,  2239,  2240,
     479,   480,   480,   482,   482,  5699,  2056,   431,  5702,   476,
    2060,   435,   391,   476,   438,  2065,   476,  5711,   467,   476,
    2070,  2071,  2072,   476,    16,   474,   475,   476,   476,  5514,
    1748,  2081,  2082,  2473,   483,  2387,  2086,    29,   479,   480,
     467,   482,   479,   480,  1902,  2095,   476,   474,   475,   476,
     467,   468,  2338,   480,  2338,  2927,   476,   474,   475,  4932,
     477,  3020,  3021,   391,   467,   482,  2608,   476,   391,   392,
     393,   474,   475,   476,  3579,  3580,  2126,  2517,  2518,  2519,
    2130,   480,   476,   482,    76,  1554,   476,  3372,   467,  2139,
    2855,  2856,  1810,   476,   402,   474,   475,   476,  3394,  3395,
    1632,  2151,   483,   482,  1636,   479,   480,  2157,   482,   476,
    2160,  1414,   476,   479,   480,  4006,   482,  1420,  4095,  4096,
     480,  2171,   482,   538,   539,  2175,  2176,  2177,   476,  2126,
     391,   476,  2435,  2436,   476,  2435,  2436,   476,   476,   467,
    2443,  2191,  2192,  2443,   467,  2195,   474,   475,   476,   476,
     476,   474,   475,   476,   482,   421,   476,   480,  1876,   482,
    2157,   469,   470,   471,   472,   473,   474,   476,  1637,  2219,
    5653,   477,   476,  2223,    11,   480,  1479,   482,  2175,  2176,
    1898,   447,   479,   480,   176,   482,   476,   476,  2238,  2239,
    2240,   476,  2381,     9,   531,   532,   533,   534,   535,   536,
     480,  3957,   482,  2253,   476,   476,   467,   468,  2258,  2259,
    2260,  2261,   476,   474,   475,   207,   477,  1686,   476,  4830,
       7,   482,  1754,  4597,  4598,   476,  4600,  4601,  4602,  4792,
     476,  4605,  4606,  1339,  4608,   475,  4610,  2920,  4631,   480,
    4633,   482,  2126,   476,  2294,   479,   480,  1779,   482,  2299,
     476,   476,   244,  2303,  2304,  2305,   476,   391,  2308,  3131,
     476,   479,   480,  3603,   482,  5193,  5194,   480,  2318,   482,
    4833,  2321,   479,  2157,  2324,   479,   480,   476,   482,  1811,
    3461,  3462,  3705,  5211,   476,  2335,  1755,   553,   476,  4386,
     391,  2175,  2176,   476,   476,  4272,  4273,  4274,  4275,  4276,
    4277,  4278,  4279,   476,   476,  3486,   391,   573,     7,   476,
    4793,  1780,   480,   476,   482,  5243,   582,   309,   479,   480,
    5248,   482,   588,   476,   111,  2375,   142,  2045,   476,   476,
    3981,  2873,   476,   467,  2904,  4965,   152,   480,  2196,   482,
     474,   475,   476,   130,   476,  1877,   480,  5275,   482,  2399,
    3773,  4834,   139,   150,  3872,   171,   480,  2407,   482,    16,
    2410,  2411,   479,   480,   356,   482,   467,  1899,   480,   361,
     482,   476,    29,   474,   475,   476,   391,   476,  2375,   480,
     476,  2375,   467,  3148,  2102,  2435,  2436,   476,   204,   474,
     475,   476,   179,  2443,   476,   408,  3480,   482,   411,   476,
     476,  2451,   415,  2453,   475,  2455,  2456,  2457,   480,   476,
     482,  2295,   111,   391,   476,  2157,   391,   476,   431,    76,
     412,   476,   435,   436,  3942,   438,   480,   224,   482,   216,
    3948,   697,   476,  2175,  2176,    59,   479,   480,  2627,   482,
     139,  2435,  2436,  2883,   410,   102,   262,   479,   480,  2443,
     482,   238,   467,   468,  1560,   476,   476,  1563,   245,   474,
     475,  2511,   477,  2181,  2653,  2515,  2516,   482,   476,  2187,
    2520,  2521,  2522,  2523,  2524,   479,   480,   480,   482,   482,
     179,   476,   476,  2533,  2534,  2535,   476,   476,   480,   467,
     482,   476,   467,  2351,   391,   476,   474,   475,   476,   474,
     475,   476,   480,   476,  2554,  2555,  2556,   482,  2558,   479,
     480,   327,   482,   408,  2046,  2373,   476,   216,   142,   176,
     476,  2379,   179,   476,   419,  5008,  5009,   422,   152,   477,
     425,  2581,   479,   480,   480,   482,   482,   324,   476,   238,
     435,  2591,  2592,   438,   476,   476,   245,   171,   476,  5112,
     150,  4528,  4529,   479,   480,   480,   482,   482,  3981,  2609,
    2886,   398,   476,     7,  5492,   402,   403,   404,   476,   476,
     467,  2103,   476,   360,  2624,   476,   363,   474,   475,   476,
     204,   475,   479,   477,  5067,  2635,   150,   244,  3928,  4107,
     476,   476,   408,  3293,   391,   392,   393,  5525,   479,   480,
     416,   482,  2652,   480,   480,   482,   482,  2657,  2658,   476,
     476,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,   435,
    2670,   480,   438,   482,   224,   324,  2676,  2159,  2678,  3339,
     467,   468,   469,   470,   471,   472,   473,   474,   262,   395,
    2829,  3324,  2883,  3343,   309,   480,  3324,   482,   480,   150,
     482,   308,   309,   476,   476,    42,  2188,   473,   476,   476,
     224,   360,   309,  2381,   363,   481,   480,   480,   482,   482,
     467,   487,   150,   476,  4192,  4193,  2726,   474,   475,   476,
     476,  2731,   391,   392,   393,   482,   480,   142,   482,   442,
    2865,  2160,   476,  2435,  2436,   139,   476,   152,   142,   356,
    5628,  2443,   476,   327,   361,  5268,   476,  5270,   152,   476,
    3013,  5639,   476,  3013,   101,   480,   171,   482,   480,   480,
     482,   482,   476,   224,   111,   408,  2915,   171,  3080,   480,
     413,   482,   415,   476,   476,   179,  2786,   476,  2788,   405,
     406,   407,  5305,   409,  4077,   476,   224,   413,  2937,   204,
     433,  2635,   435,   436,   420,   438,   476,   476,   467,   468,
     204,  2293,   476,   355,   391,   474,   475,   480,   477,   482,
    2302,  3577,   216,  3875,   476,  3877,   485,  2827,   476,   166,
    3864,  2831,   476,   480,   408,   482,   476,  4678,  3488,   476,
     476,   391,   392,   393,   238,  3976,   485,   477,  5410,   479,
     187,   245,  5176,  5415,   476,  2855,  2856,   262,  2526,   476,
    2860,   435,   476,   476,   438,  2865,   476,   476,   262,   206,
     476,   476,  3876,  5306,  3878,  3014,   479,   391,   392,   393,
     480,   476,   482,   296,  2303,   399,  2886,   480,  3278,   482,
     467,   468,   480,   306,   482,  2563,   476,   474,   475,   473,
     477,   476,  2321,  2903,  2904,   482,   482,   481,  4039,   480,
     480,   482,   482,   487,   476,   482,   150,   467,  2865,   480,
    2920,   482,   327,   476,   474,   475,   476,   476,   476,   479,
     324,  2931,  2932,   327,  2934,   476,  3061,  3587,  3588,   276,
     391,   392,   393,   480,  3577,   482,   476,  3467,  4949,  3577,
     482,   476,  3612,   467,   480,   476,   482,   351,  5005,  2627,
     474,   475,   476,   391,   392,   393,   360,   483,  2450,   363,
     476,   480,     7,   482,  4815,   312,  3626,   476,  3470,  3471,
    3472,   391,    58,    58,  3753,  2653,   480,   480,   482,   482,
     224,   476,   480,  5426,   482,  2995,  2996,  2997,  2998,  2999,
    3000,  3001,  5003,   408,   480,   480,   482,   482,  3008,  3009,
    3010,  5444,   417,  3013,   408,     7,   467,  4485,    27,   476,
     480,   415,   482,   474,   475,   476,   480,    62,   482,   480,
     435,  2865,  2451,   438,   476,   476,  2455,  3557,    73,   467,
     476,   435,   436,   476,   438,  2527,   474,   475,   476,  2857,
     476,   476,  4599,  3053,   482,   476,   479,   467,  4293,   476,
     480,  3061,   482,     7,   474,   475,   476,   476,   473,  3013,
    2126,   450,   482,    65,   476,   476,   481,  3077,   476,   473,
     391,   116,   487,   480,   480,   482,   482,   481,   480,   480,
     482,   482,  4560,   487,   450,   480,  4130,   482,   480,   476,
     482,  2157,   408,   409,   139,   476,   476,  4141,  2590,  4399,
     416,    55,  4146,   408,  3061,  2534,   391,   476,   413,  2175,
    2176,    14,   114,  3615,   430,   160,   432,   422,   423,   435,
     425,   426,   438,   476,   476,  2554,  3136,  3137,   433,  3139,
     435,   150,   476,   438,   179,   447,   476,   139,  3148,   480,
     476,   482,  3542,   480,   476,   482,   467,   391,   392,   393,
     104,  2829,   476,   474,   475,   476,   476,   476,  3168,  3169,
      63,   482,  2591,  3173,  2656,   480,   168,   482,    71,   476,
     480,   216,   482,  3183,   391,   392,   393,   179,    81,  3189,
    3190,   476,   467,  2675,  3194,   139,  3196,   476,   482,   474,
     475,   476,   480,   238,   482,   482,   480,   482,   482,   480,
     245,   482,   625,   476,   480,   224,   482,   476,   253,   163,
     476,  3168,  3169,  4846,   216,   476,  3173,  3061,   476,   476,
    3722,  4699,   477,   467,   479,   179,   476,   130,  2657,  3629,
     474,   475,   476,   476,   476,   479,   238,  2915,  3056,   142,
     480,  2919,   482,   245,   480,   476,   482,  2676,   476,   152,
     467,   468,  4393,   476,   476,  3265,  4556,   474,   475,  2937,
     477,  3271,   216,  4307,   391,   476,   483,   269,   171,   476,
    3280,   174,   150,  3283,  3284,  3285,  4320,   322,   232,   324,
    3290,  3291,  3292,  3712,   238,  4117,   480,   480,   482,   482,
     480,   245,   482,  2785,   480,   340,   482,   480,   300,   482,
     480,   204,   482,  4781,   482,   480,  4784,   482,   480,   476,
     482,  3013,   476,   315,  3324,   360,  3326,  5651,   363,  3821,
    3822,   150,   324,   480,   476,   482,  4804,  4805,   391,  3173,
    4055,   476,   476,  1559,  1560,   380,  3014,  1563,  3348,  3349,
     467,   480,   480,   482,   482,   476,   224,   474,   475,   476,
    2613,  4395,  4396,   476,   480,   482,   482,  2786,   360,   262,
     476,   363,   316,   476,   476,  3375,  3376,  2859,   476,   480,
     324,   482,   476,   392,   393,   394,   395,   396,   397,   398,
     480,   476,   482,   402,   403,   404,   476,   479,  3398,  3067,
     293,  3401,  3402,   480,  3404,   224,  3406,   480,  3408,   482,
     391,  3411,   119,  3413,   467,  3415,   360,   229,   480,   363,
     482,   474,   475,   476,   837,  3550,   839,   840,   372,   482,
       7,   844,     9,  3433,   327,   328,  3575,   480,  3438,   482,
    3440,  2860,  3442,   482,   391,  3937,   399,   480,  2930,   482,
     480,   480,   482,   482,   480,   391,   482,   485,   467,   468,
     469,   470,   471,   472,   473,   474,  3466,  3467,   150,   287,
     391,  4293,   480,   480,   482,   482,  3168,  3169,   475,  3479,
    4000,  3173,   475,  3483,  2903,  3319,   467,   468,   476,   150,
     480,   482,   482,   474,   475,   480,   477,   482,   476,   480,
      55,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,    14,
     482,   480,  2931,   482,   450,   408,   480,   480,   482,   482,
     467,  3521,  3522,   391,   392,   393,   103,   474,   475,   476,
     480,   467,   425,   426,   480,   482,   482,   114,   474,   475,
     476,   480,   435,   487,   482,   438,   467,   468,   482,   104,
    3550,   480,   391,   474,   475,   480,   477,  3557,    63,   482,
     482,   482,   139,   224,   480,   480,   482,   482,   480,  3569,
     482,  3571,   391,   392,   393,   480,    81,  3577,   480,   480,
     473,   482,  3001,   142,  3584,  3585,   480,   142,   481,  3008,
     480,   480,   482,   152,   487,   391,   480,   152,  3598,   467,
     480,   480,   179,  3550,   482,   476,   474,   475,   476,   391,
     476,  5158,   171,   480,     0,   482,   171,  3617,   480,    12,
     482,  4655,   199,   150,   480,   130,   482,  5095,   467,   468,
     207,   480,   476,   482,  1047,   474,   475,   142,   477,   216,
     479,   218,    35,  3643,   476,   204,  3646,   152,   467,   204,
     476,   228,   391,  3321,   482,   474,   475,   476,   480,   476,
     482,   238,   476,   482,    50,   242,   171,   476,   245,   174,
     476,   467,   468,   480,    67,   482,  4623,   476,   474,   475,
     480,   477,   482,  3683,   476,   467,   482,   480,  4180,   482,
    3690,   476,   474,   475,   476,   476,   480,   224,   482,   204,
     482,   476,   480,   262,   482,  3705,  3188,   262,  1121,  1122,
    1123,  1124,  3712,   480,  4659,  4660,  3550,  3136,   480,   480,
     482,   114,  5012,   480,   482,  4960,  4961,   482,   467,   468,
     391,   392,   393,   480,  3734,   474,   475,   480,   477,   132,
     480,   476,   482,   482,   476,  1961,  1962,   324,   391,   142,
     327,   480,   391,   482,  3754,   480,   480,   262,  3705,   152,
     480,   316,   482,   340,   480,   480,   482,   482,   327,  4803,
    3189,  4421,   327,  3773,   484,   168,  4183,   480,   171,   482,
     480,   482,   482,   360,  3266,   482,   363,   364,  4774,  4091,
    4776,  3791,  3792,  3793,  3794,  3795,   351,  4447,   482,   480,
     480,  4077,  5577,   482,   482,   482,   467,   384,   480,  2865,
     203,   204,  3812,   474,   475,   476,  4235,   372,   211,   480,
     480,  3489,   327,   328,   467,   482,  3773,   480,   467,   468,
    3830,   474,   475,   476,  3834,   474,   475,   482,   477,   482,
    3322,   482,   235,   482,  3844,   155,   480,  3847,   480,   408,
     480,   480,   480,   408,   413,   480,   249,   250,   480,   480,
     415,   476,   482,   249,   391,   392,   393,  3867,   480,   262,
    3870,  3290,   482,   482,   433,   482,   435,   400,   391,   438,
     435,   436,   480,   438,  4534,   480,   477,   476,  4603,   482,
     482,   284,   482,  3893,   391,  3895,  3896,   480,   480,  3899,
     286,   480,  3570,   408,   290,   480,   480,   476,   294,   302,
    2126,   482,   482,   223,   473,   482,   482,   482,   473,   482,
     425,  3589,   481,  3923,  3924,   476,   481,   391,   487,  3348,
     435,   476,   487,   438,   327,    14,   391,   476,   476,   476,
     467,  2157,   482,   476,   480,  3945,   480,   474,   475,   476,
     150,   344,   482,   480,   467,  3955,  3375,   482,   482,  2175,
    2176,   474,   475,   476,   480,   480,   480,    16,   473,   482,
     467,   468,   365,  4112,   480,  3975,   481,   474,   475,   480,
     477,  3981,   487,   482,    63,   482,   480,   480,   480,   480,
     480,   480,    71,   480,   480,   450,   306,  3997,  3998,   142,
    4000,   480,    81,   467,   468,  3061,   482,   480,  3490,   152,
     474,   475,   467,   477,   480,   408,   409,   480,   482,   474,
     475,   476,   480,   416,   224,   482,   480,    76,   171,   482,
    4030,   480,   450,   476,  3981,  4035,  4036,   430,    14,   432,
     476,   476,   435,    92,   476,   438,   392,  3466,  4698,   442,
     480,   130,   445,   482,   480,  4055,   484,  4057,   482,   482,
     480,   204,   475,   142,   480,  4204,   480,   150,   391,   392,
     393,   482,   482,   152,   482,   482,   399,  4077,   480,   480,
     473,  3773,   482,   476,   477,   482,   480,    63,   481,   138,
     480,  3573,   171,   482,   487,   174,   369,   482,   482,   480,
     480,   480,  3521,   391,   480,    81,   480,   482,  3590,   482,
    4110,  5145,  4604,   480,   482,   480,   482,  3173,  4118,   262,
     482,   480,  4122,  4123,   480,   204,   480,  4777,   399,   482,
     482,  4623,   482,   480,   482,  4785,  4628,   447,   480,   480,
    4790,   224,   482,   482,   467,   468,   480,  3981,   391,   198,
     199,   474,   475,  4153,   477,   150,   480,   482,  5192,  2375,
     480,   480,   485,   480,   480,  3584,   142,  3649,    30,   391,
     392,   393,    34,    35,  4174,  4175,   152,    39,   227,   467,
     468,  4831,  4832,   262,   327,   391,   474,   475,  4607,   477,
     480,   391,   392,   393,   482,   171,   480,   476,   174,  4618,
     476,  1614,  4202,   480,    66,   410,  1619,  1620,   476,   476,
     476,   476,   476,   476,  5161,   476,  3698,   476,   267,    81,
     476,   476,   476,   476,   467,   468,   476,   476,   204,   224,
     476,   474,   475,   619,   477,  4235,   476,  5184,   476,   482,
     468,   480,   391,   553,   412,   467,   468,   399,   327,   328,
     476,   476,   474,   475,   303,   477,   476,    11,   480,   400,
     309,   467,   468,   573,    86,   408,   474,   467,   474,   475,
     413,   477,   582,   479,   474,   475,   476,   139,   588,   401,
     484,   480,   482,   477,   397,   472,   262,   484,   337,  3981,
     433,   479,   435,   476,   476,   438,  4296,  4297,   476,    12,
     476,    14,   476,    16,   476,   476,   476,  4957,   391,   392,
     393,   476,   174,   476,   480,   482,    29,  4809,   467,  4811,
     480,   150,   480,   480,   400,   474,   475,   476,   482,   408,
     473,   476,   480,   482,   480,   197,   198,   199,   481,   476,
     480,   150,   485,   476,   487,   207,   425,   426,   476,  4349,
      63,   327,   328,   476,  4354,   476,   435,  4357,   476,   438,
     476,   671,   476,    76,   391,   392,   393,   273,    81,  4369,
    4370,   482,   480,   480,   480,  3794,   480,   246,   235,   482,
     482,   482,   482,   482,   467,   482,   482,   697,   482,   482,
     482,   474,   475,   476,   473,   224,   391,   392,   393,   482,
    5347,   482,   481,   480,  4543,   480,   480,   269,   487,   482,
     482,   482,  3894,   482,  4414,   224,   482,   130,   480,   476,
     476,   476,  4422,   476,   476,   476,   476,   486,  3847,   142,
     476,   476,   408,   476,  5084,  5085,   476,   476,   476,   152,
     467,   468,  4442,   476,  4112,   307,   480,   474,   475,   425,
     477,   479,   316,   480,   479,   482,   410,   476,   171,   435,
     476,   174,   438,   176,   476,   476,   476,   476,  5118,  5119,
     142,   400,   467,   480,   482,  4614,  3895,   150,   482,   474,
     475,   476,   480,   480,   391,  4904,  4905,   482,   480,  4489,
     480,   204,  4984,  4985,  3550,   482,   482,   473,   150,   480,
    4992,  4993,  4502,  4503,     9,   481,   368,  4999,  5000,   480,
    5002,   487,  5004,   480,   480,  4934,  4935,  4936,  4937,   480,
     382,   480,   482,   480,   482,    15,   388,   476,   484,   839,
     840,   244,    51,   392,   844,   479,   399,  4537,   442,  4539,
     482,    86,  4542,   484,   482,  4545,  4546,   450,  4548,   262,
    4550,   224,  4034,   450,   484,   399,   484,   412,   391,   399,
     467,   468,   391,   392,   393,  3818,   482,   474,   475,   399,
     477,  3824,   224,   480,  4574,  4575,   399,   482,   480,   399,
     442,   482,   391,   392,   393,   400,  5246,   482,  5238,  4589,
    5240,   482,  5252,   482,   482,   482,   309,   480,   482,   480,
     480,   480,   476,  4603,   482,    14,  5553,  4607,   480,    63,
     480,   482,  4612,   480,   327,   328,  4035,   450,  4618,   480,
     476,  5271,   482,   400,   486,   476,  4108,  5277,  5278,   482,
     482,   480,   480,   480,   467,   468,   482,   480,   467,  4121,
     482,   474,   475,   356,   477,   474,   475,   476,   361,  2865,
     482,   273,   480,   482,    63,  4655,   480,   482,   467,  4659,
    4660,   480,  4662,  4663,   480,   474,   475,   476,   480,  5161,
     150,   482,    81,   482,   480,   480,   480,   400,   400,   482,
     482,   482,  4682,   128,  4684,   482,  4686,   480,   142,  4689,
    5340,  4110,  5184,   391,   482,   408,   482,   142,   152,   482,
     480,    63,   480,  4122,   480,   480,   419,   152,  4708,   422,
    4710,   480,   425,   480,   482,  5365,  5366,   171,   391,   392,
     393,   480,   435,   480,   482,   438,   171,  5377,   484,   482,
     482,   482,   400,   142,   482,   482,   482,   482,  5157,   391,
     392,   393,   482,   152,   224,   482,   482,   482,   480,   480,
     204,   476,   450,  5172,   482,  4174,   482,   476,  5408,   204,
     473,   476,   171,   480,   150,   174,   476,  4767,   481,   467,
     468,   391,   392,   393,   487,   482,   474,   475,   480,   477,
     142,  5431,  5432,  4202,  5174,   480,  4786,   480,   482,    86,
     152,   482,  4792,   480,   467,   204,   482,   480,  5448,   480,
     391,   474,   475,   476,   482,   476,   482,   480,   262,   171,
     480,   480,    16,   480,   476,   467,   482,   262,   482,   273,
     274,   338,   474,   475,   476,    29,   399,   475,  4828,  4829,
     482,   391,   399,  4833,   479,   482,   142,  3053,   224,   450,
     482,   482,   204,   480,   480,  3061,   152,   467,   468,   480,
     482,   486,  4852,   262,   474,   475,  4856,   477,   482,  5509,
     480,   482,   482,  5513,   482,   171,   480,   480,   480,   476,
     480,   476,    76,   327,   482,  4543,   467,   468,   482,  5529,
     482,  5531,   327,   474,   475,  5535,   477,   476,   476,   482,
     482,   482,   391,   392,   393,   482,   482,   351,   204,   476,
     262,  5551,  5552,   482,  4904,  4905,   351,   467,   468,   480,
    5560,   391,   392,   393,   474,   475,   480,   477,   327,   328,
     480,   480,  4590,   480,   482,  3981,   482,   482,   482,  1315,
    5580,  1317,   482,  1319,  4934,  4935,  4936,  4937,   142,   412,
     476,   392,   479,  5435,   482,   412,  4614,   482,   152,   482,
    4369,   482,  3168,  3169,   408,   480,   262,  3173,  4958,   413,
    5610,   415,   476,   408,   482,   327,   482,   171,   467,   468,
     415,   480,   176,  4973,  4974,   474,   475,   480,   477,   433,
     482,   435,   436,   482,   438,   482,   482,   467,   482,   351,
     435,   436,   484,   438,   474,   475,   476,   479,   479,   408,
     204,   150,   482,   399,   173,   391,   392,   393,   484,   480,
     316,  5661,   480,   400,   480,  5665,   425,   482,  5668,   473,
     482,   327,  2435,  2436,    18,    63,   435,   481,   473,   438,
    2443,   485,  5682,   487,   482,   482,   481,   480,   480,   476,
     244,   476,   487,   476,   476,   351,   408,   476,     7,   476,
     476,   476,   476,   415,  5704,   476,  5706,   476,   262,    18,
     476,   476,   480,   480,   473,  5715,   476,   476,   482,   273,
     274,   482,   481,   435,   436,   224,   438,   480,   487,   480,
     482,   467,   482,  4502,   482,   480,   480,   480,   474,   475,
     476,   482,     0,   391,   392,   393,   482,   482,   482,  5489,
     480,     9,   408,   480,   142,   309,    65,   476,   150,   415,
     476,   473,   480,   476,   152,   476,   480,  5646,  4537,   481,
    5120,  5121,  5122,   327,   476,   487,  4545,   476,  5128,   435,
     436,   482,   438,   171,   480,   482,    70,  5137,   482,   391,
      48,   482,    50,  5143,   480,   482,   480,   351,   480,  5641,
    5642,   482,   356,  5153,    30,  5647,  5648,   361,    34,    35,
     482,   480,   482,    39,    72,   480,   204,   473,  1554,   467,
     468,   482,   482,   482,   184,   481,   474,   475,  5178,   477,
     139,   487,   224,   482,   482,   150,   211,   482,   482,    97,
      66,   482,   482,   482,   153,   482,   482,   482,   482,  5199,
    5200,   482,   482,   482,   408,    81,  2619,  2620,   482,   413,
     169,   415,   482,   482,   482,   467,   468,   482,   482,   479,
     179,   479,   474,   475,   262,   477,   479,   392,   482,   433,
     482,   435,   436,   480,   438,   273,   274,   150,   482,    55,
     482,   482,   391,   392,   393,   485,   205,   155,   480,   482,
    1560,  1637,  2665,  1563,  5254,  5089,   480,   216,   401,   224,
     482,   482,  4930,   139,   482,   482,   482,   482,   476,   473,
     476,   476,  5272,   476,    55,   482,   184,   481,   480,   238,
     391,   485,   482,   487,  5284,   482,   245,   482,   247,   327,
     479,   482,   482,  2706,  2707,   480,   479,   391,   174,   479,
    1686,   476,   476,   476,  1614,   482,   245,    18,   216,  1619,
    1620,   224,   480,   480,  5314,   223,   480,   480,   467,   480,
     480,   197,   198,   199,   482,   474,   475,   476,   482,   482,
     476,   207,   476,   482,  3550,   476,   476,   476,   480,   224,
     248,   249,   480,   480,   476,   480,   482,  5347,   256,   391,
     392,   393,   482,   482,   480,  2768,   467,   468,   480,  5359,
     268,   482,   321,   474,   475,   324,   477,   480,   391,  1755,
     408,   482,  4854,   467,   468,   413,  5376,   480,   286,   480,
     474,   475,   290,   477,   482,   482,   294,   482,   482,   482,
     482,   482,   482,   269,  1780,   433,   482,   435,   306,   482,
     438,   360,  5402,   482,   363,   482,   482,  1717,  1718,  1719,
    1720,  1721,  1722,  1723,  1724,   480,   476,   476,   476,   480,
    4902,   477,   273,   480,   479,   467,   391,   392,   393,   482,
     482,   307,   474,   475,   476,   473,   482,   482,   482,   482,
     482,   482,   479,   481,   467,   468,   479,   485,   482,   487,
     480,   474,   475,   482,   477,   363,   364,   476,   366,   482,
     368,   482,   370,   476,   480,   373,   480,   482,  5468,    63,
     482,   379,   400,  5473,   482,   482,   482,   482,   391,   392,
     393,   476,   485,   476,   476,   450,   476,   476,   391,  3705,
     476,  5491,   368,   476,   476,   476,   476,   476,  5637,   476,
     476,   486,   467,  5503,   482,   476,   382,   482,   476,   474,
     475,   476,   388,   421,   476,   482,   482,   425,   426,   427,
     399,   429,   430,   431,   482,   486,   480,   435,   400,   437,
     482,   439,   440,   441,   442,   443,   444,   450,   446,   447,
     482,   449,   482,   451,   452,   453,   482,   482,   480,   482,
     400,   459,   482,  5553,   467,   482,  5503,  3773,   480,  4812,
     400,   474,   475,   476,   467,   468,   442,   482,   400,  5708,
     482,   474,   475,   482,   477,   482,   482,  5577,   482,   482,
     488,   489,   482,   491,   480,   493,   494,   495,   496,   480,
     482,   235,   482,   482,   502,   391,   392,   393,   482,   391,
    3013,   509,   510,   511,   482,   513,  5440,   482,  5442,   482,
     518,   482,   482,   482,   482,   476,  5616,   480,   480,   476,
     528,   480,   530,   531,   532,   533,   534,   535,   536,   482,
     538,   539,   391,   541,   542,   543,   480,   476,   546,   547,
     476,   476,   476,   551,   552,   553,  5646,   555,   476,   476,
     558,   559,   476,  5653,   476,   563,   564,   565,   566,   567,
     480,   569,   480,   482,   477,   573,   477,   142,   482,   577,
     482,   467,   468,   482,   582,   467,   468,   152,   474,   475,
     588,   477,   474,   475,   480,   477,   482,  5687,   410,   479,
     482,   482,   476,   482,   482,  5177,   171,   605,  5532,   482,
     482,  5120,   482,  5703,   482,   484,   441,  5707,   467,   468,
     482,   619,   476,   480,   412,   474,   475,  5717,   477,  5719,
    5720,   629,   412,   482,   400,   482,   480,   482,   476,   204,
     476,   476,   476,   476,  5153,   269,   476,   476,   646,   480,
     482,    86,   476,   277,  2130,   653,   476,   476,   656,   657,
     658,   659,   660,  2139,   662,   480,   482,   665,   666,   476,
     668,   476,   476,   671,   672,  3981,   476,   476,   476,   482,
     678,   338,   484,   681,  2160,   683,   480,   391,   392,   393,
     688,   689,   482,   691,   692,   480,   694,   262,   482,   697,
     482,   699,   476,   701,   482,   703,   704,   705,   706,   482,
     482,   480,   476,   476,   476,   391,   392,   393,   476,   476,
     476,   405,   406,   407,   408,   409,  2126,   411,   412,   413,
     414,   415,   416,   417,   732,   733,   420,   476,   422,   476,
     476,   365,   480,   427,   428,   429,   430,   431,   432,   476,
     434,   476,   436,   437,   476,   476,   476,  2157,   482,   757,
     117,   480,   327,   467,   468,   763,   482,   482,   482,   482,
     474,   475,   482,   477,   482,  2175,  2176,   482,   482,   480,
     391,   392,   393,   482,   782,   480,   482,   321,   412,   482,
     155,   467,   468,   791,   480,   480,   184,   480,   474,   475,
     482,   477,   482,   482,   480,   482,   482,   391,   392,   393,
     482,   482,   436,   480,   482,   484,   482,   482,   391,   392,
     393,   482,   482,   482,   822,   823,   824,  2303,   482,   391,
     392,   393,   482,   476,   832,   833,   476,   476,   476,   476,
     476,   839,   840,   408,   476,  2321,   844,   476,   476,   480,
    5359,   380,   482,   480,   480,   480,   467,   468,   223,   482,
     482,   482,   482,   474,   475,     7,   477,     9,   482,   482,
     435,   482,   482,   438,   498,   499,   500,   501,   482,  5637,
     476,   476,   391,   467,   468,   482,   480,   477,   227,   482,
     474,   475,   484,   477,   467,   468,   482,   391,   482,   412,
     482,   474,   475,   482,   477,   467,   468,   476,   473,   482,
     476,   482,   474,   475,   482,   477,   481,   480,   482,   480,
     482,   919,   487,   921,   922,   923,   924,   925,   482,   482,
     554,   391,   930,   557,    16,   933,   934,   935,   936,   937,
     938,   142,   391,   392,   393,   482,   482,    29,   480,   482,
    5708,   152,   482,   476,   482,  5713,   482,   955,   467,   468,
     482,   103,   482,   482,   962,   474,   475,   965,   477,   967,
     171,   480,   114,   467,   468,  2451,   412,  3480,   399,  2455,
     474,   475,   480,   477,   476,   482,   480,   985,   476,   482,
     988,   989,   990,   482,    76,   482,   482,   139,   482,   482,
     142,   482,   482,   204,   391,   392,   393,   467,   468,   482,
     152,   482,   482,   482,   474,   475,   480,   477,   467,   468,
     480,   482,   480,   482,   476,   474,   475,   267,   477,   171,
     480,   482,  1030,   482,   482,  2435,  2436,   179,   482,   482,
     664,   482,   482,  2443,   482,  3548,   480,   399,   412,   482,
     482,   391,   392,   393,   482,   482,   142,   199,  2534,   482,
     142,   262,   204,   391,  1062,   207,   152,   482,   482,   482,
     152,    63,   273,   274,   216,   482,   218,   391,  2554,   482,
     467,   468,   447,  1081,   476,   171,   228,   474,   475,   171,
     477,   482,   482,   480,   176,  5667,   238,  3600,   482,  3602,
     242,   482,   476,   245,   480,   482,   189,   391,   392,   393,
     734,   482,   482,   482,   482,  2591,   482,   480,   204,     9,
     262,   476,   204,   476,   203,   476,   327,   467,   468,   476,
     476,   273,   274,   476,   474,   475,   233,   477,   476,   467,
     468,   476,   482,    50,  5716,   510,   474,   475,   482,   477,
     351,  1149,   480,   467,   468,   482,   482,   482,   482,   482,
     474,   475,   244,   477,   482,   482,   480,   391,   392,   393,
     482,   482,   482,   538,   539,   482,   262,   801,  5687,   786,
     262,  2657,   324,   467,   468,   327,  1325,  1324,   553,  1554,
     474,   475,  3550,   477,   619,   286,   480,  2335,   340,  2336,
    2676,   294,  2312,  2412,   569,  4633,  3728,   408,   573,  4631,
    5719,  4638,   413,   624,   415,   416,  2886,   582,   360,  3388,
    5309,   363,   364,   588,  2788,  4077,  2130,   309,   391,   392,
     393,   432,   433,  3831,   435,   436,  2139,   438,  3823,  5500,
    5203,   327,   384,   467,   468,   327,  2315,   142,  4188,  2599,
     474,   475,  4184,   477,  4712,  4177,  1254,   152,   482,  4815,
    5139,  3474,  2690,  1261,  3978,   351,   408,  2060,  4046,  3694,
    2349,   413,   473,  1614,   356,  2350,   171,  2411,  3066,   361,
     481,   839,  2375,  2375,   485,  1339,   487,  2857,  2414,  1617,
     707,   433,  2877,   435,  3269,  1293,   438,  1658,  1296,   391,
    2836,  1299,  1962,  1404,   467,   468,  1304,  3683,  3271,   204,
    2786,   474,   475,  2036,   477,  3280,   479,  1315,  5107,  1317,
     391,  1319,   408,  4038,  5112,  2308,   408,  1325,  4139,   415,
     412,   473,   697,  2908,  4265,  4389,  3830,   419,  5005,   481,
     422,  1339,  5504,   485,  4994,   487,  4495,  4493,  4352,   435,
     436,  4006,   438,   435,  4351,  4350,   438,   391,   392,   393,
     984,  3864,     7,  5270,  3367,  3582,  3938,   262,   391,   392,
     393,  2245,  2971,  5292,  1372,   467,   468,  1120,   273,   274,
    4488,   653,   474,   475,  2860,   477,   656,   473,   480,  1387,
    2007,   473,  4767,  3173,  4653,   481,   467,   468,  2650,   481,
     343,   487,  3838,   474,   475,   487,   477,  1031,  4106,   480,
    2886,  1409,  1976,  1978,     9,  3841,  1414,  1415,    63,  1981,
    3839,  1789,  1420,  4208,  4916,  3843,  1050,  2903,   391,   392,
     393,  1980,   327,   467,   468,  3844,  3939,  3079,    83,  1063,
     474,   475,  4210,   477,   467,   468,  1070,  4820,   482,    16,
    5442,   474,   475,    48,   477,  2931,  1987,   286,  4235,   482,
    5158,    -1,    29,  5184,  1462,  2865,  1464,  1465,  1466,  1467,
    1468,    -1,    -1,  1471,  1472,    -1,  1474,  1475,  1476,  1477,
    1478,  1479,  1480,   128,  1482,    -1,    -1,    -1,    -1,  1487,
     391,   392,   393,   138,   139,    -1,   141,   142,    -1,    -1,
      -1,    -1,    97,    -1,   467,   468,    -1,   152,    -1,    76,
      -1,   474,   475,   408,   477,    -1,    -1,   412,   413,   482,
      16,    -1,   391,   392,   393,  3001,   171,    -1,    -1,    -1,
     175,    -1,  3008,    29,   179,    -1,    -1,   182,   433,    -1,
     435,    -1,    -1,   438,    -1,    -1,    -1,   391,   392,   393,
      -1,    -1,    -1,    -1,    -1,   200,  1554,    -1,    -1,   204,
     155,  1559,  1560,  1561,   209,  1563,   467,   468,   391,   392,
     393,   216,    -1,   474,   475,   142,   477,    -1,   473,    -1,
      76,   482,   477,    -1,    -1,   152,   481,   232,    -1,   184,
     485,    -1,   487,   238,    -1,    -1,  1594,    -1,   467,   468,
     245,    -1,    -1,  1601,   171,   474,   475,    -1,   477,   176,
      -1,   480,    -1,  3013,    -1,    -1,  1614,   262,   263,    -1,
      -1,  1619,  1620,   467,   468,    -1,    -1,  4130,   223,    -1,
     474,   475,    -1,   477,    -1,    -1,   480,   204,  4141,  1637,
     285,   286,    -1,  4146,   467,   468,   142,    -1,    -1,    -1,
      -1,   474,   475,    -1,   477,   391,   152,   480,   303,    -1,
    3136,  3061,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,   318,    -1,   171,    -1,   244,    -1,   324,
     176,    -1,   327,    -1,    -1,    -1,    -1,  1685,  1686,    -1,
    1688,    -1,    -1,    -1,    -1,   262,    -1,   342,   343,    -1,
     391,   392,   393,    -1,    -1,    -1,   351,   352,   204,    -1,
      -1,   306,    -1,  3189,    -1,   360,    -1,    -1,   363,  1717,
    1718,  1719,  1720,  1721,  1722,  1723,  1724,    -1,   450,    -1,
      -1,   467,   468,    -1,    -1,  1733,    -1,    -1,   474,   475,
      -1,   477,   309,   388,   480,   467,   468,  1745,   244,  1373,
    1374,    -1,   474,   475,  1752,   477,    -1,  1755,  1756,    -1,
     327,    -1,    -1,   408,    -1,    -1,   262,    -1,  3168,  3169,
     415,  1769,    -1,  3173,    -1,   370,   467,   468,    -1,    -1,
      -1,    -1,  1780,   474,   475,    -1,   477,    -1,   479,   356,
     435,   436,  1790,   438,   361,    -1,    -1,    -1,    -1,  1797,
      -1,  1799,    -1,    -1,  4307,  1803,  1804,  1805,    -1,  1807,
    1808,    -1,    -1,   309,  3290,  1813,    -1,  4320,    -1,   391,
     392,   393,    -1,    -1,   405,   406,   407,   408,   473,    -1,
      -1,   327,    -1,    -1,   415,    -1,   481,    -1,   419,   420,
      -1,   408,   487,    -1,    -1,    -1,   427,   428,   429,    -1,
     417,   142,   447,    62,   435,   436,   437,   438,    -1,    -1,
     356,   152,    -1,  1861,    -1,   361,    -1,    -1,   435,    -1,
      -1,   438,  3348,    -1,  1872,    -1,  1874,    -1,    -1,    -1,
     171,  1879,    -1,   391,   392,   393,    -1,    -1,    -1,  4392,
      -1,    -1,  4395,  4396,    -1,   467,   468,    -1,    -1,  3375,
      -1,    -1,   474,   475,    -1,   477,   473,   116,   480,    -1,
     408,    -1,   408,   204,   481,   413,    -1,   415,   416,   128,
     487,  1919,    -1,   419,    -1,    -1,   422,    -1,    -1,   391,
     392,   393,    -1,   142,   432,   433,    -1,   435,   436,   435,
     438,    -1,   438,   152,    -1,    -1,    -1,  1945,  1946,    -1,
      -1,    -1,    -1,    -1,  1952,  1953,    -1,    -1,   553,   467,
     468,    -1,   171,  1961,  1962,   391,   474,   475,    -1,   477,
      -1,   262,   480,    -1,    -1,    -1,  1974,   473,   573,    -1,
      -1,    -1,    -1,  1981,    -1,   481,    -1,   582,    -1,  1987,
    3466,   487,    -1,   588,    -1,   204,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   391,    -1,   467,   468,  2005,    -1,    -1,
      -1,   152,   474,   475,    -1,   477,    -1,    -1,   480,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   235,   391,   392,   393,
     171,   240,    -1,    -1,   629,    -1,   327,    -1,  2036,    -1,
      -1,   467,   468,    -1,    -1,  3521,    -1,    -1,   474,   475,
      -1,   477,    -1,   262,   480,    -1,    -1,    -1,  2056,    -1,
      -1,  4564,  2060,   204,   273,   274,    -1,  2065,    -1,    -1,
     665,    -1,  2070,  2071,  2072,   284,    -1,    -1,    -1,   467,
     468,    -1,    -1,  2081,  2082,    -1,   474,   475,  2086,   477,
      -1,    -1,   480,    -1,    -1,    -1,   142,  2095,    -1,    -1,
      -1,    -1,   697,   467,   468,    -1,   152,    -1,  3584,    -1,
     474,   475,    -1,   477,    -1,    -1,    -1,   408,   327,    -1,
      -1,   262,  1746,    -1,    -1,   171,    -1,    -1,  2126,    -1,
      -1,   340,  2130,    -1,    -1,    -1,    -1,    -1,    -1,   430,
      -1,  2139,    -1,    -1,   435,    -1,    -1,   438,    -1,    -1,
    3550,   142,  4655,  2151,    -1,    -1,    -1,    -1,   204,  2157,
    1784,   152,  2160,   398,    -1,    -1,    -1,   402,   403,   404,
    1794,   380,    -1,  2171,    -1,    -1,    -1,  2175,  2176,  2177,
     171,    -1,   473,    -1,   408,   409,   327,    -1,    -1,    -1,
     481,   415,   416,  2191,  2192,  1560,   487,  2195,  1563,   408,
      -1,    -1,    -1,    -1,   413,    -1,   430,    -1,   432,    -1,
      -1,   435,   436,   204,   438,    -1,   262,    -1,    -1,    -1,
      -1,  2219,    -1,    -1,   433,  2223,   435,    -1,    -1,   438,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
    2238,  2239,  2240,    -1,   839,   840,    -1,   482,    -1,   844,
      -1,    -1,    -1,    -1,    -1,  2253,    -1,    -1,    -1,    -1,
    2258,  2259,  2260,  2261,   473,    -1,  1890,   408,    -1,    -1,
      -1,   262,   481,    -1,    -1,    -1,   485,    -1,   487,    -1,
      -1,   327,   273,   274,    -1,    -1,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,  2294,   438,    -1,    -1,
    4803,  2299,    -1,    -1,    -1,  2303,  2304,  2305,    -1,    -1,
    2308,     7,    -1,  1937,  1938,    -1,    -1,    -1,  3794,    -1,
    2318,    -1,    -1,  2321,    -1,    -1,  2324,    -1,    -1,    -1,
      -1,    -1,   473,    -1,   142,    -1,   327,  2335,    -1,     7,
     481,    -1,    -1,    -1,   152,    -1,   487,   391,   392,   393,
      -1,    -1,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,
      -1,    -1,   408,   171,    -1,    -1,    -1,    97,    -1,    65,
     416,  3847,    -1,  3773,    -1,    -1,    -1,  2375,    -1,    -1,
      -1,    -1,  2006,    -1,    -1,    -1,   432,    -1,    -1,   435,
      -1,    -1,   438,    -1,    -1,    63,   204,    -1,    -1,    -1,
      -1,  2399,    -1,    -1,    -1,    -1,   450,    -1,    -1,  2407,
      -1,    -1,  2410,  2411,    -1,    83,    -1,   408,   114,  3895,
      -1,   412,   413,   467,   468,   155,    -1,   473,    -1,    -1,
     474,   475,    -1,   477,    -1,   481,   482,  2435,  2436,    -1,
      -1,   487,   433,   139,   435,  2443,   142,   438,    -1,    -1,
      -1,    -1,    -1,  2451,   262,  2453,   152,  2455,  2456,    -1,
     128,    -1,  4965,    -1,    -1,   273,   274,    -1,    -1,    -1,
     138,   139,   168,   141,    -1,   171,    -1,    -1,    -1,    -1,
      -1,    -1,   473,   179,    -1,   293,   477,    -1,    -1,    -1,
     481,    -1,    -1,   223,   485,    -1,   487,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   204,    -1,
      -1,   179,    -1,  2511,   182,    -1,    -1,  2515,  2516,   327,
     216,    -1,  2520,  2521,  2522,  2523,  2524,    -1,    -1,    -1,
      -1,    -1,   200,    -1,    -1,  2533,  2534,  2535,    -1,    -1,
      -1,   209,   238,    -1,    -1,    -1,    -1,    -1,   216,   245,
      -1,    -1,    -1,    -1,    -1,    -1,  2554,  2555,  2556,  4035,
    2558,    -1,    -1,    -1,   232,    -1,   262,    -1,    -1,    -1,
     238,    -1,    -1,   269,    -1,    -1,   306,   245,    -1,    -1,
      -1,  3981,    -1,  2581,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2591,  2592,   263,    -1,    -1,    -1,    -1,
     408,  4077,    -1,    -1,   300,   413,     7,    -1,     9,    -1,
      -1,  2609,    -1,    -1,    -1,    -1,    -1,   285,   286,   315,
      -1,    22,    -1,    -1,    -1,   433,  2624,   435,   324,    -1,
     438,   327,    -1,    -1,  4110,   303,    -1,  2635,    -1,    -1,
      -1,    -1,  5145,    -1,    -1,    -1,  4122,    -1,    -1,    -1,
     318,    -1,    -1,    -1,  2652,   351,   324,    -1,    -1,  2657,
    2658,    -1,    -1,    -1,   360,   473,    -1,   363,    -1,    -1,
      -1,    -1,  2670,   481,   342,   343,    -1,   485,  2676,   487,
    2678,   408,    -1,    -1,   352,    -1,    -1,    -1,    -1,  5192,
      -1,    -1,   360,  2317,    -1,   363,    -1,    -1,  4174,    -1,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     111,   438,   408,    -1,    -1,    -1,    -1,   447,    -1,   415,
     388,    -1,   123,    -1,    -1,  2349,  4202,   128,  2726,   130,
    1325,    -1,   133,  2731,   405,   406,   407,   408,   139,   435,
     436,   142,   438,    -1,  1339,    -1,    -1,    -1,   419,   420,
     151,   152,    37,    -1,    -1,    -1,   427,   428,   429,    -1,
     161,  2126,   163,    -1,   435,    50,   437,   438,   169,    -1,
     171,    -1,   173,    -1,    -1,    -1,    -1,   473,   179,    -1,
      -1,    -1,    67,   184,    69,   481,   187,    -1,  2786,    -1,
    2788,   487,  2157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,    -1,    -1,   204,   402,   403,   404,    -1,    -1,    -1,
    2175,  2176,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,
      -1,   222,   107,   553,   142,    -1,    -1,    -1,    -1,  2827,
      -1,   232,   233,  2831,   152,    -1,    -1,   238,    -1,    -1,
      -1,   126,    -1,   573,   245,    -1,   247,    -1,    -1,    -1,
      -1,    -1,   582,   171,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   262,  2860,   148,    -1,    -1,   184,  2865,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,    -1,
      -1,    -1,   167,    -1,   482,  2883,   204,   288,  2886,    -1,
      -1,    -1,    -1,  4369,    -1,    -1,    -1,    -1,    -1,   629,
      -1,    -1,    -1,    -1,   305,  2903,  2904,   398,    -1,     7,
      -1,   402,   403,   404,   315,    -1,   317,    -1,    -1,    -1,
      -1,    -1,  2920,   324,  2548,    -1,   327,   328,    -1,    -1,
      -1,    -1,    -1,  2931,  2932,    -1,  2934,    -1,    -1,    -1,
     341,    -1,    -1,    -1,   262,    -1,   231,    -1,    -1,   234,
     351,    -1,    -1,    -1,    -1,   273,   274,    -1,    -1,   360,
      -1,    -1,   363,    -1,  1559,  1560,   251,   697,  1563,    -1,
      -1,    -1,    -1,   258,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    83,    -1,    -1,    -1,   480,
     275,   482,    -1,    -1,    -1,    -1,    -1,  2995,  2996,  2997,
    2998,  2999,  3000,  3001,    -1,    -1,    -1,   408,    -1,   327,
    3008,  3009,  3010,    -1,   415,  3013,   301,    -1,    -1,  1614,
      -1,    -1,    -1,    -1,  1619,  1620,  4502,    -1,    -1,    -1,
     128,    -1,    -1,    -1,   435,   436,    -1,   438,    -1,    -1,
     138,   139,   327,   141,   142,   330,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,  3053,    -1,    -1,    -1,    -1,
      -1,  4537,    -1,  3061,    -1,    -1,    -1,    -1,    -1,  4545,
      -1,    -1,   473,   171,    -1,    -1,    -1,   175,    -1,  3077,
     481,   179,    -1,   142,   182,    -1,   487,   372,    -1,    -1,
     408,  2456,    -1,   152,    -1,   413,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,    -1,    -1,   204,    -1,    -1,   839,
     840,   209,   171,    -1,   844,   433,    -1,   435,   216,    -1,
     438,    -1,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,  3136,  3137,
     238,  3139,    -1,    -1,    -1,   204,    -1,   245,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   481,   262,   263,    -1,   485,    -1,   487,
    3168,  3169,    -1,    -1,    -1,  3173,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3183,    -1,   285,   286,    -1,
    2555,  3189,  3190,  2817,    -1,    -1,  3194,    -1,  3196,    -1,
      -1,    -1,    -1,   262,    -1,   303,    -1,    -1,    -1,    16,
     405,   406,   407,   408,   273,   274,    -1,    -1,   413,    -1,
     318,    -1,    29,    -1,   419,   420,   324,   422,    -1,   327,
      -1,    -1,   427,   428,   429,    -1,    -1,    -1,   433,    -1,
     435,    -1,   437,   438,   342,   343,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   360,    -1,    -1,   363,    -1,  3265,   327,    76,
      -1,    -1,    -1,  3271,    -1,    -1,    -1,    -1,    -1,    -1,
       7,    -1,  3280,    -1,    -1,  3283,  3284,  3285,    -1,    -1,
     388,    -1,  3290,  3291,  3292,    -1,    -1,  2921,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
     408,    -1,    -1,    -1,    -1,    -1,    -1,   415,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,  3324,  2951,  3326,  2953,
      -1,  2955,    -1,    -1,    -1,   142,  2960,   435,   436,    -1,
     438,    -1,    -1,    -1,    -1,   152,    73,    -1,    75,   408,
    3348,  3349,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,   176,
    2994,    -1,   142,     7,   433,   473,   435,  3375,  3376,   438,
      -1,    -1,   152,   481,    -1,   112,    -1,    -1,   115,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,
    3398,   171,    -1,  3401,  3402,    -1,  3404,    -1,  3406,    -1,
    3408,    -1,   139,  3411,   473,  3413,    -1,  3415,    -1,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,    -1,
      -1,   142,    -1,    -1,   204,    -1,    -1,   244,    -1,    -1,
    3438,   152,  3440,    -1,  3442,    -1,    -1,    -1,    -1,    83,
      -1,    -1,   179,    -1,    -1,   262,    -1,   184,    -1,    -1,
     171,    -1,    -1,    -1,    -1,    -1,   273,   274,  3466,  3467,
      -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3479,    -1,    -1,    -1,  3483,    -1,    -1,    -1,   216,
      -1,    -1,   262,   204,   128,    -1,    -1,    -1,    -1,    -1,
    2865,    -1,   309,    -1,   138,   139,    -1,   141,   235,    -1,
      -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,
     327,   248,    -1,  3521,  3522,    -1,    -1,    -1,    -1,    -1,
     257,  2126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2904,
      -1,   175,    -1,    -1,    -1,   179,  3170,    -1,   182,   356,
      -1,   262,  3550,    -1,   361,    -1,   283,   327,    -1,  3557,
      -1,    -1,  2157,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,  3569,    -1,  3571,    -1,   209,    -1,    -1,    -1,  3577,
    2175,  2176,   216,    -1,    -1,    -1,  3584,  3585,    -1,    -1,
      -1,    -1,    -1,   320,   321,  1325,    -1,   324,   232,   326,
    3598,   408,    -1,    -1,   238,    -1,   413,    -1,    -1,  1339,
      -1,   245,   419,    -1,    -1,   422,   327,    -1,    -1,  3617,
      -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,   435,   263,
      -1,   438,    -1,   360,    -1,    -1,   363,    -1,   408,    -1,
      -1,    -1,    -1,    -1,  5120,  3643,   416,    -1,  3646,    -1,
      -1,   285,   286,    -1,    -1,  3279,    -1,    -1,  3282,    -1,
      -1,    -1,   432,    -1,    -1,   435,   473,    -1,   438,   303,
      -1,    -1,    -1,    -1,   481,    -1,  3041,  5153,   485,    -1,
     487,    -1,    -1,    -1,   318,  3683,    -1,    -1,    -1,    -1,
     324,    -1,  3690,    -1,    -1,    -1,  3061,   408,    -1,    -1,
      -1,    -1,    -1,   473,    -1,   416,   546,  3705,   342,   343,
      -1,   481,   482,   155,  3712,    -1,    -1,   487,   352,    -1,
      -1,   432,    -1,    -1,   435,    -1,   360,   438,    -1,   363,
     142,    -1,    -1,    -1,    -1,    -1,  3734,    -1,    -1,    -1,
     152,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,    -1,   388,    -1,  3754,    -1,    -1,   171,
      -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     481,    -1,  3137,    -1,  3139,  3773,   487,    -1,    -1,    -1,
    2375,   223,    -1,    -1,    -1,    -1,   402,   403,   404,    -1,
      -1,    -1,   204,  3791,  3792,  3793,  3794,  3795,    -1,    -1,
      -1,    -1,    -1,  3168,  3169,    -1,    -1,    -1,  3173,    -1,
      -1,    -1,    -1,    -1,  3812,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,    -1,   268,    -1,    -1,  1559,
    1560,    -1,  3830,  1563,    -1,    -1,  3834,    -1,    -1,    -1,
    2435,  2436,    -1,    -1,  3209,    -1,  3844,    -1,  2443,  3847,
     262,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   273,   274,    -1,   306,    -1,    -1,    -1,    -1,  3867,
    3494,    -1,  3870,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5359,  1614,    -1,    -1,    -1,    -1,  1619,
    1620,    -1,    -1,    -1,    -1,  3893,    -1,  3895,  3896,    -1,
      -1,  3899,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    12,    -1,    14,   327,    16,    -1,    18,    -1,
     405,   406,   407,   408,   409,  3923,  3924,    -1,   413,    29,
      -1,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   351,
      -1,    -1,   427,   428,   429,   430,    -1,  3945,   433,    -1,
     435,    51,   437,   438,    -1,    -1,    -1,  3955,    -1,    -1,
      -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    76,  3975,    -1,    -1,
      -1,    81,    -1,  3981,  3349,    -1,    -1,  1717,  1718,  1719,
    1720,  1721,  1722,  1723,  1724,    -1,   408,    -1,    -1,  3997,
    3998,   413,  4000,   415,    -1,   447,    -1,    -1,    -1,    -1,
      -1,  3376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   433,    -1,   435,   436,    -1,   438,    -1,    -1,    -1,
     130,    -1,  4030,   405,   406,   407,   408,  4035,  4036,    -1,
      -1,    -1,   142,    -1,   416,    -1,    -1,   419,   420,    -1,
      -1,    -1,   152,    -1,    -1,   427,   428,   429,    -1,  4057,
     432,   473,    -1,   435,    -1,   437,   438,    -1,    -1,   481,
    3694,   171,    -1,   485,   174,   487,   176,    -1,    -1,  4077,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,
     406,    -1,   408,    -1,    -1,    -1,   152,   413,    -1,    -1,
      -1,    -1,  3467,   419,   204,    -1,   422,   423,    -1,   425,
     426,   553,  4110,   213,    -1,   171,    -1,   433,    -1,   435,
    4118,    -1,   438,   439,  4122,  4123,    -1,    -1,    -1,    -1,
      -1,   573,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,
     582,   241,    -1,    -1,   244,    -1,   588,    -1,   204,   249,
      -1,    -1,    -1,    -1,    -1,  4153,    -1,  3522,    -1,    -1,
      -1,    -1,   262,    -1,    -1,  3789,  3790,    -1,   224,    -1,
      -1,    -1,    -1,   273,   274,    -1,  4174,  4175,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3550,    -1,   629,    -1,    -1,
    3814,    -1,  3557,   293,    -1,    -1,    -1,   297,    -1,  3823,
      -1,    -1,    -1,    -1,  4202,    -1,   262,   307,    -1,   309,
      -1,  5687,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
    3585,    -1,    -1,    -1,    -1,    -1,    -1,   327,   328,   671,
     142,    -1,    -1,    -1,    -1,    -1,    -1,  4235,    -1,    -1,
     152,    -1,    -1,  5719,   344,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,   697,   356,    -1,    -1,   171,
      -1,   361,    -1,   418,   419,   420,    -1,    -1,   368,    -1,
    2865,   327,   427,   428,   429,   430,    -1,    -1,  3643,   434,
     435,    -1,   437,   438,    -1,    -1,    -1,    -1,    -1,   389,
     390,    -1,   204,    -1,    -1,  3919,    -1,    -1,  4296,  4297,
      -1,    -1,  3926,  3927,    -1,    -1,   406,    -1,   408,    -1,
      -1,    -1,   412,   413,    -1,    -1,    -1,    -1,    -1,   419,
      -1,    -1,   422,   423,    -1,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     262,  4349,   408,    -1,    -1,    -1,  4354,   413,    -1,  4357,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4369,  4370,   473,    -1,    -1,    -1,   433,    -1,   435,
      -1,   481,   438,    -1,    -1,   485,    -1,   487,    -1,  3754,
      -1,   833,    -1,    -1,    -1,    -1,  2126,   839,   840,    -1,
      -1,    -1,   844,    -1,    -1,    -1,    -1,    -1,  3773,    -1,
      -1,    -1,    -1,    -1,    -1,   327,  4414,   473,  3013,    -1,
      -1,    -1,    -1,    -1,  4422,   481,    -1,  2157,    -1,   485,
    3795,   487,    -1,    -1,    -1,   405,   406,   407,   408,   409,
       7,    -1,    -1,   413,  4442,  2175,  2176,    -1,    -1,   419,
     420,    -1,   422,    -1,    -1,    -1,    23,   427,   428,   429,
     430,    28,    -1,   433,    -1,   435,  3061,   437,   438,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      -1,  4489,    -1,    -1,    -1,    -1,   408,    -1,    -1,    -1,
     412,   413,    -1,    -1,  4502,  4503,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,  4142,    -1,
      -1,   433,    -1,   435,  4148,    -1,   438,     7,    -1,     9,
     442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4537,
      -1,  4539,    22,    -1,  4542,    -1,    26,  4545,  4546,    -1,
    4548,    -1,  4550,    -1,    -1,    35,    -1,    -1,    -1,  3924,
      -1,   473,    -1,    -1,   131,    -1,    -1,    -1,    -1,   481,
      -1,    -1,   139,   485,    -1,   487,  4574,  4575,  3173,   406,
    3945,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,
      -1,  4589,   419,    -1,    -1,   422,   423,   424,   425,   426,
      -1,  4599,    -1,    -1,    -1,  4229,   433,    -1,   435,  4607,
      -1,   438,   179,    -1,  4612,    -1,  3981,   184,    -1,    -1,
    4618,    -1,    -1,    -1,    -1,  4623,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,   114,  4000,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2375,    -1,    -1,   128,   216,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4655,    -1,   139,
      -1,  4659,  4660,    -1,  4662,  4663,    -1,    -1,   235,   236,
      -1,   238,     1,    -1,    -1,  4299,  4300,    -1,   245,    -1,
      -1,   161,    -1,    -1,  4682,    14,  4684,    16,  4686,    -1,
     257,  4689,  4057,    -1,    -1,    -1,    -1,    -1,    -1,   179,
      29,   268,    -1,    -1,    -1,  2435,  2436,   187,    -1,   189,
    4708,    -1,  4710,  2443,    -1,    -1,   196,   142,   198,   199,
      -1,    -1,    51,   203,    -1,    -1,    -1,   152,    -1,    -1,
      -1,   211,    -1,    -1,    63,    -1,   216,    -1,   305,    -1,
      -1,   221,    71,    -1,   224,    -1,   171,    76,    -1,    -1,
      -1,    -1,    81,  4118,    -1,    -1,    -1,   324,   238,    -1,
      -1,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,  4767,
      -1,    -1,    -1,   102,    -1,   405,   406,   407,   408,   204,
      -1,    -1,    -1,   413,    -1,   415,    -1,    -1,  4786,   419,
     420,    -1,    -1,   360,  4792,   362,   363,   427,   428,   429,
      -1,   130,    -1,   433,    -1,   435,   436,   437,   438,    -1,
      -1,    -1,    -1,   142,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,   152,  4448,    -1,    -1,    -1,    -1,    -1,
    4828,  4829,    -1,    -1,    -1,  4833,   316,   262,    -1,    -1,
      -1,    -1,   171,    -1,   324,   174,    -1,   176,   273,   274,
     179,    -1,    -1,    -1,  4852,    -1,    -1,   337,  4856,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,
     360,    -1,    -1,   363,    -1,   365,   405,   406,   407,   408,
     409,    -1,   411,    -1,   413,    -1,   415,  1339,   378,    -1,
     419,   420,   327,    -1,    -1,    -1,  4904,  4905,   427,   428,
     429,   430,   431,    -1,   433,   244,   435,   436,   437,   438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4297,   262,    -1,    -1,  4934,  4935,  4936,  4937,
      -1,    -1,    -1,    -1,   273,   274,    -1,  1787,    -1,    -1,
    1790,    -1,    -1,    -1,    -1,  3550,    -1,    -1,    -1,    -1,
    4958,    -1,    -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,  4973,  4974,    -1,   307,   308,
     309,   416,    -1,   408,   419,   420,    -1,    -1,   413,    -1,
      -1,    -1,   427,   428,   429,   430,    -1,   432,   327,   328,
     435,    -1,   437,   438,    -1,  4370,    -1,    -1,   433,    -1,
     435,    -1,    -1,   438,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,    -1,    -1,    -1,    -1,   356,    -1,  1869,
      -1,    -1,   361,    -1,    -1,   405,   406,   407,   408,    -1,
      -1,    -1,    -1,   413,    -1,   415,    -1,    -1,   473,   419,
     420,   476,    -1,    -1,    -1,    -1,   481,   427,   428,   429,
     485,    -1,   487,   433,    -1,   435,   436,   437,   438,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
      -1,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1559,  1560,    -1,
      -1,  1563,  5120,  5121,  5122,    -1,    -1,    -1,    -1,    -1,
    5128,    -1,    -1,    -1,    -1,  2865,    -1,    -1,    -1,  5137,
      -1,    -1,    -1,    -1,   473,  5143,    -1,    -1,    -1,    -1,
      -1,    -1,   481,    -1,    -1,  5153,   485,    -1,   487,    -1,
    5158,    -1,    -1,  5161,    -1,  2005,    -1,    -1,    -1,    -1,
      -1,    -1,  1614,    -1,  4539,    -1,    -1,  1619,  1620,    -1,
    5178,    -1,    -1,    -1,    -1,    -1,  5184,    -1,    -1,   405,
     406,   407,   408,    -1,    -1,  1880,  2036,   413,  1883,    -1,
    1885,  5199,  5200,   419,   420,    -1,    -1,    -1,    -1,    -1,
    4575,   427,   428,   429,  2054,    -1,    -1,   433,    -1,   435,
    2060,   437,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     0,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,  1936,   420,    18,   422,    -1,  5254,    -1,    -1,   427,
     428,   429,   430,   431,   432,    -1,   434,    -1,   436,   437,
      -1,    -1,    -1,    -1,  5272,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  3013,    -1,    50,  5284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   476,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  5314,    -1,   405,   406,
     407,   408,   409,    -1,   411,    -1,   413,    -1,    -1,    -1,
      -1,  3061,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,  4710,   433,    -1,   435,  5347,
     437,   438,   439,    -1,    -1,   406,    -1,   408,    -1,    -1,
      -1,  5359,   413,    -1,    -1,    -1,    -1,    -1,   419,    -1,
      -1,   422,   423,    -1,   425,   426,   427,   428,  5376,   430,
     431,   432,   433,   434,   435,   436,  3981,   438,    -1,  2074,
     155,    -1,   405,   406,   407,   408,   409,    -1,   411,    -1,
     413,   414,   415,    -1,  5402,   418,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,   411,    -1,   413,
      -1,   415,    -1,  3173,   418,   419,   420,    -1,    -1,    -1,
      -1,   216,    -1,   427,   428,   429,   430,   431,   223,   433,
     434,   435,   436,   437,   438,    -1,   405,   406,   407,   408,
    5468,    -1,   411,    -1,    -1,  5473,    -1,    -1,    -1,    -1,
     419,   420,    -1,   248,   249,    -1,    -1,  4852,   427,   428,
     429,    -1,   431,  5491,    -1,    -1,   435,    -1,   437,   438,
     265,   266,    -1,   268,    -1,  5503,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,   290,    -1,    -1,   413,   294,
      -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,  2224,
      -1,   306,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,  5553,    -1,    -1,    -1,    -1,
     325,    -1,    -1,    -1,    -1,  2250,    -1,  2252,    -1,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,  5577,
     413,   414,    -1,    -1,    -1,    -1,   419,   420,    -1,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   363,   364,
     433,   366,   435,    -1,   437,   438,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   379,   413,   381,   415,  5616,    -1,
     385,   419,   420,    -1,    -1,  5249,    -1,    -1,    -1,   427,
     428,   429,   430,  2473,    -1,   433,    -1,   435,   436,   437,
     438,    -1,    -1,    -1,    -1,    -1,   411,    -1,  5646,    -1,
      -1,    -1,    -1,    -1,    -1,  5653,   421,    -1,   423,    -1,
     425,   426,   427,   428,    -1,   430,   431,    -1,    -1,   434,
     435,    -1,   437,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,  2126,    -1,   451,   452,   453,  5687,
      -1,   456,    -1,    -1,   459,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5703,    -1,    -1,    -1,  5707,
      -1,    -1,    -1,    -1,    -1,  2157,  2556,    -1,    -1,  5717,
      -1,  5719,  5720,   488,    -1,    -1,    -1,    -1,   493,   494,
     495,   496,    -1,  2175,  2176,    -1,    -1,   502,    -1,    -1,
      -1,    -1,    -1,    -1,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,   530,    -1,    -1,    -1,    -1,
      -1,    -1,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,    -1,    -1,    -1,   551,    -1,   553,    -1,
     555,    -1,    -1,   558,   559,    -1,   561,    -1,   563,   564,
     565,   566,   567,    -1,   569,    -1,    -1,    -1,   573,    -1,
    2650,    -1,   577,    -1,    -1,    -1,    -1,   582,    -1,    -1,
    3550,    -1,    -1,   588,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,   411,    -1,   413,    -1,    -1,    -1,    -1,
     605,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,   431,   619,   433,    -1,   435,    -1,   437,
     438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,    -1,    -1,    -1,   653,   413,
    5514,   656,   657,   658,   659,   419,   420,   662,    -1,    -1,
      -1,   666,    -1,   427,   428,   429,   671,    -1,   673,   433,
      -1,   435,   677,   437,   438,  2600,   681,   682,   683,    -1,
      -1,   686,    -1,   688,   689,    -1,   691,   692,   693,   694,
      -1,    -1,   697,  2375,   699,    -1,   701,    -1,   703,   704,
      -1,   706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5314,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,   413,
     414,    -1,    -1,    -1,    -1,   419,   420,   732,   733,   423,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,   433,
      -1,   435,    -1,   437,   438,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2435,  2436,    -1,    -1,    -1,   763,    -1,
      -1,  2443,    -1,    -1,    -1,    -1,    -1,    -1,   773,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   782,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,
      -1,    -1,   427,   428,   429,   430,    -1,    -1,   433,    -1,
     435,   436,   437,   438,    -1,    -1,    -1,  2732,   405,   406,
     407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   419,   420,    -1,   422,   423,   832,   833,    -1,
     427,   428,   429,   430,   839,   840,    -1,    -1,   435,   844,
     437,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   868,   869,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,    -1,    -1,    -1,  2813,  2814,
      -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   919,  2995,   921,   922,   923,   924,
     925,    -1,    -1,    -1,    -1,   930,    -1,    -1,   933,   934,
     935,   936,   937,   938,    -1,    -1,    -1,    -1,    -1,  3019,
     405,   406,   407,   408,   409,    -1,    -1,    -1,   413,    -1,
      -1,    63,    -1,    -1,   419,   420,    -1,   962,    -1,    -1,
      -1,    -1,   427,   428,   429,   430,    -1,    -1,   433,    -1,
     435,    83,   437,   438,   405,   406,   407,   408,   409,    -1,
     985,    -1,   987,   988,   989,   990,   991,    -1,   419,   420,
     995,   996,   997,   998,   999,  1000,   427,   428,   429,   430,
      -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,    -1,
      -1,  3981,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,  1047,    -1,    -1,  2970,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,  1062,    -1,   171,
     415,    -1,    -1,   175,   419,   420,    -1,   179,    -1,    -1,
     182,    -1,   427,   428,   429,   430,  1081,    -1,    -1,    -1,
     435,   436,   437,   438,    -1,    -1,    -1,    -1,   200,    -1,
      -1,    -1,   204,  3018,    -1,    -1,    -1,   209,    -1,   405,
     406,   407,   408,   409,   216,   411,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,  1121,  1122,  1123,  1124,
     232,   427,   428,   429,   430,   431,   238,    -1,    -1,   435,
      -1,   437,   438,   245,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,   273,   274,    -1,   413,    -1,    -1,    -1,    -1,    -1,
     419,   420,    -1,   285,   286,    -1,    -1,    -1,   427,   428,
     429,   430,    -1,  2865,   433,    -1,   435,  3267,   437,   438,
      -1,   303,    -1,    -1,  3274,    -1,    -1,    -1,    -1,    -1,
    3280,  2883,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,
      -1,    -1,   324,    -1,    -1,   327,    -1,    -1,     7,    -1,
       9,    -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,
     342,   343,    -1,    22,   417,    -1,   419,   420,    -1,    -1,
     352,    -1,    -1,    -1,   427,   428,   429,   430,   360,    -1,
      -1,   363,   435,    -1,   437,   438,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3195,    -1,    -1,    -1,    -1,  3200,   388,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1293,    -1,
    3370,    -1,    -1,    -1,    -1,    -1,   408,    -1,    -1,  1304,
      -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1315,    -1,  1317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   433,   111,   435,  3249,    -1,   438,    -1,    -1,    -1,
      -1,  3013,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
     139,    -1,  3277,  3433,    -1,    -1,  3281,    -1,    -1,    -1,
      -1,   473,   151,    -1,    -1,    -1,    -1,  1372,    -1,   481,
      -1,    -1,   161,   485,   163,   487,    -1,    -1,    -1,  3061,
     169,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,  3474,   184,    -1,    -1,   187,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1414,
    1415,    -1,    -1,    -1,    -1,  1420,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3350,    -1,   216,    -1,    -1,
      -1,    -1,    -1,   222,  3359,  3360,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,    -1,   238,
      -1,    -1,  3377,    -1,    -1,    -1,   245,  1462,   247,  1464,
      -1,  1466,  1467,  1468,    -1,    -1,  1471,  1472,    -1,  1474,
    1475,  1476,  1477,  1478,  1479,  1480,    -1,  1482,    -1,    -1,
      -1,    -1,  1487,    -1,    -1,    -1,  3566,    -1,    -1,    -1,
      -1,  3173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,  1523,  1524,
      -1,    -1,    -1,  3448,  1529,    -1,   315,    -1,   317,    -1,
      -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,    -1,   328,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1554,
      -1,    -1,   341,    -1,    -1,  1560,    -1,    -1,  1563,  3484,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,    -1,    -1,   363,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,    -1,
     420,    -1,   422,    -1,    -1,    -1,  1601,   427,   428,   429,
     430,   431,   432,  3683,   434,    -1,   436,   437,    -1,  1614,
      -1,    -1,    -1,    -1,  1619,  1620,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1637,    -1,    -1,    -1,    -1,    -1,  1643,  1644,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,
      -1,    10,    -1,    -1,    13,    -1,    -1,    -1,    -1,    18,
      -1,    -1,  3597,    -1,    -1,    -1,    25,    -1,    -1,    -1,
    1685,  1686,    -1,  1688,    33,  3610,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1745,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,
    1755,  3831,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1769,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1780,  1781,   126,    -1,    -1,
      -1,    -1,  1787,    -1,    -1,  1790,    -1,    -1,    -1,    -1,
      -1,    -1,  1797,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,  1806,    -1,   152,  1809,    -1,    -1,    -1,  1813,    -1,
      -1,    -1,    -1,   162,    -1,   164,    -1,    -1,    -1,    -1,
      -1,  3901,   171,    -1,  1829,    -1,    -1,    -1,    -1,   178,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   204,  1861,    -1,    -1,    -1,
      -1,    -1,    -1,   212,  1869,   214,    -1,  1872,  3550,  1874,
      -1,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,    -1,    -1,  3808,    -1,  3810,    -1,    -1,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   262,  1919,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4006,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1945,  1946,    -1,    -1,    -1,    -1,    -1,  1952,  1953,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1974,
     319,  1976,    -1,    -1,    -1,    -1,    -1,    -1,   327,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2005,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3935,    -1,    -1,    -1,    -1,   364,  3941,    -1,    -1,    -1,
      -1,   370,    -1,   372,    -1,    -1,  4106,    -1,    -1,    -1,
      -1,  2036,    -1,  2038,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,
      -1,    -1,   411,    -1,    -1,  2070,  3991,    -1,    -1,    -1,
    3995,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2086,   431,    -1,    -1,    -1,   435,    -1,    -1,   438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4184,    -1,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2126,    -1,    -1,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,    -1,    -1,   487,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
      -1,    -1,  2157,    -1,    -1,  2160,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2171,    -1,    -1,    -1,
    2175,  2176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4140,    -1,    -1,    -1,  4144,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4324,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4185,  4186,    -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,
    4350,  4351,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2294,
      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,  2303,  3981,
      -1,    -1,    -1,    -1,  2309,    -1,  4386,  2312,    -1,  4389,
     171,    -1,    -1,  2318,   175,    -1,  2321,    -1,   179,    -1,
      -1,   182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4410,    -1,    -1,    -1,  4414,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,
      -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,    -1,  2421,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,   286,    -1,    -1,    -1,    -1,
    2435,  2436,    -1,    -1,    -1,    -1,    -1,    -1,  2443,    -1,
      -1,    -1,   303,    -1,    -1,    -1,  2451,    -1,  2453,    -1,
    2455,  2456,  2457,    -1,    -1,    -1,    -1,   318,    -1,    -1,
      -1,    -1,    -1,   324,    -1,    -1,   327,    -1,  4548,    -1,
      -1,    -1,  4397,  4398,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   342,   343,  4408,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
      -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2515,  2516,    -1,    -1,    -1,  2520,  2521,  2522,  2523,  2524,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,  2534,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2549,  2550,  2551,   408,    -1,  2554,
    2555,  2556,   413,  2558,   415,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4496,   433,    -1,   435,   436,    -1,   438,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2591,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2609,    -1,    -1,    -1,  2613,    -1,
      -1,    -1,   473,    -1,  2619,  2620,    -1,    -1,    -1,  2624,
     481,    -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,
      -1,    -1,  4712,    -1,    -1,    -1,    -1,    -1,  4563,    -1,
      -1,    -1,    -1,    -1,    -1,  2650,    -1,    -1,    -1,    -1,
      -1,    -1,  2657,  2658,    -1,    -1,  2661,  4582,    -1,    -1,
    2665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2676,    12,  2678,    -1,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,
      -1,  2706,  2707,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4792,    -1,    -1,  4795,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2731,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4815,  4661,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4830,    -1,  4677,  4833,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2768,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2776,    -1,    -1,   114,    -1,  4701,    -1,  4703,    -1,
      -1,  2786,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,
      -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2855,  2856,    -1,    -1,    -1,  2860,    -1,    -1,    -1,    -1,
    2865,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,    -1,
      -1,   211,    -1,    -1,    -1,    -1,    -1,    -1,  2883,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4973,    -1,   235,    -1,  4822,  2903,  2904,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   262,    -1,    -1,  5005,  2931,  2932,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5021,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4884,
    4885,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,    -1,    -1,
    2995,  2996,  2997,  2998,  2999,    -1,  3001,    -1,    -1,    -1,
      -1,    -1,    -1,  3008,   344,  3010,    -1,    -1,  3013,    -1,
      -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
      -1,    -1,  5112,    -1,    -1,    -1,  3041,    -1,    -1,    -1,
      -1,    -1,    -1,  4968,    -1,    -1,    -1,  4972,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,  3061,  5137,    -1,  5139,
      -1,  5141,    -1,  5143,    -1,    -1,    -1,    -1,   408,   409,
      -1,    -1,    -1,    -1,    -1,   415,   416,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     430,    -1,   432,    -1,    -1,   435,   436,    -1,   438,    -1,
      -1,    -1,   442,    -1,    -1,   445,  3111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3136,  3137,   473,  3139,    -1,   476,   477,    -1,    -1,
      -1,   481,    -1,  3148,    -1,    -1,    -1,   487,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  5242,  3168,  3169,    -1,    -1,    -1,  3173,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3189,  3190,    -1,    -1,  5268,    -1,
    5270,    -1,    -1,    -1,  5274,    -1,    -1,    -1,    -1,    -1,
      -1,  3206,    -1,    -1,  3209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5305,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3280,    -1,    -1,    -1,  5204,
      -1,    -1,    -1,    -1,    -1,  3290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5375,  5376,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3314,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3348,  3349,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3375,  3376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5470,    -1,    -1,    -1,  5474,    -1,    -1,  3402,    -1,  3404,
      -1,  3406,    -1,    -1,    -1,    -1,  3411,    -1,  3413,    -1,
    3415,    -1,    -1,    -1,    -1,    -1,    -1,  5342,  5343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3438,    -1,  3440,    -1,  3442,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5373,    -1,
    5530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5540,  3466,  3467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3480,    -1,    -1,  5403,    -1,
      -1,    -1,    -1,    -1,    -1,  5565,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,
      13,    -1,    -1,    -1,    -1,    18,  3521,  3522,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3547,    -1,    -1,  3550,    -1,    -1,    -1,    -1,
      -1,    -1,  3557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3566,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,  3577,    -1,  3579,  3580,  5656,  3582,  5658,  3584,
    3585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,    -1,    -1,    -1,    -1,  3600,    -1,  3602,    -1,    -1,
      -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5701,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
    3635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3643,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
      -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,   171,    -1,
      -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,  3683,    -1,
      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,    -1,    -1,  3734,
      -1,    -1,    -1,    -1,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,  3754,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3773,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3791,  3792,  3793,  3794,
    3795,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3817,  3818,    -1,    -1,   319,    -1,    -1,  3824,
      -1,    -1,    -1,    -1,   327,    -1,  3831,    -1,    -1,  3834,
      -1,    -1,    -1,    -1,  3839,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3847,    -1,    -1,    -1,    -1,    -1,   351,    12,
      -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,  3864,
      -1,   364,    -1,    -1,    -1,    -1,    -1,   370,    -1,   372,
      -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3895,  3896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,   408,    -1,    -1,   411,    -1,
      -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,    -1,  3924,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,  3939,   438,    -1,    -1,    -1,    -1,
    3945,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3955,   114,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
     473,    -1,    -1,    -1,   477,    -1,  3981,    -1,   481,   142,
      -1,    -1,    -1,    -1,   487,  3990,    -1,    -1,    -1,   152,
      -1,    -1,    -1,    -1,    -1,  4000,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,   171,    -1,
      -1,    -1,    -1,    -1,    10,    -1,    -1,    13,    -1,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4035,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    35,
     203,   204,    -1,    -1,    -1,    -1,    -1,    -1,   211,    -1,
    4055,    -1,  4057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,   262,
      -1,  4106,    -1,    -1,    -1,  4110,    -1,    -1,   104,    -1,
      -1,    -1,    -1,  4118,    -1,    -1,    -1,  4122,    -1,    -1,
      -1,   284,    -1,    -1,    -1,  4130,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,  4141,    -1,    -1,   302,
      -1,  4146,    -1,    -1,    -1,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   327,     0,   162,    -1,   164,  4174,
    4175,    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,
      -1,   344,   178,    18,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   188,    -1,    -1,    -1,    -1,  4202,    -1,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    50,   212,    -1,   214,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,   240,   408,   409,    -1,    -1,   245,
      -1,    -1,    -1,   416,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   262,   430,    -1,   432,
      -1,    -1,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,
      -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4296,  4297,    -1,    -1,    -1,    -1,    -1,    -1,  4304,
      -1,    -1,  4307,    -1,    -1,    -1,    -1,    -1,    -1,   305,
     473,    -1,    -1,   476,   477,  4320,    -1,    -1,   481,  4324,
     155,    -1,    -1,   319,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   327,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4369,  4370,    -1,    -1,   364,    -1,
      -1,    -1,    -1,    -1,   370,    -1,   372,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,    -1,    -1,  4392,   223,    -1,
    4395,  4396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   408,   248,   249,   411,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     265,   266,    -1,    -1,    -1,   431,    -1,    -1,    -1,   435,
      -1,    -1,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   290,    -1,    -1,    -1,   294,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,    -1,
      -1,   306,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,    -1,
     325,   487,    -1,    -1,    -1,    -1,    -1,  4502,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
      -1,   366,  4537,    -1,  4539,    -1,    -1,  4542,    -1,    -1,
    4545,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4564,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4574,
    4575,    -1,    -1,    -1,    -1,    -1,   411,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,    -1,   430,   431,    -1,  4603,    -1,
     435,    -1,   437,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,    -1,   453,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4655,    -1,    -1,   488,    -1,    -1,    -1,    -1,   493,   494,
     495,   496,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
      -1,    -1,    -1,    -1,   509,   510,   511,  4682,   513,  4684,
      -1,  4686,    -1,   518,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,   530,    -1,    -1,    -1,   534,
     535,   536,    -1,   538,   539,  4710,   541,   542,   543,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,    -1,
     555,    -1,    -1,   558,   559,    -1,    -1,    -1,   563,   564,
     565,   566,   567,    -1,   569,    -1,    -1,    -1,   573,    -1,
      -1,    -1,   577,    -1,    -1,    -1,    -1,   582,    -1,    -1,
      -1,    -1,    -1,   588,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   619,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4800,    -1,    -1,  4803,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4812,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   653,    -1,
      -1,   656,   657,   658,   659,    -1,    -1,   662,    -1,    -1,
      -1,   666,    -1,    -1,    -1,    -1,   671,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   681,  4852,   683,    -1,
      -1,   686,    -1,   688,   689,    -1,   691,   692,   693,   694,
      -1,    -1,   697,    -1,   699,    -1,   701,    -1,   703,   704,
      -1,   706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   732,   733,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   773,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   782,    -1,    -1,
      -1,    -1,    -1,  4958,    -1,    -1,    -1,    -1,    -1,    -1,
    4965,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   832,    -1,    -1,
      -1,    -1,    -1,    -1,   839,   840,    -1,    -1,    -1,   844,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   868,   869,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   919,    -1,   921,   922,   923,   924,
     925,    -1,    -1,    -1,    -1,   930,    -1,    -1,   933,   934,
     935,   936,   937,   938,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5120,  5121,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   962,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5153,    -1,
     985,    -1,   987,   988,   989,   990,   991,    -1,    -1,    -1,
     995,   996,    -1,    -1,   999,  1000,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,  1047,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1062,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    63,  1081,    -1,    -1,  5254,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    76,    -1,
      -1,    -1,    -1,    81,    -1,    -1,    -1,  5272,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,  1121,  1122,  1123,  1124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5314,
      -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   171,  5359,    -1,   174,    -1,   176,    -1,
      -1,   179,    -1,  5368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   262,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,  1293,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1304,
      -1,    -1,    -1,    -1,    -1,   293,    -1,    -1,    -1,    -1,
    1315,    -1,  1317,    -1,    -1,    -1,    -1,    -1,    -1,   307,
     308,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,    -1,    -1,    -1,  1372,   356,    -1,
      -1,    -1,    -1,   361,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1414,
    1415,    -1,    -1,    -1,    -1,  1420,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,    -1,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,    -1,    -1,    -1,    -1,    -1,    -1,  1462,    -1,  1464,
      -1,  1466,  1467,  1468,    -1,    -1,  1471,  1472,    -1,  1474,
    1475,  1476,  1477,  1478,  1479,  1480,    -1,  1482,    -1,    -1,
      -1,    -1,  1487,    -1,    -1,   473,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  5687,    -1,    -1,    -1,    -1,    -1,  1523,  1524,
      -1,    -1,    -1,    -1,  1529,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5719,    -1,    -1,    -1,    -1,  1554,
      -1,    -1,    -1,    -1,    -1,  1560,    -1,    -1,  1563,    -1,
     811,   812,   813,   814,   815,   816,   817,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1601,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1614,
      -1,    -1,    -1,    -1,  1619,  1620,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1637,    -1,    -1,    -1,    -1,    -1,  1643,  1644,
      -1,   892,   893,   894,   895,   896,   897,   898,   899,   900,
     901,   902,   903,   904,   905,   906,   907,   908,   909,   910,
     911,   912,   913,   914,   915,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1685,  1686,    -1,  1688,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,
     971,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1745,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    1755,    -1,  1003,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1769,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1780,  1781,    -1,    -1,    63,
      -1,    -1,    -1,    -1,    -1,  1790,    -1,    71,    -1,    -1,
      -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1813,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1829,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1861,    -1,   142,    -1,
      -1,    -1,    -1,    -1,  1869,    -1,    -1,  1872,   152,  1874,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   171,    -1,    -1,
     174,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1919,    -1,    -1,    -1,    -1,    -1,
     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,
    1945,  1946,    -1,    -1,    -1,    -1,    -1,  1952,  1953,    -1,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,  1974,
      -1,    -1,    -1,    -1,    -1,  1980,    -1,    -1,   262,    -1,
      -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,   273,
     274,    -1,    71,    -1,    -1,    -1,    -1,    76,    -1,    -1,
    2005,    -1,    81,    -1,    -1,    -1,    -1,    86,    -1,   293,
      -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   307,    -1,   309,    -1,    -1,    -1,    -1,
      -1,  2036,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     344,    -1,    -1,   142,    -1,  2070,    -1,   351,   147,  1320,
    1321,  1322,   356,   152,    -1,    -1,    -1,   361,    -1,    -1,
      -1,  2086,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   171,    -1,    -1,   174,    -1,   176,    -1,  1350,
    1351,  1352,  1353,  1354,  1355,  1356,  1357,  1358,  1359,  1360,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2126,   406,    -1,   408,   204,    -1,    -1,   412,   413,
      -1,   415,    -1,    -1,    -1,   419,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,
      -1,   435,  2157,    -1,   438,  2160,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,  2171,    -1,    -1,    -1,
    2175,  2176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2184,
      -1,    -1,    -1,   262,    -1,    -1,    -1,    -1,    -1,   473,
    2195,    -1,    -1,    -1,   273,   274,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,    -1,
     309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1489,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,    -1,  1506,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,    -1,    -1,    -1,    -1,   356,    -1,    -1,
      -1,    -1,   361,    -1,    -1,    -1,    -1,    -1,    -1,  2294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2303,    -1,
      -1,    -1,    -1,    -1,  2309,    -1,    -1,  2312,    -1,    -1,
      -1,    -1,    -1,  2318,    -1,    -1,  2321,    -1,    -1,    -1,
      -1,  2326,  2327,    -1,    -1,    -1,    -1,   406,    -1,   408,
      -1,    -1,    -1,   412,   413,    -1,   415,    -1,    -1,    -1,
     419,    -1,    -1,   422,   423,    -1,   425,   426,    -1,    -1,
      -1,    -1,    -1,    -1,   433,    -1,   435,    -1,    -1,   438,
     439,    -1,  1613,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1634,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,
     479,   480,   481,    -1,    -1,    -1,   485,    -1,   487,    -1,
      14,    -1,    16,    -1,    18,    -1,  2421,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    2435,  2436,    -1,    -1,    -1,    -1,    -1,    -1,  2443,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2451,    -1,  2453,    -1,
    2455,  2456,  2457,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
      -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2516,    -1,    -1,    -1,  2520,  2521,  2522,  2523,  2524,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,  2534,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,
      -1,    -1,    -1,   147,  2549,  2550,  2551,    -1,   152,  2554,
    2555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1812,    -1,    -1,    -1,    -1,    -1,   171,    -1,    -1,
     174,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2591,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     204,    -1,    -1,    -1,  2609,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2619,  2620,    -1,    -1,    -1,  2624,
      -1,    -1,    -1,    -1,     0,    -1,    14,  1878,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     244,    29,    -1,    -1,    -1,  2650,    -1,    -1,    -1,    -1,
    1901,    -1,  2657,  2658,    -1,    -1,    -1,    -1,   262,    -1,
    2665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,  2676,    -1,  2678,    50,    63,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    76,   293,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,   302,    -1,
      -1,  2706,  2707,   307,    -1,   309,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   327,   328,    -1,  2731,    -1,    -1,    -1,
      -1,    -1,  1983,  1984,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   351,    -1,    -1,
      -1,    -1,   356,    -1,   142,    -1,    -1,   361,    -1,   147,
      -1,    -1,    -1,  2768,   152,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,
      -1,  2786,    -1,   171,    -1,    -1,   174,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2047,    -1,    -1,    -1,
      -1,    -1,   406,    -1,   408,    -1,    -1,    -1,   412,   413,
      -1,   415,    -1,    -1,    -1,   419,   204,    -1,   422,   423,
      -1,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433,
      -1,   435,    -1,    -1,   438,   439,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,
    2855,  2856,    -1,  2104,    -1,  2860,   244,    -1,    -1,    -1,
    2865,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,
      -1,    -1,    -1,   249,   262,    -1,    -1,   481,    -1,    -1,
     256,   485,    -1,   487,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    -1,    -1,    -1,    -1,  2903,  2904,
      -1,    -1,    -1,    -1,    -1,   293,    -1,    -1,    -1,    -1,
     286,    -1,    -1,    -1,   290,    -1,    -1,    -1,   294,   307,
      -1,   309,    -1,    -1,    -1,    -1,  2931,  2932,   316,    -1,
     306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2189,   327,
     328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,    -1,    -1,     0,    -1,   356,    -1,
      -1,    -1,    -1,   361,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2995,  2996,  2997,  2998,  2999,    -1,  3001,    -1,    -1,    -1,
      -1,    -1,    -1,  3008,    -1,  3010,    -1,    -1,  3013,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,   406,    -1,
     408,    -1,    -1,    -1,   412,   413,    -1,   415,    -1,    -1,
      -1,   419,    -1,    -1,   422,   423,  3041,   425,   426,    -1,
      -1,    -1,    -1,    -1,    -1,   433,    -1,   435,    -1,    -1,
     438,   439,    -1,    -1,    -1,    -1,  3061,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   447,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   459,    -1,   473,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
      -1,    -1,    -1,    -1,    -1,    -1,  3111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3136,  3137,    -1,  3139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3168,  3169,    -1,    -1,    -1,  3173,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   553,    -1,    -1,
      -1,    -1,    -1,    -1,  3189,  3190,    -1,    -1,    -1,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   573,    -1,    -1,
      -1,    -1,    -1,    -1,  3209,    -1,   582,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   249,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   619,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,  2509,    -1,
     294,    -1,    -1,    -1,    -1,    -1,  3271,    -1,    -1,    -1,
     646,    -1,   306,    -1,    -1,  3280,    -1,  2528,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3290,    -1,    -1,    -1,   665,
      -1,    -1,   668,    -1,    -1,   671,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   697,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3348,  3349,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3375,  3376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3402,    -1,  3404,
     434,  3406,    -1,   437,    -1,    -1,  3411,    -1,  3413,    -1,
    3415,    -1,    -1,   447,    -1,    -1,    -1,    -1,   452,    -1,
      -1,    -1,   456,    -1,    -1,   459,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3438,    -1,  3440,    -1,  3442,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   833,    -1,    -1,
      -1,  3466,  3467,   839,   840,    -1,    -1,    -1,   844,    -1,
      -1,    -1,    -1,    -1,    -1,  3480,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,    -1,  3521,  3522,    -1,   553,
      -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   573,
      -1,    -1,  3547,    -1,    -1,  3550,    -1,    -1,   582,    -1,
      -1,    -1,  3557,    -1,   588,    -1,    -1,    -1,    -1,    -1,
      -1,  3566,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3577,    -1,  3579,  3580,    -1,  3582,    -1,  3584,
    3585,    -1,    -1,    -1,    -1,   619,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3600,    -1,  3602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   990,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3643,  2890,
      -1,    -1,    -1,    -1,    -1,    -1,  2897,    -1,    -1,    -1,
      -1,    -1,   686,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   697,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3683,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   733,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3734,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   782,  3754,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3773,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3791,  3792,  3793,  3794,
    3795,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   833,
      -1,    -1,    -1,    -1,    -1,   839,   840,    -1,    -1,    -1,
     844,    -1,  3817,    -1,    -1,    -1,    -1,  3068,  3069,  3070,
    3071,  3072,  3073,    -1,    -1,    -1,    -1,    -1,    -1,  3834,
      -1,    -1,    -1,    -1,    -1,   869,    -1,    -1,  3843,    -1,
      -1,    -1,  3847,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3864,
      -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   919,    -1,    -1,    -1,    -1,
    3895,  3896,    -1,    -1,    -1,    -1,   930,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,  3924,
      -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,  3939,    -1,    -1,    -1,    -1,  1315,
    3945,  1317,    -1,  1319,    -1,    -1,    -1,    -1,    -1,    -1,
    3955,    -1,    -1,   987,    -1,    -1,   990,    -1,    -1,    -1,
      -1,   995,   996,    -1,    -1,    -1,  1000,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3981,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,
      -1,    -1,    -1,    -1,   147,  4000,    -1,    -1,    -1,   152,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1047,    -1,    -1,    -1,    -1,   171,    -1,
      -1,   174,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
    4035,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4055,   204,  4057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1121,  1122,  1123,
    1124,   244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4106,    -1,    -1,    -1,  4110,    -1,    -1,    -1,   262,
      -1,    -1,    -1,  4118,    -1,    -1,    -1,  4122,    -1,    -1,
     273,   274,    -1,    -1,    -1,  4130,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4141,    -1,    -1,    -1,
     293,  4146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   307,    -1,   309,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4174,
    4175,    -1,    -1,    -1,   327,   328,    -1,    -1,  1554,    -1,
      -1,    -1,    -1,  1559,  1560,    -1,    -1,  1563,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4202,   351,    -1,
      -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,   361,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1614,    -1,
    3491,    -1,    -1,  1619,  1620,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   406,    -1,   408,    -1,    -1,    -1,   412,
     413,  1637,   415,    -1,    -1,    -1,   419,    -1,    -1,   422,
     423,    -1,   425,   426,    -1,    -1,    -1,    -1,    -1,    -1,
     433,  1315,   435,  1317,    -1,   438,   439,    -1,    -1,    -1,
      -1,    -1,  4297,    -1,    -1,    -1,    -1,    -1,    -1,  4304,
      -1,    -1,  4307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1686,    -1,    -1,    -1,    -1,  4320,    -1,    -1,    -1,    -1,
     473,    -1,    -1,    -1,    -1,    -1,   479,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,    -1,
    3591,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4369,  4370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1755,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4392,    -1,    -1,
    4395,  4396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3650,
      -1,    -1,    -1,    -1,  1780,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1466,  1467,    -1,    -1,    -1,    -1,    -1,    -1,
    1474,  1475,  1476,    -1,    -1,    -1,  1480,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    -1,    -1,  4502,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1554,    -1,    -1,    -1,    -1,    63,  1560,    -1,    -1,  1563,
      -1,    -1,  4537,    71,  4539,    -1,    -1,  4542,    76,    -1,
    4545,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4564,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1601,    -1,  4574,
    4575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1614,    -1,    -1,    -1,    -1,  1619,  1620,    -1,    -1,    -1,
      -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,  4603,    -1,
      -1,    -1,    -1,  1637,   142,    -1,    -1,    -1,    -1,   147,
    1644,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   171,    -1,    -1,   174,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4655,    -1,  1686,    -1,  1688,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4682,    -1,  4684,
      -1,  4686,    -1,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
    1724,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4710,   244,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1755,    -1,    -1,   262,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1780,    -1,    -1,    -1,
    2126,    -1,    -1,  1787,  2130,   293,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2139,    -1,    -1,    -1,    -1,    -1,   307,
      -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2157,    -1,    -1,  2160,    -1,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4803,  2175,
    2176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,   356,    -1,
      -1,    -1,    -1,   361,    -1,    -1,    -1,  1861,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4086,    -1,  4088,    -1,  4090,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4852,    -1,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2238,  2239,  2240,    -1,    -1,    -1,   406,    -1,
     408,    -1,    -1,    -1,   412,   413,    -1,   415,    -1,    -1,
      -1,   419,    -1,    -1,   422,   423,    -1,   425,   426,    -1,
      -1,    -1,    -1,    -1,    -1,   433,    -1,   435,    -1,    -1,
     438,   439,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,  1945,  1946,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2303,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,
    1974,    -1,    -1,   481,  1978,  2321,    -1,   485,    -1,   487,
      -1,    -1,    -1,  4958,    -1,    -1,    -1,    -1,    -1,    -1,
    4965,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2435,
    2436,    -1,    -1,    -1,    -1,    -1,    -1,  2443,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2451,    -1,   223,    -1,  2455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     256,    -1,    -1,    -1,    -1,  5120,  5121,    -1,    -1,    -1,
      -1,    -1,    -1,  2157,    -1,    -1,  2160,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5145,  2175,  2176,    -1,   290,    -1,    -1,    -1,  5153,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2534,    -1,
     306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2554,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2591,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5254,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5272,    -1,  2303,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2657,    -1,    -1,    -1,    -1,    -1,  2321,    -1,    -1,
      -1,   437,  2326,  2327,    -1,   441,    -1,    -1,    -1,    -1,
    2676,   447,    -1,   449,    -1,    -1,   452,    -1,    -1,  5314,
      -1,    -1,    -1,   459,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4591,    -1,    -1,   489,    -1,   491,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5359,    -1,    -1,    -1,    -1,    -1,
    4611,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2421,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2435,  2436,    -1,    -1,    -1,    -1,   553,    -1,  2443,
    2786,    -1,    -1,    -1,    -1,    -1,    -1,  2451,    -1,    -1,
      -1,  2455,    -1,    -1,    -1,    -1,    -1,   573,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   582,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   605,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2515,    -1,   629,  2860,    -1,  2520,  2521,    -1,  2865,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2534,    -1,    -1,    -1,    -1,    -1,    -1,  2883,    -1,    -1,
    2886,    -1,    -1,    -1,   660,  2549,  2550,  2551,    -1,    -1,
    2554,    -1,    -1,    -1,  2558,   671,   672,  2903,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,    -1,
      -1,   697,    -1,    -1,    -1,  2931,    -1,  2591,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2619,  2620,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4855,    -1,    -1,    -1,    -1,    -1,
      -1,   757,    -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,
      -1,    -1,    -1,  2657,    -1,  3001,    -1,    -1,    -1,    -1,
      -1,  2665,  3008,    -1,    -1,    -1,    -1,  3013,    -1,    -1,
      -1,    -1,  2676,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2706,  2707,    -1,    -1,   822,   823,   824,    -1,
    4931,    -1,  5687,    -1,    -1,  3061,   832,   833,    -1,    -1,
      -1,    -1,    -1,   839,   840,    -1,    -1,    -1,   844,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5719,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2768,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2786,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3173,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3189,    -1,    -1,    -1,    -1,    -1,   965,
      -1,    -1,    -1,    -1,    -1,    -1,  2860,    -1,    -1,    -1,
      -1,  2865,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   990,    -1,    -1,    -1,    -1,  2883,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2903,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2931,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3290,    -1,  1062,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2995,    -1,  2997,  2998,  2999,    -1,  3001,    -1,    -1,
      -1,    -1,  3348,    -1,  3008,    -1,    -1,    -1,    -1,  3013,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,  3375,
      -1,    -1,    -1,  1149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3061,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,
    3466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3136,    -1,    -1,  3139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3168,  3169,    -1,    -1,    -1,  3173,
      -1,    -1,    -1,    -1,    -1,  3521,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3189,    -1,    -1,  1304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3206,    -1,  3550,  3209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3584,    -1,
     373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3290,    -1,    -1,    -1,
      -1,    -1,    -1,  1409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   447,    -1,    -1,    -1,    -1,    -1,
     453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3348,    -1,    -1,    -1,    -1,    -1,
    1466,  1467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     553,    -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   565,    -1,    -1,    -1,  3440,    -1,    -1,    -1,
     573,    -1,    -1,  1559,  1560,    -1,    -1,  1563,  3794,   582,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,    -1,    -1,
      -1,    -1,  3466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   605,    -1,    -1,    -1,  3480,    -1,  1594,    -1,
      -1,    -1,    -1,    -1,    -1,  1601,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5714,    -1,    -1,    -1,    -1,  1614,    -1,
      -1,  3847,    -1,  1619,  1620,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3521,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3547,    -1,   678,  3550,    -1,    -1,  3895,
      -1,    -1,    -1,  3557,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   697,    -1,    -1,    -1,    -1,  1685,
      -1,    -1,    -1,  3577,    -1,    -1,    -1,    -1,    -1,    -1,
    3584,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3600,    -1,  3602,   732,
      -1,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1733,    -1,    -1,
      -1,    -1,    -1,    -1,   757,    -1,    -1,    -1,    -1,    -1,
      -1,  3635,    -1,    -1,    -1,  3981,    -1,    -1,    -1,  3643,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   791,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4035,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   832,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4077,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3754,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1879,  4110,    -1,    -1,    -1,    -1,  3773,
      -1,    -1,    -1,    -1,    -1,    -1,  4122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3791,  3792,  3793,
    3794,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3817,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4174,    -1,
    3834,    -1,    -1,    -1,   967,    -1,    -1,  3841,    -1,    -1,
      -1,    -1,    -1,  3847,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4202,    -1,    -1,    -1,
    3864,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3895,    -1,    -1,    -1,    -1,    -1,  1030,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3924,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1062,
      -1,    -1,    -1,    -1,    -1,  3939,    -1,    -1,    -1,    -1,
      -1,  3945,    -1,    -1,  2060,    -1,    -1,    -1,  1081,  2065,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2081,  2082,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3981,    -1,  2095,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4000,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4035,    -1,    -1,    -1,  2151,    -1,    -1,    -1,    -1,
      -1,  2157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4057,    -1,  2171,    -1,    -1,    -1,  2175,
    2176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2191,  2192,    -1,   155,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4110,  2223,    -1,    -1,
      -1,    -1,    -1,    -1,  4118,    -1,    -1,    -1,  4122,    -1,
      -1,    -1,  2238,    -1,    -1,    -1,  4130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4141,    -1,    -1,
      -1,    -1,  4146,    -1,    -1,    -1,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4502,    -1,    -1,    -1,
      -1,    -1,    -1,  1296,    -1,    -1,  1299,    -1,    -1,    -1,
    4174,   248,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2304,  2305,
      -1,  4537,  2308,    -1,    -1,    -1,    -1,    -1,  4202,  4545,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4296,  4297,    -1,    -1,    -1,    -1,    -1,    -1,
    4304,    -1,    -1,  4307,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4320,    -1,    -1,  2435,
    2436,    -1,    -1,    -1,    -1,    -1,    -1,  2443,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2453,    -1,    -1,
    2456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4369,    -1,    -1,    -1,    -1,
     447,    -1,    -1,    -1,    -1,    -1,   453,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4392,    -1,
      -1,  4395,  4396,    -1,    -1,    -1,    -1,    -1,    -1,  2515,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1559,  1560,    -1,    -1,
    1563,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2556,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   542,   543,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   551,    -1,   553,    -1,   555,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   573,    -1,  4502,    -1,
      -1,    -1,    -1,    -1,    -1,   582,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2635,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   605,    -1,
      -1,    -1,    -1,  4537,    -1,  4539,  2652,    -1,    -1,    -1,
      -1,  4545,  2658,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4564,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4574,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1745,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     697,    -1,    -1,  1756,    -1,    -1,    -1,    -1,    -1,   706,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1781,    -1,
      -1,  4655,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1797,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4684,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   782,  4710,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2831,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2865,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2904,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4803,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5153,    -1,    -1,
      -1,    -1,  1945,    -1,    -1,    -1,    -1,    -1,  2934,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4852,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3000,   962,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3009,  3010,    -1,    -1,  3013,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2056,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2071,    -1,
      -1,    -1,    -1,    -1,    -1,  3061,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1030,  4958,    -1,    -1,    -1,    -1,    -1,
      -1,  4965,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1081,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5359,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3137,    -1,  3139,  2157,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2171,    -1,
      -1,    -1,  2175,  2176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3168,  3169,    -1,    -1,    -1,  3173,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  5120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5153,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2304,    -1,    -1,    -1,    -1,    -1,  1254,    -1,    -1,
      -1,    -1,    -1,    -1,  1261,    -1,    -1,    -1,  5192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3349,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2453,    -1,    -1,  2456,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5687,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5359,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3479,    -1,    -1,    -1,  3483,    -1,    -1,
      -1,    -1,    -1,  5719,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1465,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2533,    -1,  2535,    -1,    -1,    -1,  3522,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2549,    -1,    -1,    -1,
      -1,    -1,  2555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3550,    -1,    -1,    -1,    -1,    -1,
      -1,  3557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2592,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3598,  1560,    -1,    -1,  1563,    -1,    -1,    -1,
      -1,  2624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2658,    -1,    -1,    -1,    -1,
    3646,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2678,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3690,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1685,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3754,    -1,
    1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3773,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1745,    -1,
      -1,    -1,    -1,    -1,    -1,  1752,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5687,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2827,    -1,  3812,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3830,  5719,    -1,    -1,    -1,    -1,
    1797,    -1,  1799,    -1,    -1,    -1,  1803,  1804,  1805,    -1,
    1807,  1808,  2865,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2904,    -1,    -1,    -1,    -1,    -1,  3893,    -1,    -1,
      -1,    -1,    -1,  3899,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2932,
      -1,  2934,    -1,    -1,    -1,    -1,    -1,  3923,  3924,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2997,  3981,    -1,    -1,  1945,  1946,
      -1,    -1,    -1,    -1,    -1,    -1,  3009,  3010,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1974,    -1,    -1,
      -1,    -1,    -1,    -1,  1981,    -1,    -1,    -1,  3041,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3061,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4118,    -1,  3137,    -1,  3139,  4123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3168,  3169,  4153,    -1,    -1,
    3173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3190,    -1,  4175,
      -1,    -1,    -1,  3196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3209,    -1,    -1,    -1,
    2157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2171,    -1,    -1,    -1,  2175,  2176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3291,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2258,  2259,  2260,  2261,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3349,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4354,    -1,
      -1,    -1,    -1,  3376,    -1,    -1,    -1,  2324,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3401,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4422,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2407,    -1,    -1,  2410,  3467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4489,    -1,    -1,    -1,    -1,    -1,  2456,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3522,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3550,    -1,    -1,
      -1,    -1,    -1,    -1,  3557,    -1,  4542,    -1,    -1,    -1,
    4546,    -1,  4548,    -1,  4550,    -1,    -1,    -1,    -1,  2516,
      -1,    -1,    -1,  2520,  2521,  2522,  2523,  2524,    -1,    -1,
      -1,    -1,  3585,    -1,    -1,    -1,    -1,    -1,    -1,  4575,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4589,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2558,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4607,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2581,    -1,    -1,    -1,    -1,    -1,
    3643,    -1,    -1,  3646,    -1,  2592,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4662,  4663,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4708,  2670,  4710,    -1,    -1,    -1,    -1,    -1,
      -1,  2678,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3754,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3791,    -1,
      -1,    -1,  3795,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       6,    -1,     8,    -1,    10,    -1,    -1,    -1,    -1,    -1,
      16,    -1,    18,    -1,    -1,    -1,    -1,  3870,    -1,    -1,
    4856,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    35,
      36,    -1,    38,    39,    -1,    41,    -1,    -1,    44,    45,
      46,    47,    -1,  3896,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,  2865,    -1,
      76,  3924,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      -1,    -1,  3945,    -1,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,  2904,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,   127,   128,    -1,   130,    -1,    -1,    -1,  3981,    -1,
      -1,   137,    -1,    -1,   140,    -1,   142,   143,  4974,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,  4000,    -1,    -1,
      -1,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,    -1,
      -1,    -1,    -1,   169,    -1,   171,    -1,   173,    -1,    -1,
     176,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,
      -1,    -1,   188,  4036,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,    -1,  4057,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,    -1,   269,  3061,  4118,    -1,   273,   274,    -1,
    4123,    -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,  5121,  5122,   293,   294,   295,
      -1,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,  5137,    -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,  4175,   329,   330,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,  3139,   349,   350,    -1,    -1,    -1,    -1,    -1,
     356,    -1,   358,    -1,   360,   361,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5199,    -1,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,  4226,    -1,    -1,  3173,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3190,    -1,    -1,    -1,  3194,    -1,   405,
     406,   407,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,   422,    -1,    -1,    -1,
      -1,   427,   428,   429,    -1,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4297,    -1,    -1,    -1,  5284,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,  5314,   485,
      -1,   487,    -1,    -1,    -1,    -1,  3283,  3284,  3285,    -1,
      -1,    -1,    -1,    -1,  3291,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3376,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  5468,    -1,    -1,    -1,    -1,  5473,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4539,    -1,    -1,  4542,
      -1,    -1,    -1,  4546,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4575,    -1,    -1,  3522,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4589,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3550,    -1,    -1,    -1,    -1,    -1,  4612,
    3557,    -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   248,    -1,  4710,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   306,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   361,   362,
      -1,    -1,    -1,    -1,    -1,    -1,  4829,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,
     383,   384,   385,    -1,  3791,  3792,  3793,    -1,  3795,  4852,
      -1,    -1,    -1,  4856,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   422,
     423,   424,    -1,    -1,    -1,   428,    -1,  3834,    -1,   432,
     433,   434,    -1,    -1,   437,    -1,    -1,  3844,    -1,    -1,
      -1,    -1,    -1,    -1,   447,    -1,    -1,    -1,    -1,   452,
     453,   454,    -1,   456,   457,    -1,   459,    -1,   461,    -1,
    3867,    -1,    -1,  3870,    -1,    -1,  4929,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     503,   504,   505,   506,   507,   508,    -1,    -1,    -1,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,   526,   527,    -1,   529,    -1,    -1,    -1,
      -1,   534,   535,   536,   537,    -1,    -1,   540,  3945,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,   555,    -1,    -1,    -1,    -1,    -1,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   570,   571,   572,
     573,   574,   575,   576,  3981,   578,    -1,    -1,    -1,   582,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4057,   654,   655,    -1,    -1,    -1,    -1,    -1,  5121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   669,   670,   671,    -1,
     673,    -1,    -1,   676,   677,    -1,    -1,    -1,    -1,   682,
      -1,   684,   685,   686,    -1,    -1,    -1,   690,    -1,    -1,
     693,    -1,   695,   696,   697,   698,    -1,   700,    -1,    -1,
      -1,    -1,   705,   706,   707,   708,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5178,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   739,   740,   741,   742,
     743,   744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   764,   765,   766,   767,   768,   769,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   782,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   832,
     833,    -1,    -1,    -1,    -1,    -1,   839,   840,    -1,    -1,
      -1,   844,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5344,    -1,    -1,    -1,    -1,    -1,   890,    -1,  4296,
    4297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   927,    -1,    -1,    -1,   931,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   940,    -1,    -1,
      -1,    -1,  4349,   946,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   966,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   986,   987,    -1,    -1,    -1,   991,   992,
     993,   994,   995,   996,   997,   998,   999,  1000,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5491,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1047,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1081,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1121,  1122,
    1123,  1124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5703,    -1,    -1,    -1,  5707,    -1,    -1,    -1,    -1,    -1,
      -1,  1254,  4659,  4660,  5717,    -1,    -1,  5720,  1261,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1294,    -1,    -1,    -1,  1298,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1387,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   656,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1461,    -1,
    1463,    -1,    -1,    -1,    -1,    -1,  1469,  1470,    -1,    -1,
    1473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1481,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4958,    -1,    -1,    -1,    -1,    -1,  1560,    -1,    -1,
    1563,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1601,  1602,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1614,    -1,    -1,    -1,    -1,  1619,  1620,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1658,  1659,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1710,  1711,    -1,
      -1,    -1,    -1,    -1,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1759,    -1,  1761,    -1,
      -1,  1764,  1765,  1766,    -1,  1768,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1781,    -1,
      -1,    -1,  1785,    -1,  1787,  1788,  1789,    -1,    -1,    -1,
      -1,    -1,  1795,  1796,  1797,  1798,    -1,  1800,  1801,  1802,
      -1,    -1,    -1,  1806,    -1,    -1,  1809,    -1,    -1,    -1,
      -1,  1814,  1815,    -1,    -1,  1818,    -1,    -1,    -1,    -1,
      -1,  1824,  1825,    -1,    -1,    -1,  1829,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1859,  1860,  1861,    -1,
      -1,    -1,  1865,    -1,    -1,    -1,  1869,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1882,
      -1,    -1,    -1,    -1,    -1,    -1,  1889,    -1,    -1,  1892,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1900,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1912,
      -1,  1914,    -1,    -1,    -1,    -1,    -1,  1920,  1921,  1922,
    1923,    -1,  1925,    -1,    -1,    -1,  1929,    -1,  1931,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1943,  1944,  1945,  1946,  1947,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1957,  1958,    -1,    -1,    -1,    -1,
    1963,    -1,  1965,    -1,  1967,    -1,    -1,    -1,    -1,    -1,
      -1,  1974,  1975,  1976,    -1,  1978,    -1,  1980,  1981,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1989,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2002,
      -1,  2004,    -1,    -1,    -1,  2008,    -1,  2010,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2029,    -1,  2031,  2032,
      -1,  2034,  2035,    -1,    -1,  2038,    -1,    -1,    -1,  2042,
      -1,  2044,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2063,    -1,    -1,  2066,  2067,  2068,    -1,    -1,    -1,    -1,
      -1,    -1,  2075,  2076,  2077,  2078,  2079,    -1,    -1,    -1,
    2083,  2084,  2085,    -1,    -1,    -1,  2089,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2126,    -1,    -1,    -1,    -1,    -1,  2132,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2157,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2171,  2172,
    2173,    -1,  2175,  2176,  2177,  2178,    -1,    -1,    -1,    -1,
      -1,  2184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2197,    -1,  2199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2209,  2210,    -1,    -1,
      -1,    -1,    -1,  2216,    -1,    -1,    -1,  2220,    -1,  2222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2232,
    2233,    -1,  2235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2249,    -1,    -1,    -1,
      -1,  2254,  2255,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  5703,    -1,    -1,    -1,
    5707,    -1,  2305,    -1,    -1,  2308,  2309,  2310,  2311,  2312,
    5717,    -1,    -1,  5720,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2326,  2327,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2395,  2396,    -1,    -1,    -1,  2400,  2401,  2402,
      -1,  2404,  2405,  2406,    -1,  2408,    -1,    -1,  2411,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2421,    -1,
      -1,  2424,  2425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2435,  2436,    -1,    -1,    -1,    -1,    -1,    -1,
    2443,    -1,    -1,    -1,    -1,  2448,    -1,    -1,    -1,    -1,
    2453,    -1,    -1,  2456,    -1,    -1,    -1,    -1,    -1,    -1,
    2463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2473,    -1,    -1,    -1,    -1,  2478,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2514,  2515,    -1,  2517,  2518,  2519,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2549,  2550,  2551,  2552,
    2553,    -1,    -1,  2556,    -1,  2558,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1861,    -1,
      -1,  2604,    -1,    -1,    -1,  2608,    -1,    -1,    -1,  2612,
    2613,  2614,  2615,    -1,  2617,    -1,  2619,  2620,    -1,    -1,
      -1,  2624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2638,    -1,  2640,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2650,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2661,    -1,
      -1,    -1,  2665,    -1,    -1,    -1,    -1,  2670,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2678,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2704,    -1,  2706,  2707,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2727,    -1,    -1,    -1,    -1,    -1,
      -1,  2734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2742,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2768,  2769,    -1,    -1,    -1,
      -1,    -1,    -1,  2776,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2788,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2072,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2850,    -1,  2852,
    2853,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2862,
    2863,  2864,  2865,  2866,  2867,  2868,  2869,  2870,    -1,    -1,
    2873,  2874,  2875,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2904,    -1,    -1,    -1,    -1,    -1,    -1,  2171,    -1,
      -1,    -1,    -1,    -1,  2177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2971,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3010,    -1,    -1,
    3013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3036,    -1,    -1,  2299,    -1,  3041,    -1,
      -1,    -1,  2305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3061,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3104,    -1,    -1,    -1,    -1,    -1,    -1,  3111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3137,    -1,  3139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3168,  3169,    -1,    -1,    -1,
    3173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3201,    -1,
      -1,    -1,    -1,  3206,    -1,    -1,  3209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3236,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3269,    -1,    -1,    -1,
      -1,  3274,    -1,  3276,    -1,  3278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3286,  3287,    -1,    -1,    -1,    -1,    -1,
      -1,  3294,  3295,    -1,    -1,    -1,    -1,    -1,    -1,  3302,
    3303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3314,    -1,    -1,    -1,    -1,  3319,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2624,    -1,    -1,    -1,    -1,    -1,  3370,    -1,    -1,
      -1,    -1,  2635,  3376,    -1,    -1,  3379,    -1,    -1,  3382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3397,    -1,    -1,  3400,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3410,    -1,    -1,
      -1,    -1,    -1,    -1,  3417,    -1,    -1,  3420,  3421,    -1,
      -1,    -1,  3425,    -1,  3427,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3464,    -1,  2726,  3467,    -1,    -1,  3470,  3471,  3472,
    3473,    -1,    -1,    -1,    -1,    -1,    -1,  3480,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3499,  3500,    -1,    -1,
      -1,    -1,    -1,  3506,    -1,    -1,    -1,  3510,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3522,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3542,
      -1,    -1,    -1,    -1,  3547,    -1,    -1,  3550,    -1,    -1,
      -1,    -1,    -1,    -1,  3557,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3566,  2827,    -1,    -1,    -1,  2831,    -1,
      -1,    -1,    -1,    -1,  3577,    -1,  3579,  3580,    -1,  3582,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3594,    -1,    -1,    -1,    -1,  3599,  3600,    -1,  3602,
    3603,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3614,  3615,  3616,  3617,    -1,    -1,    -1,    -1,    -1,
      -1,  3624,    -1,    -1,    -1,    -1,  3629,    -1,    -1,    -1,
      -1,    -1,  3635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2904,    -1,    -1,  3647,    -1,    -1,    -1,  3651,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2932,
      -1,  2934,    -1,    -1,    -1,  3678,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3722,
      -1,    -1,    -1,    -1,    -1,    -1,  3729,    -1,    -1,  3732,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3010,    -1,    -1,
      -1,  3754,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3813,    -1,  3815,    -1,  3817,  3818,  3819,    -1,  3821,  3822,
      -1,  3824,    -1,    -1,  3827,  3828,    -1,  3830,  3831,    -1,
      -1,  3834,    -1,    -1,    -1,  3838,  3839,    -1,  3841,    -1,
    3843,  3844,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3864,    -1,    -1,  3867,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3880,    -1,    -1,
    3883,    -1,    -1,    -1,    -1,  3888,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3896,    -1,    -1,    -1,    -1,    -1,    -1,
    3903,  3904,  3905,  3906,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3936,  3937,    -1,  3939,    -1,    -1,    -1,
      -1,    -1,  3945,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3981,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3990,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4000,    -1,    -1,
      -1,    -1,  3265,  4006,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3292,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4057,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4097,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4141,    -1,
      -1,    -1,    -1,  4146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4175,    -1,    -1,  4178,    -1,  4180,    -1,    -1,
    4183,    -1,    -1,    -1,    -1,  4188,    -1,  4190,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3479,    -1,    -1,    -1,
      -1,    -1,    -1,  4226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3522,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4296,  3557,  4298,    -1,    -1,    -1,    -1,
      -1,  4304,    -1,    -1,  4307,    -1,  3569,    -1,  3571,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4320,    -1,    -1,
      -1,  4324,  3585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4382,
    4383,  4384,  4385,    -1,    -1,    -1,    -1,    -1,    -1,  4392,
      -1,    -1,  4395,  4396,    -1,    -1,  4399,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4410,    -1,  4412,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4457,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4519,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4554,  4555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4564,    -1,    -1,    -1,    -1,    -1,  4570,    -1,    -1,
      -1,    -1,  4575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4589,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4599,    -1,    -1,    -1,
      -1,  4604,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4612,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4623,    -1,    -1,    -1,    -1,  4628,  4629,  4630,    -1,    -1,
      -1,    -1,    -1,  3896,    -1,    -1,    -1,  4640,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4655,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4674,    -1,    -1,    -1,  4678,    -1,  4680,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4710,    -1,    -1,
      -1,    -1,  3975,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3997,  3998,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4030,    -1,    -1,
      -1,    -1,    -1,  4036,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4057,    -1,    -1,  4800,    -1,    -1,
    4803,    -1,    -1,    -1,    -1,  4808,  4809,  4810,  4811,  4812,
    4813,  4814,  4815,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4844,  4845,    -1,    -1,    -1,    -1,    -1,    -1,  4852,
      -1,    -1,    -1,    -1,    -1,  4118,    -1,    -1,    -1,    -1,
    4123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4929,    -1,    -1,  4932,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4965,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4235,    -1,    -1,    -1,    -1,    -1,    -1,  4982,
      -1,  4984,  4985,  4986,  4987,  4988,    -1,    -1,  4991,  4992,
    4993,  4994,    -1,    -1,    -1,    -1,  4999,  5000,  5001,  5002,
      -1,  5004,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5123,  5124,  5125,  5126,  5127,    -1,  5129,    -1,  5131,  5132,
    5133,  5134,  5135,  5136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  5145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4414,    -1,    -1,    -1,  5158,    -1,    -1,  5161,    -1,
      -1,    -1,    -1,    -1,  5167,    -1,    -1,    -1,    -1,    -1,
      -1,  5174,    -1,    -1,    -1,  5178,    -1,    -1,    -1,  4442,
      -1,  5184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4489,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4503,    -1,  5245,    -1,    -1,    -1,  5249,    -1,    -1,    -1,
    5253,    -1,    -1,    -1,    -1,  5258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4539,    -1,    -1,  4542,
      -1,    -1,    -1,  4546,    -1,  4548,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5296,    -1,    -1,    -1,    -1,    -1,    -1,
    5303,  5304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4612,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5368,  5369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5391,    -1,
      -1,    -1,  4655,    -1,    -1,    -1,    -1,    -1,    -1,  4662,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5410,    -1,    -1,
      -1,    -1,  5415,    -1,    -1,    -1,    -1,    -1,   306,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  5435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4710,    -1,    -1,
      -1,    -1,    -1,  5456,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,    -1,   366,    -1,
    5483,    -1,    -1,    -1,    -1,    -1,  5489,    -1,  5491,    -1,
      -1,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  5504,    -1,    -1,  4767,    -1,    -1,    -1,    -1,    -1,
      -1,  5514,    -1,  5516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4786,    -1,    -1,    -1,    -1,    -1,  4792,
      -1,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
      -1,    -1,   430,   431,    -1,    -1,    -1,   435,    -1,    -1,
      -1,   439,   440,   441,   442,   443,   444,    -1,   446,    -1,
    5563,    -1,    -1,   451,    -1,  4828,  4829,    -1,    -1,    -1,
    4833,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4852,
      -1,    -1,    -1,  4856,    -1,    -1,    -1,    -1,    -1,    -1,
     488,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,    -1,    -1,    -1,    -1,    -1,
      -1,   509,   510,   511,    -1,   513,    -1,  5630,    -1,    -1,
     518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5641,  5642,
     528,    -1,   530,    -1,  5647,  5648,    -1,    -1,    -1,  5652,
     538,   539,    -1,   541,    -1,    -1,    -1,    -1,   546,   547,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     558,   559,    -1,    -1,    -1,   563,   564,   565,   566,   567,
      -1,   569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   577,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4973,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   653,    -1,    -1,   656,   657,
     658,   659,    -1,    -1,   662,    -1,    -1,    -1,   666,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   681,    -1,   683,    -1,    -1,    -1,    -1,
     688,   689,    -1,   691,   692,    -1,   694,    -1,    -1,    -1,
      -1,   699,    -1,   701,    -1,   703,   704,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   732,   733,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5121,    -1,
      -1,    -1,    -1,    -1,    -1,  5128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,    -1,
    5143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5178,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5200,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   839,   840,    -1,    -1,    -1,   844,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   919,    -1,   921,   922,   923,   924,   925,    -1,    -1,
      -1,    -1,   930,    -1,    -1,   933,   934,   935,   936,   937,
     938,  5314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   962,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   985,    -1,    -1,
     988,   989,   990,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5376,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5402,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1047,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1062,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5491,    -1,
      -1,    -1,    -1,  1121,  1122,  1123,  1124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5577,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1293,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1304,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5703,    -1,    -1,    -1,  5707,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5717,    -1,    -1,  5720,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1414,  1415,    -1,    -1,
      -1,    -1,  1420,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1462,    -1,  1464,    -1,  1466,  1467,
    1468,    -1,    -1,  1471,  1472,    -1,  1474,  1475,  1476,  1477,
    1478,  1479,  1480,    -1,  1482,    -1,    -1,    -1,    -1,  1487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1614,    -1,    -1,    -1,
      -1,  1619,  1620,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1688,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1745,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1769,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1790,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1813,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1872,    -1,  1874,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1919,     1,    -1,     3,     4,    -1,     6,    -1,     8,
       9,    10,    -1,    12,    -1,    14,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      29,    -1,    -1,    32,  1952,  1953,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    82,    -1,    -1,    -1,  2005,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,  2036,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,  2070,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,   165,    -1,  2086,    -1,
     169,   170,   171,   172,   173,   174,    -1,   176,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,    -1,  2195,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
     309,   310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,   323,    -1,   325,   326,   327,   328,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,  2294,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
    2318,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,    -1,    -1,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,   480,   481,    -1,    -1,    -1,   485,    -1,   487,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2435,  2436,    -1,
      -1,    -1,    -1,    -1,    -1,  2443,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2516,    -1,
      -1,    -1,  2520,  2521,  2522,  2523,  2524,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2555,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2619,  2620,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2658,    -1,    -1,    -1,    -1,    -1,    -1,  2665,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2706,  2707,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2731,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2768,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,    -1,     6,    -1,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      29,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    -1,    82,  2932,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,  2995,  2996,  2997,
    2998,  2999,    -1,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,  3013,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
     309,   310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,  3190,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,    -1,   413,   414,    -1,    -1,    -1,    -1,
     419,   420,    -1,  3271,   423,    -1,    -1,    -1,   427,   428,
     429,   430,  3280,    -1,   433,    -1,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3402,    -1,  3404,    -1,  3406,    -1,
      -1,    -1,    -1,  3411,    -1,  3413,    -1,  3415,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3438,    -1,  3440,    -1,  3442,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3585,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3600,    -1,  3602,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3643,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3683,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3734,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3791,  3792,  3793,    -1,  3795,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3864,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,    -1,     6,    -1,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
      21,    -1,    23,    -1,    -1,    -1,  3924,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,    40,
      41,  3939,    43,    44,    45,    46,    47,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,  3955,    -1,    60,
      -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,   140,
      -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
      -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,
      -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,    -1,    -1,   200,
      -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,    -1,   219,    -1,
    4118,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,
      -1,    -1,  4130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4141,    -1,   246,   247,    -1,  4146,    -1,
      -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,   268,   269,   270,
     271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,
     311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,
     321,    -1,   323,    -1,   325,   326,   327,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,
      -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,
     381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,  4297,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,  4307,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,
      -1,    -1,  4320,    -1,    -1,    -1,   427,   428,   429,   430,
      -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,
      -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4392,    -1,    -1,  4395,  4396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4539,    -1,    -1,  4542,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4564,    -1,    -1,     0,
       1,    -1,     3,     4,    -1,     6,  4574,     8,     9,    10,
      -1,    -1,    13,    14,    -1,    16,    17,    18,    19,    20,
      21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,    -1,
      -1,    32,    33,    -1,    35,    36,    -1,    38,    39,    40,
      41,    -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    -1,    76,    77,    -1,    -1,    -1,
      81,    82,    -1,    -1,    85,    -1,    -1,  4655,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,
      -1,   102,    -1,   104,   105,   106,    -1,   108,   109,   110,
      -1,    -1,    -1,    -1,  4682,    -1,  4684,    -1,  4686,   120,
     121,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,   140,
      -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,    -1,
      -1,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
      -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,   170,
     171,   172,   173,   174,    -1,   176,   177,   178,   179,    -1,
      -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,    -1,    -1,   200,
      -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,  4803,    -1,   238,    -1,   240,
      -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,    -1,
      -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,   268,   269,   270,
     271,   272,   273,   274,    -1,    -1,   277,   278,   279,   280,
     281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,   310,
     311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,
     321,    -1,   323,    -1,   325,   326,   327,   328,   329,   330,
     331,    -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,
      -1,    -1,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,   370,
      -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,
     381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,
    4958,    -1,    -1,    -1,   395,    -1,    -1,  4965,    -1,   400,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,
      -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5121,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5145,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,
       3,     4,    -1,     6,  5192,     8,     9,    10,    -1,    -1,
      13,    14,    -1,    16,    17,    18,    19,    20,    21,    -1,
      23,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    32,
      33,    -1,    35,    36,    -1,    38,    39,    40,    41,    -1,
      43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,
      63,    64,    65,    -1,    -1,    68,  5254,    -1,    71,    72,
      73,    74,    -1,    76,    77,    -1,    -1,    -1,    81,    82,
      -1,    -1,    -1,    -1,  5272,    -1,    89,    -1,    91,    -1,
      93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,   102,
      -1,   104,   105,   106,    -1,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,   126,   127,   128,  5314,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,   140,    -1,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,    -1,    -1,   152,
      -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,   162,
     163,   164,   165,    -1,    -1,    -1,   169,   170,   171,   172,
     173,   174,    -1,   176,   177,   178,   179,    -1,    -1,   182,
      -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,
     203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,
      -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,   224,   225,   226,    -1,    -1,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   238,    -1,   240,    -1,    -1,
      -1,   244,   245,   246,   247,    -1,   249,    -1,    -1,    -1,
     253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,
      -1,   264,    -1,   266,    -1,   268,   269,   270,   271,   272,
     273,   274,    -1,    -1,   277,   278,   279,   280,   281,    -1,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,    -1,    -1,   302,
      -1,    -1,   305,    -1,   307,   308,   309,   310,   311,    -1,
     313,   314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,
     323,    -1,   325,   326,   327,   328,   329,   330,   331,    -1,
     333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,    -1,
      -1,   364,    -1,    -1,   367,    -1,    -1,   370,    -1,   372,
     373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,
     383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   395,    -1,    -1,    -1,    -1,   400,    -1,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,   415,    -1,    -1,    -1,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
     433,    -1,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,
     473,    -1,    -1,   476,   477,    -1,   479,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,     0,     1,    -1,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    -1,
      60,    61,    -1,    63,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      90,    91,    -1,    93,    94,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,   304,   305,   306,   307,    -1,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,    -1,   413,   414,   415,    -1,    -1,   418,   419,
     420,    -1,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    -1,    13,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,   102,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,   162,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,   246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
      -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,   479,    -1,   481,    -1,    -1,    -1,
     485,     1,   487,     3,     4,    -1,     6,    -1,     8,     9,
      10,    -1,    -1,    13,    14,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    33,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
      -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,   102,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,   249,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,   307,   308,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,    -1,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,     1,   487,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    12,    -1,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,   307,    -1,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,    -1,    -1,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,    -1,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,    -1,   480,   481,    -1,    -1,    -1,
     485,   486,   487,     1,    -1,     3,     4,    -1,     6,    -1,
       8,     9,    10,    -1,    12,    -1,    14,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,   174,    -1,   176,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,   273,   274,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,   309,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
     328,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,   400,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,    -1,
      -1,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,   480,   481,    -1,    -1,    -1,   485,   486,   487,
       1,    -1,     3,     4,    -1,     6,    -1,     8,     9,    10,
      -1,    12,    -1,    14,    -1,    16,    17,    18,    19,    20,
      21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,    -1,
      -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,    40,
      41,    -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,   140,
      -1,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
      -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,   172,   173,   174,    -1,   176,   177,    -1,   179,    -1,
      -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,    -1,    -1,   200,
      -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,    -1,    -1,
      -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,   268,   269,   270,
     271,   272,   273,   274,    -1,    -1,   277,   278,   279,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,   307,    -1,   309,   310,
     311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,
     321,    -1,   323,    -1,   325,   326,   327,   328,   329,   330,
     331,    -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,
      -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,
     381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,    -1,    -1,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,
      -1,    -1,   473,    -1,    -1,   476,   477,    -1,   479,   480,
     481,    -1,    -1,    -1,   485,     1,   487,     3,     4,    -1,
       6,    -1,     8,     9,    10,    -1,    12,    -1,    14,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,    -1,
      86,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,   309,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,   328,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,    -1,    -1,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
     486,   487,     1,    -1,     3,     4,    -1,     6,    -1,     8,
       9,    10,    -1,    12,    -1,    14,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      29,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,   174,    -1,   176,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
     309,   310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,   323,    -1,   325,   326,   327,   328,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,   400,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,    -1,    -1,
     419,   420,    -1,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,   486,   487,     1,
      -1,     3,     4,    -1,     6,    -1,     8,     9,    10,    -1,
      12,    -1,    14,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      82,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,   174,    -1,   176,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   244,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,   273,   274,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,   309,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,    -1,    -1,   419,   420,    -1,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,    -1,   480,   481,
      -1,    -1,    -1,   485,   486,   487,     1,    -1,     3,     4,
      -1,     6,    -1,     8,     9,    10,    -1,    12,    -1,    14,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,   307,    -1,   309,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,    -1,    -1,   419,   420,    -1,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,    -1,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,   486,   487,     1,    -1,     3,     4,    -1,     6,    -1,
       8,     9,    10,    -1,    12,    -1,    14,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,   174,    -1,   176,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,   273,   274,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,   309,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
     328,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,    -1,
      -1,   419,   420,    -1,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,   486,   487,
       1,    -1,     3,     4,    -1,     6,    -1,     8,     9,    10,
      -1,    12,    -1,    14,    -1,    16,    17,    18,    19,    20,
      21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,    -1,
      -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,    40,
      41,    -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,   140,
      -1,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
      -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,   172,   173,   174,    -1,   176,   177,    -1,   179,    -1,
      -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,    -1,    -1,   200,
      -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,    -1,    -1,
      -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,   268,   269,   270,
     271,   272,   273,   274,    -1,    -1,   277,   278,   279,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,   307,    -1,   309,   310,
     311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,
     321,    -1,   323,    -1,   325,   326,   327,   328,   329,   330,
     331,    -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,
      -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,
     381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,    -1,    -1,   419,   420,
      -1,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,
      -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,   480,
     481,    -1,    -1,    -1,   485,     1,   487,     3,     4,    -1,
       6,    -1,     8,     9,    10,    -1,    12,    -1,    14,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,   309,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,   328,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,    -1,    -1,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,     3,     4,   485,
       6,   487,     8,     9,    10,    -1,    -1,    13,    14,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    -1,    60,    61,    -1,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    72,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    90,    91,    -1,    93,    94,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,   162,   163,   164,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,   207,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
     226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,   245,
     246,   247,    -1,   249,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,   328,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,    -1,
      -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,   415,
      -1,    -1,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,     3,     4,   485,
       6,   487,     8,     9,    10,    -1,    -1,    13,    14,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    32,    33,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    -1,    60,    61,    -1,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    72,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    90,    91,    -1,    93,    94,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,   162,   163,   164,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,   177,   178,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
     226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,   245,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,   328,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,    -1,
      -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,   411,    -1,   413,   414,   415,
      -1,    -1,   418,   419,   420,    -1,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,     3,     4,   485,
       6,   487,     8,     9,    10,    -1,    -1,    13,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    33,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    61,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    74,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    94,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,   162,   163,   164,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,   178,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
     226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,   305,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,    -1,
      -1,   367,    -1,    -1,   370,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,   411,    -1,   413,    -1,   415,
      -1,    -1,   418,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,     3,     4,    -1,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
      21,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    32,    -1,    -1,    35,    36,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,
     111,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
      -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
      -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,
      -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,    -1,   200,
     201,   202,   203,   204,    -1,    -1,   207,   208,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,   218,   219,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,
      -1,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,   268,   269,   270,
     271,   272,   273,   274,    -1,    -1,   277,   278,   279,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,    -1,    -1,    -1,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,   363,   364,    -1,    -1,   367,    -1,    -1,    -1,
      -1,   372,   373,    -1,   375,   376,   377,    -1,   379,    -1,
     381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,   419,   420,
      -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,
      -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,   480,
     481,    -1,     3,     4,   485,     6,   487,     8,     9,    10,
      -1,    -1,    13,    -1,    -1,    16,    17,    18,    19,    20,
      21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    33,    -1,    35,    36,    -1,    38,    39,    40,
      41,    -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    -1,    76,    77,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,   140,
      -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
      -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,   170,
     171,   172,   173,    -1,    -1,    -1,   177,   178,   179,    -1,
      -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,    -1,    -1,   200,
      -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,   245,   246,   247,    -1,    -1,    -1,
      -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,   268,   269,   270,
     271,   272,   273,   274,    -1,    -1,   277,   278,   279,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,    -1,    -1,
      -1,   302,    -1,    -1,   305,    -1,   307,    -1,    -1,   310,
     311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,
     321,    -1,   323,    -1,   325,   326,   327,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,
      -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,   370,
      -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,
     381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
     411,    -1,   413,    -1,   415,    -1,    -1,    -1,   419,   420,
      -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,
      -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,     3,     4,    -1,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    62,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    75,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,   131,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,   160,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,   207,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,   218,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,   363,   364,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,     7,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    62,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    75,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,   131,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
     160,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,   207,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,   218,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,   228,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,   247,    -1,    -1,
      -1,   251,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,   363,   364,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    13,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    33,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,   162,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,   178,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,   273,
     274,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,   305,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,    -1,    -1,   367,    -1,    -1,   370,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,   411,    -1,   413,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,     3,     4,    -1,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
      -1,   200,   201,   202,   203,   204,    -1,    -1,   207,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,
      -1,    -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
      -1,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,   363,   364,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,   375,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
       3,     4,   481,     6,    -1,     8,     9,    10,   487,    -1,
      13,    -1,    -1,    16,    17,    18,    19,    20,    21,    -1,
      23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
      33,    -1,    35,    36,    -1,    38,    39,    40,    41,    -1,
      43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,
      63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,
      93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,
      -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,   140,    -1,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,   162,
     163,   164,   165,    -1,    -1,    -1,   169,   170,   171,   172,
     173,    -1,    -1,    -1,   177,   178,   179,    -1,    -1,   182,
      -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,
     203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,
      -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,   224,   225,   226,    -1,    -1,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,   246,   247,    -1,    -1,    -1,    -1,    -1,
     253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,
      -1,   264,    -1,   266,    -1,   268,   269,   270,   271,   272,
      -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,
      -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,
      -1,    -1,   305,    -1,   307,    -1,    -1,   310,   311,    -1,
     313,   314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,
     323,    -1,   325,   326,   327,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,
      -1,    -1,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,   364,    -1,    -1,   367,    -1,    -1,   370,    -1,   372,
     373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,
     383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,   411,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,
      -1,    -1,    -1,    -1,   427,   428,   429,   430,   431,    -1,
      -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,
     473,    -1,    -1,   476,   477,    -1,     3,     4,   481,     6,
      -1,     8,     9,    10,   487,    -1,    13,    -1,    -1,    16,
      17,    18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    33,    -1,    35,    36,
      -1,    38,    39,    40,    41,    -1,    43,    44,    45,    46,
      47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,
      57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    -1,    76,
      77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,
      -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,
      -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,
     127,   128,    -1,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,
     157,   158,    -1,    -1,    -1,   162,   163,   164,   165,    -1,
      -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,
     177,   178,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,
      -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,
      -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,   226,
      -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
     247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,
     257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,
      -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,
     277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,    -1,    -1,    -1,   302,    -1,    -1,   305,    -1,
     307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,
      -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,   326,
     327,    -1,   329,   330,   331,    -1,   333,   334,   335,   336,
      -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,   364,    -1,    -1,
     367,    -1,    -1,   370,    -1,   372,   373,    -1,    -1,   376,
     377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,
     387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,   411,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,
     427,   428,   429,   430,   431,    -1,    -1,    -1,   435,    -1,
     437,   438,    -1,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,    -1,    -1,
     467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,
     477,    -1,     3,     4,   481,     6,    -1,     8,     9,    10,
     487,    -1,    13,    -1,    -1,    16,    17,    18,    19,    20,
      21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    33,    -1,    35,    36,    -1,    38,    39,    40,
      41,    -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    -1,    76,    77,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,   140,
      -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,   154,   155,   156,   157,   158,    -1,    -1,
      -1,   162,   163,   164,   165,    -1,    -1,    -1,   169,   170,
     171,   172,   173,    -1,    -1,    -1,   177,   178,   179,    -1,
      -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,    -1,    -1,   200,
      -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,   245,   246,   247,    -1,    -1,    -1,
      -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,   268,   269,   270,
     271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,    -1,    -1,
      -1,   302,    -1,    -1,   305,    -1,   307,    -1,    -1,   310,
     311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,
     321,    -1,   323,    -1,   325,   326,   327,    -1,   329,   330,
     331,    -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,
      -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,   370,
      -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,
     381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
     411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,
      -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,
     431,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,
      -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,
     481,     6,     7,     8,     9,    10,   487,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    26,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,
      -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    97,    -1,    99,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,   108,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,    -1,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,
      -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
     205,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,
     245,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,    -1,    -1,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,   362,   363,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,
      -1,   376,   377,   378,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,
      -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,
     435,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,     3,     4,   481,     6,     7,     8,
       9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    21,    22,    23,    -1,    -1,    26,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    97,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,   205,    -1,   207,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,
      -1,    -1,    -1,    -1,    -1,    -1,   245,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
      -1,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,   378,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
       3,     4,   481,     6,     7,     8,     9,    10,   487,    -1,
      -1,    -1,    -1,    16,    17,    18,    19,    20,    21,    -1,
      23,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    32,
      -1,    -1,    35,    36,    -1,    38,    39,    40,    41,    -1,
      43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,
      63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,
      73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,
      93,    -1,    95,    96,    97,    -1,    99,   100,    -1,    -1,
      -1,   104,   105,   106,    -1,   108,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,    -1,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,
     173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,
      -1,    -1,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,
     203,   204,   205,    -1,    -1,   208,    -1,    -1,    -1,   212,
      -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,
      -1,    -1,   245,   246,   247,    -1,    -1,    -1,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,    -1,   261,   262,
      -1,   264,    -1,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,
      -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,
      -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,    -1,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,    -1,
      -1,    -1,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,   362,
     363,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,
     373,    -1,    -1,   376,   377,   378,   379,    -1,   381,    -1,
     383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,
      -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,
      -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,
     473,    -1,    -1,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,     3,     4,    -1,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    26,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    97,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,   205,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,    -1,    -1,    -1,   245,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,   273,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,   315,   316,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,   362,   363,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
     378,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,     7,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    97,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,   205,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
      -1,    -1,    -1,   245,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,   273,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,   315,   316,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
     362,   363,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,   378,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,     7,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      26,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    97,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,   205,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,   245,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,   273,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,   315,
     316,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,   362,   363,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,   378,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,   422,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,     3,     4,   485,     6,   487,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,   309,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,   422,   423,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,     3,     4,
      -1,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    26,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,
      -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    97,    -1,    99,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,    -1,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,
      -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,
     245,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,   363,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,
      -1,   376,   377,   378,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,
      -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,     3,     4,   481,     6,    -1,     8,
       9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,
     249,    -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
      -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,    -1,    -1,    -1,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,     3,     4,   485,     6,   487,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    75,    76,    77,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
      -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,    -1,   413,    -1,   415,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,   430,    -1,    -1,   433,    -1,   435,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,     3,
       4,    -1,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    97,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,
      -1,   245,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,   273,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,   363,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,   378,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,   309,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,   273,   274,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,   413,    -1,   415,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,   433,    -1,   435,   436,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,    -1,    -1,   481,
      -1,     3,     4,   485,     6,   487,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,   101,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,   276,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
     312,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,     7,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,   245,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,   363,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    75,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
      -1,   481,    -1,     3,     4,   485,     6,   487,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,   273,   274,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,    -1,    -1,   485,    -1,   487,     3,     4,
      -1,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      35,    36,    -1,    38,    39,    40,    41,    -1,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,
      -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,
      95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,    -1,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,
      -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,
      -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,
     245,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,
     255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,   268,   269,   270,   271,   272,    -1,    -1,
      -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,    -1,   333,   334,
     335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,   363,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,
      -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,
     385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,
      -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,    -1,     3,     4,   481,     6,    -1,     8,
       9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
      -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,    -1,   413,    -1,   415,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,   430,    -1,    -1,   433,    -1,   435,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,     3,     4,   485,     6,   487,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,
      19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,   127,   128,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,
     179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
      -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,   277,   278,
     279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,
      -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,    -1,   333,   334,   335,   336,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,
     379,    -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,     3,
       4,    -1,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,
      -1,   245,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,   363,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,   273,   274,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,     3,     4,   485,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,   309,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    75,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,   273,   274,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,   413,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,    -1,    -1,   481,
      -1,     3,     4,   485,     6,   487,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,   273,   274,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,   413,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,    -1,    -1,   481,
      -1,     3,     4,   485,     6,   487,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,   248,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,   265,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,   315,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,   413,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,     3,     4,   485,
       6,   487,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    61,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    94,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   418,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,   113,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,   256,   257,   258,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,   416,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,     3,     4,    -1,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,   416,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,     3,     4,    -1,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,   416,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,     3,     4,    -1,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,   210,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,    -1,     3,     4,   485,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,   312,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,   210,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,   207,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,   469,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,   168,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
      -1,   481,    -1,     3,     4,   485,     6,   487,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,   421,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,     3,     4,    -1,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,     3,     4,    -1,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,   482,     3,     4,    -1,
       6,   487,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    75,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    51,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,    -1,    -1,   481,   482,     3,
       4,    -1,     6,   487,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    75,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,   480,   481,    -1,     3,     4,    -1,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,    -1,     3,     4,   485,     6,   487,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,     3,     4,   487,
       6,    -1,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,   211,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,    -1,
     480,   481,    -1,     3,     4,    -1,     6,   487,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   417,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,    -1,    -1,   481,    -1,     3,
       4,   485,     6,   487,     8,     9,    10,    -1,    12,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,   377,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,   468,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,     3,     4,   481,     6,    -1,     8,     9,
      10,   487,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    39,
      40,    41,    -1,    43,    44,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    71,    72,    73,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    93,    -1,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,    -1,   154,   155,   156,   157,   158,    -1,
      -1,    -1,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,   177,    -1,   179,
      -1,    -1,   182,    -1,    -1,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
     200,    -1,   202,   203,   204,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,    -1,   257,    -1,    -1,
      -1,   261,   262,    -1,   264,    -1,   266,    -1,   268,   269,
     270,   271,   272,    -1,    -1,    -1,    -1,   277,   278,   279,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,   307,    -1,    -1,
     310,   311,    -1,   313,   314,    -1,   316,    -1,    -1,   319,
     320,   321,    -1,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,    -1,   333,   334,   335,   336,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
      -1,   381,    -1,   383,    -1,   385,   386,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
     420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,    -1,     3,
       4,   481,     6,    -1,     8,     9,    10,   487,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
      44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    71,    72,    73,
      -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    93,
      -1,    95,    96,    -1,    -1,    99,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
     154,   155,   156,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,   177,    -1,   179,    -1,    -1,   182,    -1,
      -1,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,   268,   269,   270,   271,   272,    -1,
      -1,    -1,    -1,   277,   278,   279,   280,   281,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,   307,    -1,    -1,   310,   311,    -1,   313,
     314,    -1,   316,    -1,    -1,   319,   320,   321,    -1,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,    -1,   333,
     334,   335,   336,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,    -1,   381,    -1,   383,
      -1,   385,   386,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   419,   420,    -1,    -1,    -1,
      -1,    -1,    -1,   427,   428,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,    -1,     3,     4,   481,     6,    -1,
       8,     9,    10,   487,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    71,    72,    73,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,    -1,
      -1,    99,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,   177,
      -1,   179,    -1,    -1,   182,    -1,    -1,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
      -1,    -1,   200,    -1,   202,   203,   204,    -1,    -1,    -1,
     208,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,   254,   255,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
     268,   269,   270,   271,   272,    -1,    -1,    -1,    -1,   277,
     278,   279,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,   307,
      -1,    -1,   310,   311,    -1,   313,   314,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,    -1,   333,   334,   335,   336,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,
      -1,   379,    -1,   381,    -1,   383,    -1,   385,   386,   387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
     468,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,   477,
      -1,     3,     4,   481,     6,    -1,     8,     9,    10,   487,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,    -1,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,    -1,    -1,   481,
     482,     3,     4,    -1,     6,   487,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
      -1,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    93,    -1,    95,    96,    -1,    -1,    99,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,   177,    -1,   179,    -1,    -1,
     182,    -1,    -1,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,    -1,    -1,   200,    -1,
     202,   203,   204,    -1,    -1,    -1,   208,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,   268,   269,   270,   271,
     272,    -1,    -1,    -1,    -1,   277,   278,   279,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,   307,    -1,    -1,   310,   311,
      -1,   313,   314,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
      -1,   333,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
     372,   373,    -1,    -1,   376,    -1,    -1,   379,    -1,   381,
      -1,   383,    -1,   385,   386,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,    -1,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,
      -1,   473,    -1,    -1,   476,   477,    -1,     3,     4,   481,
       6,    -1,     8,     9,    10,   487,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    -1,    43,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    93,    -1,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,   108,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   154,   155,
     156,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,   177,    -1,   179,    -1,    -1,   182,    -1,    -1,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,    -1,    -1,   200,    -1,   202,   203,   204,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,   254,   255,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
      -1,   277,   278,   279,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,   307,    -1,    -1,   310,   311,    -1,   313,   314,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,    -1,   333,   334,   335,
     336,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,    -1,    -1,   379,    -1,   381,    -1,   383,    -1,   385,
     386,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,     6,    -1,     8,    -1,    10,    -1,    -1,
      13,   467,   468,    16,    -1,    18,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,    -1,
      33,   487,    35,    36,    -1,    38,    39,    -1,    41,    -1,
      -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      63,    -1,    65,    -1,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,
      93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,   126,   127,   128,    -1,   130,    -1,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,    -1,    -1,    -1,   157,   158,    -1,    -1,    -1,   162,
     163,   164,    -1,    -1,    -1,    -1,   169,    -1,   171,    -1,
     173,    -1,    -1,    -1,    -1,   178,   179,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
      -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,   246,   247,    -1,    -1,    -1,    -1,    -1,
     253,    -1,    -1,    -1,   257,    -1,    -1,    -1,   261,   262,
      -1,   264,    -1,   266,    -1,    -1,   269,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,    -1,    -1,   298,    -1,    -1,    -1,   302,
      -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   316,    -1,    -1,   319,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,    -1,   329,   330,    -1,    -1,
     333,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,    -1,
      -1,    -1,    -1,   346,    -1,    -1,   349,   350,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   358,    -1,   360,    -1,    -1,
      -1,   364,    -1,    -1,    -1,    -1,    -1,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   405,   406,   407,   408,    -1,    -1,   411,    -1,
       6,    -1,     8,    -1,    10,    -1,   419,   420,    -1,    -1,
      16,    -1,    18,    -1,   427,   428,   429,    -1,   431,    -1,
      -1,    -1,   435,    -1,   437,   438,    -1,    -1,    -1,    35,
      36,    -1,    38,    39,    -1,    41,    -1,    -1,    44,    45,
      46,    47,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,
     473,    -1,    68,   476,   477,    71,    72,    73,   481,    -1,
      76,    -1,    -1,    -1,   487,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,    -1,
      -1,    -1,    -1,   169,    -1,   171,    -1,   173,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,    -1,   269,    -1,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
      -1,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,    -1,   329,   330,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,   349,   350,   351,    -1,    -1,    -1,    -1,
      -1,    -1,   358,    -1,   360,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,    -1,    -1,    -1,    -1,   413,    -1,   415,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,    -1,    -1,    -1,   433,    -1,   435,
     436,   437,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,     6,     7,     8,    -1,    10,    -1,    -1,
      -1,    -1,    -1,    16,    -1,    18,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,    35,    36,    -1,    38,    39,    -1,    41,    -1,
      -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      63,    -1,    65,    -1,    -1,    68,    -1,    -1,    71,    72,
      73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,   126,   127,   128,   129,   130,    -1,    -1,
      -1,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,    -1,    -1,    -1,   157,   158,    -1,    -1,    -1,    -1,
     163,    -1,    -1,    -1,    -1,    -1,   169,    -1,   171,    -1,
     173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
      -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,
      -1,    -1,   245,   246,   247,    -1,    -1,    -1,    -1,    -1,
     253,    -1,    -1,    -1,   257,    -1,    -1,    -1,   261,   262,
      -1,   264,    -1,   266,    -1,    -1,   269,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,    -1,    -1,   298,    -1,    -1,    -1,   302,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   316,    -1,    -1,   319,   320,   321,    -1,
      -1,   324,    -1,   326,   327,    -1,   329,   330,    -1,    -1,
     333,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,    -1,
      -1,    -1,    -1,   346,    -1,    -1,   349,   350,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   358,    -1,   360,    -1,    -1,
     363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   405,   406,   407,   408,    -1,    -1,    -1,    -1,
       6,     7,     8,    -1,    10,    -1,   419,   420,    -1,    -1,
      16,    -1,    18,    -1,   427,   428,   429,    -1,    -1,    -1,
      -1,    -1,   435,    -1,   437,   438,    -1,    -1,    -1,    35,
      36,    -1,    38,    39,    -1,    41,    -1,    -1,    44,    45,
      46,    47,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,
     473,    -1,    68,   476,   477,    71,    72,    73,   481,    -1,
      76,    -1,    -1,    -1,   487,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,    -1,
      -1,    -1,    -1,   169,    -1,   171,    -1,   173,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,   245,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
      -1,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,    -1,   324,    -1,
     326,   327,    -1,   329,   330,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,   349,   350,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   358,    -1,   360,    -1,    -1,   363,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,    -1,    -1,    -1,    -1,     6,    -1,     8,
      -1,    10,    -1,   419,   420,    -1,    -1,    16,    -1,    18,
      -1,   427,   428,   429,    -1,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,    -1,    -1,    35,    36,    -1,    38,
      39,    -1,    41,    -1,    -1,    44,    45,    46,    47,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    -1,    65,   473,    -1,    68,
     476,   477,    71,    72,    73,   481,    -1,    76,    -1,    -1,
      -1,   487,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,   127,   128,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,
     169,    -1,   171,    -1,   173,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,    -1,
     269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,    -1,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,    -1,    -1,    -1,   326,   327,    -1,
     329,   330,    -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
     349,   350,   351,    -1,    -1,    -1,    -1,    -1,    -1,   358,
      -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
      -1,    -1,    -1,    -1,   413,    -1,   415,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,    -1,    -1,    -1,   433,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
       6,     7,     8,    -1,    10,    -1,    -1,    -1,    -1,    -1,
      16,    -1,    18,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,    35,
      36,    -1,    38,    39,    -1,    41,    -1,    -1,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,    -1,
      -1,    -1,    -1,   169,    -1,   171,    -1,   173,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,   245,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
      -1,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,    -1,   324,    -1,
     326,   327,    -1,   329,   330,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,   349,   350,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   358,    -1,   360,    -1,    -1,   363,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,    -1,    -1,    -1,    -1,     6,    -1,     8,
      -1,    10,    -1,   419,   420,    -1,    -1,    16,    -1,    18,
      -1,   427,   428,   429,    -1,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,    -1,    -1,    -1,    35,    36,    -1,    38,
      39,    -1,    41,    -1,    -1,    44,    45,    46,    47,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    -1,    65,   473,    -1,    68,
     476,   477,    71,    72,    73,   481,    -1,    76,    -1,    -1,
      -1,   487,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,   127,   128,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,
     169,    -1,   171,    -1,   173,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,    -1,
     269,    -1,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,    -1,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,    -1,    -1,    -1,   326,   327,    -1,
     329,   330,    -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
     349,   350,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
      -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
      -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
     419,   420,    -1,    -1,    -1,    -1,    -1,    -1,   427,   428,
     429,    -1,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,
       6,    -1,     8,    -1,    10,    -1,    -1,    -1,    -1,    -1,
      16,    -1,    18,    -1,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,    35,
      36,    -1,    38,    39,    -1,    41,    -1,    -1,    44,    45,
      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,
      -1,    -1,    68,    -1,    -1,    71,    72,    73,    -1,    -1,
      76,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,    -1,
      -1,    -1,    -1,   169,    -1,   171,    -1,   173,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,    -1,   269,    -1,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
      -1,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,    -1,   329,   330,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,   349,   350,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   358,    -1,   360,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,    -1,    -1,    -1,    -1,   413,    -1,    -1,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,    -1,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
      -1,    -1,    -1,     6,    -1,     8,    -1,    10,    -1,    -1,
      -1,    -1,    -1,    16,    -1,    18,    -1,   473,    -1,    -1,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,    35,    36,    -1,    38,    39,    -1,    41,    -1,
      -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      63,    -1,    65,    -1,    -1,    68,    -1,    -1,    71,    72,
      73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,   126,   127,   128,    -1,   130,    -1,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,    -1,    -1,    -1,   157,   158,    -1,    -1,    -1,    -1,
     163,    -1,    -1,    -1,    -1,    -1,   169,    -1,   171,    -1,
     173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,
      -1,    -1,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
      -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,
     253,    -1,    -1,    -1,   257,    -1,    -1,    -1,   261,   262,
      -1,   264,    -1,   266,    -1,    -1,   269,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,    -1,    -1,   298,    -1,    -1,    -1,   302,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   316,    -1,    -1,   319,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,    -1,   329,   330,    -1,    -1,
     333,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,    -1,
      -1,    -1,    -1,   346,    -1,    -1,   349,   350,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   358,    -1,   360,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   405,   406,   407,   408,    -1,    -1,    -1,    -1,
       6,    -1,     8,   416,    10,    -1,   419,   420,    -1,    -1,
      16,    -1,    18,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,   435,    -1,   437,   438,    -1,    -1,    -1,    35,
      36,    -1,    38,    39,    -1,    41,    -1,    -1,    44,    45,
      46,    47,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,
     473,    -1,    68,   476,   477,    71,    72,    73,   481,   482,
      76,    -1,    -1,    -1,   487,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,    -1,
      -1,    -1,    -1,   169,    -1,   171,    -1,   173,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,
     266,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
      -1,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,    -1,   329,   330,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,   349,   350,   351,    -1,    -1,    -1,    -1,
      -1,    -1,   358,    -1,   360,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,   408,    -1,    -1,    -1,    -1,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,
      -1,   427,   428,   429,    -1,    -1,    -1,    -1,    -1,   435,
     436,   437,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     6,    -1,     8,    -1,    10,   455,
      -1,    -1,    -1,    -1,    16,    -1,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,    -1,    35,    36,   481,    38,    39,    -1,    41,
      -1,   487,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    63,    -1,    65,    -1,    -1,    68,    -1,    -1,    71,
      72,    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,   127,   128,    -1,   130,    -1,
      -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,    -1,    -1,    -1,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,    -1,    -1,    -1,    -1,   169,    -1,   171,
      -1,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
      -1,    -1,    -1,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,    -1,    -1,    -1,   257,    -1,    -1,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,    -1,   269,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,    -1,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,    -1,   329,   330,    -1,
      -1,   333,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,    -1,   346,    -1,    -1,   349,   350,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,   360,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,    -1,    -1,    -1,
      -1,   413,    -1,    -1,    -1,    -1,    -1,   419,   420,    -1,
      -1,    -1,    -1,    -1,    -1,   427,   428,   429,    -1,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,     6,    -1,     8,
      -1,    10,    -1,    -1,    -1,    -1,    -1,    16,    -1,    18,
      -1,   473,    -1,    -1,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,    35,    36,    -1,    38,
      39,    -1,    41,    -1,    -1,    44,    45,    46,    47,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    -1,    65,    -1,    -1,    68,
      -1,    -1,    71,    72,    73,    -1,    -1,    76,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,   127,   128,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,   157,   158,
      -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,
     169,    -1,   171,    -1,   173,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,   257,    -1,
      -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,    -1,
     269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,    -1,    -1,   298,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
     319,   320,   321,    -1,    -1,    -1,    -1,   326,   327,    -1,
     329,   330,    -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
     349,   350,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
      -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,   408,
      -1,    -1,    -1,    -1,     6,    -1,     8,    -1,    10,    -1,
     419,   420,    -1,    -1,    16,    -1,    18,    -1,   427,   428,
     429,    -1,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,
      -1,    -1,    -1,    35,    36,    -1,    38,    39,    -1,    41,
      -1,    -1,    44,    45,    46,    47,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    63,    -1,    65,   473,    -1,    68,   476,   477,    71,
      72,    73,   481,    -1,    76,    -1,    -1,    -1,   487,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,   127,   128,    -1,   130,    -1,
      -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,    -1,    -1,    -1,    -1,   157,   158,    -1,    -1,    -1,
      -1,   163,    -1,    -1,    -1,    -1,    -1,   169,    -1,   171,
      -1,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
      -1,    -1,    -1,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     212,    -1,   214,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,    -1,
      -1,   253,    -1,    -1,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,   264,    -1,   266,    -1,    -1,   269,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,    -1,    -1,   298,    -1,    -1,    -1,
     302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   316,    -1,    -1,   319,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,    -1,   329,   330,    -1,
      -1,   333,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
      -1,    -1,    -1,    -1,   346,    -1,    -1,   349,   350,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,   360,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,   406,   407,   408,    -1,    -1,    -1,
      -1,     6,    -1,     8,    -1,    10,    -1,   419,   420,    -1,
      -1,    16,    -1,    18,    -1,   427,   428,   429,    -1,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,    -1,    -1,    -1,
      35,    36,    -1,    38,    39,    -1,    41,    -1,    -1,    44,
      45,    46,    47,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,
      65,   473,    -1,    68,   476,   477,    71,    72,    73,   481,
      -1,    76,    -1,    -1,    -1,   487,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,
      -1,    -1,   157,   158,    -1,    -1,    -1,    -1,   163,    -1,
      -1,    -1,    -1,    -1,   169,    -1,   171,    -1,   173,    -1,
      -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,    -1,
      -1,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,   264,
      -1,   266,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,    -1,    -1,   298,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   316,    -1,    -1,   319,   320,   321,    -1,    -1,    -1,
      -1,   326,   327,    -1,   329,   330,    -1,    -1,   333,    -1,
      -1,    -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,
      -1,   346,    -1,    -1,   349,   350,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   358,    -1,   360,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,   406,   407,   408,    -1,    -1,    -1,    -1,     6,    -1,
       8,    -1,    10,    -1,   419,   420,    -1,    -1,    16,    -1,
      18,    -1,   427,   428,   429,    -1,    -1,    -1,    -1,    -1,
     435,    -1,   437,   438,    -1,    -1,    -1,    35,    36,    -1,
      38,    39,    -1,    41,    -1,    -1,    44,    45,    46,    47,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    63,    -1,    65,   473,    -1,
      68,   476,   477,    71,    72,    73,   481,    -1,    76,    -1,
      -1,    -1,   487,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,   127,
     128,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,
      -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,   157,
     158,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
      -1,   169,    -1,   171,    -1,   173,    -1,    -1,    -1,    -1,
      -1,   179,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   212,    -1,   214,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,   257,
      -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,    -1,
      -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,   295,    -1,    -1,
     298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,
      -1,   319,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
      -1,   329,   330,    -1,    -1,   333,    -1,    -1,    -1,    -1,
      -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,   349,   350,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,    -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,   407,
     408,    -1,    -1,    -1,    -1,     6,    -1,     8,    -1,    10,
      -1,   419,   420,    -1,    -1,    16,    -1,    18,    -1,   427,
     428,   429,    -1,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,    -1,    -1,    -1,    35,    36,    -1,    38,    39,    -1,
      41,    -1,    -1,    44,    45,    46,    47,   455,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    -1,    65,   473,    -1,    68,   476,   477,
      71,    72,    73,   481,    -1,    76,    -1,    -1,    -1,   487,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,   126,   127,   128,    -1,   130,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,
      -1,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,    -1,    -1,    -1,   157,   158,    -1,    -1,
      -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,   169,    -1,
     171,    -1,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   212,    -1,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
      -1,    -1,   253,    -1,    -1,    -1,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,    -1,   266,    -1,    -1,   269,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,    -1,    -1,   298,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,   319,   320,
     321,    -1,    -1,    -1,    -1,   326,   327,    -1,   329,   330,
      -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,   339,    -1,
      -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,   349,   350,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,   360,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   405,   406,   407,   408,    -1,    -1,
      -1,    -1,     6,    -1,     8,    -1,    10,    -1,   419,   420,
      -1,    -1,    16,    -1,    18,    -1,   427,   428,   429,    -1,
      -1,    -1,    -1,    -1,   435,    -1,   437,   438,    -1,    -1,
      -1,    35,    36,    -1,    38,    39,    -1,    41,    -1,    -1,
      44,    45,    46,    47,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      -1,    65,   473,    -1,    68,   476,   477,    71,    72,    73,
     481,    -1,    76,    -1,    -1,    -1,   487,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,   127,   128,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
      -1,    -1,    -1,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,    -1,    -1,    -1,    -1,   169,    -1,   171,    -1,   173,
      -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,
      -1,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
      -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,    -1,    -1,   253,
      -1,    -1,    -1,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,    -1,   266,    -1,    -1,   269,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,    -1,    -1,   298,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   316,    -1,    -1,   319,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,    -1,   329,   330,    -1,    -1,   333,
      -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,    -1,   346,    -1,    -1,   349,   350,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,    -1,   360,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,   406,   407,   408,    -1,    -1,    -1,    -1,     6,
      -1,     8,    -1,    10,    -1,   419,   420,    -1,    -1,    16,
      -1,    18,    -1,   427,   428,   429,    -1,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,    -1,    -1,    -1,    35,    36,
      -1,    38,    39,    -1,    41,    -1,    -1,    44,    45,    46,
      47,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,   473,
      -1,    68,   476,   477,    71,    72,    73,   481,    -1,    76,
      -1,    -1,    -1,   487,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,
      -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,
     127,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,
     157,   158,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,
      -1,    -1,   169,    -1,   171,    -1,   173,    -1,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   212,    -1,   214,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,
     257,    -1,    -1,    -1,   261,   262,    -1,   264,    -1,   266,
      -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,   295,    -1,
      -1,   298,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,
      -1,    -1,   319,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,    -1,   329,   330,    -1,    -1,   333,    -1,    -1,    -1,
      -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,   346,
      -1,    -1,   349,   350,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   358,    -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,   406,
     407,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   419,   420,    -1,    -1,    -1,    -1,    -1,    -1,
     427,   428,   429,    -1,    -1,    -1,    -1,    -1,   435,    -1,
     437,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,    -1,    -1,
     487
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     1,     3,     4,     6,     8,     9,    10,    13,    14,
      16,    17,    18,    19,    20,    21,    23,    29,    32,    33,
      35,    36,    38,    39,    40,    41,    43,    44,    45,    46,
      47,    52,    53,    54,    55,    56,    57,    60,    63,    64,
      65,    68,    71,    72,    73,    74,    76,    77,    81,    82,
      85,    89,    91,    93,    95,    96,    99,   100,   102,   104,
     105,   106,   108,   109,   110,   120,   121,   122,   125,   126,
     127,   128,   130,   133,   134,   135,   136,   137,   140,   142,
     143,   147,   152,   154,   155,   156,   157,   158,   162,   163,
     164,   165,   169,   170,   171,   172,   173,   174,   176,   177,
     178,   179,   182,   185,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   200,   202,   203,   204,   208,   212,   214,
     215,   216,   217,   219,   224,   225,   226,   230,   238,   240,
     244,   245,   246,   247,   249,   253,   254,   255,   257,   261,
     262,   264,   266,   268,   269,   270,   271,   272,   273,   274,
     277,   278,   279,   280,   281,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   302,   305,   307,
     308,   309,   310,   311,   313,   314,   316,   319,   320,   321,
     323,   325,   326,   327,   328,   329,   330,   331,   333,   334,
     335,   336,   339,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   356,   357,   358,   359,   360,   361,
     364,   367,   370,   372,   373,   376,   377,   379,   381,   383,
     385,   386,   387,   400,   405,   406,   407,   408,   409,   411,
     412,   413,   415,   419,   420,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   433,   435,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   455,   456,   457,
     458,   459,   460,   461,   462,   467,   468,   473,   476,   477,
     479,   481,   485,   487,   490,   491,   493,   494,   501,   502,
     503,   504,   507,   522,   523,   532,   536,   537,   538,   539,
     541,   542,   543,   544,   545,   547,   594,   595,   596,   597,
     603,   604,   605,   607,   659,   687,   691,   708,   712,   713,
     714,   715,   716,   717,   718,   721,   722,   723,   729,   730,
     737,   740,   742,   745,   746,   763,   764,   765,   766,   767,
     769,   775,   776,   780,   782,   783,   784,   786,   788,   789,
     790,   891,   892,   895,   911,   913,   914,   915,   923,   924,
     925,   926,   927,   928,   930,   931,   974,   975,  1009,  1010,
     479,   476,   476,   476,   476,   476,   476,    63,   130,   142,
     174,   262,   408,   438,   502,   522,   730,   765,   309,   476,
     476,   476,   476,   476,   476,   476,    16,    76,   713,    10,
      16,    18,    35,    63,    71,    76,    93,   104,   126,   130,
     142,   143,   179,   188,   212,   214,   225,   293,   307,   319,
     372,   438,   477,   708,   730,   745,   765,   780,   783,   789,
     913,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   309,   476,   476,   502,   476,
     491,   476,   476,   476,   476,   476,   476,   476,   368,   476,
     476,   476,   405,   406,   407,   408,   409,   411,   412,   413,
     414,   415,   416,   417,   420,   422,   427,   428,   429,   430,
     431,   432,   434,   436,   437,   533,   534,   535,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   503,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,    71,
     502,   504,   765,   713,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   737,   780,
     789,   476,   476,   476,   476,   476,   713,   476,   476,   476,
     533,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,    33,
      58,    61,    67,    80,    90,    94,   124,   147,   149,   297,
     304,   306,   351,   355,   414,   415,   418,   422,   427,   428,
     431,   432,   433,   434,   436,   438,   448,   449,   502,   504,
     512,   513,   515,   516,   517,   518,   519,   520,   530,   531,
     547,   569,   570,   572,   574,   595,   603,   661,   677,   678,
     687,   707,   708,   712,   713,   714,   729,   730,   749,   753,
     765,   767,   780,   783,   789,   817,   818,   914,   922,   923,
     928,   929,   932,   476,   476,   476,   476,   476,   476,   476,
     476,   533,   476,   475,   476,   229,   476,   368,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   502,
     476,   476,   476,   476,   476,   476,   476,   533,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   309,   476,   476,   476,   476,   476,   476,    35,
      36,    38,    45,    46,    91,   104,   126,   142,   143,   163,
     179,   188,   212,   214,   215,   216,   225,   316,   326,   339,
     350,   372,   438,   476,   477,   594,   730,   765,   789,   476,
     476,   476,   476,   476,   476,   512,   412,   603,   687,   729,
     765,   767,   780,   789,   543,   687,   723,   438,   687,   708,
     721,   730,   765,   476,   476,   476,   476,   476,   476,   476,
     476,   745,   745,   467,   712,   722,   729,   730,   765,   783,
     789,   484,   953,     0,     1,   469,   496,   497,   953,   533,
     479,   476,   525,   526,   293,   307,   532,   539,   765,   913,
    1010,   476,   664,   666,   664,   492,   543,   687,   723,   544,
     405,   406,   407,   409,   413,   420,   891,   405,   406,   475,
     483,   549,    11,   237,   468,   479,     1,    12,    63,   144,
     410,   412,   438,   476,   480,   502,   504,   594,   687,   692,
     693,   700,   701,   705,   706,   712,   721,   729,   730,   749,
     753,   765,   780,   783,   789,   891,   943,   475,   533,   479,
     549,   124,   485,   665,   666,   731,    11,   237,    27,   150,
     224,   392,   393,   394,   395,   396,   397,   398,   402,   403,
     404,   467,   468,   469,   470,   471,   472,   473,   474,   741,
     477,   745,   405,   406,   407,   408,   409,   411,   413,   419,
     420,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   433,   435,   437,   438,   439,   473,   475,   475,   150,
     224,   391,   392,   393,   467,   474,   475,   476,   549,   950,
     467,   477,   549,   391,   392,   393,   467,   468,   474,   475,
     477,   549,   410,   395,   950,   533,   477,   476,   476,   476,
     476,   476,   476,   476,   476,   399,   479,   729,   729,   789,
     900,   789,   953,   789,   884,   476,   476,   476,   765,   665,
     731,   438,   884,   729,   729,   789,   884,   729,   729,   729,
     128,   647,   729,   884,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     953,   665,   731,   438,   884,   928,   729,   729,   789,   729,
     789,   884,   884,   729,   780,   789,    10,    18,    35,    93,
     104,   126,   142,   143,   188,   212,   214,   225,   319,   372,
     438,   477,   603,   730,   765,   900,   128,   884,   729,   729,
     128,   421,   647,   783,   884,   128,   884,   953,    75,   379,
     477,   687,   729,   765,   780,   783,   789,   830,   975,   789,
     889,   900,   438,   477,   687,   730,   765,   884,   884,   884,
     884,   884,   512,   687,   765,   789,   482,   687,   729,   783,
     789,   438,   603,   729,   730,   748,   765,   767,   780,   789,
     482,   729,   482,   128,   647,   783,   789,   729,   482,   687,
     722,   729,   765,   783,   789,   482,   482,   729,   900,   687,
     729,   687,   729,   603,   729,   780,   789,   789,   898,   884,
     884,   953,   953,   953,   953,   898,   729,   727,   729,   727,
     729,   729,   729,   789,   887,   890,   900,   914,   789,   729,
     789,   789,   729,   729,   153,   729,   771,   727,   789,   476,
     729,   729,   729,   780,   789,   729,   898,   727,   951,   952,
     958,   959,   960,   961,   966,   967,   970,   971,   416,   432,
     482,   765,   780,   789,  1004,  1005,  1006,  1007,  1008,   482,
     765,  1004,   482,  1004,  1004,   482,   729,   765,   780,  1004,
     482,   729,   780,  1004,   482,   729,   780,  1004,   128,   647,
     884,   884,   890,   890,   128,   647,   884,   789,   603,   729,
     780,   783,   789,   603,   729,   780,   783,   789,   729,   780,
     783,   789,   729,   780,   789,     7,    65,   139,   179,   216,
     238,   245,   321,   324,   360,   363,   613,   621,   622,   628,
     789,   792,   793,   789,   899,   603,   729,   789,   434,   661,
     729,   730,   765,   512,   953,   603,   729,   767,   780,   783,
     884,   953,   789,   888,   884,   729,   884,   729,   789,   900,
     767,   780,   896,   899,   884,   888,   482,   914,   729,   729,
     729,   512,   728,   729,   789,   729,   729,   729,   789,   791,
     727,   733,   734,   476,   476,   512,   476,   476,   476,   476,
     512,   355,   483,   681,   476,   351,   436,   570,   730,   765,
     479,   485,   702,    58,    58,   540,    86,   541,   575,   575,
     406,   409,   891,     1,    51,   174,   179,   293,   408,   413,
     422,   502,   504,   505,   506,   507,   508,   533,   536,   679,
     680,   684,   687,   712,   713,   714,   765,   750,   665,   731,
     414,   415,   418,   427,   428,   431,   432,   433,   434,   436,
     438,   408,   412,   722,   765,   819,   821,   476,   476,   889,
     729,   729,   438,   477,   485,   570,   596,   730,   765,   789,
     853,   896,   780,   780,   780,   687,   789,   953,    12,   502,
     722,   765,   884,   722,   729,   729,     1,   687,   708,   712,
     713,   729,   749,   751,   752,   753,   765,   780,   789,   293,
     687,   729,   789,   888,   882,   882,   729,   729,   884,   767,
     882,   789,   128,   647,   884,   884,   729,   729,   729,   780,
     783,   789,   780,   884,   729,   780,   884,   729,   780,   789,
     687,   789,   729,   729,   512,   729,   884,   727,   884,   899,
     128,   884,   661,   663,   729,   603,   729,   780,   789,   733,
     729,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   780,   789,   467,   789,   953,   665,   438,
     729,   729,   729,   729,   729,   729,   479,   450,   450,   450,
     450,   450,   450,   447,   665,   731,   438,   657,   687,   822,
     884,   729,   729,   729,   729,   729,   729,   240,   412,   623,
     624,   625,   482,   482,   482,   482,   731,   482,   482,   468,
     600,   603,   729,   780,   783,   789,   791,   939,   940,   479,
     495,   119,   495,    15,   119,   412,   473,   481,   498,   499,
     500,   528,   529,   767,   524,   480,   482,   667,   668,   953,
     399,   485,  1011,   287,   479,   772,   772,   772,   772,   772,
     772,   772,   475,   772,   475,    37,    50,    67,    69,   107,
     126,   148,   167,   231,   234,   251,   258,   275,   301,   327,
     330,   372,   550,   551,   224,   687,   687,   412,   477,   687,
     533,   476,   476,   702,   687,   765,   180,   198,   199,   244,
     694,   533,   533,   891,   693,   699,   700,   480,   700,   479,
     480,   599,   685,   686,   698,   479,   480,   698,   700,   533,
     533,   665,   731,   533,   438,   421,   731,   540,   737,   737,
     742,   742,   783,    27,   150,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   210,   401,
     729,   743,   744,   772,   772,   772,   772,   772,   772,   772,
     772,   772,   772,   772,   772,   772,   772,   772,   772,   772,
     772,   772,   772,   772,   772,   772,   772,   783,   150,   780,
     789,   780,   780,   780,   789,   780,   789,   482,   734,   783,
     647,   780,   789,   789,   789,   780,   789,   789,   780,   789,
     210,   401,   729,   893,   894,   907,   729,   777,   660,   781,
     912,   787,   770,   598,   916,   417,   713,   765,  1013,  1014,
    1018,   482,   482,   480,   482,    35,   104,   126,   142,   143,
     188,   212,   214,   225,   372,   438,   477,   600,   730,   765,
     780,   789,   480,   727,   731,   540,   772,   482,   482,   480,
     608,   480,   482,   482,   480,   480,   480,   482,   480,   953,
     729,   780,   765,   789,   727,   727,   727,   729,   888,   731,
     540,   772,  1022,   482,   480,   480,   480,   480,   480,   480,
     480,   482,   482,   482,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   953,   480,
     665,   731,   438,   480,   480,   480,   482,   482,   480,   758,
     482,   482,   482,   761,   480,   480,    18,    26,    65,    97,
     111,   130,   153,   159,   163,   169,   179,   187,   200,   205,
     216,   247,   256,   273,   315,   321,   341,   362,   378,   621,
     789,   805,   862,   863,   938,   940,   941,   942,   943,   476,
     476,   953,   719,   482,   482,   480,   480,   480,   482,   480,
     944,   945,   480,   484,   953,   482,   665,   731,   438,   480,
     482,  1022,   480,   482,   953,   482,   480,   482,   482,   480,
     480,   824,   480,   482,   824,   824,   482,   482,   665,   731,
     480,   438,   480,   482,   482,   482,   758,   482,   482,   761,
     482,   824,   480,   482,   480,   482,   824,   824,   482,   480,
     480,   480,   480,   480,   482,   480,   482,   480,   557,   480,
     557,   480,   557,   482,   755,   480,   482,   880,   880,   938,
     938,   938,   938,   480,   480,   480,   480,   480,   482,   482,
     480,   480,   480,   480,   480,   482,   831,   480,   480,   482,
     482,   476,   480,   480,   482,   480,   482,   480,   482,   482,
     482,   482,   482,   755,   400,   480,   480,   482,   480,   482,
     480,   480,   482,   416,   432,   482,   482,   470,   482,   477,
     482,   482,   482,   482,   482,   482,   482,   482,   482,   482,
     482,   482,   480,   482,   480,   480,   480,   480,   480,   482,
     480,   482,   482,   482,   482,   482,   482,   482,   482,   482,
     482,   482,   482,   482,   482,   482,   482,   482,   482,   476,
     476,   476,   476,   476,   476,   476,   480,   482,   480,   482,
     482,   482,   480,   482,   480,   665,   731,   434,   482,   601,
     602,   603,   729,   482,   480,   648,   480,   482,   648,   648,
     480,   648,   601,   480,   480,   480,   480,   480,   480,   977,
     480,   480,   480,   480,   482,   480,   480,   480,   480,   480,
     482,   480,   480,   480,   480,   480,   480,   482,   482,   480,
     729,    59,   767,   729,   767,   476,   533,   682,   683,   687,
     780,   450,   665,   731,   436,    30,    34,    35,    39,    66,
      81,   174,   197,   198,   199,   207,   269,   307,   368,   382,
     388,   442,   486,   622,   703,   704,   287,   521,   543,    86,
     599,    86,   142,   439,   493,   532,   577,   578,   579,   580,
     581,   582,   586,   587,   599,   765,   772,   772,   772,   508,
     506,   476,   666,   713,    86,   680,   533,   476,   709,   731,
     540,   772,   772,   772,   772,   772,   772,   772,   772,   772,
     772,   772,   392,   392,   820,   571,   662,   480,   480,   482,
     482,   730,   765,   484,   953,   482,   482,   665,   731,   438,
     482,   480,   480,   482,   482,   480,   482,   480,   601,   480,
     482,   482,   482,   482,   480,   754,   754,   687,   482,   480,
     480,   884,   789,   884,   482,   482,   480,   482,   884,   480,
     480,   482,   480,   480,   482,   482,   482,   482,   482,   482,
     482,   482,   480,   480,   482,   480,   872,   873,   480,   480,
     480,   482,   482,   480,   867,   868,   869,   482,   482,   480,
     482,   482,   482,   480,   480,   480,   480,   482,   480,   480,
     480,   480,   482,   482,   729,   789,   729,   780,   789,   603,
     789,   780,   789,   727,   727,   789,   780,   789,   727,   780,
     789,   780,   789,   780,   789,   780,   789,   789,   780,   789,
     729,   780,   789,   731,   772,   480,   482,   480,   760,   480,
     482,   482,   731,   540,   772,   480,   635,  1022,   480,   480,
     480,   480,   480,   482,   480,   480,   482,   476,   476,   745,
     745,   540,   780,   484,   599,   955,   479,   480,   484,   499,
     412,   469,   499,   480,   475,   480,   482,    86,   537,   543,
     546,   118,   152,   171,   223,   368,   527,   369,   676,   480,
     482,    12,    18,    51,   213,   235,   241,   249,   297,   344,
     368,   389,   390,   406,   412,   427,   428,   431,   434,   436,
     502,   504,   505,   509,   510,   669,   670,   671,   697,   712,
     721,   730,   765,   767,   922,   923,     1,   511,   512,   514,
    1012,  1018,   399,   512,   410,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   480,   412,   477,   687,   412,   690,   702,   789,
     727,   399,   482,   476,   476,   476,   702,   702,   772,   699,
      86,   486,   685,   695,   696,   479,   480,   694,   685,   698,
     701,   701,   695,   400,   695,    86,   698,   702,   477,   702,
     731,   540,   702,   772,   893,   540,   287,    11,   742,   742,
     783,   743,   729,   401,   484,   603,   687,   729,   767,   780,
     789,   543,   783,   480,   620,   484,   729,   729,   401,   484,
     397,   484,   207,   249,   297,   344,   412,   512,   687,   729,
     753,   767,   780,   783,   789,   914,   917,   918,   919,   920,
     921,   922,   917,   917,   917,   917,   917,   917,   917,   417,
     479,   472,   687,   886,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   953,   482,   665,   731,   438,   955,
     955,   603,   653,   480,   540,   287,   908,    51,   104,   729,
     482,   606,   607,   729,   729,   729,   729,   729,   480,   480,
     480,   400,   480,   480,   540,   287,   480,   610,   953,   729,
     232,   316,   605,   730,   802,   729,   735,   736,   783,   785,
     789,   792,   729,   727,   842,   951,   129,   621,   789,   794,
     795,   953,   729,   727,   727,   727,   729,   888,   729,   789,
     731,   540,   772,   789,   885,   729,   729,   727,   482,   480,
     482,   729,   729,   321,   476,   729,   780,   789,   476,   476,
     233,   239,   476,   476,   476,   476,   476,   476,   273,   479,
     480,   482,   729,   729,   438,   570,   596,   730,   765,   853,
     854,   855,   480,   482,   830,   755,   713,    26,    97,   133,
     161,   187,   273,   378,   621,   729,   780,   789,   946,   482,
     480,   885,   480,   730,   765,   854,   731,   540,   772,   687,
     908,   480,   567,   729,   908,   480,   864,   908,   246,   729,
     953,   482,   729,   482,   482,   731,   540,   729,   772,   533,
     482,   482,   482,   729,   729,   482,   482,   885,   729,   729,
     729,   729,   729,   111,   187,   235,   558,   559,   482,   729,
     482,   729,   482,   906,   480,   908,   953,   953,   482,   482,
     482,   482,   734,   729,   603,   729,   767,   780,   783,   789,
     603,   729,   780,   783,   789,   729,   755,   904,   885,   789,
     235,   480,   482,   729,   480,   729,   928,   769,   928,   729,
     729,   729,   480,   603,   729,   780,   783,   789,   729,   952,
     727,   789,   959,   727,   783,   961,   727,   780,   967,   603,
     971,   772,   772,  1005,   729,   729,   729,   792,   953,   904,
     729,   729,   729,   623,   729,   729,   882,   729,   729,   793,
     729,   789,   885,   729,   729,   731,   540,   772,   599,   698,
       9,   103,   114,   179,   199,   207,   216,   218,   228,   242,
     327,   340,   360,   364,   384,   621,   649,   650,   482,   767,
     482,   482,   327,   657,   482,   698,   729,   882,   687,   729,
     729,   728,   729,   482,   780,   897,   767,   438,   570,   730,
     765,   755,   908,   729,   729,   729,   729,   729,   184,   687,
     827,   687,   827,   729,   729,   729,   791,   727,   482,   681,
     480,   681,   480,   480,   687,   392,   476,   480,   482,   731,
     540,   772,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   486,   480,   512,   479,
     316,   576,   577,   476,   729,    86,   599,   302,   588,   589,
     590,   591,   607,   479,   581,   479,   664,   439,   410,   687,
     681,   666,   917,   540,   287,   570,   729,   729,   480,   482,
     917,   917,   128,   570,   729,   730,   765,   903,   729,   665,
     480,   477,   729,   780,   789,   848,   849,   851,   852,   853,
     731,   540,   772,   687,   438,   570,   687,   730,   765,   780,
     533,   729,   698,   729,   196,   203,   482,   482,   482,   729,
     729,   480,   482,   480,   647,   480,   603,   729,   729,   570,
     687,   908,   729,   729,   161,   207,   298,   316,   729,   874,
     482,   480,   687,   722,   722,   722,     9,   169,   288,   374,
     870,   482,   869,   729,   908,   908,   570,   729,   729,   142,
     603,   603,   603,   603,   480,   480,   480,   480,   480,   400,
     480,   540,   780,   789,   713,     9,   482,   570,   540,   287,
     438,   570,   687,   691,   730,   765,   823,   830,   482,   480,
     729,   822,   548,   729,   780,   789,   729,   729,   548,    91,
     104,   145,   182,   371,   552,   624,   953,   778,   779,   780,
     789,   287,   603,   484,   940,   940,    15,   499,   412,   473,
     529,   526,   664,   476,   668,   676,    63,   533,    51,    63,
     273,   392,   674,   533,   670,   671,   533,   665,   406,   427,
     428,   431,   434,   436,   412,   674,   549,   480,   486,   953,
     978,   479,   893,   728,   729,   975,   975,   603,   111,   187,
     564,   729,   166,   561,   563,   564,   729,   729,   564,   728,
     729,   729,   603,   728,  1024,   603,   663,   551,   690,   480,
     484,   399,   710,   711,   482,   482,   729,   780,   783,   789,
     442,   728,   728,   710,   710,   421,   685,   695,   695,   695,
     695,   700,    86,   710,   729,   710,   540,   287,   710,   287,
     603,   687,   729,   767,   780,   789,   914,   742,    11,   484,
     469,   729,   450,   450,   450,   450,   450,   450,   621,   482,
     484,   484,   484,   729,   412,   978,   978,   978,   399,   399,
     485,   933,   482,   480,   482,   482,   482,   482,   482,   482,
     482,   772,  1018,   480,   729,   727,   727,   727,   731,   540,
     772,   482,   480,   810,   480,   482,   287,   480,   608,   480,
     482,   480,   608,   482,   758,   761,   953,   729,   729,   287,
     780,   789,    24,    31,    42,    48,    63,    65,    73,   101,
     111,   112,   198,   201,   207,   218,   220,   242,   248,   251,
     307,   320,   321,   341,   364,   375,   480,   609,   611,   612,
     614,   615,   621,   631,   645,   687,   729,   789,   863,   482,
     603,   729,   783,   789,   956,   957,   962,   963,   964,   965,
     968,   969,   972,   973,   482,   476,   731,   480,   620,   480,
     482,   480,   482,   482,   480,   845,   400,   482,   480,   476,
     480,   482,   480,   480,   480,   400,   480,   480,   482,   482,
     540,   287,   480,   482,   480,   480,   163,   622,   628,   762,
     805,   908,   480,   480,   729,   738,   739,   728,   789,   729,
     738,   729,   725,   729,   882,   729,   942,   942,   482,   480,
     482,   665,   731,   438,   480,   484,   480,   484,    39,    55,
     170,   314,   720,   480,   570,   687,   688,   713,   482,   476,
     729,   729,   273,   910,   946,   480,   687,   484,   540,   287,
     482,   201,   248,   265,   568,   622,   729,   789,   863,   901,
     482,   811,    22,   207,   315,   865,   866,   938,   955,   482,
     480,   620,   600,   729,   482,   540,   287,   482,   482,   480,
     482,   482,   480,   651,   482,   651,   482,   482,   480,   557,
     557,   902,   729,   293,   938,   938,   620,   480,   480,   482,
     480,   480,   480,   482,   480,   482,   480,   482,   480,   482,
     480,   480,   482,   480,   482,   480,   482,   480,   570,   729,
     480,   480,   482,   789,   908,   480,   729,   480,   482,   482,
     482,   480,   482,   480,   800,   482,   729,   482,   400,   482,
     400,   482,   400,   482,   482,   484,   482,   761,   482,   938,
     729,   482,   761,   482,   482,   482,   482,   738,   789,   482,
     482,   480,   480,   482,   480,   482,   540,   287,   602,   482,
     476,   476,   476,   476,   480,   482,   908,   908,   482,   480,
     953,   480,   838,   480,   838,   482,   480,   773,   482,   665,
     731,   438,   570,   687,   480,   482,   480,   757,   757,   480,
     476,   726,   480,   482,   480,   482,   480,   759,   480,   759,
     480,   482,   729,   482,   729,   729,   482,   412,   742,   742,
     683,   540,   287,   729,   729,   729,   512,   729,   729,   729,
     729,   744,   623,   112,   181,   183,   314,   728,   729,   729,
     703,    86,   476,   482,   729,   338,   578,   399,   475,   772,
     399,   772,   893,   482,   479,   681,   482,   287,   570,   661,
     765,   450,   408,   821,   482,   482,   480,   947,   948,   480,
     665,   480,   482,   731,   596,   730,   765,   953,   400,   479,
     480,   698,   850,   486,   540,   287,   482,   482,   482,   665,
     731,   438,   480,   747,   480,   482,   482,   482,   480,   480,
     953,   883,   953,   480,   813,   953,   954,   482,   758,   761,
     482,   953,   480,   482,   476,   476,   476,   476,   908,   874,
     482,   482,   482,   482,   480,   482,   482,   758,   761,   476,
     480,   796,   796,   796,   796,   953,   789,   780,   789,   780,
     789,   780,   789,   287,   482,   620,   287,   480,   695,   731,
     438,   480,   908,    48,    73,    75,   112,   115,   198,   235,
     257,   283,   320,   321,   326,   614,   615,   621,   636,   637,
     827,   635,   635,   482,   482,   482,   482,   482,   401,   412,
     626,   627,   729,   480,   629,   412,   479,   928,   533,   674,
     476,   512,   476,   672,   673,   674,   672,   674,   731,   772,
     772,   772,   772,   772,   772,   392,   675,   479,  1018,   979,
     980,   982,   983,   549,   482,   562,   482,   482,   562,   482,
     480,   560,   476,   480,   482,   562,   482,   482,   480,   480,
     482,   482,   480,   482,   480,   815,   729,   562,   480,   482,
     484,   412,   729,   767,   780,   783,   789,   482,   482,   482,
     893,   695,   698,   484,   287,   603,   687,   729,   767,   780,
     783,   789,   914,   479,   479,   479,   479,   479,   479,   479,
     742,   620,   484,   399,   297,   687,   729,   753,   765,   767,
     780,   783,   789,   914,   921,   922,   921,   953,   919,   570,
     480,   480,   480,   400,   540,   287,   173,   482,     5,    25,
     603,   654,   908,   104,   482,   607,   908,   729,   482,   482,
     482,   729,   480,   480,   476,   476,   476,   476,   476,   476,
     726,   476,   476,   476,   476,     9,   163,   476,   476,   830,
     480,   480,   908,   482,   400,   482,   482,   482,   480,   480,
     482,   480,   482,   480,   480,   482,   570,   540,   482,   736,
     785,   111,   130,   621,   729,   846,   847,   482,   908,    89,
      98,   168,   729,   843,   953,   795,   908,   953,   729,   729,
     287,   128,   570,   905,   902,   729,   729,   729,   729,   482,
     480,   482,   482,   480,   482,   482,   480,   482,   480,   482,
     738,   482,   729,   480,   731,   540,   772,   596,   853,   480,
     570,   480,   632,   476,   476,   476,   476,    62,   116,   160,
     253,   322,   340,   380,   825,   844,   756,   756,   756,   882,
     902,   729,   482,   480,   287,   908,   476,   476,   480,   567,
     567,   567,   908,   908,   480,   482,   476,   476,   480,   480,
     864,   482,   729,   482,   955,   287,   908,   729,   729,   480,
     482,   482,   559,   482,   482,   480,   482,   881,   881,   881,
     482,   729,   603,   729,   767,   780,   783,   789,   603,   729,
     780,   783,   789,   729,   620,   480,   729,   729,   729,   482,
     729,   768,    55,   163,   232,   316,   605,   621,   801,   482,
     480,   482,   908,   482,   480,   482,   482,   755,   755,   729,
     287,   728,   728,   728,   729,   650,   480,   639,   570,   687,
     765,   984,   992,  1007,  1008,   938,    62,   116,   128,   235,
     240,   284,   340,   380,   839,   840,   841,   482,   687,   908,
     755,   480,   482,   902,   731,   540,   772,   756,   756,   954,
      70,   482,   482,   729,   729,   827,   827,   211,   729,   482,
     482,   729,   681,   482,   681,   480,   482,   287,   482,   482,
     482,   482,   482,   482,   482,   482,   482,   482,   482,   482,
     482,   482,   482,   482,   482,   727,   583,   584,     1,   729,
     780,   783,   789,   405,   406,   407,   409,   413,   592,   593,
     891,   511,   479,   570,   661,   479,   479,    97,   273,   378,
     621,   729,   780,   789,   949,   482,   480,   570,   731,   570,
     540,   482,   730,   765,   854,   849,   849,   851,   287,   902,
     902,   731,   540,   772,    55,   482,   729,   908,   687,   729,
     485,   937,   938,   937,   113,   256,   258,   613,   622,   814,
     482,   485,   480,   482,   482,   908,   480,   871,   882,   729,
     728,   729,   789,   293,   729,   480,   729,   902,   482,   482,
     727,    25,   107,   245,   330,   482,   482,   482,   482,   729,
     780,   789,   482,   830,   540,   772,   830,   476,   476,   726,
     476,     9,   163,   476,   480,   482,   482,   729,   480,   482,
     401,   264,   621,   630,   779,   482,   482,   687,   675,   482,
     667,   675,   540,   433,   730,   765,   922,   237,   472,    12,
      18,    35,    67,   114,   132,   168,   203,   211,   235,   249,
     250,   284,   302,   344,   365,   366,   438,   445,   476,   477,
     765,   776,   975,   976,   986,   987,   989,   990,   991,   992,
     479,   480,   482,   482,   111,   187,   482,   728,   563,   482,
     552,   166,   206,   276,   312,   554,   555,   564,   631,   645,
     729,   729,   127,   259,   789,   816,   482,   480,   556,   482,
      55,   702,   479,   479,   479,   479,   479,   479,   479,   479,
      86,   486,   732,   732,   732,   732,   732,   732,   732,   921,
       1,   412,   934,   935,   936,   953,   953,   287,   476,   476,
     476,   608,   908,   908,   400,   687,   729,   616,   953,   646,
     729,   114,   186,   293,   638,   789,   729,   729,   728,   728,
     616,   729,   729,   729,   480,   610,   823,   830,   611,   603,
     729,   780,   783,   789,   729,   957,   729,   789,   963,   729,
     783,   965,   729,   780,   969,   603,   729,   973,   482,   287,
     480,   480,   480,   938,   480,   480,   620,   480,   758,   761,
     758,   761,   729,   729,   245,   729,   482,   482,   687,   540,
     287,   687,    73,   621,   633,   634,   482,   729,   729,   729,
     729,   476,   476,   476,   476,   476,   480,   829,   632,   480,
     632,   829,   953,   480,   687,   953,   953,   482,   482,   480,
     565,    18,   812,   908,   729,   728,   315,   866,   482,   908,
     480,   620,   480,   482,   480,   620,   232,   352,   652,   789,
     955,   906,   480,   482,   482,   482,   482,   482,   482,   482,
     482,   482,   482,   482,   482,   482,   570,   755,   655,   655,
     482,   917,   476,   800,   729,   789,   908,   910,   906,   908,
     883,   570,   570,   482,   482,   482,   482,   480,    24,    48,
      49,    62,    84,   103,   114,   131,   160,   207,   218,   228,
     242,   243,   251,   253,   327,   340,   364,   375,   380,   621,
     631,   640,   641,   645,   830,   844,   482,   909,   909,   480,
     993,   482,   476,   476,   476,   480,   838,   482,   570,   235,
     412,   774,   540,   287,   803,   803,   755,   482,   482,   480,
     658,   658,   759,   759,   482,   482,   742,   482,    78,    79,
      86,   585,   579,   479,   772,   772,   772,   549,   479,   479,
     732,   732,   729,   273,   910,   949,   620,   540,   482,   287,
     484,   698,   438,   730,   765,   540,   287,   482,   480,   482,
     480,   938,   482,   482,   476,   476,   480,   813,   908,   938,
     954,   908,   938,   482,   953,   482,   482,   482,   482,   729,
     480,   482,   908,   482,   400,   287,   638,   729,   728,   647,
     636,   908,   908,   627,   729,   620,   620,   482,   482,   287,
     665,   433,   981,   982,   981,   224,   988,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   476,   476,   978,
     953,   438,   438,   570,   730,   765,   989,   170,   393,   988,
     467,   469,   488,   485,  1021,   563,   482,   482,   476,   476,
     476,   480,   482,   480,   553,   482,   815,   117,   564,   482,
     476,   710,   732,   732,   732,   732,   732,   732,   732,   732,
     486,   399,   486,   599,   698,   480,   482,   729,   729,   953,
     953,   482,   480,   480,   938,   480,   482,   482,   482,   482,
     482,   482,   482,   938,   480,   482,   482,   482,   480,   610,
     400,   482,   400,   482,   400,   482,   400,   482,   482,   400,
     130,   846,   847,    89,   843,   482,   687,   729,   482,   570,
     482,   482,   482,   482,   482,   482,   482,   883,   480,   482,
     287,   632,   480,   482,   482,   482,   482,    16,    76,    92,
     138,   198,   199,   227,   267,   303,   309,   337,   832,   833,
     138,   198,   199,   220,   235,   352,   729,   836,   837,   729,
     729,   836,    23,    28,    49,    55,    75,    84,   131,   197,
     235,   236,   257,   268,   305,   362,   621,   826,   827,   828,
     482,   689,   482,   825,   689,   689,   937,   755,   482,   938,
     938,   908,   908,   114,   566,   622,   729,   482,   482,   482,
     908,   729,   482,   729,   570,   482,   476,   756,   902,   687,
     756,   480,   480,   573,   856,   480,   482,   482,   482,   570,
     480,   756,   902,   953,   756,   756,   729,   476,   476,   476,
     476,   476,   476,   476,   476,   480,   620,   878,   878,   570,
     687,   476,   883,   832,   841,   836,   840,   908,   480,   287,
     480,   482,   482,   480,   797,   798,   235,   482,   482,   482,
     482,   482,   583,   729,   477,   477,   410,   479,   732,   732,
     902,   482,   287,   906,   731,   438,   287,    63,    83,   128,
     138,   141,   175,   182,   200,   209,   232,   263,   285,   286,
     303,   318,   342,   343,   352,   388,   570,   621,   642,   643,
     644,   687,   687,   486,   883,   883,   729,   729,   486,   620,
     908,   937,   482,   729,   482,   780,   789,   482,   482,   482,
     482,   908,   731,   772,     5,    25,   978,   978,   728,   765,
    1014,  1016,  1017,  1018,   978,   978,   978,   742,   728,   978,
     978,   412,   687,   975,   978,   482,   978,  1002,  1003,   772,
     665,   438,   476,   990,     5,    25,   150,   392,   441,   728,
    1014,  1019,  1020,   728,   729,   729,   555,   554,   482,   476,
     480,   556,   729,   412,   936,   570,   938,   906,   400,   800,
     600,   600,   908,   570,   687,   480,   618,   729,   482,   729,
     908,   830,   482,   480,   480,   902,   620,   908,   908,   687,
     482,   633,   476,   476,   476,   476,   476,   476,   476,   482,
     480,   476,   476,   476,   480,   482,   838,   482,   482,   476,
     476,   476,   476,   476,   476,   480,   829,   482,   570,   905,
     482,   482,   480,   565,   565,   902,   620,   620,   902,   570,
     808,   480,   482,   902,    18,    65,   169,   247,   321,   861,
     862,     9,    22,   111,   123,   128,   130,   133,   151,   161,
     163,   169,   173,   184,   187,   222,   233,   247,   288,   305,
     317,   328,   341,   570,   621,   644,   857,   858,   863,   756,
     218,   242,   621,   631,   656,   482,   729,   789,   806,   938,
     620,   620,   482,   832,   729,   728,   836,   728,   729,   729,
     836,   641,   482,   480,   482,   482,   985,   985,   994,   995,
     908,   482,   482,   482,   482,   570,   163,   621,   804,   805,
     902,   902,    65,   114,   168,   269,   300,   570,   621,   799,
     863,   756,   480,    86,   338,   729,   729,   893,   910,   910,
     540,   772,   476,   476,   476,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,   476,   480,   482,   480,
     482,   480,   482,   480,   482,   480,   908,   908,   482,   482,
     482,   482,   482,   540,   990,   990,   482,   480,   480,   482,
     150,   392,   482,   482,   977,   482,   482,   480,  1001,   482,
     475,   482,   480,   482,   480,   484,   480,   731,   772,   744,
     990,   990,   990,   990,   480,   486,   482,   482,   482,   623,
     482,   482,   480,   482,   482,   902,   482,   482,   482,   480,
     480,   173,   260,   619,   482,   908,   482,   610,   908,   570,
     687,   482,   482,   729,  1023,   728,   728,   729,   729,   729,
     832,   729,   728,   728,   837,   482,   728,   728,   729,   728,
     623,   728,   826,   689,   883,   756,   756,   567,   482,   482,
     482,   482,   480,   482,   642,   476,   476,   480,   482,   476,
     233,   239,   476,   476,   476,   233,   239,   288,   476,   184,
     476,   169,   288,   169,   288,   233,   239,   476,   480,   856,
     480,   482,   480,   756,   480,   482,   482,   482,   482,   482,
     482,   482,   482,   482,   480,   482,   482,   380,   879,   902,
     902,   909,   909,   482,   207,   412,   713,   978,   997,   998,
     999,  1000,   620,   476,   476,   480,   797,   482,   799,   583,
     484,   484,   902,   902,   287,   687,   729,   729,   203,   729,
     729,   729,   316,   570,   729,   227,   729,   729,   729,   729,
     729,   729,    63,   642,   687,   643,   642,    63,   570,   642,
     909,   938,   883,   883,   287,   975,  1017,   477,   728,  1014,
     482,   203,   729,   482,   412,   412,   975,   727,   978,   540,
     482,  1019,   482,   482,   938,   906,   906,   570,   476,   476,
     480,   618,   908,   482,   617,   480,   480,   906,   482,   117,
     187,   312,   729,   834,   835,   482,   482,   482,   482,   480,
     482,   480,   724,   482,   482,   482,   482,   482,   482,   482,
     482,   856,   480,   482,   902,   902,   621,   809,   906,   482,
     882,   862,   906,   729,   954,   882,   729,   789,   233,   239,
     729,   169,   288,   729,   858,   902,   789,   806,   111,   621,
     807,   906,   910,   902,   902,   476,   875,   876,   875,   412,
     399,   729,   480,   996,   482,   729,   729,   756,   909,   585,
     482,   724,   724,   482,   482,   482,   480,   482,   482,   482,
     724,   482,   482,   482,   482,   482,   482,   482,   476,   482,
     480,   482,   482,   476,   480,   482,   482,   902,   908,   908,
     482,  1014,  1015,   480,  1001,   482,   475,   482,   482,   480,
     482,   287,   482,   902,   902,   480,   729,   789,   729,   173,
     908,   570,   902,   476,   480,   482,   267,   729,   482,   482,
     570,   908,   902,   910,   480,   482,   480,   738,   482,   482,
     859,   482,   482,   482,   756,   482,   902,   902,   728,   482,
     480,   482,   399,  1000,   998,   756,   482,   482,   482,   902,
     480,   482,   482,   482,   729,   482,   687,   642,   687,    63,
     642,   909,   909,   480,   484,    12,   729,   482,   412,   727,
     906,   482,   482,   476,   617,   480,   765,   923,   835,   482,
     902,   856,   902,   729,   954,   729,   482,   480,   482,   806,
     906,   482,   902,     9,    22,    26,    35,   114,   128,   161,
     187,   189,   196,   198,   199,   203,   211,   221,   224,   246,
     299,   316,   337,   365,   378,   621,   877,   902,  1000,   902,
     909,   642,   482,   482,   482,   482,   476,   482,   902,   902,
    1014,   480,  1001,  1001,   482,   482,   902,   482,   482,   482,
     480,   482,   883,    55,   316,   570,   605,   730,   860,   482,
     902,   476,   476,    26,   196,   203,   476,   476,   476,   189,
       9,   476,   476,   476,   902,   482,   480,   482,   480,   482,
     687,   909,   203,   482,   482,   906,   729,   731,   906,   728,
     728,     9,   765,  1007,   728,   728,   233,   978,   729,   992,
     642,   642,   909,   482,   902,   902,   482,   540,   902,   482,
     482,   482,   482,   482,   482,   482,   482,   482,   482,   482,
     902,   480,   482,   287,   909,   642,   909,   438,   730,   765,
     902,   482,   902,   665,   438,   909,   731,   772,   902,   540,
     287
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   489,   490,   490,   491,   491,   491,   491,   491,   491,
     491,   491,   491,   491,   492,   493,   493,   494,   495,   496,
     496,   496,   496,   496,   496,   497,   498,   498,   499,   500,
     500,   500,   500,   500,   501,   501,   501,   501,   501,   501,
     502,   502,   503,   503,   503,   503,   503,   503,   503,   504,
     504,   504,   504,   505,   505,   506,   506,   507,   507,   508,
     508,   508,   509,   509,   509,   509,   509,   509,   509,   509,
     509,   509,   510,   510,   510,   511,   511,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   513,   513,   513,   513,   513,   513,   513,   514,   515,
     515,   516,   516,   516,   516,   516,   517,   518,   519,   520,
     521,   522,   522,   523,   523,   524,   524,   525,   525,   526,
     526,   527,   527,   527,   527,   527,   528,   528,   529,   530,
     530,   531,   532,   532,   532,   532,   532,   532,   532,   532,
     533,   533,   533,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   536,   536,   536,   536,   536,
     537,   537,   538,   538,   539,   539,   539,   539,   539,   540,
     540,   541,   541,   542,   542,   542,   542,   542,   542,   543,
     543,   544,   544,   544,   544,   544,   545,   546,   546,   547,
     547,   547,   547,   547,   547,   547,   548,   548,   548,   549,
     549,   550,   550,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   552,   552,   552,   552,   552,   553,   553,   554,   554,
     555,   555,   555,   555,   555,   555,   555,   555,   556,   556,
     557,   557,   558,   558,   559,   559,   559,   560,   560,   560,
     561,   561,   562,   562,   563,   563,   564,   564,   565,   565,
     566,   566,   567,   567,   568,   568,   568,   569,   569,   570,
     570,   571,   570,   570,   570,   570,   570,   570,   572,   573,
     573,   574,   575,   575,   576,   577,   577,   577,   578,   579,
     579,   580,   580,   580,   581,   581,   581,   581,   581,   582,
     583,   584,   585,   585,   585,   586,   587,   588,   588,   588,
     588,   588,   588,   589,   589,   590,   590,   590,   591,   592,
     592,   592,   592,   593,   593,   593,   594,   594,   594,   594,
     595,   595,   595,   596,   596,   597,   597,   598,   597,   599,
     599,   600,   600,   601,   601,   602,   602,   603,   603,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   605,   605,   605,   605,   605,   605,   606,   606,   607,
     607,   608,   608,   608,   609,   610,   610,   611,   611,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     613,   613,   614,   615,   616,   617,   618,   618,   619,   619,
     620,   620,   621,   621,   621,   622,   623,   623,   624,   624,
     625,   625,   626,   626,   627,   627,   627,   627,   627,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   629,
     629,   629,   630,   631,   631,   632,   632,   633,   633,   634,
     634,   635,   635,   636,   636,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   638,   638,   638,   639,   639,
     640,   640,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   642,
     642,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   644,   644,   645,   646,   646,   647,   647,
     648,   648,   649,   649,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   651,   651,   652,
     652,   653,   653,   654,   654,   654,   655,   655,   656,   656,
     656,   656,   657,   657,   658,   658,   659,   659,   660,   659,
     659,   659,   661,   661,   661,   661,   662,   661,   661,   663,
     663,   664,   664,   665,   666,   666,   667,   667,   668,   668,
     669,   669,   670,   670,   670,   670,   670,   670,   670,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   672,   672,
     673,   674,   674,   675,   675,   676,   676,   677,   677,   678,
     679,   679,   680,   680,   681,   681,   682,   682,   683,   683,
     683,   683,   683,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   686,   685,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   688,
     689,   690,   690,   691,   691,   692,   693,   693,   694,   694,
     694,   694,   695,   696,   696,   697,   697,   698,   698,   699,
     699,   699,   699,   700,   700,   700,   701,   701,   701,   701,
     701,   701,   701,   701,   701,   701,   701,   701,   701,   701,
     701,   701,   701,   701,   701,   701,   701,   701,   702,   702,
     702,   703,   703,   704,   704,   704,   704,   704,   704,   704,
     704,   704,   704,   704,   704,   704,   704,   704,   704,   704,
     704,   704,   704,   704,   704,   705,   705,   706,   707,   707,
     708,   708,   709,   709,   710,   710,   711,   711,   711,   711,
     711,   712,   712,   712,   712,   712,   713,   713,   713,   713,
     713,   713,   713,   713,   713,   714,   714,   715,   715,   716,
     716,   717,   717,   718,   718,   719,   719,   720,   720,   720,
     720,   721,   721,   722,   722,   722,   723,   723,   723,   723,
     723,   723,   724,   724,   725,   725,   726,   726,   727,   728,
     729,   729,   730,   731,   731,   732,   732,   733,   733,   734,
     734,   735,   735,   736,   737,   737,   737,   737,   737,   738,
     739,   739,   740,   740,   740,   740,   740,   740,   740,   740,
     740,   740,   740,   740,   740,   740,   741,   741,   741,   741,
     741,   741,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   743,   744,   744,   744,   744,
     744,   744,   745,   745,   745,   745,   745,   745,   745,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   747,   747,   748,   750,   749,
     751,   751,   751,   752,   752,   752,   752,   752,   752,   753,
     753,   753,   754,   754,   754,   755,   756,   757,   757,   758,
     758,   759,   759,   760,   760,   761,   761,   762,   762,   762,
     762,   763,   764,   764,   765,   765,   766,   766,   767,   767,
     767,   767,   767,   767,   767,   767,   768,   767,   767,   767,
     767,   770,   769,   771,   771,   772,   773,   773,   774,   774,
     775,   775,   775,   776,   776,   776,   776,   776,   777,   776,
     778,   778,   779,   779,   780,   780,   780,   780,   780,   780,
     781,   780,   780,   780,   780,   780,   782,   782,   782,   782,
     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,
     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,
     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,
     782,   782,   782,   782,   782,   782,   783,   783,   784,   784,
     784,   784,   784,   784,   784,   784,   784,   784,   784,   784,
     784,   784,   784,   784,   784,   784,   784,   784,   784,   784,
     785,   785,   786,   786,   787,   786,   788,   788,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   791,   791,   792,   792,   793,
     793,   793,   793,   794,   794,   795,   795,   795,   796,   796,
     796,   796,   796,   797,   797,   798,   798,   799,   799,   799,
     799,   799,   799,   799,   800,   800,   801,   801,   801,   801,
     801,   801,   802,   802,   802,   803,   803,   804,   804,   804,
     805,   805,   805,   806,   806,   807,   807,   808,   808,   809,
     810,   810,   811,   811,   812,   813,   813,   814,   814,   814,
     814,   814,   814,   815,   815,   816,   816,   816,   817,   818,
     819,   819,   820,   820,   821,   821,   821,   821,   822,   822,
     822,   823,   823,   824,   824,   824,   825,   825,   825,   825,
     825,   825,   825,   825,   825,   825,   825,   826,   826,   826,
     826,   826,   826,   826,   826,   826,   826,   826,   826,   826,
     826,   826,   826,   826,   827,   828,   828,   829,   829,   830,
     830,   831,   831,   832,   832,   833,   833,   833,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   834,   834,
     835,   835,   835,   835,   836,   836,   837,   837,   837,   837,
     837,   837,   837,   838,   838,   839,   839,   840,   840,   840,
     840,   840,   841,   841,   841,   841,   841,   841,   842,   842,
     842,   842,   843,   843,   843,   844,   845,   845,   845,   845,
     846,   846,   847,   847,   847,   848,   848,   848,   848,   848,
     849,   850,   851,   851,   851,   852,   852,   853,   854,   854,
     854,   854,   855,   855,   856,   856,   857,   857,   858,   858,
     858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
     858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
     858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
     858,   858,   858,   858,   858,   858,   858,   859,   859,   860,
     860,   860,   860,   861,   861,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   863,   863,   864,   864,   865,
     865,   866,   866,   866,   867,   867,   868,   868,   869,   870,
     870,   870,   870,   871,   871,   872,   872,   873,   873,   874,
     874,   874,   874,   874,   875,   876,   876,   877,   877,   877,
     877,   877,   877,   877,   877,   877,   877,   877,   877,   877,
     877,   877,   877,   877,   877,   877,   877,   877,   877,   877,
     877,   877,   877,   877,   877,   877,   878,   878,   879,   879,
     880,   881,   882,   883,   884,   885,   886,   887,   888,   889,
     890,   892,   891,   894,   893,   895,   896,   897,   898,   899,
     900,   901,   902,   903,   904,   905,   906,   907,   908,   909,
     910,   911,   911,   912,   911,   913,   913,   914,   914,   914,
     914,   914,   915,   915,   915,   916,   915,   917,   918,   918,
     919,   919,   919,   920,   920,   920,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   923,   923,   923,   924,   924,   924,
     925,   925,   925,   926,   926,   926,   927,   927,   927,   928,
     928,   928,   929,   929,   929,   930,   930,   930,   931,   931,
     931,   932,   932,   932,   933,   933,   933,   934,   935,   935,
     936,   937,   937,   937,   938,   938,   938,   939,   939,   939,
     940,   940,   940,   940,   941,   941,   941,   942,   942,   942,
     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,
     942,   942,   942,   942,   942,   942,   942,   943,   943,   944,
     944,   945,   945,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   947,   948,   948,   949,   949,   949,
     949,   949,   949,   949,   950,   950,   951,   951,   952,   953,
     954,   955,   956,   956,   957,   958,   958,   959,   960,   960,
     961,   962,   962,   963,   964,   964,   965,   966,   966,   967,
     968,   968,   969,   970,   970,   971,   972,   972,   973,   974,
     974,   974,   974,   974,   974,   974,   974,   975,   976,   976,
     977,   977,   978,   979,   979,   980,   980,   980,   981,   981,
     982,   983,   984,   985,   986,   986,   987,   987,   988,   988,
     989,   989,   989,   989,   989,   989,   989,   989,   989,   989,
     989,   990,   990,   990,   990,   990,   990,   990,   990,   990,
     990,   990,   990,   990,   990,   990,   990,   990,   990,   990,
     990,   990,   990,   990,   990,   990,   990,   990,   990,   990,
     990,   990,   990,   991,   991,   992,   993,   992,   994,   995,
     996,   997,   997,   998,   998,   998,   999,   999,  1000,  1000,
    1001,  1001,  1002,  1002,  1003,  1003,  1004,  1004,  1005,  1005,
    1006,  1006,  1007,  1007,  1008,  1008,  1009,  1009,  1010,  1011,
    1011,  1012,  1012,  1013,  1013,  1014,  1014,  1015,  1015,  1016,
    1016,  1017,  1017,  1017,  1017,  1017,  1018,  1018,  1019,  1019,
    1020,  1020,  1021,  1022,  1023,  1024
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     1,     1,     1,     2,     3,     5,     2,
       2,     3,     0,     3,     0,     3,     3,     1,     1,     1,
       3,     3,     5,     3,     3,     2,     1,     3,     1,     1,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     5,     2,     2,     2,     2,     1,     1,
       4,     2,     1,     1,     2,     1,     4,     4,     4,     1,
       2,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     5,     1,     1,     1,     1,
       1,     1,     2,     2,     7,     7,     5,     5,     5,     1,
       2,     4,     7,     1,     1,     0,     2,     4,     1,     0,
       3,     1,     1,     1,     1,     4,     1,     3,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     2,     2,     5,     2,     2,     0,
       2,     1,     2,     2,     4,     6,     7,     2,     4,     1,
       1,     1,     2,     2,     1,     2,     1,     3,     1,     6,
       6,     6,     6,     4,     6,     4,     1,     1,     1,     2,
       0,     1,     3,     5,     5,     4,     6,     4,     9,     4,
       4,     6,     7,     5,     8,     6,     4,     1,     4,     5,
       1,     4,     5,     4,     1,     4,     5,     6,     4,     1,
       4,     1,     1,     1,     1,     1,     0,     2,     1,     3,
       1,     1,     1,     4,     1,     1,     4,     4,     0,     5,
       0,     2,     1,     3,     1,     1,     1,     0,     2,     2,
       1,     3,     0,     3,     1,     4,     1,     1,     0,     3,
       1,     1,     0,     3,     1,     1,     5,     4,     3,     1,
       3,     0,     5,     5,     4,     7,     3,     5,     3,     3,
       1,     1,     0,     3,     4,     1,     3,     2,     2,     0,
       1,     1,     2,     2,     1,     3,     1,     2,     1,     5,
       2,     0,     1,     3,     5,     6,     1,     3,     3,     3,
       3,     4,     1,     2,     3,     1,     3,     7,     1,     1,
       1,     1,     1,     2,     5,     4,     2,     2,     2,     2,
       2,     3,     3,     3,     1,     1,     3,     0,     5,     1,
       1,     1,     3,     1,     3,     1,     1,     1,     1,     1,
       4,     6,     7,    10,    12,    14,     7,     8,    10,     6,
       5,     5,     5,     7,     8,     6,     8,     6,     6,     4,
       9,     7,     7,     4,     9,     6,     8,     4,     6,     4,
       4,     4,     1,     6,     6,     6,     8,    10,    10,    12,
      12,    14,    14,    16,     9,     9,     4,     4,     4,     4,
       6,     8,     9,     1,     4,     6,     4,     6,     5,     4,
       4,     6,     4,     3,     1,     7,     7,     1,     3,     5,
       7,     0,     2,     2,     1,     0,     2,     1,     3,     1,
       1,     1,     4,     4,     1,     1,     1,     1,     1,     4,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       4,     6,     1,     4,     4,     1,     2,     1,     4,     1,
       1,     1,     7,     6,     1,     0,     0,     3,     4,     4,
       0,     3,     1,     1,     1,     4,     1,     3,     1,     5,
       1,     1,     1,     3,     1,     3,     2,     2,     1,     1,
       1,     4,     1,     4,     1,     4,     1,     4,     4,     0,
       3,     3,     1,     1,     4,     0,     2,     1,     3,     1,
       1,     0,     3,     1,     3,     1,     1,     4,     1,     1,
       1,     2,     2,     1,     1,     4,     1,     4,     1,     2,
       1,     4,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     3,     1,     1,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     4,     1,     1,     4,     1,
       4,     1,     1,     1,     4,     1,     4,     1,     1,     1,
       3,     5,     4,     4,     1,     4,     4,     4,     4,     1,
       1,     1,     4,     5,     5,     1,     1,     4,     6,     4,
       1,     4,     4,     4,     4,     4,     1,     3,     1,     3,
       0,     2,     1,     3,     1,     6,     4,     1,     4,     1,
       1,     1,     1,     1,     1,     1,     4,     0,     3,     1,
       4,     1,     3,     5,     5,     1,     0,     3,     1,     1,
       1,     1,     1,     0,     2,     0,     1,     3,     0,     5,
       3,     5,     6,     4,     1,     3,     0,     5,     7,     1,
       1,     1,     0,     1,     4,     3,     1,     3,     2,     3,
       1,     2,     1,     1,     2,     1,     1,     1,     1,     3,
       3,     2,     2,     3,     3,     4,     4,     3,     3,     2,
       1,     2,     0,     0,     2,     0,     1,     3,     2,     2,
       1,     2,     5,     4,     2,     0,     1,     3,     3,     3,
       1,     4,     6,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     4,     4,     4,     5,     5,     4,     5,
       5,     6,     1,     3,     3,     3,     3,     5,     4,     4,
       6,     4,     9,     6,     9,     6,     3,     5,     7,     1,
       1,     1,     3,     1,     1,     3,     2,     3,     4,     4,
       4,     1,     1,     1,     1,     5,     2,     1,     0,     0,
       1,     2,     2,     1,     3,     3,     1,     4,     1,     1,
       4,     4,     4,     4,     7,     4,     4,     4,     4,     4,
       4,     1,     1,     1,     1,     1,     1,     1,     0,     2,
       3,     1,     3,     1,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     1,
       4,     1,     1,     4,     1,     4,     3,     4,     1,     3,
       1,     3,     3,     0,     1,     0,     2,     2,     2,     2,
       2,     1,     3,     3,     3,     1,     1,     1,     2,     2,
       2,     2,     2,     2,     4,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     3,     0,     3,     4,     4,     4,
       4,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     4,     0,     2,     0,     1,     0,     3,     1,     1,
       1,     7,     1,     1,     1,     1,     1,     0,     1,     1,
       3,     1,     3,     1,     1,     2,     3,     3,     2,     1,
       1,     3,     3,     5,     6,     4,     3,     4,     4,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     3,     2,     2,
       3,     0,     1,     2,     2,     2,     4,     4,     2,     1,
       4,     5,     3,     4,     6,     5,     4,     4,     6,     5,
       5,     4,     6,     9,     7,     8,     8,     4,     5,     5,
       5,     5,     5,     4,     6,     4,     4,     4,     4,     4,
       4,     4,     6,     4,     4,     4,     5,     4,     6,     3,
       4,     6,     4,     4,     4,     4,     5,     4,     4,     4,
       4,     4,     8,     8,     4,     4,     7,     9,     7,     9,
       4,     6,     6,     6,     8,     6,     8,     6,     7,     8,
       7,     8,     7,     8,     7,    10,     9,    10,     9,     4,
       4,     5,     5,     4,     7,     7,     1,     1,     4,     4,
       4,     1,     3,     1,     3,     4,     1,     3,     1,     3,
       4,     6,     4,     3,     8,     6,     4,     1,     6,     6,
       4,     6,     7,     8,     4,     4,     4,     4,     4,     4,
       4,     4,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     4,     4,     4,
       7,     1,     4,     5,     4,     4,     4,     6,     4,     4,
       6,     6,     7,     4,     1,     1,     6,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     6,     8,     9,
      10,     4,     6,     4,     4,     2,     1,     7,     4,     6,
       1,     4,     6,     1,     1,     0,     2,     1,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     5,     0,     2,     2,     0,     0,     0,     2,     0,
       2,     0,     2,     0,     2,     0,     3,     1,     1,     1,
       1,     3,     1,     1,     2,     2,     1,     2,     1,     3,
       1,     3,     5,     1,     4,     1,     0,     9,     6,     7,
       8,     0,     5,     1,     4,     0,     0,     3,     1,     1,
       3,     5,     1,     1,     3,     3,     3,     5,     0,     5,
       1,     3,     1,     1,     4,     4,     5,     3,     3,     3,
       0,     5,     1,     3,     5,     7,     1,     1,     1,     1,
       8,     6,     8,     6,    10,    12,    10,    12,    12,    14,
       6,     7,     7,     4,     4,     4,     7,     7,     5,     7,
       4,     4,     4,     4,     4,     6,     4,     6,     4,     5,
       4,     7,     7,     7,     6,     9,     1,     3,     1,     4,
       4,     4,     4,     7,     5,     7,     9,     3,     8,     6,
       8,     6,     6,     4,     9,     7,     7,     5,     5,     6,
       1,     3,     1,     3,     0,     5,     1,     3,     1,     7,
       3,     2,     3,     5,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     6,     5,     5,
       1,     4,     7,     4,     5,     5,     7,     7,     7,     9,
       7,     9,    13,    12,    10,     8,     5,    10,    12,    13,
      14,     9,    14,    11,     9,    11,     7,    10,    13,    13,
      15,    17,    13,     6,    10,     7,     7,     7,     7,     4,
      10,    10,     5,     6,    14,    17,     4,     4,     4,     4,
      12,    12,     7,     7,     5,     8,     4,     9,     6,     5,
       9,     7,     5,    12,    10,     9,     6,     8,    11,     9,
       9,    10,     8,     9,    11,     9,     9,     7,     9,    11,
       7,     8,    10,     5,     6,     8,    12,    10,    12,    10,
       6,     8,     3,     8,     6,     8,     6,     6,     4,     9,
       7,     7,     6,    14,    14,    11,    11,     5,     5,     5,
       5,     4,    13,    15,    15,    17,    17,    19,    19,    21,
       5,     7,     4,     4,     7,     4,     4,     4,     4,     6,
       4,     8,    10,     7,     4,     7,     7,     6,    11,    13,
      13,    15,    15,    13,     5,     1,     3,     1,     3,     1,
       1,     1,     6,     1,     3,     1,     1,     5,     0,     2,
       2,     2,     2,     0,     1,     2,     3,     1,     1,     4,
       1,     4,     1,     1,     0,     3,     1,     1,     1,     4,
       1,     1,     1,     4,     1,     0,     3,     1,     1,     1,
       1,     4,     6,     0,     3,     1,     1,     0,     3,     1,
       0,     6,     0,     3,     1,     0,     3,     4,     1,     4,
       1,     1,     1,     0,     3,     1,     1,     1,     4,     2,
       1,     1,     0,     3,     1,     3,     1,     3,     3,     5,
       5,     1,     2,     6,     4,     3,     1,     1,     4,     1,
       1,     4,     1,     4,     1,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     4,     1,     4,
       4,     4,     4,     1,     2,     1,     3,     0,     2,     1,
       4,     0,     3,     1,     3,     1,     1,     1,     1,     5,
       4,     4,     4,     4,     4,     6,     4,     1,     1,     3,
       1,     1,     1,     4,     1,     3,     4,     4,     1,     5,
       1,     1,     1,     0,     2,     1,     3,     1,     1,     4,
       1,     1,     1,     4,     1,     4,     1,     1,     1,     3,
       3,     5,     1,     1,     1,     5,     0,     2,     2,     4,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     1,     1,     3,     3,     2,     4,     4,     1,     1,
       3,     3,     1,     3,     0,     2,     1,     3,     2,     2,
       3,     2,     2,     2,     2,     2,     3,     2,     1,     1,
       4,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       4,     4,     4,     6,     8,     6,     4,     2,     2,     4,
       1,     1,     5,     1,     1,     6,     1,     0,     3,     1,
       1,     1,     1,     1,     3,     4,     6,     1,     2,     2,
       2,     6,     4,     4,     1,     4,     6,     0,     2,     1,
       3,     4,     1,     4,     0,     1,     1,     2,     2,     1,
       1,     1,     1,     0,     2,     1,     0,     2,     3,     4,
       4,     4,     4,     1,     1,     0,     3,     1,     1,     1,
       1,     1,     2,     1,     1,     4,     4,     4,     4,     4,
       4,     1,     1,     4,     1,     2,     2,     2,     2,     3,
       1,     1,     1,     4,     4,     1,     0,     3,     1,     4,
       1,     1,     0,     0,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     1,     0,     0,     0,     0,
       0,     1,     3,     0,     5,     1,     3,     1,     6,     5,
       4,     7,     1,     3,     3,     0,     5,     1,     1,     3,
       0,     1,     1,     3,     4,     3,     1,     2,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     1,     3,     1,     3,     8,     1,     3,     8,
       1,     3,     8,     1,     3,     8,     1,     3,     8,     1,
       3,     8,     1,     3,     8,     1,     3,     8,     1,     3,
       8,     1,     3,     8,     4,     0,     4,     2,     1,     3,
       3,     1,     3,     5,     1,     3,     3,     1,     3,     3,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     2,     1,     2,
       2,     2,     4,     1,     1,     1,     1,     3,     5,     1,
       0,     2,     3,     2,     1,     1,     2,     1,     2,     1,
       1,     1,     1,     7,     1,     2,     3,     1,     1,     2,
       1,     2,     1,     1,     4,     2,     1,     3,     3,     0,
       4,     0,     1,     3,     3,     1,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     2,     2,     1,     0,     1,     3,     3,     1,     0,
       2,     0,     1,     0,     1,     2,     2,     1,     0,     1,
       1,     4,     4,     4,     4,     4,     4,     3,     5,     6,
       8,     1,     1,     5,     7,     9,     9,     5,     2,     2,
       2,     3,     3,     4,     1,     4,     4,     4,     1,     1,
       1,     1,     4,     4,     6,     6,     6,     8,     6,     4,
       4,     4,     4,     1,     2,     1,     0,     5,     3,     0,
       0,     1,     3,     0,     1,     1,     3,     4,     1,     2,
       0,     2,     0,     1,     1,     3,     1,     3,     1,     4,
       1,     1,     1,     3,     1,     3,     1,     2,     2,     0,
       3,     1,     3,     1,     1,     1,     3,     1,     3,     1,
       3,     3,     5,     1,     3,     1,     1,     3,     1,     1,
       1,     3,     3,     0,     0,     0
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (parser, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HqlGram* parser)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HqlGram* parser)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, parser);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, HqlGram* parser)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, HqlGram* parser)
{
  YYUSE (yyvaluep);
  YYUSE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yytype)
    {
          case 3: /* ABS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27916 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 4: /* ACOS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27922 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 5: /* AFTER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27928 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 6: /* AGGREGATE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27934 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 7: /* ALGORITHM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27940 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 8: /* ALIAS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27946 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 9: /* ALL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27952 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 10: /* ALLNODES  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27958 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 11: /* AND  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27964 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 12: /* ANY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27970 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 13: /* APPLY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27976 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 14: /* _ARRAY_  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27982 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 15: /* AS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27988 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 16: /* ASCII  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 27994 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 17: /* ASIN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28000 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 18: /* TOK_ASSERT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28006 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 19: /* ASSTRING  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28012 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 20: /* ATAN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28018 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 21: /* ATAN2  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28024 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 22: /* ATMOST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28030 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 23: /* AVE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28036 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 24: /* BACKUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28042 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 25: /* BEFORE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28048 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 26: /* BEST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28054 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 27: /* BETWEEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28060 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 28: /* TOK_BITMAP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28066 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 29: /* BIG  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28072 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 30: /* BLOB  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28078 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 31: /* BLOOM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28084 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 32: /* BNOT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28090 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 33: /* BUILD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28096 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 34: /* CARDINALITY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28102 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 35: /* CASE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28108 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 36: /* TOK_CATCH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28114 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 37: /* CHECKPOINT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28120 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 38: /* CHOOSE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28126 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 39: /* CHOOSEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28132 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 40: /* CHOOSENALL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28138 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 41: /* CHOOSESETS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28144 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 42: /* CLUSTER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28150 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 43: /* CLUSTERSIZE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28156 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 44: /* COGROUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28162 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 45: /* __COMMON__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28168 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 46: /* __COMPOUND__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28174 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 47: /* COMBINE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28180 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 48: /* COMPRESSED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28186 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 49: /* __COMPRESSED__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28192 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 50: /* CRITICAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28198 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 51: /* TOK_CONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28204 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 52: /* CORRELATION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28210 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 53: /* COS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28216 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 54: /* COSH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28222 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 55: /* COUNT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28228 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 56: /* COUNTER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28234 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 57: /* COVARIANCE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28240 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 58: /* CPPBODY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28246 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 59: /* TOK_CPP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28252 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 60: /* CRC  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28258 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 61: /* CRON  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28264 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 62: /* CSV  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28270 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 63: /* DATASET  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28276 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 64: /* __DEBUG__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28282 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 65: /* DEDUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28288 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 66: /* DEFAULT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28294 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 67: /* DEFINE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28300 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 68: /* DENORMALIZE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28306 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 69: /* DEPRECATED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28312 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 70: /* DESC  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28318 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 71: /* DICTIONARY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28324 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 72: /* DISTRIBUTE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28330 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 73: /* DISTRIBUTED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28336 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 74: /* DISTRIBUTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28342 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 75: /* DYNAMIC  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28348 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 76: /* EBCDIC  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28354 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 77: /* ECLCRC  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28360 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 78: /* ELSE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28366 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 79: /* ELSEIF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28372 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 80: /* EMBED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28378 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 81: /* EMBEDDED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28384 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 82: /* _EMPTY_  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28390 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 83: /* ENCODING  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28396 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 84: /* ENCRYPT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28402 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 85: /* ENCRYPTED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28408 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 86: /* END  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28414 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 87: /* ENDCPP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28420 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 88: /* ENDEMBED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28426 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 89: /* ENTH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28432 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 90: /* ENUM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28438 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 91: /* TOK_ERROR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28444 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 92: /* ESCAPE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28450 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 93: /* EVALUATE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28456 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 94: /* EVENT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28462 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 95: /* EVENTEXTRA  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28468 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 96: /* EVENTNAME  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28474 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 97: /* EXCEPT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28480 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 98: /* EXCLUSIVE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28486 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 99: /* EXISTS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28492 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 100: /* EXP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28498 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 101: /* EXPIRE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28504 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 102: /* EXPORT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28510 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 103: /* EXTEND  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28516 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 104: /* FAIL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28522 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 105: /* FAILCODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28528 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 106: /* FAILMESSAGE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28534 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 107: /* FAILURE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28540 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 108: /* TOK_FALSE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28546 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 109: /* FEATURE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28552 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 110: /* FETCH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28558 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 111: /* FEW  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28564 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 112: /* FILEPOSITION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 113: /* FILTERED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28576 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 114: /* FIRST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28582 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 115: /* TOK_FIXED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28588 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 116: /* FLAT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28594 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 117: /* FORMAT_ATTR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28600 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 118: /* FORWARD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28606 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 119: /* FROM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28612 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 120: /* FROMJSON  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28618 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 121: /* FROMUNICODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28624 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 122: /* FROMXML  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28630 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 123: /* FULL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28636 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 124: /* FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28642 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 125: /* GETENV  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28648 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 126: /* GLOBAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28654 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 127: /* GRAPH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28660 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 128: /* GROUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28666 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 129: /* GROUPBY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28672 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 130: /* GROUPED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28678 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 131: /* __GROUPED__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28684 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 132: /* GUARD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28690 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 133: /* HASH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28696 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 134: /* HASH32  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28702 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 135: /* HASH64  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28708 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 136: /* HASHMD5  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28714 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 137: /* HAVING  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28720 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 138: /* HEADING  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28726 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 139: /* HINT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28732 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 140: /* HTTPCALL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28738 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 141: /* HTTPHEADER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28744 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 142: /* IF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28750 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 143: /* IFF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28756 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 144: /* IFBLOCK  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28762 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 145: /* TOK_IGNORE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28768 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 146: /* IMPLEMENTS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28774 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 147: /* IMPORT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28780 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 148: /* INDEPENDENT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28786 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 149: /* INLINE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28792 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 150: /* TOK_IN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28798 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 151: /* INNER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28804 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 152: /* INTERFACE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28810 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 153: /* INTERNAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28816 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 154: /* INTFORMAT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28822 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 155: /* ISNULL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28828 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 156: /* ISVALID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28834 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 157: /* ITERATE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28840 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 158: /* JOIN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28846 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 159: /* JOINED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28852 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 160: /* JSON_TOKEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 161: /* KEEP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28864 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 162: /* KEYDIFF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28870 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 163: /* KEYED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28876 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 164: /* KEYPATCH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28882 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 165: /* KEYUNICODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28888 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 166: /* LABEL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28894 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 167: /* LABELED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28900 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 168: /* LAST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28906 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 169: /* LEFT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28912 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 170: /* LENGTH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28918 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 171: /* LIBRARY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28924 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 172: /* LIKELY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28930 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 173: /* LIMIT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28936 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 174: /* LINKCOUNTED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28942 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 175: /* LITERAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28948 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 176: /* LITTLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28954 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 177: /* LN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28960 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 178: /* LOADXML  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 179: /* LOCAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28972 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 180: /* LOCALE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28978 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 181: /* LOCALFILEPOSITION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28984 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 182: /* TOK_LOG  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28990 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 183: /* LOGICALFILENAME  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 28996 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 184: /* LOOKUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29002 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 185: /* LOOP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29008 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 186: /* LZW  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29014 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 187: /* MANY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29020 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 188: /* MAP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29026 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 189: /* MATCHED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29032 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 190: /* MATCHLENGTH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29038 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 191: /* MATCHPOSITION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29044 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 192: /* MATCHROW  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29050 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 193: /* MATCHTEXT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29056 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 194: /* MATCHUNICODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29062 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 195: /* MATCHUTF8  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 196: /* MAX  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29074 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 197: /* MAXCOUNT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29080 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 198: /* MAXLENGTH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29086 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 199: /* MAXSIZE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29092 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 200: /* MERGE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29098 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 201: /* MERGE_ATTR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29104 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 202: /* MERGEJOIN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29110 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 203: /* MIN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29116 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 204: /* MODULE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29122 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 205: /* MOFN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29128 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 206: /* MULTIPLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29134 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 207: /* NAMED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29140 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 208: /* NAMEOF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29146 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 209: /* NAMESPACE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29152 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 210: /* NOBOUNDCHECK  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29158 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 211: /* NOCASE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29164 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 212: /* NOCOMBINE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29170 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 213: /* NOCONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29176 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 214: /* NOFOLD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29182 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 215: /* NOHOIST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29188 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 216: /* NOLOCAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29194 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 217: /* NONEMPTY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29200 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 218: /* NOOVERWRITE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29206 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 219: /* NORMALIZE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29212 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 220: /* NOROOT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29218 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 221: /* NOSCAN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29224 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 222: /* NOSORT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29230 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 223: /* __NOSTREAMING__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29236 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 224: /* NOT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29242 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 225: /* NOTHOR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29248 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 226: /* NOTIFY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29254 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 227: /* NOTRIM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29260 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 228: /* NOXPATH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29266 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 229: /* OF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29272 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 230: /* OMITTED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29278 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 231: /* ONCE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29284 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 232: /* ONFAIL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29290 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 233: /* ONLY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29296 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 234: /* ONWARNING  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29302 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 235: /* OPT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29308 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 236: /* __OPTION__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29314 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 237: /* OR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29320 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 238: /* ORDERED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29326 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 239: /* OUTER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29332 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 240: /* OUTPUT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29338 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 241: /* TOK_OUT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29344 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 242: /* OVERWRITE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29350 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 243: /* __OWNED__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29356 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 244: /* PACKED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29362 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 245: /* PARALLEL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29368 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 246: /* PARSE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29374 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 247: /* PARTITION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29380 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 248: /* PARTITION_ATTR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29386 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 249: /* TOK_PATTERN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29392 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 250: /* PENALTY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29398 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 251: /* PERSIST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29404 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 252: /* PHYSICALFILENAME  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29410 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 253: /* PIPE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29416 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 254: /* __PLATFORM__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29422 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 255: /* POWER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29428 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 256: /* PREFETCH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29434 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 257: /* PRELOAD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29440 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 258: /* PRIORITY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29446 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 259: /* PRIVATE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29452 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 260: /* PROBABILITY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29458 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 261: /* PROCESS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29464 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 262: /* PROJECT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29470 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 263: /* PROXYADDRESS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29476 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 264: /* PULL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29482 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 265: /* PULLED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29488 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 266: /* QUANTILE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29494 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 267: /* QUOTE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29500 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 268: /* RANDOM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 269: /* RANGE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29512 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 270: /* RANK  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29518 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 271: /* RANKED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29524 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 272: /* REALFORMAT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29530 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 273: /* RECORD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29536 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 274: /* RECORDOF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29542 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 275: /* RECOVERY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29548 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 276: /* REFRESH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29554 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 277: /* REGEXFIND  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29560 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 278: /* REGEXFINDSET  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29566 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 279: /* REGEXREPLACE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29572 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 280: /* REGROUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29578 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 281: /* REJECTED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29584 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 282: /* RELATIONSHIP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29590 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 283: /* REMOTE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29596 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 284: /* REPEAT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29602 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 285: /* RESPONSE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29608 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 286: /* RETRY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29614 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 287: /* RETURN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29620 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 288: /* RIGHT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29626 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 289: /* RIGHT_NN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29632 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 290: /* ROLLUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29638 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 291: /* ROUND  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29644 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 292: /* ROUNDUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29650 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 293: /* ROW  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29656 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 294: /* ROWS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29662 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 295: /* ROWSET  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29668 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 296: /* ROWDIFF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29674 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 297: /* RULE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29680 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 298: /* SAMPLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29686 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 299: /* SCAN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29692 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 300: /* SCORE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29698 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 301: /* SECTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29704 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 302: /* SELF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29710 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 303: /* SEPARATOR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29716 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 304: /* __SEQUENCE__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29722 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 305: /* SEQUENTIAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29728 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 306: /* SERVICE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29734 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 307: /* SET  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29740 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 308: /* SHARED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29746 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 309: /* SIMPLE_TYPE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29752 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 310: /* __SIMPLIFIED__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29758 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 311: /* SIN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29764 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 312: /* SINGLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29770 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 313: /* SINH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29776 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 314: /* SIZEOF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29782 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 315: /* SKEW  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29788 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 316: /* SKIP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29794 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 317: /* SMART  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29800 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 318: /* SOAPACTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29806 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 319: /* SOAPCALL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29812 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 320: /* SORT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29818 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 321: /* SORTED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29824 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 322: /* SQL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29830 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 323: /* SQRT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29836 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 324: /* STABLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29842 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 325: /* __STAND_ALONE__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29848 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 326: /* STEPPED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29854 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 327: /* STORED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29860 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 328: /* STREAMED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29866 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 329: /* SUBSORT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29872 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 330: /* SUCCESS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29878 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 331: /* SUM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29884 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 332: /* SWAPPED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29890 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 333: /* TABLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29896 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 334: /* TAN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29902 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 335: /* TANH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29908 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 336: /* __TARGET_PLATFORM__  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29914 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 337: /* TERMINATOR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29920 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 338: /* THEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29926 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 339: /* THISNODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29932 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 340: /* THOR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29938 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 341: /* THRESHOLD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29944 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 342: /* TIMEOUT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29950 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 343: /* TIMELIMIT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29956 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 344: /* TOKEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29962 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 345: /* TOJSON  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29968 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 346: /* TOPN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29974 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 347: /* TOUNICODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29980 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 348: /* TOXML  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29986 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 349: /* TRACE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29992 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 350: /* TRANSFER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 29998 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 351: /* TRANSFORM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30004 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 352: /* TRIM  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30010 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 353: /* TRUNCATE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30016 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 354: /* TOK_TRUE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30022 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 355: /* TYPE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30028 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 356: /* TYPEOF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30034 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 357: /* UNICODEORDER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30040 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 358: /* UNGROUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30046 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 359: /* UNLIKELY  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30052 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 360: /* UNORDERED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30058 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 361: /* UNSIGNED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30064 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 362: /* UNSORTED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30070 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 363: /* UNSTABLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30076 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 364: /* UPDATE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30082 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 365: /* USE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30088 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 366: /* VALIDATE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30094 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 367: /* VARIANCE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30100 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 368: /* VIRTUAL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30106 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 369: /* VOLATILE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30112 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 370: /* WAIT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30118 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 371: /* TOK_WARNING  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30124 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 372: /* WHEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30130 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 373: /* WHICH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30136 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 374: /* WHITESPACE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30142 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 375: /* WIDTH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30148 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 376: /* WILD  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30154 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 377: /* WITHIN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30160 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 378: /* WHOLE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30166 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 379: /* WORKUNIT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30172 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 380: /* XML_TOKEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30178 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 381: /* XMLDECODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30184 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 382: /* XMLDEFAULT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30190 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 383: /* XMLENCODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30196 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 384: /* XMLNS  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30202 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 385: /* XMLPROJECT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30208 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 386: /* XMLTEXT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30214 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 387: /* XMLUNICODE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30220 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 388: /* XPATH  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30226 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 389: /* FIELD_REF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30232 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 390: /* FIELDS_REF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30238 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 391: /* ANDAND  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30244 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 392: /* EQ  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30250 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 393: /* NE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30256 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 394: /* LE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30262 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 395: /* LT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30268 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 396: /* GE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30274 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 397: /* GT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30280 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 398: /* ORDER  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30286 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 399: /* ASSIGN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30292 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 400: /* GOESTO  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30298 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 401: /* DOTDOT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30304 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 402: /* DIV  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30310 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 403: /* SHIFTL  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30316 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 404: /* SHIFTR  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30322 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 405: /* DATAROW_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30328 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 406: /* DATASET_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30334 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 407: /* DICTIONARY_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30340 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 408: /* SCOPE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30346 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 409: /* VALUE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30352 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 410: /* VALUE_ID_REF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30358 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 411: /* ACTION_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30364 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 412: /* UNKNOWN_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30370 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 413: /* RECORD_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30376 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 414: /* ALIEN_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30382 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 415: /* TRANSFORM_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30388 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 416: /* PATTERN_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30394 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 417: /* FEATURE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30400 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 418: /* EVENT_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30406 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 419: /* ENUM_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30412 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 420: /* LIST_DATASET_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30418 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 421: /* SORTLIST_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30424 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 422: /* TYPE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30430 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 423: /* SET_TYPE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30436 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 424: /* PATTERN_TYPE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30442 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 425: /* DATASET_TYPE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30448 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 426: /* DICTIONARY_TYPE_ID  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30454 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 427: /* DATAROW_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30460 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 428: /* DATASET_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30466 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 429: /* DICTIONARY_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30472 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 430: /* VALUE_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30478 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 431: /* ACTION_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30484 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 432: /* PATTERN_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30490 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 433: /* RECORD_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30496 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 434: /* EVENT_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30502 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 435: /* SCOPE_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30508 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 436: /* TRANSFORM_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30514 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 437: /* LIST_DATASET_FUNCTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30520 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 438: /* VALUE_MACRO  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30526 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 439: /* DEFINITIONS_MACRO  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30532 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 440: /* BOOL_CONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30538 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 441: /* INTEGER_CONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30544 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 442: /* STRING_CONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30550 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 443: /* DATA_CONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30556 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 444: /* REAL_CONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30562 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 445: /* UNICODE_CONST  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30568 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 446: /* TYPE_LPAREN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30574 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 447: /* TYPE_RPAREN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30580 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 448: /* MACRO  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30586 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 449: /* COMPLEX_MACRO  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30592 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 450: /* ENDMACRO  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30598 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 451: /* SKIPPED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30604 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 452: /* HASHEND  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30610 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 453: /* HASHELIF  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30616 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 454: /* HASHBREAK  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30622 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 455: /* INDEX  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30628 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 456: /* HASH_CONSTANT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30634 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 457: /* HASH_OPTION  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30640 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 458: /* HASH_WORKUNIT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30646 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 459: /* HASH_STORED  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30652 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 460: /* HASH_LINK  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30658 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 461: /* HASH_ONWARNING  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30664 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 462: /* HASH_WEBSERVICE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30670 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 463: /* INTERNAL_READ_NEXT_TOKEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30676 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 464: /* YY_LAST_TOKEN  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30682 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 465: /* LOWEST_PRECEDENCE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30688 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 466: /* reduceAttrib  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30694 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 467: /* '+'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30700 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 468: /* '-'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30706 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 469: /* '*'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30712 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 470: /* '/'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30718 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 471: /* '%'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30724 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 472: /* '|'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30730 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 473: /* '^'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30736 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 474: /* '&'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30742 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 475: /* '.'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30748 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 476: /* '('  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30754 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 477: /* '['  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30760 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 478: /* HIGHEST_PRECEDENCE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30766 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 479: /* ';'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30772 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 480: /* ','  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30778 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 481: /* '$'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30784 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 482: /* ')'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30790 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 483: /* ':'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30796 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 484: /* ']'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30802 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 485: /* '{'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30808 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 486: /* '}'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30814 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 487: /* '@'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30820 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 488: /* '?'  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30826 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 490: /* hqlQuery  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30832 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 491: /* hqlQueryBody  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30838 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 492: /* setActiveToExpected  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30844 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 493: /* importSection  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30850 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 494: /* startIMPORT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30856 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 495: /* endIMPORT  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30862 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 496: /* importItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30868 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 497: /* importSelectorList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30874 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 498: /* importItems  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30880 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 499: /* importSelector  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30886 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 500: /* importId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30892 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 501: /* defineType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30898 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 502: /* explicitDatasetType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30904 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 503: /* explicitDatasetType1  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30910 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 504: /* explicitDictionaryType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30916 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 505: /* explicitRowType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30922 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 506: /* explicitRowType1  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30928 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 507: /* transformType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30934 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 508: /* propType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30940 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 509: /* paramType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30946 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 510: /* patternParamType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30952 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 511: /* object  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30958 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 512: /* goodObject  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30964 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 513: /* goodTypeObject  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30970 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 514: /* badObject  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30976 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 515: /* macro  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30982 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 516: /* embedBody  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30988 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 517: /* embedPrefix  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 30994 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 518: /* embedCppPrefix  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31000 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 519: /* compoundAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31006 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 520: /* startCompoundAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31012 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 521: /* returnAction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31018 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 522: /* compoundModule  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31024 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 523: /* startCompoundModule  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31030 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 524: /* moduleDefinitions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31036 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 525: /* moduleBase  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31042 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 526: /* moduleOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31048 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 527: /* moduleOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31054 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 528: /* abstractModuleList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31060 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 529: /* abstractModuleItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31066 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 530: /* complexType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31072 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 531: /* startTYPE  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31078 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 532: /* defineid  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31084 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 533: /* knownOrUnknownId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31090 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 534: /* knownId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31096 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 535: /* knownFunction1  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31102 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 536: /* scopeFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31108 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 537: /* defineidWithOptScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31114 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 538: /* definePatternIdWithOptScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31120 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 539: /* definePatternId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31126 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 540: /* optDefinitions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31132 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 541: /* definitions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31138 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 542: /* attributeDefinition  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31144 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 543: /* definition  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31150 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 544: /* simpleDefinition  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31156 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 545: /* metaCommandWithNoSemicolon  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31162 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 546: /* moduleDefinition  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31168 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 547: /* setMetaCommand  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31174 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 548: /* hashStoredValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31180 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 549: /* optfailure  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31186 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 550: /* failclause  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31192 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 551: /* failure  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31198 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 552: /* warningAction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31204 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 553: /* optPersistOpts  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31210 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 554: /* persistOpts  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31216 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 555: /* persistOpt  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31222 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 556: /* optStoredFieldFormat  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31228 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 557: /* globalOpts  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31234 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 558: /* globalOpts2  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31240 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 559: /* globalOpt  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31246 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 560: /* optFewMany  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31252 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 561: /* independentOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31258 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 562: /* commaIndependentOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31264 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 563: /* independentOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31270 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 564: /* fewMany  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31276 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 565: /* optKeyedDistributeAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31282 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 566: /* keyedDistributeAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31288 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 567: /* optDistributeAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31294 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 568: /* distributeAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31300 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 569: /* transformDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31306 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 570: /* transform  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31312 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 572: /* startInlineTransform  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31318 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 573: /* opt_join_transform_flags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31324 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 574: /* startTransform  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31330 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 575: /* transformOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31336 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 576: /* transformOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31342 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 577: /* transformations  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31348 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 578: /* transformation  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31354 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 579: /* transformPrefix  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31360 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 580: /* transformPrefixList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31366 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 581: /* transformPrefixItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31372 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 582: /* conditionalAttributeAssignment  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31378 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 583: /* conditionalAssignments  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31384 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 584: /* beginConditionalScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31390 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 585: /* conditionalAssignmentElseClause  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31396 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 586: /* defineTransformObject  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31402 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 587: /* beginDefineTransformObject  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31408 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 588: /* transformation1  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31414 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 589: /* transformDst  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31420 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 590: /* transformDstRecord  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31426 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 591: /* startSelf  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31432 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 592: /* transformDstSelect  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31438 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 593: /* transformDstField  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31444 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 594: /* dotScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31450 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 595: /* recordScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31456 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 596: /* simpleRecord  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31462 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 597: /* globalRecordId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31468 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 599: /* semiComma  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31474 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 600: /* actionlist  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31480 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 601: /* sequentialActionlist  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31486 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 602: /* sequentialAction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31492 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 603: /* action  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31498 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 604: /* actionStmt  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31504 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 605: /* failAction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31510 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 606: /* assertActions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31516 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 607: /* assertAction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31522 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 608: /* assertFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31528 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 609: /* indexRecordDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31534 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 610: /* optBuildFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31540 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 611: /* buildFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31546 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 612: /* buildFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31552 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 613: /* localAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31558 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 614: /* bloomAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31564 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 615: /* hashedIndexAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 616: /* beginIndexList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31576 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 617: /* endIndexScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31582 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 618: /* optBloomFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31588 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 619: /* bloomFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31594 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 620: /* optCommonAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31600 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 621: /* commonAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31606 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 622: /* hintAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31612 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 623: /* hintList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31618 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 624: /* hintItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31624 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 625: /* hintName  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31630 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 626: /* hintExprList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31636 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 627: /* hintExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31642 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 628: /* orderAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31648 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 629: /* optAppendAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31654 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 630: /* pullAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31660 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 631: /* expireAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31666 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 632: /* optDatasetFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31672 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 633: /* datasetFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31678 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 634: /* datasetFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31684 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 635: /* optIndexFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31690 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 636: /* indexFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31696 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 637: /* indexFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31702 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 638: /* compressMode  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31708 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 639: /* optOutputFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31714 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 640: /* outputFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31720 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 641: /* outputFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31726 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 642: /* soapFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31732 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 643: /* soapFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31738 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 644: /* onFailAction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31744 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 645: /* clusterAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31750 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 646: /* stringExpressionList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31756 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 647: /* expressionList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31762 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 648: /* optOutputWuFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31768 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 649: /* outputWuFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31774 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 650: /* outputWuFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31780 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 651: /* fromXmlOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31786 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 652: /* fromXmlOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31792 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 653: /* applyActions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31798 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 654: /* applyOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31804 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 655: /* keyDiffFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31810 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 656: /* keyDiffFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31816 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 657: /* optRecordDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31822 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 658: /* optOpt  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31828 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 659: /* scopedActionId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31834 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 661: /* eventObject  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31840 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 663: /* event  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31846 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 664: /* parmdef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31852 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 665: /* reqparmdef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 666: /* realparmdef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31864 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 667: /* params  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31870 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 668: /* param  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31876 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 669: /* formalQualifiers  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31882 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 670: /* formalQualifier  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31888 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 671: /* paramDefinition  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31894 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 672: /* nestedParmdef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31900 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 673: /* beginNestedParamDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31906 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 674: /* defvalue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31912 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 675: /* defFuncValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31918 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 676: /* functionModifiers  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31924 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 677: /* service  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31930 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 678: /* startService  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31936 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 679: /* funcDefs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31942 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 680: /* funcDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31948 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 681: /* attribs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31954 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 682: /* attriblist  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31960 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 683: /* attrib  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 684: /* funcRetType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31972 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 685: /* payloadPart  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31978 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 686: /* @5  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31984 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 687: /* recordDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31990 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 688: /* dsRecordDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 31996 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 689: /* dsEnd  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32002 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 690: /* UnknownIdList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32008 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 691: /* startrecord  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32014 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 692: /* recordBase  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32020 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 693: /* recordOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32026 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 694: /* recordOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32032 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 695: /* endrecord  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32038 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 696: /* endOfRecordMarker  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32044 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 697: /* abstractDataset  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32050 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 698: /* optSemiComma  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32056 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 699: /* optFieldDefs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32062 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 700: /* fieldDefs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 701: /* fieldDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32074 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 702: /* optFieldAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32080 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 703: /* fieldAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32086 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 704: /* fieldAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32092 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 705: /* ifblock  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32098 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 706: /* beginIfBlock  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32104 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 707: /* qualifiedTypeId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32110 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 708: /* enumTypeId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32116 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 709: /* optParams  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32122 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 710: /* optDefaultValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32128 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 711: /* defaultValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32134 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 712: /* setType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32140 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 713: /* simpleType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32146 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 714: /* userTypedefType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32152 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 715: /* userTypedefSet  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32158 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 716: /* userTypedefPattern  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32164 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 717: /* userTypedefDataset  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32170 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 718: /* userTypedefDictionary  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32176 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 719: /* childDatasetOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32182 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 720: /* childDatasetOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32188 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 721: /* typeDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32194 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 722: /* scalarType  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32200 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 723: /* query  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32206 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 724: /* optCommaExpression  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32212 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 725: /* optExpression  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32218 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 726: /* optConstBoolArg  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32224 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 727: /* booleanExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32230 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 728: /* constExpression  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32236 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 729: /* expression  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32242 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 730: /* startCompoundExpression  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32248 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 731: /* beginInlineFunctionToken  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32254 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 732: /* endInlineFunctionToken  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32260 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 733: /* optCondList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32266 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 734: /* condList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32272 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 735: /* chooseList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32278 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 736: /* chooseItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32284 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 737: /* scalarExpression  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32290 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 738: /* heterogeneous_expr_list  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32296 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 739: /* heterogeneous_expr_list_open  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32302 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 740: /* compareExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32308 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 741: /* compareOp  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32314 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 742: /* expr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32320 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 743: /* rangeOrIndices  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32326 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 744: /* rangeExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32332 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 745: /* primexpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32338 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 746: /* primexpr1  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32344 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 747: /* optCount  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32350 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 748: /* evaluateTopFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32356 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 749: /* alienTypeInstance  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32362 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 751: /* sizeof_type_target  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32368 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 752: /* sizeof_expr_target  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32374 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 753: /* fieldSelectedFromRecord  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32380 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 754: /* optMaxMin  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32386 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 755: /* beginCounterScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32392 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 756: /* endCounterScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32398 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 757: /* optAscDesc  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32404 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 758: /* optExtraFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32410 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 759: /* regexOpt  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32416 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 760: /* xmlEncodeFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32422 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 761: /* aggregateFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32428 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 762: /* aggregateFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32434 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 763: /* transfer  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32440 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 764: /* atomicValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32446 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 765: /* moduleScopeDot  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32452 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 766: /* pseudoResolutionScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32458 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 767: /* abstractModule  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32464 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 769: /* scopeFunctionWithParameters  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32470 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 771: /* libraryName  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32476 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 772: /* leaveScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32482 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 773: /* scopeProjectOpts  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32488 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 774: /* scopeProjectOpt  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32494 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 775: /* qualifiedFieldName  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32500 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 776: /* globalValueAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 778: /* dataSetOrRowList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32512 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 779: /* dataSetOrRow  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32518 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 780: /* dataRow  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32524 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 782: /* simpleDataRow  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32530 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 783: /* dictionary  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32536 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 784: /* simpleDictionary  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32542 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 785: /* dictionaryList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32548 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 786: /* scopedDictionaryId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32554 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 788: /* globalScopedDictionaryId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32560 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 789: /* dataSet  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32566 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 790: /* simpleDataSet  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32572 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 791: /* dataSetList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32578 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 792: /* mergeDataSetList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32584 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 793: /* mergeDataSetItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32590 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 794: /* cogroupDataSetList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32596 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 795: /* cogroupDataSetItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32602 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 796: /* sideEffectOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32608 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 797: /* optQuantileOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32614 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 798: /* quantileOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32620 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 799: /* quantileOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32626 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 800: /* limitOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32632 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 801: /* limitOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32638 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 802: /* catchOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32644 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 803: /* projectOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32650 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 804: /* projectOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32656 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 805: /* prefetchAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32662 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 806: /* loopOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32668 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 807: /* loopOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32674 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 808: /* graphOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32680 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 809: /* graphOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32686 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 810: /* remoteOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32692 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 811: /* distributedFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32698 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 812: /* distributedFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32704 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 813: /* optStepFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32710 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 814: /* stepFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32716 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 815: /* sectionArguments  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32722 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 816: /* sectionArgument  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32728 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 817: /* enumDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32734 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 818: /* enumBegin  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32740 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 819: /* enumFirst  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32746 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 820: /* enumValues  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32752 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 821: /* enumValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32758 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 822: /* indexTopRecordAndName  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32764 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 823: /* nullRecordDef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32770 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 824: /* failDatasetParam  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32776 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 825: /* mode  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32782 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 826: /* dsOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32788 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 827: /* lookupOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32794 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 828: /* dsOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32800 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 829: /* optDsOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32806 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 830: /* thorFilenameOrList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32812 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 831: /* indexListOpt  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32818 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 832: /* csvOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32824 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 833: /* csvOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32830 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 834: /* headingOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32836 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 835: /* headingOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32842 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 836: /* xmlOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32848 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 837: /* xmlOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32854 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 838: /* optPipeOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32860 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 839: /* pipeOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32866 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 840: /* pipeOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32872 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 841: /* pipeFormatOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32878 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 842: /* setCountList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32884 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 843: /* choosesetAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32890 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 844: /* pipe  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32896 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 845: /* choosenExtra  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32902 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 846: /* choosenFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32908 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 847: /* choosenFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32914 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 848: /* inlineFieldValue2  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32920 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 849: /* inlineFieldValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32926 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 850: /* inlineFieldValueGoesTo  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32932 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 851: /* inlineFieldValues  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32938 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 852: /* inlineFieldValuesWithGoesto  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32944 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 853: /* inlineDatasetValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32950 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 854: /* inlineDatasetValueList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32956 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 855: /* transformList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32962 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 856: /* optJoinFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32968 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 857: /* JoinFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32974 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 858: /* JoinFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32980 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 859: /* joinLimitOptions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32986 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 860: /* joinLimitOption  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32992 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 861: /* mergeJoinFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 32998 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 862: /* mergeJoinFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33004 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 863: /* skewAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33010 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 864: /* optDistributionFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33016 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 865: /* DistributionFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33022 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 866: /* DistributionFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33028 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 867: /* optTrimFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33034 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 868: /* TrimFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33040 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 869: /* commaTrimFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33046 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 870: /* TrimFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33052 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 871: /* optSortList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33058 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 872: /* optTraceFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33064 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 873: /* traceFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33070 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 874: /* traceFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33076 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 875: /* doParseFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33082 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 876: /* parseFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33088 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 877: /* parseFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33094 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 878: /* xmlParseFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33100 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 879: /* xmlParseFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33106 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 880: /* startGROUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33112 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 881: /* endGROUP  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33118 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 882: /* startSortOrder  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33124 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 883: /* endSortOrder  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33130 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 884: /* startTopFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33136 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 885: /* startRightFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33142 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 886: /* startRightRowsRecord  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33148 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 887: /* startLeftRightSeqFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33154 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 888: /* startTopLeftSeqFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33160 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 889: /* startTopLeftRightSeqFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33166 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 890: /* startTopLeftRightSeqSetDatasets  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33172 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 891: /* startPointerToMember  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33178 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 893: /* endPointerToMember  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33184 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 895: /* startSimpleFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33190 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 896: /* startLeftSeqRow  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33196 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 897: /* startRightRow  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33202 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 898: /* startLeftRowsSeqFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33208 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 899: /* startLeftSeqFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33214 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 900: /* startLeftDelaySeqFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33220 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 901: /* startRightDistributeSeqFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33226 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 902: /* endSelectorSequence  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33232 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 903: /* startLeftRowsGroup  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33238 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 904: /* startLeftRows  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33244 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 905: /* startRightRowsGroup  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33250 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 906: /* endRowsGroup  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33256 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 907: /* endSimpleFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33262 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 908: /* endTopFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33268 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 909: /* endTopLeftFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33274 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 910: /* endTopLeftRightFilter  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33280 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 911: /* scopedDatasetId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33286 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 913: /* globalScopedDatasetId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33292 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 914: /* setOfDatasets  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33298 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 915: /* scopedListDatasetId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33304 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 917: /* actualParameters  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33310 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 918: /* actualList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33316 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 919: /* optActualValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33322 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 920: /* namedActual  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33328 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 921: /* actualValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33334 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 922: /* anyFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33340 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 923: /* valueFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33346 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 924: /* actionFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33352 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 925: /* datarowFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33358 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 926: /* datasetFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33364 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 927: /* dictionaryFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33370 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 928: /* scopeFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33376 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 929: /* transformFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33382 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 930: /* recordFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33388 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 931: /* listDatasetFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33394 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 932: /* eventFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33400 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 933: /* optFieldMaps  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33406 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 934: /* fieldMaps  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33412 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 935: /* fieldMaps1  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33418 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 936: /* fieldMap  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33424 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 937: /* sortListOptCurleys  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33430 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 938: /* sortList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33436 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 939: /* nonDatasetList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33442 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 940: /* nonDatasetExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33448 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 941: /* simpleSortItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33454 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 942: /* sortItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33460 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 943: /* expandedSortListByReference  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33466 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 944: /* optDedupFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33472 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 945: /* dedupFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33478 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 946: /* dedupFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33484 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 947: /* rollupExtra  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33490 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 948: /* rollupFlags  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33496 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 949: /* rollupFlag  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33502 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 950: /* conditions  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33508 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 951: /* mapSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33514 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 952: /* mapItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33520 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 953: /* beginList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33526 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 954: /* sortListExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33532 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 955: /* ignoreDummyList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33538 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 956: /* caseSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33544 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 957: /* caseItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33550 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 958: /* mapDatasetSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33556 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 959: /* mapDatasetItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33562 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 960: /* mapDictionarySpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33568 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 961: /* mapDictionaryItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33574 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 962: /* caseDatasetSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33580 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 963: /* caseDatasetItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33586 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 964: /* caseDictionarySpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33592 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 965: /* caseDictionaryItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33598 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 966: /* mapDatarowSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33604 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 967: /* mapDatarowItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33610 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 968: /* caseDatarowSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33616 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 969: /* caseDatarowItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33622 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 970: /* mapActionSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33628 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 971: /* mapActionItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33634 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 972: /* caseActionSpec  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33640 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 973: /* caseActionItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33646 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 974: /* const  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33652 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 975: /* stringConstExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33658 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 976: /* stringOrUnicodeConstExpr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33664 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 977: /* optConstExpression  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33670 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 978: /* pattern  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33676 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 979: /* optPatternOr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33682 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 980: /* patternOr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33688 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 981: /* optPatternOrItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33694 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 982: /* patternOrItem  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33700 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 983: /* beginPatternScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33706 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 984: /* startRootPattern  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33712 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 985: /* endRootPattern  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33718 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 986: /* patternOrItemValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33724 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 987: /* pattern2  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33730 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 988: /* optNotAttr  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33736 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 989: /* checkedPattern  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33742 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 990: /* pattern0  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33748 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 991: /* globalFeaturedPatternAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33754 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 992: /* globalPatternAttribute  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33760 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 994: /* patternParameters  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33766 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 995: /* beginPatternParameters  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33772 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 996: /* endPatternParameters  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33778 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 997: /* patternActualList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33784 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 998: /* optPatternActualValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33790 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 999: /* namedPatternActual  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33796 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1000: /* patternParamval  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33802 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1001: /* optMinimal  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33808 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1002: /* optPatternList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33814 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1003: /* patternList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33820 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1004: /* patternReference  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33826 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1005: /* patternSelector  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33832 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1006: /* patternOrRuleRef  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33838 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1007: /* patternOrRuleId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33844 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1008: /* patternOrRuleFunction  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33850 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1009: /* defineFeatureIdWithOptScope  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33856 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1010: /* defineFeatureId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33862 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1011: /* featureParameters  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33868 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1012: /* featureIdList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33874 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1013: /* featureDefine  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33880 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1014: /* featureCompound  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33886 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1015: /* featureList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33892 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1016: /* featureGuards  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33898 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1017: /* featureGuard  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33904 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1018: /* featureId  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33910 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1019: /* featureValue  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33916 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1020: /* featureValueList  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33922 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1021: /* featureModifiers  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33928 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1022: /* startDistributeAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33934 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1023: /* startHeadingAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33940 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;

    case 1024: /* startStoredAttrs  */
#line 27 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1257  */
      {((*yyvaluep)).release();}
#line 33946 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1257  */
        break;


      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (HqlGram* parser)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, parser, yyssp);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 618 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { ignoreBisonWarnings3((yyval),(yyvsp[-1]),(yyvsp[0])); }
#line 34214 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 5:
#line 625 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addResult((yyvsp[0]).getExpr(), (yyvsp[0])); (yyval).clear(); }
#line 34220 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 6:
#line 627 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            ignoreBisonWarning((yyvsp[-1]));
                            parser->addResult((yyvsp[0]).getExpr(), (yyvsp[0])); (yyval).clear();
                        }
#line 34229 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 7:
#line 632 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addResult((yyvsp[-1]).getExpr(), (yyvsp[-1])); (yyval).clear(); }
#line 34235 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 8:
#line 634 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addResult((yyvsp[-1]).getExpr(), (yyvsp[-1])); (yyval).clear(); }
#line 34241 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 9:
#line 636 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addResult((yyvsp[-1]).getExpr(), (yyvsp[-1])); (yyval).clear(); }
#line 34247 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 10:
#line 639 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            ignoreBisonWarning((yyvsp[0]));
                            parser->addResult((yyvsp[-1]).getExpr(), (yyvsp[-1])); (yyval).clear();
                        }
#line 34256 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 11:
#line 644 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            ignoreBisonWarnings2((yyvsp[-2]), (yyvsp[0]));
                            parser->addResult((yyvsp[-1]).getExpr(), (yyvsp[-1])); (yyval).clear();
                        }
#line 34265 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 13:
#line 651 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addResult((yyvsp[-1]).getExpr(), (yyvsp[-1])); (yyval).clear(); }
#line 34271 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 14:
#line 655 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setCurrentToExpected(); (yyval).clear(); }
#line 34277 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 15:
#line 661 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->lastpos = (yyvsp[0]).pos.position+1; (yyval).clear(); }
#line 34283 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 16:
#line 663 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->lastpos = (yyvsp[0]).pos.position+1; (yyval).clear(); }
#line 34289 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 17:
#line 667 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setIdUnknown(true); (yyval).clear(); }
#line 34295 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 18:
#line 671 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setIdUnknown(false); (yyval).clear(); }
#line 34301 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 19:
#line 676 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processImport((yyvsp[0]), NULL);
                            (yyval).clear();
                        }
#line 34310 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 20:
#line 681 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processImport((yyvsp[-2]), (yyvsp[0]), NULL);
                            (yyval).clear();
                        }
#line 34319 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 21:
#line 686 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processImport((yyvsp[-2]), (yyvsp[0]).getId());
                            (yyval).clear();
                        }
#line 34328 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 22:
#line 691 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processImport((yyvsp[-4]), (yyvsp[-2]), (yyvsp[0]).getId());
                            (yyval).clear();
                        }
#line 34337 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 23:
#line 696 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processImportAll((yyvsp[0]));
                            (yyval).clear();
                        }
#line 34346 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 24:
#line 701 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (queryLegacyImportSemantics())
                                parser->reportWarning(CategoryDeprecated, ERR_DEPRECATED, (yyvsp[-2]).pos, "IMPORT <module> AS * is deprecated, use IMPORT * FROM <module>");
                            else
                                parser->reportError(ERR_DEPRECATED, (yyvsp[-2]).pos, "IMPORT <module> AS * is deprecated, use IMPORT * FROM <module>");
                            parser->processImportAll((yyvsp[-2]));
                            (yyval).clear();
                        }
#line 34359 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 25:
#line 713 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray importItems;
                            parser->endList(importItems);
                            (yyval).setExpr(createComma(importItems), (yyvsp[0]));
                        }
#line 34369 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 26:
#line 722 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 34378 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 27:
#line 727 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 34387 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 29:
#line 738 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createId((yyvsp[0]).getId()), (yyvsp[0]));
                        }
#line 34395 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 30:
#line 741 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(selfAtom), (yyvsp[0]));
                        }
#line 34403 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 31:
#line 744 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(_root_Atom), (yyvsp[0]));
                        }
#line 34411 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 32:
#line 748 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(_dot_Atom, (yyvsp[-2]).getExpr(), createId((yyvsp[0]).getId())), (yyvsp[-2]));
                        }
#line 34419 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 33:
#line 752 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(_container_Atom, (yyvsp[-2]).getExpr()), (yyvsp[-2]));
                        }
#line 34427 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 38:
#line 762 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression* record = queryNullRecord();
                            (yyval).setType(makeRowType(record->getType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34437 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 41:
#line 773 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeGroupedTableType((yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34446 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 42:
#line 781 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeTableType(makeRowType(queryNullRecord()->getType())));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34455 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 43:
#line 786 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr options = (yyvsp[-1]).getExpr();
                            ITypeInfo * recordType = createRecordType(record);
                            Owned<ITypeInfo> tableType = makeTableType(makeRowType(recordType));
                            if (options)
                                tableType.setown(makeAttributeModifier(LINK(tableType), createExprAttribute(_childAttr_Atom, LINK(options))));
                            (yyval).setType(tableType.getClear());
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 34470 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 44:
#line 797 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeOutOfLineModifier((yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34479 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 45:
#line 802 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> dsType = (yyvsp[0]).getType();
                            (yyval).setType(setLinkCountedAttr(dsType, true));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34489 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 46:
#line 808 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> dsType = (yyvsp[0]).getType();
                            Owned<ITypeInfo> linkedType = setLinkCountedAttr(dsType, true);
                            (yyval).setType(setStreamedAttr(linkedType, true));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34500 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 47:
#line 815 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeAttributeModifier((yyvsp[0]).getType(), getEmbeddedAttr()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34509 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 49:
#line 824 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeDictionaryType(makeRowType(queryNullRecord()->getType())));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34518 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 50:
#line 829 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            ITypeInfo * recordType = createRecordType(record);
                            (yyval).setType(makeDictionaryType(makeRowType(recordType)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 34529 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 51:
#line 836 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> dsType = (yyvsp[0]).getType();
                            (yyval).setType(setLinkCountedAttr(dsType, true));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34539 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 54:
#line 847 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> rowType = (yyvsp[0]).getType();
                            (yyval).setType(setLinkCountedAttr(rowType, true));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34549 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 55:
#line 855 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression* record = queryNullRecord();
                            (yyval).setType(makeRowType(record->getType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34559 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 56:
#line 861 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            (yyval).setType(makeRowType(record->getType()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 34569 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 57:
#line 871 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            (yyval).setType(makeTransformType(LINK(record->queryRecordType())), (yyvsp[-3]));
                        }
#line 34578 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 58:
#line 876 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-1]).getExpr();
                            (yyval).setType(makeTransformType(LINK(ds->queryRecordType())), (yyvsp[-3]));
                        }
#line 34587 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 60:
#line 885 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_SVC_NOSCOPEMODIFIER,(yyvsp[-1]),"Function in service can not specify EXPORT or SHARED");
                            (yyval).setType((yyvsp[0]).getType());
                        }
#line 34596 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 61:
#line 889 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_SVC_NOSCOPEMODIFIER,(yyvsp[0]),"Function in service can not specify EXPORT or SHARED");
                            (yyval).setType(makeVoidType());
                        }
#line 34605 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 62:
#line 897 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedITypeInfo type = (yyvsp[0]).getType();
                            //Syntactic oddity.  A record means a row of that record type.
                            if (type->getTypeCode() == type_record)
                                type.setown(makeRowType(type.getClear()));
                            (yyval).setType(type.getClear());
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34618 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 63:
#line 905 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr dataset = (yyvsp[0]).getExpr();
//                          $$.setType(makeOriginalModifier(createRecordType(dataset), LINK(dataset)));
                            (yyval).setType(makeRowType(createRecordType(dataset)));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34629 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 64:
#line 912 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //slightly nasty to add two original modifiers to the record, but the first one allows
                            //us to get the record right, and the second the types of parameters on transforms.
                            (yyvsp[-2]).release();
                            OwnedHqlExpr dataset = (yyvsp[-1]).getExpr();
                            //$$.setType(makeOriginalModifier(createRecordType(dataset), LINK(dataset)));
                            (yyval).setType(makeRowType(createRecordType(dataset)));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 34643 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 65:
#line 921 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[0]).getExpr();
                            OwnedHqlExpr abstractRecord = createAbstractRecord(record);
                            OwnedITypeInfo type = makeTableType(makeRowType(abstractRecord->getType()));
                            (yyval).setType(type.getClear(), (yyvsp[0]));
                            parser->setTemplateAttribute();
                        }
#line 34655 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 69:
#line 932 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[0]).getExpr();
                            (yyval).setType(scope->getType());       // more what about if moduleScope is a parameter?
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34665 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 71:
#line 939 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression* record = queryNullRecord();
                            OwnedHqlExpr abstractRecord = createAbstractRecord(record);
                            (yyval).setType(abstractRecord->getType(), (yyvsp[-1]));
                            parser->setTemplateAttribute();
                        }
#line 34676 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 72:
#line 948 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makePatternType());
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34685 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 73:
#line 952 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeRuleType(NULL));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34694 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 74:
#line 956 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeTokenType());
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34703 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 79:
#line 971 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Remove later to allow sortlist attributes
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 34713 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 92:
#line 989 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> type = (yyvsp[-1]).getType();
                            HqlExprArray attrs;
                            (yyvsp[0]).unwindCommaList(attrs);
                            (yyval).setExpr(createValue(no_typedef, type.getClear(), attrs), (yyvsp[-1]));
                        }
#line 34724 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 97:
#line 1000 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr value = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_indirect, value->getType(), LINK(value)), (yyvsp[0]));
                        }
#line 34733 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 98:
#line 1005 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //NB: Undocumented experimental feature
                            //This is only allowed as an object, rather than a sequence so we can correctly check whether the containing
                            //attribute (if any) is parametered, and add the implicit parameter there
                            (yyval).setExpr(parser->createScopedSequenceExpr(), (yyvsp[0]));
                        }
#line 34744 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 99:
#line 1012 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Ugly internal unsupported syntax for defining an out of line function
                            //Needs a lot more work.
                            OwnedHqlExpr value = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->convertToOutOfLineFunction((yyvsp[0]).pos, value), (yyvsp[-1]));
                        }
#line 34755 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 100:
#line 1019 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Ugly internal unsupported syntax for defining an out of line function
                            //Needs a lot more work.
                            OwnedHqlExpr value = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->convertToInlineFunction((yyvsp[0]).pos, value), (yyvsp[-1]));
                        }
#line 34766 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 105:
#line 1033 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            (yyval).setType(makeRuleType(record->getType()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 34776 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 108:
#line 1043 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processError(false);
                            (yyval).setExpr(createConstant((__int64) 0), (yyvsp[0]));
                        }
#line 34785 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 109:
#line 1050 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<IFileContents> contents = (yyvsp[0]).getContents();
                            IHqlExpression* expr = createUnknown(no_macro, makeBoolType(), macroAtom, LINK(contents));
#if defined(TRACE_MACRO)
                            PrintLog("MACRO>> verify: macro definition at %d:%d\n",yylval.startLine, yylval.startColumn);
#endif

                            //Use a named symbol to associate a line number/column
                            expr = createSymbol(macroId, NULL, expr, NULL,
                                                false, false, (object_type)0,
                                                NULL,
                                                yylval.pos.lineno, yylval.pos.column, 0, 0, 0);
                            (yyval).setExpr(expr, (yyvsp[0]));
                        }
#line 34804 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 110:
#line 1064 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<IFileContents> contents = (yyvsp[0]).getContents();

                            IHqlExpression* expr = createUnknown(no_macro, makeVoidType(), macroAtom, LINK(contents));

#if defined(TRACE_MACRO)
                            PrintLog("MACRO>> verify: macro definition at %d:%d\n",yylval.startLine, yylval.startColumn);
#endif

                            //Use a named symbol to associate a line number/column
                            expr = createSymbol(macroId, NULL, expr, NULL,
                                                false, false, (object_type)0,
                                                NULL,
                                                yylval.pos.lineno, yylval.pos.column, 0, 0, 0);

                            (yyval).setExpr(expr, (yyvsp[0]));
                        }
#line 34826 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 111:
#line 1084 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr embeddedCppText = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->processEmbedBody((yyvsp[0]), embeddedCppText, NULL, NULL), (yyvsp[0]));
                        }
#line 34835 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 112:
#line 1089 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr language = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr embedText = (yyvsp[0]).getExpr();
                            if (language->getOperator()==no_comma)
                                (yyval).setExpr(parser->processEmbedBody((yyvsp[0]), embedText, language->queryChild(0), language->queryChild(1)), (yyvsp[-1]));
                            else
                                (yyval).setExpr(parser->processEmbedBody((yyvsp[0]), embedText, language, NULL), (yyvsp[-1]));
                        }
#line 34848 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 113:
#line 1098 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr attrs = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr embedText = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->processEmbedBody((yyvsp[0]), embedText, NULL, attrs), (yyvsp[-1]));
                        }
#line 34858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 114:
#line 1104 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_stringorunicode, false);
                            OwnedHqlExpr language = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr embedText = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr attribs = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->processEmbedBody((yyvsp[-2]), embedText, language, attribs), (yyvsp[-6]));
                        }
#line 34870 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 115:
#line 1112 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_stringorunicode, true);
                            OwnedHqlExpr language = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr funcname = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr attribs = createComma(createAttribute(importAtom), (yyvsp[-1]).getExpr());
                            (yyval).setExpr(parser->processEmbedBody((yyvsp[-1]), funcname, language, attribs), (yyvsp[-6]));
                        }
#line 34882 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 116:
#line 1124 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->getLexer()->enterEmbeddedMode();
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-4]));
                        }
#line 34891 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 117:
#line 1132 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->getLexer()->enterEmbeddedMode();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-4]));
                        }
#line 34900 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 118:
#line 1140 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processCompoundFunction((yyvsp[-2]), false), (yyvsp[-2]));
                        }
#line 34908 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 119:
#line 1147 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->enterScope(false);
                            parser->enterCompoundObject();
                            (yyval).clear();
                        }
#line 34918 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 120:
#line 1156 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[0]).getExpr(), (yyvsp[0]));
                        }
#line 34926 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 121:
#line 1163 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processModuleDefinition((yyvsp[-3])), (yyvsp[-3]));
                        }
#line 34934 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 122:
#line 1167 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr flags = (yyvsp[-1]).getExpr();
                            IHqlExpression *expr = parser->implementInterfaceFromModule((yyvsp[-4]), (yyvsp[-2]), flags);
                            (yyval).setExpr(expr, (yyvsp[-6]));
                        }
#line 34944 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 123:
#line 1176 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->enterVirtualScope();
                            parser->enterCompoundObject();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34954 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 124:
#line 1182 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->enterVirtualScope();
                            parser->enterCompoundObject();
                            OwnedHqlExpr attr = createAttribute(interfaceAtom);
                            parser->appendToActiveScope(attr);
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 130:
#line 1204 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[0]).getExpr();
                            if (expr)
                                parser->appendToActiveScope(expr);
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 34978 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 131:
#line 1215 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Only for internal testing...
                            (yyval).setExpr(createAttribute(_noStreaming_Atom), (yyvsp[0]));
                        }
#line 34987 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 132:
#line 1220 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(interfaceAtom), (yyvsp[0]));
                        }
#line 34995 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 133:
#line 1224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(virtualAtom), (yyvsp[0]));
                        }
#line 35003 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 134:
#line 1228 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processForwardModuleDefinition((yyvsp[0]));
                            (yyval).setExpr(NULL, (yyvsp[0]));
                        }
#line 35012 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 135:
#line 1233 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(libraryAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35020 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 138:
#line 1245 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[0]).getExpr();
                            if (parser->checkValidBaseModule((yyvsp[0]), expr))
                                parser->appendToActiveScope(expr);

                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35033 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 139:
#line 1258 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processAlienType((yyvsp[0])),(yyvsp[-2]));
                        }
#line 35041 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 140:
#line 1261 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_USRTYPE_EMPTYDEF,(yyvsp[-1]),"Empty user TYPE definition");
                            (yyval).setExpr(parser->processAlienType((yyvsp[0])),(yyvsp[-1]));
                        }
#line 35050 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 141:
#line 1268 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginAlienType((yyvsp[0]));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35060 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 142:
#line 1276 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginDefineId((yyvsp[0]).getId(), NULL);
                            (yyval).setType(NULL);
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35070 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 143:
#line 1281 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginDefineId(parser->getNameFromExpr((yyvsp[0])), NULL);
                            (yyval).setType(NULL);
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35080 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 144:
#line 1286 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginDefineId(parser->getNameFromExpr((yyvsp[0])), NULL);
                            (yyval).setType(NULL);
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35090 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 145:
#line 1291 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginDefineId(parser->getNameFromExpr((yyvsp[0])), NULL);
                            (yyval).setType(NULL);
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35100 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 146:
#line 1296 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginDefineId(parser->getNameFromExpr((yyvsp[0])), NULL);
                            (yyval).setType(NULL);
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35110 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 147:
#line 1302 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> type = (yyvsp[-1]).getType();
                            if (type->getTypeCode() == type_alien)
                                type.set(type->queryPromotedType());
                            parser->beginDefineId((yyvsp[0]).getId(), type);
                            (yyval).setType(type.getClear());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35123 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 148:
#line 1311 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-1]).getExpr();
                            parser->beginDefineId((yyvsp[0]).getId(), ds->queryType());
                            (yyval).setType(ds->getType());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35134 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 149:
#line 1318 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_UNKNOWN_TYPE, (yyvsp[-1]), "Unknown type '%s'", str((yyvsp[-1]).getId()));
                            parser->beginDefineId((yyvsp[0]).getId(), NULL);
                            (yyval).setType(NULL);
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35145 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 151:
#line 1329 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setId(parser->getNameFromExpr((yyvsp[0]))); (yyval).setPosition((yyvsp[0])); }
#line 35151 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 152:
#line 1330 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setId(parser->getNameFromExpr((yyvsp[0]))); (yyval).setPosition((yyvsp[0])); }
#line 35157 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 175:
#line 1367 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setInt(EXPORT_FLAG); (yyval).setPosition((yyvsp[0])); }
#line 35163 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 176:
#line 1368 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setInt(SHARED_FLAG); (yyval).setPosition((yyvsp[0])); }
#line 35169 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 177:
#line 1369 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setInt(0); (yyval).setPosition((yyvsp[0])); }
#line 35175 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 178:
#line 1370 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setInt(EXPORT_FLAG|VIRTUAL_FLAG); (yyval).setPosition((yyvsp[-1])); }
#line 35181 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 179:
#line 1371 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setInt(SHARED_FLAG|VIRTUAL_FLAG); (yyval).setPosition((yyvsp[-1])); }
#line 35187 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 180:
#line 1377 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setDefineId(parser->createDefineId(0, (yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35196 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 181:
#line 1382 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setDefineId(parser->createDefineId((int)(yyvsp[-1]).getInt(), (yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35205 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 182:
#line 1389 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setDefineId(parser->createDefineId(0, (yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 35214 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 183:
#line 1394 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setDefineId(parser->createDefineId((int)(yyvsp[-1]).getInt(), (yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35223 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 184:
#line 1402 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = makePatternType();
                            parser->beginDefineId((yyvsp[0]).getId(), type);
                            (yyval).setType(type);
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35234 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 185:
#line 1409 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = makeRuleType(NULL);
                            parser->beginDefineId((yyvsp[0]).getId(), type);
                            (yyval).setType(type);
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35245 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 186:
#line 1416 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-2]).getExpr();
                            ITypeInfo *type = makeRuleType(record->getType());
                            parser->beginDefineId((yyvsp[0]).getId(), type);
                            (yyval).setType(type);
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 35257 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 187:
#line 1424 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = makeTokenType();
                            parser->beginDefineId((yyvsp[0]).getId(), type);
                            (yyval).setType(type);
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35268 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 188:
#line 1431 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = (yyvsp[-1]).getType();
                            parser->beginDefineId((yyvsp[0]).getId(), type);
                            (yyval).setType(type);
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 35279 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 194:
#line 1453 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-3]).release();
                            (yyval).clear();
                        }
#line 35288 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 195:
#line 1459 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if ((yyvsp[-1]).queryExpr())
                                parser->normalizeExpression((yyvsp[-2]));
                            (yyval).clear((yyvsp[-5]));
                            parser->defineSymbolProduction((yyvsp[-5]), (yyvsp[-4]), (yyvsp[-3]), &(yyvsp[-2]), &(yyvsp[-1]), (yyvsp[0]));
                        }
#line 35299 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 196:
#line 1466 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->definePatternSymbolProduction((yyvsp[-6]), (yyvsp[-5]), (yyvsp[-3]), (yyvsp[-2]), (yyvsp[-1]), (yyvsp[0]));
                            (yyval).clear();
                        }
#line 35308 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 197:
#line 1471 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            DefineIdSt* defineid = (yyvsp[-1]).getDefineId();
                            IHqlExpression *expr = createValue(no_null, makeFeatureType());
                            expr = createValue(no_pat_featuredef, expr->getType(), expr);

                            parser->doDefineSymbol(defineid, expr, NULL, (yyvsp[-1]), (yyvsp[0]).pos.position, (yyvsp[0]).pos.position, false, NULL);
                            (yyval).clear();
                        }
#line 35321 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 198:
#line 1480 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            DefineIdSt* defineid = (yyvsp[-3]).getDefineId();
                            IHqlExpression *expr = (yyvsp[-1]).getExpr();
                            expr = createValue(no_pat_featuredef, expr->getType(), expr);

                            parser->doDefineSymbol(defineid, expr, NULL, (yyvsp[-3]), (yyvsp[-2]).pos.position, (yyvsp[0]).pos.position, false, NULL);
                            (yyval).clear();
                        }
#line 35334 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 200:
#line 1493 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Extra ';' are ignored, partly to reduce problems with trailing ';' inside macros
                            (yyval).clear();
                        }
#line 35343 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 202:
#line 1501 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addResult((yyvsp[-1]).getExpr(), (yyvsp[-1]));
                            (yyval).clear();
                        }
#line 35352 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 203:
#line 1506 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            yyerrok;
                            parser->processError(true);
                            (yyval).clear();
                        }
#line 35362 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 206:
#line 1517 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //These are really treated like actions now, this is here for backward compatibility
                            parser->reportWarning(CategoryDeprecated, ERR_DEPRECATED, (yyvsp[0]).pos, "#command with no trailing semicolon is deprecated");
                            parser->addResult((yyvsp[0]).getExpr(), (yyvsp[0]));
                            (yyval).clear();
                        }
#line 35373 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 207:
#line 1527 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->defineSymbolProduction((yyvsp[-2]), (yyvsp[-1]), (yyvsp[0]), NULL, NULL, (yyvsp[0]));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 35383 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 209:
#line 1538 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, true);
                            parser->normalizeExpression((yyvsp[-1]), type_any, true);
                            (yyval).setExpr(createValue(no_setmeta, makeVoidType(), createAttribute(debugAtom), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35393 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 210:
#line 1544 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, true);
                            parser->normalizeExpression((yyvsp[-1]), type_any, true);
                            (yyval).setExpr(createValue(no_setmeta, makeVoidType(), createAttribute(workunitAtom), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35403 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 211:
#line 1550 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-3]));
                            (yyval).setExpr(createValue(no_setmeta, makeVoidType(), createAttribute(storedAtom), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35412 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 212:
#line 1555 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-3]));
                            (yyval).setExpr(createValue(no_setmeta, makeVoidType(), createAttribute(constAtom), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35421 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 213:
#line 1560 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            (yyval).setExpr(createValue(no_setmeta, makeVoidType(), createAttribute(linkAtom), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35430 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 214:
#line 1565 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (isNumericType((yyvsp[-3]).queryExprType()))
                            {
                                parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            }
                            else
                            {
                                parser->normalizeExpression((yyvsp[-3]), type_string, false);
                            }
                            (yyval).setExpr(createValue(no_setmeta, makeVoidType(), createAttribute(onWarningAtom), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35446 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 215:
#line 1577 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createValue(no_setmeta, makeVoidType(), createExprAttribute(webserviceAtom, args)), (yyvsp[-3]));
                        }
#line 35456 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 216:
#line 1586 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_any, false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 35465 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 219:
#line 1596 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[0]).getExpr(), (yyvsp[-1])); 
                        }
#line 35473 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 220:
#line 1599 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); (yyval).clearPosition(); }
#line 35479 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 222:
#line 1605 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * previousWorkflow = (yyvsp[-2]).getExpr();
                            IHqlExpression * newWorkflow = (yyvsp[0]).getExpr();
                            parser->checkWorkflowMultiples(previousWorkflow, newWorkflow, (yyvsp[0]));
                            (yyval).setExpr(createComma(previousWorkflow, newWorkflow), (yyvsp[-2]));
                        }
#line 35490 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 223:
#line 1615 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValueF(no_failure, makeNullType(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-4]));
                        }
#line 35498 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 224:
#line 1619 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValueF(no_success, makeNullType(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-4]));
                        }
#line 35506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 225:
#line 1623 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_recovery, makeNullType(), (yyvsp[-1]).getExpr(), createConstant(1)), (yyvsp[-3]));
                        }
#line 35514 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 226:
#line 1627 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createValue(no_recovery, makeNullType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35523 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 227:
#line 1632 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConstantEvent((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_when, makeNullType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35532 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 228:
#line 1637 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConstantEvent((yyvsp[-6]));
                            parser->normalizeExpression((yyvsp[-2]), type_int, true);
                            (yyval).setExpr(createValue(no_when, makeNullType(), (yyvsp[-6]).getExpr(), (yyvsp[-2]).getExpr()), (yyvsp[-8]));
                        }
#line 35542 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 229:
#line 1643 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createValue(no_priority, makeNullType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35551 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 230:
#line 1648 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            (yyval).setExpr(createValueF(no_persist, makeVoidType(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-3]));
                        }
#line 35560 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 231:
#line 1653 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, true);
                            (yyval).setExpr(createValueF(no_persist, makeVoidType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-5]));
                        }
#line 35569 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 232:
#line 1658 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_string, true);
                            parser->normalizeExpression((yyvsp[-2]), type_string, true);
                            (yyval).setExpr(createValueF(no_persist, makeVoidType(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-6]));
                        }
#line 35579 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 233:
#line 1664 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, true);
                            (yyval).setExpr(createValueF(no_critical, makeVoidType(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-4]));
                        }
#line 35588 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 234:
#line 1669 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-4]));
                            (yyval).setExpr(createValue(no_stored, makeVoidType(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-7]));
                        }
#line 35597 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 235:
#line 1674 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-2]));
                            (yyval).setExpr(createValue(no_stored, makeVoidType(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35606 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 236:
#line 1679 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_checkpoint, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35615 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 237:
#line 1684 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_global, makeNullType()), (yyvsp[0]));
                        }
#line 35623 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 238:
#line 1688 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_global, makeNullType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35631 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 239:
#line 1692 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            (yyval).setExpr(createValue(no_global, makeNullType(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-4]));
                        }
#line 35640 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 240:
#line 1697 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_independent, makeNullType()), (yyvsp[0]));
                        }
#line 35648 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 241:
#line 1701 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValueF(no_independent, makeNullType(), (yyvsp[-1]).getExpr(), nullptr), (yyvsp[-3]));
                        }
#line 35656 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 242:
#line 1705 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValueF(no_independent, makeNullType(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), nullptr), (yyvsp[-4]));
                        }
#line 35664 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 243:
#line 1709 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(defineAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35672 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 244:
#line 1713 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(deprecatedAtom), (yyvsp[0]));
                        }
#line 35680 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 245:
#line 1717 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(deprecatedAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35688 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 246:
#line 1721 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            HqlExprArray args;
                            args.append(*(yyvsp[-2]).getExpr());
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(sectionAtom, args), (yyvsp[-4]));
                        }
#line 35700 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 247:
#line 1729 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            (yyval).setExpr(createExprAttribute(onWarningAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 35709 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 248:
#line 1734 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(labeledAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35718 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 249:
#line 1739 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_once, makeNullType()), (yyvsp[0]));
                        }
#line 35726 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 250:
#line 1743 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_once, makeNullType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35734 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 251:
#line 1749 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(logAtom), (yyvsp[0])); }
#line 35740 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 252:
#line 1750 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(ignoreAtom), (yyvsp[0])); }
#line 35746 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 253:
#line 1751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(warningAtom), (yyvsp[0])); }
#line 35752 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 254:
#line 1752 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(errorAtom), (yyvsp[0])); }
#line 35758 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 255:
#line 1753 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(failAtom), (yyvsp[0])); }
#line 35764 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 256:
#line 1757 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr();   }
#line 35770 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 257:
#line 1758 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[0]).getExpr(), (yyvsp[0]));
                        }
#line 35778 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 259:
#line 1766 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 35786 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 263:
#line 1776 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_boolean, true);
                            (yyval).setExpr(createExprAttribute(refreshAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35795 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 264:
#line 1780 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(singleAtom), (yyvsp[0])); }
#line 35801 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 265:
#line 1781 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(multipleAtom), (yyvsp[0])); }
#line 35807 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 266:
#line 1783 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createExprAttribute(multipleAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35816 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 267:
#line 1788 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            (yyval).setExpr(createExprAttribute(labelAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35825 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 268:
#line 1795 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 35833 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 269:
#line 1799 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(storedFieldFormatAtom, args), (yyvsp[-3]));
                        }
#line 35843 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 270:
#line 1807 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 35849 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 271:
#line 1808 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).inherit((yyvsp[0])); }
#line 35855 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 273:
#line 1814 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 35863 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 274:
#line 1820 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fewAtom), (yyvsp[0])); }
#line 35869 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 275:
#line 1821 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom), (yyvsp[0])); }
#line 35875 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 276:
#line 1822 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(optAtom), (yyvsp[0])); }
#line 35881 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 277:
#line 1826 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 35887 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 278:
#line 1827 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fewAtom), (yyvsp[-1])); }
#line 35893 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 279:
#line 1828 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom), (yyvsp[-1])); }
#line 35899 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 281:
#line 1834 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[0]));
                        }
#line 35907 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 282:
#line 1840 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 35913 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 283:
#line 1842 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[0]));
                        }
#line 35921 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 285:
#line 1850 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            (yyval).setExpr(createExprAttribute(labelAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 35930 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 286:
#line 1857 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fewAtom), (yyvsp[0])); }
#line 35936 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 287:
#line 1858 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom), (yyvsp[0])); }
#line 35942 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 288:
#line 1862 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 35948 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 289:
#line 1864 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-1]));
                        }
#line 35956 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 290:
#line 1870 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(firstAtom), (yyvsp[0])); }
#line 35962 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 292:
#line 1875 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 35968 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 293:
#line 1877 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-1]));
                        }
#line 35976 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 294:
#line 1884 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(pulledAtom), (yyvsp[0]));
                        }
#line 35984 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 296:
#line 1889 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * sortlist = parser->processSortList((yyvsp[-1]), no_sortlist, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createExprAttribute(mergeAtom, sortlist), (yyvsp[-4]));
                        }
#line 35995 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 297:
#line 1899 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->closeTransform((yyvsp[0])), (yyvsp[-3]));
                            parser->leaveCompoundObject();
                        }
#line 36004 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 298:
#line 1904 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_TRANSFORM_EMPTYDEF,(yyvsp[-2]),"Empty transform definition");
                            (yyval).setExpr(parser->closeTransform((yyvsp[0])), (yyvsp[-2]));
                            parser->leaveCompoundObject();
                        }
#line 36014 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 300:
#line 1914 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-2]));
                        }
#line 36023 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 301:
#line 1919 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 36031 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 302:
#line 1923 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()), (yyvsp[-4]));
                        }
#line 36039 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 303:
#line 1927 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->closeTransform((yyvsp[-1])), (yyvsp[-4]));
                            parser->leaveCompoundObject();
                        }
#line 36048 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 304:
#line 1932 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr value = (yyvsp[-1]).getExpr();
                            IHqlExpression * record = value->queryRecord();
                            (yyval).setExpr(parser->createDefaultAssignTransform(record, value, (yyvsp[-3])), (yyvsp[-3]));
                        }
#line 36058 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 305:
#line 1938 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 36067 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 306:
#line 1943 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 36076 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 307:
#line 1948 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 36086 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 308:
#line 1958 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[0]).getExpr();
                            Owned<ITypeInfo> type = createRecordType(record);
                            parser->openTransform(type);
                            (yyval).clear((yyvsp[-2]));
                        }
#line 36097 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 309:
#line 1968 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression* flags = (yyvsp[0]).getExpr();
                            IHqlExpression* trans_expr = (yyvsp[-1]).getExpr();

                            // some fatal error happened
                            if (!trans_expr || !trans_expr->isTransform())
                            {
                                ::Release(trans_expr);
                                ::Release(flags);
                                (yyval).setNullExpr();
                            }
                            else
                                (yyval).setExpr(createComma(trans_expr, flags));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 36117 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 311:
#line 1987 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processStartTransform((yyvsp[0]));
                            (yyval).clear((yyvsp[0]));
                        }
#line 36126 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 313:
#line 1996 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->appendTransformOption((yyvsp[0]).getExpr());
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 36135 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 314:
#line 2004 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_skip, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 36143 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 317:
#line 2013 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 36151 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 318:
#line 2020 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 36159 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 325:
#line 2039 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).clear();
                        }
#line 36168 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 329:
#line 2050 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Allow IF integer to ease SAS translation
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->ensureBoolean((yyvsp[-3]));
                            OwnedHqlExpr cond = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr trueScope = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr falseScope = (yyvsp[0]).getExpr();
                            parser->processIfScope((yyvsp[-4]),cond, trueScope, falseScope);
                            (yyval).clear();
                        }
#line 36183 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 330:
#line 2065 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(queryExpression(parser->closeLeaveScope((yyvsp[0]))), (yyvsp[0]));
                        }
#line 36191 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 331:
#line 2072 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->enterScope(false); (yyval).clear(); }
#line 36197 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 332:
#line 2076 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 36203 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 333:
#line 2078 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-1])); }
#line 36209 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 334:
#line 2080 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->ensureBoolean((yyvsp[-3]));
                            //normalizeExpression($2, type_boolean, false);
                            OwnedHqlExpr map = createValue(no_mapto, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr());
                            (yyval).setExpr(createComma(map.getClear(), (yyvsp[0]).getExpr()), (yyvsp[-4]));
                        }
#line 36221 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 335:
#line 2092 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->defineSymbolProduction((yyvsp[-5]), (yyvsp[-4]), (yyvsp[-3]), &(yyvsp[-2]), &(yyvsp[-1]), (yyvsp[0]));
                            (yyval).clear((yyvsp[-5]));

                            parser->restoreTypeFromActiveTransform();
                        }
#line 36232 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 336:
#line 2102 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setDefineId(parser->createDefineId(0, (yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 36241 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 337:
#line 2110 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            ITypeInfo * type = (yyvsp[-2]).queryExprType();
                            if (!type || type->getTypeCode() != type_set)
                            {
                                IHqlExpression * arg = (yyvsp[0]).queryExpr();
                                if ((arg->getOperator() == no_list) && (arg->numChildren() == 0))
                                {
                                    (yyvsp[0]).release().setExpr(createValue(no_null));
                                }
                            }
                            parser->addAssignment((yyvsp[-2]), (yyvsp[0]));
                            (yyval).clear((yyvsp[-2]));
                        }
#line 36260 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 338:
#line 2125 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * value = (yyvsp[0]).queryExpr();
                            if (value)
                            {
                                IHqlExpression * target = (yyvsp[-2]).queryExpr();
                                if (target->isDataset())
                                {
                                    value = createDatasetFromRow(LINK(value));
                                    (yyvsp[0]).release();
                                    (yyvsp[0]).setExpr(value);
                                    parser->addAssignment((yyvsp[-2]), (yyvsp[0]));
                                }
                                else
                                    parser->addAssignall((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr(), (yyvsp[-2]));
                            }
                            else /* this happens when an error C2022 occurred */
                                (yyvsp[-2]).release();
                            (yyval).clear((yyvsp[-2]));
                        }
#line 36284 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 339:
#line 2145 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addAssignment((yyvsp[-2]), (yyvsp[0]));
                            (yyval).clear((yyvsp[-2]));
                        }
#line 36293 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 340:
#line 2150 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addAssignment((yyvsp[-2]), (yyvsp[0]));
                            (yyval).clear((yyvsp[-2]));
                        }
#line 36302 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 341:
#line 2155 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-3]).release();
                            (yyval).clear();
                        }
#line 36311 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 342:
#line 2159 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->appendTransformOption((yyvsp[0]).getExpr());
                            (yyval).clear((yyvsp[0]));
                        }
#line 36320 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 343:
#line 2168 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-1]));
                        }
#line 36328 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 344:
#line 2172 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr lhs = (yyvsp[-2]).getExpr();
                            if (lhs->isDataset())
                                parser->reportError(ERR_ASSIGN_MEMBER_DATASET, (yyvsp[-2]), "Cannot directly assign to field %s within a child dataset", str((yyvsp[0]).queryExpr()->queryName()));
                            (yyval).setExpr(parser->createSelect(lhs.getClear(), (yyvsp[0]).getExpr(), (yyvsp[0])), (yyvsp[-2]));
                        }
#line 36339 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 346:
#line 2183 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr lhs = (yyvsp[-2]).getExpr();
                            if (lhs->isDataset())
                                parser->reportError(ERR_ASSIGN_MEMBER_DATASET, (yyvsp[-2]), "Cannot directly assign to field %s within a child dataset", str((yyvsp[0]).queryExpr()->queryName()));
                            (yyval).setExpr(parser->createSelect(lhs.getClear(), (yyvsp[0]).getExpr(), (yyvsp[0])), (yyvsp[-2]));
                        }
#line 36350 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 347:
#line 2190 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            parser->reportError(ERR_ASSIGN_MEMBER_DATASET, (yyvsp[-6]), "Cannot assign to individual elements of a list or dataset");
                            parser->setDotScope((yyvsp[-4]).queryExpr());
                            // Of course this is not the way arrays are going to work,
                            // need to adjust to whatever is necessary when we implement it - YMA.
                            (yyval).setExpr(parser->createSelect((yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-4])), (yyvsp[-6]));
                            (yyvsp[-1]).release();
                        }
#line 36364 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 348:
#line 2202 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr self = parser->getSelfScope();
                            if (!self)
                                self.set(queryNullRecord());
                            parser->setDotScope(self);
                            (yyval).setExpr(getSelf(self), (yyvsp[0]));
                        }
#line 36376 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 349:
#line 2213 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[0]).getExpr();
                            parser->setDotScope(scope);
                            (yyval).setExpr(scope.getClear(), (yyvsp[0]));
                        }
#line 36386 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 350:
#line 2219 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[0]).getExpr();
                            parser->setDotScope(scope);
                            (yyval).setExpr(scope.getClear(), (yyvsp[0]));
                        }
#line 36396 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 351:
#line 2225 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[0]).getExpr();
                            parser->setDotScope(scope);
                            (yyval).setExpr(scope.getClear(), (yyvsp[0]));
                        }
#line 36406 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 352:
#line 2231 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[0]).getExpr();
                            parser->setDotScope(scope);
                            (yyval).setExpr(scope.getClear(), (yyvsp[0]));
                        }
#line 36416 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 354:
#line 2241 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            parser->reportError(ERR_ASSIGN_MEMBER_DATASET, (yyvsp[-4]), "Cannot assign to individual elements of a list or dataset");
                            (yyval).setExpr((yyvsp[-4]).getExpr(), (yyvsp[-4]));
                            (yyvsp[-1]).release();
                        }
#line 36427 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 355:
#line 2248 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_indirect, expr->getType(), LINK(expr)), (yyvsp[-3]));
                        }
#line 36436 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 356:
#line 2257 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e = (yyvsp[-1]).getExpr();
                            parser->setDotScope(e);
                            (yyval).setExpr(e, (yyvsp[-1]));
                        }
#line 36446 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 357:
#line 2262 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->getSelfDotExpr((yyvsp[-1])), (yyvsp[-1]));
                        }
#line 36454 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 358:
#line 2265 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e = (yyvsp[-1]).getExpr();
                            parser->setDotScope(e);
                            (yyval).setExpr(e, (yyvsp[-1]));
                        }
#line 36464 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 359:
#line 2270 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e = (yyvsp[-1]).getExpr();
                            parser->setDotScope(e);
                            (yyval).setExpr(e, (yyvsp[-1]));
                        }
#line 36474 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 360:
#line 2279 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e = (yyvsp[-1]).getExpr();
                            parser->setDotScope(e);
                            (yyval).setExpr(e, (yyvsp[-1]));
                        }
#line 36484 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 361:
#line 2285 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * scope = (yyvsp[-2]).getExpr();
                            IHqlExpression * e = (yyvsp[-1]).getExpr();
                            IHqlExpression * select = createSelectExpr(scope, e);
                            parser->setDotScope(select);
                            (yyval).setExpr(select, (yyvsp[-2]));
                        }
#line 36496 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 362:
#line 2293 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * scope = (yyvsp[-2]).getExpr();
                            IHqlExpression * e = (yyvsp[-1]).getExpr();
                            IHqlExpression * select = createSelectExpr(scope, e);
                            parser->setDotScope(select);
                            (yyval).setExpr(select, (yyvsp[-2]));
                        }
#line 36508 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 363:
#line 2304 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr e = (yyvsp[-1]).getExpr();
                            (yyvsp[-2]).release();
                            (yyval).setExpr(LINK(queryOriginalRecord(e)), (yyvsp[-2]));
                        }
#line 36518 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 366:
#line 2316 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-2]));
                        }
#line 36527 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 367:
#line 2321 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 36535 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 368:
#line 2325 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()), (yyvsp[-4]));
                        }
#line 36543 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 371:
#line 2338 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 36552 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 372:
#line 2343 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 36561 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 373:
#line 2351 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 36570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 374:
#line 2356 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 36579 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 377:
#line 2369 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[0]).annotateExprWithLocation();
                            (yyval).inherit((yyvsp[0]));
                        }
#line 36588 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 378:
#line 2373 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[0]).annotateExprWithLocation();
                            (yyval).inherit((yyvsp[0]));
                        }
#line 36597 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 380:
#line 2382 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processLoadXML((yyvsp[-1]), NULL);
                            // use an expr other than NULL to distinguish from error
                            (yyval).setExpr(createValue(no_loadxml, makeVoidType()), (yyvsp[-3]));
                        }
#line 36607 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 381:
#line 2388 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processLoadXML((yyvsp[-3]), &(yyvsp[-1]));
                            // use an expr other than NULL to distinguish from error
                            (yyval).setExpr(createValue(no_loadxml, makeVoidType()), (yyvsp[-5]));
                        }
#line 36617 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 382:
#line 2394 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_update, makeVoidType(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-6]));
                        }
#line 36625 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 383:
#line 2398 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processIndexBuild((yyvsp[-9]), (yyvsp[-7]), NULL, NULL, (yyvsp[-3]), (yyvsp[-2])), (yyvsp[-9]));
                            parser->processUpdateAttr((yyval));
                        }
#line 36634 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 384:
#line 2403 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processIndexBuild((yyvsp[-11]), (yyvsp[-9]), &(yyvsp[-6]), NULL, (yyvsp[-4]), (yyvsp[-3])), (yyvsp[-11]));
                            parser->processUpdateAttr((yyval));
                        }
#line 36643 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 385:
#line 2408 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processIndexBuild((yyvsp[-13]), (yyvsp[-11]), &(yyvsp[-8]), &(yyvsp[-6]), (yyvsp[-4]), (yyvsp[-3])), (yyvsp[-13]));
                            parser->processUpdateAttr((yyval));
                        }
#line 36652 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 386:
#line 2413 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createBuildIndexFromIndex((yyvsp[-4]), (yyvsp[-2]), (yyvsp[-1])), (yyvsp[-6]));
                            parser->processUpdateAttr((yyval));
                        }
#line 36661 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 387:
#line 2418 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *dataset = (yyvsp[-5]).getExpr();
                            parser->checkOutputRecord((yyvsp[-3]), true);
                            IHqlExpression *record = (yyvsp[-3]).getExpr();
                            HqlExprArray options;
                            (yyvsp[-1]).unwindCommaList(options);

                            OwnedHqlExpr select = createDatasetF(no_selectfields, dataset, record, NULL);
                            IHqlExpression * filename = options.ordinality() ? &options.item(0) : NULL;
                            if (!filename || filename->isAttribute())
                            {
                                if (queryAttribute(extendAtom, options) && !queryAttribute(namedAtom, options))
                                    parser->reportError(ERR_EXTEND_NOT_VALID, (yyvsp[-1]), "EXTEND is only valid on NAMED outputs");
                            }
                            else
                            {
                                if (queryAttribute(extendAtom, options))
                                    parser->reportError(ERR_NOLONGER_SUPPORTED,(yyvsp[-1]),"EXTEND is no longer supported on OUTPUT to file");

                                if (filename->isPure())
                                {
                                    DependenciesUsed dependencies(true);
                                    gatherDependencies(dataset, dependencies, GatherFileRead);

                                    OwnedHqlExpr normalized = getNormalizedFilename(filename);
                                    if (dependencies.tablesRead.find(*normalized) != NotFound)
                                        parser->reportError(ERR_OUTPUT_TO_INPUT, (yyvsp[-1]), "Cannot OUTPUT to a file used as an input");
                                }
                                parser->warnIfRecordPacked(select, (yyvsp[-7]));
                            }
                            IHqlExpression * sig = parser->getGpgSignature();
                            if (sig)
                                options.append(*sig);
                            HqlExprArray args;
                            args.append(*select.getClear());
                            appendArray(args, options);
                            (yyval).setExpr(createValue(no_output, makeVoidType(), args), (yyvsp[-7]));
                            parser->processUpdateAttr((yyval));
                        }
#line 36705 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 388:
#line 2458 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *dataset = (yyvsp[-7]).getExpr();
                            parser->checkOutputRecord((yyvsp[-5]), true);

                            OwnedHqlExpr pipe = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr record = (yyvsp[-5]).getExpr();
                            HqlExprArray args;
                            if (record->getOperator() == no_null)
                                args.append(*dataset);
                            else
                            {
                                IHqlExpression * arg = pipe;
                                if (arg->getOperator() == no_comma)
                                    arg = arg->queryChild(0);
                                assertex(arg->getOperator() == no_pipe);
                                arg = arg->queryChild(0);
                                OwnedHqlExpr mapped = replaceSelector(arg, dataset, queryActiveTableSelector());
                                if (mapped != arg)
                                    parser->reportError(ERR_ROWPIPE_AND_PROJECT, (yyvsp[-2]), "OUTPUT to PIPE with a projecting record doesn't currently work when the command is dependant on the current row");
                                args.append(*createDatasetF(no_selectfields, dataset, LINK(record), NULL)); //createUniqueId(), NULL));
                            }
                            pipe->unwindList(args, no_comma);
                            (yyvsp[-1]).unwindCommaList(args);
                            IHqlExpression * output = queryAttribute(outputAtom, args);
                            if (output)
                            {
                                unwindChildren(args, output);
                                args.zap(*output);
                            }
                            if (queryAttribute(csvAtom, args))
                                parser->checkValidCsvRecord((yyvsp[-7]), args.item(0).queryRecord());

                            parser->warnIfRecordPacked(&args.item(0), (yyvsp[-9]));
                            (yyval).setExpr(createValue(no_output, makeVoidType(), args), (yyvsp[-9]));
                        }
#line 36745 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 389:
#line 2494 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *dataset = (yyvsp[-3]).getExpr();
                            IHqlExpression *record = createValue(no_null);
                            OwnedHqlExpr select = createDatasetF(no_selectfields, dataset, record, NULL); //createUniqueId(), NULL);
                            OwnedHqlExpr flags = (yyvsp[-2]).getExpr();

                            if (queryAttributeInList(extendAtom, flags) && !queryAttributeInList(namedAtom, flags))
                                parser->reportError(ERR_EXTEND_NOT_VALID, (yyvsp[-2]), "EXTEND is only valid on NAMED outputs");

                            HqlExprArray args;
                            args.append(*select.getClear());
                            if (flags)
                                flags->unwindList(args, no_comma);
                            (yyval).setExpr(createValue(no_output, makeVoidType(), args), (yyvsp[-5]));
                            parser->processUpdateAttr((yyval));
                        }
#line 36766 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 390:
#line 2511 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            OwnedHqlExpr flags = (yyvsp[-1]).getExpr();
                            if (queryAttributeInList(extendAtom, flags))
                                parser->reportError(ERR_EXTEND_NOT_VALID, (yyvsp[-1]), "EXTEND is only valid on a dataset");
                            HqlExprArray args;
                            args.append(*(yyvsp[-2]).getExpr());
                            if (flags)
                                flags->unwindList(args, no_comma);
                            (yyval).setExpr(createValue(no_outputscalar, makeVoidType(), args), (yyvsp[-4]));
                        }
#line 36782 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 391:
#line 2523 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            OwnedHqlExpr flags = (yyvsp[-1]).getExpr();
                            if (queryAttributeInList(extendAtom, flags))
                                parser->reportError(ERR_EXTEND_NOT_VALID, (yyvsp[-1]), "EXTEND is only valid on a dataset");
                            HqlExprArray args;
                            args.append(*createDataset(no_datasetfromdictionary, (yyvsp[-2]).getExpr()));
                            if (flags)
                                flags->unwindList(args, no_comma);
                            (yyval).setExpr(createValue(no_output, makeVoidType(), args), (yyvsp[-4]));
                            parser->processUpdateAttr((yyval));
                        }
#line 36799 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 392:
#line 2536 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr flags = (yyvsp[-1]).getExpr();
                            if (queryAttributeInList(extendAtom, flags))
                                parser->reportError(ERR_EXTEND_NOT_VALID, (yyvsp[-1]), "EXTEND is only valid on a dataset");
                            HqlExprArray args;
                            args.append(*(yyvsp[-2]).getExpr());
                            if (flags)
                                flags->unwindList(args, no_comma);
                            (yyval).setExpr(createValue(no_outputscalar, makeVoidType(), args), (yyvsp[-4]));
                        }
#line 36814 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 393:
#line 2547 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr actions = (yyvsp[-2]).getExpr();
                            HqlExprArray args;
                            args.append(*(yyvsp[-4]).getExpr());
                            actions->unwindList(args, no_comma);
                            (yyval).setExpr(createValue(no_apply, makeVoidType(), args), (yyvsp[-6]));
                        }
#line 36826 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 394:
#line 2555 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_if, makeVoidType(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-7]));
                        }
#line 36834 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 395:
#line 2559 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_if, makeVoidType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 36842 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 396:
#line 2563 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_if, makeVoidType(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-7]));
                        }
#line 36850 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 397:
#line 2567 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_if, makeVoidType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 36858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 398:
#line 2571 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-3]).unwindCommaList(args);
                            args.append(*(yyvsp[-1]).getExpr());
                            OwnedHqlExpr expr = createValue(no_map, makeVoidType(), args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-5]));
                        }
#line 36870 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 399:
#line 2579 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            args.append(*createValue(no_null, makeVoidType()));
                            OwnedHqlExpr expr = createValue(no_map, makeVoidType(), args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-3]));
                        }
#line 36882 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 400:
#line 2587 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]));
                            HqlExprArray args;
                            parser->endList(args);
                            parser->checkCaseForDuplicates(args, (yyvsp[-3]));
                            args.add(*(yyvsp[-6]).getExpr(),0);
                            args.append(*(yyvsp[-1]).getExpr());
                            OwnedHqlExpr expr = createValue(no_case, makeVoidType(), args);
                            (yyval).setExpr(foldConstantCaseExpr(expr), (yyvsp[-8]));
                        }
#line 36897 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 401:
#line 2598 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]));
                            HqlExprArray args;
                            parser->endList(args);
                            parser->checkCaseForDuplicates(args, (yyvsp[-1]));
                            args.add(*(yyvsp[-4]).getExpr(),0);
                            args.append(*createValue(no_null, makeVoidType()));
                            OwnedHqlExpr expr = createValue(no_case, makeVoidType(), args);
                            (yyval).setExpr(foldConstantCaseExpr(expr), (yyvsp[-6]));
                        }
#line 36912 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 402:
#line 2609 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]));
                            // change error to warning.
                            parser->reportWarning(CategoryUnusual, WRN_CASENOCONDITION, (yyvsp[-6]).pos, "CASE does not have any conditions");
                            HqlExprArray list;
                            parser->endList(list);
                            ::Release((yyvsp[-4]).getExpr());
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-6]));
                        }
#line 36926 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 403:
#line 2619 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_wait, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 36934 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 404:
#line 2623 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_wait, makeVoidType(), (yyvsp[-6]).getExpr(), (yyvsp[-2]).getExpr()), (yyvsp[-8]));
                        }
#line 36942 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 405:
#line 2627 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            OwnedHqlExpr event = createValue(no_event, makeEventType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr());
                            (yyval).setExpr(createValue(no_notify, makeVoidType(), event.getClear()), (yyvsp[-5]));
                        }
#line 36953 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 406:
#line 2634 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_string, false);
                            parser->normalizeExpression((yyvsp[-3]), type_string, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            OwnedHqlExpr event = createValue(no_event, makeEventType(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr());
                            (yyval).setExpr(createValue(no_notify, makeVoidType(), event.getClear(), (yyvsp[-1]).getExpr()), (yyvsp[-7]));
                        }
#line 36965 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 407:
#line 2642 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_notify, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 36973 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 408:
#line 2646 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_notify, makeVoidType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 36982 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 409:
#line 2651 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_nofold, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 36990 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 410:
#line 2655 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_nocombine, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 36998 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 411:
#line 2659 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_nothor, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37006 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 413:
#line 2664 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createValue(no_sequential, makeVoidType(), actions), (yyvsp[-5]));
                        }
#line 37016 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 414:
#line 2670 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createValue(no_parallel, makeVoidType(), actions), (yyvsp[-5]));
                        }
#line 37026 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 415:
#line 2676 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createValue(no_orderedactionlist, makeVoidType(), actions), (yyvsp[-5]));
                        }
#line 37036 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 416:
#line 2682 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-3]), type_stringorunicode, false);
                            parser->checkSoapRecord((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_soapcall, makeVoidType(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-7]));
                        }
#line 37047 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 417:
#line 2689 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-5]), type_stringorunicode, false);
                            parser->checkSoapRecord((yyvsp[-3]));
                            (yyval).setExpr(createValueF(no_soapcall, makeVoidType(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-9]));
                        }
#line 37058 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 418:
#line 2696 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-5]), type_stringorunicode, false);
                            (yyval).setExpr(createValue(no_newsoapcall, makeVoidType(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-9]));
                        }
#line 37068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 419:
#line 2702 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-7]), type_stringorunicode, false);
                            (yyval).setExpr(createValueF(no_newsoapcall, makeVoidType(), (yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-11]));
                        }
#line 37078 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 420:
#line 2708 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-5]), type_stringorunicode, false);
                            parser->checkSoapRecord((yyvsp[-3]));
                            (yyval).setExpr(createValueF(no_soapaction_ds, makeVoidType(), (yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[0]).getExpr(), NULL), (yyvsp[-11]));
                        }
#line 37089 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 421:
#line 2715 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-7]), type_stringorunicode, false);
                            parser->checkSoapRecord((yyvsp[-5]));
                            (yyval).setExpr(createValueF(no_soapaction_ds, makeVoidType(), (yyvsp[-11]).getExpr(), (yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[0]).getExpr(), NULL), (yyvsp[-13]));
                        }
#line 37100 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 422:
#line 2722 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-7]), type_stringorunicode, false);
                            (yyval).setExpr(createValueF(no_newsoapaction_ds, makeVoidType(), (yyvsp[-11]).getExpr(), (yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[0]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-13]));
                        }
#line 37111 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 423:
#line 2729 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-11]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-9]), type_stringorunicode, false);
                            (yyval).setExpr(createValueF(no_newsoapaction_ds, makeVoidType(), (yyvsp[-13]).getExpr(), (yyvsp[-11]).getExpr(), (yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[0]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-15]));
                        }
#line 37122 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 424:
#line 2736 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (!isKey((yyvsp[-6]).queryExpr()))
                                parser->reportError(ERR_EXPECTED_INDEX,(yyvsp[-6]),"Expected an index");
                            if (!isKey((yyvsp[-4]).queryExpr()))
                                parser->reportError(ERR_EXPECTED_INDEX,(yyvsp[-4]),"Expected an index");
                            if (!recordTypesMatch((yyvsp[-6]).queryExpr(), (yyvsp[-4]).queryExpr()))
                                parser->reportError(ERR_TYPEMISMATCH_RECORD, (yyvsp[-5]), "Indexes must have the same structure");
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);

                            OwnedHqlExpr options = createComma((yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr());
                            parser->saveDiskAccessInformation((yyvsp[-8]), options);
                            (yyval).setExpr(createValueFromCommaList(no_keydiff, makeVoidType(), options.getClear()));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 37141 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 425:
#line 2751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (!isKey((yyvsp[-6]).queryExpr()))
                                parser->reportError(ERR_EXPECTED_INDEX,(yyvsp[-6]),"Expected an index");
                            parser->normalizeExpression((yyvsp[-4]), type_string, false);
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            OwnedHqlExpr options = createComma((yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr());

                            parser->saveDiskAccessInformation((yyvsp[-8]), options);
                            (yyval).setExpr(createValueFromCommaList(no_keypatch, makeVoidType(), options.getClear()));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 37157 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 426:
#line 2763 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_evaluate_stmt, makeVoidType(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37167 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 427:
#line 2769 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_evaluate_stmt, makeVoidType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37175 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 428:
#line 2773 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[-1]));
                        }
#line 37183 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 429:
#line 2777 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr abstract = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr concrete = parser->checkConcreteModule((yyvsp[-1]), abstract);
                            (yyval).setExpr(parser->createEvaluateOutputModule((yyvsp[-1]), concrete, concrete, no_evaluate_stmt, NULL), (yyvsp[-3]));
                        }
#line 37193 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 430:
#line 2783 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr abstract = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr concrete = parser->checkConcreteModule((yyvsp[-3]), abstract);
                            (yyval).setExpr(parser->createEvaluateOutputModule((yyvsp[-3]), concrete, concrete, no_evaluate_stmt, (yyvsp[-1]).getId()), (yyvsp[-5]));
                        }
#line 37203 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 431:
#line 2789 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_distribution, makeVoidType(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr()), (yyvsp[-7]));
                        }
#line 37211 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 432:
#line 2793 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * dataset = (yyvsp[-6]).getExpr();
                            IHqlExpression * fields = parser->processSortList((yyvsp[-3]), no_sortlist, dataset, sortItems, NULL, NULL);
                            (yyval).setExpr(createValue(no_distribution, makeVoidType(), dataset, fields, (yyvsp[-2]).getExpr()));
                        }
#line 37223 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 434:
#line 2802 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37232 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 435:
#line 2807 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            if (isBlankString((yyvsp[-1]).queryExpr()))
                            {
                                (yyvsp[-1]).release();
                                (yyval).setExpr((yyvsp[-3]).getExpr());
                            }
                            else
                                (yyval).setExpr(createValueF(no_cluster, makeVoidType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 37248 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 436:
#line 2819 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr abstract = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr concrete = parser->checkConcreteModule((yyvsp[-1]), abstract);
                            (yyval).setExpr(parser->createEvaluateOutputModule((yyvsp[-1]), concrete, concrete, no_output, NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37259 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 437:
#line 2826 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr abstract = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr concrete = parser->checkConcreteModule((yyvsp[-3]), abstract);
                            OwnedHqlExpr iface = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->createEvaluateOutputModule((yyvsp[-3]), concrete, iface, no_output, NULL));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 37271 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 438:
#line 2834 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createValue(no_allnodes, makeVoidType(), createCompound(actions)));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 37282 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 439:
#line 2841 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createActionList(no_orderedactionlist, actions), (yyvsp[-3]));
                        }
#line 37292 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 440:
#line 2847 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_EXPECTED, (yyvsp[-1]), "OUTPUT cannot be applied to an action");
                            (yyval).inherit((yyvsp[-1]));
                        }
#line 37301 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 441:
#line 2857 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_fail, makeVoidType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 37312 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 442:
#line 2864 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            parser->checkIntegerOrString((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_fail, makeVoidType(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37323 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 443:
#line 2871 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_fail, makeVoidType()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 37332 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 444:
#line 2875 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_fail, makeVoidType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37341 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 445:
#line 2880 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 37350 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 446:
#line 2885 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr options = (yyvsp[-1]).getExpr();
                            if (options)
                                (yyval).setExpr(createValueF(no_executewhen, makeVoidType(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), options.getClear(), NULL), (yyvsp[-6]));
                            else
                                (yyval).setExpr(createCompound((yyvsp[-2]).getExpr(), (yyvsp[-4]).getExpr()), (yyvsp[-6]));
                        }
#line 37362 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 448:
#line 2897 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 37371 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 449:
#line 2905 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_boolean, false);
                            (yyval).setExpr(parser->createAssert((yyvsp[-2]), NULL, (yyvsp[-1])));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 37381 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 450:
#line 2911 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_boolean, false);
                            parser->normalizeExpression((yyvsp[-2]));
                            (yyval).setExpr(parser->createAssert((yyvsp[-4]), &(yyvsp[-2]), (yyvsp[-1])));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 37392 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 451:
#line 2920 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 37398 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 452:
#line 2922 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(failAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37407 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 453:
#line 2927 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(constAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37416 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 454:
#line 2934 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setIndexScope((yyvsp[0]).queryExpr()); (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 37422 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 455:
#line 2938 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); (yyval).clearPosition(); }
#line 37428 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 456:
#line 2939 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr((yyvsp[0]).getExpr(), (yyvsp[-1])); }
#line 37434 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 458:
#line 2945 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 37443 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 459:
#line 2952 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(overwriteAtom)); (yyval).setPosition((yyvsp[0])); }
#line 37449 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 460:
#line 2953 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(noOverwriteAtom)); (yyval).setPosition((yyvsp[0])); }
#line 37455 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 461:
#line 2954 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(backupAtom)); (yyval).setPosition((yyvsp[0])); }
#line 37461 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 462:
#line 2956 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(namedAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37471 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 463:
#line 2962 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportWarning(CategoryDeprecated, ERR_DEPRECATED, (yyvsp[-3]).pos, "DATASET attribute on index is deprecated, and has no effect");
                            OwnedHqlExpr ds = (yyvsp[-1]).getExpr();
                            if (ds->getOperator() != no_table)
                                parser->reportError(ERR_EXPECTED_DATASET, (yyvsp[-1]), "Expected parameter to be a DATASET definition");
                            (yyval).setExpr(NULL, (yyvsp[-3]));
                        }
#line 37483 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 465:
#line 2970 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(sortedAtom)); (yyval).setPosition((yyvsp[0])); }
#line 37489 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 466:
#line 2972 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Ugly, but special case DISTRIBUTE '(' dataSet ')'
                            OwnedHqlExpr ds = (yyvsp[0]).getExpr();
                            if (ds->getOperator() == no_distribute)
                            {
                                IHqlExpression * arg = ds->queryChild(0);
                                if (!isKey(arg))
                                    parser->reportError(ERR_EXPECTED_INDEX,(yyvsp[0]),"Expected an index");
                                ds.setown(createValue(no_distributer, makeNullType(), LINK(arg)));
                            }
                            (yyval).setExpr(ds.getClear(), (yyvsp[0]));
                        }
#line 37506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 467:
#line 2984 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(mergeAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37515 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 469:
#line 2990 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createExprAttribute(thresholdAtom, (yyvsp[-1]).getExpr()));
                        }
#line 37524 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 470:
#line 2994 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(fewAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37533 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 471:
#line 2998 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(persistAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37542 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 472:
#line 3002 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma(createAttribute(updateAtom), createAttribute(overwriteAtom)));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37551 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 476:
#line 3009 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma(createAttribute(noRootAtom), createLocalAttribute()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37560 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 477:
#line 3013 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(sort_KeyedAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 37569 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 478:
#line 3017 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(sort_AllAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 37578 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 480:
#line 3023 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(widthAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37587 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 481:
#line 3028 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(setAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 37598 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 482:
#line 3034 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma(createAttribute(noRootAtom), createLocalAttribute()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37607 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 483:
#line 3039 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createComma(createAttribute(noRootAtom), createExprAttribute(distributedAtom, (yyvsp[-1]).getExpr()), createLocalAttribute()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37617 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 484:
#line 3045 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(compressedAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37626 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 485:
#line 3050 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(dedupAtom), (yyvsp[0]));
                        }
#line 37634 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 486:
#line 3054 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(filepositionAtom, (yyvsp[0]).getExpr()), (yyvsp[-1]));
                        }
#line 37642 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 487:
#line 3058 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(maxLengthAtom), (yyvsp[0]));
                        }
#line 37650 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 488:
#line 3062 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37659 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 490:
#line 3070 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createLocalAttribute());
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37668 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 491:
#line 3074 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(noLocalAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37677 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 492:
#line 3082 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * bloomList = parser->processSortList((yyvsp[-3]), no_hash, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createExprAttribute(bloomAtom, bloomList, (yyvsp[-2]).getExpr()));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 37689 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 493:
#line 3093 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * hashList = parser->processSortList((yyvsp[-2]), no_hash, NULL, sortItems, NULL, NULL);
                            // MORE - we need to sort the hashList by fieldno, since we are only storing a bitmap...
                            // Or give an error if they are specified out of order, I suppose.
                            IHqlExpression *hashFunc = createValue(no_hash64, makeIntType(8, false), parser->castIndexTypes(hashList), createAttribute(internalAtom));
                            OwnedHqlExpr distr = createComma(createAttribute(noRootAtom), createExprAttribute(distributedAtom, hashFunc), createLocalAttribute());
                            OwnedHqlExpr hash = createExprAttribute(hashAtom, hashList);
                            (yyval).setExpr(createComma(distr.getClear(), hash.getClear())); 
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 37706 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 494:
#line 3108 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushIndexScope();
                            (yyval).inherit((yyvsp[0]));
                        }
#line 37715 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 495:
#line 3115 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->clearIndexScope(); }
#line 37721 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 496:
#line 3119 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 37727 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 497:
#line 3121 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37736 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 498:
#line 3128 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(limitAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37745 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 499:
#line 3132 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createExprAttribute(probabilityAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37754 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 500:
#line 3139 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 37760 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 501:
#line 3141 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37769 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 505:
#line 3155 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(hintAtom, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37780 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 507:
#line 3166 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 37788 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 508:
#line 3173 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(lower((yyvsp[0]).getId())));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37797 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 509:
#line 3178 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            parser->endList(args);
                            (yyval).setExpr(createExprAttribute(lower((yyvsp[-4]).getId()), args));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 37808 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 511:
#line 3188 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setId(outputId); }
#line 37814 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 512:
#line 3193 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 37823 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 513:
#line 3198 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 37832 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 514:
#line 3206 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 37841 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 515:
#line 3211 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).setExpr(createValue(no_range, makeNullType(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 37851 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 516:
#line 3217 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).setExpr(createValue(no_rangeto, makeNullType(), (yyvsp[0]).getExpr()));
                        }
#line 37860 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 517:
#line 3221 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_rangefrom, makeNullType(), (yyvsp[-1]).getExpr()));
                        }
#line 37869 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 518:
#line 3226 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(lower((yyvsp[0]).getId())), (yyvsp[0]));
                        }
#line 37877 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 519:
#line 3233 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(orderedAtom, createConstant(false)), (yyvsp[0]));
                        }
#line 37885 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 520:
#line 3237 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(orderedAtom), (yyvsp[0]));
                        }
#line 37893 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 521:
#line 3241 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_boolean, true);
                            (yyval).setExpr(createExprAttribute(orderedAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37902 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 522:
#line 3246 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(parallelAtom), (yyvsp[0]));
                        }
#line 37910 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 523:
#line 3250 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createExprAttribute(parallelAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37919 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 524:
#line 3255 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(stableAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37928 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 525:
#line 3260 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(stableAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37938 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 526:
#line 3266 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(unstableAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37947 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 527:
#line 3271 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(unstableAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 37957 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 528:
#line 3277 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            (yyval).setExpr(createExprAttribute(algorithmAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 37966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 529:
#line 3284 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 37972 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 530:
#line 3286 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37981 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 531:
#line 3291 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 37990 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 532:
#line 3299 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma(createAttribute(pullAtom),createExprAttribute(orderedAtom)), (yyvsp[0]));
                        }
#line 37998 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 533:
#line 3305 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(expireAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38007 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 534:
#line 3310 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createExprAttribute(expireAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38017 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 535:
#line 3318 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 38023 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 536:
#line 3319 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).inherit((yyvsp[0])); }
#line 38029 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 538:
#line 3325 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2])); }
#line 38035 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 539:
#line 3329 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(distributedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38044 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 541:
#line 3337 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); (yyval).clearPosition(); }
#line 38050 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 542:
#line 3339 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr((yyvsp[0]).getExpr()); (yyval).setPosition((yyvsp[-1])); }
#line 38056 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 544:
#line 3345 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); (yyval).setPosition((yyvsp[-2])); }
#line 38062 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 545:
#line 3349 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(sortedAtom)); (yyval).setPosition((yyvsp[0])); }
#line 38068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 546:
#line 3350 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(steppedAtom)); (yyval).setPosition((yyvsp[0])); }
#line 38074 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 547:
#line 3352 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(steppedAtom, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38085 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 549:
#line 3359 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(preloadAtom)); (yyval).setPosition((yyvsp[0])); }
#line 38091 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 550:
#line 3360 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(optAtom)); (yyval).setPosition((yyvsp[0])); }
#line 38097 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 551:
#line 3361 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(sort_KeyedAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 38106 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 552:
#line 3365 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(sort_AllAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 38115 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 553:
#line 3369 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(distributedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38124 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 554:
#line 3373 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(distributedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38133 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 555:
#line 3378 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(distributedAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38143 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 556:
#line 3384 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(fixedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38152 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 557:
#line 3389 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(compressedAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38161 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 558:
#line 3394 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(dynamicAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38170 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 559:
#line 3399 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(filepositionAtom, (yyvsp[0]).getExpr()), (yyvsp[-1]));
                        }
#line 38178 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 560:
#line 3403 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(maxLengthAtom), (yyvsp[0]));
                        }
#line 38186 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 561:
#line 3407 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 38195 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 565:
#line 3417 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(firstAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38204 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 566:
#line 3422 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(lzwAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38213 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 567:
#line 3427 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(rowAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38222 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 568:
#line 3434 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); (yyval).clearPosition(); }
#line 38228 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 569:
#line 3435 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr((yyvsp[0]).getExpr()); (yyval).setPosition((yyvsp[-1])); }
#line 38234 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 571:
#line 3441 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); (yyval).setPosition((yyvsp[-2])); }
#line 38240 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 572:
#line 3445 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(extendAtom));
                        }
#line 38248 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 573:
#line 3448 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(csvAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38257 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 574:
#line 3453 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(csvAtom, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38268 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 575:
#line 3459 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(compressedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38277 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 576:
#line 3463 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(__compressed__Atom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38286 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 577:
#line 3467 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(groupedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38295 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 578:
#line 3471 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(overwriteAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38304 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 579:
#line 3475 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(noOverwriteAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38313 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 580:
#line 3479 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(backupAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38322 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 581:
#line 3483 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(persistAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38331 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 582:
#line 3487 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(xmlAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38340 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 583:
#line 3492 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(xmlAtom, args), (yyvsp[-3]));
                        }
#line 38350 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 584:
#line 3497 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(jsonAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38359 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 585:
#line 3502 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(jsonAtom, args), (yyvsp[-3]));
                        }
#line 38369 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 586:
#line 3507 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma(createAttribute(updateAtom), createAttribute(overwriteAtom)), (yyvsp[0]));
                        }
#line 38377 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 588:
#line 3512 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_data, false);
                            (yyval).setExpr(createExprAttribute(encryptAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38387 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 590:
#line 3519 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(widthAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 38396 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 592:
#line 3525 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //$$.setExpr(createAttribute(jobOwnedAtom), $1);
                            (yyval).setExpr(createAttribute(ownedAtom), (yyvsp[0]));
                        }
#line 38405 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 593:
#line 3530 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Careful with dynamic...
                            if (((yyvsp[0]).getOperator() != no_comma) && !(yyvsp[0]).queryExpr()->isAttribute())
                                parser->normalizeExpression((yyvsp[0]), type_string, false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 38416 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 594:
#line 3537 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(firstAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38426 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 595:
#line 3542 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(diskAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38435 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 596:
#line 3547 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(namedAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38445 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 597:
#line 3552 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(workunitAtom));              // need a better keyword, but WORKUNIT is no good
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38454 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 598:
#line 3556 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(noXpathAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38463 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 600:
#line 3565 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); (yyval).setPosition((yyvsp[-2])); }
#line 38469 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 601:
#line 3570 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            if ((yyvsp[-1]).queryExpr())
                                parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(headingAtom, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 38481 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 602:
#line 3578 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            (yyval).setExpr(createExprAttribute(separatorAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38491 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 603:
#line 3584 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE: Really type_utf8 - and in lots of other places!
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            parser->validateXPath((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(xpathAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38503 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 604:
#line 3591 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(groupAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38512 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 605:
#line 3596 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(mergeAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38522 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 606:
#line 3602 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(retryAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38532 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 607:
#line 3608 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createExprAttribute(timeoutAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38542 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 608:
#line 3614 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createExprAttribute(timeLimitAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38552 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 610:
#line 3621 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(logAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38561 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 611:
#line 3625 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(trimAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 612:
#line 3630 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(soapActionAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38580 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 613:
#line 3636 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            if ((yyvsp[-1]).queryExpr())
                                parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(httpHeaderAtom, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 38592 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 614:
#line 3645 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            if ((yyvsp[-1]).queryExpr())
                                parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(proxyAddressAtom, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 38604 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 615:
#line 3654 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(literalAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38613 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 616:
#line 3660 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(encodingAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38622 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 617:
#line 3666 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(namespaceAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38632 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 618:
#line 3672 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(namespaceAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 38643 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 619:
#line 3679 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(responseAtom, createAttribute(noTrimAtom)), (yyvsp[-3]));
                        }
#line 38651 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 621:
#line 3684 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(logAtom, createAttribute(minAtom)), (yyvsp[-3]));
                        }
#line 38659 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 622:
#line 3688 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(logAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 38668 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 623:
#line 3696 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(onFailAtom, createValue(no_skip, makeVoidType())));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38677 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 624:
#line 3701 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(onFailAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38686 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 625:
#line 3709 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(clusterAtom, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38697 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 626:
#line 3719 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 38706 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 627:
#line 3724 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 38716 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 628:
#line 3733 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 38725 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 629:
#line 3738 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 38735 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 630:
#line 3746 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); (yyval).clearPosition(); }
#line 38741 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 631:
#line 3747 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[0]).getExpr());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 38750 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 633:
#line 3756 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 38759 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 634:
#line 3763 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(allAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38768 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 635:
#line 3768 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_stringorunicode, true);
                            parser->normalizeExpression((yyvsp[-1]), type_stringorunicode, true);
                            (yyval).setExpr(createExprAttribute(xmlnsAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 38779 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 636:
#line 3775 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createAttribute(firstAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38789 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 637:
#line 3780 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(diskAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38798 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 638:
#line 3785 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(namedAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38808 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 639:
#line 3790 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(workunitAtom));              // need a better keyword, but WORKUNIT is no good
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38817 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 640:
#line 3794 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(extendAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38826 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 641:
#line 3798 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(overwriteAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38835 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 642:
#line 3802 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(noOverwriteAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38844 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 643:
#line 3806 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma(createAttribute(updateAtom), createAttribute(overwriteAtom)));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38853 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 644:
#line 3810 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(noXpathAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38862 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 646:
#line 3816 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(maxSizeAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 38872 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 647:
#line 3824 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(NULL); }
#line 38878 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 648:
#line 3826 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 38886 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 649:
#line 3832 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(trimAtom), (yyvsp[0]));
                        }
#line 38894 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 650:
#line 3836 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(onFailAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 38902 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 652:
#line 3844 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 38911 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 653:
#line 3852 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createExprAttribute(beforeAtom, createActionList(actions)));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 38922 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 654:
#line 3859 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createExprAttribute(afterAtom, createActionList(actions)));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 38933 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 656:
#line 3869 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); (yyval).clearPosition(); }
#line 38939 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 657:
#line 3871 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 38948 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 658:
#line 3878 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(overwriteAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38957 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 659:
#line 3882 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(noOverwriteAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 38966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 663:
#line 3892 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_null));
                            (yyval).clearPosition();
                        }
#line 38975 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 664:
#line 3899 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setInt(1);
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 38984 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 665:
#line 3903 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setInt(0);
                            (yyval).clearPosition();
                        }
#line 38993 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 667:
#line 3912 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 39003 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 668:
#line 3918 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 39011 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 669:
#line 3922 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 39020 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 670:
#line 3927 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 39029 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 671:
#line 3932 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 39039 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 672:
#line 3943 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_event, makeEventType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 39050 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 673:
#line 3950 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true);
                            (yyval).setExpr(createValue(no_event, makeEventType(), createConstant("CRON"), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 39060 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 675:
#line 3958 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 39070 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 676:
#line 3964 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 39078 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 677:
#line 3968 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 39087 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 678:
#line 3973 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 39096 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 680:
#line 3981 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, true);
                            (yyval).setExpr(createValue(no_event, makeEventType(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 39106 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 681:
#line 3989 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setParametered(true); (yyval).inherit((yyvsp[0])); }
#line 39112 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 682:
#line 3990 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setParametered(false); (yyval).setNullExpr(); }
#line 39118 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 683:
#line 3994 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setParametered(true); (yyval).inherit((yyvsp[0])); }
#line 39124 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 684:
#line 3999 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).inherit((yyvsp[0])); }
#line 39130 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 685:
#line 4001 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).inherit((yyvsp[0])); }
#line 39136 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 690:
#line 4019 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 39145 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 691:
#line 4024 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 39154 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 692:
#line 4031 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(constAtom), (yyvsp[0])); }
#line 39160 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 693:
#line 4032 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(noConstAtom), (yyvsp[0])); }
#line 39166 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 694:
#line 4034 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(assertConstAtom), (yyvsp[-1])); }
#line 39172 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 695:
#line 4035 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->setTemplateAttribute();
                            (yyval).setExpr(createAttribute(fieldAtom), (yyvsp[0]));
                        }
#line 39181 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 696:
#line 4039 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->setTemplateAttribute();
                            (yyval).setExpr(createAttribute(fieldsAtom), (yyvsp[0]));
                        }
#line 39190 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 697:
#line 4043 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(optAtom), (yyvsp[0])); }
#line 39196 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 698:
#line 4044 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(outAtom), (yyvsp[0])); }
#line 39202 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 699:
#line 4050 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            (yyval).clear(); 
                            parser->addParameter((yyvsp[-2]), (yyvsp[-1]).getId(), (yyvsp[-2]).getType(), (yyvsp[0]).getExpr());
                        }
#line 39211 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 700:
#line 4055 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            (yyval).clear();
                            parser->addParameter((yyvsp[-2]), (yyvsp[-1]).getId(), (yyvsp[-2]).getType(), (yyvsp[0]).getExpr());
                        }
#line 39220 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 701:
#line 4060 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                           (yyval).clear();
                           parser->addListElement(createAttribute(noTypeAtom));
                           parser->addParameter((yyvsp[-1]), (yyvsp[-1]).getId(), LINK(parser->defaultIntegralType), (yyvsp[0]).getExpr());
                        }
#line 39230 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 702:
#line 4066 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                           //So that new action format doesn't break existing code.
                           (yyval).clear();
                           parser->addListElement(createAttribute(noTypeAtom));
                           OwnedHqlExpr func = (yyvsp[-1]).getExpr();
                           parser->addParameter((yyvsp[-1]), func->queryId(), LINK(parser->defaultIntegralType), (yyvsp[0]).getExpr());
                        }
#line 39242 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 703:
#line 4074 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear();
                            parser->addParameter((yyvsp[-2]), (yyvsp[0]).getId(), makeTableType(makeRowType(queryNullRecord()->getType())), NULL);
                        }
#line 39251 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 704:
#line 4079 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear();
                            parser->setTemplateAttribute();
                            parser->addParameter((yyvsp[-2]), (yyvsp[-1]).getId(), makeAnyType(), (yyvsp[0]).getExpr());
                        }
#line 39261 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 705:
#line 4085 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear();
                            parser->addFunctionParameter((yyvsp[-3]), (yyvsp[-2]).getId(), (yyvsp[-3]).getType(), (yyvsp[0]).getExpr());
                        }
#line 39270 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 706:
#line 4090 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear();
                            parser->addFunctionParameter((yyvsp[-3]), (yyvsp[-2]).getId(), (yyvsp[-3]).getType(), (yyvsp[0]).getExpr());
                        }
#line 39279 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 707:
#line 4096 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear();
                            parser->addFunctionProtoParameter((yyvsp[-2]), (yyvsp[-1]).getId(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr());
                        }
#line 39288 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 710:
#line 4108 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->enterScope(true); 
                            parser->setParametered(true); 
                            (yyval).clear(); 
                        }
#line 39298 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 711:
#line 4117 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0])); 
                        }
#line 39307 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 712:
#line 4121 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 39313 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 713:
#line 4125 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 39319 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 714:
#line 4126 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 39325 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 715:
#line 4130 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 39331 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 716:
#line 4131 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(volatileAtom), (yyvsp[0])); }
#line 39337 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 717:
#line 4136 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->leaveService((yyvsp[0])), (yyvsp[-2]));
                        }
#line 39345 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 718:
#line 4140 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->leaveService((yyvsp[0])), (yyvsp[-1]));
                        }
#line 39353 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 719:
#line 4147 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->enterService((yyvsp[0]));
                            (yyval).clear();
                        }
#line 39362 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 722:
#line 4160 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-4]));
                            IIdAtom * name = (yyvsp[-3]).getId();
                            OwnedITypeInfo type = (yyvsp[-4]).getType();
                            OwnedHqlExpr attrs = (yyvsp[-1]).getExpr();
                            parser->processServiceFunction((yyvsp[-3]), name, attrs, type);
                        }
#line 39374 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 723:
#line 4168 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-3]));
                            IIdAtom * name = (yyvsp[-3]).getId();
                            OwnedITypeInfo type = makeVoidType();
                            OwnedHqlExpr attrs = (yyvsp[-1]).getExpr();
                            parser->processServiceFunction((yyvsp[-3]), name, attrs, type);
                        }
#line 39386 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 724:
#line 4178 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 39392 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 725:
#line 4179 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 39398 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 727:
#line 4185 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));    }
#line 39404 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 728:
#line 4190 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportWarning(CategoryDeprecated, SeverityError, WRN_OBSOLETED_SYNTAX,(yyvsp[-2]).pos,"Syntax obsoleted; use alternative: id = '<string constant>'");
                            (yyval).setExpr(createAttribute(lower((yyvsp[-2]).getId()), createConstant(str((yyvsp[0]).getId()))));
                        }
#line 39413 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 729:
#line 4195 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //NOTE %prec is there to prevent a s/r error from the "SERVICE : attrib" production
                            (yyval).setExpr(createExprAttribute(lower((yyvsp[-2]).getId()), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 39422 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 730:
#line 4200 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(lower((yyvsp[0]).getId())));  }
#line 39428 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 731:
#line 4202 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(lower((yyvsp[-3]).getId()), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 39436 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 732:
#line 4206 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(lower((yyvsp[-5]).getId()), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 39444 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 733:
#line 4213 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeConstantModifier((yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 39453 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 740:
#line 4224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[0]).getExpr();
//                          $$.setType(makeOriginalModifier(makeRowType(expr->getType()), LINK(expr)));
                            (yyval).setType(makeRowType(expr->getType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 39464 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 742:
#line 4234 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            // NOTE - this reduction happens as soon as the GOESTO is seen,
                            // so it ensures that the following fields go into the payload record def
                            (yyval).setExpr(parser->endRecordDef());
                            parser->beginRecord();
                        }
#line 39475 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 744:
#line 4245 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[0]).getExpr();
                            parser->checkRecordIsValid((yyvsp[-3]), record);
                            (yyval).setExpr(record.getClear(), (yyvsp[-3]));
                        }
#line 39485 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 745:
#line 4252 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr payload = (yyvsp[0]).getExpr();
                            parser->mergeDictionaryPayload(record, payload, (yyvsp[-3]));
                            (yyval).setExpr(record.getClear(), (yyvsp[-3]));
                        }
#line 39496 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 746:
#line 4260 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[0]).getExpr();
                            parser->checkRecordIsValid((yyvsp[-4]), record);
                            (yyval).setExpr(record.getClear(), (yyvsp[-4]));
                        }
#line 39506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 747:
#line 4267 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr payload = (yyvsp[0]).getExpr();
                            parser->mergeDictionaryPayload(record, payload, (yyvsp[-4]));
                            (yyval).setExpr(record.getClear(), (yyvsp[-4]));
                        }
#line 39517 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 748:
#line 4275 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[0]).getExpr();
                            parser->checkRecordIsValid((yyvsp[-3]), record);
                            (yyval).setExpr(record.getClear(), (yyvsp[-3]));
                        }
#line 39527 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 749:
#line 4282 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr payload = (yyvsp[0]).getExpr();
                            parser->mergeDictionaryPayload(record, payload, (yyvsp[-4]));
                            (yyval).setExpr(record.getClear(), (yyvsp[-4]));
                        }
#line 39538 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 750:
#line 4290 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[0]).getExpr();
                            parser->checkRecordIsValid((yyvsp[-4]), record);
                            (yyval).setExpr(record.getClear(), (yyvsp[-4]));
                        }
#line 39548 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 751:
#line 4297 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr payload = (yyvsp[0]).getExpr();
                            parser->mergeDictionaryPayload(record, payload, (yyvsp[-5]));
                            (yyval).setExpr(record.getClear(), (yyvsp[-5]));
                        }
#line 39559 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 753:
#line 4305 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-2]));
                            parser->checkConcreteRecord((yyvsp[0]));
                            OwnedHqlExpr left = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr right = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->createRecordIntersection(left, right, (yyvsp[-2])));
                            (yyval).setPosition((yyvsp[-2]));
                            parser->checkRecordIsValid((yyvsp[-2]), (yyval).queryExpr());
                        }
#line 39573 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 754:
#line 4315 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-2]));
                            parser->checkConcreteRecord((yyvsp[0]));
                            OwnedHqlExpr left = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr right = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->createRecordUnion(left, right, (yyvsp[-2])));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 39586 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 755:
#line 4324 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-2]));
                            parser->checkConcreteRecord((yyvsp[0]));
                            OwnedHqlExpr left = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr right = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->createRecordDifference(left, right, (yyvsp[-2])));
                            (yyval).setPosition((yyvsp[-2]));
                            parser->checkRecordIsValid((yyvsp[-2]), (yyval).queryExpr());
                        }
#line 39600 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 756:
#line 4334 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-2]));
                            OwnedHqlExpr left = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr right = createId((yyvsp[0]).getId());
                            (yyval).setExpr(parser->createRecordExcept(left, right, (yyvsp[-2])));
                            (yyval).setPosition((yyvsp[-2]));
                            parser->checkRecordIsValid((yyvsp[-2]), (yyval).queryExpr());
                        }
#line 39613 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 757:
#line 4343 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-4]));
                            OwnedHqlExpr left = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr right = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->createRecordExcept(left, right, (yyvsp[-4])));
                            (yyval).setPosition((yyvsp[-4]));
                            parser->checkRecordIsValid((yyvsp[-4]), (yyval).queryExpr());
                        }
#line 39626 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 758:
#line 4352 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-3]));
                            parser->checkConcreteRecord((yyvsp[0]));
                            OwnedHqlExpr left = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr right = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->createRecordDifference(left, right, (yyvsp[-3])));
                            (yyval).setPosition((yyvsp[-3]));
                            parser->checkRecordIsValid((yyvsp[-3]), (yyval).queryExpr());
                        }
#line 39640 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 759:
#line 4362 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-3]));
                            OwnedHqlExpr left = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr right = createId((yyvsp[0]).getId());
                            (yyval).setExpr(parser->createRecordExcept(left, right, (yyvsp[-3])));
                            (yyval).setPosition((yyvsp[-3]));
                            parser->checkRecordIsValid((yyvsp[-3]), (yyval).queryExpr());
                        }
#line 39653 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 760:
#line 4371 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkConcreteRecord((yyvsp[-5]));
                            OwnedHqlExpr left = (yyvsp[-5]).getExpr();
                            OwnedHqlExpr right = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->createRecordExcept(left, right, (yyvsp[-5])));
                            (yyval).setPosition((yyvsp[-5]));
                            parser->checkRecordIsValid((yyvsp[-5]), (yyval).queryExpr());
                        }
#line 39666 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 761:
#line 4380 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-1]).getExpr();
                            LinkedHqlExpr record = queryOriginalRecord(ds);
                            if (!record)
                            {
                                parser->reportError(ERR_EXPECTED, (yyvsp[-1]), "The argument does not have a associated record");
                                record.set(queryNullRecord());
                            }
                            else if (ds->isFunction() && !record->isFullyBound())
                            {
                                record.setown(getUnadornedRecordOrField(record));
                                if (!record->isFullyBound())
                                    parser->reportError(ERR_EXPECTED, (yyvsp[-3]), "RECORDOF(function-definition), result record depends on the function parameters");
                            }

                            (yyval).setExpr(LINK(record));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 39689 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 762:
#line 4399 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr name = createValue(no_nameof, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-6]).getExpr());
                            IHqlExpression * record = parser->lookupDFSlayout((yyvsp[-8]), foldHqlExpression(name), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getInt());
                            (yyval).setExpr(record, (yyvsp[-8]));
                        }
#line 39699 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 763:
#line 4405 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr name = createValue(no_nameof, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-3]).getExpr());
                            IHqlExpression * record = parser->lookupDFSlayout((yyvsp[-5]), foldHqlExpression(name), LINK(queryNullRecord()), (yyvsp[-1]).getExpr(), false);
                            (yyval).setExpr(record, (yyvsp[-5]));
                        }
#line 39709 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 764:
#line 4411 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_string, true);
                            IHqlExpression * record = parser->lookupDFSlayout((yyvsp[-8]), (yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getInt());
                            (yyval).setExpr(record, (yyvsp[-8]));
                        }
#line 39719 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 765:
#line 4417 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, true);
                            IHqlExpression * record = parser->lookupDFSlayout((yyvsp[-5]), (yyvsp[-3]).getExpr(), LINK(queryNullRecord()), (yyvsp[-1]).getExpr(), false);
                            (yyval).setExpr(record, (yyvsp[-5]));
                        }
#line 39729 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 766:
#line 4423 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 39738 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 767:
#line 4428 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 39748 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 768:
#line 4434 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 39757 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 769:
#line 4441 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *r = (yyvsp[0]).getExpr();
                            parser->pushSelfScope(LINK(r));
                            (yyval).setExpr(r);
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 39768 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 770:
#line 4450 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->popSelfScope();
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 39778 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 771:
#line 4459 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createId((yyvsp[0]).getId()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 39787 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 772:
#line 4464 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), createId((yyvsp[0]).getId())));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 39796 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 773:
#line 4472 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginRecord();
                            (yyval).clear();
                        }
#line 39805 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 774:
#line 4476 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginRecord();
                            (yyval).clear();
                        }
#line 39814 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 775:
#line 4484 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE: May want to add this after all attributes.
                            OwnedHqlExpr base = (yyvsp[-1]).getExpr();
                            parser->activeRecords.tos().addOperand(LINK(base->queryBody()));
                            (yyval).clear();
                        }
#line 39825 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 776:
#line 4494 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addRecordOption((yyvsp[0]));
                            (yyval).clear((yyvsp[-1]));
                        }
#line 39834 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 777:
#line 4500 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addRecordOption((yyvsp[0]));
                            (yyval).clear((yyvsp[-2]));
                        }
#line 39843 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 778:
#line 4508 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr lExpr = (yyvsp[-1]).getExpr();
                            StringBuffer lstr;
                            getStringValue(lstr, lExpr);
                            StringBuffer locale;
                            if(!getNormalizedLocaleName(lstr.length(), lstr.str(), locale))
                                parser->reportError(ERR_BAD_LOCALE, (yyvsp[-1]), "Bad locale name");
                            (yyval).setExpr(createExprAttribute(localeAtom, createConstant(locale.str())));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 39858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 779:
#line 4519 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 39868 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 780:
#line 4525 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 39878 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 781:
#line 4531 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(packedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 39887 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 782:
#line 4539 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->endRecordDef());
                            parser->popLocale();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 39897 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 785:
#line 4553 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-4]));
                        }
#line 39905 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 786:
#line 4556 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(LINK(queryNullRecord()), (yyvsp[-1]));
                        }
#line 39913 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 796:
#line 4580 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addFieldFromValue((yyvsp[0]), (yyvsp[0]));
                            (yyval).clear();
                        }
#line 39922 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 797:
#line 4584 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addFieldFromValue((yyvsp[-3]), (yyvsp[-1]));
                            (yyval).clear();
                        }
#line 39931 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 798:
#line 4588 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr value = (yyvsp[0]).getExpr();
                            IHqlExpression * field = queryFieldFromExpr(value);
                            if (field && (field->getOperator() == no_field))
                            {
                                //The following adds the field instead of creating a new field based on the old one.
                                //More efficient, but changes a few CRCs, so disabled for moment.
                                parser->checkFieldnameValid((yyvsp[0]), field->queryId());
                                parser->addToActiveRecord(LINK(field));
                            }
                            else
                            {
                                IIdAtom * name = parser->createFieldNameFromExpr(value);
                                IHqlExpression * attrs = extractAttrsFromExpr(value);

                                parser->addField((yyvsp[0]), name, value->getType(), NULL, attrs);
                            }
                            (yyval).clear();
                        }
#line 39955 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 799:
#line 4608 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr value = (yyvsp[0]).getExpr();
                            if (false)
                            {
                                //The following adds the field instead of creating a new field based on the old one.
                                //More efficient, but changes a few CRCs, so disabled for moment.
                                IHqlExpression * field = queryFieldFromSelect(value);
                                parser->checkFieldnameValid((yyvsp[0]), field->queryId());
                                parser->addToActiveRecord(LINK(field));
                            }
                            else
                            {
                                IIdAtom * name = parser->createFieldNameFromExpr(value);
                                IHqlExpression * attrs = extractAttrsFromExpr(value);

                                parser->addField((yyvsp[0]), name, value->getType(), NULL, attrs);
                            }
                            (yyval).clear();
                        }
#line 39979 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 800:
#line 4628 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).clear((yyvsp[-3]));
                            // NOTE - you might expect the default value to be optional, to declare an integer....
                            // But that might be too error-prone
                            IHqlExpression *value = (yyvsp[0]).getExpr();
                            IHqlExpression *attrs = (yyvsp[-2]).getExpr();
                            if (!attrs)
                                attrs = extractAttrsFromExpr(value);
                            parser->addField((yyvsp[-3]), (yyvsp[-3]).getId(), value->getType(), value, attrs);
                            (yyval).clear();
                        }
#line 39996 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 801:
#line 4641 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *value = (yyvsp[0]).getExpr();
                            IHqlExpression *attrs = (yyvsp[-2]).getExpr();
                            if (!attrs)
                                attrs = extractAttrsFromExpr(value);
                            parser->addField((yyvsp[-3]), (yyvsp[-3]).getId(), makeRowType(LINK(value->queryRecordType())), value, attrs);
                            (yyval).clear();
                        }
#line 40009 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 802:
#line 4650 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-3]));
                            IHqlExpression *value = (yyvsp[0]).getExpr();

                            //Syntactic oddity.  A record means a row of that record type.
                            OwnedITypeInfo type = (yyvsp[-3]).getType();
                            if (type->getTypeCode() == type_record)
                                type.setown(makeRowType(type.getClear()));
                            parser->addField((yyvsp[-2]), (yyvsp[-2]).getId(), type.getClear(), value, (yyvsp[-1]).getExpr());
                        }
#line 40024 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 803:
#line 4661 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-3]));
                            IHqlExpression *value = (yyvsp[0]).getExpr();

                            //Syntactic oddity.  A record means a row of that record type.
                            OwnedITypeInfo type = makeAnyType();
                            parser->addField((yyvsp[-2]), (yyvsp[-2]).getId(), type.getClear(), value, (yyvsp[-1]).getExpr());
                        }
#line 40037 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 804:
#line 4670 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-6]));
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);

                            OwnedHqlExpr attrs = (yyvsp[-1]).getExpr();
                            OwnedITypeInfo type = (yyvsp[-6]).getType();
                            IHqlExpression * record = queryNullRecord();
                            if (type->getTypeCode() != type_record)
                                parser->reportError(WRN_UNSUPPORTED_FEATURE, (yyvsp[-4]), "Only arrays of records are supported");
                            else
                            {
                                record = queryOriginalRecord(type);
                                attrs.setown(createComma(createLinkAttribute(countAtom, (yyvsp[-3]).getExpr()), attrs.getClear()));
                            }

                            IHqlExpression *value = (yyvsp[0]).getExpr();
                            Owned<ITypeInfo> datasetType = makeTableType(makeRowType(createRecordType(record)));
                            parser->addDatasetField((yyvsp[-5]), (yyvsp[-5]).getId(), datasetType, value, attrs.getClear());
                        }
#line 40061 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 805:
#line 4690 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-3]));
                            IHqlExpression *value = (yyvsp[0]).getExpr();

                            ITypeInfo *type = (yyvsp[-3]).getType();
                            parser->addField((yyvsp[-2]), (yyvsp[-2]).getId(), type, value, (yyvsp[-1]).getExpr());
                        }
#line 40073 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 806:
#line 4698 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-3]));
                            Owned<ITypeInfo> type = (yyvsp[-3]).getType();
                            parser->addDatasetField((yyvsp[-2]), (yyvsp[-2]).getId(), type, (yyvsp[0]).getExpr(), (yyvsp[-1]).getExpr());
                        }
#line 40083 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 807:
#line 4704 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * value = (yyvsp[0]).getExpr();
                            parser->addDatasetField((yyvsp[-3]), (yyvsp[-3]).getId(), NULL, value, (yyvsp[-2]).getExpr());
                            (yyval).clear();
                        }
#line 40093 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 808:
#line 4710 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-3]));
                            Owned<ITypeInfo> type = (yyvsp[-3]).getType();
                            parser->addDictionaryField((yyvsp[-2]), (yyvsp[-2]).getId(), type, (yyvsp[0]).getExpr(), (yyvsp[-1]).getExpr());
                        }
#line 40103 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 809:
#line 4716 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * value = (yyvsp[0]).getExpr();
                            parser->addDictionaryField((yyvsp[-3]), (yyvsp[-3]).getId(), value->queryType(), value, (yyvsp[-2]).getExpr());
                            (yyval).clear();
                        }
#line 40113 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 810:
#line 4722 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear((yyvsp[-3]));
                            parser->addField((yyvsp[-2]), (yyvsp[-2]).getId(), (yyvsp[-3]).getType(), (yyvsp[0]).getExpr(), (yyvsp[-1]).getExpr());
                        }
#line 40122 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 811:
#line 4726 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //This distinguish between an inline record definition, and an out-of-line definition
                            //The inline shouldn't clone, but should just add the fields from the record.
                            OwnedHqlExpr e = (yyvsp[0]).getExpr();
                            parser->addFields((yyvsp[0]), e, NULL, hasNamedSymbol(e));
                            (yyval).clear();
                        }
#line 40134 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 812:
#line 4733 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addFieldFromValue((yyvsp[0]), (yyvsp[0]));
                            (yyval).clear();
                        }
#line 40143 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 813:
#line 4737 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr e = (yyvsp[0]).getExpr();
                            parser->addFields((yyvsp[0]), e->queryRecord(), e, true);
                            (yyval).clear();
                        }
#line 40153 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 814:
#line 4742 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addFieldFromValue((yyvsp[0]), (yyvsp[0]));
                            (yyval).clear();
                        }
#line 40162 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 816:
#line 4747 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear();
                        }
#line 40170 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 817:
#line 4751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr list = (yyvsp[0]).getExpr();
                            if (list && (list->queryType()->getTypeCode() != type_sortlist))
                            {
                                HqlExprArray items;
                                list->unwindList(items, no_comma);
                                ForEachItemIn(i, items)
                                {
                                    IHqlExpression * value = &items.item(i);
                                    IIdAtom * name = parser->createFieldNameFromExpr(value);
                                    IHqlExpression * attrs = extractAttrsFromExpr(value);
                                    parser->addField((yyvsp[0]), name, value->getType(), LINK(value), attrs);
                                }
                            }
                            (yyval).clear();
                        }
#line 40191 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 818:
#line 4770 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 40197 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 819:
#line 4771 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 40203 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 820:
#line 4773 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr((yyvsp[-1]).getExpr()); }
#line 40209 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 822:
#line 4779 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 40215 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 823:
#line 4784 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            (yyval).setExpr(createAttribute(blobAtom)); 
                        }
#line 40223 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 824:
#line 4788 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(cardinalityAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40232 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 825:
#line 4793 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            parser->normalizeExpression((yyvsp[-1]), type_set, false);
                            (yyval).setExpr(createExprAttribute(caseAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40241 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 826:
#line 4798 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true, false);
                            (yyval).setExpr(createExprAttribute(maxCountAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40250 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 827:
#line 4803 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true, false);
                            (yyval).setExpr(createExprAttribute(choosenAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40259 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 828:
#line 4808 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true, false);
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40268 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 829:
#line 4813 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true, false);
                            (yyval).setExpr(createExprAttribute(maxSizeAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40277 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 830:
#line 4818 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_any, true, false);
                            (yyval).setExpr(createExprAttribute(namedAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40286 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 831:
#line 4823 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(rangeAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40294 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 832:
#line 4827 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(virtualAtom, createAttribute(logicalFilenameAtom)));
                        }
#line 40302 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 833:
#line 4831 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(virtualAtom, createAttribute(filepositionAtom)));
                        }
#line 40310 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 834:
#line 4835 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(virtualAtom, createAttribute(localFilePositionAtom)));
                        }
#line 40318 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 835:
#line 4839 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(virtualAtom, createAttribute(sizeofAtom)));
                        }
#line 40326 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 836:
#line 4843 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, true, false);
                            parser->validateXPath((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(xpathAtom, (yyvsp[-1]).getExpr()));
                        }
#line 40336 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 837:
#line 4849 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(xmlDefaultAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 40344 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 838:
#line 4853 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * arg = (yyvsp[-1]).queryExpr();
                            (yyval).setExpr(createExprAttribute(defaultAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 40353 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 839:
#line 4858 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[0]).getExpr();
                            StringBuffer text;
                            getStringValue(text, expr);
                            (yyval).setExpr(createAttribute(createAtom(text.str())), (yyvsp[0]));
                        }
#line 40364 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 840:
#line 4865 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            OwnedHqlExpr expr = (yyvsp[-3]).getExpr();
                            StringBuffer text;
                            getStringValue(text, expr);
                            (yyval).setExpr(createExprAttribute(createAtom(text), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 40376 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 841:
#line 4873 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(getLinkCountedAttr());
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40385 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 842:
#line 4878 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(getEmbeddedAttr());
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40394 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 843:
#line 4883 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(setAtom, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 40405 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 845:
#line 4895 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * record = parser->endIfBlock();
                            OwnedHqlExpr expr = createValue(no_ifblock, makeNullType(), (yyvsp[-3]).getExpr(), record);
                            parser->addIfBlockToActive((yyvsp[-3]), expr);
                            (yyval).clear();
                        }
#line 40416 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 846:
#line 4902 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_IFBLOCK_EMPTYDEF,(yyvsp[-2]),"Empty ifblock body");
                            ::Release(parser->endIfBlock());
                            (yyvsp[-2]).release();
                            (yyval).clear();
                        }
#line 40427 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 847:
#line 4912 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginIfBlock();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 40437 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 849:
#line 4922 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40447 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 851:
#line 4932 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40457 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 852:
#line 4940 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[-1]).getExpr());   }
#line 40463 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 853:
#line 4941 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr();   }
#line 40469 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 855:
#line 4947 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 40477 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 856:
#line 4954 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 40486 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 857:
#line 4959 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 40494 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 858:
#line 4963 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 40502 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 859:
#line 4967 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 40510 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 860:
#line 4971 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 40518 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 861:
#line 4978 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeSetType(LINK(parser->defaultIntegralType)));
                        }
#line 40526 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 862:
#line 4982 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeSetType(NULL));
                        }
#line 40534 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 863:
#line 4986 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeSetType((yyvsp[0]).getType()));
                        }
#line 40542 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 864:
#line 4990 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeSetType((yyvsp[0]).getType()));
                        }
#line 40550 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 867:
#line 4998 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setType(makeIntType(8, false));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40559 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 868:
#line 5003 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = (yyvsp[0]).getType();
                            switch (type->getTypeCode())
                            {
                            case type_int:
                                (yyval).setType(makePackedIntType(type->getSize(), type->isSigned()));
                                type->Release();
                                break;
                            default:
                                parser->reportError(ERR_TYPEERR_INTDECIMAL, (yyvsp[0]), "Integer type expected");
                                (yyval).setType(type);
                                break;
                            }
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40579 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 869:
#line 5019 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = (yyvsp[0]).getType();
                            switch (type->getTypeCode())
                            {
                            case type_int:
                                (yyval).setType(makeIntType(type->getSize(), false));
                                type->Release();
                                break;
                            case type_swapint:
                                (yyval).setType(makeSwapIntType(type->getSize(), false));
                                type->Release();
                                break;
                            case type_packedint:
                                (yyval).setType(makePackedIntType(type->getSize(), false));
                                type->Release();
                                break;
                            case type_decimal:
                                (yyval).setType(makeDecimalType(type->getDigits(), type->getPrecision(), false));
                                type->Release();
                                break;
                            default:
                                parser->reportError(ERR_TYPEERR_INTDECIMAL, (yyvsp[0]), "Integer or decimal type expected");
                                (yyval).setType(type);
                                break;
                            }
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40611 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 870:
#line 5046 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = (yyvsp[0]).getType();
                            switch (type->getTypeCode())
                            {
                            case type_int:
#if __BYTE_ORDER == __LITTLE_ENDIAN
                                (yyval).setType(makeSwapIntType(type->getSize(), type->isSigned()));
                                type->Release();
#else
                                (yyval).setType(type);
#endif
                                break;
                            default:
                                parser->reportError(ERR_TYPEERR_INT, (yyvsp[0]), "Integer type expected");
                                (yyval).setType(type);
                                break;
                            }
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40635 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 871:
#line 5065 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = (yyvsp[0]).getType();
                            switch (type->getTypeCode())
                            {
                            case type_int:
#if __BYTE_ORDER == __LITTLE_ENDIAN
                                (yyval).setType(type);
#else
                                (yyval).setType(makeSwapIntType(type->getSize(), type->isSigned()));
                                type->Release();
#endif
                                break;
                            default:
                                parser->reportError(ERR_TYPEERR_INT, (yyvsp[0]), "Integer type expected");
                                (yyval).setType(type);
                                break;
                            }
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40659 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 872:
#line 5084 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> type = (yyvsp[0]).getType();
                            if (type->getTypeCode() != type_string)
                                parser->reportError(ERR_TYPEERR_STRING, (yyvsp[0]), "String type expected");
                            (yyval).setType(makeStringType(type->getSize(), getCharset(asciiAtom), NULL));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40671 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 873:
#line 5092 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> type = (yyvsp[0]).getType();
                            if (type->getTypeCode() != type_string)
                                parser->reportError(ERR_TYPEERR_STRING, (yyvsp[0]), "String type expected");
                            (yyval).setType(makeStringType(type->getSize(), getCharset(ebcdicAtom), NULL));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 40683 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 874:
#line 5100 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr arg = (yyvsp[-1]).getExpr();
                            ITypeInfo *type = arg->getType();
                            if (!type)
                            {
                                parser->reportError(ERR_TYPEOF_ILLOPERAND, (yyvsp[-1]), "Illegal operand for TYPEOF");
                                type = LINK(parser->defaultIntegralType);
                            }
                            else
                            {
//                              type = preserveTypeQualifiers(type, arg);
                            }
                            (yyval).setType(type);
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 40703 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 875:
#line 5119 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr typedefExpr = (yyvsp[0]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40713 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 876:
#line 5126 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            OwnedHqlExpr typedefExpr = (yyvsp[-1]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 40724 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 877:
#line 5135 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr typedefExpr = (yyvsp[0]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40734 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 878:
#line 5142 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            OwnedHqlExpr typedefExpr = (yyvsp[-1]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 40745 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 879:
#line 5151 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr typedefExpr = (yyvsp[0]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40755 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 880:
#line 5158 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            OwnedHqlExpr typedefExpr = (yyvsp[-1]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 40766 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 881:
#line 5168 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr typedefExpr = (yyvsp[0]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40776 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 882:
#line 5175 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            OwnedHqlExpr typedefExpr = (yyvsp[-1]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 40787 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 883:
#line 5185 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr typedefExpr = (yyvsp[0]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40797 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 884:
#line 5192 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            OwnedHqlExpr typedefExpr = (yyvsp[-1]).getExpr();
                            (yyval).setType(getTypedefType(typedefExpr));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 40808 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 885:
#line 5203 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 40814 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 886:
#line 5205 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 40822 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 887:
#line 5212 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createLinkAttribute(countAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 40832 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 888:
#line 5218 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createLinkAttribute(sizeofAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 40842 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 889:
#line 5224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createLinkAttribute(sizeofAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 40852 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 890:
#line 5230 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //theoretically possible to cope with variables, but serialization of self cause problems in code generator
                            parser->normalizeExpression((yyvsp[-1]), type_any, true);
                            (yyval).setExpr(createLinkAttribute(choosenAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 40863 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 892:
#line 5240 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr e1 = (yyvsp[0]).getExpr();
                            (yyval).setType(createRecordType(e1));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 40873 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 895:
#line 5251 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[0]).getExpr();
                            (yyval).setType(expr->getType());
                        }
#line 40882 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 896:
#line 5259 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            IHqlExpression * failure = (yyvsp[0]).getExpr();
                            if (failure)
                            {
                                if (expr->isDataset())
                                    (yyval).setExpr(createDataset(no_colon, expr, failure));
                                else
                                {
                                    //If a string value is stored, its type is a string of unknown length
                                    //(because a different length string might be stored...)
                                    Linked<ITypeInfo> type = expr->queryType();
#ifdef STORED_CAN_CHANGE_LENGTH
                                    switch (type->getTypeCode())
                                    {
                                    case type_varstring:
                                    case type_qstring:
                                    case type_string:
                                    case type_data:
                                    case type_unicode:
                                    case type_varunicode:
                                    case type_utf8:
                                        type.setown(getStretchedType(UNKNOWN_LENGTH, type));
                                        break;
                                    }
#endif
                                    (yyval).setExpr(createValueF(no_colon, type.getClear(), expr, failure, NULL));
                                }
                            }
                            else
                                (yyval).setExpr(expr);
                        }
#line 40920 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 897:
#line 5293 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr failure = (yyvsp[0]).getExpr();

                            HqlExprArray meta;
                            expr = attachWorkflowOwn(meta, expr, failure, NULL);
                            expr = parser->attachPendingWarnings(expr);
                            expr = parser->attachMetaAttributes(expr, meta);

                            IHqlExpression *record = createValue(no_null);
                            OwnedHqlExpr select = createDatasetF(no_selectfields, expr, record, NULL);
                            HqlExprArray args;
                            args.append(*select.getClear());
                            IHqlExpression * output = createValue(no_output, makeVoidType(), args);

                            (yyval).setExpr(output, (yyvsp[-1]));
                        }
#line 40942 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 898:
#line 5311 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr failure = (yyvsp[0]).getExpr();

                            HqlExprArray meta;
                            expr = attachWorkflowOwn(meta, expr, failure, NULL);
                            expr = parser->attachPendingWarnings(expr);
                            expr = parser->attachMetaAttributes(expr, meta);

                            IHqlExpression * output = createValue(no_output, makeVoidType(), createDataset(no_datasetfromdictionary, expr));

                            (yyval).setExpr(output, (yyvsp[-1]));
                        }
#line 40960 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 899:
#line 5325 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr failure = (yyvsp[0]).getExpr();

                            HqlExprArray meta;
                            expr = attachWorkflowOwn(meta, expr, failure, NULL);
                            expr = parser->attachPendingWarnings(expr);
                            expr = parser->attachMetaAttributes(expr, meta);

                            (yyval).setExpr(createValue(no_outputscalar, makeVoidType(), expr), (yyvsp[-1]));
                        }
#line 40976 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 900:
#line 5336 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr failure = (yyvsp[0]).getExpr();

                            HqlExprArray meta;
                            expr = attachWorkflowOwn(meta, expr, failure, NULL);
                            expr = parser->attachPendingWarnings(expr);
                            expr = parser->attachMetaAttributes(expr, meta);

                            (yyval).setExpr(expr);
                        }
#line 40992 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 901:
#line 5348 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[-1]).getExpr();
                            assertex(expr->getOperator() == no_funcdef);
                            IHqlExpression * moduleExpr = expr->queryChild(0);
                            parser->checkExportedModule((yyvsp[-1]), moduleExpr);
                            IHqlScope * concrete = moduleExpr->queryScope()->queryConcreteScope();
                            if (!concrete)
                                parser->reportError(ERR_ABSTRACT_MODULE, (yyvsp[-1]), "Library modules cannot be abstract");
                            (yyval).setExpr(expr.getClear());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 41008 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 902:
#line 5363 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 41014 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 903:
#line 5364 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).inherit((yyvsp[0])); }
#line 41020 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 904:
#line 5368 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 41026 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 906:
#line 5373 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 41032 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 907:
#line 5375 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_boolean, true);
                            (yyval).inherit((yyvsp[-1]));
                        }
#line 41041 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 908:
#line 5382 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_boolean, false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 41050 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 909:
#line 5389 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_any, true);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 41059 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 911:
#line 5398 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 41068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 912:
#line 5406 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Currently this is only used inside functionmacro to define an inline function.
                            parser->enterScope(false);
                            parser->enterCompoundObject();
                            parser->beginDefineId(NULL, NULL);
                            (yyval).setType(NULL);
                        }
#line 41080 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 917:
#line 5426 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(NULL);
                        }
#line 41088 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 919:
#line 5433 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_boolean, false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 41097 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 920:
#line 5438 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_boolean, false);
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 41106 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 922:
#line 5447 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 41115 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 923:
#line 5454 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            parser->applyDefaultPromotions((yyvsp[0]), true);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 41125 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 925:
#line 5464 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo * type = (yyvsp[0]).queryExprType();
                            if (type->getTypeCode() == type_boolean)
                            {
                                (yyval).setExpr(createBoolExpr(no_not, (yyvsp[0]).getExpr()), (yyvsp[-1]));
                            }
                            else
                            {
                                parser->normalizeExpression((yyvsp[0]), type_int, false);
                                IHqlExpression *e2 = (yyvsp[0]).getExpr();
                                (yyval).setExpr(createValue(no_bnot, e2->getType(), e2), (yyvsp[-1]));
                            }
                        }
#line 41143 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 926:
#line 5478 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_boolean, false);
                            parser->normalizeExpression((yyvsp[0]), type_boolean, false);
                            (yyval).setExpr(createBoolExpr(no_and, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 41154 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 927:
#line 5485 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_boolean, false);
                            parser->normalizeExpression((yyvsp[0]), type_boolean, false);
                            (yyval).setExpr(createBoolExpr(no_or, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 41165 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 928:
#line 5500 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createBoolExpr(no_within, ds.getClear()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 41175 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 929:
#line 5511 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()->closeExpr()); }
#line 41181 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 930:
#line 5515 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            IHqlExpression *elem = (yyvsp[0]).getExpr();
                            IHqlExpression *list = createOpenValue(no_comma, elem->getType());
                            list->addOperand(elem);
                            (yyval).setExpr(list);
                        }
#line 41193 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 931:
#line 5523 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            IHqlExpression *list = (yyvsp[-2]).getExpr();
                            list->addOperand((yyvsp[0]).getExpr());
                            (yyval).setExpr(list);
                        }
#line 41204 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 932:
#line 5533 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            node_operator op = (node_operator)(yyvsp[-1]).getInt();
                            parser->promoteToSameCompareType((yyvsp[-2]), (yyvsp[0]), op);
                            (yyval).setExpr(createBoolExpr(op, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 41216 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 933:
#line 5541 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]));
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->promoteToSameCompareType((yyvsp[-4]), (yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createBoolExpr(no_between, (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41228 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 934:
#line 5549 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]));
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->promoteToSameCompareType((yyvsp[-5]), (yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createValue(no_not, makeBoolType(), createBoolExpr(no_between, (yyvsp[-5]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));
                        }
#line 41240 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 935:
#line 5557 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->normalizeExpression((yyvsp[0]), type_set, false);
                            IHqlExpression *set = (yyvsp[0]).getExpr();
                            IHqlExpression *expr = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(parser->createINExpression(no_notin, expr, set, (yyvsp[0])));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 41254 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 936:
#line 5567 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->normalizeExpression((yyvsp[0]), type_set, false);
                            IHqlExpression *set = (yyvsp[0]).getExpr();
                            IHqlExpression *expr = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(parser->createINExpression(no_in, expr, set, (yyvsp[0])));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 41268 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 937:
#line 5577 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->normalizeExpression((yyvsp[0]), type_dictionary, false);
                            OwnedHqlExpr dict = (yyvsp[0]).getExpr();
                            OwnedHqlExpr expr = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr indict = createINDictExpr(*parser->errorHandler, (yyvsp[0]).pos, expr, dict);
                            (yyval).setExpr(getInverse(indict));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 41283 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 938:
#line 5588 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->normalizeExpression((yyvsp[0]), type_dictionary, false);
                            OwnedHqlExpr dict = (yyvsp[0]).getExpr();
                            OwnedHqlExpr row = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr indict = createINDictRow(*parser->errorHandler, (yyvsp[0]).pos, row, dict);
                            (yyval).setExpr(getInverse(indict));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 41298 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 939:
#line 5599 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->normalizeExpression((yyvsp[0]), type_dictionary, false);
                            OwnedHqlExpr dict = (yyvsp[0]).getExpr();
                            OwnedHqlExpr expr = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createINDictExpr(*parser->errorHandler, (yyvsp[0]).pos, expr, dict));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 41312 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 940:
#line 5609 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->normalizeExpression((yyvsp[0]), type_dictionary, false);
                            OwnedHqlExpr dict = (yyvsp[0]).getExpr();
                            OwnedHqlExpr row = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createINDictRow(*parser->errorHandler, (yyvsp[0]).pos, row, dict));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 41326 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 941:
#line 5619 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkSameType((yyvsp[-2]), (yyvsp[0])); (yyval).setExpr(createBoolExpr(no_eq, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41334 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 942:
#line 5623 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkSameType((yyvsp[-2]), (yyvsp[0])); (yyval).setExpr(createBoolExpr(no_ne, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41342 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 943:
#line 5627 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkSameType((yyvsp[-2]), (yyvsp[0])); (yyval).setExpr(createBoolExpr(no_eq, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41350 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 944:
#line 5631 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkSameType((yyvsp[-2]), (yyvsp[0])); (yyval).setExpr(createBoolExpr(no_ne, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41358 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 946:
#line 5639 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setInt(no_eq); }
#line 41364 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 947:
#line 5640 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setInt(no_ne); }
#line 41370 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 948:
#line 5641 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setInt(no_le); }
#line 41376 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 949:
#line 5642 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setInt(no_ge); }
#line 41382 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 950:
#line 5643 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setInt(no_lt); }
#line 41388 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 951:
#line 5644 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setInt(no_gt); }
#line 41394 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 953:
#line 5649 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            if ((yyvsp[-2]).queryExpr()->isList() || (yyvsp[0]).queryExpr()->isList())
                            {
                                ITypeInfo * type = parser->promoteToSameType((yyvsp[-2]), (yyvsp[0]));
                                (yyval).setExpr(createValue(no_addsets, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                            }
                            else if (isUnicodeType((yyvsp[-2]).queryExprType()) || isUnicodeType((yyvsp[0]).queryExprType()))
                            {
                                parser->normalizeExpression((yyvsp[-2]), type_unicode, false);
                                parser->normalizeExpression((yyvsp[0]), type_unicode, false);
                                IAtom * locale = parser->ensureCommonLocale((yyvsp[-2]), (yyvsp[0]));
                                // cannot be certain of length of concatenated unicode string due to normalization
                                ITypeInfo * type;
                                if(((yyvsp[-2]).queryExprType()->getTypeCode() == type_utf8) && ((yyvsp[0]).queryExprType()->getTypeCode() == type_utf8))
                                    type = makeUtf8Type(UNKNOWN_LENGTH, locale);
                                else
                                    type = makeUnicodeType(UNKNOWN_LENGTH, locale);
                                OwnedHqlExpr left = (yyvsp[-2]).getExpr();
                                OwnedHqlExpr right = (yyvsp[0]).getExpr();
                                (yyval).setExpr(createValue(no_concat, type, ensureExprType(left, type), ensureExprType(right, type)), (yyvsp[-2]));
                            }
                            else if (isStringType((yyvsp[-2]).queryExprType()) || isStringType((yyvsp[0]).queryExprType()))
                            {
                                parser->ensureString((yyvsp[-2]));
                                parser->ensureString((yyvsp[0]));
                                ITypeInfo * t1 = (yyvsp[-2]).queryExprType();
                                ITypeInfo * t2 = (yyvsp[0]).queryExprType();

                                unsigned l = t1->getStringLen();
                                unsigned r = t2->getStringLen();
                                unsigned size = UNKNOWN_LENGTH;
                                if ((l != UNKNOWN_LENGTH) && (r != UNKNOWN_LENGTH))
                                    size = l + r;
                                //MORE: case sensitive?
                                ICharsetInfo * charset = t1->queryCharset();
                                ICharsetInfo * otherCharset = t2->queryCharset();
                                if (queryDefaultTranslation(charset, otherCharset))
                                    parser->reportError(ERR_CHARSET_CONFLICT, (yyvsp[0]), "Different character sets in concatenation");
                                ICollationInfo * collation = t1->queryCollation();  // MORE!!
                                ITypeInfo * type;
                                if ((t1->getTypeCode() == type_varstring) || (t2->getTypeCode() == type_varstring))
                                    type = makeVarStringType(size);
                                else if ((t1->getTypeCode() == type_string) || (t2->getTypeCode() == type_string))
                                    type = makeStringType(size, LINK(charset), LINK(collation));
                                else
                                    type = makeDataType(size);
                                (yyval).setExpr(createValue(no_concat, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                            }
                            else
                            {
                                (yyval).setExpr(parser->createArithmeticOp(no_add, (yyvsp[-2]), (yyvsp[0])), (yyvsp[-2]));
                            }
                        }
#line 41454 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 954:
#line 5705 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createArithmeticOp(no_sub, (yyvsp[-2]), (yyvsp[0])), (yyvsp[-2]));
                        }
#line 41462 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 955:
#line 5709 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            ::Release(parser->checkPromoteType((yyvsp[-2]), (yyvsp[0])));
                            (yyval).setExpr(createValue(no_order, makeIntType(4, true), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41473 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 956:
#line 5716 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createArithmeticOp(no_mul, (yyvsp[-2]), (yyvsp[0])), (yyvsp[-2]));
                        }
#line 41481 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 957:
#line 5720 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            if (!isDecimalType((yyvsp[-2]).queryExprType()) && !isDecimalType((yyvsp[0]).queryExprType()))
                                parser->ensureType((yyvsp[-2]), parser->defaultRealType);
                            (yyval).setExpr(parser->createArithmeticOp(no_div, (yyvsp[-2]), (yyvsp[0])), (yyvsp[-2]));
                        }
#line 41493 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 958:
#line 5727 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            parser->applyDefaultPromotions((yyvsp[0]), false);
                            ITypeInfo * type = parser->promoteToSameType((yyvsp[-2]), (yyvsp[0])); // MORE _ should calculate at wider width then cast down to narrower?
                            (yyval).setExpr(createValue(no_modulus, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 959:
#line 5735 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            parser->applyDefaultPromotions((yyvsp[0]), false);
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            ITypeInfo * type = parser->promoteToSameType((yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createValue(no_div, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41521 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 960:
#line 5745 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            IHqlExpression * left = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createValue(no_lshift, left->getType(), left, (yyvsp[0]).getExpr()));
                        }
#line 41535 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 961:
#line 5754 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->applyDefaultPromotions((yyvsp[-2]), false);
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            IHqlExpression * left = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createValue(no_rshift, left->getType(), left, (yyvsp[0]).getExpr()));
                        }
#line 41549 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 962:
#line 5763 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            //MORE: We could could implement for decimal types.
                            if (!(yyvsp[-2]).queryExpr()->isBoolean() || !(yyvsp[0]).queryExpr()->isBoolean())
                            {
                                parser->normalizeExpression((yyvsp[-2]), type_int, false);
                                parser->normalizeExpression((yyvsp[0]), type_int, false);
                            }
                            ITypeInfo * lType = (yyvsp[-2]).queryExprType()->queryPromotedType();
                            ITypeInfo * rType = (yyvsp[0]).queryExprType()->queryPromotedType();
                            ITypeInfo * type = getBandType(lType, rType);
                            parser->ensureType((yyvsp[-2]), type);
                            parser->ensureType((yyvsp[0]), type);
                            (yyval).setExpr(createValue(no_band, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 963:
#line 5779 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            if (!(yyvsp[-2]).queryExpr()->isBoolean() || !(yyvsp[0]).queryExpr()->isBoolean())
                            {
                                parser->normalizeExpression((yyvsp[-2]), type_int, false);
                                parser->normalizeExpression((yyvsp[0]), type_int, false);
                            }
                            ITypeInfo * lType = (yyvsp[-2]).queryExprType()->queryPromotedType();
                            ITypeInfo * rType = (yyvsp[0]).queryExprType()->queryPromotedType();
                            ITypeInfo * type = getBorType(lType, rType);
                            parser->ensureType((yyvsp[-2]), type);
                            parser->ensureType((yyvsp[0]), type);
                            (yyval).setExpr(createValue(no_bor, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41590 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 964:
#line 5794 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            ITypeInfo * type = parser->promoteToSameType((yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createValue(no_bxor, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41603 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 966:
#line 5817 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[0]).queryExpr();
                            if (expr->isConstant() && expr->queryValue() && !expr->queryType()->isInteger())
                                parser->reportWarning(CategoryMistake, WRN_INT_OR_RANGE_EXPECTED, (yyvsp[0]).pos, "Floating point index used. Was an index range intended instead?");
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            parser->checkPositive((yyvsp[0]));
                            (yyval).setExpr((yyvsp[0]).getExpr());
                        }
#line 41616 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 967:
#line 5826 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[0]).queryExpr();
                            if (expr->isConstant() && expr->queryValue() && !expr->queryType()->isInteger())
                                parser->reportWarning(CategoryMistake, WRN_INT_OR_RANGE_EXPECTED, (yyvsp[0]).pos, "Floating point index used. Was an extra . added?");
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            parser->checkPositive((yyvsp[-2]));
                            parser->checkPositive((yyvsp[0]));
                            (yyval).setExpr(createValue(no_range, makeNullType(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 41631 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 968:
#line 5836 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[0]).queryExpr();
                            if (expr->isConstant() && expr->queryValue() && !expr->queryType()->isInteger())
                                parser->reportWarning(CategoryMistake, WRN_INT_OR_RANGE_EXPECTED, (yyvsp[0]).pos, "Floating point index used. Was an extra . added?");
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            parser->checkPositive((yyvsp[0]));
                            (yyval).setExpr(createValue(no_rangeto, makeNullType(), (yyvsp[0]).getExpr()));
                        }
#line 41644 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 969:
#line 5844 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            parser->checkPositive((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_rangefrom, makeNullType(), (yyvsp[-1]).getExpr()));
                        }
#line 41654 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 970:
#line 5850 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            parser->checkPositive((yyvsp[-2]));
                            (yyval).setExpr(createValue(no_rangecommon, makeNullType(), (yyvsp[-2]).getExpr()));
                        }
#line 41664 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 971:
#line 5855 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_SUBSTR_EMPTYRANGE,yylval,"Empty range");

                            // recovering: assume [1..].
                            (yyval).setExpr(createValue(no_rangefrom, makeNullType(), createConstant(1)));
                        }
#line 41675 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 973:
#line 5865 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            if (parser->sortDepth == 0)
                            {
                                parser->applyDefaultPromotions((yyvsp[0]), true);
                                parser->normalizeExpression((yyvsp[0]), type_numeric, false);
                            }
                            IHqlExpression *e2 = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_negate, e2->getType(), e2));
                        }
#line 41690 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 974:
#line 5875 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            if (parser->sortDepth == 0)
                                parser->normalizeExpression((yyvsp[0]), type_numeric, false);
                            (yyval).setExpr((yyvsp[0]).getExpr());
                        }
#line 41701 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 975:
#line 5881 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            IHqlExpression *e2 = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_bnot, e2->getType(), e2));
                        }
#line 41711 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 976:
#line 5887 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_scalar, false);
                            Owned<ITypeInfo> type = (yyvsp[-2]).getType();
                            OwnedHqlExpr expr = (yyvsp[0]).getExpr();
                            (yyval).setExpr(getCastExpr(expr, type));
                        }
#line 41722 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 977:
#line 5894 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_set, false);
                            Owned<ITypeInfo> type = (yyvsp[-2]).getType();
                            OwnedHqlExpr expr = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_cast, type.getClear(), expr.getClear()), (yyvsp[-3]));
                        }
#line 41733 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 978:
#line 5900 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            IHqlExpression *expr = (yyvsp[0]).getExpr();
                            ITypeInfo *exprType = expr->queryType();
                            ITypeInfo *type = (yyvsp[-1]).getType();
                            if ((exprType->getSize() != UNKNOWN_LENGTH) && (exprType->getSize() < type->getSize()) && type->getSize() != UNKNOWN_LENGTH)
                                parser->reportError(ERR_TYPETRANS_LARGERTYPE, (yyvsp[-1]), "Type transfer: target type in is larger than source type");
                            (yyval).setExpr(createValue(no_typetransfer, type, expr));
                        }
#line 41747 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 980:
#line 5914 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            if ((yyvsp[-3]).queryExpr()->isList())
                            {
                                (yyval).setExpr(parser->createSetRange((yyvsp[-3]), (yyvsp[-1])));
                                (yyval).setPosition((yyvsp[-3]));
                            }
                            else
                            {
                                parser->ensureTypeCanBeIndexed((yyvsp[-3]));
                                // MORE - result type is shorter if expressions are constant, same as input if not
                                ITypeInfo * subtype = parser->checkStringIndex((yyvsp[-3]), (yyvsp[-1]));
                                (yyval).setExpr(createValue(no_substring, subtype, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                            }
                        }
#line 41767 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 981:
#line 5930 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_set, false);
                            (yyval).setExpr(parser->createListIndex((yyvsp[-4]), (yyvsp[-1]), createAttribute(noBoundCheckAtom)));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 41777 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 982:
#line 5937 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).inherit((yyvsp[-1])); }
#line 41783 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 983:
#line 5939 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = (yyvsp[-1]).getType();
                            (yyval).setExpr(createValue(no_simplified, type));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 41793 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 984:
#line 5945 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValueF(no_count, LINK(parser->defaultIntegralType), (yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr(), NULL));
                        }
#line 41801 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 985:
#line 5949 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_countgroup, LINK(parser->defaultIntegralType), (yyvsp[-1]).getExpr()));
                        }
#line 41809 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 986:
#line 5953 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr list = (yyvsp[-1]).getExpr();
                            //list could either be a no_sortlist - in which case we want the number of elements,
                            //or a no_param, in which case it doesn't matter what we return
                            (yyval).setExpr(getSizetConstant(list->numChildren()), (yyvsp[-3]));
                        }
#line 41820 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 987:
#line 5960 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_countdict, LINK(parser->defaultIntegralType), (yyvsp[-1]).getExpr()));
                        }
#line 41828 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 988:
#line 5964 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            ITypeInfo * retType = parser->promoteToSameType(args, (yyvsp[-1]), NULL, false);             // should be true
                            args.add(*(yyvsp[-3]).getExpr(),0);
                            (yyval).setExpr(createValue(no_choose, retType, args));
                        }
#line 41841 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 989:
#line 5973 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_existsgroup, makeBoolType(), (yyvsp[-1]).getExpr()));
                        }
#line 41849 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 990:
#line 5977 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValueF(no_exists, makeBoolType(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 41858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 991:
#line 5982 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_existsdict, makeBoolType(), (yyvsp[-1]).getExpr()));
                        }
#line 41866 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 992:
#line 5986 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            HqlExprArray args;
                            (yyvsp[-3]).unwindCommaList(args);
                            ITypeInfo * retType = parser->promoteMapToSameType(args, (yyvsp[-1]));
                            args.append(*(yyvsp[-1]).getExpr());
                            OwnedHqlExpr expr = createValue(no_map, retType, args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-5]));
                        }
#line 41880 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 993:
#line 5996 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]));
                            parser->normalizeExpression((yyvsp[-1]));
                            HqlExprArray args;
                            parser->endList(args);
                            parser->checkCaseForDuplicates(args, (yyvsp[-3]));
                            ITypeInfo * retType = parser->promoteCaseToSameType((yyvsp[-6]), args, (yyvsp[-1]));
                            args.add(*(yyvsp[-6]).getExpr(),0);
                            args.append(*(yyvsp[-1]).getExpr());
                            OwnedHqlExpr expr = createValue(no_case, retType, args);
                            (yyval).setExpr(foldConstantCaseExpr(expr), (yyvsp[-8]));
                        }
#line 41897 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 994:
#line 6009 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]));
                            parser->normalizeExpression((yyvsp[-1]));
                            // change error to warning.
                            parser->reportWarning(CategoryUnusual, WRN_CASENOCONDITION, (yyvsp[-6]).pos, "CASE does not have any conditions");
                            HqlExprArray args;
                            parser->endList(args);
                            ::Release((yyvsp[-4]).getExpr());
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-6]));
                        }
#line 41912 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 995:
#line 6020 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(parser->processIfProduction((yyvsp[-5]), (yyvsp[-3]), &(yyvsp[-1])), (yyvsp[-7]));
                        }
#line 41922 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 996:
#line 6026 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(parser->createIff((yyvsp[-5]), (yyvsp[-3]), (yyvsp[-1])), (yyvsp[-7]));
                        }
#line 41932 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 997:
#line 6032 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_exp, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 41941 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 998:
#line 6037 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * hash = parser->processSortList((yyvsp[-1]), no_hash, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createValue(no_hash, LINK(parser->uint4Type), hash));
                        }
#line 41952 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 999:
#line 6044 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * hash = parser->processSortList((yyvsp[-1]), no_hash, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createValue(no_hash32, makeIntType(4, false), hash));
                        }
#line 41963 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1000:
#line 6051 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * hash = parser->processSortList((yyvsp[-1]), no_hash, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createValue(no_hash64, makeIntType(8, false), hash));
                        }
#line 41974 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1001:
#line 6058 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * hash = parser->processSortList((yyvsp[-1]), no_hash, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createValue(no_hashmd5, makeDataType(16), hash));
                        }
#line 41985 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1002:
#line 6065 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * hash = parser->processSortList((yyvsp[-1]), no_hash, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createValue(no_crc, LINK(parser->uint4Type), hash), (yyvsp[-4]));
                        }
#line 41996 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1003:
#line 6072 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_eclcrc, LINK(parser->uint4Type), createAttribute(_original_Atom, (yyvsp[-1]).getExpr())), (yyvsp[-3]));
                        }
#line 42004 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1004:
#line 6076 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(getSizetConstant(getExpressionCRC(expr)));
                        }
#line 42013 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1005:
#line 6081 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_ln, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42022 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1006:
#line 6086 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_sin, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42031 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1007:
#line 6091 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_cos, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42040 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1008:
#line 6096 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_tan, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42049 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1009:
#line 6101 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_asin, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42058 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1010:
#line 6106 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_acos, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42067 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1011:
#line 6111 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_atan, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42076 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1012:
#line 6116 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_real, false);
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_atan2, makeRealType(8), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42086 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1013:
#line 6122 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_sinh, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42095 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1014:
#line 6127 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_cosh, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42104 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1015:
#line 6132 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_tanh, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42113 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1016:
#line 6137 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            IHqlExpression * value = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createValueF(no_globalscope, value->getType(), value, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 42124 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1017:
#line 6144 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_log10, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42133 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1018:
#line 6149 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_real, false);
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createValue(no_power, makeRealType(8),(yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42143 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1019:
#line 6155 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_random, LINK(parser->uint4Type), parser->createVolatileId()));
                        }
#line 42151 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1020:
#line 6159 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            ITypeInfo * type = getRoundType((yyvsp[-1]).queryExprType());
                            (yyval).setExpr(createValue(no_round, type, (yyvsp[-1]).getExpr()));
                        }
#line 42161 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1021:
#line 6165 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            ITypeInfo * type = getRoundToType((yyvsp[-3]).queryExprType());
                            (yyval).setExpr(createValue(no_round, type, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42171 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1022:
#line 6171 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            ITypeInfo * type = getRoundType((yyvsp[-1]).queryExprType());
                            (yyval).setExpr(createValue(no_roundup, type, (yyvsp[-1]).getExpr()));
                        }
#line 42181 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1023:
#line 6177 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createValue(no_sqrt, makeRealType(8), (yyvsp[-1]).getExpr()));
                        }
#line 42190 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1024:
#line 6182 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            ITypeInfo * type = getTruncType((yyvsp[-1]).queryExprType());
                            (yyval).setExpr(createValue(no_truncate, type, (yyvsp[-1]).getExpr()));
                        }
#line 42200 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1025:
#line 6188 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_stringorunicode, false);
                            (yyval).setExpr(createValue(no_charlen, LINK(parser->uint4Type), (yyvsp[-1]).getExpr()));
                        }
#line 42209 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1026:
#line 6193 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_stringorunicode, false);
                            OwnedHqlExpr expr = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr flags = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createTrimExpr(expr, flags));
                        }
#line 42220 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1027:
#line 6200 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_nofold, expr->getType(), expr), (yyvsp[-3]));
                        }
#line 42230 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1028:
#line 6206 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_nocombine, expr->getType(), expr), (yyvsp[-3]));
                        }
#line 42240 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1029:
#line 6212 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_nohoist, expr->getType(), expr), (yyvsp[-3]));
                        }
#line 42250 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1030:
#line 6218 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_nothor, expr->getType(), expr), (yyvsp[-3]));
                        }
#line 42260 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1031:
#line 6224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_abs, expr->getType(), expr), (yyvsp[-3]));
                        }
#line 42270 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1032:
#line 6230 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_int, false);
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            IHqlExpression *len = (yyvsp[-3]).getExpr();
                            IHqlExpression *flen = foldHqlExpression(len);
                            IValue *length = flen->queryValue();
                            unsigned resultSize = UNKNOWN_LENGTH;
                            if (length)
                            {
                                resultSize = (unsigned) length->getIntValue();
                                if ((int) resultSize < 0)
                                {
                                    resultSize = 0;
                                    parser->reportError(ERR_NEGATIVE_WIDTH, (yyvsp[-3]), "INTFORMAT does not support negative widths");
                                }
                            }

                            (yyval).setExpr(createValue(no_intformat, makeStringType(resultSize, NULL, NULL), (yyvsp[-5]).getExpr(), flen, (yyvsp[-1]).getExpr()));
                            len->Release();
                        }
#line 42296 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1033:
#line 6252 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_real, false);
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);

                            OwnedHqlExpr flen = foldHqlExpression((yyvsp[-3]).queryExpr());
                            IValue *length = flen->queryValue();
                            if (length && (length->getIntValue() < 0))
                                parser->reportError(ERR_NEGATIVE_WIDTH, (yyvsp[-3]), "REALFORMAT does not support negative widths");
                            (yyval).setExpr(createValue(no_realformat, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42312 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1034:
#line 6264 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE Could allow ,NOTRIM,OPT,???flags
                            (yyval).setExpr(createValue(no_toxml, makeUtf8Type(UNKNOWN_LENGTH, NULL), (yyvsp[-1]).getExpr()));
                        }
#line 42321 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1035:
#line 6269 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE Could allow ,NOTRIM,OPT,???flags
                            (yyval).setExpr(createValue(no_tojson, makeUtf8Type(UNKNOWN_LENGTH, NULL), (yyvsp[-1]).getExpr()));
                        }
#line 42330 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1036:
#line 6274 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_stringorunicode, false);
                            if(isUnicodeType((yyvsp[-4]).queryExprType()))
                                parser->normalizeExpression((yyvsp[-2]), type_unicode, false);
                            else
                                parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            (yyval).setExpr(createValue(no_regex_find, makeBoolType(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42343 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1037:
#line 6283 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_stringorunicode, false);
                            Owned<ITypeInfo> subType;
                            if(isUnicodeType((yyvsp[-6]).queryExprType()))
                            {
                                parser->normalizeExpression((yyvsp[-4]), type_unicode, false);
                                subType.setown(makeUnicodeType(UNKNOWN_LENGTH, 0));
                            }
                            else
                            {
                                parser->normalizeExpression((yyvsp[-4]), type_string, false);
                                subType.setown(makeStringType(UNKNOWN_LENGTH));
                            }
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            (yyval).setExpr(createValue(no_regex_find, subType.getLink(), (yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42364 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1038:
#line 6300 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_stringorunicode, false);
                            Owned<ITypeInfo> retType;
                            if(isUnicodeType((yyvsp[-4]).queryExprType()))
                            {
                                parser->normalizeExpression((yyvsp[-2]), type_unicode, false);
                                retType.setown(makeUnicodeType(UNKNOWN_LENGTH, (yyvsp[-4]).queryExprType()->queryLocale()));
                            }
                            else
                            {
                                parser->normalizeExpression((yyvsp[-2]), type_string, false);
                                retType.setown(makeStringType(UNKNOWN_LENGTH));
                            }

                            (yyval).setExpr(createValue(no_regex_findset, makeSetType(retType.getLink()), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-6]));
                        }
#line 42385 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1039:
#line 6317 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_stringorunicode, false);
                            Owned<ITypeInfo> retType;
                            if(isUnicodeType((yyvsp[-6]).queryExprType()))
                            {
                                parser->normalizeExpression((yyvsp[-4]), type_unicode, false);
                                parser->normalizeExpression((yyvsp[-2]), type_unicode, false);
                                retType.setown(makeUnicodeType(UNKNOWN_LENGTH, 0));
                            }
                            else
                            {
                                parser->normalizeExpression((yyvsp[-4]), type_string, false);
                                parser->normalizeExpression((yyvsp[-2]), type_string, false);
                                retType.setown(makeStringType(UNKNOWN_LENGTH));
                            }
                            (yyval).setExpr(createValue(no_regex_replace, retType.getLink(), (yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42407 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1040:
#line 6335 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression *expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_asstring, makeStringType(expr->queryType()->getSize(),NULL,NULL), expr));
                        }
#line 42417 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1041:
#line 6341 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression *expr = (yyvsp[-3]).getExpr();
                            ITypeInfo *exprType = expr->queryType();
                            ITypeInfo *type = (yyvsp[-1]).getType();
                            if ((exprType->getSize() != UNKNOWN_LENGTH) && (exprType->getSize() < type->getSize()) && type->getSize() != UNKNOWN_LENGTH)
                                parser->reportError(ERR_TYPETRANS_LARGERTYPE, (yyvsp[-1]), "Type transfer: target type in is larger than source type");
                            (yyval).setExpr(createTypeTransfer(expr, type));
                        }
#line 42431 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1042:
#line 6351 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //User had better know what they are doing
                            (yyval).setExpr(createTypeTransfer((yyvsp[-3]).getExpr(), (yyvsp[-1]).getType()), (yyvsp[-5]));
                        }
#line 42440 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1043:
#line 6356 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //User had better know what they are doing
                            (yyval).setExpr(createTypeTransfer((yyvsp[-3]).getExpr(), (yyvsp[-1]).getType()), (yyvsp[-5]));
                        }
#line 42449 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1044:
#line 6361 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression *e5 = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValueF(no_max, e5->getType(), (yyvsp[-5]).getExpr(), e5, (yyvsp[-2]).getExpr(), NULL));
                        }
#line 42459 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1045:
#line 6367 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression *e5 = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_maxgroup, e5->getType(), e5));
                        }
#line 42469 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1046:
#line 6373 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression *e5 = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValueF(no_min, e5->getType(), (yyvsp[-5]).getExpr(), e5, (yyvsp[-2]).getExpr(), NULL));
                        }
#line 42479 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1047:
#line 6379 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression *e5 = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_mingroup, e5->getType(), e5));
                        }
#line 42489 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1048:
#line 6385 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            OwnedHqlExpr expr = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr scope = (yyvsp[-4]).getExpr();
                            (yyval).setExpr(createValue(no_evaluate, expr->getType(), LINK(scope), LINK(expr)));
                        }
#line 42500 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1049:
#line 6392 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            Owned<ITypeInfo> temp = parser->checkPromoteNumeric((yyvsp[-3]), true);
                            OwnedHqlExpr value = (yyvsp[-3]).getExpr();
                            Owned<ITypeInfo> type = getSumAggType(value);
                            (yyval).setExpr(createValueF(no_sum, LINK(type), (yyvsp[-5]).getExpr(), ensureExprType(value, type), (yyvsp[-2]).getExpr(), NULL));
                        }
#line 42512 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1050:
#line 6400 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            Owned<ITypeInfo> temp = parser->checkPromoteNumeric((yyvsp[-2]), true);
                            OwnedHqlExpr value = (yyvsp[-2]).getExpr();
                            Owned<ITypeInfo> type = getSumAggType(value);
                            (yyval).setExpr(createValueF(no_sumgroup, LINK(type), ensureExprType(value, type), (yyvsp[-1]).getExpr(), NULL));
                        }
#line 42524 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1051:
#line 6408 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            (yyval).setExpr(createValueF(no_ave, makeRealType(8), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr(), NULL));
                        }
#line 42533 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1052:
#line 6413 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);
                            (yyval).setExpr(createValue(no_avegroup, makeRealType(8), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42542 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1053:
#line 6418 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            (yyval).setExpr(createValueF(no_variance, makeRealType(8), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr(), NULL));
                        }
#line 42551 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1054:
#line 6423 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);
                            (yyval).setExpr(createValue(no_vargroup, makeRealType(8), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42560 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1055:
#line 6428 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            (yyval).setExpr(createValueF(no_covariance, makeRealType(8), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr(), NULL));
                        }
#line 42570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1056:
#line 6434 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);
                            (yyval).setExpr(createValue(no_covargroup, makeRealType(8), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42580 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1057:
#line 6440 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            (yyval).setExpr(createValueF(no_correlation, makeRealType(8), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr(), NULL));
                        }
#line 42590 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1058:
#line 6446 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);
                            (yyval).setExpr(createValue(no_corrgroup, makeRealType(8), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42600 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1059:
#line 6452 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createList(no_which, LINK(parser->uint4Type), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 42608 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1060:
#line 6456 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createList(no_rejected, LINK(parser->uint4Type), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 42616 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1061:
#line 6460 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo* type = (yyvsp[-2]).getType();
                            OwnedHqlExpr max = (yyvsp[-1]).getExpr();
                            if (!max)
                                parser->checkSizeof(type,(yyvsp[-4]));

                            //rather easier to create a dummy argument with the correct type.
                            (yyval).setExpr(createValue(no_sizeof, LINK(parser->uint4Type), createValue(no_none, type), max.getClear()));
                        }
#line 42630 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1062:
#line 6470 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr arg = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr max = (yyvsp[-1]).getExpr();
                            if (!max)
                                parser->checkSizeof(arg,(yyvsp[-4]));
                            (yyval).setExpr(createValue(no_sizeof, LINK(parser->uint4Type), arg.getClear(), max.getClear()));
                        }
#line 42642 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1063:
#line 6478 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_SIZEOF_WRONGPARAM, (yyvsp[-3]),"Illegal parameter for SIZEOF"); 
                            (yyval).setExpr(createConstant(1), (yyvsp[-3]));
                        }
#line 42651 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1064:
#line 6483 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]));
                            parser->normalizeExpression((yyvsp[-2]), type_set, false);
                            (yyval).setExpr(createValue(no_rank, LINK(parser->uint4Type), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42661 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1065:
#line 6489 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]));
                            parser->normalizeExpression((yyvsp[-2]), type_set, false);
                            (yyval).setExpr(createValue(no_ranked, LINK(parser->uint4Type), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42671 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1066:
#line 6494 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->getActiveCounter((yyvsp[0])));
                            parser->reportWarning(CategoryDeprecated, SeverityError, ERR_COUNTER_NOT_COUNT, (yyvsp[0]).pos, "Use of COUNT instead of COUNTER is deprecated");
                        }
#line 42680 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1067:
#line 6498 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->getActiveCounter((yyvsp[0])));
                        }
#line 42688 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1068:
#line 6502 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_is_null, makeBoolType(), (yyvsp[-1]).getExpr()));
                        }
#line 42697 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1069:
#line 6507 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_is_valid, makeBoolType(), (yyvsp[-1]).getExpr()));
                        }
#line 42706 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1070:
#line 6512 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportError(ERR_EXPECTED, (yyvsp[-3]), "Not yet supported - needs more work");
                            parser->normalizeExpression((yyvsp[-1]));
                            OwnedHqlExpr value = (yyvsp[-1]).getExpr();
                            if (value->getOperator() != no_param)
                                parser->reportError(ERR_EXPECTED, (yyvsp[-1]), "Expected a parameter as the argument");
                            (yyval).setExpr(createValue(no_isomitted, makeBoolType(), value.getClear()));
                        }
#line 42719 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1071:
#line 6520 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_failcode, makeIntType(4, true))); }
#line 42725 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1072:
#line 6521 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_failcode, makeIntType(4, true))); }
#line 42731 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1073:
#line 6522 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_failmessage, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); }
#line 42737 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1074:
#line 6523 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_failmessage, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); }
#line 42743 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1075:
#line 6525 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_failmessage, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-1]).getExpr()));
                        }
#line 42752 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1076:
#line 6529 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_eventname, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); }
#line 42758 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1077:
#line 6530 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_eventname, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); }
#line 42764 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1078:
#line 6531 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_eventextra, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); }
#line 42770 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1079:
#line 6533 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_eventextra, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); }
#line 42776 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1080:
#line 6535 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_eventextra, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-1]).getExpr()));
                        }
#line 42785 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1081:
#line 6540 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_fail, makeAnyType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42795 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1082:
#line 6546 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkIntegerOrString((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_fail, makeAnyType(), (yyvsp[-1]).getExpr()));
                        }
#line 42804 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1083:
#line 6550 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_fail, makeAnyType()));
                        }
#line 42812 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1084:
#line 6554 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-5]).release();
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_fail, makeAnyType(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42823 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1085:
#line 6561 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-3]).release();
                            parser->normalizeExpression((yyvsp[-1]));
                            parser->checkIntegerOrString((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_fail, makeAnyType(), (yyvsp[-1]).getExpr()));
                        }
#line 42834 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1086:
#line 6568 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-1]).release();
                            (yyval).setExpr(createValue(no_fail, makeAnyType()));
                        }
#line 42843 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1087:
#line 6572 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (!parser->curTransform)
                                parser->reportError(ERR_PARSER_CANNOTRECOVER,(yyvsp[0]),"SKIP is only valid inside a TRANSFORM");
                            (yyval).setExpr(createValue(no_skip, makeAnyType()));
                        }
#line 42853 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1088:
#line 6578 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_fromunicode, makeDataType(UNKNOWN_LENGTH), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42863 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1089:
#line 6584 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->ensureData((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createValue(no_tounicode, makeUnicodeType(UNKNOWN_LENGTH, 0), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 42874 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1090:
#line 6591 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_unicode, false);
                            const char * locale = str((yyvsp[-1]).queryExprType()->queryLocale());
                            (yyval).setExpr(createValue(no_keyunicode, makeDataType(UNKNOWN_LENGTH), (yyvsp[-1]).getExpr(), createConstant(locale), createConstant(3)));
                        }
#line 42884 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1091:
#line 6597 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-1]));
                            parser->ensureString((yyvsp[-1]));
                            Owned<IHqlExpression> lexpr = (yyvsp[-1]).getExpr();
                            Owned<ITypeInfo> ltype = lexpr->getType();
                            Owned<IHqlExpression> locale = (ltype->getTypeCode() == type_varstring) ? lexpr.getLink() : createValue(no_implicitcast, makeVarStringType(ltype->getStringLen()), lexpr.getLink());
                            (yyval).setExpr(createValue(no_keyunicode, makeDataType(UNKNOWN_LENGTH), (yyvsp[-3]).getExpr(), locale.getLink(), createConstant(3)));
                        }
#line 42898 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1092:
#line 6607 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            const char * locale = str((yyvsp[-4]).queryExprType()->queryLocale());
                            (yyval).setExpr(createValue(no_keyunicode, makeDataType(UNKNOWN_LENGTH), (yyvsp[-4]).getExpr(), createConstant(locale), (yyvsp[-1]).getExpr()));
                        }
#line 42909 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1093:
#line 6614 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            parser->ensureString((yyvsp[-3]));
                            Owned<IHqlExpression> lexpr = (yyvsp[-3]).getExpr();
                            Owned<ITypeInfo> ltype = lexpr->getType();
                            Owned<IHqlExpression> locale = (ltype->getTypeCode() == type_varstring) ? lexpr.getLink() : createValue(no_implicitcast, makeVarStringType(ltype->getStringLen()), lexpr.getLink());
                            (yyval).setExpr(createValue(no_keyunicode, makeDataType(UNKNOWN_LENGTH), (yyvsp[-5]).getExpr(), locale.getLink(), (yyvsp[-1]).getExpr()));
                        }
#line 42924 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1094:
#line 6625 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matched, makeBoolType(), (yyvsp[-1]).getExpr())); //, parser->createUniqueId()));
                        }
#line 42932 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1095:
#line 6629 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matched_injoin, makeBoolType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 42940 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1096:
#line 6633 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matched_injoin, makeBoolType(), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 42948 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1097:
#line 6637 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchtext, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-1]).getExpr())); //, parser->createUniqueId()));
                        }
#line 42956 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1098:
#line 6641 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchunicode, makeUnicodeType(UNKNOWN_LENGTH, NULL), (yyvsp[-1]).getExpr())); //, parser->createUniqueId()));
                        }
#line 42964 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1099:
#line 6645 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchutf8, makeUtf8Type(UNKNOWN_LENGTH, NULL), (yyvsp[-1]).getExpr())); //, parser->createUniqueId()));
                        }
#line 42972 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1100:
#line 6649 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchlength, LINK(parser->uint4Type), (yyvsp[-1]).getExpr())); //, parser->createUniqueId()));
                        }
#line 42980 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1101:
#line 6653 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchposition, LINK(parser->uint4Type), (yyvsp[-1]).getExpr())); //, parser->createUniqueId()));
                        }
#line 42988 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1102:
#line 6657 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matched, makeBoolType())); //, parser->createUniqueId()));
                        }
#line 42996 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1103:
#line 6661 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchtext, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); //, parser->createUniqueId()));
                        }
#line 43004 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1104:
#line 6665 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchunicode, makeUnicodeType(UNKNOWN_LENGTH, NULL))); //, parser->createUniqueId()));
                        }
#line 43012 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1105:
#line 6669 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchutf8, makeUtf8Type(UNKNOWN_LENGTH, NULL))); //, parser->createUniqueId()));
                        }
#line 43020 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1106:
#line 6673 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchlength, LINK(parser->uint4Type))); //, parser->createUniqueId()));
                        }
#line 43028 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1107:
#line 6677 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchposition, LINK(parser->uint4Type))); //, parser->createUniqueId()));
                        }
#line 43036 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1108:
#line 6681 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matched, makeBoolType())); //, parser->createUniqueId()));
                        }
#line 43044 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1109:
#line 6685 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchtext, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); //, parser->createUniqueId()));
                        }
#line 43052 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1110:
#line 6689 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchunicode, makeUnicodeType(UNKNOWN_LENGTH, NULL))); //, parser->createUniqueId()));
                        }
#line 43060 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1111:
#line 6693 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchutf8, makeUtf8Type(UNKNOWN_LENGTH, NULL))); //, parser->createUniqueId()));
                        }
#line 43068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1112:
#line 6697 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchlength, LINK(parser->uint4Type))); //, parser->createUniqueId()));
                        }
#line 43076 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1113:
#line 6701 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matchposition, LINK(parser->uint4Type))); //, parser->createUniqueId()));
                        }
#line 43084 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1114:
#line 6705 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(parser->createCheckMatchAttr((yyvsp[-1]), type_string));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43094 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1115:
#line 6711 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(parser->createCheckMatchAttr((yyvsp[-1]), type_unicode));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43104 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1116:
#line 6717 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(parser->createCheckMatchAttr((yyvsp[-1]), type_utf8));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43114 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1117:
#line 6723 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createCheckMatchAttr((yyvsp[-1]), type_string));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43123 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1118:
#line 6728 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createCheckMatchAttr((yyvsp[-1]), type_unicode));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43132 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1119:
#line 6733 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createCheckMatchAttr((yyvsp[-1]), type_utf8));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43141 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1120:
#line 6738 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_rowdiff, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 43149 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1121:
#line 6741 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_wuid, makeStringType(UNKNOWN_LENGTH, NULL, NULL))); }
#line 43155 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1122:
#line 6743 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_stringorunicode, false);
                            ITypeInfo * type = isUnicodeType((yyvsp[-1]).queryExprType()) ? makeUnicodeType(UNKNOWN_LENGTH, NULL) : makeStringType(UNKNOWN_LENGTH, NULL, NULL);
                            (yyval).setExpr(createValue(no_xmldecode, type, (yyvsp[-1]).getExpr()));
                        }
#line 43165 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1123:
#line 6749 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_stringorunicode, false);
                            ITypeInfo * type = isUnicodeType((yyvsp[-2]).queryExprType()) ? makeUnicodeType(UNKNOWN_LENGTH, NULL) : makeStringType(UNKNOWN_LENGTH, NULL, NULL);
                            (yyval).setExpr(createValue(no_xmlencode, type, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 43175 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1124:
#line 6755 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            parser->validateXPath((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_xmltext, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-1]).getExpr(), parser->createUniqueId()));
                        }
#line 43185 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1125:
#line 6761 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            parser->validateXPath((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_xmlunicode, makeUnicodeType(UNKNOWN_LENGTH, NULL), (yyvsp[-1]).getExpr(), parser->createUniqueId()));
                        }
#line 43195 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1126:
#line 6767 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * e = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_assertkeyed, e->getType(), e));
                        }
#line 43205 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1127:
#line 6773 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression * e = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_assertkeyed, e->getType(), e, createAttribute(extendAtom)));
                        }
#line 43215 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1128:
#line 6779 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * e = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_assertstepped, e->getType(), e));
                        }
#line 43225 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1129:
#line 6785 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * e = (yyvsp[-1]).getExpr();
                            if (e->getOperator() != no_select)
                                parser->reportError(ERR_EXPECTED, (yyvsp[-2]), "WILD requires a key field as a parameter");
                            (yyval).setExpr(createValue(no_assertwild, makeBoolType(), e));
                        }
#line 43237 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1130:
#line 6793 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[-1]));
                            ITypeInfo * type = parser->promoteToSameType((yyvsp[-3]), (yyvsp[-1]));
                            (yyval).setExpr(createValue(no_catch, type, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 43248 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1131:
#line 6800 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            //Not public! only for internal testing.
                            (yyval).setExpr(createCompound((yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 43259 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1132:
#line 6807 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]));
                            OwnedHqlExpr options = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr expr = (yyvsp[-4]).getExpr();
                            if (options)
                                (yyval).setExpr(createValueF(no_executewhen, expr->getType(), LINK(expr), (yyvsp[-2]).getExpr(), options.getClear(), NULL), (yyvsp[-6]));
                            else
                                (yyval).setExpr(createCompound((yyvsp[-2]).getExpr(), expr.getClear()), (yyvsp[-6]));
                        }
#line 43273 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1133:
#line 6817 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createAliasOwn((yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43283 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1134:
#line 6823 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_clustersize, makeIntType(4, false)));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 43292 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1135:
#line 6828 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createConstant(CHOOSEN_ALL_LIMIT));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 43301 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1136:
#line 6833 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_any, true);
                            OwnedHqlExpr seq = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr name;
                            if (isStringType(seq->queryType()))
                            {
                                name.set(seq);
                                seq.setown(createConstant(0));
                            }
                            if (name)
                                name.setown(createExprAttribute(namedAtom, LINK(name)));
                            (yyval).setExpr(createValue(no_getresult, (yyvsp[-1]).getType(), createExprAttribute(sequenceAtom, LINK(seq)), LINK(name)));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 43320 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1137:
#line 6848 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_forcelocal, expr->getType(), expr));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43331 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1138:
#line 6855 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_forcenolocal, expr->getType(), expr));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43342 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1139:
#line 6862 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            IHqlExpression * expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_thisnode, expr->getType(), expr));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43353 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1140:
#line 6869 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr list = parser->createListFromExpressionList((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_countlist, LINK(parser->defaultIntegralType), LINK(list)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43363 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1141:
#line 6875 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (parser->isSingleValuedExpressionList((yyvsp[-1])))
                                parser->reportWarning(CategoryMistake, WRN_SILLY_EXISTS,(yyvsp[-3]).pos,"EXISTS() on a scalar expression is always true, was this intended?");

                            OwnedHqlExpr list = parser->createListFromExpressionList((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_existslist, makeBoolType(), LINK(list)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43376 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1142:
#line 6884 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr list = parser->createListFromExpressionList((yyvsp[-1]));
                            ITypeInfo * elemType = parser->queryElementType((yyvsp[-1]), list);
                            Owned<ITypeInfo> sumType = getSumAggType(elemType);
                            (yyval).setExpr(createValue(no_sumlist, LINK(sumType), LINK(list)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43388 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1143:
#line 6892 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr list = parser->createListFromExpressionList((yyvsp[-1]));
                            ITypeInfo * elemType = parser->queryElementType((yyvsp[-1]), list);
                            (yyval).setExpr(createValue(no_maxlist, LINK(elemType), LINK(list)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43399 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1144:
#line 6899 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr list = parser->createListFromExpressionList((yyvsp[-1]));
                            ITypeInfo * elemType = parser->queryElementType((yyvsp[-1]), list);
                            (yyval).setExpr(createValue(no_minlist, LINK(elemType), LINK(list)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43410 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1145:
#line 6906 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr list = parser->createListFromExpressionList((yyvsp[-1]));
                            (yyval).setExpr(parser->createAveList((yyvsp[-1]), list));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43420 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1146:
#line 6912 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_nameof, makeStringType(UNKNOWN_LENGTH, NULL, NULL), (yyvsp[-1]).getExpr()));
                        }
#line 43428 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1147:
#line 6916 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-1]), type_unicode, false);
                            ::Release(parser->checkPromoteType((yyvsp[-3]), (yyvsp[-1])));
                            IAtom * locale = parser->ensureCommonLocale((yyvsp[-3]), (yyvsp[-1]));
                            (yyval).setExpr(createValue(no_unicodeorder, makeIntType(4, true), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr(), createConstant(str(locale)), createConstant(3)));
                        }
#line 43440 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1148:
#line 6924 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-3]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-1]));
                            parser->ensureString((yyvsp[-1]));
                            ::Release(parser->checkPromoteType((yyvsp[-5]), (yyvsp[-3])));
                            Owned<IHqlExpression> lexpr = (yyvsp[-1]).getExpr();
                            Owned<ITypeInfo> ltype = lexpr->getType();
                            Owned<IHqlExpression> locale = (ltype->getTypeCode() == type_varstring) ? lexpr.getLink() : createValue(no_implicitcast, makeVarStringType(ltype->getStringLen()), lexpr.getLink());
                            (yyval).setExpr(createValue(no_unicodeorder, makeIntType(4, true), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), locale.getLink(), createConstant(3)));
                        }
#line 43456 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1149:
#line 6936 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-4]), type_unicode, false);
                            IAtom * locale = parser->ensureCommonLocale((yyvsp[-6]), (yyvsp[-4]));
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            ::Release(parser->checkPromoteType((yyvsp[-6]), (yyvsp[-4])));
                            (yyval).setExpr(createValue(no_unicodeorder, makeIntType(4, true), (yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), createConstant(str(locale)), (yyvsp[-1]).getExpr()));
                        }
#line 43469 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1150:
#line 6945 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-5]), type_unicode, false);
                            parser->normalizeExpression((yyvsp[-3]));
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            parser->ensureString((yyvsp[-3]));
                            ::Release(parser->checkPromoteType((yyvsp[-7]), (yyvsp[-5])));
                            Owned<IHqlExpression> lexpr = (yyvsp[-3]).getExpr();
                            Owned<ITypeInfo> ltype = lexpr->getType();
                            Owned<IHqlExpression> locale = (ltype->getTypeCode() == type_varstring) ? lexpr.getLink() : createValue(no_implicitcast, makeVarStringType(ltype->getStringLen()), lexpr.getLink());
                            (yyval).setExpr(createValue(no_unicodeorder, makeIntType(4, true), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), locale.getLink(), (yyvsp[-1]).getExpr()));
                         }
#line 43486 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1151:
#line 6958 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_likely, makeBoolType(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43495 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1152:
#line 6963 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, true);
                            OwnedHqlExpr probability = (yyvsp[-1]).getExpr();
                            if (probability->queryValue())
                            {
                                double p = probability->queryValue()->getRealValue();
                                if (p <= 0.0 || p >= 1.0)
                                    parser->reportError(ERR_PROBABILITY_RANGE, (yyvsp[-1]), "Probability parameter for LIKELY must be within 0.0 to 1.0 range");
                            }
                            (yyval).setExpr(createValue(no_likely, makeBoolType(), (yyvsp[-3]).getExpr(), probability.getClear()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 43512 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1153:
#line 6976 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_unlikely, makeBoolType(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43521 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1154:
#line 6981 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            OwnedHqlExpr fields = parser->processSortList((yyvsp[-1]), no_list, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(fields.getClear(), (yyvsp[-3]));
                        }
#line 43532 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1155:
#line 6987 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createList(no_list, makeSetType(NULL), NULL));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 43541 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1156:
#line 6991 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_all, makeSetType(NULL), NULL));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 43550 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1157:
#line 6996 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_scalar, false);
                            IHqlExpression * ds = (yyvsp[-4]).getExpr();
                            IHqlExpression * field = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createValue(no_createset, makeSetType(field->getType()), ds, field));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 43562 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1158:
#line 7004 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_stringorunicode, false);
                            (yyval).setExpr(createValue(no_getenv, makeVarStringType(UNKNOWN_LENGTH), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 43571 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1159:
#line 7009 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_stringorunicode, false);
                            parser->normalizeExpression((yyvsp[-1]), type_stringorunicode, false);
                            (yyval).setExpr(createValue(no_getenv, makeVarStringType(UNKNOWN_LENGTH), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()), (yyvsp[-5]));
                        }
#line 43581 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1160:
#line 7015 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_debug_option_value, makeBoolType(), createConstant("standAloneExe")));
                        }
#line 43589 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1161:
#line 7019 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_debug_option_value, makeStringType(UNKNOWN_LENGTH, NULL), (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 43597 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1162:
#line 7023 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_debug_option_value, (yyvsp[-1]).getType(), (yyvsp[-3]).getExpr()), (yyvsp[-5]));
                        }
#line 43605 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1163:
#line 7027 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr option = createConstant("targetClusterType");
                            (yyval).setExpr(createValue(no_debug_option_value, makeStringType(UNKNOWN_LENGTH, NULL), option.getClear()), (yyvsp[0]));
                        }
#line 43614 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1164:
#line 7032 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->getTargetPlatformExpr(), (yyvsp[0]));
                        }
#line 43622 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1165:
#line 7038 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 43628 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1166:
#line 7039 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(countAtom)); }
#line 43634 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1167:
#line 7043 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushTopScope((yyvsp[0]).queryExpr());
                            (yyval).setExpr((yyvsp[0]).getExpr());
                            parser->insideEvaluate = true;
                        }
#line 43644 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1168:
#line 7053 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[0]));  //
                        }
#line 43652 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1169:
#line 7057 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr alienExpr;
                            OwnedHqlExpr args = (yyvsp[0]).getExpr();
                            if ((yyvsp[-2]).queryExpr()->isFunction())
                            {
                                alienExpr.setown(parser->bindParameters((yyvsp[-2]), args.getClear()));
                            }
                            else
                            {
                                if (args)
                                    parser->reportError(ERR_TYPE_NOPARAMNEEDED, (yyvsp[-2]), "Type does not require parameters: %s", str((yyvsp[-2]).queryExpr()->queryName()));
                                alienExpr.setown((yyvsp[-2]).getExpr());
                            }
                            (yyval).setType(makeModifier(alienExpr->getType(), typemod_indirect, LINK(alienExpr)));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 43673 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1173:
#line 7083 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 43682 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1178:
#line 7092 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr rhs = (yyvsp[0]).getExpr();
                            IHqlExpression * field = queryFieldFromSelect(rhs);
                            //This way to ensure backward compatibility of the eclcrc
                            (yyval).setExpr(createSelectExpr(getActiveTableSelector(), LINK(field)));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 43694 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1179:
#line 7103 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createSelect((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), (yyvsp[-2])), (yyvsp[-2]));
                        }
#line 43702 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1180:
#line 7107 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createSelect((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), (yyvsp[-2])), (yyvsp[-2]));
                        }
#line 43710 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1181:
#line 7111 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createIndirectSelect((yyvsp[-4]).getExpr(), (yyvsp[-1]).getExpr(), (yyvsp[-4])), (yyvsp[-4]));
                        }
#line 43718 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1182:
#line 7117 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 43724 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1183:
#line 7118 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(maxAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 43733 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1184:
#line 7122 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(minAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 43742 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1185:
#line 7130 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            parser->counterStack.append(* new OwnedHqlExprItem); 
                            (yyval).clear();
                        }
#line 43751 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1186:
#line 7137 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                            if (parser->counterStack.ordinality())
                            {
                                (yyval).setExpr(parser->counterStack.tos().value.getClear());
                                parser->counterStack.pop();
                            }
                        }
#line 43764 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1187:
#line 7148 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 43770 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1188:
#line 7149 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(descAtom)); }
#line 43776 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1189:
#line 7153 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 43782 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1190:
#line 7154 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 43788 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1191:
#line 7158 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 43794 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1192:
#line 7159 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(noCaseAtom)); }
#line 43800 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1193:
#line 7163 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 43806 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1194:
#line 7164 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(allAtom)); }
#line 43812 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1195:
#line 7168 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 43818 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1196:
#line 7170 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 43826 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1197:
#line 7176 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(keyedAtom), (yyvsp[0])); }
#line 43832 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1201:
#line 7184 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval) = (yyvsp[-1]); }
#line 43838 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1203:
#line 7189 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 43844 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1204:
#line 7194 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr expr = (yyvsp[-1]).getExpr();
                            parser->modScope.set(expr->queryScope());
                            (yyval).setExpr(parser->checkConcreteModule((yyvsp[-1]), expr));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 43855 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1205:
#line 7201 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createNullScope());
                        }
#line 43863 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1206:
#line 7207 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->outerScopeAccessDepth = 1;
                            (yyval).clear();
                        }
#line 43872 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1207:
#line 7212 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ++parser->outerScopeAccessDepth;
                            (yyval).clear();
                        }
#line 43881 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1208:
#line 7219 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *expr = (yyvsp[0]).getExpr();
                            (yyval).setExpr(expr);
                        }
#line 43890 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1209:
#line 7224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            IHqlExpression *expr = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(expr, (yyvsp[-1]));
                        }
#line 43900 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1210:
#line 7230 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * scopeExpr = queryExpression(parser->globalScope);
                            (yyval).setExpr(LINK(scopeExpr), (yyvsp[0]));
                        }
#line 43909 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1211:
#line 7235 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 43917 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1212:
#line 7239 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-1]));
                        }
#line 43926 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1213:
#line 7244 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr value = (yyvsp[0]).getExpr();
                            IHqlExpression * func;
                            IHqlExpression * params = NULL;
                            if (value->getOperator() == no_comma)
                            {
                                func = value->queryChild(0);
                                params = value->queryChild(1);
                            }
                            else
                                func = value;
                            IHqlExpression * expr = parser->bindParameters((yyvsp[0]), func, params);
                            (yyval).setExpr(expr, (yyvsp[0]));
                        }
#line 43945 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1214:
#line 7259 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr storedScope = parser->createStoredModule((yyvsp[-1]), scope);
                            (yyval).setExpr(storedScope.getClear());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 43956 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1216:
#line 7267 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 43964 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1217:
#line 7271 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Need to create a library definition from referenced attribute, adding the name/internal attribute
                            //and then bind it to create the library instance.
                            OwnedHqlExpr name = (yyvsp[-6]).getExpr();
                            OwnedHqlExpr func = (yyvsp[-4]).getExpr();
                            HqlExprArray actuals;
                            (yyvsp[-1]).unwindCommaList(actuals);
                            (yyval).setExpr(parser->createLibraryInstance((yyvsp[-8]), name, func, actuals));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 43979 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1218:
#line 7282 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr value = (yyvsp[-1]).getExpr();
                            IHqlExpression * func;
                            HqlExprArray actuals;
                            if (value->getOperator() == no_comma)
                            {
                                func = value->queryChild(0);
                                value->queryChild(1)->unwindList(actuals, no_comma);
                            }
                            else
                                func = value;

                            //Need to create a library definition from referenced attribute, adding the name/internal attribute
                            //and then bind it to create the library instance.
                            OwnedHqlExpr name = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(parser->createLibraryInstance((yyvsp[-5]), name, func, actuals));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 44002 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1219:
#line 7301 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 44011 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1220:
#line 7306 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr trueExpr = (yyvsp[-3]).getExpr();
                            OwnedITypeInfo scopeType = trueExpr->getType();  // actually needs to be the common base class.
                            OwnedHqlExpr module = createValue(no_if, scopeType.getClear(), (yyvsp[-5]).getExpr(), LINK(trueExpr), (yyvsp[-1]).getExpr());
                            (yyval).setExpr(createDelayedScope(module.getClear()), (yyvsp[-7]));
                        }
#line 44022 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1221:
#line 7316 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 44030 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1222:
#line 7320 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Slightly ugly that we need this production to common up the code
                            //but otherwise we get s/r errors
                            OwnedHqlExpr parms = (yyvsp[-1]).getExpr();
                            //NB: Do not call createComma() incase the first argument is a dataset
                            if (parms)
                                (yyval).setExpr(createValue(no_comma, (yyvsp[-4]).getExpr(), parms.getClear()), (yyvsp[-4]));
                            else
                                (yyval).setExpr((yyvsp[-4]).getExpr(), (yyvsp[-4]));
                        }
#line 44045 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1223:
#line 7334 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            //default name of library implementation name
                            (yyval).setExpr(createExprAttribute(nameAtom, (yyvsp[0]).getExpr()));
                        }
#line 44055 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1224:
#line 7340 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //want to create a name based on the name of the scope reference, but one that will be commmoned up between all
                            //internal instances of the same library.
                            OwnedHqlExpr internal = (yyvsp[-1]).getExpr();
                            IAtom * name = internal->queryName();
                            StringBuffer nameText;
                            nameText.append("lib").append(name).append("_").append(getExpressionCRC(internal));
                            OwnedHqlExpr nameExpr = createExprAttribute(nameAtom, createConstant(nameText.str()));
                            (yyval).setExpr(createComma(nameExpr.getClear(), createExprAttribute(internalAtom, internal.getClear()), createAttribute(_original_Atom, createAttribute(name))));
                        }
#line 44070 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1225:
#line 7353 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->dotScope.clear();
                            parser->modScope.clear();
                            parser->outerScopeAccessDepth = 0;
                            (yyval).clear();
                        }
#line 44081 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1226:
#line 7362 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 44087 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1227:
#line 7364 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 44096 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1228:
#line 7371 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(optAtom)); (yyval).setPosition((yyvsp[0])); }
#line 44102 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1229:
#line 7373 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createId((yyvsp[0]).getId()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 44111 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1230:
#line 7382 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e1 = (yyvsp[-2]).getExpr();
                            IHqlExpression *e3 = (yyvsp[-1]).getExpr();
                            assertex(e1 && e1->getOperator() != no_record);

                            if (e3->getOperator() == no_field)
                                (yyval).setExpr(parser->createSelect(e1, e3, (yyvsp[-1])), (yyvsp[-2]));
                            else
                            {
                                e1->Release();      // some error occurred elsewhere
                                (yyval).setExpr(e3, (yyvsp[-2]));
                            }
                        }
#line 44129 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1231:
#line 7396 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e1 = (yyvsp[-4]).getExpr();
                            IHqlExpression *e3 = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->createIndirectSelect(e1, e3, (yyvsp[-1])), (yyvsp[-4]));
                        }
#line 44139 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1234:
#line 7407 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //This means look id up in the current top scope.  It doesn't make sense if there is no active dataset
                            OwnedHqlExpr rhs = (yyvsp[-1]).getExpr();
                            IHqlExpression *top = parser->queryTopScope();
                            if (top && top->queryRecord())
                            {
                                (yyval).setExpr(parser->createIndirectSelect(LINK(top), rhs.getClear(), (yyvsp[-2])));
                            }
                            else
                            {
                                IIdAtom * name = parser->createFieldNameFromExpr(rhs);
                                const char * text = name ? str(name) : "?";
                                parser->reportError(ERR_OBJ_NOACTIVEDATASET, (yyvsp[-2]), "No active dataset to resolve field '%s'", text);
                                (yyval).setExpr(createNullExpr(rhs));
                            }
                        }
#line 44160 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1235:
#line 7424 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-2]));
                        }
#line 44169 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1236:
#line 7429 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-2]));
                        }
#line 44177 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1237:
#line 7433 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-4]));
                        }
#line 44186 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1238:
#line 7438 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 44194 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1239:
#line 7442 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()));
                        }
#line 44202 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1241:
#line 7450 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr lhs = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr rhs = (yyvsp[0]).getExpr();
                            OwnedHqlExpr normRhs = parser->checkEnsureRecordsMatch(lhs, rhs, (yyvsp[-1]).pos, rhs->isDatarow());
                            (yyval).setExpr(createComma(lhs.getClear(), normRhs.getClear()), (yyvsp[-2]));
                        }
#line 44213 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1244:
#line 7465 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * expr = (yyvsp[-1]).queryExpr();
                            if (expr->isConstant() && !expr->queryType()->isInteger())
                                parser->reportWarning(CategoryMistake, WRN_INT_OR_RANGE_EXPECTED, (yyvsp[-1]).pos, "Floating point index used. Was an index range intended instead?");
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createRow(no_selectnth, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 44225 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1245:
#line 7473 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            OwnedHqlExpr dict = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr row = createValue(no_rowvalue, makeNullType(), args);
                            (yyval).setExpr(createSelectMapRow(*parser->errorHandler, (yyvsp[-1]).pos, dict, row));
                        }
#line 44237 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1246:
#line 7481 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createRow(no_selectnth, (yyvsp[-4]).getExpr(), createComma((yyvsp[-1]).getExpr(), createAttribute(noBoundCheckAtom))));
                        }
#line 44246 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1247:
#line 7486 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e1 = (yyvsp[-2]).getExpr();
                            IHqlExpression *e2 = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->createSelect(e1, e2, (yyvsp[-1])));
                        }
#line 44256 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1248:
#line 7492 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e1 = (yyvsp[-2]).getExpr();
                            IHqlExpression *e2 = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->createSelect(e1, e2, (yyvsp[-1])));
                        }
#line 44266 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1249:
#line 7498 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 44275 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1250:
#line 7503 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 44283 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1251:
#line 7507 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()));
                        }
#line 44291 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1253:
#line 7512 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 44300 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1254:
#line 7517 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44310 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1255:
#line 7523 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 44319 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1257:
#line 7531 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->getSelector((yyvsp[0]), no_left), (yyvsp[0]));
                        }
#line 44327 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1258:
#line 7534 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->getSelector((yyvsp[0]), no_right), (yyvsp[0]));
                        }
#line 44335 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1259:
#line 7538 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Slightly bizarre syntax - really only here for the merge transform of a user defined aggregate
                            IHqlExpression *right = parser->queryRightScope();
                            if (right)
                            {
                                OwnedHqlExpr selSeq = parser->getSelectorSequence();
                                OwnedHqlExpr selector = createSelector(no_right, right, selSeq);
                                OwnedHqlExpr rows = parser->resolveRows((yyvsp[0]), selector);
                                OwnedHqlExpr index = createConstant(createIntValue((yyvsp[0]).getInt(), LINK(parser->defaultIntegralType)));
                                (yyval).setExpr(createRow(no_selectnth, rows.getClear(), index.getClear()), (yyvsp[0]));
                            }
                            else
                            {
                                parser->reportError(ERR_RIGHT_ILL_HERE, (yyvsp[0]), "RIGHT not legal here");
                                (yyval).setExpr(createRow(no_null, LINK(queryNullRecord())), (yyvsp[0]));
                            }
                        }
#line 44357 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1260:
#line 7556 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processIfProduction((yyvsp[-5]), (yyvsp[-3]), &(yyvsp[-1])), (yyvsp[-7]));
                        }
#line 44365 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1261:
#line 7560 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processIfProduction((yyvsp[-3]), (yyvsp[-1]), NULL), (yyvsp[-5]));
                        }
#line 44373 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1262:
#line 7564 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->ensureDataset((yyvsp[-3]));
                            parser->ensureDataset((yyvsp[-1]));
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-5]), (yyvsp[-3]), &(yyvsp[-1]));
                            (yyval).setExpr(createRow(no_selectnth, ds.getClear(), getSizetConstant(1)), (yyvsp[-7]));
                        }
#line 44384 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1263:
#line 7571 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->ensureDataset((yyvsp[-1]));
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-3]), (yyvsp[-1]), NULL);
                            (yyval).setExpr(createRow(no_selectnth, ds.getClear(), getSizetConstant(1)), (yyvsp[-5]));
                        }
#line 44394 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1264:
#line 7577 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]));
                            parser->normalizeExpression((yyvsp[-5]));
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression * ds = createDataset(no_httpcall, (yyvsp[-7]).getExpr(), createComma((yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setExpr(createRow(no_selectnth, ds, createConstantOne()));
                        }
#line 44406 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1265:
#line 7585 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]));
                            parser->normalizeExpression((yyvsp[-7]));
                            parser->normalizeExpression((yyvsp[-5]));
                            IHqlExpression * ds = createDataset(no_httpcall, (yyvsp[-9]).getExpr(), createComma((yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setExpr(createRow(no_selectnth, ds, createConstantOne()));
                        }
#line 44418 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1266:
#line 7593 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]));
                            parser->checkSoapRecord((yyvsp[-3]));
                            IHqlExpression * ds = createDataset(no_soapcall, (yyvsp[-7]).getExpr(), createComma((yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setExpr(createRow(no_selectnth, ds, createConstantOne()));
                        }
#line 44429 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1267:
#line 7600 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]));
                            parser->normalizeExpression((yyvsp[-7]));
                            parser->checkSoapRecord((yyvsp[-5]));
                            IHqlExpression * ds = createDataset(no_soapcall, (yyvsp[-9]).getExpr(), createComma((yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setExpr(createRow(no_selectnth, ds, createConstantOne()));
                            parser->checkOnFailRecord((yyval).queryExpr(), (yyvsp[-11]));
                        }
#line 44442 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1268:
#line 7609 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]));
                            parser->normalizeExpression((yyvsp[-7]));
                            IHqlExpression * ds = createDataset(no_newsoapcall, (yyvsp[-9]).getExpr(), createComma((yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setExpr(createRow(no_selectnth, ds, createConstantOne()));
                        }
#line 44453 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1269:
#line 7616 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-11]));
                            parser->normalizeExpression((yyvsp[-9]));
                            IHqlExpression * ds = createDataset(no_newsoapcall, (yyvsp[-11]).getExpr(), createComma((yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), createComma((yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr())));
                            (yyval).setExpr(createRow(no_selectnth, ds, createConstantOne()));
                            parser->checkOnFailRecord((yyval).queryExpr(), (yyvsp[-13]));
                        }
#line 44465 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1270:
#line 7624 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr row = createRow(no_temprow, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr());
                            (yyval).setExpr(convertTempRowToCreateRow(*parser->errorHandler, (yyvsp[-3]).pos, row));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 44475 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1271:
#line 7630 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr row = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr record = (yyvsp[-2]).getExpr();
                            (yyvsp[0]).release();
                            OwnedHqlExpr transform = parser->createDefaultAssignTransform(record, row, (yyvsp[-2]));
                            (yyval).setExpr(createRow(no_createrow, transform.getClear()), (yyvsp[-6]));
                        }
#line 44487 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1272:
#line 7638 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createProjectRow((yyvsp[-4]), (yyvsp[-2]), (yyvsp[0])), (yyvsp[-6]));
                        }
#line 44495 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1273:
#line 7642 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr transform = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createRow(no_createrow, transform.getClear()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44505 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1274:
#line 7648 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkSoapRecord((yyvsp[-1]));
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createRow(no_createrow, convertRecordToTransform(record, false)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44516 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1275:
#line 7655 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(ensureActiveRow(ds));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44526 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1276:
#line 7661 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr transform = parser->createClearTransform(record, (yyvsp[0]));
                            (yyval).setExpr(createRow(no_createrow, LINK(transform)));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 44537 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1277:
#line 7668 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createProjectRow((yyvsp[-4]), (yyvsp[-2]), (yyvsp[0])), (yyvsp[-6]));
                        }
#line 44545 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1278:
#line 7672 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_globalscope, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 44554 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1279:
#line 7677 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            (yyval).setExpr(createRow(no_globalscope, (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 44564 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1280:
#line 7683 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_nofold, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44573 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1281:
#line 7688 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_nocombine, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44582 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1282:
#line 7693 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_nohoist, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44591 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1283:
#line 7698 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_forcelocal, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44600 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1284:
#line 7703 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_forcenolocal, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44609 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1285:
#line 7708 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_allnodes, (yyvsp[-2]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 44618 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1286:
#line 7713 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createRow(no_thisnode, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44627 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1287:
#line 7718 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression *expr = (yyvsp[-3]).getExpr();
                            IHqlExpression *record = (yyvsp[-1]).getExpr();
//                          if ((exprType->getSize() != UNKNOWN_LENGTH) && (exprType->getSize() < type->getSize()) && type->getSize() != UNKNOWN_LENGTH)
//                              parser->reportError(ERR_TYPETRANS_LARGERTYPE, $5, "Type transfer: target type in is larger than source type");
                            (yyval).setExpr(createRow(no_typetransfer, record, expr));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 44641 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1288:
#line 7728 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAliasOwn((yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44650 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1289:
#line 7733 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (!parser->curTransform)
                                parser->reportError(ERR_PARSER_CANNOTRECOVER,(yyvsp[-4]),"SKIP is only valid inside a TRANSFORM");
                            (yyval).setExpr(createRow(no_skip, (yyvsp[-1]).getExpr()));
                        }
#line 44660 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1290:
#line 7739 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * record = (yyvsp[-1]).queryExpr()->queryRecord();
                            if (!record)
                            {
                                parser->reportError(ERR_NOT_ROW_RULE,(yyvsp[-3]),"Referenced rule does not have a associated row");
                                record = queryNullRecord();
                            }

                            (yyval).setExpr(createRow(no_matchrow, LINK(record), (yyvsp[-1]).getExpr())); //, parser->createUniqueId())));
                        }
#line 44675 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1291:
#line 7750 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_stringorunicode, false);
                            IHqlExpression * onFail = queryAttributeInList(onFailAtom, (yyvsp[-1]).queryExpr());
                            if (onFail)
                                parser->checkRecordTypesMatch((yyvsp[-4]).queryExpr(), onFail->queryChild(0), (yyvsp[-1]));
                            (yyval).setExpr(createRow(no_fromxml, (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())), (yyvsp[-6]));
                        }
#line 44687 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1292:
#line 7758 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_stringorunicode, false);
                            IHqlExpression * onFail = queryAttributeInList(onFailAtom, (yyvsp[-1]).queryExpr());
                            if (onFail)
                                parser->checkRecordTypesMatch((yyvsp[-4]).queryExpr(), onFail->queryChild(0), (yyvsp[-1]));
                            (yyval).setExpr(createRow(no_fromjson, (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())), (yyvsp[-6]));
                        }
#line 44699 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1293:
#line 7766 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr options = (yyvsp[-1]).getExpr();
                            if (options)
                                (yyval).setExpr(createRow(no_executewhen, (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), options.getClear())), (yyvsp[-6]));
                            else
                                (yyval).setExpr(createCompound((yyvsp[-2]).getExpr(), (yyvsp[-4]).getExpr()), (yyvsp[-6]));
                        }
#line 44711 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1294:
#line 7774 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            OwnedHqlExpr elseExpr = (yyvsp[-1]).getExpr();
                            (yyvsp[-3]).unwindCommaList(args);

                            parser->ensureMapToRecordsMatch(elseExpr, args, (yyvsp[-1]), true);

                            args.append(*elseExpr.getClear());
                            OwnedHqlExpr expr = createRow(no_map, args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-5]));
                        }
#line 44727 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1295:
#line 7786 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_scalar, false);
                            HqlExprArray args;
                            OwnedHqlExpr elseExpr = (yyvsp[-1]).getExpr();
                            parser->endList(args);
                            parser->checkCaseForDuplicates(args, (yyvsp[-3]));

                            parser->ensureMapToRecordsMatch(elseExpr, args, (yyvsp[-1]), true);

                            args.add(*(yyvsp[-6]).getExpr(),0);
                            args.append(*elseExpr.getClear());
                            OwnedHqlExpr expr = createRow(no_case, args);
                            (yyval).setExpr(foldConstantCaseExpr(expr), (yyvsp[-8]));
                        }
#line 44746 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1297:
#line 7805 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendDictionaries((yyval), (yyvsp[-2]), (yyvsp[0]), NULL);    }
#line 44752 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1299:
#line 7811 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDictionary(no_nofold, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44761 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1300:
#line 7816 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDictionary(no_nocombine, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44770 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1301:
#line 7821 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDictionary(no_nohoist, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 44779 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1302:
#line 7826 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDictionary(no_thisnode, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 44787 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1303:
#line 7830 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr dataset = (yyvsp[-4]).getExpr();
                            parser->checkOutputRecord((yyvsp[-2]), false);
                            OwnedHqlExpr record = (yyvsp[-2]).getExpr();
                            HqlExprArray args;
                            args.append(*LINK(dataset));
                            args.append(*LINK(record));
                            OwnedHqlExpr ds = createDataset(no_usertable, args);
                            parser->checkProjectedFields(ds, (yyvsp[-2]));
                            (yyval).setExpr(createDictionary(no_createdictionary, ds.getClear()), (yyvsp[-6]));
                        }
#line 44803 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1304:
#line 7842 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createDictionary(no_createdictionary, ds.getClear()), (yyvsp[-4]));
                        }
#line 44812 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1305:
#line 7847 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray values;  // Empty list
                            OwnedHqlExpr table = createDataset(no_temptable, createValue(no_recordlist, NULL, values), (yyvsp[-1]).getExpr());
                            OwnedHqlExpr ds = convertTempTableToInlineTable(*parser->errorHandler, (yyvsp[-3]).pos, table);
                            (yyval).setExpr(createDictionary(no_createdictionary, ds.getClear()), (yyvsp[-6]));
                        }
#line 44823 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1306:
#line 7854 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray values;
                            parser->endList(values);
                            OwnedHqlExpr table = createDataset(no_temptable, createValue(no_recordlist, NULL, values), (yyvsp[-1]).getExpr());
                            OwnedHqlExpr ds = convertTempTableToInlineTable(*parser->errorHandler, (yyvsp[-4]).pos, table);
                            (yyval).setExpr(createDictionary(no_createdictionary, ds.getClear()), (yyvsp[-8]));
                        }
#line 44835 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1307:
#line 7861 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 44844 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1308:
#line 7866 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-5]), (yyvsp[-3]), &(yyvsp[-1]));
                            (yyval).setExpr(ds.getClear(), (yyvsp[-7]));
                        }
#line 44853 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1309:
#line 7871 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-3]), (yyvsp[-1]), NULL);
                            (yyval).setExpr(ds.getClear(), (yyvsp[-5]));
                        }
#line 44862 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1310:
#line 7876 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-5]), (yyvsp[-3]), &(yyvsp[-1]));
                            (yyval).setExpr(ds.getClear(), (yyvsp[-7]));
                        }
#line 44871 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1311:
#line 7881 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-3]), (yyvsp[-1]), NULL);
                            (yyval).setExpr(ds.getClear(), (yyvsp[-5]));
                        }
#line 44880 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1312:
#line 7886 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            IHqlExpression * elseDict = (yyvsp[-1]).getExpr();
                            (yyvsp[-3]).unwindCommaList(args);
                            ForEachItemIn(idx, args)
                            {
                                IHqlExpression * cur = args.item(idx).queryChild(1);
                                parser->checkRecordTypesMatch(cur, elseDict, (yyvsp[-1]));
                            }
                            args.append(*elseDict);
                            OwnedHqlExpr expr = createDictionary(no_map, args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-5]));
                        }
#line 44898 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1313:
#line 7900 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            IHqlExpression * elseDict;
                            if (args.ordinality())
                                elseDict = createNullExpr(&args.item(0));
                            else
                                elseDict = createDictionary(no_null, LINK(queryNullRecord()));
                            ForEachItemIn(idx, args)
                            {
                                IHqlExpression * cur = args.item(idx).queryChild(1);
                                parser->checkRecordTypesMatch(cur, elseDict, (yyvsp[-3]));
                            }
                            args.append(*elseDict);
                            OwnedHqlExpr expr = createDictionary(no_map, args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-3]));
                        }
#line 44920 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1314:
#line 7918 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_scalar, false);
                            HqlExprArray args;
                            IHqlExpression * elseDict = (yyvsp[-1]).getExpr();
                            parser->endList(args);
                            parser->checkCaseForDuplicates(args, (yyvsp[-3]));
                            ForEachItemIn(idx, args)
                            {
                                IHqlExpression * cur = args.item(idx).queryChild(1);
                                parser->checkRecordTypesMatch(cur, elseDict, (yyvsp[-1]));
                            }
                            args.add(*(yyvsp[-6]).getExpr(),0);
                            args.append(*elseDict);
                            OwnedHqlExpr expr = createDictionary(no_case, args);
                            (yyval).setExpr(foldConstantCaseExpr(expr), (yyvsp[-8]));
                        }
#line 44941 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1315:
#line 7935 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_scalar, false);
                            HqlExprArray args;
                            parser->endList(args);
                            IHqlExpression * elseDict;
                            if (args.ordinality())
                                elseDict = createNullExpr(&args.item(0));
                            else
                                elseDict = createDictionary(no_null, LINK(queryNullRecord()));
                            parser->checkCaseForDuplicates(args, (yyvsp[-1]));
                            ForEachItemIn(idx, args)
                            {
                                IHqlExpression * cur = args.item(idx).queryChild(1);
                                parser->checkRecordTypesMatch(cur, elseDict, (yyvsp[-1]));
                            }
                            args.add(*(yyvsp[-4]).getExpr(),0);
                            args.append(*elseDict);
                            OwnedHqlExpr expr = createDictionary(no_case, args);
                            (yyval).setExpr(foldConstantCaseExpr(expr), (yyvsp[-6]));
                        }
#line 44966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1316:
#line 7956 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_scalar, false);
                            // change error to warning.
                            parser->reportWarning(CategoryUnusual, WRN_CASENOCONDITION, (yyvsp[-6]).pos, "CASE does not have any conditions");
                            HqlExprArray list;
                            parser->endList(list);
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-6]));
                        }
#line 44980 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1317:
#line 7966 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr dict = (yyvsp[-2]).getExpr();
                            //Actually allow a sequence of arbitrary actions....
                            (yyval).setExpr(createDictionary(no_fail, LINK(dict->queryRecord()), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 44991 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1318:
#line 7973 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr dict = (yyvsp[-2]).getExpr();
                            //Actually allow a sequence of arbitrary actions....
                            (yyval).setExpr(createDictionary(no_fail, LINK(dict->queryRecord()), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 45002 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1319:
#line 7980 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            OwnedHqlExpr values = (yyvsp[-1]).getExpr();
                            HqlExprArray args;
                            values->unwindList(args, no_comma);

                            IHqlExpression * compareDict = NULL;
                            ForEachItemIn(idx, args)
                            {
                                IHqlExpression * cur = &args.item(idx);
                                if (cur->queryRecord())
                                {
                                    if (compareDict)
                                    {
                                        parser->checkRecordTypesMatch(cur, compareDict, (yyvsp[-1]));
                                    }
                                    else
                                        compareDict = cur;
                                }
                            }

                            args.add(*(yyvsp[-3]).getExpr(), 0);
                            (yyval).setExpr(createDictionary(no_chooseds, args), (yyvsp[-5])); // no_choosedict ?
                        }
#line 45031 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1321:
#line 8009 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 45040 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1323:
#line 8019 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e1 = (yyvsp[-2]).getExpr();
                            IHqlExpression *e2 = (yyvsp[-1]).getExpr();
                            if (e1 && (e1->getOperator() != no_record) && (e2->getOperator() == no_field))
                                (yyval).setExpr(parser->createSelect(e1, e2, (yyvsp[-1])));
                            else
                            {
                                ::Release(e1);
                                (yyval).setExpr(e2);
                            }
                        }
#line 45056 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1324:
#line 8031 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 45064 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1325:
#line 8035 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()));
                        }
#line 45072 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1327:
#line 8043 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[-2]).getExpr();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 45081 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1329:
#line 8052 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 45090 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1330:
#line 8057 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *filter = (yyvsp[-1]).getExpr();
                            IHqlExpression *dataset = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(filter ? createDataset(no_filter, dataset, filter) : dataset, (yyvsp[-2]));
                        }
#line 45100 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1331:
#line 8063 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            /** Error production **/
                            parser->reportError(ERR_EXPECTED_DATASET, (yyvsp[-1]), "Expected a dataset instead of a row");
                            (yyvsp[0]).release();
                            (yyval).setExpr(createDatasetFromRow((yyvsp[-1]).getExpr()), (yyvsp[-1]));
                        }
#line 45111 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1332:
#line 8069 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {  (yyval).setExpr((yyvsp[-1]).getExpr()); }
#line 45117 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1333:
#line 8071 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 45126 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1334:
#line 8076 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr left = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr right = (yyvsp[0]).getExpr();
                            parser->checkRecordTypesSimilar(left, right, (yyvsp[0]).pos);

                            OwnedHqlExpr seq = parser->createActiveSelectorSequence(left, right);
                            OwnedHqlExpr leftSelect = createSelector(no_left, left, seq);
                            OwnedHqlExpr rightSelect = createSelector(no_right, right, seq);

                            OwnedHqlExpr transform = parser->createDefaultAssignTransform(left->queryRecord(), leftSelect, (yyvsp[-2]));
                            OwnedHqlExpr cond = createBoolExpr(no_eq, LINK(leftSelect), LINK(rightSelect));
                            (yyval).setExpr(createDatasetF(no_join, LINK(left), LINK(right), cond.getClear(), transform.getClear(), LINK(seq), createAttribute(leftonlyAtom), NULL), (yyvsp[-2]));
                        }
#line 45144 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1335:
#line 8107 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), NULL);    }
#line 45150 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1336:
#line 8109 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), _ordered_Atom);   }
#line 45156 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1337:
#line 8111 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), pullAtom);   }
#line 45162 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1338:
#line 8113 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), NULL);    }
#line 45168 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1339:
#line 8115 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), _ordered_Atom);   }
#line 45174 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1340:
#line 8117 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), pullAtom);   }
#line 45180 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1341:
#line 8119 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), NULL);    }
#line 45186 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1342:
#line 8121 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), _ordered_Atom);   }
#line 45192 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1343:
#line 8123 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), pullAtom);   }
#line 45198 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1344:
#line 8125 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), NULL);    }
#line 45204 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1345:
#line 8127 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), _ordered_Atom);   }
#line 45210 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1346:
#line 8129 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->createAppendFiles((yyval), (yyvsp[-2]), (yyvsp[0]), pullAtom);   }
#line 45216 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1347:
#line 8131 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            parser->applyDefaultPromotions((yyvsp[-3]), true);
                            parser->applyDefaultPromotions((yyvsp[-1]), true);
                            Owned<ITypeInfo> type = parser->promoteToSameType((yyvsp[-3]), (yyvsp[-1]));
                            IHqlExpression * ds = (yyvsp[-5]).getExpr();
                            IHqlExpression * from = (yyvsp[-3]).getExpr();
                            IHqlExpression * to = (yyvsp[-1]).getExpr();
                            IHqlExpression * length = createValue(no_add, LINK(type), createValue(no_sub, LINK(type), to, LINK(from)), createConstant(type->castFrom(true, (__int64)1)));
                            (yyval).setExpr(createDataset(no_choosen, ds, createComma(length, from)));
                        }
#line 45233 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1348:
#line 8144 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            IHqlExpression * ds = (yyvsp[-4]).getExpr();
                            IHqlExpression * length = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createDataset(no_choosen, ds, length));
                        }
#line 45244 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1349:
#line 8151 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            IHqlExpression * ds = (yyvsp[-4]).getExpr();
                            IHqlExpression * from = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createDataset(no_choosen, ds, createComma(createConstant(CHOOSEN_ALL_LIMIT), from)));
                        }
#line 45255 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1351:
#line 8162 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createDataset(no_rowsetindex, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 45265 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1352:
#line 8170 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->createAppendFiles((yyvsp[-2]), (yyvsp[-1]).getExpr()), (yyvsp[-6]));
                        }
#line 45273 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1353:
#line 8174 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_dataset_alias, (yyvsp[-1]).getExpr(), ::createUniqueId()), (yyvsp[-3]));
                        }
#line 45281 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1354:
#line 8178 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *ds = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr ebcdicRecord = parser->transformRecord(ds, ebcdicAtom, (yyvsp[-2]));
                            if (ebcdicRecord)
                            {
                                OwnedHqlExpr seq = parser->createActiveSelectorSequence(ds, NULL);
                                OwnedHqlExpr left = createSelector(no_left, ds, seq);
                                OwnedHqlExpr transform = parser->createDefaultAssignTransform(ebcdicRecord, left, (yyvsp[-4]));
                                (yyval).setExpr(createDatasetF(no_transformebcdic, ds, transform.getClear(), LINK(seq), NULL));
                            }
                            else
                                (yyval).setExpr(ds);
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 45300 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1355:
#line 8193 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *ds = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr asciiRecord = parser->transformRecord(ds, asciiAtom, (yyvsp[-2]));
                            if (asciiRecord)
                            {
                                OwnedHqlExpr seq = parser->createActiveSelectorSequence(ds, NULL);
                                OwnedHqlExpr left = createSelector(no_left, ds, seq);
                                OwnedHqlExpr transform = parser->createDefaultAssignTransform(asciiRecord, left, (yyvsp[-4]));
                                (yyval).setExpr(createDatasetF(no_transformascii, ds, transform.getClear(), LINK(seq), NULL));
                            }
                            else
                                (yyval).setExpr(ds);
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 45319 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1356:
#line 8208 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if ((yyvsp[-2]).queryExpr()->getOperator() == no_all)
                                (yyvsp[-2]).release().setExpr(createConstant(CHOOSEN_ALL_LIMIT));
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);

                            (yyval).setExpr(createDataset(no_choosen, (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())), (yyvsp[-6]));
                        }
#line 45331 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1357:
#line 8216 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_choosesets, (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr()));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 45340 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1358:
#line 8221 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *ds = (yyvsp[-4]).getExpr();
                            parser->expandWholeAndExcept(ds, (yyvsp[-3]));

                            IHqlExpression *flags = (yyvsp[-3]).getExpr();
                            //checkDedup(ds, flags, $4);
                            OwnedHqlExpr dedup = createDataset(no_dedup, ds, createComma(flags, (yyvsp[0]).getExpr()));

                            parser->checkDistribution((yyvsp[-4]), dedup, false);
                            bool hasHash = dedup->hasAttribute(hashAtom);
                            if (hasHash || dedup->hasAttribute(allAtom))
                            {
                                IHqlExpression * keep = dedup->queryAttribute(keepAtom);
                                if (keep && !matchesConstantValue(keep->queryChild(0), 1))
                                    parser->reportError(ERR_DEDUP_ALL_KEEP, (yyvsp[-3]), "KEEP is not supported for DEDUP(ALL)");
                            }
                            if (hasHash)
                            {
                                if (dedup->hasAttribute(rightAtom))
                                    parser->reportError(ERR_DEDUP_ALL_KEEP, (yyvsp[-3]), "RIGHT is not supported for DEDUP(HASH)");
                            }

                            (yyval).setExpr(dedup.getClear(), (yyvsp[-6]));
                        }
#line 45369 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1359:
#line 8246 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *criterion = (yyvsp[-3]).queryExpr();
                            node_operator op = no_distribute;
                            if (criterion->isBoolean())
                            {
                                op = no_nwaydistribute;
                            }
                            else if (criterion->getOperator() == no_all)
                            {
                                //Special case DISTRIBUTE(ds, ALL) as DISTRIBUTE(ds, true) - i.e. distribute to all nodes.
                                (yyvsp[-3]).release();
                                (yyvsp[-3]).setExpr(createConstant(true));
                                op = no_nwaydistribute;
                            }
                            else
                            {
                                parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            }
                            (yyval).setExpr(createDataset(op, (yyvsp[-6]).getExpr(), createComma((yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr())));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 45395 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1360:
#line 8268 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr active = ensureActiveRow(ds);
                            //Expand row components (see parser->processSortList() for similar code for hash)
                            HqlExprArray components;
                            RecordSelectIterator iter(active->queryRecord(), active, false);
                            ForEach(iter)
                                components.append(*iter.get());
                            OwnedHqlExpr sortlist = createSortList(components);
                            OwnedHqlExpr hash = createValue(no_hash32, makeIntType(4, false), LINK(sortlist), createAttribute(internalAtom));
                            (yyval).setExpr(createDataset(no_distribute, ds.getClear(), createComma(hash.getClear(), (yyvsp[-2]).getExpr())), (yyvsp[-6]));
                        }
#line 45412 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1361:
#line 8281 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_distribute, (yyvsp[-6]).getExpr(), createComma((yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr())));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 45421 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1362:
#line 8286 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            OwnedHqlExpr fields = parser->processSortList((yyvsp[-4]), no_distribute, NULL, sortItems, NULL, NULL);
                            HqlExprArray args;
                            unwindChildren(args, fields);
                            OwnedHqlExpr value = createValue(no_sortpartition, LINK(parser->defaultIntegralType), args);
                            (yyval).setExpr(createDatasetF(no_distribute, (yyvsp[-10]).getExpr(), value.getClear(), (yyvsp[-2]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-12]));
                        }
#line 45436 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1363:
#line 8297 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_boolean, false);
                            IHqlExpression * left = (yyvsp[-9]).getExpr();
                            IHqlExpression * right = (yyvsp[-6]).getExpr();
                            IHqlExpression * cond = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr attr = (yyvsp[-2]).getExpr();

                            if (!isKey(right))
                                parser->reportError(ERR_EXPECTED_INDEX,(yyvsp[-7]),"Expected an index as the second parameter");

                            IHqlExpression * ds = createDataset(no_keyeddistribute, left, createComma(right, cond, LINK(attr), (yyvsp[0]).getExpr()));

                            JoinSortInfo joinInfo(cond, NULL, NULL, NULL, NULL);
                            joinInfo.findJoinSortOrders(false);
                            unsigned numUnsortedFields = numPayloadFields(right);
                            if (joinInfo.extraMatch || (!ds->hasAttribute(firstAtom) && (joinInfo.queryLeftReq().ordinality() != getFieldCount(right->queryRecord())-numUnsortedFields)))
                                parser->reportError(ERR_MATCH_KEY_EXACTLY,(yyvsp[-3]),"Condition on DISTRIBUTE must match the key exactly");
                            if (joinInfo.hasOptionalEqualities())
                                parser->reportError(ERR_MATCH_KEY_EXACTLY,(yyvsp[-3]),"field[1..*] is not supported for a keyed distribute");

                            //Should check that all index fields are accounted for...
                            (yyval).setExpr(ds);
                            (yyval).setPosition((yyvsp[-11]));
                        }
#line 45465 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1364:
#line 8323 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * left = (yyvsp[-7]).getExpr();
                            IHqlExpression * right = (yyvsp[-4]).getExpr();
                            if (!isKey(right))
                                parser->reportError(ERR_EXPECTED_INDEX,(yyvsp[-4]),"Expected an index as the second parameter");

                            IHqlExpression * cond = parser->createDistributeCond(left, right, (yyvsp[-4]), (yyvsp[0]));

                            IHqlExpression * ds = createDataset(no_keyeddistribute, left, createComma(right, cond, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            //Should check that all index fields are accounted for...

                            (yyval).setExpr(ds);
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 45484 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1365:
#line 8338 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            (yyval).setExpr(createDataset(no_distributed, (yyvsp[-5]).getExpr(), createComma((yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr())));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 45494 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1366:
#line 8344 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_distributed, (yyvsp[-2]).getExpr(), createAttribute(unknownAtom)));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 45503 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1367:
#line 8349 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            OwnedHqlExpr fields = parser->processSortList((yyvsp[-3]), no_distribute, NULL, sortItems, NULL, NULL);
                            HqlExprArray args;
                            unwindChildren(args, fields);
                            OwnedHqlExpr value = createValue(no_sortpartition, LINK(parser->defaultIntegralType), args);
                            (yyval).setExpr(createDataset(no_distribute, (yyvsp[-7]).getExpr(), value.getClear()));
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 45518 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1368:
#line 8360 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_boolean, false);

                            IHqlExpression * left = (yyvsp[-9]).getExpr();
                            IHqlExpression * right = (yyvsp[-7]).getExpr();
                            IHqlExpression * cond = (yyvsp[-5]).getExpr();
                            OwnedHqlExpr flags = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr counter = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr transform;
                            if (flags)
                            {
                                if (flags->getOperator() == no_comma)
                                {
                                    IHqlExpression * child0 = flags->queryChild(0);
                                    if (child0->isTransform())
                                    {
                                        transform.set(child0);
                                        flags.set(flags->queryChild(1));
                                    }
                                }
                                else if (flags->isTransform())
                                    transform.setown(flags.getClear());
                            }

                            if (!transform)
                            {
                                IHqlExpression * seq = (yyvsp[0]).queryExpr();
                                transform.setown(parser->createDefJoinTransform(left,right,(yyvsp[-11]),seq,flags));
                            }

                            if (counter)
                                flags.setown(createComma(flags.getClear(), createAttribute(_countProject_Atom, counter.getClear())));

                            IHqlExpression *join = createDataset(no_join, left, createComma(right, cond, createComma(transform.getClear(), flags.getClear(), (yyvsp[0]).getExpr())));

                            bool isLocal = join->hasAttribute(localAtom);
                            if (!join->hasAttribute(lookupAtom) && !isKeyedJoin(join))
                                parser->checkDistribution((yyvsp[-9]), left, isLocal, true);
                            parser->checkDistribution((yyvsp[-7]), right, isLocal, true);
                            parser->checkJoinFlags((yyvsp[-11]), join);
                            parser->checkOnFailRecord(join, (yyvsp[-11]));

                            if (!join->hasAttribute(allAtom))
                                parser->warnIfFoldsToConstant(cond, (yyvsp[-5]));

                            (yyval).setExpr(join, (yyvsp[-11]));
                        }
#line 45570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1369:
#line 8408 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            parser->normalizeExpression((yyvsp[-7]), type_boolean, false);
                            IHqlExpression * ds = (yyvsp[-10]).getExpr();
                            IHqlExpression * cond = (yyvsp[-7]).getExpr();
                            OwnedHqlExpr flags;
                            parser->expandSortedAsList(sortItems);
                            IHqlExpression * order = parser->processSortList((yyvsp[-3]), no_mergejoin, ds, sortItems, NULL, &flags);
                            IHqlExpression * join = createDataset(no_mergejoin, ds, createComma(cond, order, flags.getClear(), createComma((yyvsp[-5]).getExpr(), (yyvsp[0]).getExpr())));
                            (yyval).setExpr(join);
                            (yyval).setPosition((yyvsp[-12]));
                        }
#line 45588 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1370:
#line 8422 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-8]), type_boolean, false);
                            IHqlExpression * ds = (yyvsp[-11]).getExpr();
                            IHqlExpression * cond = (yyvsp[-8]).getExpr();
                            IHqlExpression * tform = (yyvsp[-6]).getExpr();
                            if (!queryAttributeInList(sortedAtom, (yyvsp[-4]).queryExpr()))
                                parser->reportError(ERR_EXPECTED, (yyvsp[-4]), "SORTED() is required for STEPPED join");

                            OwnedHqlExpr flags;
                            HqlExprArray sortItems;
                            (yyvsp[-4]).unwindCommaList(sortItems);
                            parser->expandSortedAsList(sortItems);
                            IHqlExpression * order = parser->processSortList((yyvsp[-4]), no_nwayjoin, ds, sortItems, NULL, &flags);
                            IHqlExpression * join = createDataset(no_nwayjoin, ds, createComma(cond, tform, order, createComma(flags.getClear(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));
                            (yyval).setExpr(join);
                            (yyval).setPosition((yyvsp[-13]));
                        }
#line 45610 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1371:
#line 8440 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            if (!queryAttribute(sortedAtom, sortItems))
                                parser->reportWarning(CategoryDeprecated, WRN_MERGE_RECOMMEND_SORTED, (yyvsp[-8]).pos, "MERGE without an explicit SORTED() attribute is deprecated");

                            IHqlExpression * ds = (yyvsp[-6]).getExpr();
                            parser->expandSortedAsList(sortItems);
                            OwnedHqlExpr flags;
                            IHqlExpression * order = parser->processSortList((yyvsp[-3]), no_nwaymerge, ds, sortItems, NULL, &flags);
                            IHqlExpression * join = createDataset(no_nwaymerge, ds, createComma(order, flags.getClear(), (yyvsp[0]).getExpr()));
                            (yyval).setExpr(join, (yyvsp[-8]));
                            parser->attachPendingWarnings((yyval));
                        }
#line 45629 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1372:
#line 8455 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * left = (yyvsp[-11]).getExpr();
                            IHqlExpression * right = (yyvsp[-9]).getExpr();
                            IHqlExpression * counter = (yyvsp[-1]).getExpr();
                            IHqlExpression * attr = (yyvsp[-3]).getExpr();
                            if (counter)
                                attr = createComma(attr, createAttribute(_countProject_Atom, counter));
                            parser->ensureTransformTypeMatch((yyvsp[-6]), left);
                            parser->ensureTransformTypeMatch((yyvsp[-4]), right);
                            (yyval).setExpr(createDataset(no_process, left, createComma(right, (yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), createComma(attr, (yyvsp[0]).getExpr()))));
                            (yyval).setPosition((yyvsp[-13]));
                        }
#line 45646 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1373:
#line 8468 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]));
                            parser->ensureTransformTypeMatch((yyvsp[-4]), (yyvsp[-8]).queryExpr());

                            OwnedHqlExpr tr = (yyvsp[-4]).getExpr();
                            IHqlExpression *attr = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createDataset(no_rollup, (yyvsp[-8]).getExpr(), createComma((yyvsp[-6]).getExpr(), tr.getClear(), attr, (yyvsp[0]).getExpr())));
                            parser->checkDistribution((yyvsp[-8]), (yyval).queryExpr(), false);
                            (yyval).setPosition((yyvsp[-10]));
                        }
#line 45661 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1374:
#line 8479 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *ds = (yyvsp[-6]).getExpr();
                            IHqlExpression *tr = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr seq = (yyvsp[0]).getExpr();

                            parser->expandWholeAndExcept(ds, (yyvsp[-3]));
                            OwnedHqlExpr extra = (yyvsp[-3]).getExpr();
                            HqlExprArray args;
                            if (extra)
                                extra->unwindList(args, no_comma);
                            IHqlExpression * attr = NULL;
                            IHqlExpression * cond = NULL;
                            OwnedHqlExpr left = createSelector(no_left, ds, seq);
                            OwnedHqlExpr right = createSelector(no_right, ds, seq);

                            HqlExprArray values;
                            ForEachItemIn(idx, args)
                            {
                                IHqlExpression & cur = args.item(idx);
                                if (cur.isAttribute())
                                    attr = createComma(attr, LINK(&cur));
                                else
                                    values.append(OLINK(cur));
                            }
                            if (values.ordinality())
                                cond = createSortList(values);
                            else
                                cond = createConstant(true);

                            if (!recordTypesMatch(ds, tr))
                                parser->reportError(ERR_TRANSFORM_TYPE_MISMATCH,(yyvsp[-4]),"Type returned from transform must match the source dataset type");
                            (yyval).setExpr(createDataset(no_rollup, ds, createComma(cond, tr, attr, LINK(seq))));
                            parser->checkDistribution((yyvsp[-6]), (yyval).queryExpr(), false);
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 45701 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1375:
#line 8515 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkGrouped((yyvsp[-8]));
                            IHqlExpression *attr = NULL;
                            (yyval).setExpr(createDataset(no_rollupgroup, (yyvsp[-8]).getExpr(), createComma((yyvsp[-4]).getExpr(), attr, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));
                            (yyval).setPosition((yyvsp[-10]));
                        }
#line 45712 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1376:
#line 8522 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * left = (yyvsp[-4]).getExpr();
                            IHqlExpression * right = (yyvsp[-2]).getExpr();
                            IHqlExpression * transform = parser->createDefJoinTransform(left,right,(yyvsp[-6]), (yyvsp[0]).queryExpr(),NULL);
                            IHqlExpression * combine = createDataset(no_combine, left, createComma(right, transform, (yyvsp[0]).getExpr()));
                            (yyval).setExpr(combine);
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 45725 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1377:
#line 8531 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * left = (yyvsp[-7]).getExpr();
                            IHqlExpression * right = (yyvsp[-5]).getExpr();
                            IHqlExpression * combine = createDataset(no_combine, left, createComma(right, (yyvsp[-3]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setExpr(combine);
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 45737 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1378:
#line 8539 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * left = (yyvsp[-10]).getExpr();
                            IHqlExpression * right = (yyvsp[-8]).getExpr();
                            IHqlExpression * combine = createDataset(no_combinegroup, left, createComma(right, (yyvsp[-4]).getExpr(), (yyvsp[-3]).getExpr(), createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr())));
                            (yyval).setExpr(combine);
                            (yyval).setPosition((yyvsp[-12]));
                        }
#line 45749 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1379:
#line 8547 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]));
                            parser->ensureDatasetTypeMatch((yyvsp[-5]), (yyvsp[-10]).queryExpr());
                            parser->checkBooleanOrNumeric((yyvsp[-7]));
                            IHqlExpression * left = (yyvsp[-10]).getExpr();
                            IHqlExpression * body = createValue(no_loopbody, makeNullType(), (yyvsp[-5]).getExpr());
                            IHqlExpression * counter = (yyvsp[-4]).getExpr();
                            if (counter)
                                body = createComma(body, createAttribute(_countProject_Atom, counter));
                            IHqlExpression * loopCondition = parser->createLoopCondition(left, (yyvsp[-7]).getExpr(), NULL, (yyvsp[0]).queryExpr(), (yyvsp[-1]).queryExpr());
                            IHqlExpression * loopExpr = createDataset(no_loop, left, createComma(loopCondition, body, (yyvsp[-3]).getExpr(), createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr())));
                            parser->checkLoopFlags((yyvsp[-12]), loopExpr);
                            (yyval).setExpr(loopExpr);
                            (yyval).setPosition((yyvsp[-12]));
                        }
#line 45769 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1380:
#line 8563 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->ensureDatasetTypeMatch((yyvsp[-5]), (yyvsp[-12]).queryExpr());
                            parser->normalizeExpression((yyvsp[-9]));
                            parser->checkBooleanOrNumeric((yyvsp[-9]));
                            parser->normalizeExpression((yyvsp[-7]), type_boolean, false);
                            IHqlExpression * left = (yyvsp[-12]).getExpr();
                            IHqlExpression * body = createValue(no_loopbody, makeNullType(), (yyvsp[-5]).getExpr());
                            IHqlExpression * counter = (yyvsp[-4]).getExpr();
                            if (counter)
                                body = createComma(body, createAttribute(_countProject_Atom, counter));
                            IHqlExpression * loopCondition = parser->createLoopCondition(left, (yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), (yyvsp[0]).queryExpr(), (yyvsp[-1]).queryExpr());
                            IHqlExpression * loopExpr = createDataset(no_loop, left, createComma(loopCondition, body, (yyvsp[-3]).getExpr(), createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr())));
                            parser->checkLoopFlags((yyvsp[-14]), loopExpr);
                            (yyval).setExpr(loopExpr);
                            (yyval).setPosition((yyvsp[-14]));
                        }
#line 45790 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1381:
#line 8580 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //LOOP(ds, <count>,<filter-cond>,<loop-cond>, f(rows(left)))
                            parser->ensureDatasetTypeMatch((yyvsp[-5]), (yyvsp[-14]).queryExpr());
                            parser->normalizeExpression((yyvsp[-11]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-9]), type_boolean, false);
                            parser->normalizeExpression((yyvsp[-7]), type_boolean, false);
                            IHqlExpression * left = (yyvsp[-14]).getExpr();
                            IHqlExpression * body = createValue(no_loopbody, makeNullType(), (yyvsp[-5]).getExpr());
                            IHqlExpression * counter = (yyvsp[-4]).getExpr();
                            if (counter)
                                body = createComma(body, createAttribute(_countProject_Atom, counter));
                            IHqlExpression * loopCondition = createComma((yyvsp[-11]).getExpr(), (yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr());
                            IHqlExpression * loopExpr = createDataset(no_loop, left, createComma(loopCondition, body, (yyvsp[-3]).getExpr(), createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr())));
                            parser->checkLoopFlags((yyvsp[-16]), loopExpr);
                            (yyval).setExpr(loopExpr);
                            (yyval).setPosition((yyvsp[-16]));
                        }
#line 45812 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1382:
#line 8598 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->ensureDatasetTypeMatch((yyvsp[-5]), (yyvsp[-10]).queryExpr());
                            parser->normalizeExpression((yyvsp[-7]));
                            parser->checkBooleanOrNumeric((yyvsp[-7]));
                            IHqlExpression * left = (yyvsp[-10]).getExpr();
                            IHqlExpression * body = createValue(no_loopbody, makeNullType(), (yyvsp[-5]).getExpr());
                            IHqlExpression * counter = (yyvsp[-4]).getExpr();
                            if (counter)
                                body = createComma(body, createAttribute(_countProject_Atom, counter));
                            IHqlExpression * loopExpr = createDataset(no_graphloop, left, createComma((yyvsp[-7]).getExpr(), body, (yyvsp[-3]).getExpr(), createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr())));
                            parser->checkLoopFlags((yyvsp[-12]), loopExpr);
                            (yyval).setExpr(loopExpr);
                            (yyval).setPosition((yyvsp[-12]));
                        }
#line 45831 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1383:
#line 8613 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-1]).release();
                            (yyvsp[0]).release();
                            (yyval).setExpr(createDataset(no_forcegraph, (yyvsp[-3]).getExpr()), (yyvsp[-5]));
                        }
#line 45841 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1384:
#line 8619 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->ensureTransformTypeMatch((yyvsp[-4]), (yyvsp[-7]).queryExpr());

                            IHqlExpression *ds = (yyvsp[-7]).getExpr();
                            IHqlExpression *tr = (yyvsp[-4]).getExpr();
                            IHqlExpression *attr = (yyvsp[-3]).getExpr();
                            IHqlExpression * counter = (yyvsp[-1]).getExpr();
                            if (counter)
                                attr = createComma(attr, createAttribute(_countProject_Atom, counter));
                            (yyval).setExpr(createDataset(no_iterate, ds, createComma(tr, attr, (yyvsp[0]).getExpr())));
                            (yyval).setPosition((yyvsp[-9]));
                            parser->checkDistribution((yyvsp[-7]), (yyval).queryExpr(), false);
                        }
#line 45859 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1385:
#line 8633 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            OwnedHqlExpr ds = (yyvsp[-4]).getExpr();
                            HqlExprArray args;
                            args.append(*LINK(ds));
                            args.append(*(yyvsp[-2]).getExpr());
                            (yyvsp[-1]).unwindCommaList(args);
                            node_operator op = queryAttribute(keyedAtom, args) || queryAttribute(countAtom, args) ? no_keyedlimit : no_limit;
                            IHqlExpression * onFail = queryAttribute(onFailAtom, args);
                            if (onFail && !parser->checkTransformTypeMatch((yyvsp[-1]), ds, onFail->queryChild(0)))
                                args.zap(*onFail);
                            (yyval).setExpr(createDataset(op, args));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 45878 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1386:
#line 8648 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-4]).getExpr();
                            HqlExprArray args;
                            args.append(*LINK(ds));
                            args.append(*(yyvsp[-2]).getExpr());
                            (yyvsp[-1]).unwindCommaList(args);
                            IHqlExpression * onFail = queryAttribute(onFailAtom, args);
                            if (onFail && !parser->checkTransformTypeMatch((yyvsp[-3]), ds, onFail->queryChild(0)))
                                args.zap(*onFail);
                            (yyval).setExpr(createDataset(no_catchds, args));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 45895 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1387:
#line 8678 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            bool isLocal = queryAttributeInList(localAtom, (yyvsp[-2]).queryExpr()) != NULL;
                            parser->checkMergeInputSorted((yyvsp[-4]), isLocal);
                            OwnedHqlExpr ds = (yyvsp[-4]).getExpr();

                            HqlExprArray args, orderedArgs;
                            args.append(*LINK(ds));
                            OwnedHqlExpr rest=(yyvsp[-2]).getExpr();
                            if (rest)
                                rest->unwindList(args, no_comma);

                            IHqlExpression * sorted = queryAttribute(sortedAtom, args);
                            OwnedHqlExpr newSorted;
                            if (!sorted)
                            {
                                parser->reportWarning(CategoryDeprecated, WRN_MERGE_RECOMMEND_SORTED, (yyvsp[-6]).pos, "MERGE without an explicit SORTED() attribute is deprecated");
                                OwnedHqlExpr order = getExistingSortOrder(ds, isLocal, true);
                                HqlExprArray sorts;
                                if (order)
                                    unwindChildren(sorts, order);
                                newSorted.setown(createExprAttribute(sortedAtom, sorts));
                                args.append(*LINK(newSorted));
                                // because parameters aren't substituted, need to deduce the sort order again later once they are
                                args.append(*createAttribute(_implicitSorted_Atom));
                            }
                            else
                            {
                                newSorted.setown(replaceSelector(sorted, ds->queryNormalizedSelector(), queryActiveTableSelector()));
                                args.zap(*sorted);
                                args.append(*LINK(newSorted));
                            }

                            ForEachItemIn(i, args)
                            {
                                IHqlExpression & cur = args.item(i);
                                if (cur.isDataset())
                                    parser->checkMergeSortOrder((yyvsp[-6]), ds, &cur, newSorted);
                            }

                            reorderAttributesToEnd(orderedArgs, args);
                            IHqlExpression *merge = createDataset(no_merge, orderedArgs);
                            (yyval).setExpr(merge);
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 45944 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1388:
#line 8723 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr rest=(yyvsp[-2]).getExpr();

                            HqlExprArray args;
                            args.append(*LINK(ds));
                            if (rest)
                                rest->unwindList(args, no_comma);
                            IHqlExpression * group = queryAttribute(groupAtom, args);
                            if (!group)
                            {
                                parser->reportError(ERR_COGROUP_NO_GROUP, (yyvsp[-6]), "COGROUP requires a GROUP() parameter");
                                args.append(*createExprAttribute(groupAtom, getUnknownSortlist()));
                            }
                            else
                            {
                                OwnedHqlExpr newGroup = replaceSelector(group, ds->queryNormalizedSelector(), queryActiveTableSelector());
                                args.zap(*group);
                                args.append(*newGroup.getClear());
                            }

                            parser->checkRecordsMatch((yyvsp[-4]), args);

                            HqlExprArray orderedArgs;
                            reorderAttributesToEnd(orderedArgs, args);
                            (yyval).setExpr(createDataset(no_cogroup, orderedArgs), (yyvsp[-6]));
                        }
#line 45976 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1389:
#line 8751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args, orderedArgs;
                            (yyvsp[-1]).unwindCommaList(args);
                            parser->checkRecordsMatch((yyvsp[-1]), args);
                            reorderAttributesToEnd(orderedArgs, args);
                            (yyval).setExpr(createDataset(no_nonempty, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 45989 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1390:
#line 8760 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *te = createComma((yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr());
                            IHqlExpression *ds = (yyvsp[-7]).getExpr();
                            OwnedHqlExpr counter = (yyvsp[-3]).getExpr();
                            if (counter)
                                te = createComma(te, createAttribute(_countProject_Atom, LINK(counter)));
                            (yyval).setExpr(createDataset(no_hqlproject, ds, te));
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 46003 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1391:
#line 8770 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr transform = parser->createRowAssignTransform((yyvsp[-7]), (yyvsp[-4]), (yyvsp[0]));
                            (yyvsp[-4]).release();
                            (yyvsp[-3]).release();
                            (yyval).setExpr(createDataset(no_hqlproject, (yyvsp[-7]).getExpr(), createComma(transform.getClear(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 46015 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1392:
#line 8778 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_metaactivity, (yyvsp[-2]).getExpr(), createAttribute(pullAtom)));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 46024 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1393:
#line 8783 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_metaactivity, (yyvsp[-3]).getExpr(), createComma(createAttribute(traceAtom), (yyvsp[-2]).getExpr())));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 46033 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1394:
#line 8788 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]), type_boolean, false);
                            IHqlExpression * ds = (yyvsp[-11]).getExpr();
                            parser->ensureTransformTypeMatch((yyvsp[-4]), ds);

                            IHqlExpression * transform = (yyvsp[-4]).getExpr();
                            IHqlExpression * counter = (yyvsp[-3]).getExpr();
                            if (counter)
                                counter = createAttribute(_countProject_Atom, counter);

                            //MORE: This should require local otherwise it needs to do a full join type thing.
                            OwnedHqlExpr extra = createComma((yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), transform, createComma((yyvsp[-2]).getExpr(), counter, (yyvsp[0]).getExpr()));
                            parser->saveDiskAccessInformation((yyvsp[-13]), extra);
                            (yyval).setExpr(createDataset(no_denormalize, ds, extra.getClear()));
                            (yyval).setPosition((yyvsp[-13]));
                            parser->checkJoinFlags((yyvsp[-13]), (yyval).queryExpr());
                        }
#line 46055 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1395:
#line 8806 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-10]), type_boolean, false);
                            IHqlExpression * ds = (yyvsp[-14]).getExpr();
                            IHqlExpression * transform = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr extra = createComma((yyvsp[-12]).getExpr(), (yyvsp[-10]).getExpr(), transform, createComma((yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()));
                            parser->saveDiskAccessInformation((yyvsp[-16]), extra);
                            (yyval).setExpr(createDataset(no_denormalizegroup, ds, extra.getClear()));
                            (yyval).setPosition((yyvsp[-16]));
                            (yyvsp[-6]).release();
                            parser->checkJoinFlags((yyvsp[-16]), (yyval).queryExpr());
                        }
#line 46071 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1396:
#line 8818 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_nofold, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 46080 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1397:
#line 8823 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_nocombine, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 46089 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1398:
#line 8828 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_nohoist, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 46098 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1399:
#line 8833 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_nothor, (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 46107 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1400:
#line 8838 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-7]), type_numeric, false);
                            IHqlExpression * counter = (yyvsp[-3]).getExpr();
                            if (counter)
                                counter = createAttribute(_countProject_Atom, counter);
                            IHqlExpression * extra = createComma((yyvsp[-7]).getExpr(), (yyvsp[-4]).getExpr(), counter, createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setExpr(createDataset(no_normalize, (yyvsp[-9]).getExpr(), extra));
                            (yyval).setPosition((yyvsp[-11]));
                        }
#line 46121 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1401:
#line 8848 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //NB: SelSeq is based only on the left dataset, not the right as well.
                            IHqlExpression * counter = (yyvsp[-3]).getExpr();
                            if (counter)
                                counter = createAttribute(_countProject_Atom, counter);
                            IHqlExpression * extra = createComma((yyvsp[-7]).getExpr(), (yyvsp[-4]).getExpr(), counter, createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setExpr(createDataset(no_normalize, (yyvsp[-9]).getExpr(), extra));
                            (yyval).setPosition((yyvsp[-11]));
                        }
#line 46135 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1402:
#line 8872 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            OwnedHqlExpr input = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr attrs;
                            IHqlExpression *groupOrder = parser->processSortList((yyvsp[-1]), no_group, input, sortItems, NULL, &attrs);
                            OwnedHqlExpr args = createComma(groupOrder, LINK(attrs));
                            (yyval).setExpr(createDataset(no_group, input.getClear(), args.getClear()), (yyvsp[-6]));
                        }
#line 46149 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1403:
#line 8882 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression *input = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr attrs;
                            IHqlExpression *groupOrder = parser->processSortList((yyvsp[-1]), no_group, input, sortItems, NULL, &attrs);
                            IHqlExpression *args = createComma(groupOrder, attrs.getClear());
                            (yyval).setExpr(createDataset(no_grouped, input, args), (yyvsp[-6]));
                        }
#line 46163 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1404:
#line 8892 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *input = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createDataset(no_group, input, NULL));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 46173 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1405:
#line 8898 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *input = (yyvsp[-5]).getExpr();
                            (yyval).setExpr(createDataset(no_group, input, createComma(getActiveTableSelector(), createLocalAttribute())));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 46183 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1406:
#line 8904 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-1]).getExpr();
                            HqlExprArray args;
                            ds->unwindList(args, no_comma);
                            parser->checkRegrouping((yyvsp[-1]).pos, args);
                            (yyval).setExpr(createDataset(no_regroup, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 46196 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1407:
#line 8913 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkGrouped((yyvsp[-6]));
                            IHqlExpression *attr = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createDataset(no_filtergroup, (yyvsp[-6]).getExpr(), createComma((yyvsp[-4]).getExpr(), attr, (yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr())));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 46207 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1408:
#line 8920 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * dataset = (yyvsp[-3]).getExpr();
                            IHqlExpression * indices = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createDataset(no_keyed, dataset, indices));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 46218 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1409:
#line 8927 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *input = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createDataset(no_group, input, NULL));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 46228 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1410:
#line 8933 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            OwnedHqlExpr dataset = (yyvsp[-6]).getExpr();

                            parser->checkOutputRecord((yyvsp[-4]), false);

                            OwnedHqlExpr record = (yyvsp[-4]).getExpr();

                            OwnedHqlExpr attrs;
                            OwnedHqlExpr grouping = parser->processSortList((yyvsp[-2]), no_usertable, dataset, sortItems, NULL, &attrs);

                            HqlExprArray args;
                            args.append(*LINK(dataset));
                            args.append(*LINK(record));
                            if (grouping)
                                args.append(*LINK(grouping));
                            if (attrs)
                                attrs->unwindList(args, no_comma);
                            //appendUniqueId();
                            (yyval).setExpr(createDataset(no_usertable, args));
                            parser->checkProjectedFields((yyval).queryExpr(), (yyvsp[-4]));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 46257 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1411:
#line 8958 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr tform = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createDataset(no_newusertable, (yyvsp[-4]).getExpr(), createComma(LINK(tform->queryRecord()), ensureTransformType(tform, no_newtransform))));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 46267 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1412:
#line 8964 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_dataset_alias, (yyvsp[-2]).getExpr(), ::createUniqueId()), (yyvsp[-4]));
                        }
#line 46275 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1413:
#line 8968 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_int, false);
                            IHqlExpression * left = (yyvsp[-9]).getExpr();
                            IHqlExpression * right = (yyvsp[-7]).getExpr();

                            IHqlExpression *join = createDataset(no_fetch, left, createComma(right, (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));

                            (yyval).setExpr(join);
                            (yyval).setPosition((yyvsp[-11]));
                        }
#line 46290 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1414:
#line 8979 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            IHqlExpression * left = (yyvsp[-7]).getExpr();
                            IHqlExpression * right = (yyvsp[-5]).getExpr();
                            IHqlExpression * transform = parser->createDefJoinTransform(left, right, (yyvsp[-3]), (yyvsp[0]).queryExpr(),NULL);

                            IHqlExpression *join = createDataset(no_fetch, left, createComma(right, (yyvsp[-3]).getExpr(), transform, createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));

                            (yyval).setExpr(join);
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 46306 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1415:
#line 8991 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *dataset = (yyvsp[-6]).getExpr();
                            OwnedHqlExpr record = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr extra = (yyvsp[-3]).getExpr();
                            parser->extractIndexRecordAndExtra(record, extra);
                            OwnedHqlExpr transform = parser->extractTransformFromExtra(extra);

                            parser->inheritRecordMaxLength(dataset, record);

                            bool hasFileposition = getBoolAttributeInList(extra, filepositionAtom, true);
                            record.setown(parser->checkIndexRecord(record, (yyvsp[-4]), extra));

                            parser->saveDiskAccessInformation((yyvsp[-8]), extra);
                            if (transform)
                            {
                                if (!recordTypesMatch(dataset, transform))
                                {
                                    parser->reportError(ERR_TRANSFORM_TYPE_MISMATCH, (yyvsp[-4]),"Type returned from transform must match the source dataset type");
                                    transform.setown(parser->createClearTransform(dataset->queryRecord(), (yyvsp[-4])));
                                }
                                //Convert the no_transform to a no_newtransform, because it is currently a bit of a fake.
                                HqlExprArray args;
                                unwindChildren(args, transform);
                                transform.setown(createValue(no_newtransform, transform->getType(), args));
                                OwnedHqlExpr index = createDataset(no_newkeyindex, dataset, createComma(record.getClear(), transform.getClear(), extra.getClear(), parser->getGpgSignature()));
                                parser->checkValidLookupFlag(dataset, index->queryChild(3), (yyvsp[-8]));
                                (yyval).setExpr(index.getClear());
                            }
                            else
                                (yyval).setExpr(createDataset(no_keyindex, dataset, createComma(record.getClear(), extra.getClear(), parser->getGpgSignature())));
                            parser->checkIndexRecordTypes((yyval).queryExpr(), (yyvsp[-8]));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 46344 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1416:
#line 9025 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr record = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr extra = (yyvsp[-2]).getExpr();
                            parser->extractIndexRecordAndExtra(record, extra);
                            parser->saveDiskAccessInformation((yyvsp[-5]), extra);
                            IHqlExpression *index = parser->createIndexFromRecord(record, extra, (yyvsp[-3]));
                            parser->checkValidLookupFlag(index, index->queryChild(3), (yyvsp[-5]));
                            parser->checkIndexRecordTypes(index, (yyvsp[-5]));
                            (yyval).setExpr(index);
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 46360 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1417:
#line 9037 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, false);
                            OwnedHqlExpr newName = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr dataset = (yyvsp[-5]).getExpr();
                            if (isKey(dataset))
                            {
                                node_operator keyOp = dataset->getOperator();
                                HqlExprArray args;
                                unwindChildren(args, dataset);
                                if (keyOp == no_keyindex)
                                    args.replace(*newName.getLink(), 2);
                                else
                                    args.replace(*newName.getLink(), 3);
                                (yyvsp[-2]).unwindCommaList(args);
                                OwnedHqlExpr options;
                                parser->saveDiskAccessInformation((yyvsp[-7]), options);
                                if (options) args.append(*options.getClear());
                                dataset.setown(createDataset(keyOp, args));
                                parser->checkValidLookupFlag(dataset, newName, (yyvsp[-3]));
                            }
                            else
                                parser->reportError(ERR_EXPECTED_INDEX,(yyvsp[-5]),"Index aliasing syntax - expected an index as the first parameter");

                            (yyval).setExpr(dataset.getClear());
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 46391 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1418:
#line 9064 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr counter = (yyvsp[-4]).queryExpr();
                            if (counter)
                                parser->reportError(ERR_ILL_HERE,(yyvsp[-5]),"Not expecting COUNTER for DATASET");
                            parser->warnIfRecordPacked((yyvsp[-5]));
                            parser->transferOptions((yyvsp[-8]), (yyvsp[-1]));
                            parser->normalizeExpression((yyvsp[-8]), type_string, false);

                            OwnedHqlExpr mode = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr options = (yyvsp[-1]).getExpr();
                            OwnedHqlExpr filename = (yyvsp[-8]).getExpr();
                            if (mode->getOperator() == no_comma)
                            {
                                //Handle a messy common-grammar production which isn't in the format we want
                                assertex(mode->queryChild(0)->getOperator() == no_pipe);
                                HqlExprArray args;
                                unwindChildren(args, mode->queryChild(0));
                                mode->queryChild(1)->unwindList(args, no_comma);
                                mode.setown(createValue(no_pipe, makeNullType(), args));
                            }

                            //LOCAL(expression) is now an overloaded the syntax, so disambiguate here...
                            if (filename->getOperator() == no_forcelocal)
                            {
                                filename.setown(createValue(no_assertconstant, filename->getType(), LINK(filename->queryChild(0))));
                                options.setown(createComma(options.getClear(), createAttribute(localUploadAtom)));
                            }
                            parser->saveDiskAccessInformation((yyvsp[-10]), options);
                            IHqlExpression * dataset = createNewDataset(filename.getLink(), (yyvsp[-5]).getExpr(), mode.getClear(), NULL, NULL, options.getClear());
                            parser->checkValidRecordMode(dataset, (yyvsp[-7]), (yyvsp[-2]));
                            parser->checkValidLookupFlag(dataset, filename, (yyvsp[-8]));
                            (yyval).setExpr(dataset);
                            (yyval).setPosition((yyvsp[-10]));
                        }
#line 46430 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1419:
#line 9099 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr counter = (yyvsp[-2]).queryExpr();
                            if (counter)
                                parser->reportError(ERR_ILL_HERE,(yyvsp[-3]),"Not expecting COUNTER for DATASET");
                            parser->transferOptions((yyvsp[-6]), (yyvsp[-1]));
                            parser->normalizeExpression((yyvsp[-6]), type_string, false);

                            OwnedHqlExpr options = (yyvsp[-1]).getExpr();
                            OwnedITypeInfo type = (yyvsp[-3]).getType();
                            OwnedHqlExpr filename = (yyvsp[-6]).getExpr();
                            OwnedHqlExpr option;
                            switch (type->getTypeCode())
                            {
                            case type_string:
                                option.setown(createAttribute(asciiAtom));
                                break;
                            case type_utf8:
                            case type_unicode:
                                option.setown(createAttribute(unicodeAtom));
                                break;
                            default:
                                parser->reportError(ERR_EXPECTED, (yyvsp[-8]), "Expected STRING/UTF8/UNICODE");
                            }

                            OwnedHqlExpr empty = createList(no_list, makeSetType(NULL), NULL);
                            OwnedHqlExpr quoted = createExprAttribute(quoteAtom, LINK(empty));
                            OwnedHqlExpr separator = createExprAttribute(separatorAtom, LINK(empty));
                            OwnedHqlExpr mode = createValue(no_csv, makeNullType(), quoted.getClear(), separator.getClear(), option.getClear());
                            OwnedHqlExpr field = createField(lineId, LINK(type), NULL);
                            OwnedHqlExpr record = createRecord(field);

                            //LOCAL(expression) is now an overloaded the syntax, so disambiguate here...
                            if (filename->getOperator() == no_forcelocal)
                            {
                                filename.setown(createValue(no_assertconstant, filename->getType(), LINK(filename->queryChild(0))));
                                options.setown(createComma(options.getClear(), createAttribute(localUploadAtom)));
                            }
                            parser->saveDiskAccessInformation((yyvsp[-8]), options);
                            IHqlExpression * dataset = createNewDataset(filename.getLink(), record.getClear(), mode.getClear(), NULL, NULL, options.getClear());
                            parser->checkValidRecordMode(dataset, (yyvsp[-5]), (yyvsp[0]));
                            parser->checkValidLookupFlag(dataset, filename, (yyvsp[-6]));
                            (yyval).setExpr(dataset, (yyvsp[-8]));
                        }
#line 46478 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1420:
#line 9143 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->warnIfRecordPacked((yyvsp[-6]));
                            parser->transferOptions((yyvsp[-4]), (yyvsp[-1]));
                            parser->normalizeExpression((yyvsp[-4]), type_string, false);

                            IHqlExpression * origin = (yyvsp[-6]).getExpr();
                            OwnedHqlExpr filename = (yyvsp[-4]).getExpr();
                            IHqlExpression * mode = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr attrs = createComma(createAttribute(_origin_Atom, origin), (yyvsp[-1]).getExpr());
                            parser->saveDiskAccessInformation((yyvsp[-8]), attrs);

                            IHqlExpression * dataset = createNewDataset(filename.getLink(), LINK(origin->queryRecord()), mode, NULL, NULL, attrs.getClear());

                            parser->checkValidRecordMode(dataset, (yyvsp[-6]), (yyvsp[-2]));
                            parser->checkValidLookupFlag(dataset, filename, (yyvsp[-6]));
                            (yyval).setExpr(dataset);
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 46501 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1421:
#line 9162 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray values;
                            parser->endList(values);
                            OwnedHqlExpr table = createDataset(no_temptable, createValue(no_recordlist, NULL, values), createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setExpr(convertTempTableToInlineTable(*parser->errorHandler, (yyvsp[-5]).pos, table));
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 46513 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1422:
#line 9170 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray values;
                            parser->endList(values);
                            IHqlExpression * record = values.item(0).queryRecord();
                            parser->checkCompatibleTransforms(values, record, (yyvsp[-3]));
                            (yyval).setExpr(createDataset(no_inlinetable, createValue(no_transformlist, makeNullType(), values), createComma(LINK(record), (yyvsp[-1]).getExpr())));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 46526 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1423:
#line 9179 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //NB: $3 is required to be a list, but uses thorfilename production to work around a s/r error
                            OwnedHqlExpr counter = (yyvsp[-2]).queryExpr();
                            if (counter)
                                parser->reportError(ERR_ILL_HERE,(yyvsp[-3]),"Not expecting COUNTER for DATASET");
                            parser->normalizeExpression((yyvsp[-6]), type_set, false);

                            OwnedHqlExpr attrs = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->createDatasetFromList((yyvsp[-6]), (yyvsp[-3]), attrs), (yyvsp[-8]));
                        }
#line 46541 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1424:
#line 9190 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_scalar, false);
                            parser->normalizeExpression((yyvsp[-4]), type_scalar, false);
                            IHqlExpression * wuid = createExprAttribute(wuidAtom, (yyvsp[-6]).getExpr());
                            IHqlExpression * arg = (yyvsp[-4]).getExpr();
                            if (isStringType(arg->queryType()))
                            {
                                arg = createExprAttribute(nameAtom, arg);
                                arg = createComma(createExprAttribute(sequenceAtom, createConstant(0)), arg);
                            }
                            else
                                arg = createExprAttribute(sequenceAtom, arg);
                            (yyval).setExpr(createDataset(no_workunit_dataset, (yyvsp[-1]).getExpr(), createComma(wuid, arg)));
                            (yyval).setPosition((yyvsp[-10]));
                        }
#line 46561 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1425:
#line 9206 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_scalar, false);
                            IHqlExpression * arg = (yyvsp[-4]).getExpr();
                            if (isStringType(arg->queryType()))
                            {
                                arg = createExprAttribute(nameAtom, arg);
                                arg = createComma(createExprAttribute(sequenceAtom, createConstant(0)), arg);
                            }
                            else
                                arg = createExprAttribute(sequenceAtom, arg);
                            (yyval).setExpr(createDataset(no_workunit_dataset, (yyvsp[-1]).getExpr(), arg));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 46579 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1426:
#line 9220 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_int, false);
                            IHqlExpression * counter = (yyvsp[-2]).getExpr();
                            if (counter)
                                counter = createAttribute(_countProject_Atom, counter);
                            parser->checkInlineDatasetOptions((yyvsp[-1]));
                            (yyval).setExpr(createDataset(no_dataset_from_transform, (yyvsp[-6]).getExpr(), createComma((yyvsp[-3]).getExpr(), counter, (yyvsp[-1]).getExpr())), (yyvsp[-8]));
                        }
#line 46592 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1427:
#line 9229 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);
                            (yyval).setExpr(createDataset(no_enth, (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 46602 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1428:
#line 9235 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);
                            (yyval).setExpr(createDataset(no_enth, (yyvsp[-6]).getExpr(), createComma((yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())));
                            (yyval).setPosition((yyvsp[-8]));
                        }
#line 46613 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1429:
#line 9242 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-4]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);
                            (yyval).setExpr(createDataset(no_enth, (yyvsp[-8]).getExpr(), createComma((yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())));
                            (yyval).setPosition((yyvsp[-10]));
                        }
#line 46625 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1430:
#line 9250 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr attrs = (yyvsp[-1]).getExpr();
                            if (!parser->checkAllowed((yyvsp[-6]), "pipe", "PIPE"))
                                attrs.setown(createComma(attrs.getClear(), createAttribute(_disallowed_Atom)));
                            parser->normalizeExpression((yyvsp[-4]), type_string, false);
                            parser->checkValidPipeRecord((yyvsp[-2]), (yyvsp[-2]).queryExpr(), attrs, NULL);
                            (yyval).setExpr(createNewDataset(createBlankString(), (yyvsp[-2]).getExpr(), createValue(no_pipe, makeNullType(), (yyvsp[-4]).getExpr()), NULL, NULL, LINK(attrs)));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 46639 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1431:
#line 9260 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_string, false);

                            OwnedHqlExpr attrs = (yyvsp[-2]).getExpr();
                            if (!parser->checkAllowed((yyvsp[-7]), "pipe", "PIPE"))
                                attrs.setown(createComma(attrs.getClear(), createAttribute(_disallowed_Atom)));
                            parser->checkValidPipeRecord((yyvsp[-5]), (yyvsp[-5]).queryExpr()->queryRecord(), attrs, NULL);
                            parser->checkValidPipeRecord((yyvsp[-5]), (yyvsp[-5]).queryExpr()->queryRecord(), NULL, queryAttributeInList(outputAtom, attrs));

                            (yyval).setExpr(createDataset(no_pipe, (yyvsp[-5]).getExpr(), createComma((yyvsp[-3]).getExpr(), LINK(attrs))));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 46656 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1432:
#line 9273 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_string, false);

                            OwnedHqlExpr attrs = (yyvsp[-2]).getExpr();
                            if (!parser->checkAllowed((yyvsp[-9]), "pipe", "PIPE"))
                                attrs.setown(createComma(attrs.getClear(), createAttribute(_disallowed_Atom)));
                            parser->checkValidPipeRecord((yyvsp[-7]), (yyvsp[-7]).queryExpr()->queryRecord(), NULL, queryAttributeInList(outputAtom, attrs));
                            parser->checkValidPipeRecord((yyvsp[-3]), (yyvsp[-3]).queryExpr()->queryRecord(), attrs, NULL);

                            (yyval).setExpr(createDataset(no_pipe, (yyvsp[-7]).getExpr(), createComma((yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), LINK(attrs))));
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 46673 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1433:
#line 9286 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_preload, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 46682 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1434:
#line 9291 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createDataset(no_sample, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 46692 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1435:
#line 9297 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createDataset(no_sample, (yyvsp[-5]).getExpr(), createComma((yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr())));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 46703 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1436:
#line 9304 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            parser->normalizeExpression((yyvsp[-7]), type_int, false);
                            IHqlExpression* dataset = (yyvsp[-9]).queryExpr();
                            IHqlExpression *input = (yyvsp[-9]).getExpr();
                            OwnedHqlExpr attrs;
                            IHqlExpression *sortOrder = parser->processSortList((yyvsp[-3]), no_topn, dataset, sortItems, NULL, &attrs);
                            if (!sortOrder)
                            {
                                parser->reportError(ERR_SORT_EMPTYLIST, (yyvsp[-11]), "The list to be sorted on is empty");
                                (yyval).setExpr(input);
                            }
                            else
                            {
                                IHqlExpression * best = queryAttributeInList(bestAtom, attrs);
                                if (best)
                                    parser->checkMaxCompatible(sortOrder, best, (yyvsp[-3]));
                                bool isLocal = (queryAttributeInList(localAtom, attrs)!=NULL);
                                parser->checkDistribution((yyvsp[-9]), input, isLocal, false);
                                attrs.setown(createComma(sortOrder, (yyvsp[-7]).getExpr(), LINK(attrs)));
                                (yyval).setExpr(createDataset(no_topn, input, attrs.getClear()));
                            }
                            (yyval).setPosition((yyvsp[-11]));
                        }
#line 46733 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1437:
#line 9330 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            (yyval).setExpr(parser->createSortExpr(no_sort, (yyvsp[-6]), (yyvsp[-3]), sortItems));
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 46744 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1438:
#line 9337 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr options = (yyvsp[-3]).getExpr();
                            if (isGrouped((yyvsp[-8]).queryExpr()))
                                parser->reportError(HQLERR_CannotBeGrouped, (yyvsp[-11]), "SUBSORT not yet supported on grouped datasets");
                            //NB: $6 and $8 are reversed in their internal representation to make consistent with no_sort
                            (yyval).setExpr(createDataset(no_subsort, (yyvsp[-8]).getExpr(), createComma((yyvsp[-4]).getExpr(), (yyvsp[-6]).getExpr(), options.getClear())), (yyvsp[-11]));
                        }
#line 46756 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1439:
#line 9345 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            (yyval).setExpr(parser->createSortExpr(no_sorted, (yyvsp[-6]), (yyvsp[-3]), sortItems));
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 46767 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1440:
#line 9352 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr dataset = (yyvsp[-2]).getExpr();
                            HqlExprArray args, sorted;
                            IHqlExpression * record = dataset->queryRecord();
                            unwindRecordAsSelects(sorted, record, dataset->queryNormalizedSelector());
                            args.append(*dataset.getClear());
                            args.append(*createSortList(sorted));
                            (yyval).setExpr(createDataset(no_sorted, args));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 46782 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1441:
#line 9363 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr dataset = (yyvsp[-5]).getExpr();

                            HqlExprArray args;
                            (yyvsp[-3]).unwindCommaList(args);
                            OwnedHqlExpr stepOrder = createSortList(args);
                            (yyval).setExpr(createDatasetF(no_stepped, dataset.getClear(), stepOrder.getClear(), (yyvsp[-2]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 46796 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1442:
#line 9372 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 46805 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1443:
#line 9377 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-5]), (yyvsp[-3]), &(yyvsp[-1]));
                            (yyval).setExpr(ds.getClear(), (yyvsp[-7]));
                        }
#line 46814 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1444:
#line 9382 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-3]), (yyvsp[-1]), NULL);
                            (yyval).setExpr(ds.getClear(), (yyvsp[-5]));
                        }
#line 46823 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1445:
#line 9387 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-5]), (yyvsp[-3]), &(yyvsp[-1]));
                            (yyval).setExpr(ds.getClear(), (yyvsp[-7]));
                        }
#line 46832 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1446:
#line 9392 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = parser->processIfProduction((yyvsp[-3]), (yyvsp[-1]), NULL);
                            (yyval).setExpr(ds.getClear(), (yyvsp[-5]));
                        }
#line 46841 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1447:
#line 9397 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            OwnedHqlExpr elseExpr = (yyvsp[-1]).getExpr();
                            (yyvsp[-3]).unwindCommaList(args);
                            parser->ensureMapToRecordsMatch(elseExpr, args, (yyvsp[-1]), false);
                            args.append(*elseExpr.getClear());
                            OwnedHqlExpr expr = createDataset(no_map, args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-5]));
                        }
#line 46855 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1448:
#line 9407 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            OwnedHqlExpr elseExpr;
                            if (args.ordinality())
                                elseExpr.setown(createNullExpr(&args.item(0)));
                            else
                                elseExpr.setown(createDataset(no_null, LINK(queryNullRecord())));

                            parser->ensureMapToRecordsMatch(elseExpr, args, (yyvsp[-1]), false);
                            args.append(*elseExpr.getClear());
                            OwnedHqlExpr expr = createDataset(no_map, args);
                            (yyval).setExpr(foldConstantMapExpr(expr), (yyvsp[-3]));
                        }
#line 46874 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1449:
#line 9422 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_scalar, false);
                            HqlExprArray args;
                            OwnedHqlExpr elseExpr = (yyvsp[-1]).getExpr();
                            parser->endList(args);
                            parser->checkCaseForDuplicates(args, (yyvsp[-3]));

                            parser->ensureMapToRecordsMatch(elseExpr, args, (yyvsp[-1]), false);

                            args.add(*(yyvsp[-6]).getExpr(),0);
                            args.append(*elseExpr.getClear());
                            OwnedHqlExpr expr = createDataset(no_case, args);
                            (yyval).setExpr(foldConstantCaseExpr(expr), (yyvsp[-8]));
                        }
#line 46893 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1450:
#line 9437 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_scalar, false);
                            HqlExprArray args;
                            parser->endList(args);
                            OwnedHqlExpr elseDs;
                            if (args.ordinality())
                                elseDs.setown(createNullExpr(&args.item(0)));
                            else
                                elseDs.setown(createDataset(no_null, LINK(queryNullRecord())));
                            parser->checkCaseForDuplicates(args, (yyvsp[-1]));

                            parser->ensureMapToRecordsMatch(elseDs, args, (yyvsp[-1]), false);

                            args.add(*(yyvsp[-4]).getExpr(),0);
                            args.append(*elseDs.getClear());
                            (yyval).setExpr(::createDataset(no_case, args));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 46916 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1451:
#line 9456 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_scalar, false);
                            // change error to warning.
                            parser->reportWarning(CategoryUnusual, WRN_CASENOCONDITION, (yyvsp[-6]).pos, "CASE does not have any conditions");
                            HqlExprArray list;
                            parser->endList(list);
                            (yyvsp[-4]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-6]));
                        }
#line 46930 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1452:
#line 9466 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            OwnedHqlExpr values = (yyvsp[-1]).getExpr();
                            HqlExprArray unorderedArgs;
                            values->unwindList(unorderedArgs, no_comma);

                            HqlExprArray args;
                            reorderAttributesToEnd(args, unorderedArgs);

                            IHqlExpression * compareDs = NULL;
                            ForEachItemIn(idx, args)
                            {
                                IHqlExpression * cur = &args.item(idx);
                                if (cur->queryRecord())
                                {
                                    if (compareDs)
                                    {
                                        if (parser->lookupCtx.queryParseContext().expandCallsWhenBound && (isGrouped(cur) != isGrouped(compareDs)))
                                            parser->reportError(ERR_GROUPING_MISMATCH, (yyvsp[-5]), "Branches of the condition have different grouping");
                                        OwnedHqlExpr mapped = parser->checkEnsureRecordsMatch(compareDs, cur, (yyvsp[-1]).pos, false);
                                        if (mapped != cur)
                                            args.replace(*mapped.getClear(), idx);
                                    }
                                    else
                                        compareDs = cur;
                                }
                            }

                            args.add(*(yyvsp[-3]).getExpr(), 0);
                            (yyval).setExpr(createDataset(no_chooseds, args), (yyvsp[-5]));
                        }
#line 46966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1453:
#line 9498 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]), type_stringorunicode, false);
                            parser->checkOutputRecord((yyvsp[-5]), false);
                            IHqlExpression * ds = createDataset(no_parse, (yyvsp[-11]).getExpr(), createComma((yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), (yyvsp[-5]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));
                            if (ds->hasAttribute(tomitaAtom) && (ds->queryChild(2)->queryType()->getTypeCode() == type_pattern))
                                parser->reportError(ERR_EXPECTED_RULE, (yyvsp[-7]), "Expected a rule as parameter to PARSE");
                            (yyval).setExpr(ds);
                            (yyval).setPosition((yyvsp[-13]));
                        }
#line 46980 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1454:
#line 9508 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-9]), type_stringorunicode, false);
                            IHqlExpression * record = (yyvsp[-5]).queryExpr()->queryRecord();
                            IHqlExpression * ds = createDataset(no_newparse, (yyvsp[-11]).getExpr(), createComma((yyvsp[-9]).getExpr(), (yyvsp[-7]).getExpr(), LINK(record), createComma((yyvsp[-5]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));
                            if (ds->hasAttribute(tomitaAtom) && (ds->queryChild(2)->queryType()->getTypeCode() == type_pattern))
                                parser->reportError(ERR_EXPECTED_RULE, (yyvsp[-7]), "Expected a rule as parameter to PARSE");
                            (yyval).setExpr(ds);
                            (yyval).setPosition((yyvsp[-13]));
                        }
#line 46994 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1455:
#line 9518 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_stringorunicode, false);
                            IHqlExpression * record = (yyvsp[-4]).queryExpr()->queryRecord();
                            (yyval).setExpr(createDataset(no_newxmlparse, (yyvsp[-8]).getExpr(), createComma((yyvsp[-6]).getExpr(), LINK(record), (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()))));
                            (yyval).setPosition((yyvsp[-10]));
                        }
#line 47005 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1456:
#line 9525 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-6]), type_stringorunicode, false);
                            parser->checkOutputRecord((yyvsp[-4]), false);
                            (yyval).setExpr(createDataset(no_xmlparse, (yyvsp[-8]).getExpr(), createComma((yyvsp[-6]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())));
                            (yyval).setPosition((yyvsp[-10]));
                        }
#line 47016 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1457:
#line 9532 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Actually allow a sequence of arbitrary actions....
                            (yyval).setExpr(createDataset(no_fail, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 47026 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1458:
#line 9538 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-2]).getExpr();
                            //Actually allow a sequence of arbitrary actions....
                            (yyval).setExpr(createDataset(no_fail, LINK(ds->queryRecord()), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 47037 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1459:
#line 9545 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Actually allow a sequence of arbitrary actions....
                            (yyval).setExpr(createDataset(no_fail, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 47047 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1460:
#line 9551 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-2]).getExpr();
                            //Actually allow a sequence of arbitrary actions....
                            (yyval).setExpr(createDataset(no_fail, LINK(ds->queryRecord()), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 47058 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1461:
#line 9558 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (!parser->curTransform)
                                parser->reportError(ERR_PARSER_CANNOTRECOVER,(yyvsp[-3]),"SKIP is only valid inside a TRANSFORM");
                            (yyval).setExpr(createDataset(no_skip, (yyvsp[-1]).getExpr()));
                        }
#line 47068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1462:
#line 9564 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-10]));
                            parser->normalizeExpression((yyvsp[-8]));
                            parser->checkSoapRecord((yyvsp[-6]));
                            (yyval).setExpr(createDataset(no_soapcall, (yyvsp[-10]).getExpr(), createComma((yyvsp[-8]).getExpr(), (yyvsp[-6]).getExpr(), (yyvsp[-2]).getExpr())));
                            (yyval).setPosition((yyvsp[-12]));
                        }
#line 47080 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1463:
#line 9572 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-12]));
                            parser->normalizeExpression((yyvsp[-10]));
                            parser->checkSoapRecord((yyvsp[-8]));
                            (yyval).setExpr(createDataset(no_soapcall, (yyvsp[-12]).getExpr(), createComma((yyvsp[-10]).getExpr(), (yyvsp[-8]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[-1]).getExpr())));
                            parser->checkOnFailRecord((yyval).queryExpr(), (yyvsp[-14]));
                            (yyval).setPosition((yyvsp[-14]));
                        }
#line 47093 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1464:
#line 9581 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-12]));
                            parser->normalizeExpression((yyvsp[-10]));
                            (yyval).setExpr(createDataset(no_newsoapcall, (yyvsp[-12]).getExpr(), createComma((yyvsp[-10]).getExpr(), (yyvsp[-8]).getExpr(), (yyvsp[-6]).getExpr(), (yyvsp[-2]).getExpr())));
                            (yyval).setPosition((yyvsp[-14]));
                        }
#line 47104 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1465:
#line 9588 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-14]));
                            parser->normalizeExpression((yyvsp[-12]));
                            (yyval).setExpr(createDataset(no_newsoapcall, (yyvsp[-14]).getExpr(), createComma((yyvsp[-12]).getExpr(), (yyvsp[-10]).getExpr(), (yyvsp[-8]).getExpr(), createComma((yyvsp[-4]).getExpr(), (yyvsp[-1]).getExpr()))));
                            parser->checkOnFailRecord((yyval).queryExpr(), (yyvsp[-16]));
                            (yyval).setPosition((yyvsp[-16]));
                        }
#line 47116 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1466:
#line 9596 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-12]));
                            parser->normalizeExpression((yyvsp[-10]));
                            parser->checkSoapRecord((yyvsp[-8]));
                            (yyval).setExpr(createDataset(no_soapcall_ds, (yyvsp[-14]).getExpr(), createComma((yyvsp[-12]).getExpr(), (yyvsp[-10]).getExpr(), (yyvsp[-8]).getExpr(), createComma((yyvsp[-4]).getExpr(), (yyvsp[0]).getExpr()))));
                            (yyval).setPosition((yyvsp[-16]));
                        }
#line 47128 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1467:
#line 9604 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-14]));
                            parser->normalizeExpression((yyvsp[-12]));
                            parser->checkSoapRecord((yyvsp[-10]));
                            (yyval).setExpr(createDataset(no_soapcall_ds, (yyvsp[-16]).getExpr(), createComma((yyvsp[-14]).getExpr(), (yyvsp[-12]).getExpr(), (yyvsp[-10]).getExpr(), createComma((yyvsp[-6]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[0]).getExpr()))));
                            parser->checkOnFailRecord((yyval).queryExpr(), (yyvsp[-18]));
                            (yyval).setPosition((yyvsp[-18]));
                        }
#line 47141 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1468:
#line 9613 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-14]));
                            parser->normalizeExpression((yyvsp[-12]));
                            (yyval).setExpr(createDataset(no_newsoapcall_ds, (yyvsp[-16]).getExpr(), createComma((yyvsp[-14]).getExpr(), (yyvsp[-12]).getExpr(), (yyvsp[-10]).getExpr(), createComma((yyvsp[-8]).getExpr(), (yyvsp[-4]).getExpr(), (yyvsp[0]).getExpr()))));
                            (yyval).setPosition((yyvsp[-18]));
                        }
#line 47152 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1469:
#line 9620 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-16]));
                            parser->normalizeExpression((yyvsp[-14]));
                            (yyval).setExpr(createDataset(no_newsoapcall_ds, (yyvsp[-18]).getExpr(), createComma((yyvsp[-16]).getExpr(), (yyvsp[-14]).getExpr(), (yyvsp[-12]).getExpr(), createComma((yyvsp[-10]).getExpr(), (yyvsp[-6]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[0]).getExpr()))));
                            parser->checkOnFailRecord((yyval).queryExpr(), (yyvsp[-20]));
                            (yyval).setPosition((yyvsp[-20]));
                        }
#line 47164 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1470:
#line 9628 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_globalscope, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 47173 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1471:
#line 9633 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            (yyval).setExpr(createDataset(no_globalscope, (yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr())));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 47183 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1472:
#line 9639 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_forcelocal, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47192 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1473:
#line 9644 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_forcenolocal, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47201 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1474:
#line 9649 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-3]).getExpr();
                            if (isGrouped(ds))
                                parser->reportError(ERR_REMOTE_GROUPED, (yyvsp[-6]), "ALLNODES() is not currently supported on grouped datasets");
                            HqlExprArray args;
                            args.append(*LINK(ds));
                            (yyvsp[-1]).unwindCommaList(args);
                            IHqlExpression * onFail = queryAttribute(onFailAtom, args);
                            if (onFail && !parser->checkTransformTypeMatch((yyvsp[-3]), ds, onFail->queryChild(0)))
                                args.zap(*onFail);
                            (yyval).setExpr(createDataset(no_allnodes, args));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 47219 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1475:
#line 9663 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_thisnode, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47228 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1476:
#line 9668 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * row = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createDatasetFromRow(row));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47238 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1477:
#line 9674 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * dictionary = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createDataset(no_datasetfromdictionary, dictionary), (yyvsp[-3]));
                        }
#line 47247 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1478:
#line 9679 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * record = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createDataset(no_null, record));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47257 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1479:
#line 9685 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if (parser->okToAddSideEffects((yyvsp[-1]).queryExpr()))
                            {
                                (yyval).setExpr(createCompound((yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            }
                            else
                            {
                                (yyvsp[-3]).release();
                                (yyval).setExpr((yyvsp[-1]).getExpr());
                            }
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 47274 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1480:
#line 9698 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAliasOwn((yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47283 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1481:
#line 9703 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression * action = parser->createAssert((yyvsp[-3]), NULL, (yyvsp[-2]));
                            (yyval).setExpr(createDataset(no_assert_ds, (yyvsp[-5]).getExpr(), action));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 47294 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1482:
#line 9710 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]));
                            parser->normalizeExpression((yyvsp[-3]));
                            IHqlExpression * action = parser->createAssert((yyvsp[-5]), &(yyvsp[-3]), (yyvsp[-2]));
                            (yyval).setExpr(createDataset(no_assert_ds, (yyvsp[-7]).getExpr(), action));
                            //MORE: This should possibly be a more general no_throughapply
                            (yyval).setPosition((yyvsp[-9]));
                        }
#line 47307 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1483:
#line 9719 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_assert_ds, (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr()));
                            //MORE: This should possibly be a more general no_throughapply
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 47317 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1484:
#line 9725 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr ds = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(parser->resolveRows((yyvsp[-3]), ds), (yyvsp[-3]));
                        }
#line 47326 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1485:
#line 9730 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-4]), type_string, false);
                            parser->validateXPath((yyvsp[-4]));
                            (yyval).setExpr(createDatasetF(no_xmlproject, (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), parser->createUniqueId(), (yyvsp[-1]).getExpr(), NULL));
                            (yyval).setPosition((yyvsp[-6]));
                        }
#line 47337 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1486:
#line 9737 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDatasetF(no_executewhen, (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr(), NULL), (yyvsp[-6]));
                        }
#line 47345 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1487:
#line 9741 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDatasetF(no_executewhen, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr(), createAttribute(successAtom), NULL), (yyvsp[-5]));
                        }
#line 47353 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1488:
#line 9746 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processUserAggregate((yyvsp[-10]), (yyvsp[-8]), (yyvsp[-6]), (yyvsp[-4]), NULL, NULL, (yyvsp[-1]), (yyvsp[0])), (yyvsp[-10]));
                        }
#line 47361 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1489:
#line 9750 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processUserAggregate((yyvsp[-12]), (yyvsp[-10]), (yyvsp[-8]), (yyvsp[-6]), NULL, &(yyvsp[-3]), (yyvsp[-1]), (yyvsp[0])), (yyvsp[-12]));
                        }
#line 47369 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1490:
#line 9754 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processUserAggregate((yyvsp[-12]), (yyvsp[-10]), (yyvsp[-8]), (yyvsp[-6]), &(yyvsp[-3]), NULL, (yyvsp[-1]), (yyvsp[0])), (yyvsp[-12]));
                        }
#line 47377 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1491:
#line 9758 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processUserAggregate((yyvsp[-14]), (yyvsp[-12]), (yyvsp[-10]), (yyvsp[-8]), &(yyvsp[-5]), &(yyvsp[-3]), (yyvsp[-1]), (yyvsp[0])), (yyvsp[-14]));
                        }
#line 47385 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1492:
#line 9762 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-10]), type_int, false);
                            OwnedHqlExpr ds = (yyvsp[-12]).getExpr();
                            OwnedHqlExpr sortlist = (yyvsp[-8]).getExpr();
                            OwnedHqlExpr transform = (yyvsp[-5]).getExpr();
                            OwnedHqlExpr options = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr counter = (yyvsp[-3]).getExpr();
                            if (counter)
                                options.setown(createComma(options.getClear(), createAttribute(_countProject_Atom, counter.getClear())));
                            OwnedHqlExpr selSeq = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createDatasetF(no_quantile, ds.getClear(), (yyvsp[-10]).getExpr(), sortlist.getClear(), transform.getClear(), selSeq.getClear(), options.getClear(), NULL), (yyvsp[-14]));
                        }
#line 47402 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1493:
#line 9775 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-8]), type_int, false);
                            OwnedHqlExpr ds = (yyvsp[-10]).getExpr();
                            OwnedHqlExpr sortlist = (yyvsp[-6]).getExpr();
                            OwnedHqlExpr options = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr counter = (yyvsp[-3]).getExpr();
                            OwnedHqlExpr selSeq = (yyvsp[0]).getExpr();
                            OwnedHqlExpr leftSelect = createSelector(no_left, ds, selSeq);
                            OwnedHqlExpr transform = parser->createDefaultAssignTransform(ds->queryRecord(), leftSelect, (yyvsp[-12]));
                            (yyval).setExpr(createDatasetF(no_quantile, ds.getClear(), (yyvsp[-8]).getExpr(), sortlist.getClear(), transform.getClear(), selSeq.getClear(), options.getClear(), NULL), (yyvsp[-12]));
                        }
#line 47418 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1494:
#line 9787 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createDataset(no_unordered, (yyvsp[-2]).getExpr()), (yyvsp[-4]));
                        }
#line 47426 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1496:
#line 9796 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 47435 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1498:
#line 9805 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 47444 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1501:
#line 9814 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(dedupAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 47453 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1502:
#line 9819 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-2]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(sortedAtom, args));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 47464 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1504:
#line 9830 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 47473 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1507:
#line 9840 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);
                            IHqlExpression * sortlist = parser->processSortList((yyvsp[-1]), no_sortlist, NULL, sortItems, NULL, NULL);
                            (yyval).setExpr(createExprAttribute(groupAtom, sortlist), (yyvsp[-4]));
                        }
#line 47484 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1508:
#line 9850 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 47492 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1509:
#line 9854 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(beforeAtom), (yyvsp[0]));
                        }
#line 47500 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1510:
#line 9858 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(successAtom), (yyvsp[0]));
                        }
#line 47508 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1511:
#line 9862 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(failureAtom), (yyvsp[0]));
                        }
#line 47516 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1512:
#line 9866 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(parallelAtom), (yyvsp[0]));
                        }
#line 47524 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1513:
#line 9873 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 47532 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1515:
#line 9881 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 47540 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1516:
#line 9885 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 47548 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1517:
#line 9892 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(firstAtom), (yyvsp[0]));
                        }
#line 47556 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1518:
#line 9896 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(lastAtom), (yyvsp[0]));
                        }
#line 47564 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1519:
#line 9900 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(scoreAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 47573 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1520:
#line 9905 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(dedupAtom), (yyvsp[0]));
                        }
#line 47581 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1521:
#line 9909 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_set, false);
                            (yyval).setExpr(createExprAttribute(rangeAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 47590 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1524:
#line 9918 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 47596 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1525:
#line 9920 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 47604 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1526:
#line 9926 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(keyedAtom)); (yyval).setPosition((yyvsp[0])); }
#line 47610 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1527:
#line 9927 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(countAtom)); (yyval).setPosition((yyvsp[0])); }
#line 47616 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1528:
#line 9928 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(skipAtom)); (yyval).setPosition((yyvsp[0])); }
#line 47622 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1529:
#line 9930 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(onFailAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47631 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1532:
#line 9939 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(skipAtom)); (yyval).setPosition((yyvsp[0])); }
#line 47637 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1533:
#line 9941 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(onFailAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47646 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1535:
#line 9949 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 47652 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1536:
#line 9951 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 47660 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1539:
#line 9960 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(keyedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 47669 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1540:
#line 9968 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(prefetchAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 47678 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1541:
#line 9973 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(prefetchAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 47688 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1542:
#line 9979 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            (yyval).setExpr(createExprAttribute(prefetchAtom, (yyvsp[-3]).getExpr(), createExprAttribute(parallelAtom)));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 47698 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1543:
#line 9987 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 47706 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1544:
#line 9991 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 47714 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1546:
#line 9998 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fewAtom), (yyvsp[0])); }
#line 47720 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1547:
#line 10002 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 47728 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1548:
#line 10006 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 47736 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1550:
#line 10017 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 47744 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1551:
#line 10021 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            (yyval).setExpr(createExprAttribute(rowLimitAtom, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 47754 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1552:
#line 10029 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 47762 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1553:
#line 10033 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 47770 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1554:
#line 10039 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(assertAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 47779 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1555:
#line 10046 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 47785 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1556:
#line 10048 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-1]));
                        }
#line 47793 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1557:
#line 10055 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_real, false);
                            (yyval).setExpr(createExprAttribute(priorityAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 47802 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1558:
#line 10060 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(prefetchAtom), (yyvsp[0]));
                        }
#line 47810 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1559:
#line 10064 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(prefetchAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 47819 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1560:
#line 10069 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(filteredAtom), (yyvsp[0]));
                        }
#line 47827 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1563:
#line 10078 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 47833 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1564:
#line 10080 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 47842 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1566:
#line 10089 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(graphAtom), (yyvsp[0]));
                        }
#line 47850 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1567:
#line 10093 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(privateAtom), (yyvsp[0]));
                        }
#line 47858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1568:
#line 10100 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->leaveEnum((yyvsp[-3])), (yyvsp[-3]));
                        }
#line 47866 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1569:
#line 10107 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedITypeInfo type = makeIntType(4, false);
                            parser->enterEnum((yyvsp[-1]), type);
                            (yyval).clear();
                        }
#line 47876 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1571:
#line 10117 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedITypeInfo type = (yyvsp[0]).getType();
                            parser->setEnumType((yyvsp[0]), type);
                            (yyval).clear();
                        }
#line 47886 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1574:
#line 10132 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->processEnum((yyvsp[0]), NULL);
                            (yyval).clear();
                        }
#line 47895 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1575:
#line 10137 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_numeric, false);
                            OwnedHqlExpr nextValue = (yyvsp[0]).getExpr();
                            parser->processEnum((yyvsp[-2]), nextValue);
                            (yyval).clear();
                        }
#line 47906 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1576:
#line 10144 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[0]).setId(parser->getNameFromExpr((yyvsp[0])));
                            parser->processEnum((yyvsp[0]), NULL);
                            (yyval).clear();
                        }
#line 47916 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1577:
#line 10150 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).setId(parser->getNameFromExpr((yyvsp[-2])));
                            parser->normalizeExpression((yyvsp[0]), type_numeric, false);
                            OwnedHqlExpr nextValue = (yyvsp[0]).getExpr();
                            parser->processEnum((yyvsp[-2]), nextValue);
                            (yyval).clear();
                        }
#line 47928 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1578:
#line 10161 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            OwnedHqlExpr record = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr name = (yyvsp[0]).getExpr();
                            if (record->getOperator() == no_null)
                            {
                                if (parser->topScopes.ordinality())
                                    record.setown(parser->createRecordFromDataset(&parser->topScopes.tos()));
                                else
                                {
                                    parser->reportError(ERR_RECORD_EMPTYDEF, (yyvsp[-2]), "Record cannot be omitted when dataset not supplied");
                                    record.set(queryNullRecord());
                                }
                            }

                            parser->pushTopScope(record);
                            (yyval).setExpr(createComma(record.getClear(), name.getClear()));
                        }
#line 47951 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1579:
#line 10180 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            OwnedHqlExpr record = (yyvsp[-4]).getExpr();
                            OwnedHqlExpr transform = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr name = (yyvsp[0]).getExpr();
                            if (record->getOperator() == no_null)
                            {
                                if (parser->topScopes.ordinality())
                                    record.setown(parser->createRecordFromDataset(&parser->topScopes.tos()));
                                else
                                {
                                    parser->reportError(ERR_RECORD_EMPTYDEF, (yyvsp[-4]), "Record cannot be omitted when dataset not supplied");
                                    record.set(queryNullRecord());
                                }
                            }

                            parser->pushTopScope(record);
                            (yyval).setExpr(createComma(record.getClear(), transform.getClear(), name.getClear()));
                        }
#line 47975 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1580:
#line 10200 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            OwnedHqlExpr record = (yyvsp[-4]).getExpr();
                            if (record->getOperator() == no_null)
                            {
                                parser->reportError(ERR_RECORD_EMPTYDEF, (yyvsp[-4]), "Record cannot be omitted");
                                record.set(queryNullRecord());
                            }
                            OwnedHqlExpr payload = (yyvsp[-2]).getExpr();
                            OwnedHqlExpr extra = (yyvsp[0]).getExpr();
                            parser->modifyIndexPayloadRecord(record, payload, extra, (yyvsp[-4]));

                            parser->pushTopScope(record);
                            (yyval).setExpr(createComma(record.getClear(), extra.getClear()));
                        }
#line 47995 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1582:
#line 10221 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[0]).getExpr());
                        }
#line 48003 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1583:
#line 10228 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_int, false);
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            (yyval).setExpr(createValue(no_fail, makeVoidType(), (yyvsp[-3]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 48013 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1584:
#line 10234 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_scalar, false);
                            parser->checkIntegerOrString((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_fail, makeVoidType(), (yyvsp[-1]).getExpr()));
                        }
#line 48023 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1585:
#line 10240 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray actions;
                            parser->endList(actions);
                            (yyval).setExpr(createActionList(actions), (yyvsp[-2]));
                        }
#line 48033 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1586:
#line 10248 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_flat));   }
#line 48039 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1587:
#line 10249 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_csv));    }
#line 48045 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1588:
#line 10251 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createValue(no_csv, makeNullType(), args));
                        }
#line 48055 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1589:
#line 10256 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_sql));    }
#line 48061 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1590:
#line 10257 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_thor));   }
#line 48067 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1591:
#line 10259 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            throwUnexpected();
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_thor, (yyvsp[-1]).getExpr()));
                        }
#line 48077 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1592:
#line 10264 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_xml));    }
#line 48083 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1593:
#line 10266 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);

                            //Create expression in a form that is backward compatible
                            IHqlExpression * name = queryAttribute(rowAtom, args);
                            if (name)
                            {
                                args.add(*LINK(name->queryChild(0)), 0);
                                args.zap(*name);
                            }
                            else
                                args.add(*createConstant("xml"), 0);
                            (yyval).setExpr(createValue(no_xml, makeNullType(), args));
                        }
#line 48103 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1594:
#line 10281 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createValue(no_json));    }
#line 48109 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1595:
#line 10283 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);

                            //Create expression in a form that is backward compatible
                            IHqlExpression * name = queryAttribute(rowAtom, args);
                            if (name)
                            {
                                args.add(*LINK(name->queryChild(0)), 0);
                                args.zap(*name);
                            }
                            else
                                args.add(*createConstant("json"), 0);
                            (yyval).setExpr(createValue(no_json, makeNullType(), args));
                        }
#line 48129 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1597:
#line 10302 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(optAtom)); }
#line 48135 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1598:
#line 10303 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(unsortedAtom)); }
#line 48141 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1599:
#line 10304 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(randomAtom)); }
#line 48147 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1600:
#line 10305 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(sequentialAtom)); }
#line 48153 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1601:
#line 10306 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(bitmapAtom)); }
#line 48159 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1602:
#line 10307 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(__compressed__Atom)); }
#line 48165 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1603:
#line 10308 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(groupedAtom)); }
#line 48171 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1605:
#line 10310 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(preloadAtom)); }
#line 48177 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1606:
#line 10312 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(preloadAtom, (yyvsp[-1]).getExpr())); }
#line 48183 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1607:
#line 10314 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_data, false);
                            (yyval).setExpr(createExprAttribute(encryptAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48193 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1608:
#line 10320 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(dynamicAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48202 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1609:
#line 10325 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(countAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3])); }
#line 48208 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1610:
#line 10327 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(maxCountAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3])); }
#line 48214 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1611:
#line 10329 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(aveAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3])); }
#line 48220 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1612:
#line 10331 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(__option__Atom, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48231 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1614:
#line 10342 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(lookupAtom, (yyvsp[0]).getExpr()), (yyvsp[-1]));
                        }
#line 48239 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1616:
#line 10350 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 48245 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1617:
#line 10354 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 48251 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1618:
#line 10355 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 48257 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1619:
#line 10359 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->convertAllToAttribute((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 48266 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1620:
#line 10364 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), createAttribute(dynamicAtom)));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48276 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1621:
#line 10372 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 48282 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1622:
#line 10374 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * index = (yyvsp[0]).getExpr();
                            if (!isKey(index))
                                parser->reportError(ERR_EXPECTED_INDEX, (yyvsp[0]), "Expected INDEX as parameter to KEYED");
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), index));
                        }
#line 48293 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1624:
#line 10385 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 48299 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1625:
#line 10389 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(ebcdicAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48308 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1626:
#line 10393 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(asciiAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48317 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1627:
#line 10397 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> type = (yyvsp[0]).getType();
                            if (type->getTypeCode() != type_unicode && type->getTypeCode() != type_utf8)
                                parser->reportError(ERR_EXPECTED, (yyvsp[0]), "Expected UNICODE");
                            (yyval).setExpr(createAttribute(unicodeAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48329 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1628:
#line 10405 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(headingAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48338 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1629:
#line 10410 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            HqlExprArray orderedArgs;
                            reorderAttributesToEnd(orderedArgs, args);
                            (yyval).setExpr(createExprAttribute(headingAtom, orderedArgs), (yyvsp[-4]));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 48351 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1630:
#line 10419 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48360 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1631:
#line 10424 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48369 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1632:
#line 10429 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(quoteAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48379 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1633:
#line 10435 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(separatorAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48389 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1634:
#line 10441 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(terminatorAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48399 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1635:
#line 10447 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]));
                            (yyval).setExpr(createExprAttribute(terminatorAtom, createComma((yyvsp[-3]).getExpr(), createAttribute(quoteAtom))));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 48409 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1636:
#line 10453 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(escapeAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48419 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1637:
#line 10459 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(noTrimAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48428 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1639:
#line 10468 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2]));
                        }
#line 48436 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1640:
#line 10474 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(singleAtom), (yyvsp[0])); }
#line 48442 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1641:
#line 10475 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom), (yyvsp[0])); }
#line 48448 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1642:
#line 10477 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 48457 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1643:
#line 10482 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE: This really should check the prototype matches what we expect
                            (yyval).setExpr(createExprAttribute(formatAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 48466 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1645:
#line 10491 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 48472 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1646:
#line 10496 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                        }
#line 48480 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1647:
#line 10500 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                        }
#line 48488 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1648:
#line 10503 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(noRootAtom)); }
#line 48494 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1649:
#line 10505 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            if ((yyvsp[-1]).queryExpr())
                                parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(headingAtom, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 48506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1650:
#line 10512 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_string, false);
                            (yyval).setExpr(createExprAttribute(rowAtom, (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48516 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1651:
#line 10517 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(trimAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48525 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1652:
#line 10521 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(optAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48534 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1653:
#line 10528 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 48540 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1654:
#line 10529 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).inherit((yyvsp[0])); }
#line 48546 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1656:
#line 10534 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2])); }
#line 48552 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1657:
#line 10538 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(repeatAtom)); }
#line 48558 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1659:
#line 10541 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(outputAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 48566 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1660:
#line 10544 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(groupAtom)); }
#line 48572 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1661:
#line 10545 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(optAtom)); }
#line 48578 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1662:
#line 10549 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(csvAtom), (yyvsp[0]));
                        }
#line 48586 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1663:
#line 10553 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(csvAtom, args), (yyvsp[-3]));
                        }
#line 48596 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1664:
#line 10558 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(xmlAtom), (yyvsp[0]));
                        }
#line 48604 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1665:
#line 10562 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(xmlAtom, args), (yyvsp[-3]));
                        }
#line 48614 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1666:
#line 10567 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(flatAtom), (yyvsp[0]));   }
#line 48620 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1667:
#line 10568 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(thorAtom), (yyvsp[0]));   }
#line 48626 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1669:
#line 10574 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 48635 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1670:
#line 10579 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 48643 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1671:
#line 10583 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            (yyval).setExpr(createComma((yyvsp[-4]).getExpr(), createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()))); 
                        }
#line 48652 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1672:
#line 10590 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(exclusiveAtom)); }
#line 48658 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1673:
#line 10591 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(enthAtom)); }
#line 48664 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1674:
#line 10592 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(lastAtom)); }
#line 48670 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1675:
#line 10598 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->normalizeExpression((yyvsp[-2]), type_string, false);
                            OwnedHqlExpr attrs = (yyvsp[-1]).getExpr();
                            if (!parser->checkAllowed((yyvsp[-4]), "pipe", "PIPE"))
                                attrs.setown(createComma(attrs.getClear(), createAttribute(_disallowed_Atom)));
                            (yyval).setExpr(createComma(createValue(no_pipe, makeNullType(), (yyvsp[-2]).getExpr()), LINK(attrs)));
                        }
#line 48682 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1676:
#line 10609 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 48690 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1677:
#line 10613 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 48698 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1678:
#line 10617 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 48707 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1679:
#line 10622 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_int, false);
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 48717 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1681:
#line 10632 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 48726 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1682:
#line 10640 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(groupedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48735 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1684:
#line 10646 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(fewAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48744 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1685:
#line 10654 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 48753 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1689:
#line 10662 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray values;
                            parser->endList(values);
                            (yyval).setExpr(createValue(no_recordlist, makeNullType(), values));
                        }
#line 48763 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1690:
#line 10670 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 48772 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1691:
#line 10677 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement(createAttribute(_payload_Atom));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48782 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1697:
#line 10697 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            parser->endList(args);
                            setPayloadAttribute(args);
//                          args.append(*createLocationAttr($1));           // improves the error reporting, but slows it down, and changes the expression crcs
                            (yyval).setExpr(createValue(no_rowvalue, makeNullType(), args));
                        }
#line 48794 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1698:
#line 10708 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addListElement((yyvsp[0]).getExpr()); (yyval).clear(); }
#line 48800 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1699:
#line 10710 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addListElement((yyvsp[0]).getExpr()); (yyval).clear(); }
#line 48806 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1700:
#line 10712 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addListElement((yyvsp[0]).getExpr()); (yyval).clear(); }
#line 48812 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1701:
#line 10714 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->addListElement((yyvsp[0]).getExpr()); (yyval).clear(); }
#line 48818 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1702:
#line 10719 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->addListElement((yyvsp[0]).getExpr()); 
                            (yyval).clear(); 
                        }
#line 48827 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1703:
#line 10724 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->addListElement((yyvsp[0]).getExpr()); 
                            (yyval).clear(); 
                        }
#line 48836 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1704:
#line 10731 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 48842 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1705:
#line 10732 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 48848 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1707:
#line 10738 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()), (yyvsp[-2])); }
#line 48854 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1708:
#line 10742 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(leftouterAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48860 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1709:
#line 10743 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(rightouterAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48866 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1710:
#line 10744 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fullouterAtom)); (yyval).setPosition((yyvsp[-2])); }
#line 48872 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1711:
#line 10745 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fullouterAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48878 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1712:
#line 10746 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(leftonlyAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48884 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1713:
#line 10747 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(leftonlyAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48890 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1714:
#line 10748 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(rightonlyAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48896 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1715:
#line 10749 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(rightonlyAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48902 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1716:
#line 10750 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fullonlyAtom)); (yyval).setPosition((yyvsp[-2])); }
#line 48908 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1717:
#line 10751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fullonlyAtom)); (yyval).setPosition((yyvsp[-1])); }
#line 48914 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1718:
#line 10752 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(innerAtom)); (yyval).setPosition((yyvsp[0])); }
#line 48920 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1719:
#line 10753 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(hashAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48929 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1720:
#line 10758 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * index = (yyvsp[-1]).getExpr();
                            if (!isKey(index))
                                parser->reportError(ERR_EXPECTED_INDEX, (yyvsp[-1]), "Expected INDEX as parameter to KEYED");
                            (yyval).setExpr(createExprAttribute(keyedAtom, index));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 48941 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1721:
#line 10766 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(keyedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48950 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1722:
#line 10771 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(fewAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 48959 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1724:
#line 10776 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma(createAttribute(lookupAtom), createAttribute(manyAtom))); (yyval).setPosition((yyvsp[-1])); }
#line 48965 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1725:
#line 10777 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma(createAttribute(lookupAtom), createAttribute(manyAtom), createAttribute(groupedAtom))); (yyval).setPosition((yyvsp[0])); }
#line 48971 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1726:
#line 10778 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom)); (yyval).setPosition((yyvsp[0])); }
#line 48977 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1727:
#line 10779 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(lookupAtom)); (yyval).setPosition((yyvsp[0])); }
#line 48983 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1728:
#line 10780 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(smartAtom)); (yyval).setPosition((yyvsp[0])); }
#line 48989 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1729:
#line 10781 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(noSortAtom)); (yyval).setPosition((yyvsp[0])); }
#line 48995 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1730:
#line 10783 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(noSortAtom, createAttribute(leftAtom))); (yyval).setPosition((yyvsp[-3])); }
#line 49001 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1731:
#line 10785 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(noSortAtom, createAttribute(rightAtom))); (yyval).setPosition((yyvsp[-3])); }
#line 49007 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1732:
#line 10787 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(atmostAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 49017 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1733:
#line 10793 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_boolean, false);
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(atmostAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 49028 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1734:
#line 10800 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-5]), type_boolean, false);
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(atmostAtom, (yyvsp[-5]).getExpr(), (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-7]));
                        }
#line 49039 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1735:
#line 10807 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(atmostAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 49049 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1736:
#line 10813 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(keepAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 49059 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1737:
#line 10819 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(partitionLeftAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 49068 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1738:
#line 10824 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(partitionRightAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 49077 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1739:
#line 10829 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createAttribute(thresholdAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 49087 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1740:
#line 10834 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(allAtom)); }
#line 49093 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1742:
#line 10837 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]), type_numeric, false);

                            HqlExprArray args;
                            args.append(*(yyvsp[-2]).getExpr());
                            (yyvsp[-1]).unwindCommaList(args);

                            IHqlExpression * onFail = queryAttribute(onFailAtom, args);
                            if (onFail)
                            {
                                onFail->Link();
                                args.zap(*onFail);
                            }
                            IHqlExpression * attr = createExprAttribute(rowLimitAtom, args);
                            (yyval).setExpr(createComma(attr, onFail));
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 49115 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1744:
#line 10856 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(sequentialAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 49124 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1745:
#line 10861 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-2]).unwindCommaList(args);
                            OwnedHqlExpr sortlist = createSortList(args);
                            OwnedHqlExpr groupAttr = createExprAttribute(groupAtom, sortlist.getClear());
                            OwnedHqlExpr impliedAttr = createComma(createAttribute(lookupAtom), createAttribute(manyAtom));
                            (yyval).setExpr(createComma(groupAttr.getClear(), impliedAttr.getClear()), (yyvsp[-5]));
                        }
#line 49137 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1746:
#line 10869 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(streamedAtom)); (yyval).setPosition((yyvsp[0])); }
#line 49143 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1747:
#line 10874 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 49149 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1748:
#line 10876 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 49155 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1749:
#line 10880 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(skipAtom)); }
#line 49161 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1750:
#line 10881 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createAttribute(countAtom)); }
#line 49167 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1752:
#line 10884 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createExprAttribute(onFailAtom, (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 49176 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1754:
#line 10894 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 49185 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1755:
#line 10902 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(mofnAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 49195 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1756:
#line 10908 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-3]), type_numeric, false);
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(mofnAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 49206 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1757:
#line 10915 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(dedupAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 49215 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1758:
#line 10920 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(leftonlyAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 49224 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1759:
#line 10925 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(leftouterAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 49233 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1760:
#line 10930 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(assertAtom));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 49242 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1761:
#line 10935 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-2]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(sortedAtom, args));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 49253 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1762:
#line 10942 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(internalFlagsAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 49263 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1763:
#line 10948 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(skewAtom, args));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 49274 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1765:
#line 10959 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, true);
                            (yyval).setExpr(createExprAttribute(skewAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49283 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1766:
#line 10964 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            if ((yyvsp[-3]).queryExpr())
                            {
                                parser->normalizeExpression((yyvsp[-3]), type_numeric, true);
                            }
                            else
                                (yyvsp[-3]).setExpr(createValue(no_null));

                            parser->normalizeExpression((yyvsp[-1]), type_any, true);
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(skewAtom, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 49300 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1767:
#line 10979 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 49306 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1768:
#line 10981 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr((yyvsp[0]).getExpr());
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 49315 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1770:
#line 10989 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 49321 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1771:
#line 10994 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, true);
                            (yyval).setExpr(createExprAttribute(atmostAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49330 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1772:
#line 10999 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(skewAtom));
                        }
#line 49338 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1773:
#line 11003 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(namedAtom, (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 49348 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1774:
#line 11012 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 49354 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1777:
#line 11019 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-1]).getExpr(), (yyvsp[0]).getExpr())); }
#line 49360 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1778:
#line 11023 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 49366 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1779:
#line 11027 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(leftAtom)); }
#line 49372 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1780:
#line 11028 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(rightAtom)); }
#line 49378 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1781:
#line 11029 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(allAtom)); }
#line 49384 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1782:
#line 11030 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(whitespaceAtom)); }
#line 49390 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1783:
#line 11034 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).clear(); }
#line 49396 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1786:
#line 11040 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 49402 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1787:
#line 11044 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 49408 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1788:
#line 11046 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 49414 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1789:
#line 11050 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(keepAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 49423 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1790:
#line 11054 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(skipAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 49432 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1791:
#line 11058 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createExprAttribute(sampleAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 49441 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1792:
#line 11063 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeStoredNameExpression((yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(namedAtom, (yyvsp[-1]).getExpr()), (yyvsp[-3]));
                        }
#line 49450 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1793:
#line 11068 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE:SORTLIST  Allow a sortlist to be expanded!
                            parser->normalizeExpression((yyvsp[0]), type_boolean, false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49460 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1795:
#line 11081 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 49466 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1796:
#line 11083 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 49472 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1797:
#line 11087 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(allAtom)); }
#line 49478 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1798:
#line 11088 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(firstAtom)); }
#line 49484 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1799:
#line 11089 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(wholeAtom)); }
#line 49490 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1800:
#line 11090 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(noScanAtom)); }
#line 49496 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1801:
#line 11091 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(scanAtom)); }
#line 49502 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1802:
#line 11092 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(scanAllAtom)); }
#line 49508 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1803:
#line 11093 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(noCaseAtom)); }
#line 49514 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1804:
#line 11094 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(caseAtom)); }
#line 49520 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1805:
#line 11096 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(separatorAtom, (yyvsp[-1]).getExpr())); }
#line 49526 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1806:
#line 11098 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_set, true);
                            parser->validateParseTerminate((yyvsp[-1]).queryExpr(), (yyvsp[-1]));
                            (yyval).setExpr(createExprAttribute(terminatorAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49536 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1807:
#line 11105 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(atmostAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49545 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1808:
#line 11110 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(keepAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49554 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1809:
#line 11115 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matched, makeNullType(), createValue(no_all, makeVoidType())));
                        }
#line 49562 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1810:
#line 11119 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_matched, makeNullType(), (yyvsp[-1]).getExpr()));
                        }
#line 49570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1811:
#line 11122 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(maxAtom)); }
#line 49576 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1812:
#line 11123 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(minAtom)); }
#line 49582 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1813:
#line 11125 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_pat_use, (yyvsp[-1]).getExpr()));
                        }
#line 49590 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1814:
#line 11128 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(bestAtom)); }
#line 49596 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1815:
#line 11129 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma(createAttribute(bestAtom), createAttribute(manyAtom))); }
#line 49602 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1816:
#line 11130 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma(createAttribute(minAtom), createAttribute(manyAtom))); }
#line 49608 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1817:
#line 11131 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma(createAttribute(maxAtom), createAttribute(manyAtom))); }
#line 49614 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1818:
#line 11132 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(notMatchedAtom)); }
#line 49620 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1819:
#line 11134 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(notMatchedOnlyAtom)); }
#line 49626 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1820:
#line 11135 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(tomitaAtom)); }
#line 49632 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1821:
#line 11136 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(groupAtom)); }
#line 49638 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1822:
#line 11137 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom)); }
#line 49644 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1823:
#line 11139 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49653 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1824:
#line 11144 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_numeric, false);
                            (yyval).setExpr(createExprAttribute(maxLengthAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49662 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1826:
#line 11152 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 49668 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1827:
#line 11154 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 49674 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1828:
#line 11158 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(xmlAtom)); }
#line 49680 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1829:
#line 11160 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_string, false);
                            (yyval).setExpr(createExprAttribute(xmlAtom, (yyvsp[-1]).getExpr()));
                        }
#line 49689 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1830:
#line 11167 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).clear();
                        }
#line 49697 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1831:
#line 11173 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->popTopScope(); (yyval).clear(); }
#line 49703 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1832:
#line 11177 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->sortDepth++;
                            (yyval).clear();
                        }
#line 49712 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1833:
#line 11184 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->sortDepth--; (yyval).clear(); }
#line 49718 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1834:
#line 11188 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->pushTopScope((yyvsp[0]).queryExpr()); (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 49724 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1835:
#line 11192 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setRightScope((yyvsp[0]).queryExpr()); (yyval).inherit((yyvsp[0])); }
#line 49730 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1836:
#line 11197 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->setRightScope((yyvsp[0]).queryExpr());  
                            parser->beginRowsScope(no_right);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49740 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1837:
#line 11206 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushLeftRightScope((yyvsp[0]).queryExpr(), NULL); // selector only depends on left
                            parser->setRightScope((yyvsp[0]).queryExpr());
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49750 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1838:
#line 11215 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushTopScope((yyvsp[0]).queryExpr());
                            parser->pushLeftRightScope((yyvsp[0]).queryExpr(), NULL);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49760 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1839:
#line 11224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushTopScope((yyvsp[0]).queryExpr());
                            parser->pushLeftRightScope((yyvsp[0]).queryExpr(), NULL); // selector only depends on left
                            parser->setRightScope((yyvsp[0]).queryExpr());
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49771 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1840:
#line 11234 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushLeftRightScope((yyvsp[0]).queryExpr(), NULL); // selector only depends on left
                            parser->setRightScope((yyvsp[0]).queryExpr());
                            OwnedHqlExpr pseudoTop = parser->getSelector((yyvsp[0]), no_left);
                            parser->pushTopScope(pseudoTop);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49783 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1841:
#line 11245 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                             parser->pushTopScope(queryNullRecord());
                        }
#line 49791 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1842:
#line 11249 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49799 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1843:
#line 11256 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { 
                            parser->popTopScope();
                        }
#line 49807 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1844:
#line 11260 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49815 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1845:
#line 11266 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->pushTopScope((yyvsp[0]).queryExpr()); (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 49821 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1846:
#line 11271 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushLeftRightScope((yyvsp[0]).queryExpr(), NULL);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49830 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1847:
#line 11278 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->setRightScope((yyvsp[0]).queryExpr());
                            (yyval).setExpr((yyvsp[0]).getExpr());
                        }
#line 49839 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1848:
#line 11286 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushLeftRightScope((yyvsp[0]).queryExpr(), NULL);
                            parser->beginRowsScope(no_left);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49849 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1849:
#line 11295 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushLeftRightScope((yyvsp[0]).queryExpr(), NULL);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1850:
#line 11303 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Since the SEQUENCE is based on left and right left and right aren't valid until we have seen both datasets
                            parser->pushPendingLeftRightScope((yyvsp[0]).queryExpr(), NULL);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49868 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1851:
#line 11313 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->pushLeftRightScope(parser->queryTopScope(), (yyvsp[0]).queryExpr());
                            (yyval).inherit((yyvsp[0]));
                        }
#line 49877 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1852:
#line 11321 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->popLeftRightScope());
                        }
#line 49885 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1853:
#line 11328 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginRowsScope(no_left);
                            (yyval).clear();
                        }
#line 49894 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1854:
#line 11335 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginRowsScope(no_left);
                            (yyval).clear();
                        }
#line 49903 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1855:
#line 11342 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginRowsScope(no_right);
                            (yyval).clear();
                        }
#line 49912 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1856:
#line 11349 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(parser->endRowsScope()); }
#line 49918 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1857:
#line 11353 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->popTopScope(); (yyval).clear(); }
#line 49924 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1858:
#line 11357 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->popTopScope(); (yyval).clear(); }
#line 49930 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1859:
#line 11361 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->popTopScope(); (yyval).clear(); }
#line 49936 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1860:
#line 11365 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->popTopScope(); (yyval).clear(); }
#line 49942 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1862:
#line 11371 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e1 = (yyvsp[-2]).getExpr();
                            IHqlExpression *e2 = (yyvsp[-1]).getExpr();
                            if (e1 && (e1->getOperator() != no_record) && (e2->getOperator() == no_field))
                                (yyval).setExpr(parser->createSelect(e1, e2, (yyvsp[-1])));
                            else
                            {
                                ::Release(e1);
                                (yyval).setExpr(e2);
                            }
                        }
#line 49958 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1863:
#line 11383 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 49966 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1864:
#line 11387 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()));
                        }
#line 49974 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1866:
#line 11395 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[-2]).getExpr();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 49983 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1868:
#line 11405 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_set, false);
                            ITypeInfo * childType = (yyvsp[-1]).queryExprType()->queryChildType();
                            if (!childType || !isIntegralType(childType))
                                parser->reportError(ERR_TYPEMISMATCH_INTREAL, (yyvsp[-2]), "Type mismatch - expected a list of integral type");
                            OwnedHqlExpr list = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_rowsetrange, list->getType(), LINK(list), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 49997 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1869:
#line 11415 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-2]).unwindCommaList(args);
                            parser->checkRecordsMatch((yyvsp[-4]), args);
                            //check all the datasets have the same record structure at a minimum.
                            ITypeInfo * setType = makeSetType(args.item(0).getType());
                            (yyval).setExpr(createValue(no_datasetlist, setType, args)); // This should probably be a pseudo-dataset
                            (yyval).setPosition((yyvsp[-4]));
                        }
#line 50011 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1870:
#line 11425 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processRowset((yyvsp[-1])), (yyvsp[-3]));
                        }
#line 50019 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1871:
#line 11429 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-6]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(NULL, (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50028 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1873:
#line 11438 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e1 = (yyvsp[-2]).getExpr();
                            IHqlExpression *e2 = (yyvsp[-1]).getExpr();
                            if (e1 && (e1->getOperator() != no_record) && (e2->getOperator() == no_field))
                                (yyval).setExpr(parser->createSelect(e1, e2, (yyvsp[-1])));
                            else
                            {
                                ::Release(e1);
                                (yyval).setExpr(e2);
                            }
                        }
#line 50044 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1874:
#line 11450 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr scope = (yyvsp[-2]).getExpr();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50053 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1875:
#line 11455 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[-1]));
                        }
#line 50061 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1876:
#line 11459 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr()));
                        }
#line 50069 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1877:
#line 11466 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(parser->endFunctionCall(), (yyvsp[0])); }
#line 50075 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1880:
#line 11475 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addActual((yyval), createOmittedValue());
                            (yyval).clear();
                        }
#line 50084 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1881:
#line 11479 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addActual((yyvsp[0]), (yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 50093 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1883:
#line 11488 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addNamedActual((yyvsp[-2]), (yyvsp[-2]).getId(), (yyvsp[0]).getExpr());
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 50103 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1884:
#line 11494 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addNamedActual((yyvsp[-3]), (yyvsp[-2]).getId(), (yyvsp[0]).getExpr());
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[-3]));
                        }
#line 50113 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1885:
#line 11500 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr nameExpr = (yyvsp[-2]).getExpr();
                            IIdAtom * name = nameExpr->queryId();
                            if (!name)
                            {
                                name = unknownId;
                                parser->reportError(ERR_EXPECTED_ID, (yyvsp[-2]), "Expected a parameter name");
                            }
                            parser->addNamedActual((yyvsp[-2]), name, (yyvsp[0]).getExpr());
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[-2]));
                        }
#line 50130 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1886:
#line 11517 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 50139 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1887:
#line 11522 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression* expr = (yyvsp[-1]).getExpr();
                            IHqlExpression* map = (yyvsp[0]).getExpr();
                            (yyval).setExpr(parser->bindFieldMap(expr,map));
                        }
#line 50149 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1890:
#line 11530 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 50155 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1891:
#line 11531 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 50161 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1892:
#line 11532 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 50167 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1899:
#line 11543 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50176 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1901:
#line 11549 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50185 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1904:
#line 11556 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50194 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1906:
#line 11562 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50203 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1908:
#line 11568 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50212 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1910:
#line 11574 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50221 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1913:
#line 11581 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50230 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1915:
#line 11590 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50239 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1916:
#line 11595 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50248 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1918:
#line 11604 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50257 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1919:
#line 11609 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50266 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1921:
#line 11618 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50275 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1922:
#line 11623 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50284 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1924:
#line 11632 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50293 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1925:
#line 11637 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50302 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1927:
#line 11646 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50311 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1928:
#line 11651 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50320 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1930:
#line 11660 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-1]));
                        }
#line 50329 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1931:
#line 11665 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50338 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1933:
#line 11675 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-1]));
                        }
#line 50347 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1934:
#line 11680 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50356 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1936:
#line 11690 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr(), (yyvsp[-1]));
                        }
#line 50365 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1937:
#line 11695 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50374 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1939:
#line 11704 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50383 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1940:
#line 11709 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50392 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1942:
#line 11719 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 50401 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1943:
#line 11724 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            Owned<ITypeInfo> retType = (yyvsp[-7]).getType();
                            (yyval).setExpr(parser->leaveLamdaExpression(&(yyvsp[-6]), (yyvsp[-2])), (yyvsp[0]));
                        }
#line 50410 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1944:
#line 11734 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            parser->endList(args);
                            (yyval).setExpr(createSortList(args), (yyvsp[-3]));
                        }
#line 50420 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1945:
#line 11739 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setNullExpr(); }
#line 50426 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1946:
#line 11741 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            parser->endList(args);
                            (yyval).setNullExpr();
                        }
#line 50436 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1950:
#line 11759 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression* attr1 = createId((yyvsp[-2]).getId());
                            IHqlExpression* attr2 = createId((yyvsp[0]).getId());
                            parser->addListElement(createComma(attr1, attr2));
                            (yyval).clear();
                        }
#line 50447 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1954:
#line 11775 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 50456 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1955:
#line 11780 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 50465 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1956:
#line 11785 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 50474 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1957:
#line 11793 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 50483 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1958:
#line 11798 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 50492 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1959:
#line 11803 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 50501 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1960:
#line 11811 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            node_operator op = (yyvsp[0]).getOperator();
                            if (op == no_sortlist) //|| (op == no_list))
                            {
                                OwnedHqlExpr list = (yyvsp[0]).getExpr();
                                HqlExprArray args;
                                unwindChildren(args, list);
                                ForEachItemIn(i, args)
                                    parser->addListElement(&OLINK(args.item(i)));
                                (yyval).setExpr(NULL);
                            }
                            else
                            {
                                parser->normalizeExpression((yyvsp[0]));
                                //ALL in a sort list is treated as an attribute.
                                parser->convertAllToAttribute((yyvsp[0]));
                                (yyval).inherit((yyvsp[0]));
                            }
                        }
#line 50525 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1962:
#line 11831 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //This is an example of a semantic check that should really take place one everything is
                            //parsed.  The beginSortOrder productions are a pain, and not strictly correct.
                            if (parser->sortDepth == 0)
                                parser->normalizeExpression((yyvsp[0]), type_numeric, false);

                            IHqlExpression * e = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_negate, makeVoidType(), e));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 50540 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1968:
#line 11852 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(fewAtom));   }
#line 50546 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1969:
#line 11853 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom));  }
#line 50552 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1970:
#line 11854 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(mergeAtom)); }
#line 50558 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1971:
#line 11855 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(sortedAtom));    }
#line 50564 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1972:
#line 11856 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(unsortedAtom)); }
#line 50570 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1974:
#line 11858 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(assertAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50579 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1975:
#line 11863 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *dataset = (yyvsp[-1]).getExpr();
                            if ((dataset->getOperator() != no_sort) && (dataset->getOperator() != no_sorted))
                            {
                                parser->reportError(ERR_JOINED_NOSORTED, (yyvsp[-1]), "JOINED must specify a sorted dataset");
                                dataset->Release();
                                (yyval).setNullExpr();
                            }
                            else
                                (yyval).setExpr(createValue(no_joined, (ITypeInfo*)NULL, dataset));
                        }
#line 50595 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1976:
#line 11875 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            (yyval).setExpr(createAttribute(thresholdAtom, (yyvsp[-1]).getExpr()));
                        }
#line 50604 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1977:
#line 11879 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(recordAtom)); }
#line 50610 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1978:
#line 11880 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(recordAtom)); }
#line 50616 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1979:
#line 11881 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).setExpr(createExprAttribute(exceptAtom, (yyvsp[0]).getExpr()));
                        }
#line 50625 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1980:
#line 11885 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(exceptAtom, (yyvsp[0]).getExpr())); }
#line 50631 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1981:
#line 11886 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createExprAttribute(exceptAtom, (yyvsp[0]).getExpr())); }
#line 50637 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1982:
#line 11888 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            (yyvsp[-1]).unwindCommaList(args);
                            (yyval).setExpr(createExprAttribute(bestAtom, args));
                        }
#line 50647 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1984:
#line 11895 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(keyedAtom));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50656 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1985:
#line 11900 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createAttribute(groupedAtom), (yyvsp[0]));
                        }
#line 50664 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1987:
#line 11908 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->expandedSortListByReference(NULL, (yyvsp[-1])), (yyvsp[-2]));
                        }
#line 50672 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1988:
#line 11912 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->expandedSortListByReference(&(yyvsp[-4]), (yyvsp[-1])), (yyvsp[-4]));
                        }
#line 50680 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1990:
#line 11919 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 50686 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1991:
#line 11923 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 50692 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1992:
#line 11925 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 50698 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1993:
#line 11929 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_int, false);
                            (yyval).setExpr(createExprAttribute(keepAtom, (yyvsp[0]).getExpr()));
                        }
#line 50707 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1995:
#line 11935 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE:SORTLIST  Allow a sortlist to be expanded!
                            parser->normalizeExpression((yyvsp[0]));
                            parser->convertAllToAttribute((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 50718 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1996:
#line 11941 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(recordAtom)); }
#line 50724 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1997:
#line 11942 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(recordAtom)); }
#line 50730 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1998:
#line 11943 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            //MORE:SORTLIST  Allow sort list as an exception
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).setExpr(createExprAttribute(exceptAtom, (yyvsp[0]).getExpr()));
                        }
#line 50740 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 1999:
#line 11948 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(manyAtom)); }
#line 50746 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2000:
#line 11949 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(hashAtom)); }
#line 50752 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2001:
#line 11951 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Backward compatibility... special case use of LEFT and RIGHT as modifiers.
                            OwnedHqlExpr row = (yyvsp[0]).getExpr();
                            if (row->getOperator() == no_left)
                                row.setown(createAttribute(leftAtom));
                            else if (row->getOperator() == no_right)
                                row.setown(createAttribute(rightAtom));
                            (yyval).setExpr(row.getClear(), (yyvsp[0]));
                        }
#line 50766 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2003:
#line 11962 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray sortItems;
                            parser->endList(sortItems);

                            (yyval).setExpr(createExprAttribute(bestAtom, createSortList(sortItems)));
                        }
#line 50777 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2005:
#line 11975 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).inherit((yyvsp[0])); }
#line 50783 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2006:
#line 11977 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr())); }
#line 50789 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2008:
#line 11983 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //MORE:SORTLIST  Allow a sortlist to be expanded!
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 50799 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2009:
#line 11988 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(recordAtom)); }
#line 50805 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2010:
#line 11989 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(recordAtom)); }
#line 50811 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2011:
#line 11990 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            //MORE:SORTLIST  Allow sort list as an exception
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).setExpr(createExprAttribute(exceptAtom, (yyvsp[0]).getExpr()));
                        }
#line 50821 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2014:
#line 12001 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 50829 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2015:
#line 12004 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setNullExpr();
                        }
#line 50837 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2017:
#line 12012 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = parser->checkType((yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createValue(no_comma, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 50846 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2018:
#line 12020 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            parser->applyDefaultPromotions((yyvsp[0]), true);
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_mapto, e3->getType(), (yyvsp[-2]).getExpr(), e3));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50858 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2019:
#line 12031 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginList();
                            (yyval).clear();
                        }
#line 50867 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2020:
#line 12039 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray elements;
                            parser->endList(elements);
                            (yyval).setExpr(createSortList(elements));
                        }
#line 50877 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2021:
#line 12048 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            parser->endList(args);
                            assertex(args.ordinality() == 0);
                            (yyval).clear();
                        }
#line 50888 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2024:
#line 12063 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->normalizeExpression((yyvsp[0]));
                            //MORE: Should call checkType?
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            parser->applyDefaultPromotions((yyvsp[0]), true);
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            parser->addListElement(createValue(no_mapto, e3->getType(), (yyvsp[-2]).getExpr(), e3));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50904 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2026:
#line 12079 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = parser->checkType((yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createValue(no_comma, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 50913 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2027:
#line 12087 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createDataset(no_mapto, (yyvsp[-2]).getExpr(), e3));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50923 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2029:
#line 12097 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = parser->checkType((yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createValue(no_comma, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 50932 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2030:
#line 12105 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createDictionary(no_mapto, (yyvsp[-2]).getExpr(), e3));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50942 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2033:
#line 12119 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            parser->addListElement(createDataset(no_mapto, (yyvsp[-2]).getExpr(), e3));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50955 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2036:
#line 12136 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            parser->addListElement(createDictionary(no_mapto, (yyvsp[-2]).getExpr(), e3));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50968 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2038:
#line 12149 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = parser->checkType((yyvsp[-2]), (yyvsp[0]));
                            (yyval).setExpr(createValue(no_comma, type, (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 50977 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2039:
#line 12157 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createRow(no_mapto, (yyvsp[-2]).getExpr(), e3));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 50987 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2042:
#line 12171 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            parser->addListElement(createRow(no_mapto, (yyvsp[-2]).getExpr(), e3));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 51000 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2044:
#line 12184 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 51008 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2045:
#line 12191 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_mapto, makeVoidType(), (yyvsp[-2]).getExpr(), e3));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 51018 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2048:
#line 12205 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-2]));
                            parser->applyDefaultPromotions((yyvsp[-2]), true);
                            IHqlExpression *e3 = (yyvsp[0]).getExpr();
                            parser->addListElement(createValue(no_mapto, makeVoidType(), (yyvsp[-2]).getExpr(), e3));
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 51031 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2054:
#line 12221 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createConstant(true), (yyvsp[0]));
                        }
#line 51039 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2055:
#line 12224 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createConstant(false), (yyvsp[0]));
                        }
#line 51047 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2060:
#line 12241 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 51053 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2061:
#line 12243 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 51059 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2062:
#line 12248 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            parser->endList(args);
                            (yyval).setExpr(parser->createPatternOr(args, (yyvsp[0])));
                        }
#line 51069 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2064:
#line 12257 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement(parser->createNullPattern());
                            (yyval).clear();
                        }
#line 51078 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2069:
#line 12272 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement(parser->createNullPattern());
                            (yyval).clear();
                        }
#line 51087 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2070:
#line 12280 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->leavePatternScope((yyvsp[0]));
                            HqlExprArray args;
                            parser->endList(args);
                            OwnedHqlExpr production = (yyvsp[0]).getExpr();
                            if (production->getOperator() != no_pat_production)
                                parser->checkProduction(args, (yyvsp[0]));
                            parser->addListElement(production.getClear());
                            (yyval).clear();
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 51103 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2071:
#line 12294 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginList();        // this list is only maintained for scope checking - value is accumulated separately
                            parser->enterPatternScope(parser->curList);
                            (yyval).clear();
                        }
#line 51113 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2072:
#line 12304 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginList();
                            parser->enterPatternScope(parser->curList);
                            parser->addListElement(LINK((yyvsp[0]).queryExpr()));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 51124 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2073:
#line 12313 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->leavePatternScope((yyval));
                            HqlExprArray args;
                            parser->endList(args);
                            (yyval).clear();
                        }
#line 51135 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2074:
#line 12323 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[0]), false);
                            (yyval).inherit((yyvsp[0]));
                        }
#line 51144 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2075:
#line 12328 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-1]), false);
                            IHqlExpression * transform = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_pat_production, makeRuleType(LINK(transform->queryRecordType())), (yyvsp[-1]).getExpr(), transform));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 51155 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2076:
#line 12338 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-1]), true);
                            parser->checkPattern((yyvsp[0]), true);
                            IHqlExpression * left = (yyvsp[-1]).getExpr();
                            IHqlExpression * right = (yyvsp[0]).getExpr();
                            parser->addListElement(LINK(right));
                            ITypeInfo * type = parser->getCompoundRuleType(left->queryType(), right->queryType());
                            (yyval).setExpr(createValue(no_pat_follow, type, left, right));
                        }
#line 51169 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2077:
#line 12348 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement(LINK((yyvsp[0]).queryExpr()));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 51178 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2078:
#line 12355 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 51184 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2079:
#line 12356 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(notAtom)); }
#line 51190 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2081:
#line 12363 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-3]), true);
                            parser->checkSubPattern((yyvsp[0]));
                            IHqlExpression * pattern = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_x_before_y, pattern->getType(), pattern, (yyvsp[0]).getExpr(), (yyvsp[-2]).getExpr()));
                        }
#line 51201 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2082:
#line 12370 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-3]), true);
                            parser->checkSubPattern((yyvsp[0]));
                            IHqlExpression * pattern = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_x_after_y, pattern->getType(), pattern, (yyvsp[0]).getExpr(), (yyvsp[-2]).getExpr()));
                        }
#line 51212 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2083:
#line 12377 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkSubPattern((yyvsp[0]));
                            (yyval).setExpr(createValue(no_pat_before_y, makePatternType(), (yyvsp[0]).getExpr(), (yyvsp[-2]).getExpr()));
                        }
#line 51221 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2084:
#line 12382 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkSubPattern((yyvsp[0]));
                            (yyval).setExpr(createValue(no_pat_after_y, makePatternType(), (yyvsp[0]).getExpr(), (yyvsp[-2]).getExpr()));
                        }
#line 51230 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2085:
#line 12387 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-3]), false);
                            parser->checkSubPattern((yyvsp[0]));
                            IHqlExpression * pattern = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_checkin, pattern->getType(), pattern, (yyvsp[0]).getExpr(), (yyvsp[-2]).getExpr()));
                        }
#line 51241 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2086:
#line 12394 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-3]), false);
                            parser->checkSubPattern((yyvsp[0]));
                            IHqlExpression * pattern = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_checkin, pattern->getType(), pattern, (yyvsp[0]).getExpr(), (yyvsp[-2]).getExpr()));
                        }
#line 51252 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2087:
#line 12401 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-2]), false);
                            parser->checkSubPattern((yyvsp[0]));
                            IHqlExpression * pattern = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createValue(no_pat_checkin, pattern->getType(), pattern, (yyvsp[0]).getExpr(), createAttribute(notAtom)));
                        }
#line 51263 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2088:
#line 12408 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-4]), false);
                            parser->normalizeExpression((yyvsp[-1]), type_any, true);
                            IHqlExpression * pattern = (yyvsp[-4]).getExpr();
                            (yyval).setExpr(createValue(no_pat_checklength, pattern->getType(), pattern, (yyvsp[-1]).getExpr()));
                        }
#line 51274 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2089:
#line 12415 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-3]), false);
                            IHqlExpression * pattern = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_validate, pattern->getType(), pattern, (yyvsp[-1]).getExpr()));
                        }
#line 51284 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2090:
#line 12421 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-5]), false);
                            IHqlExpression * pattern = (yyvsp[-5]).getExpr();
                            (yyval).setExpr(createValue(no_pat_validate, pattern->getType(), pattern, (yyvsp[-3]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 51294 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2091:
#line 12431 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createValue(no_pat_first, makePatternType())); }
#line 51300 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2092:
#line 12432 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { (yyval).setExpr(createValue(no_pat_last, makePatternType())); }
#line 51306 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2093:
#line 12434 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-2]), true);
                            if ((yyvsp[-2]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-4]), "Cannot use REPEAT on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-2]).getExpr();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, (yyvsp[-1]).getExpr()));
                        }
#line 51319 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2094:
#line 12443 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-4]), true);
                            parser->normalizeExpression((yyvsp[-2]), type_int, true);
                            if ((yyvsp[-4]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-6]), "Cannot use REPEAT on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-4]).getExpr();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 51333 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2095:
#line 12453 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-6]), true);
                            parser->normalizeExpression((yyvsp[-4]), type_int, true);
                            if ((yyvsp[-6]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-8]), "Cannot use REPEAT on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-6]).getExpr();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, (yyvsp[-4]).getExpr(), createValue(no_any, makeNullType()), (yyvsp[-1]).getExpr()));
                        }
#line 51347 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2096:
#line 12463 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-6]), true);
                            parser->normalizeExpression((yyvsp[-4]), type_int, true);
                            parser->normalizeExpression((yyvsp[-2]), type_int, true);
                            if ((yyvsp[-6]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-8]), "Cannot use REPEAT on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-6]).getExpr();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, (yyvsp[-4]).getExpr(), (yyvsp[-2]).getExpr(), (yyvsp[-1]).getExpr()));
                        }
#line 51362 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2097:
#line 12474 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-2]), true);
                            if ((yyvsp[-1]).queryExpr() && (yyvsp[-2]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-4]), "Cannot use OPT with count on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-2]).getExpr();
                            IHqlExpression * max = (yyvsp[-1]).getExpr();
                            if (!max) max = createConstantOne();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, createConstant(0), max));
                        }
#line 51377 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2098:
#line 12485 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-1]), true);
                            if ((yyvsp[-1]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-1]), "Cannot use * on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern));
                        }
#line 51390 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2099:
#line 12493 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-1]), true);
                            if ((yyvsp[-1]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-1]), "Cannot use + on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, createConstantOne(), createValue(no_any, makeNullType())));
                        }
#line 51403 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2100:
#line 12501 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkPattern((yyvsp[-1]), true);
                            IHqlExpression * pattern = (yyvsp[-1]).getExpr();
                            if ((pattern->getOperator() == no_pat_repeat) && (!pattern->hasAttribute(minimalAtom)))
                            {
                                HqlExprArray args;
                                unwindChildren(args, pattern);
                                args.append(*createAttribute(minimalAtom));
                                (yyval).setExpr(pattern->clone(args));
                                pattern->Release();
                            }
                            else
                                (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, createConstant(0), createConstantOne()));
                        }
#line 51422 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2101:
#line 12516 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]), type_int, true);
                            parser->checkPattern((yyvsp[-2]), true);
                            if ((yyvsp[-2]).queryExpr()->queryRecord())
                                parser->reportError(ERR_AMBIGUOUS_PRODUCTION, (yyvsp[-2]), "Cannot use * on a rule with an associated row");

                            IHqlExpression * pattern = (yyvsp[-2]).getExpr();
                            IHqlExpression * count = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_pat_repeat, parser->getCompoundRuleType(pattern), pattern, count, LINK(count)));
                        }
#line 51437 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2102:
#line 12526 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[-1]).getExpr()); }
#line 51443 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2103:
#line 12528 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_pat_token, makeTokenType(), (yyvsp[-1]).getExpr()));
                            parser->checkPattern((yyval), false);
                        }
#line 51452 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2104:
#line 12532 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_pat_anychar, makePatternType()));
                            parser->checkPattern((yyval), false);
                        }
#line 51461 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2105:
#line 12537 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr pattern = (yyvsp[-1]).getExpr();
                            if (pattern->getOperator() == no_pat_repeat)
                            {
                                HqlExprArray args;
                                unwindChildren(args, pattern);
                                args.append(*createAttribute(minimalAtom));
                                pattern.setown(pattern->clone(args));
                            }
                            else if (pattern->getOperator() == no_pat_instance)
                                parser->reportError(ERR_EXPECTED_REPEAT, (yyvsp[-1]), "Expected a repeat (not an attribute)");
                            else
                                parser->reportError(ERR_EXPECTED_REPEAT, (yyvsp[-1]), "Expected a repeat");
                            (yyval).setExpr(pattern.getClear());
                        }
#line 51481 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2106:
#line 12553 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            HqlExprArray args;
                            parser->endList(args);
                            parser->checkPattern((yyval), args);
                            (yyval).setExpr(parser->createPatternOr(args, (yyvsp[-1])));
                        }
#line 51492 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2107:
#line 12560 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_stringorunicode, true);
                            if (!(yyvsp[-1]).queryExpr()->isConstant())
                                parser->reportError(ERR_EXPECTED_CONST, (yyvsp[-1]), "Pattern requires a constant argument");

                            IHqlExpression * pattern = parser->convertPatternToExpression((yyvsp[-1]));
                            (yyval).setExpr(createValue(no_pat_pattern, makePatternType(), (yyvsp[-1]).getExpr(), pattern));
                            parser->checkPattern((yyval), false);
                        }
#line 51506 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2108:
#line 12570 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //wrap the constant in another item so that the types are correct.
                            (yyval).setExpr(createValue(no_pat_const, makePatternType(), (yyvsp[0]).getExpr()));
                            parser->checkPattern((yyval), false);
                        }
#line 51516 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2109:
#line 12576 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->processExprInPattern((yyvsp[0])));
                            parser->checkPattern((yyval), false);
                        }
#line 51525 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2111:
#line 12581 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo * selfType = LINK(parser->current_type);
                            if (!parser->current_type)
                            {
                                parser->reportError(ERR_SELFOUTSIDERULE, (yyvsp[0]), "SELF used outside of a definition");
                                selfType = makePatternType();
                            }
                            (yyval).setExpr(createValue(no_self, selfType));
                        }
#line 51539 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2112:
#line 12591 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkUseLocation((yyvsp[-3]));
                            (yyval).setExpr(createValue(no_pat_use, makeRuleType(NULL), (yyvsp[-1]).getExpr()));
                        }
#line 51548 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2113:
#line 12596 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkUseLocation((yyvsp[-3]));
                            IAtom * moduleName = parser->globalScope->queryName();
                            IHqlExpression * module = moduleName ? createAttribute(moduleAtom, createAttribute(moduleName)) : NULL;
                            IHqlExpression * id = createAttribute(nameAtom, createId((yyvsp[-1]).getId()));
                            (yyval).setExpr(createValue(no_pat_use, makeRuleType(NULL), id, module));
                        }
#line 51560 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2114:
#line 12604 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkUseLocation((yyvsp[-5]));
                            IHqlExpression * module = createAttribute(moduleAtom, createId((yyvsp[-3]).getId()));
                            IHqlExpression * id = createAttribute(nameAtom, createId((yyvsp[-1]).getId()));
                            (yyval).setExpr(createValue(no_pat_use, makeRuleType(NULL), module, id));
                        }
#line 51571 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2115:
#line 12611 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkUseLocation((yyvsp[-5]));
                            OwnedHqlExpr record = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_use, makeRuleType(record->getType()), (yyvsp[-1]).getExpr()));
                        }
#line 51581 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2116:
#line 12617 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkUseLocation((yyvsp[-5]));
                            IAtom * moduleName = parser->globalScope->queryName();
                            IHqlExpression * module = moduleName ? createAttribute(moduleAtom, createAttribute(moduleName)) : NULL;
                            IHqlExpression * id = createAttribute(nameAtom, createId((yyvsp[-1]).getId()));
                            OwnedHqlExpr record = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_use, makeRuleType(record->getType()), id, module));
                        }
#line 51594 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2117:
#line 12626 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkUseLocation((yyvsp[-7]));
                            IHqlExpression * module = createAttribute(moduleAtom, createId((yyvsp[-3]).getId()));
                            IHqlExpression * id = createAttribute(nameAtom, createId((yyvsp[-1]).getId()));
                            OwnedHqlExpr record = (yyvsp[-5]).getExpr();
                            (yyval).setExpr(createValue(no_pat_use, makeRuleType(record->getType()), module, id));
                        }
#line 51606 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2118:
#line 12634 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr pattern = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_define, pattern->getType(), LINK(pattern), (yyvsp[-1]).getExpr()));
                            (yyval).setPosition((yyvsp[-5]));
                        }
#line 51616 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2119:
#line 12640 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, false);
                            (yyval).setExpr(createValue(no_penalty, makePatternType(), (yyvsp[-1]).getExpr()));
                            parser->checkPattern((yyval), false);
                        }
#line 51626 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2120:
#line 12646 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_pat_guard, makePatternType(), (yyvsp[-1]).getExpr()));
                        }
#line 51634 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2121:
#line 12650 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr pattern = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_pat_case, pattern->getType(), LINK(pattern)));
                        }
#line 51643 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2122:
#line 12655 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            OwnedHqlExpr pattern = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_pat_nocase, pattern->getType(), LINK(pattern)));
                        }
#line 51652 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2124:
#line 12664 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            //Insert a node to represent the actual feature parameters
                            OwnedHqlExpr expr = (yyvsp[-1]).getExpr();
                            IHqlExpression * features = (yyvsp[0]).getExpr();
                            IHqlExpression * cur = createValue(no_pat_featureactual, expr->getType(), LINK(expr->queryChild(0)), features);
                            (yyval).setExpr(cur);
                        }
#line 51664 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2125:
#line 12675 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * pattern = (yyvsp[0]).getExpr();
                            (yyval).setExpr(pattern);
                        }
#line 51673 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2126:
#line 12680 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->beginFunctionCall((yyvsp[0]));
                        }
#line 51681 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2127:
#line 12684 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * pattern = parser->bindParameters((yyvsp[-4]), (yyvsp[-1]).getExpr());
                            (yyval).setExpr(pattern);
                        }
#line 51690 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2128:
#line 12692 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(parser->endFunctionCall(), (yyvsp[-1]));
                        }
#line 51698 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2129:
#line 12698 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->savedType.append(parser->current_type); 
                            parser->current_type = NULL; 
                            (yyval).clear();
                        }
#line 51708 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2130:
#line 12706 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            parser->current_type = (ITypeInfo *)parser->savedType.popGet();
                            (yyval).clear();
                        }
#line 51717 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2133:
#line 12718 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addActual((yyval), createOmittedValue());
                        }
#line 51725 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2134:
#line 12721 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addActual((yyvsp[0]), (yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 51734 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2136:
#line 12730 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addNamedActual((yyvsp[-2]), (yyvsp[-2]).getId(), (yyvsp[0]).getExpr());
                            (yyval).clear((yyvsp[-2]));
                        }
#line 51743 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2137:
#line 12735 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addNamedActual((yyvsp[-3]), (yyvsp[-2]).getId(), (yyvsp[0]).getExpr());
                            (yyval).clear((yyvsp[-3]));
                        }
#line 51752 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2139:
#line 12744 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[0]));
                            (yyval).inherit((yyvsp[0]));
                        }
#line 51761 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2140:
#line 12751 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setNullExpr(); }
#line 51767 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2141:
#line 12752 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr(createAttribute(minimalAtom)); }
#line 51773 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2144:
#line 12761 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 51782 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2145:
#line 12766 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->addListElement((yyvsp[0]).getExpr());
                            (yyval).clear();
                        }
#line 51791 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2147:
#line 12775 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * pattern = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_pat_select, pattern->getType(), (yyvsp[-2]).getExpr(), pattern));
                        }
#line 51800 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2149:
#line 12784 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->normalizeExpression((yyvsp[-1]), type_int, true);
                            IHqlExpression * pattern = (yyvsp[-3]).getExpr();
                            (yyval).setExpr(createValue(no_pat_index, pattern->getType(), pattern, (yyvsp[-1]).getExpr()));
                        }
#line 51810 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2151:
#line 12795 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   
                            (yyvsp[0]).release();
                            parser->reportError(ERR_PATTERNFUNCREF,(yyvsp[0]),"Cannot yet reference pattern functions");
                            (yyval).clear();
                        }
#line 51820 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2153:
#line 12805 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 51829 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2155:
#line 12814 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 51838 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2156:
#line 12825 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setDefineId(parser->createDefineId(0, (yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[0]));
                        }
#line 51847 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2157:
#line 12830 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setDefineId(parser->createDefineId((int)(yyvsp[-1]).getInt(), (yyvsp[0]).getType()));
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 51856 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2158:
#line 12838 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            ITypeInfo *type = makeFeatureType();
                            parser->beginDefineId((yyvsp[0]).getId(), type);
                            (yyval).setType(type);
                            (yyval).setPosition((yyvsp[-1]));
                        }
#line 51867 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2160:
#line 12850 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   parser->setFeatureParamsOwn((yyvsp[-1]).getExpr()); (yyval).clear(); }
#line 51873 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2161:
#line 12854 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {   (yyval).setExpr((yyvsp[0]).getExpr()); }
#line 51879 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2162:
#line 12856 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 51887 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2163:
#line 12862 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_null, makeFeatureType(), createValue(no_featuretype, (yyvsp[0]).getType())));
                        }
#line 51895 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2166:
#line 12871 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createValue(no_pat_or, makeFeatureType(), (yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 51903 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2168:
#line 12879 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 51911 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2170:
#line 12887 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 51919 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2171:
#line 12894 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * feature = (yyvsp[-2]).getExpr();
                            IHqlExpression * value = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_eq, makeBoolType(), feature, value));
                        }
#line 51929 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2172:
#line 12900 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * feature = (yyvsp[-4]).getExpr();
                            IHqlExpression * value = (yyvsp[-1]).getExpr();
                            (yyval).setExpr(createValue(no_eq, makeBoolType(), feature, value));
                        }
#line 51939 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2173:
#line 12906 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * value = (yyvsp[0]).getExpr();
                            IHqlExpression * feature = parser->deduceGuardFeature(value, (yyvsp[0]));
                            (yyval).setExpr(createValue(no_eq, makeBoolType(), feature, value));
                        }
#line 51949 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2174:
#line 12912 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            IHqlExpression * feature = (yyvsp[-2]).getExpr();
                            IHqlExpression * value = (yyvsp[0]).getExpr();
                            (yyval).setExpr(createValue(no_eq, makeBoolType(), feature, value));
                        }
#line 51959 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2175:
#line 12918 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->checkIntegerOrString((yyvsp[0]));
                            IHqlExpression * value = (yyvsp[0]).getExpr();
                            IHqlExpression * feature = parser->deduceGuardFeature(value, (yyvsp[0]));
                            (yyval).setExpr(createValue(no_eq, makeBoolType(), feature, value));
                        }
#line 51970 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2177:
#line 12929 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyvsp[-2]).release();
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 51979 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2181:
#line 12944 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            (yyval).setExpr(createComma((yyvsp[-2]).getExpr(), (yyvsp[0]).getExpr()));
                        }
#line 51987 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2182:
#line 12952 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    {
                            parser->reportWarning(CategorySyntax, SeverityError, WRN_FEATURE_NOT_REPEAT, (yyvsp[-2]).pos, "Curly brackets are not used for repeats - they are reserved for future functionality");
                            (yyval).setExpr((yyvsp[-1]).getExpr());
                        }
#line 51996 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2183:
#line 12960 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { parser->enableAttributes(DISTRIBUTE); (yyval).clear(); }
#line 52002 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2184:
#line 12961 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { parser->enableAttributes(HEADING); (yyval).clear(); }
#line 52008 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;

  case 2185:
#line 12962 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1646  */
    { parser->enableAttributes(STORED); (yyval).clear(); }
#line 52014 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
    break;


#line 52018 "/home/sathvik/hpcc/HPCC-Platform/build/ecl/hql/hqlgram.cpp" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 12968 "/home/sathvik/hpcc/HPCC-Platform/ecl/hql/hqlgram.y" /* yacc.c:1906  */


/*
 * Try and process the next token, and see if it would result in the token being shifted,
 * rather than entering an error state.
 * Derived from the logic of the main parsing loop, but must not modify the state stack
 * - so uses a small temporary state stack to cope with chains of reductions of empty productions
 */
 
bool HqlGram::canFollowCurrentState(int yychar, const short * activeState)
{
  /* The state stack.  */
  const yytype_int16 * yyssp = activeState;
  const yytype_int16 * maxyyssp = yyssp;
  const unsigned MaxTempStates = 4;
  yytype_int16 tempstate[MaxTempStates];

  int yystate = *yyssp;
  int yyn;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  goto yybackup;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

  assertex(yyssp > maxyyssp);
  if (yyssp - maxyyssp > MaxTempStates)
    return false;
  tempstate[yyssp-maxyyssp-1] = yystate;

  if (yystate == YYFINAL)
    return false;           // Accept -> fail since it will accept rather than shift

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

yyprocesschar:
  yytoken = YYTRANSLATE (yychar);

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
        return false;       // Error -> cannot follow
      yyn = -yyn;
      goto yyreduce;
    }
  /* Shift the lookahead token.  */
  return true;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    return false;           // Error -> cannot follow
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  yyssp -= (yylen);
  yylen = 0;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  int prevstate = yyssp <= maxyyssp ? *yyssp : tempstate[yyssp - maxyyssp -1];
  yystate = yypgoto[yyn - YYNTOKENS] + prevstate;
  maxyyssp = yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == prevstate)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;

}

int yyuntranslate(int token)
{
    for (unsigned i=0; i< _elements_in(yytranslate); i++)
    {
        if (yytranslate[i] == token)
            return i;
    }
    return '?';
}

/* Cloned and modified from the verbose yyerror implementation */
static void eclsyntaxerror(HqlGram * parser, const char * s, short yystate, int token)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
  {
    parser->syntaxError(s, token, NULL);
    return;
  }

  /* Start YYX at -YYN if negative to avoid negative indexes in YYCHECK.  */
  int yyxbegin = yyn < 0 ? -yyn : 0;

  /* Stay within bounds of both yycheck and yytname.  */
  int yychecklim = YYLAST - yyn + 1;
  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
  int expected[YYNTOKENS];
  int curExpected = 0;
  for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
  {
    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
        expected[curExpected++] = yyuntranslate(yyx);
  }
  expected[curExpected++] = 0;
  parser->syntaxError(s, token, expected);
}
