// *** Include file generated by HIDL Version 1.3 from ws_fs.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_fs_SCM_INCL
#define ws_fs_SCM_INCL

#include "esp.hpp"



enum CDFUWUActions { DFUWUActions_Undefined=-1,CDFUWUActions_Delete, CDFUWUActions_Protect, CDFUWUActions_Unprotect, CDFUWUActions_Restore, CDFUWUActions_SetToFailed, };
typedef ArrayOf<CDFUWUActions> DFUWUActionsArray;


interface IConstDFUWorkunit : extends IEspStruct
{
	virtual const char * getID()=0;
	virtual const char * getDFUServerName()=0;
	virtual const char * getClusterName()=0;
	virtual const char * getJobName()=0;
	virtual const char * getQueue()=0;
	virtual const char * getUser()=0;
	virtual bool getIsProtected_isNull()=0;
	virtual bool getIsProtected()=0;
	virtual bool getCommand_isNull()=0;
	virtual int getCommand()=0;
	virtual const char * getCommandMessage()=0;
	virtual bool getPercentDone_isNull()=0;
	virtual int getPercentDone()=0;
	virtual bool getSecsLeft_isNull()=0;
	virtual int getSecsLeft()=0;
	virtual const char * getProgressMessage()=0;
	virtual const char * getSummaryMessage()=0;
	virtual bool getState_isNull()=0;
	virtual int getState()=0;
	virtual const char * getSourceLogicalName()=0;
	virtual const char * getSourceIP()=0;
	virtual const char * getSourceFilePath()=0;
	virtual const char * getSourceDali()=0;
	virtual bool getSourceRecordSize_isNull()=0;
	virtual int getSourceRecordSize()=0;
	virtual bool getSourceFormat_isNull()=0;
	virtual int getSourceFormat()=0;
	virtual const char * getRowTag()=0;
	virtual bool getSourceNumParts_isNull()=0;
	virtual int getSourceNumParts()=0;
	virtual const char * getSourceDirectory()=0;
	virtual const char * getDestLogicalName()=0;
	virtual const char * getDestGroupName()=0;
	virtual const char * getDestDirectory()=0;
	virtual const char * getDestIP()=0;
	virtual const char * getDestFilePath()=0;
	virtual bool getDestFormat_isNull()=0;
	virtual int getDestFormat()=0;
	virtual bool getDestNumParts_isNull()=0;
	virtual int getDestNumParts()=0;
	virtual bool getDestRecordSize_isNull()=0;
	virtual int getDestRecordSize()=0;
	virtual bool getReplicate_isNull()=0;
	virtual bool getReplicate()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual bool getCompress_isNull()=0;
	virtual bool getCompress()=0;
	virtual const char * getSourceCsvSeparate()=0;
	virtual const char * getSourceCsvQuote()=0;
	virtual const char * getSourceCsvTerminate()=0;
	virtual const char * getSourceCsvEscape()=0;
	virtual const char * getTimeStarted()=0;
	virtual const char * getTimeStopped()=0;
	virtual const char * getStateMessage()=0;
	virtual const char * getMonitorEventName()=0;
	virtual bool getMonitorSub_isNull()=0;
	virtual bool getMonitorSub()=0;
	virtual bool getMonitorShotLimit_isNull()=0;
	virtual int getMonitorShotLimit()=0;
	virtual const char * getSourceDiffKeyName()=0;
	virtual const char * getDestDiffKeyName()=0;
	virtual bool getArchived_isNull()=0;
	virtual bool getArchived()=0;
	virtual const char * getEncrypt()=0;
	virtual const char * getDecrypt()=0;
	virtual bool getFailIfNoSourceFile_isNull()=0;
	virtual bool getFailIfNoSourceFile()=0;
	virtual bool getRecordStructurePresent_isNull()=0;
	virtual bool getRecordStructurePresent()=0;
	virtual bool getQuotedTerminator_isNull()=0;
	virtual bool getQuotedTerminator()=0;
	virtual bool getPreserveCompression_isNull()=0;
	virtual bool getPreserveCompression()=0;
	virtual bool getExpireDays_isNull()=0;
	virtual int getExpireDays()=0;
};

interface IEspDFUWorkunit : extends IConstDFUWorkunit
{
	virtual void setID(const char * val)=0;
	virtual void setDFUServerName(const char * val)=0;
	virtual void setClusterName(const char * val)=0;
	virtual void setJobName(const char * val)=0;
	virtual void setQueue(const char * val)=0;
	virtual void setUser(const char * val)=0;
	virtual void setIsProtected_null()=0;
	virtual void setIsProtected(bool val)=0;
	virtual void setCommand_null()=0;
	virtual void setCommand(int val)=0;
	virtual void setCommandMessage(const char * val)=0;
	virtual void setPercentDone_null()=0;
	virtual void setPercentDone(int val)=0;
	virtual void setSecsLeft_null()=0;
	virtual void setSecsLeft(int val)=0;
	virtual void setProgressMessage(const char * val)=0;
	virtual void setSummaryMessage(const char * val)=0;
	virtual void setState_null()=0;
	virtual void setState(int val)=0;
	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setSourceIP(const char * val)=0;
	virtual void setSourceFilePath(const char * val)=0;
	virtual void setSourceDali(const char * val)=0;
	virtual void setSourceRecordSize_null()=0;
	virtual void setSourceRecordSize(int val)=0;
	virtual void setSourceFormat_null()=0;
	virtual void setSourceFormat(int val)=0;
	virtual void setRowTag(const char * val)=0;
	virtual void setSourceNumParts_null()=0;
	virtual void setSourceNumParts(int val)=0;
	virtual void setSourceDirectory(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setDestGroupName(const char * val)=0;
	virtual void setDestDirectory(const char * val)=0;
	virtual void setDestIP(const char * val)=0;
	virtual void setDestFilePath(const char * val)=0;
	virtual void setDestFormat_null()=0;
	virtual void setDestFormat(int val)=0;
	virtual void setDestNumParts_null()=0;
	virtual void setDestNumParts(int val)=0;
	virtual void setDestRecordSize_null()=0;
	virtual void setDestRecordSize(int val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setSourceCsvSeparate(const char * val)=0;
	virtual void setSourceCsvQuote(const char * val)=0;
	virtual void setSourceCsvTerminate(const char * val)=0;
	virtual void setSourceCsvEscape(const char * val)=0;
	virtual void setTimeStarted(const char * val)=0;
	virtual void setTimeStopped(const char * val)=0;
	virtual void setStateMessage(const char * val)=0;
	virtual void setMonitorEventName(const char * val)=0;
	virtual void setMonitorSub_null()=0;
	virtual void setMonitorSub(bool val)=0;
	virtual void setMonitorShotLimit_null()=0;
	virtual void setMonitorShotLimit(int val)=0;
	virtual void setSourceDiffKeyName(const char * val)=0;
	virtual void setDestDiffKeyName(const char * val)=0;
	virtual void setArchived_null()=0;
	virtual void setArchived(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setFailIfNoSourceFile_null()=0;
	virtual void setFailIfNoSourceFile(bool val)=0;
	virtual void setRecordStructurePresent_null()=0;
	virtual void setRecordStructurePresent(bool val)=0;
	virtual void setQuotedTerminator_null()=0;
	virtual void setQuotedTerminator(bool val)=0;
	virtual void setPreserveCompression_null()=0;
	virtual void setPreserveCompression(bool val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
	virtual void copy(IConstDFUWorkunit &from)=0;
};

interface IClientDFUWorkunit : extends IInterface
{
	virtual void setID(const char * val)=0;
	virtual void setDFUServerName(const char * val)=0;
	virtual void setClusterName(const char * val)=0;
	virtual void setJobName(const char * val)=0;
	virtual void setQueue(const char * val)=0;
	virtual void setUser(const char * val)=0;
	virtual void setIsProtected_null()=0;
	virtual void setIsProtected(bool val)=0;
	virtual void setCommand_null()=0;
	virtual void setCommand(int val)=0;
	virtual void setCommandMessage(const char * val)=0;
	virtual void setPercentDone_null()=0;
	virtual void setPercentDone(int val)=0;
	virtual void setSecsLeft_null()=0;
	virtual void setSecsLeft(int val)=0;
	virtual void setProgressMessage(const char * val)=0;
	virtual void setSummaryMessage(const char * val)=0;
	virtual void setState_null()=0;
	virtual void setState(int val)=0;
	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setSourceIP(const char * val)=0;
	virtual void setSourceFilePath(const char * val)=0;
	virtual void setSourceDali(const char * val)=0;
	virtual void setSourceRecordSize_null()=0;
	virtual void setSourceRecordSize(int val)=0;
	virtual void setSourceFormat_null()=0;
	virtual void setSourceFormat(int val)=0;
	virtual void setRowTag(const char * val)=0;
	virtual void setSourceNumParts_null()=0;
	virtual void setSourceNumParts(int val)=0;
	virtual void setSourceDirectory(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setDestGroupName(const char * val)=0;
	virtual void setDestDirectory(const char * val)=0;
	virtual void setDestIP(const char * val)=0;
	virtual void setDestFilePath(const char * val)=0;
	virtual void setDestFormat_null()=0;
	virtual void setDestFormat(int val)=0;
	virtual void setDestNumParts_null()=0;
	virtual void setDestNumParts(int val)=0;
	virtual void setDestRecordSize_null()=0;
	virtual void setDestRecordSize(int val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setSourceCsvSeparate(const char * val)=0;
	virtual void setSourceCsvQuote(const char * val)=0;
	virtual void setSourceCsvTerminate(const char * val)=0;
	virtual void setSourceCsvEscape(const char * val)=0;
	virtual void setTimeStarted(const char * val)=0;
	virtual void setTimeStopped(const char * val)=0;
	virtual void setStateMessage(const char * val)=0;
	virtual void setMonitorEventName(const char * val)=0;
	virtual void setMonitorSub_null()=0;
	virtual void setMonitorSub(bool val)=0;
	virtual void setMonitorShotLimit_null()=0;
	virtual void setMonitorShotLimit(int val)=0;
	virtual void setSourceDiffKeyName(const char * val)=0;
	virtual void setDestDiffKeyName(const char * val)=0;
	virtual void setArchived_null()=0;
	virtual void setArchived(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setFailIfNoSourceFile_null()=0;
	virtual void setFailIfNoSourceFile(bool val)=0;
	virtual void setRecordStructurePresent_null()=0;
	virtual void setRecordStructurePresent(bool val)=0;
	virtual void setQuotedTerminator_null()=0;
	virtual void setQuotedTerminator(bool val)=0;
	virtual void setPreserveCompression_null()=0;
	virtual void setPreserveCompression(bool val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
	virtual const char * getID()=0;
	virtual const char * getDFUServerName()=0;
	virtual const char * getClusterName()=0;
	virtual const char * getJobName()=0;
	virtual const char * getQueue()=0;
	virtual const char * getUser()=0;
	virtual bool getIsProtected_isNull()=0;
	virtual bool getIsProtected()=0;
	virtual bool getCommand_isNull()=0;
	virtual int getCommand()=0;
	virtual const char * getCommandMessage()=0;
	virtual bool getPercentDone_isNull()=0;
	virtual int getPercentDone()=0;
	virtual bool getSecsLeft_isNull()=0;
	virtual int getSecsLeft()=0;
	virtual const char * getProgressMessage()=0;
	virtual const char * getSummaryMessage()=0;
	virtual bool getState_isNull()=0;
	virtual int getState()=0;
	virtual const char * getSourceLogicalName()=0;
	virtual const char * getSourceIP()=0;
	virtual const char * getSourceFilePath()=0;
	virtual const char * getSourceDali()=0;
	virtual bool getSourceRecordSize_isNull()=0;
	virtual int getSourceRecordSize()=0;
	virtual bool getSourceFormat_isNull()=0;
	virtual int getSourceFormat()=0;
	virtual const char * getRowTag()=0;
	virtual bool getSourceNumParts_isNull()=0;
	virtual int getSourceNumParts()=0;
	virtual const char * getSourceDirectory()=0;
	virtual const char * getDestLogicalName()=0;
	virtual const char * getDestGroupName()=0;
	virtual const char * getDestDirectory()=0;
	virtual const char * getDestIP()=0;
	virtual const char * getDestFilePath()=0;
	virtual bool getDestFormat_isNull()=0;
	virtual int getDestFormat()=0;
	virtual bool getDestNumParts_isNull()=0;
	virtual int getDestNumParts()=0;
	virtual bool getDestRecordSize_isNull()=0;
	virtual int getDestRecordSize()=0;
	virtual bool getReplicate_isNull()=0;
	virtual bool getReplicate()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual bool getCompress_isNull()=0;
	virtual bool getCompress()=0;
	virtual const char * getSourceCsvSeparate()=0;
	virtual const char * getSourceCsvQuote()=0;
	virtual const char * getSourceCsvTerminate()=0;
	virtual const char * getSourceCsvEscape()=0;
	virtual const char * getTimeStarted()=0;
	virtual const char * getTimeStopped()=0;
	virtual const char * getStateMessage()=0;
	virtual const char * getMonitorEventName()=0;
	virtual bool getMonitorSub_isNull()=0;
	virtual bool getMonitorSub()=0;
	virtual bool getMonitorShotLimit_isNull()=0;
	virtual int getMonitorShotLimit()=0;
	virtual const char * getSourceDiffKeyName()=0;
	virtual const char * getDestDiffKeyName()=0;
	virtual bool getArchived_isNull()=0;
	virtual bool getArchived()=0;
	virtual const char * getEncrypt()=0;
	virtual const char * getDecrypt()=0;
	virtual bool getFailIfNoSourceFile_isNull()=0;
	virtual bool getFailIfNoSourceFile()=0;
	virtual bool getRecordStructurePresent_isNull()=0;
	virtual bool getRecordStructurePresent()=0;
	virtual bool getQuotedTerminator_isNull()=0;
	virtual bool getQuotedTerminator()=0;
	virtual bool getPreserveCompression_isNull()=0;
	virtual bool getPreserveCompression()=0;
	virtual bool getExpireDays_isNull()=0;
	virtual int getExpireDays()=0;
};



interface IConstGroupNode : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getClusterType()=0;
	virtual bool getReplicateOutputs_isNull()=0;
	virtual bool getReplicateOutputs()=0;
};

interface IEspGroupNode : extends IConstGroupNode
{
	virtual void setName(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setReplicateOutputs_null()=0;
	virtual void setReplicateOutputs(bool val)=0;
	virtual void copy(IConstGroupNode &from)=0;
};

interface IClientGroupNode : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setReplicateOutputs_null()=0;
	virtual void setReplicateOutputs(bool val)=0;
	virtual const char * getName()=0;
	virtual const char * getClusterType()=0;
	virtual bool getReplicateOutputs_isNull()=0;
	virtual bool getReplicateOutputs()=0;
};



interface IConstDFUException : extends IEspStruct
{
	virtual int getCode()=0;
	virtual const char * getMessage()=0;
};

interface IEspDFUException : extends IConstDFUException
{
	virtual void setCode(int val)=0;
	virtual void setMessage(const char * val)=0;
	virtual void copy(IConstDFUException &from)=0;
};

interface IClientDFUException : extends IInterface
{
	virtual void setCode(int val)=0;
	virtual void setMessage(const char * val)=0;
	virtual int getCode()=0;
	virtual const char * getMessage()=0;
};



interface IConstDFUActionResult : extends IEspStruct
{
	virtual const char * getID()=0;
	virtual const char * getAction()=0;
	virtual const char * getResult()=0;
};

interface IEspDFUActionResult : extends IConstDFUActionResult
{
	virtual void setID(const char * val)=0;
	virtual void setAction(const char * val)=0;
	virtual void setResult(const char * val)=0;
	virtual void copy(IConstDFUActionResult &from)=0;
};

interface IClientDFUActionResult : extends IInterface
{
	virtual void setID(const char * val)=0;
	virtual void setAction(const char * val)=0;
	virtual void setResult(const char * val)=0;
	virtual const char * getID()=0;
	virtual const char * getAction()=0;
	virtual const char * getResult()=0;
};



interface IConstDFUWUSearchRequest : extends IEspRequest
{
};

interface IEspDFUWUSearchRequest : extends IConstDFUWUSearchRequest
{
	virtual void copy(IConstDFUWUSearchRequest &from)=0;
};

interface IClientDFUWUSearchRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstDFUWUSearchResponse : extends IEspResponse
{
	virtual StringArray & getClusterNames()=0;
};

interface IEspDFUWUSearchResponse : extends IConstDFUWUSearchResponse
{
	virtual void setClusterNames(StringArray &val)=0;
	virtual void copy(IConstDFUWUSearchResponse &from)=0;
};

interface IClientDFUWUSearchResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual StringArray & getClusterNames()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstGetDFUWorkunits : extends IEspRequest
{
	virtual const char * getWuid()=0;
	virtual const char * getOwner()=0;
	virtual const char * getCluster()=0;
	virtual const char * getStateReq()=0;
	virtual const char * getType()=0;
	virtual const char * getJobname()=0;
	virtual __int64 getPageSize()=0;
	virtual int getCurrentPage()=0;
	virtual __int64 getPageStartFrom()=0;
	virtual const char * getSortby()=0;
	virtual bool getDescending()=0;
	virtual __int64 getCacheHint()=0;
};

interface IEspGetDFUWorkunits : extends IConstGetDFUWorkunits
{
	virtual void setWuid(const char * val)=0;
	virtual void setOwner(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setStateReq(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setJobname(const char * val)=0;
	virtual void setPageSize(__int64 val)=0;
	virtual void setCurrentPage(int val)=0;
	virtual void setPageStartFrom(__int64 val)=0;
	virtual void setSortby(const char * val)=0;
	virtual void setDescending(bool val)=0;
	virtual void setCacheHint(__int64 val)=0;
	virtual void copy(IConstGetDFUWorkunits &from)=0;
};

interface IClientGetDFUWorkunits : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
	virtual void setOwner(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setStateReq(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setJobname(const char * val)=0;
	virtual void setPageSize(__int64 val)=0;
	virtual void setCurrentPage(int val)=0;
	virtual void setPageStartFrom(__int64 val)=0;
	virtual void setSortby(const char * val)=0;
	virtual void setDescending(bool val)=0;
	virtual void setCacheHint(__int64 val)=0;
};



interface IConstGetDFUWorkunitsResponse : extends IEspResponse
{
	virtual IArrayOf<IConstDFUWorkunit> & getResults()=0;
	virtual const char * getType()=0;
	virtual const char * getOwner()=0;
	virtual const char * getCluster()=0;
	virtual const char * getStateReq()=0;
	virtual __int64 getPageSize()=0;
	virtual __int64 getPrevPage()=0;
	virtual __int64 getNextPage()=0;
	virtual __int64 getLastPage()=0;
	virtual __int64 getNumWUs()=0;
	virtual __int64 getPageStartFrom()=0;
	virtual __int64 getPageEndAt()=0;
	virtual bool getFirst()=0;
	virtual const char * getSortby()=0;
	virtual bool getDescending()=0;
	virtual const char * getBasicQuery()=0;
	virtual const char * getFilters()=0;
	virtual __int64 getCacheHint()=0;
};

interface IEspGetDFUWorkunitsResponse : extends IConstGetDFUWorkunitsResponse
{
	virtual void setResults(IArrayOf<IEspDFUWorkunit> &val)=0;
	virtual void setResults(IArrayOf<IConstDFUWorkunit> &val)=0;
	virtual void setType(const char * val)=0;
	virtual void setOwner(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setStateReq(const char * val)=0;
	virtual void setPageSize(__int64 val)=0;
	virtual void setPrevPage(__int64 val)=0;
	virtual void setNextPage(__int64 val)=0;
	virtual void setLastPage(__int64 val)=0;
	virtual void setNumWUs(__int64 val)=0;
	virtual void setPageStartFrom(__int64 val)=0;
	virtual void setPageEndAt(__int64 val)=0;
	virtual void setFirst(bool val)=0;
	virtual void setSortby(const char * val)=0;
	virtual void setDescending(bool val)=0;
	virtual void setBasicQuery(const char * val)=0;
	virtual void setFilters(const char * val)=0;
	virtual void setCacheHint(__int64 val)=0;
	virtual void copy(IConstGetDFUWorkunitsResponse &from)=0;
};

interface IClientGetDFUWorkunitsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstDFUWorkunit> & getResults()=0;
	virtual const char * getType()=0;
	virtual const char * getOwner()=0;
	virtual const char * getCluster()=0;
	virtual const char * getStateReq()=0;
	virtual __int64 getPageSize()=0;
	virtual __int64 getPrevPage()=0;
	virtual __int64 getNextPage()=0;
	virtual __int64 getLastPage()=0;
	virtual __int64 getNumWUs()=0;
	virtual __int64 getPageStartFrom()=0;
	virtual __int64 getPageEndAt()=0;
	virtual bool getFirst()=0;
	virtual const char * getSortby()=0;
	virtual bool getDescending()=0;
	virtual const char * getBasicQuery()=0;
	virtual const char * getFilters()=0;
	virtual __int64 getCacheHint()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstProgressRequest : extends IEspRequest
{
	virtual const char * getWuid()=0;
};

interface IEspProgressRequest : extends IConstProgressRequest
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstProgressRequest &from)=0;
};

interface IClientProgressRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
};



interface IConstProgressResponse : extends IEspResponse
{
	virtual const char * getWuid()=0;
	virtual int getPercentDone()=0;
	virtual int getSecsLeft()=0;
	virtual int getKbPerSecAve()=0;
	virtual int getKbPerSec()=0;
	virtual int getSlavesDone()=0;
	virtual const char * getTimeTaken()=0;
	virtual const char * getProgressMessage()=0;
	virtual const char * getSummaryMessage()=0;
	virtual const char * getState()=0;
};

interface IEspProgressResponse : extends IConstProgressResponse
{
	virtual void setWuid(const char * val)=0;
	virtual void setPercentDone(int val)=0;
	virtual void setSecsLeft(int val)=0;
	virtual void setKbPerSecAve(int val)=0;
	virtual void setKbPerSec(int val)=0;
	virtual void setSlavesDone(int val)=0;
	virtual void setTimeTaken(const char * val)=0;
	virtual void setProgressMessage(const char * val)=0;
	virtual void setSummaryMessage(const char * val)=0;
	virtual void setState(const char * val)=0;
	virtual void copy(IConstProgressResponse &from)=0;
};

interface IClientProgressResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getWuid()=0;
	virtual int getPercentDone()=0;
	virtual int getSecsLeft()=0;
	virtual int getKbPerSecAve()=0;
	virtual int getKbPerSec()=0;
	virtual int getSlavesDone()=0;
	virtual const char * getTimeTaken()=0;
	virtual const char * getProgressMessage()=0;
	virtual const char * getSummaryMessage()=0;
	virtual const char * getState()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetDFUWorkunit : extends IEspRequest
{
	virtual const char * getWuid()=0;
};

interface IEspGetDFUWorkunit : extends IConstGetDFUWorkunit
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstGetDFUWorkunit &from)=0;
};

interface IClientGetDFUWorkunit : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
};



interface IConstGetDFUWorkunitResponse : extends IEspResponse
{
	virtual IConstDFUWorkunit & getResult()=0;
	virtual int getAutoRefresh()=0;
};

interface IEspGetDFUWorkunitResponse : extends IConstGetDFUWorkunitResponse
{
	virtual IEspDFUWorkunit & updateResult()=0;
	virtual void setResult(IConstDFUWorkunit &ifrom)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void copy(IConstGetDFUWorkunitResponse &from)=0;
};

interface IClientGetDFUWorkunitResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstDFUWorkunit & getResult()=0;
	virtual int getAutoRefresh()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstCreateDFUWorkunit : extends IEspRequest
{
	virtual const char * getDFUServerQueue()=0;
};

interface IEspCreateDFUWorkunit : extends IConstCreateDFUWorkunit
{
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void copy(IConstCreateDFUWorkunit &from)=0;
};

interface IClientCreateDFUWorkunit : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setDFUServerQueue(const char * val)=0;
};



interface IConstCreateDFUWorkunitResponse : extends IEspResponse
{
	virtual IConstDFUWorkunit & getResult()=0;
};

interface IEspCreateDFUWorkunitResponse : extends IConstCreateDFUWorkunitResponse
{
	virtual IEspDFUWorkunit & updateResult()=0;
	virtual void setResult(IConstDFUWorkunit &ifrom)=0;
	virtual void copy(IConstCreateDFUWorkunitResponse &from)=0;
};

interface IClientCreateDFUWorkunitResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstDFUWorkunit & getResult()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstUpdateDFUWorkunit : extends IEspRequest
{
	virtual IConstDFUWorkunit & getWu()=0;
	virtual const char * getClusterOrig()=0;
	virtual const char * getJobNameOrig()=0;
	virtual bool getIsProtectedOrig()=0;
	virtual int getStateOrig()=0;
};

interface IEspUpdateDFUWorkunit : extends IConstUpdateDFUWorkunit
{
	virtual IEspDFUWorkunit & updateWu()=0;
	virtual void setWu(IConstDFUWorkunit &ifrom)=0;
	virtual void setClusterOrig(const char * val)=0;
	virtual void setJobNameOrig(const char * val)=0;
	virtual void setIsProtectedOrig(bool val)=0;
	virtual void setStateOrig(int val)=0;
	virtual void copy(IConstUpdateDFUWorkunit &from)=0;
};

interface IClientUpdateDFUWorkunit : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual IEspDFUWorkunit & updateWu()=0;
	virtual void setWu(IConstDFUWorkunit &ifrom)=0;
	virtual void setClusterOrig(const char * val)=0;
	virtual void setJobNameOrig(const char * val)=0;
	virtual void setIsProtectedOrig(bool val)=0;
	virtual void setStateOrig(int val)=0;
};



interface IConstUpdateDFUWorkunitResponse : extends IEspResponse
{
};

interface IEspUpdateDFUWorkunitResponse : extends IConstUpdateDFUWorkunitResponse
{
	virtual void copy(IConstUpdateDFUWorkunitResponse &from)=0;
};

interface IClientUpdateDFUWorkunitResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDeleteDFUWorkunit : extends IEspRequest
{
	virtual const char * getWuid()=0;
};

interface IEspDeleteDFUWorkunit : extends IConstDeleteDFUWorkunit
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstDeleteDFUWorkunit &from)=0;
};

interface IClientDeleteDFUWorkunit : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
};



interface IConstDeleteDFUWorkunitResponse : extends IEspResponse
{
	virtual bool getResult()=0;
};

interface IEspDeleteDFUWorkunitResponse : extends IConstDeleteDFUWorkunitResponse
{
	virtual void setResult(bool val)=0;
	virtual void copy(IConstDeleteDFUWorkunitResponse &from)=0;
};

interface IClientDeleteDFUWorkunitResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getResult()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDeleteDFUWorkunits : extends IEspRequest
{
	virtual StringArray & getWuids()=0;
};

interface IEspDeleteDFUWorkunits : extends IConstDeleteDFUWorkunits
{
	virtual void setWuids(StringArray &val)=0;
	virtual void copy(IConstDeleteDFUWorkunits &from)=0;
};

interface IClientDeleteDFUWorkunits : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuids(StringArray &val)=0;
};



interface IConstDeleteDFUWorkunitsResponse : extends IEspResponse
{
};

interface IEspDeleteDFUWorkunitsResponse : extends IConstDeleteDFUWorkunitsResponse
{
	virtual void copy(IConstDeleteDFUWorkunitsResponse &from)=0;
};

interface IClientDeleteDFUWorkunitsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDFUWorkunitsActionRequest : extends IEspRequest
{
	virtual StringArray & getWuids()=0;
	virtual CDFUWUActions getType()=0;
	virtual const char* getTypeAsString()=0;
};

interface IEspDFUWorkunitsActionRequest : extends IConstDFUWorkunitsActionRequest
{
	virtual void setWuids(StringArray &val)=0;
	virtual void setType(CDFUWUActions val)=0;
	virtual void setType(const char* val)=0;
	virtual void copy(IConstDFUWorkunitsActionRequest &from)=0;
};

interface IClientDFUWorkunitsActionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuids(StringArray &val)=0;
	virtual void setType(CDFUWUActions val)=0;
	virtual void setType(const char* val)=0;
};



interface IConstDFUWorkunitsActionResponse : extends IEspResponse
{
	virtual const char * getFirstColumn()=0;
	virtual IArrayOf<IConstDFUActionResult> & getDFUActionResults()=0;
};

interface IEspDFUWorkunitsActionResponse : extends IConstDFUWorkunitsActionResponse
{
	virtual void setFirstColumn(const char * val)=0;
	virtual void setDFUActionResults(IArrayOf<IEspDFUActionResult> &val)=0;
	virtual void setDFUActionResults(IArrayOf<IConstDFUActionResult> &val)=0;
	virtual void copy(IConstDFUWorkunitsActionResponse &from)=0;
};

interface IClientDFUWorkunitsActionResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getFirstColumn()=0;
	virtual IArrayOf<IConstDFUActionResult> & getDFUActionResults()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSubmitDFUWorkunit : extends IEspRequest
{
	virtual const char * getWuid()=0;
};

interface IEspSubmitDFUWorkunit : extends IConstSubmitDFUWorkunit
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstSubmitDFUWorkunit &from)=0;
};

interface IClientSubmitDFUWorkunit : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
};



interface IConstSubmitDFUWorkunitResponse : extends IEspResponse
{
};

interface IEspSubmitDFUWorkunitResponse : extends IConstSubmitDFUWorkunitResponse
{
	virtual void copy(IConstSubmitDFUWorkunitResponse &from)=0;
};

interface IClientSubmitDFUWorkunitResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstAbortDFUWorkunit : extends IEspRequest
{
	virtual const char * getWuid()=0;
};

interface IEspAbortDFUWorkunit : extends IConstAbortDFUWorkunit
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstAbortDFUWorkunit &from)=0;
};

interface IClientAbortDFUWorkunit : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
};



interface IConstAbortDFUWorkunitResponse : extends IEspResponse
{
};

interface IEspAbortDFUWorkunitResponse : extends IConstAbortDFUWorkunitResponse
{
	virtual void copy(IConstAbortDFUWorkunitResponse &from)=0;
};

interface IClientAbortDFUWorkunitResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetDFUExceptions : extends IEspRequest
{
	virtual const char * getWuid()=0;
};

interface IEspGetDFUExceptions : extends IConstGetDFUExceptions
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstGetDFUExceptions &from)=0;
};

interface IClientGetDFUExceptions : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
};



interface IConstGetDFUExceptionsResponse : extends IEspResponse
{
	virtual IArrayOf<IConstDFUException> & getResult()=0;
};

interface IEspGetDFUExceptionsResponse : extends IConstGetDFUExceptionsResponse
{
	virtual void setResult(IArrayOf<IEspDFUException> &val)=0;
	virtual void setResult(IArrayOf<IConstDFUException> &val)=0;
	virtual void copy(IConstGetDFUExceptionsResponse &from)=0;
};

interface IClientGetDFUExceptionsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstDFUException> & getResult()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSprayFixed : extends IEspRequest
{
	virtual const char * getSourceIP()=0;
	virtual const char * getSourcePath()=0;
	virtual const MemoryBuffer & getSrcxml()=0;
	virtual const char * getSourceFormat()=0;
	virtual bool getSourceRecordSize_isNull()=0;
	virtual int getSourceRecordSize()=0;
	virtual const char * getDestGroup()=0;
	virtual const char * getDestLogicalName()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual bool getReplicate_isNull()=0;
	virtual bool getReplicate()=0;
	virtual bool getReplicateOffset_isNull()=0;
	virtual int getReplicateOffset()=0;
	virtual bool getMaxConnections_isNull()=0;
	virtual int getMaxConnections()=0;
	virtual bool getThrottle_isNull()=0;
	virtual int getThrottle()=0;
	virtual bool getTransferBufferSize_isNull()=0;
	virtual int getTransferBufferSize()=0;
	virtual const char * getPrefix()=0;
	virtual bool getNosplit_isNull()=0;
	virtual bool getNosplit()=0;
	virtual bool getNorecover_isNull()=0;
	virtual bool getNorecover()=0;
	virtual bool getCompress_isNull()=0;
	virtual bool getCompress()=0;
	virtual bool getPush_isNull()=0;
	virtual bool getPush()=0;
	virtual bool getPull_isNull()=0;
	virtual bool getPull()=0;
	virtual const char * getEncrypt()=0;
	virtual const char * getDecrypt()=0;
	virtual bool getWrap_isNull()=0;
	virtual bool getWrap()=0;
	virtual bool getFailIfNoSourceFile_isNull()=0;
	virtual bool getFailIfNoSourceFile()=0;
	virtual bool getRecordStructurePresent_isNull()=0;
	virtual bool getRecordStructurePresent()=0;
	virtual bool getQuotedTerminator_isNull()=0;
	virtual bool getQuotedTerminator()=0;
	virtual bool getExpireDays_isNull()=0;
	virtual int getExpireDays()=0;
	virtual const char * getDFUServerQueue()=0;
};

interface IEspSprayFixed : extends IConstSprayFixed
{
	virtual void setSourceIP(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setSrcxml(const MemoryBuffer & val)=0;
	virtual void setSourceFormat(const char * val)=0;
	virtual void setSourceRecordSize_null()=0;
	virtual void setSourceRecordSize(int val)=0;
	virtual void setDestGroup(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setMaxConnections_null()=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle_null()=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize_null()=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setNosplit_null()=0;
	virtual void setNosplit(bool val)=0;
	virtual void setNorecover_null()=0;
	virtual void setNorecover(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setPush_null()=0;
	virtual void setPush(bool val)=0;
	virtual void setPull_null()=0;
	virtual void setPull(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setWrap_null()=0;
	virtual void setWrap(bool val)=0;
	virtual void setFailIfNoSourceFile_null()=0;
	virtual void setFailIfNoSourceFile(bool val)=0;
	virtual void setRecordStructurePresent_null()=0;
	virtual void setRecordStructurePresent(bool val)=0;
	virtual void setQuotedTerminator_null()=0;
	virtual void setQuotedTerminator(bool val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void copy(IConstSprayFixed &from)=0;
};

interface IClientSprayFixed : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSourceIP(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setSrcxml(const MemoryBuffer & val)=0;
	virtual void setSourceFormat(const char * val)=0;
	virtual void setSourceRecordSize_null()=0;
	virtual void setSourceRecordSize(int val)=0;
	virtual void setDestGroup(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setMaxConnections_null()=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle_null()=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize_null()=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setNosplit_null()=0;
	virtual void setNosplit(bool val)=0;
	virtual void setNorecover_null()=0;
	virtual void setNorecover(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setPush_null()=0;
	virtual void setPush(bool val)=0;
	virtual void setPull_null()=0;
	virtual void setPull(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setWrap_null()=0;
	virtual void setWrap(bool val)=0;
	virtual void setFailIfNoSourceFile_null()=0;
	virtual void setFailIfNoSourceFile(bool val)=0;
	virtual void setRecordStructurePresent_null()=0;
	virtual void setRecordStructurePresent(bool val)=0;
	virtual void setQuotedTerminator_null()=0;
	virtual void setQuotedTerminator(bool val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
};



interface IConstSprayFixedResponse : extends IEspResponse
{
	virtual const char * getWuid()=0;
};

interface IEspSprayFixedResponse : extends IConstSprayFixedResponse
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstSprayFixedResponse &from)=0;
};

interface IClientSprayFixedResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getWuid()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSprayVariable : extends IEspRequest
{
	virtual const char * getSourceIP()=0;
	virtual const char * getSourcePath()=0;
	virtual const MemoryBuffer & getSrcxml()=0;
	virtual bool getSourceMaxRecordSize_isNull()=0;
	virtual int getSourceMaxRecordSize()=0;
	virtual bool getSourceFormat_isNull()=0;
	virtual int getSourceFormat()=0;
	virtual bool getNoSourceCsvSeparator_isNull()=0;
	virtual bool getNoSourceCsvSeparator()=0;
	virtual const char * getSourceCsvSeparate()=0;
	virtual const char * getSourceCsvTerminate()=0;
	virtual const char * getSourceCsvQuote()=0;
	virtual const char * getSourceCsvEscape()=0;
	virtual const char * getSourceRowTag()=0;
	virtual const char * getDestGroup()=0;
	virtual const char * getDestLogicalName()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual bool getReplicate_isNull()=0;
	virtual bool getReplicate()=0;
	virtual bool getReplicateOffset_isNull()=0;
	virtual int getReplicateOffset()=0;
	virtual bool getMaxConnections_isNull()=0;
	virtual int getMaxConnections()=0;
	virtual bool getThrottle_isNull()=0;
	virtual int getThrottle()=0;
	virtual bool getTransferBufferSize_isNull()=0;
	virtual int getTransferBufferSize()=0;
	virtual const char * getPrefix()=0;
	virtual bool getNosplit_isNull()=0;
	virtual bool getNosplit()=0;
	virtual bool getNorecover_isNull()=0;
	virtual bool getNorecover()=0;
	virtual bool getCompress_isNull()=0;
	virtual bool getCompress()=0;
	virtual bool getPush_isNull()=0;
	virtual bool getPush()=0;
	virtual bool getPull_isNull()=0;
	virtual bool getPull()=0;
	virtual const char * getEncrypt()=0;
	virtual const char * getDecrypt()=0;
	virtual bool getFailIfNoSourceFile_isNull()=0;
	virtual bool getFailIfNoSourceFile()=0;
	virtual bool getRecordStructurePresent_isNull()=0;
	virtual bool getRecordStructurePresent()=0;
	virtual bool getQuotedTerminator_isNull()=0;
	virtual bool getQuotedTerminator()=0;
	virtual const char * getSourceRowPath()=0;
	virtual bool getIsJSON_isNull()=0;
	virtual bool getIsJSON()=0;
	virtual bool getExpireDays_isNull()=0;
	virtual int getExpireDays()=0;
	virtual const char * getDFUServerQueue()=0;
};

interface IEspSprayVariable : extends IConstSprayVariable
{
	virtual void setSourceIP(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setSrcxml(const MemoryBuffer & val)=0;
	virtual void setSourceMaxRecordSize_null()=0;
	virtual void setSourceMaxRecordSize(int val)=0;
	virtual void setSourceFormat_null()=0;
	virtual void setSourceFormat(int val)=0;
	virtual void setNoSourceCsvSeparator_null()=0;
	virtual void setNoSourceCsvSeparator(bool val)=0;
	virtual void setSourceCsvSeparate(const char * val)=0;
	virtual void setSourceCsvTerminate(const char * val)=0;
	virtual void setSourceCsvQuote(const char * val)=0;
	virtual void setSourceCsvEscape(const char * val)=0;
	virtual void setSourceRowTag(const char * val)=0;
	virtual void setDestGroup(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setMaxConnections_null()=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle_null()=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize_null()=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setNosplit_null()=0;
	virtual void setNosplit(bool val)=0;
	virtual void setNorecover_null()=0;
	virtual void setNorecover(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setPush_null()=0;
	virtual void setPush(bool val)=0;
	virtual void setPull_null()=0;
	virtual void setPull(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setFailIfNoSourceFile_null()=0;
	virtual void setFailIfNoSourceFile(bool val)=0;
	virtual void setRecordStructurePresent_null()=0;
	virtual void setRecordStructurePresent(bool val)=0;
	virtual void setQuotedTerminator_null()=0;
	virtual void setQuotedTerminator(bool val)=0;
	virtual void setSourceRowPath(const char * val)=0;
	virtual void setIsJSON_null()=0;
	virtual void setIsJSON(bool val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void copy(IConstSprayVariable &from)=0;
};

interface IClientSprayVariable : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSourceIP(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setSrcxml(const MemoryBuffer & val)=0;
	virtual void setSourceMaxRecordSize_null()=0;
	virtual void setSourceMaxRecordSize(int val)=0;
	virtual void setSourceFormat_null()=0;
	virtual void setSourceFormat(int val)=0;
	virtual void setNoSourceCsvSeparator_null()=0;
	virtual void setNoSourceCsvSeparator(bool val)=0;
	virtual void setSourceCsvSeparate(const char * val)=0;
	virtual void setSourceCsvTerminate(const char * val)=0;
	virtual void setSourceCsvQuote(const char * val)=0;
	virtual void setSourceCsvEscape(const char * val)=0;
	virtual void setSourceRowTag(const char * val)=0;
	virtual void setDestGroup(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setMaxConnections_null()=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle_null()=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize_null()=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setNosplit_null()=0;
	virtual void setNosplit(bool val)=0;
	virtual void setNorecover_null()=0;
	virtual void setNorecover(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setPush_null()=0;
	virtual void setPush(bool val)=0;
	virtual void setPull_null()=0;
	virtual void setPull(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setFailIfNoSourceFile_null()=0;
	virtual void setFailIfNoSourceFile(bool val)=0;
	virtual void setRecordStructurePresent_null()=0;
	virtual void setRecordStructurePresent(bool val)=0;
	virtual void setQuotedTerminator_null()=0;
	virtual void setQuotedTerminator(bool val)=0;
	virtual void setSourceRowPath(const char * val)=0;
	virtual void setIsJSON_null()=0;
	virtual void setIsJSON(bool val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
};



interface IConstSprayResponse : extends IEspResponse
{
	virtual const char * getWuid()=0;
};

interface IEspSprayResponse : extends IConstSprayResponse
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstSprayResponse &from)=0;
};

interface IClientSprayResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getWuid()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstReplicate : extends IEspRequest
{
	virtual const char * getSourceLogicalName()=0;
	virtual bool getReplicateOffset_isNull()=0;
	virtual int getReplicateOffset()=0;
	virtual const char * getCluster()=0;
	virtual bool getRepeatLast_isNull()=0;
	virtual bool getRepeatLast()=0;
	virtual bool getOnlyRepeated_isNull()=0;
	virtual bool getOnlyRepeated()=0;
	virtual const char * getDFUServerQueue()=0;
};

interface IEspReplicate : extends IConstReplicate
{
	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setRepeatLast_null()=0;
	virtual void setRepeatLast(bool val)=0;
	virtual void setOnlyRepeated_null()=0;
	virtual void setOnlyRepeated(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void copy(IConstReplicate &from)=0;
};

interface IClientReplicate : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setRepeatLast_null()=0;
	virtual void setRepeatLast(bool val)=0;
	virtual void setOnlyRepeated_null()=0;
	virtual void setOnlyRepeated(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
};



interface IConstReplicateResponse : extends IEspResponse
{
	virtual const char * getWuid()=0;
};

interface IEspReplicateResponse : extends IConstReplicateResponse
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstReplicateResponse &from)=0;
};

interface IClientReplicateResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getWuid()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDespray : extends IEspRequest
{
	virtual const char * getSourceLogicalName()=0;
	virtual const char * getDestIP()=0;
	virtual const char * getDestPath()=0;
	virtual const MemoryBuffer & getDstxml()=0;
	virtual bool getOverwrite()=0;
	virtual int getMaxConnections()=0;
	virtual int getThrottle()=0;
	virtual int getTransferBufferSize()=0;
	virtual const char * getSplitprefix()=0;
	virtual bool getNorecover()=0;
	virtual bool getWrap()=0;
	virtual bool getMultiCopy()=0;
	virtual bool getSingleConnection()=0;
	virtual const char * getDFUServerQueue()=0;
	virtual bool getCompress()=0;
	virtual const char * getEncrypt()=0;
	virtual const char * getDecrypt()=0;
};

interface IEspDespray : extends IConstDespray
{
	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setDestIP(const char * val)=0;
	virtual void setDestPath(const char * val)=0;
	virtual void setDstxml(const MemoryBuffer & val)=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setSplitprefix(const char * val)=0;
	virtual void setNorecover(bool val)=0;
	virtual void setWrap(bool val)=0;
	virtual void setMultiCopy(bool val)=0;
	virtual void setSingleConnection(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void setCompress(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void copy(IConstDespray &from)=0;
};

interface IClientDespray : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setDestIP(const char * val)=0;
	virtual void setDestPath(const char * val)=0;
	virtual void setDstxml(const MemoryBuffer & val)=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setSplitprefix(const char * val)=0;
	virtual void setNorecover(bool val)=0;
	virtual void setWrap(bool val)=0;
	virtual void setMultiCopy(bool val)=0;
	virtual void setSingleConnection(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void setCompress(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
};



interface IConstDesprayResponse : extends IEspResponse
{
	virtual const char * getWuid()=0;
};

interface IEspDesprayResponse : extends IConstDesprayResponse
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstDesprayResponse &from)=0;
};

interface IClientDesprayResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getWuid()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstCopy : extends IEspRequest
{
	virtual const char * getSourceLogicalName()=0;
	virtual const char * getDestGroup()=0;
	virtual const char * getDestGroupRoxie()=0;
	virtual const char * getDestLogicalName()=0;
	virtual const char * getSourceDali()=0;
	virtual const char * getSrcusername()=0;
	virtual const char * getSrcpassword()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual bool getReplicate_isNull()=0;
	virtual bool getReplicate()=0;
	virtual bool getReplicateOffset_isNull()=0;
	virtual int getReplicateOffset()=0;
	virtual bool getMaxConnections_isNull()=0;
	virtual int getMaxConnections()=0;
	virtual bool getThrottle_isNull()=0;
	virtual int getThrottle()=0;
	virtual bool getTransferBufferSize_isNull()=0;
	virtual int getTransferBufferSize()=0;
	virtual bool getNosplit_isNull()=0;
	virtual bool getNosplit()=0;
	virtual bool getNorecover_isNull()=0;
	virtual bool getNorecover()=0;
	virtual bool getCompress_isNull()=0;
	virtual bool getCompress()=0;
	virtual bool getWrap_isNull()=0;
	virtual bool getWrap()=0;
	virtual bool getMulticopy_isNull()=0;
	virtual bool getMulticopy()=0;
	virtual const char * getSourceDiffKeyName()=0;
	virtual const char * getDestDiffKeyName()=0;
	virtual bool getSuperCopy_isNull()=0;
	virtual bool getSuperCopy()=0;
	virtual bool getPush_isNull()=0;
	virtual bool getPush()=0;
	virtual bool getPull_isNull()=0;
	virtual bool getPull()=0;
	virtual bool getIfnewer_isNull()=0;
	virtual bool getIfnewer()=0;
	virtual const char * getEncrypt()=0;
	virtual const char * getDecrypt()=0;
	virtual bool getPreserveCompression_isNull()=0;
	virtual bool getPreserveCompression()=0;
	virtual const char * getDFUServerQueue()=0;
	virtual bool getExpireDays_isNull()=0;
	virtual int getExpireDays()=0;
};

interface IEspCopy : extends IConstCopy
{
	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setDestGroup(const char * val)=0;
	virtual void setDestGroupRoxie(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setSourceDali(const char * val)=0;
	virtual void setSrcusername(const char * val)=0;
	virtual void setSrcpassword(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setMaxConnections_null()=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle_null()=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize_null()=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setNosplit_null()=0;
	virtual void setNosplit(bool val)=0;
	virtual void setNorecover_null()=0;
	virtual void setNorecover(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setWrap_null()=0;
	virtual void setWrap(bool val)=0;
	virtual void setMulticopy_null()=0;
	virtual void setMulticopy(bool val)=0;
	virtual void setSourceDiffKeyName(const char * val)=0;
	virtual void setDestDiffKeyName(const char * val)=0;
	virtual void setSuperCopy_null()=0;
	virtual void setSuperCopy(bool val)=0;
	virtual void setPush_null()=0;
	virtual void setPush(bool val)=0;
	virtual void setPull_null()=0;
	virtual void setPull(bool val)=0;
	virtual void setIfnewer_null()=0;
	virtual void setIfnewer(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setPreserveCompression_null()=0;
	virtual void setPreserveCompression(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
	virtual void copy(IConstCopy &from)=0;
};

interface IClientCopy : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSourceLogicalName(const char * val)=0;
	virtual void setDestGroup(const char * val)=0;
	virtual void setDestGroupRoxie(const char * val)=0;
	virtual void setDestLogicalName(const char * val)=0;
	virtual void setSourceDali(const char * val)=0;
	virtual void setSrcusername(const char * val)=0;
	virtual void setSrcpassword(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setReplicate_null()=0;
	virtual void setReplicate(bool val)=0;
	virtual void setReplicateOffset_null()=0;
	virtual void setReplicateOffset(int val)=0;
	virtual void setMaxConnections_null()=0;
	virtual void setMaxConnections(int val)=0;
	virtual void setThrottle_null()=0;
	virtual void setThrottle(int val)=0;
	virtual void setTransferBufferSize_null()=0;
	virtual void setTransferBufferSize(int val)=0;
	virtual void setNosplit_null()=0;
	virtual void setNosplit(bool val)=0;
	virtual void setNorecover_null()=0;
	virtual void setNorecover(bool val)=0;
	virtual void setCompress_null()=0;
	virtual void setCompress(bool val)=0;
	virtual void setWrap_null()=0;
	virtual void setWrap(bool val)=0;
	virtual void setMulticopy_null()=0;
	virtual void setMulticopy(bool val)=0;
	virtual void setSourceDiffKeyName(const char * val)=0;
	virtual void setDestDiffKeyName(const char * val)=0;
	virtual void setSuperCopy_null()=0;
	virtual void setSuperCopy(bool val)=0;
	virtual void setPush_null()=0;
	virtual void setPush(bool val)=0;
	virtual void setPull_null()=0;
	virtual void setPull(bool val)=0;
	virtual void setIfnewer_null()=0;
	virtual void setIfnewer(bool val)=0;
	virtual void setEncrypt(const char * val)=0;
	virtual void setDecrypt(const char * val)=0;
	virtual void setPreserveCompression_null()=0;
	virtual void setPreserveCompression(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void setExpireDays_null()=0;
	virtual void setExpireDays(int val)=0;
};



interface IConstCopyResponse : extends IEspResponse
{
	virtual const char * getResult()=0;
};

interface IEspCopyResponse : extends IConstCopyResponse
{
	virtual void setResult(const char * val)=0;
	virtual void copy(IConstCopyResponse &from)=0;
};

interface IClientCopyResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getResult()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstEchoDateTime : extends IEspRequest
{
	virtual const char * getDt()=0;
};

interface IEspEchoDateTime : extends IConstEchoDateTime
{
	virtual void setDt(const char * val)=0;
	virtual void copy(IConstEchoDateTime &from)=0;
};

interface IClientEchoDateTime : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setDt(const char * val)=0;
};



interface IConstEchoDateTimeResponse : extends IEspResponse
{
	virtual const char * getResult()=0;
};

interface IEspEchoDateTimeResponse : extends IConstEchoDateTimeResponse
{
	virtual void setResult(const char * val)=0;
	virtual void copy(IConstEchoDateTimeResponse &from)=0;
};

interface IClientEchoDateTimeResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getResult()=0;
};



interface IConstRename : extends IEspRequest
{
	virtual const char * getSrcname()=0;
	virtual const char * getDstname()=0;
	virtual bool getOverwrite()=0;
	virtual const char * getDFUServerQueue()=0;
};

interface IEspRename : extends IConstRename
{
	virtual void setSrcname(const char * val)=0;
	virtual void setDstname(const char * val)=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
	virtual void copy(IConstRename &from)=0;
};

interface IClientRename : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSrcname(const char * val)=0;
	virtual void setDstname(const char * val)=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setDFUServerQueue(const char * val)=0;
};



interface IConstRenameResponse : extends IEspResponse
{
	virtual const char * getWuid()=0;
};

interface IEspRenameResponse : extends IConstRenameResponse
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstRenameResponse &from)=0;
};

interface IClientRenameResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getWuid()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDFUWUFileRequest : extends IEspRequest
{
	virtual const char * getWuid()=0;
	virtual const char * getType()=0;
	virtual const char * getPlainText()=0;
};

interface IEspDFUWUFileRequest : extends IConstDFUWUFileRequest
{
	virtual void setWuid(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPlainText(const char * val)=0;
	virtual void copy(IConstDFUWUFileRequest &from)=0;
};

interface IClientDFUWUFileRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuid(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPlainText(const char * val)=0;
};



interface IConstDFUWUFileResponse : extends IEspResponse
{
	virtual const char *getFile_mimetype()=0;
	virtual const char * getFile()=0;
};

interface IEspDFUWUFileResponse : extends IConstDFUWUFileResponse
{
	virtual void setFile_mimetype(const char *  val)=0;
	virtual void setFile(const char * val)=0;
	virtual void copy(IConstDFUWUFileResponse &from)=0;
};

interface IClientDFUWUFileResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char *getFile_mimetype()=0;
	virtual const char * getFile()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstFileListRequest : extends IEspRequest
{
	virtual const char * getNetaddr()=0;
	virtual const char * getPath()=0;
	virtual const char * getMask()=0;
	virtual const char * getOS()=0;
	virtual bool getDirectoryOnly()=0;
};

interface IEspFileListRequest : extends IConstFileListRequest
{
	virtual void setNetaddr(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setMask(const char * val)=0;
	virtual void setOS(const char * val)=0;
	virtual void setDirectoryOnly(bool val)=0;
	virtual void copy(IConstFileListRequest &from)=0;
};

interface IClientFileListRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setNetaddr(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setMask(const char * val)=0;
	virtual void setOS(const char * val)=0;
	virtual void setDirectoryOnly(bool val)=0;
};



interface IConstPhysicalFileStruct : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual bool getIsDir()=0;
	virtual __int64 getFilesize()=0;
	virtual const char * getModifiedtime()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;
};

interface IEspPhysicalFileStruct : extends IConstPhysicalFileStruct
{
	virtual void setName(const char * val)=0;
	virtual void setIsDir(bool val)=0;
	virtual void setFilesize(__int64 val)=0;
	virtual void setModifiedtime(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setFiles(IArrayOf<IEspPhysicalFileStruct> &val)=0;
	virtual void setFiles(IArrayOf<IConstPhysicalFileStruct> &val)=0;
	virtual void copy(IConstPhysicalFileStruct &from)=0;
};

interface IClientPhysicalFileStruct : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setIsDir(bool val)=0;
	virtual void setFilesize(__int64 val)=0;
	virtual void setModifiedtime(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setFiles(IArrayOf<IEspPhysicalFileStruct> &val)=0;
	virtual void setFiles(IArrayOf<IConstPhysicalFileStruct> &val)=0;
	virtual const char * getName()=0;
	virtual bool getIsDir()=0;
	virtual __int64 getFilesize()=0;
	virtual const char * getModifiedtime()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;
};



interface IConstFileListResponse : extends IEspResponse
{
	virtual const char * getNetaddr()=0;
	virtual const char * getPath()=0;
	virtual const char * getMask()=0;
	virtual int getOS()=0;
	virtual bool getDirectoryOnly()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;
};

interface IEspFileListResponse : extends IConstFileListResponse
{
	virtual void setNetaddr(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setMask(const char * val)=0;
	virtual void setOS(int val)=0;
	virtual void setDirectoryOnly(bool val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void setFiles(IArrayOf<IEspPhysicalFileStruct> &val)=0;
	virtual void setFiles(IArrayOf<IConstPhysicalFileStruct> &val)=0;
	virtual void copy(IConstFileListResponse &from)=0;
};

interface IClientFileListResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getNetaddr()=0;
	virtual const char * getPath()=0;
	virtual const char * getMask()=0;
	virtual int getOS()=0;
	virtual bool getDirectoryOnly()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDropZoneFileSearchRequest : extends IEspRequest
{
	virtual const char * getDropZoneName()=0;
	virtual const char * getServer()=0;
	virtual bool getECLWatchVisibleOnly_isNull()=0;
	virtual bool getECLWatchVisibleOnly()=0;
	virtual const char * getNameFilter()=0;
};

interface IEspDropZoneFileSearchRequest : extends IConstDropZoneFileSearchRequest
{
	virtual void setDropZoneName(const char * val)=0;
	virtual void setServer(const char * val)=0;
	virtual void setECLWatchVisibleOnly_null()=0;
	virtual void setECLWatchVisibleOnly(bool val)=0;
	virtual void setNameFilter(const char * val)=0;
	virtual void copy(IConstDropZoneFileSearchRequest &from)=0;
};

interface IClientDropZoneFileSearchRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setDropZoneName(const char * val)=0;
	virtual void setServer(const char * val)=0;
	virtual void setECLWatchVisibleOnly_null()=0;
	virtual void setECLWatchVisibleOnly(bool val)=0;
	virtual void setNameFilter(const char * val)=0;
};



interface IConstDropZoneFileSearchResponse : extends IEspResponse
{
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;
	virtual const char * getWarning()=0;
};

interface IEspDropZoneFileSearchResponse : extends IConstDropZoneFileSearchResponse
{
	virtual void setFiles(IArrayOf<IEspPhysicalFileStruct> &val)=0;
	virtual void setFiles(IArrayOf<IConstPhysicalFileStruct> &val)=0;
	virtual void setWarning(const char * val)=0;
	virtual void copy(IConstDropZoneFileSearchResponse &from)=0;
};

interface IClientDropZoneFileSearchResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;
	virtual const char * getWarning()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstOpenSaveRequest : extends IEspRequest
{
	virtual const char * getLocation()=0;
	virtual const char * getPath()=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual const char * getDateTime()=0;
	virtual bool getBinaryFile()=0;
};

interface IEspOpenSaveRequest : extends IConstOpenSaveRequest
{
	virtual void setLocation(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setDateTime(const char * val)=0;
	virtual void setBinaryFile(bool val)=0;
	virtual void copy(IConstOpenSaveRequest &from)=0;
};

interface IClientOpenSaveRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setLocation(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setDateTime(const char * val)=0;
	virtual void setBinaryFile(bool val)=0;
};



interface IConstOpenSaveResponse : extends IEspResponse
{
	virtual const char * getLocation()=0;
	virtual const char * getPath()=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual const char * getDateTime()=0;
	virtual bool getViewable()=0;
};

interface IEspOpenSaveResponse : extends IConstOpenSaveResponse
{
	virtual void setLocation(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setDateTime(const char * val)=0;
	virtual void setViewable(bool val)=0;
	virtual void copy(IConstOpenSaveResponse &from)=0;
};

interface IClientOpenSaveResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getLocation()=0;
	virtual const char * getPath()=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual const char * getDateTime()=0;
	virtual bool getViewable()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDfuMonitorRequest : extends IEspRequest
{
	virtual const char * getEventName()=0;
	virtual const char * getLogicalName()=0;
	virtual const char * getIp()=0;
	virtual const char * getFilename()=0;
	virtual bool getSub()=0;
	virtual int getShotLimit()=0;
};

interface IEspDfuMonitorRequest : extends IConstDfuMonitorRequest
{
	virtual void setEventName(const char * val)=0;
	virtual void setLogicalName(const char * val)=0;
	virtual void setIp(const char * val)=0;
	virtual void setFilename(const char * val)=0;
	virtual void setSub(bool val)=0;
	virtual void setShotLimit(int val)=0;
	virtual void copy(IConstDfuMonitorRequest &from)=0;
};

interface IClientDfuMonitorRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEventName(const char * val)=0;
	virtual void setLogicalName(const char * val)=0;
	virtual void setIp(const char * val)=0;
	virtual void setFilename(const char * val)=0;
	virtual void setSub(bool val)=0;
	virtual void setShotLimit(int val)=0;
};



interface IConstDfuMonitorResponse : extends IEspResponse
{
	virtual const char * getWuid()=0;
};

interface IEspDfuMonitorResponse : extends IConstDfuMonitorResponse
{
	virtual void setWuid(const char * val)=0;
	virtual void copy(IConstDfuMonitorResponse &from)=0;
};

interface IClientDfuMonitorResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getWuid()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstShowResultRequest : extends IEspRequest
{
	virtual const char * getResult()=0;
};

interface IEspShowResultRequest : extends IConstShowResultRequest
{
	virtual void setResult(const char * val)=0;
	virtual void copy(IConstShowResultRequest &from)=0;
};

interface IClientShowResultRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setResult(const char * val)=0;
};



interface IConstShowResultResponse : extends IEspResponse
{
	virtual const char * getResult()=0;
};

interface IEspShowResultResponse : extends IConstShowResultResponse
{
	virtual void setResult(const char * val)=0;
	virtual void copy(IConstShowResultResponse &from)=0;
};

interface IClientShowResultResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getResult()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstDropZone : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getPath()=0;
	virtual const char * getComputer()=0;
	virtual const char * getLinux()=0;
};

interface IEspDropZone : extends IConstDropZone
{
	virtual void setName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setComputer(const char * val)=0;
	virtual void setLinux(const char * val)=0;
	virtual void copy(IConstDropZone &from)=0;
};

interface IClientDropZone : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setComputer(const char * val)=0;
	virtual void setLinux(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getPath()=0;
	virtual const char * getComputer()=0;
	virtual const char * getLinux()=0;
};



interface IConstDropZoneFilesRequest : extends IEspRequest
{
	virtual const char * getDropZoneName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getPath()=0;
	virtual const char * getOS()=0;
	virtual const char * getSubfolder()=0;
	virtual bool getECLWatchVisibleOnly()=0;
	virtual bool getDirectoryOnly()=0;
};

interface IEspDropZoneFilesRequest : extends IConstDropZoneFilesRequest
{
	virtual void setDropZoneName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setOS(const char * val)=0;
	virtual void setSubfolder(const char * val)=0;
	virtual void setECLWatchVisibleOnly(bool val)=0;
	virtual void setDirectoryOnly(bool val)=0;
	virtual void copy(IConstDropZoneFilesRequest &from)=0;
};

interface IClientDropZoneFilesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setDropZoneName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setOS(const char * val)=0;
	virtual void setSubfolder(const char * val)=0;
	virtual void setECLWatchVisibleOnly(bool val)=0;
	virtual void setDirectoryOnly(bool val)=0;
};



interface IConstDropZoneFilesResponse : extends IEspResponse
{
	virtual const char * getDropZoneName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getPath()=0;
	virtual bool getOS_isNull()=0;
	virtual int getOS()=0;
	virtual bool getECLWatchVisibleOnly_isNull()=0;
	virtual bool getECLWatchVisibleOnly()=0;
	virtual IArrayOf<IConstDropZone> & getDropZones()=0;
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;
};

interface IEspDropZoneFilesResponse : extends IConstDropZoneFilesResponse
{
	virtual void setDropZoneName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setOS_null()=0;
	virtual void setOS(int val)=0;
	virtual void setECLWatchVisibleOnly_null()=0;
	virtual void setECLWatchVisibleOnly(bool val)=0;
	virtual void setDropZones(IArrayOf<IEspDropZone> &val)=0;
	virtual void setDropZones(IArrayOf<IConstDropZone> &val)=0;
	virtual void setFiles(IArrayOf<IEspPhysicalFileStruct> &val)=0;
	virtual void setFiles(IArrayOf<IConstPhysicalFileStruct> &val)=0;
	virtual void copy(IConstDropZoneFilesResponse &from)=0;
};

interface IClientDropZoneFilesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getDropZoneName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getPath()=0;
	virtual bool getOS_isNull()=0;
	virtual int getOS()=0;
	virtual bool getECLWatchVisibleOnly_isNull()=0;
	virtual bool getECLWatchVisibleOnly()=0;
	virtual IArrayOf<IConstDropZone> & getDropZones()=0;
	virtual IArrayOf<IConstPhysicalFileStruct> & getFiles()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDeleteDropZoneFilesRequest : extends IEspRequest
{
	virtual const char * getDropZoneName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getPath()=0;
	virtual const char * getOS()=0;
	virtual StringArray & getNames()=0;
};

interface IEspDeleteDropZoneFilesRequest : extends IConstDeleteDropZoneFilesRequest
{
	virtual void setDropZoneName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setOS(const char * val)=0;
	virtual void setNames(StringArray &val)=0;
	virtual void copy(IConstDeleteDropZoneFilesRequest &from)=0;
};

interface IClientDeleteDropZoneFilesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setDropZoneName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setOS(const char * val)=0;
	virtual void setNames(StringArray &val)=0;
};



interface IConstDeleteDropZoneFilesResponse : extends IEspResponse
{
	virtual IArrayOf<IConstDFUActionResult> & getDFUActionResults()=0;
};

interface IEspDeleteDropZoneFilesResponse : extends IConstDeleteDropZoneFilesResponse
{
	virtual void setDFUActionResults(IArrayOf<IEspDFUActionResult> &val)=0;
	virtual void setDFUActionResults(IArrayOf<IConstDFUActionResult> &val)=0;
	virtual void copy(IConstDeleteDropZoneFilesResponse &from)=0;
};

interface IClientDeleteDropZoneFilesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstDFUActionResult> & getDFUActionResults()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstUploadFilesResponse : extends IEspResponse
{
	virtual IArrayOf<IConstDFUActionResult> & getUploadFileResults()=0;
};

interface IEspUploadFilesResponse : extends IConstUploadFilesResponse
{
	virtual void setUploadFileResults(IArrayOf<IEspDFUActionResult> &val)=0;
	virtual void setUploadFileResults(IArrayOf<IConstDFUActionResult> &val)=0;
	virtual void copy(IConstUploadFilesResponse &from)=0;
};

interface IClientUploadFilesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstDFUActionResult> & getUploadFileResults()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetSprayTargetsRequest : extends IEspRequest
{
};

interface IEspGetSprayTargetsRequest : extends IConstGetSprayTargetsRequest
{
	virtual void copy(IConstGetSprayTargetsRequest &from)=0;
};

interface IClientGetSprayTargetsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstGetSprayTargetsResponse : extends IEspResponse
{
	virtual IArrayOf<IConstGroupNode> & getGroupNodes()=0;
};

interface IEspGetSprayTargetsResponse : extends IConstGetSprayTargetsResponse
{
	virtual void setGroupNodes(IArrayOf<IEspGroupNode> &val)=0;
	virtual void setGroupNodes(IArrayOf<IConstGroupNode> &val)=0;
	virtual void copy(IConstGetSprayTargetsResponse &from)=0;
};

interface IClientGetSprayTargetsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstGroupNode> & getGroupNodes()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetDFUServerQueuesRequest : extends IEspRequest
{
	virtual const char * getDFUServerName()=0;
};

interface IEspGetDFUServerQueuesRequest : extends IConstGetDFUServerQueuesRequest
{
	virtual void setDFUServerName(const char * val)=0;
	virtual void copy(IConstGetDFUServerQueuesRequest &from)=0;
};

interface IClientGetDFUServerQueuesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setDFUServerName(const char * val)=0;
};



interface IConstGetDFUServerQueuesResponse : extends IEspResponse
{
	virtual StringArray & getNames()=0;
};

interface IEspGetDFUServerQueuesResponse : extends IConstGetDFUServerQueuesResponse
{
	virtual void setNames(StringArray &val)=0;
	virtual void copy(IConstGetDFUServerQueuesResponse &from)=0;
};

interface IClientGetDFUServerQueuesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual StringArray & getNames()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstFileSprayPingRequest : extends IEspRequest
{
};

interface IEspFileSprayPingRequest : extends IConstFileSprayPingRequest
{
	virtual void copy(IConstFileSprayPingRequest &from)=0;
};

interface IClientFileSprayPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstFileSprayPingResponse : extends IEspResponse
{
};

interface IEspFileSprayPingResponse : extends IConstFileSprayPingResponse
{
	virtual void copy(IConstFileSprayPingResponse &from)=0;
};

interface IClientFileSprayPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspFileSpray : extends IEspService
{
	virtual bool onAbortDFUWorkunit(IEspContext &context, IEspAbortDFUWorkunit &req, IEspAbortDFUWorkunitResponse &resp)=0;
	virtual bool onCopy(IEspContext &context, IEspCopy &req, IEspCopyResponse &resp)=0;
	virtual bool onCreateDFUWorkunit(IEspContext &context, IEspCreateDFUWorkunit &req, IEspCreateDFUWorkunitResponse &resp)=0;
	virtual bool onDFUWUFile(IEspContext &context, IEspDFUWUFileRequest &req, IEspDFUWUFileResponse &resp)=0;
	virtual bool onDFUWUSearch(IEspContext &context, IEspDFUWUSearchRequest &req, IEspDFUWUSearchResponse &resp)=0;
	virtual bool onDFUWorkunitsAction(IEspContext &context, IEspDFUWorkunitsActionRequest &req, IEspDFUWorkunitsActionResponse &resp)=0;
	virtual bool onDeleteDFUWorkunit(IEspContext &context, IEspDeleteDFUWorkunit &req, IEspDeleteDFUWorkunitResponse &resp)=0;
	virtual bool onDeleteDFUWorkunits(IEspContext &context, IEspDeleteDFUWorkunits &req, IEspDeleteDFUWorkunitsResponse &resp)=0;
	virtual bool onDeleteDropZoneFiles(IEspContext &context, IEspDeleteDropZoneFilesRequest &req, IEspDFUWorkunitsActionResponse &resp)=0;
	virtual bool onDespray(IEspContext &context, IEspDespray &req, IEspDesprayResponse &resp)=0;
	virtual bool onDfuMonitor(IEspContext &context, IEspDfuMonitorRequest &req, IEspDfuMonitorResponse &resp)=0;
	virtual bool onDropZoneFileSearch(IEspContext &context, IEspDropZoneFileSearchRequest &req, IEspDropZoneFileSearchResponse &resp)=0;
	virtual bool onDropZoneFiles(IEspContext &context, IEspDropZoneFilesRequest &req, IEspDropZoneFilesResponse &resp)=0;
	virtual bool onEchoDateTime(IEspContext &context, IEspEchoDateTime &req, IEspEchoDateTimeResponse &resp)=0;
	virtual bool onFileList(IEspContext &context, IEspFileListRequest &req, IEspFileListResponse &resp)=0;
	virtual bool onGetDFUExceptions(IEspContext &context, IEspGetDFUExceptions &req, IEspGetDFUExceptionsResponse &resp)=0;
	virtual bool onGetDFUProgress(IEspContext &context, IEspProgressRequest &req, IEspProgressResponse &resp)=0;
	virtual bool onGetDFUServerQueues(IEspContext &context, IEspGetDFUServerQueuesRequest &req, IEspGetDFUServerQueuesResponse &resp)=0;
	virtual bool onGetDFUWorkunit(IEspContext &context, IEspGetDFUWorkunit &req, IEspGetDFUWorkunitResponse &resp)=0;
	virtual bool onGetDFUWorkunits(IEspContext &context, IEspGetDFUWorkunits &req, IEspGetDFUWorkunitsResponse &resp)=0;
	virtual bool onGetSprayTargets(IEspContext &context, IEspGetSprayTargetsRequest &req, IEspGetSprayTargetsResponse &resp)=0;
	virtual bool onOpenSave(IEspContext &context, IEspOpenSaveRequest &req, IEspOpenSaveResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspFileSprayPingRequest &req, IEspFileSprayPingResponse &resp)=0;
	virtual bool onRename(IEspContext &context, IEspRename &req, IEspRenameResponse &resp)=0;
	virtual bool onReplicate(IEspContext &context, IEspReplicate &req, IEspReplicateResponse &resp)=0;
	virtual bool onShowResult(IEspContext &context, IEspShowResultRequest &req, IEspShowResultResponse &resp)=0;
	virtual bool onSprayFixed(IEspContext &context, IEspSprayFixed &req, IEspSprayFixedResponse &resp)=0;
	virtual bool onSprayVariable(IEspContext &context, IEspSprayVariable &req, IEspSprayResponse &resp)=0;
	virtual bool onSubmitDFUWorkunit(IEspContext &context, IEspSubmitDFUWorkunit &req, IEspSubmitDFUWorkunitResponse &resp)=0;
	virtual bool onUpdateDFUWorkunit(IEspContext &context, IEspUpdateDFUWorkunit &req, IEspUpdateDFUWorkunitResponse &resp)=0;
};

interface IClientFileSprayEvents : extends IInterface
{
	virtual int onAbortDFUWorkunitComplete(IClientAbortDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onAbortDFUWorkunitError(IClientAbortDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onCopyComplete(IClientCopyResponse *resp,IInterface* state)=0;
	virtual int onCopyError(IClientCopyResponse *resp,IInterface* state)=0;
	virtual int onCreateDFUWorkunitComplete(IClientCreateDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onCreateDFUWorkunitError(IClientCreateDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onDFUWUFileComplete(IClientDFUWUFileResponse *resp,IInterface* state)=0;
	virtual int onDFUWUFileError(IClientDFUWUFileResponse *resp,IInterface* state)=0;
	virtual int onDFUWUSearchComplete(IClientDFUWUSearchResponse *resp,IInterface* state)=0;
	virtual int onDFUWUSearchError(IClientDFUWUSearchResponse *resp,IInterface* state)=0;
	virtual int onDFUWorkunitsActionComplete(IClientDFUWorkunitsActionResponse *resp,IInterface* state)=0;
	virtual int onDFUWorkunitsActionError(IClientDFUWorkunitsActionResponse *resp,IInterface* state)=0;
	virtual int onDeleteDFUWorkunitComplete(IClientDeleteDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onDeleteDFUWorkunitError(IClientDeleteDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onDeleteDFUWorkunitsComplete(IClientDeleteDFUWorkunitsResponse *resp,IInterface* state)=0;
	virtual int onDeleteDFUWorkunitsError(IClientDeleteDFUWorkunitsResponse *resp,IInterface* state)=0;
	virtual int onDeleteDropZoneFilesComplete(IClientDFUWorkunitsActionResponse *resp,IInterface* state)=0;
	virtual int onDeleteDropZoneFilesError(IClientDFUWorkunitsActionResponse *resp,IInterface* state)=0;
	virtual int onDesprayComplete(IClientDesprayResponse *resp,IInterface* state)=0;
	virtual int onDesprayError(IClientDesprayResponse *resp,IInterface* state)=0;
	virtual int onDfuMonitorComplete(IClientDfuMonitorResponse *resp,IInterface* state)=0;
	virtual int onDfuMonitorError(IClientDfuMonitorResponse *resp,IInterface* state)=0;
	virtual int onDropZoneFileSearchComplete(IClientDropZoneFileSearchResponse *resp,IInterface* state)=0;
	virtual int onDropZoneFileSearchError(IClientDropZoneFileSearchResponse *resp,IInterface* state)=0;
	virtual int onDropZoneFilesComplete(IClientDropZoneFilesResponse *resp,IInterface* state)=0;
	virtual int onDropZoneFilesError(IClientDropZoneFilesResponse *resp,IInterface* state)=0;
	virtual int onEchoDateTimeComplete(IClientEchoDateTimeResponse *resp,IInterface* state)=0;
	virtual int onEchoDateTimeError(IClientEchoDateTimeResponse *resp,IInterface* state)=0;
	virtual int onFileListComplete(IClientFileListResponse *resp,IInterface* state)=0;
	virtual int onFileListError(IClientFileListResponse *resp,IInterface* state)=0;
	virtual int onGetDFUExceptionsComplete(IClientGetDFUExceptionsResponse *resp,IInterface* state)=0;
	virtual int onGetDFUExceptionsError(IClientGetDFUExceptionsResponse *resp,IInterface* state)=0;
	virtual int onGetDFUProgressComplete(IClientProgressResponse *resp,IInterface* state)=0;
	virtual int onGetDFUProgressError(IClientProgressResponse *resp,IInterface* state)=0;
	virtual int onGetDFUServerQueuesComplete(IClientGetDFUServerQueuesResponse *resp,IInterface* state)=0;
	virtual int onGetDFUServerQueuesError(IClientGetDFUServerQueuesResponse *resp,IInterface* state)=0;
	virtual int onGetDFUWorkunitComplete(IClientGetDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onGetDFUWorkunitError(IClientGetDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onGetDFUWorkunitsComplete(IClientGetDFUWorkunitsResponse *resp,IInterface* state)=0;
	virtual int onGetDFUWorkunitsError(IClientGetDFUWorkunitsResponse *resp,IInterface* state)=0;
	virtual int onGetSprayTargetsComplete(IClientGetSprayTargetsResponse *resp,IInterface* state)=0;
	virtual int onGetSprayTargetsError(IClientGetSprayTargetsResponse *resp,IInterface* state)=0;
	virtual int onOpenSaveComplete(IClientOpenSaveResponse *resp,IInterface* state)=0;
	virtual int onOpenSaveError(IClientOpenSaveResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientFileSprayPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientFileSprayPingResponse *resp,IInterface* state)=0;
	virtual int onRenameComplete(IClientRenameResponse *resp,IInterface* state)=0;
	virtual int onRenameError(IClientRenameResponse *resp,IInterface* state)=0;
	virtual int onReplicateComplete(IClientReplicateResponse *resp,IInterface* state)=0;
	virtual int onReplicateError(IClientReplicateResponse *resp,IInterface* state)=0;
	virtual int onShowResultComplete(IClientShowResultResponse *resp,IInterface* state)=0;
	virtual int onShowResultError(IClientShowResultResponse *resp,IInterface* state)=0;
	virtual int onSprayFixedComplete(IClientSprayFixedResponse *resp,IInterface* state)=0;
	virtual int onSprayFixedError(IClientSprayFixedResponse *resp,IInterface* state)=0;
	virtual int onSprayVariableComplete(IClientSprayResponse *resp,IInterface* state)=0;
	virtual int onSprayVariableError(IClientSprayResponse *resp,IInterface* state)=0;
	virtual int onSubmitDFUWorkunitComplete(IClientSubmitDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onSubmitDFUWorkunitError(IClientSubmitDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onUpdateDFUWorkunitComplete(IClientUpdateDFUWorkunitResponse *resp,IInterface* state)=0;
	virtual int onUpdateDFUWorkunitError(IClientUpdateDFUWorkunitResponse *resp,IInterface* state)=0;
};

interface IClientFileSpray : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientAbortDFUWorkunit * createAbortDFUWorkunitRequest()=0;
	virtual IClientAbortDFUWorkunitResponse * AbortDFUWorkunit(IClientAbortDFUWorkunit *request)=0;
	virtual void async_AbortDFUWorkunit(IClientAbortDFUWorkunit *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientCopy * createCopyRequest()=0;
	virtual IClientCopyResponse * Copy(IClientCopy *request)=0;
	virtual void async_Copy(IClientCopy *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientCreateDFUWorkunit * createCreateDFUWorkunitRequest()=0;
	virtual IClientCreateDFUWorkunitResponse * CreateDFUWorkunit(IClientCreateDFUWorkunit *request)=0;
	virtual void async_CreateDFUWorkunit(IClientCreateDFUWorkunit *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDFUWUFileRequest * createDFUWUFileRequest()=0;
	virtual IClientDFUWUFileResponse * DFUWUFile(IClientDFUWUFileRequest *request)=0;
	virtual void async_DFUWUFile(IClientDFUWUFileRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDFUWUSearchRequest * createDFUWUSearchRequest()=0;
	virtual IClientDFUWUSearchResponse * DFUWUSearch(IClientDFUWUSearchRequest *request)=0;
	virtual void async_DFUWUSearch(IClientDFUWUSearchRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDFUWorkunitsActionRequest * createDFUWorkunitsActionRequest()=0;
	virtual IClientDFUWorkunitsActionResponse * DFUWorkunitsAction(IClientDFUWorkunitsActionRequest *request)=0;
	virtual void async_DFUWorkunitsAction(IClientDFUWorkunitsActionRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDeleteDFUWorkunit * createDeleteDFUWorkunitRequest()=0;
	virtual IClientDeleteDFUWorkunitResponse * DeleteDFUWorkunit(IClientDeleteDFUWorkunit *request)=0;
	virtual void async_DeleteDFUWorkunit(IClientDeleteDFUWorkunit *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDeleteDFUWorkunits * createDeleteDFUWorkunitsRequest()=0;
	virtual IClientDeleteDFUWorkunitsResponse * DeleteDFUWorkunits(IClientDeleteDFUWorkunits *request)=0;
	virtual void async_DeleteDFUWorkunits(IClientDeleteDFUWorkunits *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDeleteDropZoneFilesRequest * createDeleteDropZoneFilesRequest()=0;
	virtual IClientDFUWorkunitsActionResponse * DeleteDropZoneFiles(IClientDeleteDropZoneFilesRequest *request)=0;
	virtual void async_DeleteDropZoneFiles(IClientDeleteDropZoneFilesRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDespray * createDesprayRequest()=0;
	virtual IClientDesprayResponse * Despray(IClientDespray *request)=0;
	virtual void async_Despray(IClientDespray *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDfuMonitorRequest * createDfuMonitorRequest()=0;
	virtual IClientDfuMonitorResponse * DfuMonitor(IClientDfuMonitorRequest *request)=0;
	virtual void async_DfuMonitor(IClientDfuMonitorRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDropZoneFileSearchRequest * createDropZoneFileSearchRequest()=0;
	virtual IClientDropZoneFileSearchResponse * DropZoneFileSearch(IClientDropZoneFileSearchRequest *request)=0;
	virtual void async_DropZoneFileSearch(IClientDropZoneFileSearchRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientDropZoneFilesRequest * createDropZoneFilesRequest()=0;
	virtual IClientDropZoneFilesResponse * DropZoneFiles(IClientDropZoneFilesRequest *request)=0;
	virtual void async_DropZoneFiles(IClientDropZoneFilesRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientEchoDateTime * createEchoDateTimeRequest()=0;
	virtual IClientEchoDateTimeResponse * EchoDateTime(IClientEchoDateTime *request)=0;
	virtual void async_EchoDateTime(IClientEchoDateTime *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientFileListRequest * createFileListRequest()=0;
	virtual IClientFileListResponse * FileList(IClientFileListRequest *request)=0;
	virtual void async_FileList(IClientFileListRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientGetDFUExceptions * createGetDFUExceptionsRequest()=0;
	virtual IClientGetDFUExceptionsResponse * GetDFUExceptions(IClientGetDFUExceptions *request)=0;
	virtual void async_GetDFUExceptions(IClientGetDFUExceptions *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientProgressRequest * createGetDFUProgressRequest()=0;
	virtual IClientProgressResponse * GetDFUProgress(IClientProgressRequest *request)=0;
	virtual void async_GetDFUProgress(IClientProgressRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientGetDFUServerQueuesRequest * createGetDFUServerQueuesRequest()=0;
	virtual IClientGetDFUServerQueuesResponse * GetDFUServerQueues(IClientGetDFUServerQueuesRequest *request)=0;
	virtual void async_GetDFUServerQueues(IClientGetDFUServerQueuesRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientGetDFUWorkunit * createGetDFUWorkunitRequest()=0;
	virtual IClientGetDFUWorkunitResponse * GetDFUWorkunit(IClientGetDFUWorkunit *request)=0;
	virtual void async_GetDFUWorkunit(IClientGetDFUWorkunit *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientGetDFUWorkunits * createGetDFUWorkunitsRequest()=0;
	virtual IClientGetDFUWorkunitsResponse * GetDFUWorkunits(IClientGetDFUWorkunits *request)=0;
	virtual void async_GetDFUWorkunits(IClientGetDFUWorkunits *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientGetSprayTargetsRequest * createGetSprayTargetsRequest()=0;
	virtual IClientGetSprayTargetsResponse * GetSprayTargets(IClientGetSprayTargetsRequest *request)=0;
	virtual void async_GetSprayTargets(IClientGetSprayTargetsRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientOpenSaveRequest * createOpenSaveRequest()=0;
	virtual IClientOpenSaveResponse * OpenSave(IClientOpenSaveRequest *request)=0;
	virtual void async_OpenSave(IClientOpenSaveRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientFileSprayPingRequest * createPingRequest()=0;
	virtual IClientFileSprayPingResponse * Ping(IClientFileSprayPingRequest *request)=0;
	virtual void async_Ping(IClientFileSprayPingRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientRename * createRenameRequest()=0;
	virtual IClientRenameResponse * Rename(IClientRename *request)=0;
	virtual void async_Rename(IClientRename *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientReplicate * createReplicateRequest()=0;
	virtual IClientReplicateResponse * Replicate(IClientReplicate *request)=0;
	virtual void async_Replicate(IClientReplicate *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientShowResultRequest * createShowResultRequest()=0;
	virtual IClientShowResultResponse * ShowResult(IClientShowResultRequest *request)=0;
	virtual void async_ShowResult(IClientShowResultRequest *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientSprayFixed * createSprayFixedRequest()=0;
	virtual IClientSprayFixedResponse * SprayFixed(IClientSprayFixed *request)=0;
	virtual void async_SprayFixed(IClientSprayFixed *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientSprayVariable * createSprayVariableRequest()=0;
	virtual IClientSprayResponse * SprayVariable(IClientSprayVariable *request)=0;
	virtual void async_SprayVariable(IClientSprayVariable *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientSubmitDFUWorkunit * createSubmitDFUWorkunitRequest()=0;
	virtual IClientSubmitDFUWorkunitResponse * SubmitDFUWorkunit(IClientSubmitDFUWorkunit *request)=0;
	virtual void async_SubmitDFUWorkunit(IClientSubmitDFUWorkunit *request, IClientFileSprayEvents *events,IInterface* state=0)=0;

	virtual IClientUpdateDFUWorkunit * createUpdateDFUWorkunitRequest()=0;
	virtual IClientUpdateDFUWorkunitResponse * UpdateDFUWorkunit(IClientUpdateDFUWorkunit *request)=0;
	virtual void async_UpdateDFUWorkunit(IClientUpdateDFUWorkunit *request, IClientFileSprayEvents *events,IInterface* state=0)=0;


	virtual IClientAbortDFUWorkunitResponse *AbortDFUWorkunitFn(const char * wuid_)=0;

	virtual IClientCopyResponse *CopyFn(const char * sourceLogicalName_, const char * destGroup_, const char * destGroupRoxie_, const char * destLogicalName_, const char * sourceDali_, const char * srcusername_, const char * srcpassword_, bool overwrite_, bool replicate_, int ReplicateOffset_, int maxConnections_, int throttle_, int transferBufferSize_, bool nosplit_, bool norecover_, bool compress_, bool Wrap_, bool Multicopy_, const char * SourceDiffKeyName_, const char * DestDiffKeyName_, bool superCopy_, bool push_, bool pull_, bool ifnewer_, const char * encrypt_, const char * decrypt_, bool preserveCompression_, const char * DFUServerQueue_, int ExpireDays_)=0;

	virtual IClientCreateDFUWorkunitResponse *CreateDFUWorkunitFn(const char * DFUServerQueue_)=0;

	virtual IClientDFUWUFileResponse *DFUWUFileFn(const char * Wuid_, const char * Type_, const char * PlainText_)=0;

	virtual IClientDFUWUSearchResponse *DFUWUSearchFn()=0;

	virtual IClientDFUWorkunitsActionResponse *DFUWorkunitsActionFn(StringArray &wuids_, CDFUWUActions Type_)=0;

	virtual IClientDeleteDFUWorkunitResponse *DeleteDFUWorkunitFn(const char * wuid_)=0;

	virtual IClientDeleteDFUWorkunitsResponse *DeleteDFUWorkunitsFn(StringArray &wuids_)=0;

	virtual IClientDFUWorkunitsActionResponse *DeleteDropZoneFilesFn(const char * DropZoneName_, const char * NetAddress_, const char * Path_, const char * OS_, StringArray &Names_)=0;

	virtual IClientDesprayResponse *DesprayFn(const char * sourceLogicalName_, const char * destIP_, const char * destPath_, const MemoryBuffer & dstxml_, bool overwrite_, int maxConnections_, int throttle_, int transferBufferSize_, const char * splitprefix_, bool norecover_, bool wrap_, bool multiCopy_, bool SingleConnection_, const char * DFUServerQueue_, bool compress_, const char * encrypt_, const char * decrypt_)=0;

	virtual IClientDfuMonitorResponse *DfuMonitorFn(const char * EventName_, const char * LogicalName_, const char * Ip_, const char * Filename_, bool Sub_, int ShotLimit_)=0;

	virtual IClientDropZoneFileSearchResponse *DropZoneFileSearchFn(const char * DropZoneName_, const char * Server_, bool ECLWatchVisibleOnly_, const char * NameFilter_)=0;

	virtual IClientDropZoneFilesResponse *DropZoneFilesFn(const char * DropZoneName_, const char * NetAddress_, const char * Path_, const char * OS_, const char * Subfolder_, bool ECLWatchVisibleOnly_, bool DirectoryOnly_)=0;

	virtual IClientEchoDateTimeResponse *EchoDateTimeFn(const char * dt_)=0;

	virtual IClientFileListResponse *FileListFn(const char * Netaddr_, const char * Path_, const char * Mask_, const char * OS_, bool DirectoryOnly_)=0;

	virtual IClientGetDFUExceptionsResponse *GetDFUExceptionsFn(const char * wuid_)=0;

	virtual IClientProgressResponse *GetDFUProgressFn(const char * wuid_)=0;

	virtual IClientGetDFUServerQueuesResponse *GetDFUServerQueuesFn(const char * DFUServerName_)=0;

	virtual IClientGetDFUWorkunitResponse *GetDFUWorkunitFn(const char * wuid_)=0;

	virtual IClientGetDFUWorkunitsResponse *GetDFUWorkunitsFn(const char * Wuid_, const char * Owner_, const char * Cluster_, const char * StateReq_, const char * Type_, const char * Jobname_, __int64 PageSize_, int CurrentPage_, __int64 PageStartFrom_, const char * Sortby_, bool Descending_, __int64 CacheHint_)=0;

	virtual IClientGetSprayTargetsResponse *GetSprayTargetsFn()=0;

	virtual IClientOpenSaveResponse *OpenSaveFn(const char * Location_, const char * Path_, const char * Name_, const char * Type_, const char * DateTime_, bool BinaryFile_)=0;

	virtual IClientFileSprayPingResponse *PingFn()=0;

	virtual IClientRenameResponse *RenameFn(const char * srcname_, const char * dstname_, bool overwrite_, const char * DFUServerQueue_)=0;

	virtual IClientReplicateResponse *ReplicateFn(const char * sourceLogicalName_, int replicateOffset_, const char * cluster_, bool repeatLast_, bool onlyRepeated_, const char * DFUServerQueue_)=0;

	virtual IClientShowResultResponse *ShowResultFn(const char * Result_)=0;

	virtual IClientSprayFixedResponse *SprayFixedFn(const char * sourceIP_, const char * sourcePath_, const MemoryBuffer & srcxml_, const char * sourceFormat_, int sourceRecordSize_, const char * destGroup_, const char * destLogicalName_, bool overwrite_, bool replicate_, int ReplicateOffset_, int maxConnections_, int throttle_, int transferBufferSize_, const char * prefix_, bool nosplit_, bool norecover_, bool compress_, bool push_, bool pull_, const char * encrypt_, const char * decrypt_, bool wrap_, bool failIfNoSourceFile_, bool recordStructurePresent_, bool quotedTerminator_, int expireDays_, const char * DFUServerQueue_)=0;

	virtual IClientSprayResponse *SprayVariableFn(const char * sourceIP_, const char * sourcePath_, const MemoryBuffer & srcxml_, int sourceMaxRecordSize_, int sourceFormat_, bool NoSourceCsvSeparator_, const char * sourceCsvSeparate_, const char * sourceCsvTerminate_, const char * sourceCsvQuote_, const char * sourceCsvEscape_, const char * sourceRowTag_, const char * destGroup_, const char * destLogicalName_, bool overwrite_, bool replicate_, int ReplicateOffset_, int maxConnections_, int throttle_, int transferBufferSize_, const char * prefix_, bool nosplit_, bool norecover_, bool compress_, bool push_, bool pull_, const char * encrypt_, const char * decrypt_, bool failIfNoSourceFile_, bool recordStructurePresent_, bool quotedTerminator_, const char * sourceRowPath_, bool isJSON_, int expireDays_, const char * DFUServerQueue_)=0;

	virtual IClientSubmitDFUWorkunitResponse *SubmitDFUWorkunitFn(const char * wuid_)=0;

	virtual IClientUpdateDFUWorkunitResponse *UpdateDFUWorkunitFn(IConstDFUWorkunit &wu_, const char * ClusterOrig_, const char * JobNameOrig_, bool isProtectedOrig_, int StateOrig_)=0;
};



#ifndef FileSpray_API
#define FileSpray_API
#endif //FileSpray_API



extern "C" FileSpray_API IClientFileSpray * createFileSprayClient();



extern "C"  IEspDFUWorkunit *createDFUWorkunit(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDFUWorkunit *createClientDFUWorkunit(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGroupNode *createGroupNode(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientGroupNode *createClientGroupNode(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDFUException *createDFUException(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDFUException *createClientDFUException(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDFUActionResult *createDFUActionResult(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDFUActionResult *createClientDFUActionResult(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDFUWUSearchRequest *createDFUWUSearchRequest(const char *serv=NULL);
extern "C"  IClientDFUWUSearchRequest *createClientDFUWUSearchRequest(const char *serv=NULL);
extern "C"  IEspDFUWUSearchResponse *createDFUWUSearchResponse(const char *serv=NULL);
extern "C"  IClientDFUWUSearchResponse *createClientDFUWUSearchResponse(const char *serv=NULL);
extern "C"  IEspGetDFUWorkunits *createGetDFUWorkunits(const char *serv=NULL);
extern "C"  IClientGetDFUWorkunits *createClientGetDFUWorkunits(const char *serv=NULL);
extern "C"  IEspGetDFUWorkunitsResponse *createGetDFUWorkunitsResponse(const char *serv=NULL);
extern "C"  IClientGetDFUWorkunitsResponse *createClientGetDFUWorkunitsResponse(const char *serv=NULL);
extern "C"  IEspProgressRequest *createProgressRequest(const char *serv=NULL);
extern "C"  IClientProgressRequest *createClientProgressRequest(const char *serv=NULL);
extern "C"  IEspProgressResponse *createProgressResponse(const char *serv=NULL);
extern "C"  IClientProgressResponse *createClientProgressResponse(const char *serv=NULL);
extern "C"  IEspGetDFUWorkunit *createGetDFUWorkunit(const char *serv=NULL);
extern "C"  IClientGetDFUWorkunit *createClientGetDFUWorkunit(const char *serv=NULL);
extern "C"  IEspGetDFUWorkunitResponse *createGetDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IClientGetDFUWorkunitResponse *createClientGetDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IEspCreateDFUWorkunit *createCreateDFUWorkunit(const char *serv=NULL);
extern "C"  IClientCreateDFUWorkunit *createClientCreateDFUWorkunit(const char *serv=NULL);
extern "C"  IEspCreateDFUWorkunitResponse *createCreateDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IClientCreateDFUWorkunitResponse *createClientCreateDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IEspUpdateDFUWorkunit *createUpdateDFUWorkunit(const char *serv=NULL);
extern "C"  IClientUpdateDFUWorkunit *createClientUpdateDFUWorkunit(const char *serv=NULL);
extern "C"  IEspUpdateDFUWorkunitResponse *createUpdateDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IClientUpdateDFUWorkunitResponse *createClientUpdateDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IEspDeleteDFUWorkunit *createDeleteDFUWorkunit(const char *serv=NULL);
extern "C"  IClientDeleteDFUWorkunit *createClientDeleteDFUWorkunit(const char *serv=NULL);
extern "C"  IEspDeleteDFUWorkunitResponse *createDeleteDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IClientDeleteDFUWorkunitResponse *createClientDeleteDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IEspDeleteDFUWorkunits *createDeleteDFUWorkunits(const char *serv=NULL);
extern "C"  IClientDeleteDFUWorkunits *createClientDeleteDFUWorkunits(const char *serv=NULL);
extern "C"  IEspDeleteDFUWorkunitsResponse *createDeleteDFUWorkunitsResponse(const char *serv=NULL);
extern "C"  IClientDeleteDFUWorkunitsResponse *createClientDeleteDFUWorkunitsResponse(const char *serv=NULL);
extern "C"  IEspDFUWorkunitsActionRequest *createDFUWorkunitsActionRequest(const char *serv=NULL);
extern "C"  IClientDFUWorkunitsActionRequest *createClientDFUWorkunitsActionRequest(const char *serv=NULL);
extern "C"  IEspDFUWorkunitsActionResponse *createDFUWorkunitsActionResponse(const char *serv=NULL);
extern "C"  IClientDFUWorkunitsActionResponse *createClientDFUWorkunitsActionResponse(const char *serv=NULL);
extern "C"  IEspSubmitDFUWorkunit *createSubmitDFUWorkunit(const char *serv=NULL);
extern "C"  IClientSubmitDFUWorkunit *createClientSubmitDFUWorkunit(const char *serv=NULL);
extern "C"  IEspSubmitDFUWorkunitResponse *createSubmitDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IClientSubmitDFUWorkunitResponse *createClientSubmitDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IEspAbortDFUWorkunit *createAbortDFUWorkunit(const char *serv=NULL);
extern "C"  IClientAbortDFUWorkunit *createClientAbortDFUWorkunit(const char *serv=NULL);
extern "C"  IEspAbortDFUWorkunitResponse *createAbortDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IClientAbortDFUWorkunitResponse *createClientAbortDFUWorkunitResponse(const char *serv=NULL);
extern "C"  IEspGetDFUExceptions *createGetDFUExceptions(const char *serv=NULL);
extern "C"  IClientGetDFUExceptions *createClientGetDFUExceptions(const char *serv=NULL);
extern "C"  IEspGetDFUExceptionsResponse *createGetDFUExceptionsResponse(const char *serv=NULL);
extern "C"  IClientGetDFUExceptionsResponse *createClientGetDFUExceptionsResponse(const char *serv=NULL);
extern "C"  IEspSprayFixed *createSprayFixed(const char *serv=NULL);
extern "C"  IClientSprayFixed *createClientSprayFixed(const char *serv=NULL);
extern "C"  IEspSprayFixedResponse *createSprayFixedResponse(const char *serv=NULL);
extern "C"  IClientSprayFixedResponse *createClientSprayFixedResponse(const char *serv=NULL);
extern "C"  IEspSprayVariable *createSprayVariable(const char *serv=NULL);
extern "C"  IClientSprayVariable *createClientSprayVariable(const char *serv=NULL);
extern "C"  IEspSprayResponse *createSprayResponse(const char *serv=NULL);
extern "C"  IClientSprayResponse *createClientSprayResponse(const char *serv=NULL);
extern "C"  IEspReplicate *createReplicate(const char *serv=NULL);
extern "C"  IClientReplicate *createClientReplicate(const char *serv=NULL);
extern "C"  IEspReplicateResponse *createReplicateResponse(const char *serv=NULL);
extern "C"  IClientReplicateResponse *createClientReplicateResponse(const char *serv=NULL);
extern "C"  IEspDespray *createDespray(const char *serv=NULL);
extern "C"  IClientDespray *createClientDespray(const char *serv=NULL);
extern "C"  IEspDesprayResponse *createDesprayResponse(const char *serv=NULL);
extern "C"  IClientDesprayResponse *createClientDesprayResponse(const char *serv=NULL);
extern "C"  IEspCopy *createCopy(const char *serv=NULL);
extern "C"  IClientCopy *createClientCopy(const char *serv=NULL);
extern "C"  IEspCopyResponse *createCopyResponse(const char *serv=NULL);
extern "C"  IClientCopyResponse *createClientCopyResponse(const char *serv=NULL);
extern "C"  IEspEchoDateTime *createEchoDateTime(const char *serv=NULL);
extern "C"  IClientEchoDateTime *createClientEchoDateTime(const char *serv=NULL);
extern "C"  IEspEchoDateTimeResponse *createEchoDateTimeResponse(const char *serv=NULL);
extern "C"  IClientEchoDateTimeResponse *createClientEchoDateTimeResponse(const char *serv=NULL);
extern "C"  IEspRename *createRename(const char *serv=NULL);
extern "C"  IClientRename *createClientRename(const char *serv=NULL);
extern "C"  IEspRenameResponse *createRenameResponse(const char *serv=NULL);
extern "C"  IClientRenameResponse *createClientRenameResponse(const char *serv=NULL);
extern "C"  IEspDFUWUFileRequest *createDFUWUFileRequest(const char *serv=NULL);
extern "C"  IClientDFUWUFileRequest *createClientDFUWUFileRequest(const char *serv=NULL);
extern "C"  IEspDFUWUFileResponse *createDFUWUFileResponse(const char *serv=NULL);
extern "C"  IClientDFUWUFileResponse *createClientDFUWUFileResponse(const char *serv=NULL);
extern "C"  IEspFileListRequest *createFileListRequest(const char *serv=NULL);
extern "C"  IClientFileListRequest *createClientFileListRequest(const char *serv=NULL);
extern "C"  IEspPhysicalFileStruct *createPhysicalFileStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientPhysicalFileStruct *createClientPhysicalFileStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspFileListResponse *createFileListResponse(const char *serv=NULL);
extern "C"  IClientFileListResponse *createClientFileListResponse(const char *serv=NULL);
extern "C"  IEspDropZoneFileSearchRequest *createDropZoneFileSearchRequest(const char *serv=NULL);
extern "C"  IClientDropZoneFileSearchRequest *createClientDropZoneFileSearchRequest(const char *serv=NULL);
extern "C"  IEspDropZoneFileSearchResponse *createDropZoneFileSearchResponse(const char *serv=NULL);
extern "C"  IClientDropZoneFileSearchResponse *createClientDropZoneFileSearchResponse(const char *serv=NULL);
extern "C"  IEspOpenSaveRequest *createOpenSaveRequest(const char *serv=NULL);
extern "C"  IClientOpenSaveRequest *createClientOpenSaveRequest(const char *serv=NULL);
extern "C"  IEspOpenSaveResponse *createOpenSaveResponse(const char *serv=NULL);
extern "C"  IClientOpenSaveResponse *createClientOpenSaveResponse(const char *serv=NULL);
extern "C"  IEspDfuMonitorRequest *createDfuMonitorRequest(const char *serv=NULL);
extern "C"  IClientDfuMonitorRequest *createClientDfuMonitorRequest(const char *serv=NULL);
extern "C"  IEspDfuMonitorResponse *createDfuMonitorResponse(const char *serv=NULL);
extern "C"  IClientDfuMonitorResponse *createClientDfuMonitorResponse(const char *serv=NULL);
extern "C"  IEspShowResultRequest *createShowResultRequest(const char *serv=NULL);
extern "C"  IClientShowResultRequest *createClientShowResultRequest(const char *serv=NULL);
extern "C"  IEspShowResultResponse *createShowResultResponse(const char *serv=NULL);
extern "C"  IClientShowResultResponse *createClientShowResultResponse(const char *serv=NULL);
extern "C"  IEspDropZone *createDropZone(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDropZone *createClientDropZone(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDropZoneFilesRequest *createDropZoneFilesRequest(const char *serv=NULL);
extern "C"  IClientDropZoneFilesRequest *createClientDropZoneFilesRequest(const char *serv=NULL);
extern "C"  IEspDropZoneFilesResponse *createDropZoneFilesResponse(const char *serv=NULL);
extern "C"  IClientDropZoneFilesResponse *createClientDropZoneFilesResponse(const char *serv=NULL);
extern "C"  IEspDeleteDropZoneFilesRequest *createDeleteDropZoneFilesRequest(const char *serv=NULL);
extern "C"  IClientDeleteDropZoneFilesRequest *createClientDeleteDropZoneFilesRequest(const char *serv=NULL);
extern "C"  IEspDeleteDropZoneFilesResponse *createDeleteDropZoneFilesResponse(const char *serv=NULL);
extern "C"  IClientDeleteDropZoneFilesResponse *createClientDeleteDropZoneFilesResponse(const char *serv=NULL);
extern "C"  IEspUploadFilesResponse *createUploadFilesResponse(const char *serv=NULL);
extern "C"  IClientUploadFilesResponse *createClientUploadFilesResponse(const char *serv=NULL);
extern "C"  IEspGetSprayTargetsRequest *createGetSprayTargetsRequest(const char *serv=NULL);
extern "C"  IClientGetSprayTargetsRequest *createClientGetSprayTargetsRequest(const char *serv=NULL);
extern "C"  IEspGetSprayTargetsResponse *createGetSprayTargetsResponse(const char *serv=NULL);
extern "C"  IClientGetSprayTargetsResponse *createClientGetSprayTargetsResponse(const char *serv=NULL);
extern "C"  IEspGetDFUServerQueuesRequest *createGetDFUServerQueuesRequest(const char *serv=NULL);
extern "C"  IClientGetDFUServerQueuesRequest *createClientGetDFUServerQueuesRequest(const char *serv=NULL);
extern "C"  IEspGetDFUServerQueuesResponse *createGetDFUServerQueuesResponse(const char *serv=NULL);
extern "C"  IClientGetDFUServerQueuesResponse *createClientGetDFUServerQueuesResponse(const char *serv=NULL);
extern "C"  IEspFileSprayPingRequest *createFileSprayPingRequest(const char *serv=NULL);
extern "C"  IClientFileSprayPingRequest *createClientFileSprayPingRequest(const char *serv=NULL);
extern "C"  IEspFileSprayPingResponse *createFileSprayPingResponse(const char *serv=NULL);
extern "C"  IClientFileSprayPingResponse *createClientFileSprayPingResponse(const char *serv=NULL);

#endif // _ws_fs_SCM_INCL
//end
