// *** Include file generated by HIDL Version 1.3 from WsDeploy.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef WsDeploy_SCM_INCL
#define WsDeploy_SCM_INCL

#include "esp.hpp"



interface IConstTask : extends IEspStruct
{
	virtual const char * getCaption()=0;
	virtual const char * getFileName()=0;
	virtual const char * getTargetPath()=0;
	virtual const char * getSourcePath()=0;
	virtual int getStatus()=0;
	virtual const char * getMessage()=0;
};

interface IEspTask : extends IConstTask
{
	virtual void setCaption(const char * val)=0;
	virtual void setFileName(const char * val)=0;
	virtual void setTargetPath(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setStatus(int val)=0;
	virtual void setMessage(const char * val)=0;
	virtual void copy(IConstTask &from)=0;
};

interface IClientTask : extends IInterface
{
	virtual void setCaption(const char * val)=0;
	virtual void setFileName(const char * val)=0;
	virtual void setTargetPath(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setStatus(int val)=0;
	virtual void setMessage(const char * val)=0;
	virtual const char * getCaption()=0;
	virtual const char * getFileName()=0;
	virtual const char * getTargetPath()=0;
	virtual const char * getSourcePath()=0;
	virtual int getStatus()=0;
	virtual const char * getMessage()=0;
};



interface IConstComponent : extends IEspStruct
{
	virtual const char * getType()=0;
	virtual const char * getDisplayType()=0;
	virtual const char * getName()=0;
	virtual const char * getBuild()=0;
	virtual const char * getComputer()=0;
	virtual const char * getInstance()=0;
	virtual const char * getInstanceType()=0;
	virtual IArrayOf<IConstTask> & getTasks()=0;
};

interface IEspComponent : extends IConstComponent
{
	virtual void setType(const char * val)=0;
	virtual void setDisplayType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setComputer(const char * val)=0;
	virtual void setInstance(const char * val)=0;
	virtual void setInstanceType(const char * val)=0;
	virtual void setTasks(IArrayOf<IEspTask> &val)=0;
	virtual void setTasks(IArrayOf<IConstTask> &val)=0;
	virtual void copy(IConstComponent &from)=0;
};

interface IClientComponent : extends IInterface
{
	virtual void setType(const char * val)=0;
	virtual void setDisplayType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setComputer(const char * val)=0;
	virtual void setInstance(const char * val)=0;
	virtual void setInstanceType(const char * val)=0;
	virtual void setTasks(IArrayOf<IEspTask> &val)=0;
	virtual void setTasks(IArrayOf<IConstTask> &val)=0;
	virtual const char * getType()=0;
	virtual const char * getDisplayType()=0;
	virtual const char * getName()=0;
	virtual const char * getBuild()=0;
	virtual const char * getComputer()=0;
	virtual const char * getInstance()=0;
	virtual const char * getInstanceType()=0;
	virtual IArrayOf<IConstTask> & getTasks()=0;
};



interface IConstDeployOptions : extends IEspStruct
{
	virtual bool getCompare()=0;
	virtual bool getConfigFiles()=0;
	virtual bool getBuildFiles()=0;
	virtual bool getUpgradeBuildFiles()=0;
	virtual bool getStart()=0;
	virtual bool getStop()=0;
	virtual bool getBackupRename()=0;
	virtual bool getBackupCopy()=0;
	virtual bool getArchiveEnv()=0;
	virtual bool getLog()=0;
	virtual const char * getArchivePath()=0;
};

interface IEspDeployOptions : extends IConstDeployOptions
{
	virtual void setCompare(bool val)=0;
	virtual void setConfigFiles(bool val)=0;
	virtual void setBuildFiles(bool val)=0;
	virtual void setUpgradeBuildFiles(bool val)=0;
	virtual void setStart(bool val)=0;
	virtual void setStop(bool val)=0;
	virtual void setBackupRename(bool val)=0;
	virtual void setBackupCopy(bool val)=0;
	virtual void setArchiveEnv(bool val)=0;
	virtual void setLog(bool val)=0;
	virtual void setArchivePath(const char * val)=0;
	virtual void copy(IConstDeployOptions &from)=0;
};

interface IClientDeployOptions : extends IInterface
{
	virtual void setCompare(bool val)=0;
	virtual void setConfigFiles(bool val)=0;
	virtual void setBuildFiles(bool val)=0;
	virtual void setUpgradeBuildFiles(bool val)=0;
	virtual void setStart(bool val)=0;
	virtual void setStop(bool val)=0;
	virtual void setBackupRename(bool val)=0;
	virtual void setBackupCopy(bool val)=0;
	virtual void setArchiveEnv(bool val)=0;
	virtual void setLog(bool val)=0;
	virtual void setArchivePath(const char * val)=0;
	virtual bool getCompare()=0;
	virtual bool getConfigFiles()=0;
	virtual bool getBuildFiles()=0;
	virtual bool getUpgradeBuildFiles()=0;
	virtual bool getStart()=0;
	virtual bool getStop()=0;
	virtual bool getBackupRename()=0;
	virtual bool getBackupCopy()=0;
	virtual bool getArchiveEnv()=0;
	virtual bool getLog()=0;
	virtual const char * getArchivePath()=0;
};



interface IConstWsDeployReqInfo : extends IEspStruct
{
	virtual const char * getFileName()=0;
	virtual const char * getUserId()=0;
};

interface IEspWsDeployReqInfo : extends IConstWsDeployReqInfo
{
	virtual void setFileName(const char * val)=0;
	virtual void setUserId(const char * val)=0;
	virtual void copy(IConstWsDeployReqInfo &from)=0;
};

interface IClientWsDeployReqInfo : extends IInterface
{
	virtual void setFileName(const char * val)=0;
	virtual void setUserId(const char * val)=0;
	virtual const char * getFileName()=0;
	virtual const char * getUserId()=0;
};



interface IConstDeployInfo : extends IEspStruct
{
	virtual IArrayOf<IConstComponent> & getComponents()=0;
	virtual IConstDeployOptions & getOptions()=0;
	virtual const char * getStatus()=0;
};

interface IEspDeployInfo : extends IConstDeployInfo
{
	virtual void setComponents(IArrayOf<IEspComponent> &val)=0;
	virtual void setComponents(IArrayOf<IConstComponent> &val)=0;
	virtual IEspDeployOptions & updateOptions()=0;
	virtual void setOptions(IConstDeployOptions &ifrom)=0;
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstDeployInfo &from)=0;
};

interface IClientDeployInfo : extends IInterface
{
	virtual void setComponents(IArrayOf<IEspComponent> &val)=0;
	virtual void setComponents(IArrayOf<IConstComponent> &val)=0;
	virtual IEspDeployOptions & updateOptions()=0;
	virtual void setOptions(IConstDeployOptions &ifrom)=0;
	virtual void setStatus(const char * val)=0;
	virtual IArrayOf<IConstComponent> & getComponents()=0;
	virtual IConstDeployOptions & getOptions()=0;
	virtual const char * getStatus()=0;
};



interface IConstDaliInfo : extends IEspStruct
{
	virtual const char * getDaliIp()=0;
	virtual const char * getDaliName()=0;
};

interface IEspDaliInfo : extends IConstDaliInfo
{
	virtual void setDaliIp(const char * val)=0;
	virtual void setDaliName(const char * val)=0;
	virtual void copy(IConstDaliInfo &from)=0;
};

interface IClientDaliInfo : extends IInterface
{
	virtual void setDaliIp(const char * val)=0;
	virtual void setDaliName(const char * val)=0;
	virtual const char * getDaliIp()=0;
	virtual const char * getDaliName()=0;
};



interface IConstEmptyRequest : extends IEspRequest
{
};

interface IEspEmptyRequest : extends IConstEmptyRequest
{
	virtual void copy(IConstEmptyRequest &from)=0;
};

interface IClientEmptyRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstInitResponse : extends IEspResponse
{
	virtual const char * getComponent()=0;
	virtual const char * getCommand()=0;
};

interface IEspInitResponse : extends IConstInitResponse
{
	virtual void setComponent(const char * val)=0;
	virtual void setCommand(const char * val)=0;
	virtual void copy(IConstInitResponse &from)=0;
};

interface IClientInitResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComponent()=0;
	virtual const char * getCommand()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstDeployRequest : extends IEspRequest
{
	virtual IConstDeployInfo & getDeploy()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspDeployRequest : extends IConstDeployRequest
{
	virtual IEspDeployInfo & updateDeploy()=0;
	virtual void setDeploy(IConstDeployInfo &ifrom)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstDeployRequest &from)=0;
};

interface IClientDeployRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual IEspDeployInfo & updateDeploy()=0;
	virtual void setDeploy(IConstDeployInfo &ifrom)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstDeployResponse : extends IEspResponse
{
	virtual const char * getComponent()=0;
	virtual const char * getCommand()=0;
	virtual const char * getDeploy()=0;
	virtual const char * getStatus()=0;
};

interface IEspDeployResponse : extends IConstDeployResponse
{
	virtual void setComponent(const char * val)=0;
	virtual void setCommand(const char * val)=0;
	virtual void setDeploy(const char * val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstDeployResponse &from)=0;
};

interface IClientDeployResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComponent()=0;
	virtual const char * getCommand()=0;
	virtual const char * getDeploy()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGraphResponse : extends IEspResponse
{
	virtual const char * getGraphContainer()=0;
};

interface IEspGraphResponse : extends IConstGraphResponse
{
	virtual void setGraphContainer(const char * val)=0;
	virtual void copy(IConstGraphResponse &from)=0;
};

interface IClientGraphResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getGraphContainer()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstNavMenuEventRequest : extends IEspRequest
{
	virtual const char * getCmd()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspNavMenuEventRequest : extends IConstNavMenuEventRequest
{
	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstNavMenuEventRequest &from)=0;
};

interface IClientNavMenuEventRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstNavMenuEventResponse : extends IEspResponse
{
	virtual const char * getComponent()=0;
	virtual const char * getCommand()=0;
	virtual const char * getXmlArgs()=0;
	virtual const char * getLastSaved()=0;
};

interface IEspNavMenuEventResponse : extends IConstNavMenuEventResponse
{
	virtual void setComponent(const char * val)=0;
	virtual void setCommand(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual void setLastSaved(const char * val)=0;
	virtual void copy(IConstNavMenuEventResponse &from)=0;
};

interface IClientNavMenuEventResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComponent()=0;
	virtual const char * getCommand()=0;
	virtual const char * getXmlArgs()=0;
	virtual const char * getLastSaved()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDisplaySettingsRequest : extends IEspRequest
{
	virtual const char * getCmd()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspDisplaySettingsRequest : extends IConstDisplaySettingsRequest
{
	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstDisplaySettingsRequest &from)=0;
};

interface IClientDisplaySettingsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstDisplaySettingsResponse : extends IEspResponse
{
	virtual const char * getComponent()=0;
	virtual const char * getCompDefn()=0;
	virtual const char * getViewChildNodes()=0;
	virtual const char * getMultiRowNodes()=0;
	virtual const char * getXmlArgs()=0;
};

interface IEspDisplaySettingsResponse : extends IConstDisplaySettingsResponse
{
	virtual void setComponent(const char * val)=0;
	virtual void setCompDefn(const char * val)=0;
	virtual void setViewChildNodes(const char * val)=0;
	virtual void setMultiRowNodes(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual void copy(IConstDisplaySettingsResponse &from)=0;
};

interface IClientDisplaySettingsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComponent()=0;
	virtual const char * getCompDefn()=0;
	virtual const char * getViewChildNodes()=0;
	virtual const char * getMultiRowNodes()=0;
	virtual const char * getXmlArgs()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSaveSettingRequest : extends IEspRequest
{
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspSaveSettingRequest : extends IConstSaveSettingRequest
{
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstSaveSettingRequest &from)=0;
};

interface IClientSaveSettingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstSaveSettingResponse : extends IEspResponse
{
	virtual const char * getUpdateAttr()=0;
	virtual const char * getUpdateValue()=0;
	virtual const char * getPrevValue()=0;
	virtual const char * getIsSaved()=0;
	virtual const char * getRefresh()=0;
};

interface IEspSaveSettingResponse : extends IConstSaveSettingResponse
{
	virtual void setUpdateAttr(const char * val)=0;
	virtual void setUpdateValue(const char * val)=0;
	virtual void setPrevValue(const char * val)=0;
	virtual void setIsSaved(const char * val)=0;
	virtual void setRefresh(const char * val)=0;
	virtual void copy(IConstSaveSettingResponse &from)=0;
};

interface IClientSaveSettingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getUpdateAttr()=0;
	virtual const char * getUpdateValue()=0;
	virtual const char * getPrevValue()=0;
	virtual const char * getIsSaved()=0;
	virtual const char * getRefresh()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetBuildSetInfoRequest : extends IEspRequest
{
	virtual const char * getCmd()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetBuildSetInfoRequest : extends IConstGetBuildSetInfoRequest
{
	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetBuildSetInfoRequest &from)=0;
};

interface IClientGetBuildSetInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetBuildSetInfoResponse : extends IEspResponse
{
	virtual const char * getComponent()=0;
	virtual const char * getXmlArgs()=0;
};

interface IEspGetBuildSetInfoResponse : extends IConstGetBuildSetInfoResponse
{
	virtual void setComponent(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual void copy(IConstGetBuildSetInfoResponse &from)=0;
};

interface IClientGetBuildSetInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComponent()=0;
	virtual const char * getXmlArgs()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetDeployableCompsRequest : extends IEspRequest
{
	virtual const char * getCmd()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetDeployableCompsRequest : extends IConstGetDeployableCompsRequest
{
	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetDeployableCompsRequest &from)=0;
};

interface IClientGetDeployableCompsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetDeployableCompsResponse : extends IEspResponse
{
	virtual const char * getComponent()=0;
	virtual const char * getXmlArgs()=0;
};

interface IEspGetDeployableCompsResponse : extends IConstGetDeployableCompsResponse
{
	virtual void setComponent(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual void copy(IConstGetDeployableCompsResponse &from)=0;
};

interface IClientGetDeployableCompsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComponent()=0;
	virtual const char * getXmlArgs()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstStartDeploymentRequest : extends IEspRequest
{
	virtual const char * getSelComps()=0;
	virtual IConstDeployOptions & getOptions()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspStartDeploymentRequest : extends IConstStartDeploymentRequest
{
	virtual void setSelComps(const char * val)=0;
	virtual IEspDeployOptions & updateOptions()=0;
	virtual void setOptions(IConstDeployOptions &ifrom)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstStartDeploymentRequest &from)=0;
};

interface IClientStartDeploymentRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSelComps(const char * val)=0;
	virtual IEspDeployOptions & updateOptions()=0;
	virtual void setOptions(IConstDeployOptions &ifrom)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstStartDeploymentResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
};

interface IEspStartDeploymentResponse : extends IConstStartDeploymentResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstStartDeploymentResponse &from)=0;
};

interface IClientStartDeploymentResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetBuildServerDirsRequest : extends IEspRequest
{
	virtual const char * getCmd()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetBuildServerDirsRequest : extends IConstGetBuildServerDirsRequest
{
	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetBuildServerDirsRequest &from)=0;
};

interface IClientGetBuildServerDirsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetBuildServerDirsResponse : extends IEspResponse
{
	virtual const char * getComponent()=0;
	virtual const char * getXmlArgs()=0;
};

interface IEspGetBuildServerDirsResponse : extends IConstGetBuildServerDirsResponse
{
	virtual void setComponent(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual void copy(IConstGetBuildServerDirsResponse &from)=0;
};

interface IClientGetBuildServerDirsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComponent()=0;
	virtual const char * getXmlArgs()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstImportBuildRequest : extends IEspRequest
{
	virtual const char * getBuildName()=0;
	virtual const char * getBuildUrl()=0;
	virtual const char * getBuildSets()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspImportBuildRequest : extends IConstImportBuildRequest
{
	virtual void setBuildName(const char * val)=0;
	virtual void setBuildUrl(const char * val)=0;
	virtual void setBuildSets(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstImportBuildRequest &from)=0;
};

interface IClientImportBuildRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setBuildName(const char * val)=0;
	virtual void setBuildUrl(const char * val)=0;
	virtual void setBuildSets(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstImportBuildResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
};

interface IEspImportBuildResponse : extends IConstImportBuildResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstImportBuildResponse &from)=0;
};

interface IClientImportBuildResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetComputersForRoxieRequest : extends IEspRequest
{
	virtual const char * getCmd()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetComputersForRoxieRequest : extends IConstGetComputersForRoxieRequest
{
	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetComputersForRoxieRequest &from)=0;
};

interface IClientGetComputersForRoxieRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetComputersForRoxieResponse : extends IEspResponse
{
	virtual const char * getComputers()=0;
	virtual const char * getFilters()=0;
};

interface IEspGetComputersForRoxieResponse : extends IConstGetComputersForRoxieResponse
{
	virtual void setComputers(const char * val)=0;
	virtual void setFilters(const char * val)=0;
	virtual void copy(IConstGetComputersForRoxieResponse &from)=0;
};

interface IClientGetComputersForRoxieResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getComputers()=0;
	virtual const char * getFilters()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleRoxieOperationRequest : extends IEspRequest
{
	virtual const char * getCmd()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleRoxieOperationRequest : extends IConstHandleRoxieOperationRequest
{
	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleRoxieOperationRequest &from)=0;
};

interface IClientHandleRoxieOperationRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCmd(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleRoxieOperationResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
};

interface IEspHandleRoxieOperationResponse : extends IConstHandleRoxieOperationResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstHandleRoxieOperationResponse &from)=0;
};

interface IClientHandleRoxieOperationResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleThorTopologyRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleThorTopologyRequest : extends IConstHandleThorTopologyRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleThorTopologyRequest &from)=0;
};

interface IClientHandleThorTopologyRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleThorTopologyResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;
};

interface IEspHandleThorTopologyResponse : extends IConstHandleThorTopologyResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void copy(IConstHandleThorTopologyResponse &from)=0;
};

interface IClientHandleThorTopologyResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleAttributeDeleteRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual bool getBLeaf()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleAttributeDeleteRequest : extends IConstHandleAttributeDeleteRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual void setBLeaf(bool val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleAttributeDeleteRequest &from)=0;
};

interface IClientHandleAttributeDeleteRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual void setBLeaf(bool val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleAttributeAddRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleAttributeAddRequest : extends IConstHandleAttributeAddRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleAttributeAddRequest &from)=0;
};

interface IClientHandleAttributeAddRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleAttributeAddResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;
};

interface IEspHandleAttributeAddResponse : extends IConstHandleAttributeAddResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void copy(IConstHandleAttributeAddResponse &from)=0;
};

interface IClientHandleAttributeAddResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleAttributeDeleteResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;
};

interface IEspHandleAttributeDeleteResponse : extends IConstHandleAttributeDeleteResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void copy(IConstHandleAttributeDeleteResponse &from)=0;
};

interface IClientHandleAttributeDeleteResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleComponentRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleComponentRequest : extends IConstHandleComponentRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleComponentRequest &from)=0;
};

interface IClientHandleComponentRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleComponentResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;
};

interface IEspHandleComponentResponse : extends IConstHandleComponentResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void copy(IConstHandleComponentResponse &from)=0;
};

interface IClientHandleComponentResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleInstanceRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleInstanceRequest : extends IConstHandleInstanceRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleInstanceRequest &from)=0;
};

interface IClientHandleInstanceRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleInstanceResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getNewName()=0;
	virtual const char * getDuplicates()=0;
	virtual const char * getReqdCompNames()=0;
	virtual const char * getAddReqdComps()=0;
};

interface IEspHandleInstanceResponse : extends IConstHandleInstanceResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setNewName(const char * val)=0;
	virtual void setDuplicates(const char * val)=0;
	virtual void setReqdCompNames(const char * val)=0;
	virtual void setAddReqdComps(const char * val)=0;
	virtual void copy(IConstHandleInstanceResponse &from)=0;
};

interface IClientHandleInstanceResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getNewName()=0;
	virtual const char * getDuplicates()=0;
	virtual const char * getReqdCompNames()=0;
	virtual const char * getAddReqdComps()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstAddReqdCompsRequest : extends IEspRequest
{
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspAddReqdCompsRequest : extends IConstAddReqdCompsRequest
{
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstAddReqdCompsRequest &from)=0;
};

interface IClientAddReqdCompsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstAddReqdCompsResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getFailures()=0;
};

interface IEspAddReqdCompsResponse : extends IConstAddReqdCompsResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setFailures(const char * val)=0;
	virtual void copy(IConstAddReqdCompsResponse &from)=0;
};

interface IClientAddReqdCompsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getFailures()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleEspServiceBindingsRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleEspServiceBindingsRequest : extends IConstHandleEspServiceBindingsRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleEspServiceBindingsRequest &from)=0;
};

interface IClientHandleEspServiceBindingsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleEspServiceBindingsResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getNewName()=0;
};

interface IEspHandleEspServiceBindingsResponse : extends IConstHandleEspServiceBindingsResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setNewName(const char * val)=0;
	virtual void copy(IConstHandleEspServiceBindingsResponse &from)=0;
};

interface IClientHandleEspServiceBindingsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getNewName()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleComputerRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleComputerRequest : extends IConstHandleComputerRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleComputerRequest &from)=0;
};

interface IClientHandleComputerRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleComputerResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;
};

interface IEspHandleComputerResponse : extends IConstHandleComputerResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void copy(IConstHandleComputerResponse &from)=0;
};

interface IClientHandleComputerResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleTopologyRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleTopologyRequest : extends IConstHandleTopologyRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleTopologyRequest &from)=0;
};

interface IClientHandleTopologyRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleTopologyResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
};

interface IEspHandleTopologyResponse : extends IConstHandleTopologyResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstHandleTopologyResponse &from)=0;
};

interface IClientHandleTopologyResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleRowsRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleRowsRequest : extends IConstHandleRowsRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleRowsRequest &from)=0;
};

interface IClientHandleRowsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleRowsResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;
};

interface IEspHandleRowsResponse : extends IConstHandleRowsResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void copy(IConstHandleRowsResponse &from)=0;
};

interface IClientHandleRowsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getCompName()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleAccessRulesRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleAccessRulesRequest : extends IConstHandleAccessRulesRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleAccessRulesRequest &from)=0;
};

interface IClientHandleAccessRulesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstHandleBaseAccessControlListRequest : extends IEspRequest
{
	virtual const char * getOperation()=0;
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspHandleBaseAccessControlListRequest : extends IConstHandleBaseAccessControlListRequest
{
	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstHandleBaseAccessControlListRequest &from)=0;
};

interface IClientHandleBaseAccessControlListRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setOperation(const char * val)=0;
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};




interface IConstHandleAccessRulesResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
};

interface IEspHandleAccessRulesResponse : extends IConstHandleAccessRulesResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstHandleAccessRulesResponse &from)=0;
};

interface IClientHandleAccessRulesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstHandleBaseAccessControlListResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
};

interface IEspHandleBaseAccessControlListResponse : extends IConstHandleBaseAccessControlListResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstHandleBaseAccessControlListResponse &from)=0;
};

interface IClientHandleBaseAccessControlListResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetNavTreeDefnRequest : extends IEspRequest
{
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetNavTreeDefnRequest : extends IConstGetNavTreeDefnRequest
{
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetNavTreeDefnRequest &from)=0;
};

interface IClientGetNavTreeDefnRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetNavTreeDefnResponse : extends IEspResponse
{
	virtual const char * getCompDefn()=0;
	virtual const char * getReadOnly()=0;
	virtual const char * getLastSaved()=0;
	virtual const char * getLastStarted()=0;
	virtual const char * getMessage()=0;
};

interface IEspGetNavTreeDefnResponse : extends IConstGetNavTreeDefnResponse
{
	virtual void setCompDefn(const char * val)=0;
	virtual void setReadOnly(const char * val)=0;
	virtual void setLastSaved(const char * val)=0;
	virtual void setLastStarted(const char * val)=0;
	virtual void setMessage(const char * val)=0;
	virtual void copy(IConstGetNavTreeDefnResponse &from)=0;
};

interface IClientGetNavTreeDefnResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getCompDefn()=0;
	virtual const char * getReadOnly()=0;
	virtual const char * getLastSaved()=0;
	virtual const char * getLastStarted()=0;
	virtual const char * getMessage()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetValueRequest : extends IEspRequest
{
	virtual const char * getParams()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetValueRequest : extends IConstGetValueRequest
{
	virtual void setParams(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetValueRequest &from)=0;
};

interface IClientGetValueRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setParams(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetValueResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getReqValue()=0;
};

interface IEspGetValueResponse : extends IConstGetValueResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setReqValue(const char * val)=0;
	virtual void copy(IConstGetValueResponse &from)=0;
};

interface IClientGetValueResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getReqValue()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstUnlockUserRequest : extends IEspRequest
{
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspUnlockUserRequest : extends IConstUnlockUserRequest
{
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstUnlockUserRequest &from)=0;
};

interface IClientUnlockUserRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstUnlockUserResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
};

interface IEspUnlockUserResponse : extends IConstUnlockUserResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstUnlockUserResponse &from)=0;
};

interface IClientUnlockUserResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstClientAliveRequest : extends IEspRequest
{
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspClientAliveRequest : extends IConstClientAliveRequest
{
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstClientAliveRequest &from)=0;
};

interface IClientClientAliveRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstClientAliveResponse : extends IEspResponse
{
	virtual const char * getLastSaved()=0;
	virtual const char * getLastStarted()=0;
	virtual const char * getRefreshClient()=0;
};

interface IEspClientAliveResponse : extends IConstClientAliveResponse
{
	virtual void setLastSaved(const char * val)=0;
	virtual void setLastStarted(const char * val)=0;
	virtual void setRefreshClient(const char * val)=0;
	virtual void copy(IConstClientAliveResponse &from)=0;
};

interface IClientClientAliveResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getLastSaved()=0;
	virtual const char * getLastStarted()=0;
	virtual const char * getRefreshClient()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetEnvironmentRequest : extends IEspRequest
{
};

interface IEspGetEnvironmentRequest : extends IConstGetEnvironmentRequest
{
	virtual void copy(IConstGetEnvironmentRequest &from)=0;
};

interface IClientGetEnvironmentRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstGetEnvironmentResponse : extends IEspResponse
{
	virtual const char * getEnvXml()=0;
};

interface IEspGetEnvironmentResponse : extends IConstGetEnvironmentResponse
{
	virtual void setEnvXml(const char * val)=0;
	virtual void copy(IConstGetEnvironmentResponse &from)=0;
};

interface IClientGetEnvironmentResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getEnvXml()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSetEnvironmentRequest : extends IEspRequest
{
	virtual const char * getEnvXml()=0;
};

interface IEspSetEnvironmentRequest : extends IConstSetEnvironmentRequest
{
	virtual void setEnvXml(const char * val)=0;
	virtual void copy(IConstSetEnvironmentRequest &from)=0;
};

interface IClientSetEnvironmentRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEnvXml(const char * val)=0;
};



interface IConstSetEnvironmentResponse : extends IEspResponse
{
	virtual int getReturnCode()=0;
	virtual const char * getErrorMsg()=0;
};

interface IEspSetEnvironmentResponse : extends IConstSetEnvironmentResponse
{
	virtual void setReturnCode(int val)=0;
	virtual void setErrorMsg(const char * val)=0;
	virtual void copy(IConstSetEnvironmentResponse &from)=0;
};

interface IClientSetEnvironmentResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual int getReturnCode()=0;
	virtual const char * getErrorMsg()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstLockEnvironmentForCloudRequest : extends IEspRequest
{
	virtual const char * getIp()=0;
	virtual const char * getUserName()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspLockEnvironmentForCloudRequest : extends IConstLockEnvironmentForCloudRequest
{
	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstLockEnvironmentForCloudRequest &from)=0;
};

interface IClientLockEnvironmentForCloudRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstLockEnvironmentForCloudResponse : extends IEspResponse
{
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;
};

interface IEspLockEnvironmentForCloudResponse : extends IConstLockEnvironmentForCloudResponse
{
	virtual void setMsg(const char * val)=0;
	virtual void setReturnCode(int val)=0;
	virtual void copy(IConstLockEnvironmentForCloudResponse &from)=0;
};

interface IClientLockEnvironmentForCloudResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstUnlockEnvironmentForCloudRequest : extends IEspRequest
{
	virtual const char * getIp()=0;
	virtual const char * getUserName()=0;
	virtual const char * getNewEnvXml()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspUnlockEnvironmentForCloudRequest : extends IConstUnlockEnvironmentForCloudRequest
{
	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setNewEnvXml(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstUnlockEnvironmentForCloudRequest &from)=0;
};

interface IClientUnlockEnvironmentForCloudRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setNewEnvXml(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstUnlockEnvironmentForCloudResponse : extends IEspResponse
{
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;
};

interface IEspUnlockEnvironmentForCloudResponse : extends IConstUnlockEnvironmentForCloudResponse
{
	virtual void setMsg(const char * val)=0;
	virtual void setReturnCode(int val)=0;
	virtual void copy(IConstUnlockEnvironmentForCloudResponse &from)=0;
};

interface IClientUnlockEnvironmentForCloudResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSaveEnvironmentForCloudRequest : extends IEspRequest
{
	virtual const char * getIp()=0;
	virtual const char * getUserName()=0;
	virtual const char * getNewEnv()=0;
	virtual const char * getId()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspSaveEnvironmentForCloudRequest : extends IConstSaveEnvironmentForCloudRequest
{
	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setNewEnv(const char * val)=0;
	virtual void setId(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstSaveEnvironmentForCloudRequest &from)=0;
};

interface IClientSaveEnvironmentForCloudRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setNewEnv(const char * val)=0;
	virtual void setId(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstSaveEnvironmentForCloudResponse : extends IEspResponse
{
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;
};

interface IEspSaveEnvironmentForCloudResponse : extends IConstSaveEnvironmentForCloudResponse
{
	virtual void setMsg(const char * val)=0;
	virtual void setReturnCode(int val)=0;
	virtual void copy(IConstSaveEnvironmentForCloudResponse &from)=0;
};

interface IClientSaveEnvironmentForCloudResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstRollbackEnvironmentForCloudRequest : extends IEspRequest
{
	virtual const char * getIp()=0;
	virtual const char * getUserName()=0;
	virtual const char * getId()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspRollbackEnvironmentForCloudRequest : extends IConstRollbackEnvironmentForCloudRequest
{
	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setId(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstRollbackEnvironmentForCloudRequest &from)=0;
};

interface IClientRollbackEnvironmentForCloudRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setId(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstRollbackEnvironmentForCloudResponse : extends IEspResponse
{
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;
};

interface IEspRollbackEnvironmentForCloudResponse : extends IConstRollbackEnvironmentForCloudResponse
{
	virtual void setMsg(const char * val)=0;
	virtual void setReturnCode(int val)=0;
	virtual void copy(IConstRollbackEnvironmentForCloudResponse &from)=0;
};

interface IClientRollbackEnvironmentForCloudResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstNotifyInitSystemSaveEnvForCloudRequest : extends IEspRequest
{
	virtual const char * getIp()=0;
	virtual const char * getUserName()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspNotifyInitSystemSaveEnvForCloudRequest : extends IConstNotifyInitSystemSaveEnvForCloudRequest
{
	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstNotifyInitSystemSaveEnvForCloudRequest &from)=0;
};

interface IClientNotifyInitSystemSaveEnvForCloudRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstNotifyInitSystemSaveEnvForCloudResponse : extends IEspResponse
{
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;
};

interface IEspNotifyInitSystemSaveEnvForCloudResponse : extends IConstNotifyInitSystemSaveEnvForCloudResponse
{
	virtual void setMsg(const char * val)=0;
	virtual void setReturnCode(int val)=0;
	virtual void copy(IConstNotifyInitSystemSaveEnvForCloudResponse &from)=0;
};

interface IClientNotifyInitSystemSaveEnvForCloudResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getMsg()=0;
	virtual int getReturnCode()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstBuildEnvironmentRequest : extends IEspRequest
{
	virtual const char * getXmlArgs()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspBuildEnvironmentRequest : extends IConstBuildEnvironmentRequest
{
	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstBuildEnvironmentRequest &from)=0;
};

interface IClientBuildEnvironmentRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setXmlArgs(const char * val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstBuildEnvironmentResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getMessage()=0;
};

interface IEspBuildEnvironmentResponse : extends IConstBuildEnvironmentResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setMessage(const char * val)=0;
	virtual void copy(IConstBuildEnvironmentResponse &from)=0;
};

interface IClientBuildEnvironmentResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getMessage()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetSubnetIPAddrRequest : extends IEspRequest
{
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetSubnetIPAddrRequest : extends IConstGetSubnetIPAddrRequest
{
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetSubnetIPAddrRequest &from)=0;
};

interface IClientGetSubnetIPAddrRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetSubnetIPAddrResponse : extends IEspResponse
{
	virtual const char * getIPList()=0;
	virtual const char * getMessage()=0;
};

interface IEspGetSubnetIPAddrResponse : extends IConstGetSubnetIPAddrResponse
{
	virtual void setIPList(const char * val)=0;
	virtual void setMessage(const char * val)=0;
	virtual void copy(IConstGetSubnetIPAddrResponse &from)=0;
};

interface IClientGetSubnetIPAddrResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getIPList()=0;
	virtual const char * getMessage()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetSummaryRequest : extends IEspRequest
{
	virtual bool getPrepareLinkFlag()=0;
	virtual IConstWsDeployReqInfo & getReqInfo()=0;
};

interface IEspGetSummaryRequest : extends IConstGetSummaryRequest
{
	virtual void setPrepareLinkFlag(bool val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
	virtual void copy(IConstGetSummaryRequest &from)=0;
};

interface IClientGetSummaryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setPrepareLinkFlag(bool val)=0;
	virtual IEspWsDeployReqInfo & updateReqInfo()=0;
	virtual void setReqInfo(IConstWsDeployReqInfo &ifrom)=0;
};



interface IConstGetSummaryResponse : extends IEspResponse
{
	virtual const char * getStatus()=0;
	virtual const char * getXmlStr()=0;
};

interface IEspGetSummaryResponse : extends IConstGetSummaryResponse
{
	virtual void setStatus(const char * val)=0;
	virtual void setXmlStr(const char * val)=0;
	virtual void copy(IConstGetSummaryResponse &from)=0;
};

interface IClientGetSummaryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getStatus()=0;
	virtual const char * getXmlStr()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstWsDeployPingRequest : extends IEspRequest
{
};

interface IEspWsDeployPingRequest : extends IConstWsDeployPingRequest
{
	virtual void copy(IConstWsDeployPingRequest &from)=0;
};

interface IClientWsDeployPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstWsDeployPingResponse : extends IEspResponse
{
};

interface IEspWsDeployPingResponse : extends IConstWsDeployPingResponse
{
	virtual void copy(IConstWsDeployPingResponse &from)=0;
};

interface IClientWsDeployPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspWsDeploy : extends IEspService
{
	virtual bool onAddReqdComps(IEspContext &context, IEspAddReqdCompsRequest &req, IEspAddReqdCompsResponse &resp)=0;
	virtual bool onBuildEnvironment(IEspContext &context, IEspBuildEnvironmentRequest &req, IEspBuildEnvironmentResponse &resp)=0;
	virtual bool onClientAlive(IEspContext &context, IEspClientAliveRequest &req, IEspClientAliveResponse &resp)=0;
	virtual bool onDisplaySettings(IEspContext &context, IEspDisplaySettingsRequest &req, IEspDisplaySettingsResponse &resp)=0;
	virtual bool onGetBuildServerDirs(IEspContext &context, IEspGetBuildServerDirsRequest &req, IEspGetBuildServerDirsResponse &resp)=0;
	virtual bool onGetBuildSetInfo(IEspContext &context, IEspGetBuildSetInfoRequest &req, IEspGetBuildSetInfoResponse &resp)=0;
	virtual bool onGetComputersForRoxie(IEspContext &context, IEspGetComputersForRoxieRequest &req, IEspGetComputersForRoxieResponse &resp)=0;
	virtual bool onGetDeployableComps(IEspContext &context, IEspGetDeployableCompsRequest &req, IEspGetDeployableCompsResponse &resp)=0;
	virtual bool onGetEnvironment(IEspContext &context, IEspGetEnvironmentRequest &req, IEspGetEnvironmentResponse &resp)=0;
	virtual bool onGetNavTreeDefn(IEspContext &context, IEspGetNavTreeDefnRequest &req, IEspGetNavTreeDefnResponse &resp)=0;
	virtual bool onGetSubnetIPAddr(IEspContext &context, IEspGetSubnetIPAddrRequest &req, IEspGetSubnetIPAddrResponse &resp)=0;
	virtual bool onGetSummary(IEspContext &context, IEspGetSummaryRequest &req, IEspGetSummaryResponse &resp)=0;
	virtual bool onGetValue(IEspContext &context, IEspGetValueRequest &req, IEspGetValueResponse &resp)=0;
	virtual bool onGraph(IEspContext &context, IEspEmptyRequest &req, IEspGraphResponse &resp)=0;
	virtual bool onHandleAccessRules(IEspContext &context, IEspHandleAccessRulesRequest &req, IEspHandleAccessRulesResponse &resp)=0;
	virtual bool onHandleAttributeAdd(IEspContext &context, IEspHandleAttributeAddRequest &req, IEspHandleAttributeAddResponse &resp)=0;
	virtual bool onHandleAttributeDelete(IEspContext &context, IEspHandleAttributeDeleteRequest &req, IEspHandleAttributeDeleteResponse &resp)=0;
	virtual bool onHandleBaseAccessControlList(IEspContext &context, IEspHandleBaseAccessControlListRequest &req, IEspHandleBaseAccessControlListResponse &resp)=0;
	virtual bool onHandleComponent(IEspContext &context, IEspHandleComponentRequest &req, IEspHandleComponentResponse &resp)=0;
	virtual bool onHandleComputer(IEspContext &context, IEspHandleComputerRequest &req, IEspHandleComputerResponse &resp)=0;
	virtual bool onHandleEspServiceBindings(IEspContext &context, IEspHandleEspServiceBindingsRequest &req, IEspHandleEspServiceBindingsResponse &resp)=0;
	virtual bool onHandleInstance(IEspContext &context, IEspHandleInstanceRequest &req, IEspHandleInstanceResponse &resp)=0;
	virtual bool onHandleRows(IEspContext &context, IEspHandleRowsRequest &req, IEspHandleRowsResponse &resp)=0;
	virtual bool onHandleRoxieOperation(IEspContext &context, IEspHandleRoxieOperationRequest &req, IEspHandleRoxieOperationResponse &resp)=0;
	virtual bool onHandleThorTopology(IEspContext &context, IEspHandleThorTopologyRequest &req, IEspHandleThorTopologyResponse &resp)=0;
	virtual bool onHandleTopology(IEspContext &context, IEspHandleTopologyRequest &req, IEspHandleTopologyResponse &resp)=0;
	virtual bool onImportBuild(IEspContext &context, IEspImportBuildRequest &req, IEspImportBuildResponse &resp)=0;
	virtual bool onLockEnvironmentForCloud(IEspContext &context, IEspLockEnvironmentForCloudRequest &req, IEspLockEnvironmentForCloudResponse &resp)=0;
	virtual bool onNavMenuEvent(IEspContext &context, IEspNavMenuEventRequest &req, IEspNavMenuEventResponse &resp)=0;
	virtual bool onNotifyInitSystemSaveEnvForCloud(IEspContext &context, IEspNotifyInitSystemSaveEnvForCloudRequest &req, IEspNotifyInitSystemSaveEnvForCloudResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspWsDeployPingRequest &req, IEspWsDeployPingResponse &resp)=0;
	virtual bool onRollbackEnvironmentForCloud(IEspContext &context, IEspRollbackEnvironmentForCloudRequest &req, IEspRollbackEnvironmentForCloudResponse &resp)=0;
	virtual bool onSaveEnvironmentForCloud(IEspContext &context, IEspSaveEnvironmentForCloudRequest &req, IEspSaveEnvironmentForCloudResponse &resp)=0;
	virtual bool onSaveSetting(IEspContext &context, IEspSaveSettingRequest &req, IEspSaveSettingResponse &resp)=0;
	virtual bool onSetEnvironment(IEspContext &context, IEspSetEnvironmentRequest &req, IEspSetEnvironmentResponse &resp)=0;
	virtual bool onStartDeployment(IEspContext &context, IEspStartDeploymentRequest &req, IEspStartDeploymentResponse &resp)=0;
	virtual bool onUnlockEnvironmentForCloud(IEspContext &context, IEspUnlockEnvironmentForCloudRequest &req, IEspUnlockEnvironmentForCloudResponse &resp)=0;
	virtual bool onUnlockUser(IEspContext &context, IEspUnlockUserRequest &req, IEspUnlockUserResponse &resp)=0;
};

interface IClientWsDeployEvents : extends IInterface
{
	virtual int onAddReqdCompsComplete(IClientAddReqdCompsResponse *resp,IInterface* state)=0;
	virtual int onAddReqdCompsError(IClientAddReqdCompsResponse *resp,IInterface* state)=0;
	virtual int onBuildEnvironmentComplete(IClientBuildEnvironmentResponse *resp,IInterface* state)=0;
	virtual int onBuildEnvironmentError(IClientBuildEnvironmentResponse *resp,IInterface* state)=0;
	virtual int onClientAliveComplete(IClientClientAliveResponse *resp,IInterface* state)=0;
	virtual int onClientAliveError(IClientClientAliveResponse *resp,IInterface* state)=0;
	virtual int onDisplaySettingsComplete(IClientDisplaySettingsResponse *resp,IInterface* state)=0;
	virtual int onDisplaySettingsError(IClientDisplaySettingsResponse *resp,IInterface* state)=0;
	virtual int onGetBuildServerDirsComplete(IClientGetBuildServerDirsResponse *resp,IInterface* state)=0;
	virtual int onGetBuildServerDirsError(IClientGetBuildServerDirsResponse *resp,IInterface* state)=0;
	virtual int onGetBuildSetInfoComplete(IClientGetBuildSetInfoResponse *resp,IInterface* state)=0;
	virtual int onGetBuildSetInfoError(IClientGetBuildSetInfoResponse *resp,IInterface* state)=0;
	virtual int onGetComputersForRoxieComplete(IClientGetComputersForRoxieResponse *resp,IInterface* state)=0;
	virtual int onGetComputersForRoxieError(IClientGetComputersForRoxieResponse *resp,IInterface* state)=0;
	virtual int onGetDeployableCompsComplete(IClientGetDeployableCompsResponse *resp,IInterface* state)=0;
	virtual int onGetDeployableCompsError(IClientGetDeployableCompsResponse *resp,IInterface* state)=0;
	virtual int onGetEnvironmentComplete(IClientGetEnvironmentResponse *resp,IInterface* state)=0;
	virtual int onGetEnvironmentError(IClientGetEnvironmentResponse *resp,IInterface* state)=0;
	virtual int onGetNavTreeDefnComplete(IClientGetNavTreeDefnResponse *resp,IInterface* state)=0;
	virtual int onGetNavTreeDefnError(IClientGetNavTreeDefnResponse *resp,IInterface* state)=0;
	virtual int onGetSubnetIPAddrComplete(IClientGetSubnetIPAddrResponse *resp,IInterface* state)=0;
	virtual int onGetSubnetIPAddrError(IClientGetSubnetIPAddrResponse *resp,IInterface* state)=0;
	virtual int onGetSummaryComplete(IClientGetSummaryResponse *resp,IInterface* state)=0;
	virtual int onGetSummaryError(IClientGetSummaryResponse *resp,IInterface* state)=0;
	virtual int onGetValueComplete(IClientGetValueResponse *resp,IInterface* state)=0;
	virtual int onGetValueError(IClientGetValueResponse *resp,IInterface* state)=0;
	virtual int onGraphComplete(IClientGraphResponse *resp,IInterface* state)=0;
	virtual int onGraphError(IClientGraphResponse *resp,IInterface* state)=0;
	virtual int onHandleAccessRulesComplete(IClientHandleAccessRulesResponse *resp,IInterface* state)=0;
	virtual int onHandleAccessRulesError(IClientHandleAccessRulesResponse *resp,IInterface* state)=0;
	virtual int onHandleAttributeAddComplete(IClientHandleAttributeAddResponse *resp,IInterface* state)=0;
	virtual int onHandleAttributeAddError(IClientHandleAttributeAddResponse *resp,IInterface* state)=0;
	virtual int onHandleAttributeDeleteComplete(IClientHandleAttributeDeleteResponse *resp,IInterface* state)=0;
	virtual int onHandleAttributeDeleteError(IClientHandleAttributeDeleteResponse *resp,IInterface* state)=0;
	virtual int onHandleBaseAccessControlListComplete(IClientHandleBaseAccessControlListResponse *resp,IInterface* state)=0;
	virtual int onHandleBaseAccessControlListError(IClientHandleBaseAccessControlListResponse *resp,IInterface* state)=0;
	virtual int onHandleComponentComplete(IClientHandleComponentResponse *resp,IInterface* state)=0;
	virtual int onHandleComponentError(IClientHandleComponentResponse *resp,IInterface* state)=0;
	virtual int onHandleComputerComplete(IClientHandleComputerResponse *resp,IInterface* state)=0;
	virtual int onHandleComputerError(IClientHandleComputerResponse *resp,IInterface* state)=0;
	virtual int onHandleEspServiceBindingsComplete(IClientHandleEspServiceBindingsResponse *resp,IInterface* state)=0;
	virtual int onHandleEspServiceBindingsError(IClientHandleEspServiceBindingsResponse *resp,IInterface* state)=0;
	virtual int onHandleInstanceComplete(IClientHandleInstanceResponse *resp,IInterface* state)=0;
	virtual int onHandleInstanceError(IClientHandleInstanceResponse *resp,IInterface* state)=0;
	virtual int onHandleRowsComplete(IClientHandleRowsResponse *resp,IInterface* state)=0;
	virtual int onHandleRowsError(IClientHandleRowsResponse *resp,IInterface* state)=0;
	virtual int onHandleRoxieOperationComplete(IClientHandleRoxieOperationResponse *resp,IInterface* state)=0;
	virtual int onHandleRoxieOperationError(IClientHandleRoxieOperationResponse *resp,IInterface* state)=0;
	virtual int onHandleThorTopologyComplete(IClientHandleThorTopologyResponse *resp,IInterface* state)=0;
	virtual int onHandleThorTopologyError(IClientHandleThorTopologyResponse *resp,IInterface* state)=0;
	virtual int onHandleTopologyComplete(IClientHandleTopologyResponse *resp,IInterface* state)=0;
	virtual int onHandleTopologyError(IClientHandleTopologyResponse *resp,IInterface* state)=0;
	virtual int onImportBuildComplete(IClientImportBuildResponse *resp,IInterface* state)=0;
	virtual int onImportBuildError(IClientImportBuildResponse *resp,IInterface* state)=0;
	virtual int onLockEnvironmentForCloudComplete(IClientLockEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onLockEnvironmentForCloudError(IClientLockEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onNavMenuEventComplete(IClientNavMenuEventResponse *resp,IInterface* state)=0;
	virtual int onNavMenuEventError(IClientNavMenuEventResponse *resp,IInterface* state)=0;
	virtual int onNotifyInitSystemSaveEnvForCloudComplete(IClientNotifyInitSystemSaveEnvForCloudResponse *resp,IInterface* state)=0;
	virtual int onNotifyInitSystemSaveEnvForCloudError(IClientNotifyInitSystemSaveEnvForCloudResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientWsDeployPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientWsDeployPingResponse *resp,IInterface* state)=0;
	virtual int onRollbackEnvironmentForCloudComplete(IClientRollbackEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onRollbackEnvironmentForCloudError(IClientRollbackEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onSaveEnvironmentForCloudComplete(IClientSaveEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onSaveEnvironmentForCloudError(IClientSaveEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onSaveSettingComplete(IClientSaveSettingResponse *resp,IInterface* state)=0;
	virtual int onSaveSettingError(IClientSaveSettingResponse *resp,IInterface* state)=0;
	virtual int onSetEnvironmentComplete(IClientSetEnvironmentResponse *resp,IInterface* state)=0;
	virtual int onSetEnvironmentError(IClientSetEnvironmentResponse *resp,IInterface* state)=0;
	virtual int onStartDeploymentComplete(IClientStartDeploymentResponse *resp,IInterface* state)=0;
	virtual int onStartDeploymentError(IClientStartDeploymentResponse *resp,IInterface* state)=0;
	virtual int onUnlockEnvironmentForCloudComplete(IClientUnlockEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onUnlockEnvironmentForCloudError(IClientUnlockEnvironmentForCloudResponse *resp,IInterface* state)=0;
	virtual int onUnlockUserComplete(IClientUnlockUserResponse *resp,IInterface* state)=0;
	virtual int onUnlockUserError(IClientUnlockUserResponse *resp,IInterface* state)=0;
};

interface IClientWsDeploy : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientAddReqdCompsRequest * createAddReqdCompsRequest()=0;
	virtual IClientAddReqdCompsResponse * AddReqdComps(IClientAddReqdCompsRequest *request)=0;
	virtual void async_AddReqdComps(IClientAddReqdCompsRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientBuildEnvironmentRequest * createBuildEnvironmentRequest()=0;
	virtual IClientBuildEnvironmentResponse * BuildEnvironment(IClientBuildEnvironmentRequest *request)=0;
	virtual void async_BuildEnvironment(IClientBuildEnvironmentRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientClientAliveRequest * createClientAliveRequest()=0;
	virtual IClientClientAliveResponse * ClientAlive(IClientClientAliveRequest *request)=0;
	virtual void async_ClientAlive(IClientClientAliveRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientDisplaySettingsRequest * createDisplaySettingsRequest()=0;
	virtual IClientDisplaySettingsResponse * DisplaySettings(IClientDisplaySettingsRequest *request)=0;
	virtual void async_DisplaySettings(IClientDisplaySettingsRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetBuildServerDirsRequest * createGetBuildServerDirsRequest()=0;
	virtual IClientGetBuildServerDirsResponse * GetBuildServerDirs(IClientGetBuildServerDirsRequest *request)=0;
	virtual void async_GetBuildServerDirs(IClientGetBuildServerDirsRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetBuildSetInfoRequest * createGetBuildSetInfoRequest()=0;
	virtual IClientGetBuildSetInfoResponse * GetBuildSetInfo(IClientGetBuildSetInfoRequest *request)=0;
	virtual void async_GetBuildSetInfo(IClientGetBuildSetInfoRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetComputersForRoxieRequest * createGetComputersForRoxieRequest()=0;
	virtual IClientGetComputersForRoxieResponse * GetComputersForRoxie(IClientGetComputersForRoxieRequest *request)=0;
	virtual void async_GetComputersForRoxie(IClientGetComputersForRoxieRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetDeployableCompsRequest * createGetDeployableCompsRequest()=0;
	virtual IClientGetDeployableCompsResponse * GetDeployableComps(IClientGetDeployableCompsRequest *request)=0;
	virtual void async_GetDeployableComps(IClientGetDeployableCompsRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetEnvironmentRequest * createGetEnvironmentRequest()=0;
	virtual IClientGetEnvironmentResponse * GetEnvironment(IClientGetEnvironmentRequest *request)=0;
	virtual void async_GetEnvironment(IClientGetEnvironmentRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetNavTreeDefnRequest * createGetNavTreeDefnRequest()=0;
	virtual IClientGetNavTreeDefnResponse * GetNavTreeDefn(IClientGetNavTreeDefnRequest *request)=0;
	virtual void async_GetNavTreeDefn(IClientGetNavTreeDefnRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetSubnetIPAddrRequest * createGetSubnetIPAddrRequest()=0;
	virtual IClientGetSubnetIPAddrResponse * GetSubnetIPAddr(IClientGetSubnetIPAddrRequest *request)=0;
	virtual void async_GetSubnetIPAddr(IClientGetSubnetIPAddrRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetSummaryRequest * createGetSummaryRequest()=0;
	virtual IClientGetSummaryResponse * GetSummary(IClientGetSummaryRequest *request)=0;
	virtual void async_GetSummary(IClientGetSummaryRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientGetValueRequest * createGetValueRequest()=0;
	virtual IClientGetValueResponse * GetValue(IClientGetValueRequest *request)=0;
	virtual void async_GetValue(IClientGetValueRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientEmptyRequest * createGraphRequest()=0;
	virtual IClientGraphResponse * Graph(IClientEmptyRequest *request)=0;
	virtual void async_Graph(IClientEmptyRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleAccessRulesRequest * createHandleAccessRulesRequest()=0;
	virtual IClientHandleAccessRulesResponse * HandleAccessRules(IClientHandleAccessRulesRequest *request)=0;
	virtual void async_HandleAccessRules(IClientHandleAccessRulesRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleAttributeAddRequest * createHandleAttributeAddRequest()=0;
	virtual IClientHandleAttributeAddResponse * HandleAttributeAdd(IClientHandleAttributeAddRequest *request)=0;
	virtual void async_HandleAttributeAdd(IClientHandleAttributeAddRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleAttributeDeleteRequest * createHandleAttributeDeleteRequest()=0;
	virtual IClientHandleAttributeDeleteResponse * HandleAttributeDelete(IClientHandleAttributeDeleteRequest *request)=0;
	virtual void async_HandleAttributeDelete(IClientHandleAttributeDeleteRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleBaseAccessControlListRequest * createHandleBaseAccessControlListRequest()=0;
	virtual IClientHandleBaseAccessControlListResponse * HandleBaseAccessControlList(IClientHandleBaseAccessControlListRequest *request)=0;
	virtual void async_HandleBaseAccessControlList(IClientHandleBaseAccessControlListRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleComponentRequest * createHandleComponentRequest()=0;
	virtual IClientHandleComponentResponse * HandleComponent(IClientHandleComponentRequest *request)=0;
	virtual void async_HandleComponent(IClientHandleComponentRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleComputerRequest * createHandleComputerRequest()=0;
	virtual IClientHandleComputerResponse * HandleComputer(IClientHandleComputerRequest *request)=0;
	virtual void async_HandleComputer(IClientHandleComputerRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleEspServiceBindingsRequest * createHandleEspServiceBindingsRequest()=0;
	virtual IClientHandleEspServiceBindingsResponse * HandleEspServiceBindings(IClientHandleEspServiceBindingsRequest *request)=0;
	virtual void async_HandleEspServiceBindings(IClientHandleEspServiceBindingsRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleInstanceRequest * createHandleInstanceRequest()=0;
	virtual IClientHandleInstanceResponse * HandleInstance(IClientHandleInstanceRequest *request)=0;
	virtual void async_HandleInstance(IClientHandleInstanceRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleRowsRequest * createHandleRowsRequest()=0;
	virtual IClientHandleRowsResponse * HandleRows(IClientHandleRowsRequest *request)=0;
	virtual void async_HandleRows(IClientHandleRowsRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleRoxieOperationRequest * createHandleRoxieOperationRequest()=0;
	virtual IClientHandleRoxieOperationResponse * HandleRoxieOperation(IClientHandleRoxieOperationRequest *request)=0;
	virtual void async_HandleRoxieOperation(IClientHandleRoxieOperationRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleThorTopologyRequest * createHandleThorTopologyRequest()=0;
	virtual IClientHandleThorTopologyResponse * HandleThorTopology(IClientHandleThorTopologyRequest *request)=0;
	virtual void async_HandleThorTopology(IClientHandleThorTopologyRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientHandleTopologyRequest * createHandleTopologyRequest()=0;
	virtual IClientHandleTopologyResponse * HandleTopology(IClientHandleTopologyRequest *request)=0;
	virtual void async_HandleTopology(IClientHandleTopologyRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientImportBuildRequest * createImportBuildRequest()=0;
	virtual IClientImportBuildResponse * ImportBuild(IClientImportBuildRequest *request)=0;
	virtual void async_ImportBuild(IClientImportBuildRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientLockEnvironmentForCloudRequest * createLockEnvironmentForCloudRequest()=0;
	virtual IClientLockEnvironmentForCloudResponse * LockEnvironmentForCloud(IClientLockEnvironmentForCloudRequest *request)=0;
	virtual void async_LockEnvironmentForCloud(IClientLockEnvironmentForCloudRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientNavMenuEventRequest * createNavMenuEventRequest()=0;
	virtual IClientNavMenuEventResponse * NavMenuEvent(IClientNavMenuEventRequest *request)=0;
	virtual void async_NavMenuEvent(IClientNavMenuEventRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientNotifyInitSystemSaveEnvForCloudRequest * createNotifyInitSystemSaveEnvForCloudRequest()=0;
	virtual IClientNotifyInitSystemSaveEnvForCloudResponse * NotifyInitSystemSaveEnvForCloud(IClientNotifyInitSystemSaveEnvForCloudRequest *request)=0;
	virtual void async_NotifyInitSystemSaveEnvForCloud(IClientNotifyInitSystemSaveEnvForCloudRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientWsDeployPingRequest * createPingRequest()=0;
	virtual IClientWsDeployPingResponse * Ping(IClientWsDeployPingRequest *request)=0;
	virtual void async_Ping(IClientWsDeployPingRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientRollbackEnvironmentForCloudRequest * createRollbackEnvironmentForCloudRequest()=0;
	virtual IClientRollbackEnvironmentForCloudResponse * RollbackEnvironmentForCloud(IClientRollbackEnvironmentForCloudRequest *request)=0;
	virtual void async_RollbackEnvironmentForCloud(IClientRollbackEnvironmentForCloudRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientSaveEnvironmentForCloudRequest * createSaveEnvironmentForCloudRequest()=0;
	virtual IClientSaveEnvironmentForCloudResponse * SaveEnvironmentForCloud(IClientSaveEnvironmentForCloudRequest *request)=0;
	virtual void async_SaveEnvironmentForCloud(IClientSaveEnvironmentForCloudRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientSaveSettingRequest * createSaveSettingRequest()=0;
	virtual IClientSaveSettingResponse * SaveSetting(IClientSaveSettingRequest *request)=0;
	virtual void async_SaveSetting(IClientSaveSettingRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientSetEnvironmentRequest * createSetEnvironmentRequest()=0;
	virtual IClientSetEnvironmentResponse * SetEnvironment(IClientSetEnvironmentRequest *request)=0;
	virtual void async_SetEnvironment(IClientSetEnvironmentRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientStartDeploymentRequest * createStartDeploymentRequest()=0;
	virtual IClientStartDeploymentResponse * StartDeployment(IClientStartDeploymentRequest *request)=0;
	virtual void async_StartDeployment(IClientStartDeploymentRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientUnlockEnvironmentForCloudRequest * createUnlockEnvironmentForCloudRequest()=0;
	virtual IClientUnlockEnvironmentForCloudResponse * UnlockEnvironmentForCloud(IClientUnlockEnvironmentForCloudRequest *request)=0;
	virtual void async_UnlockEnvironmentForCloud(IClientUnlockEnvironmentForCloudRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;

	virtual IClientUnlockUserRequest * createUnlockUserRequest()=0;
	virtual IClientUnlockUserResponse * UnlockUser(IClientUnlockUserRequest *request)=0;
	virtual void async_UnlockUser(IClientUnlockUserRequest *request, IClientWsDeployEvents *events,IInterface* state=0)=0;


	virtual IClientAddReqdCompsResponse *AddReqdCompsFn(const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientBuildEnvironmentResponse *BuildEnvironmentFn(const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientClientAliveResponse *ClientAliveFn(IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientDisplaySettingsResponse *DisplaySettingsFn(const char * Cmd_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetBuildServerDirsResponse *GetBuildServerDirsFn(const char * Cmd_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetBuildSetInfoResponse *GetBuildSetInfoFn(const char * Cmd_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetComputersForRoxieResponse *GetComputersForRoxieFn(const char * Cmd_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetDeployableCompsResponse *GetDeployableCompsFn(const char * Cmd_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetEnvironmentResponse *GetEnvironmentFn()=0;

	virtual IClientGetNavTreeDefnResponse *GetNavTreeDefnFn(const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetSubnetIPAddrResponse *GetSubnetIPAddrFn(IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetSummaryResponse *GetSummaryFn(bool PrepareLinkFlag_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGetValueResponse *GetValueFn(const char * Params_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientGraphResponse *GraphFn()=0;

	virtual IClientHandleAccessRulesResponse *HandleAccessRulesFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleAttributeAddResponse *HandleAttributeAddFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleAttributeDeleteResponse *HandleAttributeDeleteFn(const char * Operation_, const char * XmlArgs_, bool bLeaf_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleBaseAccessControlListResponse *HandleBaseAccessControlListFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleComponentResponse *HandleComponentFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleComputerResponse *HandleComputerFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleEspServiceBindingsResponse *HandleEspServiceBindingsFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleInstanceResponse *HandleInstanceFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleRowsResponse *HandleRowsFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleRoxieOperationResponse *HandleRoxieOperationFn(const char * Cmd_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleThorTopologyResponse *HandleThorTopologyFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientHandleTopologyResponse *HandleTopologyFn(const char * Operation_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientImportBuildResponse *ImportBuildFn(const char * BuildName_, const char * BuildUrl_, const char * BuildSets_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientLockEnvironmentForCloudResponse *LockEnvironmentForCloudFn(const char * Ip_, const char * UserName_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientNavMenuEventResponse *NavMenuEventFn(const char * Cmd_, const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientNotifyInitSystemSaveEnvForCloudResponse *NotifyInitSystemSaveEnvForCloudFn(const char * Ip_, const char * UserName_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientWsDeployPingResponse *PingFn()=0;

	virtual IClientRollbackEnvironmentForCloudResponse *RollbackEnvironmentForCloudFn(const char * Ip_, const char * UserName_, const char * Id_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientSaveEnvironmentForCloudResponse *SaveEnvironmentForCloudFn(const char * Ip_, const char * UserName_, const char * NewEnv_, const char * Id_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientSaveSettingResponse *SaveSettingFn(const char * XmlArgs_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientSetEnvironmentResponse *SetEnvironmentFn(const char * EnvXml_)=0;

	virtual IClientStartDeploymentResponse *StartDeploymentFn(const char * SelComps_, IConstDeployOptions &Options_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientUnlockEnvironmentForCloudResponse *UnlockEnvironmentForCloudFn(const char * Ip_, const char * UserName_, const char * NewEnvXml_, IConstWsDeployReqInfo &ReqInfo_)=0;

	virtual IClientUnlockUserResponse *UnlockUserFn(IConstWsDeployReqInfo &ReqInfo_)=0;
};



#ifndef WsDeploy_API
#define WsDeploy_API
#endif //WsDeploy_API



extern "C" WsDeploy_API IClientWsDeploy * createWsDeployClient();


extern "C"  IEspTask *createTask(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTask *createClientTask(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspComponent *createComponent(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientComponent *createClientComponent(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDeployOptions *createDeployOptions(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDeployOptions *createClientDeployOptions(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspWsDeployReqInfo *createWsDeployReqInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientWsDeployReqInfo *createClientWsDeployReqInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDeployInfo *createDeployInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDeployInfo *createClientDeployInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDaliInfo *createDaliInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDaliInfo *createClientDaliInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspEmptyRequest *createEmptyRequest(const char *serv=NULL);
extern "C"  IClientEmptyRequest *createClientEmptyRequest(const char *serv=NULL);
extern "C"  IEspInitResponse *createInitResponse(const char *serv=NULL);
extern "C"  IClientInitResponse *createClientInitResponse(const char *serv=NULL);
extern "C"  IEspDeployRequest *createDeployRequest(const char *serv=NULL);
extern "C"  IClientDeployRequest *createClientDeployRequest(const char *serv=NULL);
extern "C"  IEspDeployResponse *createDeployResponse(const char *serv=NULL);
extern "C"  IClientDeployResponse *createClientDeployResponse(const char *serv=NULL);
extern "C"  IEspGraphResponse *createGraphResponse(const char *serv=NULL);
extern "C"  IClientGraphResponse *createClientGraphResponse(const char *serv=NULL);
extern "C"  IEspNavMenuEventRequest *createNavMenuEventRequest(const char *serv=NULL);
extern "C"  IClientNavMenuEventRequest *createClientNavMenuEventRequest(const char *serv=NULL);
extern "C"  IEspNavMenuEventResponse *createNavMenuEventResponse(const char *serv=NULL);
extern "C"  IClientNavMenuEventResponse *createClientNavMenuEventResponse(const char *serv=NULL);
extern "C"  IEspDisplaySettingsRequest *createDisplaySettingsRequest(const char *serv=NULL);
extern "C"  IClientDisplaySettingsRequest *createClientDisplaySettingsRequest(const char *serv=NULL);
extern "C"  IEspDisplaySettingsResponse *createDisplaySettingsResponse(const char *serv=NULL);
extern "C"  IClientDisplaySettingsResponse *createClientDisplaySettingsResponse(const char *serv=NULL);
extern "C"  IEspSaveSettingRequest *createSaveSettingRequest(const char *serv=NULL);
extern "C"  IClientSaveSettingRequest *createClientSaveSettingRequest(const char *serv=NULL);
extern "C"  IEspSaveSettingResponse *createSaveSettingResponse(const char *serv=NULL);
extern "C"  IClientSaveSettingResponse *createClientSaveSettingResponse(const char *serv=NULL);
extern "C"  IEspGetBuildSetInfoRequest *createGetBuildSetInfoRequest(const char *serv=NULL);
extern "C"  IClientGetBuildSetInfoRequest *createClientGetBuildSetInfoRequest(const char *serv=NULL);
extern "C"  IEspGetBuildSetInfoResponse *createGetBuildSetInfoResponse(const char *serv=NULL);
extern "C"  IClientGetBuildSetInfoResponse *createClientGetBuildSetInfoResponse(const char *serv=NULL);
extern "C"  IEspGetDeployableCompsRequest *createGetDeployableCompsRequest(const char *serv=NULL);
extern "C"  IClientGetDeployableCompsRequest *createClientGetDeployableCompsRequest(const char *serv=NULL);
extern "C"  IEspGetDeployableCompsResponse *createGetDeployableCompsResponse(const char *serv=NULL);
extern "C"  IClientGetDeployableCompsResponse *createClientGetDeployableCompsResponse(const char *serv=NULL);
extern "C"  IEspStartDeploymentRequest *createStartDeploymentRequest(const char *serv=NULL);
extern "C"  IClientStartDeploymentRequest *createClientStartDeploymentRequest(const char *serv=NULL);
extern "C"  IEspStartDeploymentResponse *createStartDeploymentResponse(const char *serv=NULL);
extern "C"  IClientStartDeploymentResponse *createClientStartDeploymentResponse(const char *serv=NULL);
extern "C"  IEspGetBuildServerDirsRequest *createGetBuildServerDirsRequest(const char *serv=NULL);
extern "C"  IClientGetBuildServerDirsRequest *createClientGetBuildServerDirsRequest(const char *serv=NULL);
extern "C"  IEspGetBuildServerDirsResponse *createGetBuildServerDirsResponse(const char *serv=NULL);
extern "C"  IClientGetBuildServerDirsResponse *createClientGetBuildServerDirsResponse(const char *serv=NULL);
extern "C"  IEspImportBuildRequest *createImportBuildRequest(const char *serv=NULL);
extern "C"  IClientImportBuildRequest *createClientImportBuildRequest(const char *serv=NULL);
extern "C"  IEspImportBuildResponse *createImportBuildResponse(const char *serv=NULL);
extern "C"  IClientImportBuildResponse *createClientImportBuildResponse(const char *serv=NULL);
extern "C"  IEspGetComputersForRoxieRequest *createGetComputersForRoxieRequest(const char *serv=NULL);
extern "C"  IClientGetComputersForRoxieRequest *createClientGetComputersForRoxieRequest(const char *serv=NULL);
extern "C"  IEspGetComputersForRoxieResponse *createGetComputersForRoxieResponse(const char *serv=NULL);
extern "C"  IClientGetComputersForRoxieResponse *createClientGetComputersForRoxieResponse(const char *serv=NULL);
extern "C"  IEspHandleRoxieOperationRequest *createHandleRoxieOperationRequest(const char *serv=NULL);
extern "C"  IClientHandleRoxieOperationRequest *createClientHandleRoxieOperationRequest(const char *serv=NULL);
extern "C"  IEspHandleRoxieOperationResponse *createHandleRoxieOperationResponse(const char *serv=NULL);
extern "C"  IClientHandleRoxieOperationResponse *createClientHandleRoxieOperationResponse(const char *serv=NULL);
extern "C"  IEspHandleThorTopologyRequest *createHandleThorTopologyRequest(const char *serv=NULL);
extern "C"  IClientHandleThorTopologyRequest *createClientHandleThorTopologyRequest(const char *serv=NULL);
extern "C"  IEspHandleThorTopologyResponse *createHandleThorTopologyResponse(const char *serv=NULL);
extern "C"  IClientHandleThorTopologyResponse *createClientHandleThorTopologyResponse(const char *serv=NULL);
extern "C"  IEspHandleAttributeDeleteRequest *createHandleAttributeDeleteRequest(const char *serv=NULL);
extern "C"  IClientHandleAttributeDeleteRequest *createClientHandleAttributeDeleteRequest(const char *serv=NULL);
extern "C"  IEspHandleAttributeAddRequest *createHandleAttributeAddRequest(const char *serv=NULL);
extern "C"  IClientHandleAttributeAddRequest *createClientHandleAttributeAddRequest(const char *serv=NULL);
extern "C"  IEspHandleAttributeAddResponse *createHandleAttributeAddResponse(const char *serv=NULL);
extern "C"  IClientHandleAttributeAddResponse *createClientHandleAttributeAddResponse(const char *serv=NULL);
extern "C"  IEspHandleAttributeDeleteResponse *createHandleAttributeDeleteResponse(const char *serv=NULL);
extern "C"  IClientHandleAttributeDeleteResponse *createClientHandleAttributeDeleteResponse(const char *serv=NULL);
extern "C"  IEspHandleComponentRequest *createHandleComponentRequest(const char *serv=NULL);
extern "C"  IClientHandleComponentRequest *createClientHandleComponentRequest(const char *serv=NULL);
extern "C"  IEspHandleComponentResponse *createHandleComponentResponse(const char *serv=NULL);
extern "C"  IClientHandleComponentResponse *createClientHandleComponentResponse(const char *serv=NULL);
extern "C"  IEspHandleInstanceRequest *createHandleInstanceRequest(const char *serv=NULL);
extern "C"  IClientHandleInstanceRequest *createClientHandleInstanceRequest(const char *serv=NULL);
extern "C"  IEspHandleInstanceResponse *createHandleInstanceResponse(const char *serv=NULL);
extern "C"  IClientHandleInstanceResponse *createClientHandleInstanceResponse(const char *serv=NULL);
extern "C"  IEspAddReqdCompsRequest *createAddReqdCompsRequest(const char *serv=NULL);
extern "C"  IClientAddReqdCompsRequest *createClientAddReqdCompsRequest(const char *serv=NULL);
extern "C"  IEspAddReqdCompsResponse *createAddReqdCompsResponse(const char *serv=NULL);
extern "C"  IClientAddReqdCompsResponse *createClientAddReqdCompsResponse(const char *serv=NULL);
extern "C"  IEspHandleEspServiceBindingsRequest *createHandleEspServiceBindingsRequest(const char *serv=NULL);
extern "C"  IClientHandleEspServiceBindingsRequest *createClientHandleEspServiceBindingsRequest(const char *serv=NULL);
extern "C"  IEspHandleEspServiceBindingsResponse *createHandleEspServiceBindingsResponse(const char *serv=NULL);
extern "C"  IClientHandleEspServiceBindingsResponse *createClientHandleEspServiceBindingsResponse(const char *serv=NULL);
extern "C"  IEspHandleComputerRequest *createHandleComputerRequest(const char *serv=NULL);
extern "C"  IClientHandleComputerRequest *createClientHandleComputerRequest(const char *serv=NULL);
extern "C"  IEspHandleComputerResponse *createHandleComputerResponse(const char *serv=NULL);
extern "C"  IClientHandleComputerResponse *createClientHandleComputerResponse(const char *serv=NULL);
extern "C"  IEspHandleTopologyRequest *createHandleTopologyRequest(const char *serv=NULL);
extern "C"  IClientHandleTopologyRequest *createClientHandleTopologyRequest(const char *serv=NULL);
extern "C"  IEspHandleTopologyResponse *createHandleTopologyResponse(const char *serv=NULL);
extern "C"  IClientHandleTopologyResponse *createClientHandleTopologyResponse(const char *serv=NULL);
extern "C"  IEspHandleRowsRequest *createHandleRowsRequest(const char *serv=NULL);
extern "C"  IClientHandleRowsRequest *createClientHandleRowsRequest(const char *serv=NULL);
extern "C"  IEspHandleRowsResponse *createHandleRowsResponse(const char *serv=NULL);
extern "C"  IClientHandleRowsResponse *createClientHandleRowsResponse(const char *serv=NULL);
extern "C"  IEspHandleAccessRulesRequest *createHandleAccessRulesRequest(const char *serv=NULL);
extern "C"  IClientHandleAccessRulesRequest *createClientHandleAccessRulesRequest(const char *serv=NULL);
extern "C"  IEspHandleBaseAccessControlListRequest *createHandleBaseAccessControlListRequest(const char *serv=NULL);
extern "C"  IClientHandleBaseAccessControlListRequest *createClientHandleBaseAccessControlListRequest(const char *serv=NULL);
extern "C"  IEspHandleAccessRulesResponse *createHandleAccessRulesResponse(const char *serv=NULL);
extern "C"  IClientHandleAccessRulesResponse *createClientHandleAccessRulesResponse(const char *serv=NULL);
extern "C"  IEspHandleBaseAccessControlListResponse *createHandleBaseAccessControlListResponse(const char *serv=NULL);
extern "C"  IClientHandleBaseAccessControlListResponse *createClientHandleBaseAccessControlListResponse(const char *serv=NULL);
extern "C"  IEspGetNavTreeDefnRequest *createGetNavTreeDefnRequest(const char *serv=NULL);
extern "C"  IClientGetNavTreeDefnRequest *createClientGetNavTreeDefnRequest(const char *serv=NULL);
extern "C"  IEspGetNavTreeDefnResponse *createGetNavTreeDefnResponse(const char *serv=NULL);
extern "C"  IClientGetNavTreeDefnResponse *createClientGetNavTreeDefnResponse(const char *serv=NULL);
extern "C"  IEspGetValueRequest *createGetValueRequest(const char *serv=NULL);
extern "C"  IClientGetValueRequest *createClientGetValueRequest(const char *serv=NULL);
extern "C"  IEspGetValueResponse *createGetValueResponse(const char *serv=NULL);
extern "C"  IClientGetValueResponse *createClientGetValueResponse(const char *serv=NULL);
extern "C"  IEspUnlockUserRequest *createUnlockUserRequest(const char *serv=NULL);
extern "C"  IClientUnlockUserRequest *createClientUnlockUserRequest(const char *serv=NULL);
extern "C"  IEspUnlockUserResponse *createUnlockUserResponse(const char *serv=NULL);
extern "C"  IClientUnlockUserResponse *createClientUnlockUserResponse(const char *serv=NULL);
extern "C"  IEspClientAliveRequest *createClientAliveRequest(const char *serv=NULL);
extern "C"  IClientClientAliveRequest *createClientClientAliveRequest(const char *serv=NULL);
extern "C"  IEspClientAliveResponse *createClientAliveResponse(const char *serv=NULL);
extern "C"  IClientClientAliveResponse *createClientClientAliveResponse(const char *serv=NULL);
extern "C"  IEspGetEnvironmentRequest *createGetEnvironmentRequest(const char *serv=NULL);
extern "C"  IClientGetEnvironmentRequest *createClientGetEnvironmentRequest(const char *serv=NULL);
extern "C"  IEspGetEnvironmentResponse *createGetEnvironmentResponse(const char *serv=NULL);
extern "C"  IClientGetEnvironmentResponse *createClientGetEnvironmentResponse(const char *serv=NULL);
extern "C"  IEspSetEnvironmentRequest *createSetEnvironmentRequest(const char *serv=NULL);
extern "C"  IClientSetEnvironmentRequest *createClientSetEnvironmentRequest(const char *serv=NULL);
extern "C"  IEspSetEnvironmentResponse *createSetEnvironmentResponse(const char *serv=NULL);
extern "C"  IClientSetEnvironmentResponse *createClientSetEnvironmentResponse(const char *serv=NULL);
extern "C"  IEspLockEnvironmentForCloudRequest *createLockEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IClientLockEnvironmentForCloudRequest *createClientLockEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IEspLockEnvironmentForCloudResponse *createLockEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IClientLockEnvironmentForCloudResponse *createClientLockEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IEspUnlockEnvironmentForCloudRequest *createUnlockEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IClientUnlockEnvironmentForCloudRequest *createClientUnlockEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IEspUnlockEnvironmentForCloudResponse *createUnlockEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IClientUnlockEnvironmentForCloudResponse *createClientUnlockEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IEspSaveEnvironmentForCloudRequest *createSaveEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IClientSaveEnvironmentForCloudRequest *createClientSaveEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IEspSaveEnvironmentForCloudResponse *createSaveEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IClientSaveEnvironmentForCloudResponse *createClientSaveEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IEspRollbackEnvironmentForCloudRequest *createRollbackEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IClientRollbackEnvironmentForCloudRequest *createClientRollbackEnvironmentForCloudRequest(const char *serv=NULL);
extern "C"  IEspRollbackEnvironmentForCloudResponse *createRollbackEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IClientRollbackEnvironmentForCloudResponse *createClientRollbackEnvironmentForCloudResponse(const char *serv=NULL);
extern "C"  IEspNotifyInitSystemSaveEnvForCloudRequest *createNotifyInitSystemSaveEnvForCloudRequest(const char *serv=NULL);
extern "C"  IClientNotifyInitSystemSaveEnvForCloudRequest *createClientNotifyInitSystemSaveEnvForCloudRequest(const char *serv=NULL);
extern "C"  IEspNotifyInitSystemSaveEnvForCloudResponse *createNotifyInitSystemSaveEnvForCloudResponse(const char *serv=NULL);
extern "C"  IClientNotifyInitSystemSaveEnvForCloudResponse *createClientNotifyInitSystemSaveEnvForCloudResponse(const char *serv=NULL);
extern "C"  IEspBuildEnvironmentRequest *createBuildEnvironmentRequest(const char *serv=NULL);
extern "C"  IClientBuildEnvironmentRequest *createClientBuildEnvironmentRequest(const char *serv=NULL);
extern "C"  IEspBuildEnvironmentResponse *createBuildEnvironmentResponse(const char *serv=NULL);
extern "C"  IClientBuildEnvironmentResponse *createClientBuildEnvironmentResponse(const char *serv=NULL);
extern "C"  IEspGetSubnetIPAddrRequest *createGetSubnetIPAddrRequest(const char *serv=NULL);
extern "C"  IClientGetSubnetIPAddrRequest *createClientGetSubnetIPAddrRequest(const char *serv=NULL);
extern "C"  IEspGetSubnetIPAddrResponse *createGetSubnetIPAddrResponse(const char *serv=NULL);
extern "C"  IClientGetSubnetIPAddrResponse *createClientGetSubnetIPAddrResponse(const char *serv=NULL);
extern "C"  IEspGetSummaryRequest *createGetSummaryRequest(const char *serv=NULL);
extern "C"  IClientGetSummaryRequest *createClientGetSummaryRequest(const char *serv=NULL);
extern "C"  IEspGetSummaryResponse *createGetSummaryResponse(const char *serv=NULL);
extern "C"  IClientGetSummaryResponse *createClientGetSummaryResponse(const char *serv=NULL);
extern "C"  IEspWsDeployPingRequest *createWsDeployPingRequest(const char *serv=NULL);
extern "C"  IClientWsDeployPingRequest *createClientWsDeployPingRequest(const char *serv=NULL);
extern "C"  IEspWsDeployPingResponse *createWsDeployPingResponse(const char *serv=NULL);
extern "C"  IClientWsDeployPingResponse *createClientWsDeployPingResponse(const char *serv=NULL);

#endif // _WsDeploy_SCM_INCL
//end
