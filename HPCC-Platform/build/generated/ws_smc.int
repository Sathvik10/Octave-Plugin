! Clarion SCM Interfaces
! Include file generated by HIDL Version 1.3 from ws_smc.ecm
! *** Not to be hand edited (changes will be lost on re-generation) ***

  OMIT('EndOfInclude',_ws_smc_I_)
_ws_smc_I_ EQUATE(1)

  INCLUDE('SCM.INT'),ONCE

cppClientActiveWorkunit  INTERFACE(cppInterface),COM
setWuid          PROCEDURE(CONST *CSTRING Wuid),PROC
setState         PROCEDURE(CONST *CSTRING State),PROC
setStateID       PROCEDURE(LONG StateID),PROC
setOwner         PROCEDURE(CONST *CSTRING Owner),PROC
setJobname       PROCEDURE(CONST *CSTRING Jobname),PROC
setServer        PROCEDURE(CONST *CSTRING Server),PROC
setInstance      PROCEDURE(strint Instance),PROC
setPriority      PROCEDURE(CONST *CSTRING Priority),PROC
setExtra         PROCEDURE(CONST *CSTRING Extra),PROC
setGraphName     PROCEDURE(CONST *CSTRING GraphName),PROC
setDuration      PROCEDURE(CONST *CSTRING Duration),PROC
setGID           PROCEDURE(CONST *CSTRING GID),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setMemoryBlocked  PROCEDURE(LONG MemoryBlocked),PROC
setIsPausing     PROCEDURE(CBOOL IsPausing),PROC
setWarning       PROCEDURE(CONST *CSTRING Warning),PROC
setClusterName   PROCEDURE(CONST *CSTRING ClusterName),PROC
setClusterType   PROCEDURE(CONST *CSTRING ClusterType),PROC
setClusterQueueName  PROCEDURE(CONST *CSTRING ClusterQueueName),PROC
setTargetClusterName  PROCEDURE(CONST *CSTRING TargetClusterName),PROC
getWuid          PROCEDURE(),*CSTRING,PROC
getState         PROCEDURE(),*CSTRING,PROC
getStateID       PROCEDURE(),LONG,PROC
getOwner         PROCEDURE(),*CSTRING,PROC
getJobname       PROCEDURE(),*CSTRING,PROC
getServer        PROCEDURE(),*CSTRING,PROC
getInstance      PROCEDURE(),strint,PROC
getPriority      PROCEDURE(),*CSTRING,PROC
getExtra         PROCEDURE(),*CSTRING,PROC
getGraphName     PROCEDURE(),*CSTRING,PROC
getDuration      PROCEDURE(),*CSTRING,PROC
getGID           PROCEDURE(),*CSTRING,PROC
getQueueName     PROCEDURE(),*CSTRING,PROC
getMemoryBlocked  PROCEDURE(),LONG,PROC
getIsPausing     PROCEDURE(),CBOOL,PROC
getWarning       PROCEDURE(),*CSTRING,PROC
getClusterName   PROCEDURE(),*CSTRING,PROC
getClusterType   PROCEDURE(),*CSTRING,PROC
getClusterQueueName  PROCEDURE(),*CSTRING,PROC
getTargetClusterName  PROCEDURE(),*CSTRING,PROC
    END



cppClientTargetCluster  INTERFACE(cppInterface),COM
setClusterName   PROCEDURE(CONST *CSTRING ClusterName),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setQueueStatus   PROCEDURE(CONST *CSTRING QueueStatus),PROC
setStatusDetails  PROCEDURE(CONST *CSTRING StatusDetails),PROC
setWarning       PROCEDURE(CONST *CSTRING Warning),PROC
setClusterType   PROCEDURE(LONG ClusterType),PROC
setClusterSize   PROCEDURE(LONG ClusterSize),PROC
setClusterStatus  PROCEDURE(LONG ClusterStatus),PROC
getClusterName   PROCEDURE(),*CSTRING,PROC
getQueueName     PROCEDURE(),*CSTRING,PROC
getQueueStatus   PROCEDURE(),*CSTRING,PROC
getStatusDetails  PROCEDURE(),*CSTRING,PROC
getWarning       PROCEDURE(),*CSTRING,PROC
getClusterType   PROCEDURE(),LONG,PROC
getClusterSize   PROCEDURE(),LONG,PROC
getClusterStatus  PROCEDURE(),LONG,PROC
    END



cppClientThorCluster  INTERFACE(cppInterface),COM
setClusterName   PROCEDURE(CONST *CSTRING ClusterName),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setQueueStatus   PROCEDURE(CONST *CSTRING QueueStatus),PROC
setQueueAvailable  PROCEDURE(LONG QueueAvailable),PROC
setJobsRunning   PROCEDURE(LONG JobsRunning),PROC
setJobsInQueue   PROCEDURE(LONG JobsInQueue),PROC
setQueueStatus2  PROCEDURE(LONG QueueStatus2),PROC
setThorLCR       PROCEDURE(CONST *CSTRING ThorLCR),PROC
setClusterSize   PROCEDURE(LONG ClusterSize),PROC
getClusterName   PROCEDURE(),*CSTRING,PROC
getQueueName     PROCEDURE(),*CSTRING,PROC
getQueueStatus   PROCEDURE(),*CSTRING,PROC
getQueueAvailable  PROCEDURE(),LONG,PROC
getJobsRunning   PROCEDURE(),LONG,PROC
getJobsInQueue   PROCEDURE(),LONG,PROC
getQueueStatus2  PROCEDURE(),LONG,PROC
getThorLCR       PROCEDURE(),*CSTRING,PROC
getClusterSize   PROCEDURE(),LONG,PROC
    END



cppClientHThorCluster  INTERFACE(cppInterface),COM
setClusterName   PROCEDURE(CONST *CSTRING ClusterName),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setQueueStatus   PROCEDURE(CONST *CSTRING QueueStatus),PROC
setJobsRunning   PROCEDURE(LONG JobsRunning),PROC
setJobsInQueue   PROCEDURE(LONG JobsInQueue),PROC
setQueueStatus2  PROCEDURE(LONG QueueStatus2),PROC
setClusterSize   PROCEDURE(LONG ClusterSize),PROC
getClusterName   PROCEDURE(),*CSTRING,PROC
getQueueName     PROCEDURE(),*CSTRING,PROC
getQueueStatus   PROCEDURE(),*CSTRING,PROC
getJobsRunning   PROCEDURE(),LONG,PROC
getJobsInQueue   PROCEDURE(),LONG,PROC
getQueueStatus2  PROCEDURE(),LONG,PROC
getClusterSize   PROCEDURE(),LONG,PROC
    END



cppClientRoxieCluster  INTERFACE(cppInterface),COM
setClusterName   PROCEDURE(CONST *CSTRING ClusterName),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setQueueStatus   PROCEDURE(CONST *CSTRING QueueStatus),PROC
setJobsRunning   PROCEDURE(LONG JobsRunning),PROC
setJobsInQueue   PROCEDURE(LONG JobsInQueue),PROC
setQueueStatus2  PROCEDURE(LONG QueueStatus2),PROC
setClusterSize   PROCEDURE(LONG ClusterSize),PROC
getClusterName   PROCEDURE(),*CSTRING,PROC
getQueueName     PROCEDURE(),*CSTRING,PROC
getQueueStatus   PROCEDURE(),*CSTRING,PROC
getJobsRunning   PROCEDURE(),LONG,PROC
getJobsInQueue   PROCEDURE(),LONG,PROC
getQueueStatus2  PROCEDURE(),LONG,PROC
getClusterSize   PROCEDURE(),LONG,PROC
    END



cppClientDFUJob  INTERFACE(cppInterface),COM
setTimeStarted   PROCEDURE(CONST *CSTRING TimeStarted),PROC
setDone          PROCEDURE(LONG Done),PROC
setTotal         PROCEDURE(LONG Total),PROC
setCommand       PROCEDURE(CONST *CSTRING Command),PROC
getTimeStarted   PROCEDURE(),*CSTRING,PROC
getDone          PROCEDURE(),LONG,PROC
getTotal         PROCEDURE(),LONG,PROC
getCommand       PROCEDURE(),*CSTRING,PROC
    END



cppClientServerJobQueue  INTERFACE(cppInterface),COM
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setQueueNames    PROCEDURE(CONST *CSTRING QueueNames),PROC
setQueues        PROCEDURE(CONST *CSTRING Queues),PROC
setServerName    PROCEDURE(CONST *CSTRING ServerName),PROC
setServerType    PROCEDURE(CONST *CSTRING ServerType),PROC
setQueueStatus   PROCEDURE(CONST *CSTRING QueueStatus),PROC
setStatusDetails  PROCEDURE(CONST *CSTRING StatusDetails),PROC
setNetworkAddress  PROCEDURE(CONST *CSTRING NetworkAddress),PROC
setPort          PROCEDURE(LONG Port),PROC
getQueueName     PROCEDURE(),*CSTRING,PROC
getQueueNames    PROCEDURE(),*CSTRING,PROC
getQueues        PROCEDURE(),*CSTRING,PROC
getServerName    PROCEDURE(),*CSTRING,PROC
getServerType    PROCEDURE(),*CSTRING,PROC
getQueueStatus   PROCEDURE(),*CSTRING,PROC
getStatusDetails  PROCEDURE(),*CSTRING,PROC
getNetworkAddress  PROCEDURE(),*CSTRING,PROC
getPort          PROCEDURE(),LONG,PROC
    END



cppClientStatusServerInfo  INTERFACE(cppInterface),COM
setTargetClusterInfo  PROCEDURE(TargetCluster TargetClusterInfo),PROC
setServerInfo    PROCEDURE(ServerJobQueue ServerInfo),PROC
setWorkunits     PROCEDURE(CONST *CSTRING Workunits),PROC
getTargetClusterInfo  PROCEDURE(),TargetCluster,PROC
getServerInfo    PROCEDURE(),ServerJobQueue,PROC
getWorkunits     PROCEDURE(),*CSTRING,PROC
    END



cppClientActivityRequest  INTERFACE(cppInterface),COM
setChatURL       PROCEDURE(CONST *CSTRING ChatURL),PROC
setBannerContent  PROCEDURE(CONST *CSTRING BannerContent),PROC
setBannerColor   PROCEDURE(CONST *CSTRING BannerColor),PROC
setBannerSize    PROCEDURE(CONST *CSTRING BannerSize),PROC
setBannerScroll  PROCEDURE(CONST *CSTRING BannerScroll),PROC
setBannerAction  PROCEDURE(LONG BannerAction),PROC
setEnableChatURL  PROCEDURE(CBOOL EnableChatURL),PROC
setFromSubmitBtn  PROCEDURE(CBOOL FromSubmitBtn),PROC
setSortBy        PROCEDURE(CONST *CSTRING SortBy),PROC
setDescending    PROCEDURE(CBOOL Descending),PROC
    END



cppClientActivityResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getBuild         PROCEDURE(),*CSTRING,PROC
getThorClusters  PROCEDURE(),*CSTRING,PROC
getRoxieClusters  PROCEDURE(),*CSTRING,PROC
getHThorClusters  PROCEDURE(),*CSTRING,PROC
getThorClusterList  PROCEDURE(),*CSTRING,PROC
getRoxieClusterList  PROCEDURE(),*CSTRING,PROC
getHThorClusterList  PROCEDURE(),*CSTRING,PROC
getDFUJobs       PROCEDURE(),*CSTRING,PROC
getRunning       PROCEDURE(),*CSTRING,PROC
getBannerContent  PROCEDURE(),*CSTRING,PROC
getBannerColor   PROCEDURE(),*CSTRING,PROC
getBannerSize    PROCEDURE(),*CSTRING,PROC
getBannerScroll  PROCEDURE(),*CSTRING,PROC
getChatURL       PROCEDURE(),*CSTRING,PROC
getShowBanner    PROCEDURE(),LONG,PROC
getShowChatURL   PROCEDURE(),LONG,PROC
getSortBy        PROCEDURE(),*CSTRING,PROC
getDescending    PROCEDURE(),CBOOL,PROC
getSuperUser     PROCEDURE(),CBOOL,PROC
getAccessRight   PROCEDURE(),*CSTRING,PROC
getServerJobQueues  PROCEDURE(),*CSTRING,PROC
    END



cppClientSMCIndexRequest  INTERFACE(cppInterface),COM
    END



cppClientSMCIndexResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
    END



cppClientCapability  INTERFACE(cppInterface),COM
setName          PROCEDURE(CONST *CSTRING name),PROC
setDescription   PROCEDURE(CONST *CSTRING description),PROC
getName          PROCEDURE(),*CSTRING,PROC
getDescription   PROCEDURE(),*CSTRING,PROC
    END



cppClientPermission  INTERFACE(cppInterface),COM
setFeature       PROCEDURE(CONST *CSTRING Feature),PROC
setCapabilities  PROCEDURE(CONST *CSTRING Capabilities),PROC
getFeature       PROCEDURE(),*CSTRING,PROC
getCapabilities  PROCEDURE(),*CSTRING,PROC
    END



cppClientSMCPermissionsRequest  INTERFACE(cppInterface),COM
    END



cppClientSMCPermissionsResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getPermissions   PROCEDURE(),*CSTRING,PROC
    END



cppClientSMCQueueRequest  INTERFACE(cppInterface),COM
setCluster       PROCEDURE(CONST *CSTRING Cluster),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setComment       PROCEDURE(CONST *CSTRING Comment),PROC
setServerType    PROCEDURE(CONST *CSTRING ServerType),PROC
setNetworkAddress  PROCEDURE(CONST *CSTRING NetworkAddress),PROC
setPort          PROCEDURE(LONG Port),PROC
    END



cppClientSMCQueueResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatusServerInfo  PROCEDURE(),StatusServerInfo,PROC
    END



cppClientSMCJobRequest  INTERFACE(cppInterface),COM
setClusterType   PROCEDURE(LONG ClusterType),PROC
setCluster       PROCEDURE(CONST *CSTRING Cluster),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setWuid          PROCEDURE(CONST *CSTRING Wuid),PROC
    END



cppClientSMCJobResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
    END



cppClientSMCJob  INTERFACE(cppInterface),COM
setWuid          PROCEDURE(CONST *CSTRING Wuid),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
getWuid          PROCEDURE(),*CSTRING,PROC
getQueueName     PROCEDURE(),*CSTRING,PROC
    END



cppClientSMCPriorityRequest  INTERFACE(cppInterface),COM
setClusterType   PROCEDURE(LONG ClusterType),PROC
setCluster       PROCEDURE(CONST *CSTRING Cluster),PROC
setQueueName     PROCEDURE(CONST *CSTRING QueueName),PROC
setWuid          PROCEDURE(CONST *CSTRING Wuid),PROC
setPriority      PROCEDURE(CONST *CSTRING Priority),PROC
setSMCJobs       PROCEDURE(CONST *CSTRING SMCJobs),PROC
    END



cppClientSMCPriorityResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
    END



cppClientGetThorQueueAvailabilityRequest  INTERFACE(cppInterface),COM
    END



cppClientGetThorQueueAvailabilityResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getThorClusters  PROCEDURE(),*CSTRING,PROC
    END



cppClientSetBannerRequest  INTERFACE(cppInterface),COM
setChatURL       PROCEDURE(CONST *CSTRING ChatURL),PROC
setBannerContent  PROCEDURE(CONST *CSTRING BannerContent),PROC
setBannerColor   PROCEDURE(CONST *CSTRING BannerColor),PROC
setBannerSize    PROCEDURE(CONST *CSTRING BannerSize),PROC
setBannerScroll  PROCEDURE(CONST *CSTRING BannerScroll),PROC
setBannerAction  PROCEDURE(LONG BannerAction),PROC
setEnableChatURL  PROCEDURE(CBOOL EnableChatURL),PROC
setFromSubmitBtn  PROCEDURE(CBOOL FromSubmitBtn),PROC
    END



cppClientSetBannerResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
    END



cppClientNotInCommunityEditionRequest  INTERFACE(cppInterface),COM
setEEPortal      PROCEDURE(CONST *CSTRING EEPortal),PROC
    END



cppClientNotInCommunityEditionResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
    END



cppClientHPCCResource  INTERFACE(cppInterface),COM
setName          PROCEDURE(CONST *CSTRING Name),PROC
setDescription   PROCEDURE(CONST *CSTRING Description),PROC
setFileName      PROCEDURE(CONST *CSTRING FileName),PROC
setVersion       PROCEDURE(CONST *CSTRING Version),PROC
getName          PROCEDURE(),*CSTRING,PROC
getDescription   PROCEDURE(),*CSTRING,PROC
getFileName      PROCEDURE(),*CSTRING,PROC
getVersion       PROCEDURE(),*CSTRING,PROC
    END



cppClientHPCCResourceRepository  INTERFACE(cppInterface),COM
setName          PROCEDURE(CONST *CSTRING Name),PROC
setPath          PROCEDURE(CONST *CSTRING Path),PROC
setHPCCResources  PROCEDURE(CONST *CSTRING HPCCResources),PROC
getName          PROCEDURE(),*CSTRING,PROC
getPath          PROCEDURE(),*CSTRING,PROC
getHPCCResources  PROCEDURE(),*CSTRING,PROC
    END



cppClientBrowseResourcesRequest  INTERFACE(cppInterface),COM
    END



cppClientBrowseResourcesResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getPortalURL     PROCEDURE(),*CSTRING,PROC
getNetAddress    PROCEDURE(),*CSTRING,PROC
getOS            PROCEDURE(),LONG,PROC
getUseResource   PROCEDURE(),CBOOL,PROC
getHPCCResourceRepositories  PROCEDURE(),*CSTRING,PROC
    END



cppClientRoxieControlCmdType  INTERFACE(cppInterface),COM
getATTACH        PROCEDURE(),,PROC
getDETACH        PROCEDURE(),,PROC
getSTATE         PROCEDURE(),,PROC
getRELOAD        PROCEDURE(),,PROC
getRELOAD_RETRY  PROCEDURE(),,PROC
    END



cppClientRoxieControlCmdRequest  INTERFACE(cppInterface),COM
setProcessCluster  PROCEDURE(CONST *CSTRING ProcessCluster),PROC
setCommand       PROCEDURE(RoxieControlCmdType Command),PROC
setWait          PROCEDURE(LONG Wait),PROC
    END



cppClientRoxieControlEndpointInfo  INTERFACE(cppInterface),COM
setAddress       PROCEDURE(CONST *CSTRING Address),PROC
setAttached      PROCEDURE(CBOOL Attached),PROC
setStateHash     PROCEDURE(CONST *CSTRING StateHash),PROC
setStatus        PROCEDURE(CONST *CSTRING Status),PROC
getAddress       PROCEDURE(),*CSTRING,PROC
getAttached      PROCEDURE(),CBOOL,PROC
getStateHash     PROCEDURE(),*CSTRING,PROC
getStatus        PROCEDURE(),*CSTRING,PROC
    END



cppClientRoxieControlCmdResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getEndpoints     PROCEDURE(),*CSTRING,PROC
    END



cppClientGetStatusServerInfoRequest  INTERFACE(cppInterface),COM
setServerName    PROCEDURE(CONST *CSTRING ServerName),PROC
setServerType    PROCEDURE(CONST *CSTRING ServerType),PROC
setNetworkAddress  PROCEDURE(CONST *CSTRING NetworkAddress),PROC
setPort          PROCEDURE(LONG Port),PROC
    END



cppClientGetStatusServerInfoResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getStatusServerInfo  PROCEDURE(),StatusServerInfo,PROC
    END



cppClientLockModes  INTERFACE(cppInterface),COM
getALL           PROCEDURE(),,PROC
getREAD          PROCEDURE(),,PROC
getWRITE         PROCEDURE(),,PROC
getHOLD          PROCEDURE(),,PROC
getSUB           PROCEDURE(),,PROC
    END



cppClientLock  INTERFACE(cppInterface),COM
setEPIP          PROCEDURE(CONST *CSTRING EPIP),PROC
setXPath         PROCEDURE(CONST *CSTRING XPath),PROC
setLogicalFile   PROCEDURE(CONST *CSTRING LogicalFile),PROC
setSessionID     PROCEDURE(int64 SessionID),PROC
setDurationMS    PROCEDURE(ULONG DurationMS),PROC
setTimeLocked    PROCEDURE(CONST *CSTRING TimeLocked),PROC
setModes         PROCEDURE(CONST *CSTRING Modes),PROC
setModeNames     PROCEDURE(CONST *CSTRING ModeNames),PROC
getEPIP          PROCEDURE(),*CSTRING,PROC
getXPath         PROCEDURE(),*CSTRING,PROC
getLogicalFile   PROCEDURE(),*CSTRING,PROC
getSessionID     PROCEDURE(),int64,PROC
getDurationMS    PROCEDURE(),ULONG,PROC
getTimeLocked    PROCEDURE(),*CSTRING,PROC
getModes         PROCEDURE(),*CSTRING,PROC
getModeNames     PROCEDURE(),*CSTRING,PROC
    END



cppClientLockQueryRequest  INTERFACE(cppInterface),COM
setEPIP          PROCEDURE(CONST *CSTRING EPIP),PROC
setXPath         PROCEDURE(CONST *CSTRING XPath),PROC
setDurationMSLow  PROCEDURE(ULONG DurationMSLow),PROC
setDurationMSHigh  PROCEDURE(ULONG DurationMSHigh),PROC
setTimeLockedLow  PROCEDURE(CONST *CSTRING TimeLockedLow),PROC
setTimeLockedHigh  PROCEDURE(CONST *CSTRING TimeLockedHigh),PROC
setMode          PROCEDURE(LockModes Mode),PROC
setAllFileLocks  PROCEDURE(CBOOL AllFileLocks),PROC
    END



cppClientLockQueryResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
getLocks         PROCEDURE(),*CSTRING,PROC
getNumLocks      PROCEDURE(),LONG,PROC
    END



cppClientWsSMCPingRequest  INTERFACE(cppInterface),COM
    END



cppClientWsSMCPingResponse  INTERFACE(cppInterface),COM
queryClientStatus  PROCEDURE(),LONG,PROC
    END



cppClientWsSMCEvents INTERFACE(cppInterface),COM
onActivityComplete PROCEDURE(*cppClientActivityResponse resp),PROC
onActivityError PROCEDURE(*cppClientActivityResponse resp),PROC
onBrowseResourcesComplete PROCEDURE(*cppClientBrowseResourcesResponse resp),PROC
onBrowseResourcesError PROCEDURE(*cppClientBrowseResourcesResponse resp),PROC
onClearQueueComplete PROCEDURE(*cppClientSMCQueueResponse resp),PROC
onClearQueueError PROCEDURE(*cppClientSMCQueueResponse resp),PROC
onGetStatusServerInfoComplete PROCEDURE(*cppClientGetStatusServerInfoResponse resp),PROC
onGetStatusServerInfoError PROCEDURE(*cppClientGetStatusServerInfoResponse resp),PROC
onGetThorQueueAvailabilityComplete PROCEDURE(*cppClientGetThorQueueAvailabilityResponse resp),PROC
onGetThorQueueAvailabilityError PROCEDURE(*cppClientGetThorQueueAvailabilityResponse resp),PROC
onIndexComplete PROCEDURE(*cppClientSMCIndexResponse resp),PROC
onIndexError PROCEDURE(*cppClientSMCIndexResponse resp),PROC
onLockQueryComplete PROCEDURE(*cppClientLockQueryResponse resp),PROC
onLockQueryError PROCEDURE(*cppClientLockQueryResponse resp),PROC
onMoveJobBackComplete PROCEDURE(*cppClientSMCJobResponse resp),PROC
onMoveJobBackError PROCEDURE(*cppClientSMCJobResponse resp),PROC
onMoveJobDownComplete PROCEDURE(*cppClientSMCJobResponse resp),PROC
onMoveJobDownError PROCEDURE(*cppClientSMCJobResponse resp),PROC
onMoveJobFrontComplete PROCEDURE(*cppClientSMCJobResponse resp),PROC
onMoveJobFrontError PROCEDURE(*cppClientSMCJobResponse resp),PROC
onMoveJobUpComplete PROCEDURE(*cppClientSMCJobResponse resp),PROC
onMoveJobUpError PROCEDURE(*cppClientSMCJobResponse resp),PROC
onNotInCommunityEditionComplete PROCEDURE(*cppClientNotInCommunityEditionResponse resp),PROC
onNotInCommunityEditionError PROCEDURE(*cppClientNotInCommunityEditionResponse resp),PROC
onPauseQueueComplete PROCEDURE(*cppClientSMCQueueResponse resp),PROC
onPauseQueueError PROCEDURE(*cppClientSMCQueueResponse resp),PROC
onPingComplete PROCEDURE(*cppClientWsSMCPingResponse resp),PROC
onPingError PROCEDURE(*cppClientWsSMCPingResponse resp),PROC
onRemoveJobComplete PROCEDURE(*cppClientSMCJobResponse resp),PROC
onRemoveJobError PROCEDURE(*cppClientSMCJobResponse resp),PROC
onResumeQueueComplete PROCEDURE(*cppClientSMCQueueResponse resp),PROC
onResumeQueueError PROCEDURE(*cppClientSMCQueueResponse resp),PROC
onRoxieControlCmdComplete PROCEDURE(*cppClientRoxieControlCmdResponse resp),PROC
onRoxieControlCmdError PROCEDURE(*cppClientRoxieControlCmdResponse resp),PROC
onSetBannerComplete PROCEDURE(*cppClientSetBannerResponse resp),PROC
onSetBannerError PROCEDURE(*cppClientSetBannerResponse resp),PROC
onSetJobPriorityComplete PROCEDURE(*cppClientSMCPriorityResponse resp),PROC
onSetJobPriorityError PROCEDURE(*cppClientSMCPriorityResponse resp),PROC
onStopQueueComplete PROCEDURE(*cppClientSMCQueueResponse resp),PROC
onStopQueueError PROCEDURE(*cppClientSMCQueueResponse resp),PROC

 END

cppClientWsSMC INTERFACE(cppInterface),COM
setProxyAddress  PROCEDURE(CONST *CSTRING address),PROC
addServiceUrl  PROCEDURE(CONST *CSTRING url),PROC
removeServiceUrl  PROCEDURE(CONST *CSTRING url),PROC
setUsernameToken  PROCEDURE(CONST *CSTRING Username,CONST *CSTRING Password,CONST *CSTRING Realm ),PROC
createActivityRequest  PROCEDURE(),*cppClientActivityRequest,PROC
Activity  PROCEDURE(*cppClientActivityRequest request),*cppClientActivityResponse,PROC
async_Activity  PROCEDURE(*cppClientActivityRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createBrowseResourcesRequest  PROCEDURE(),*cppClientBrowseResourcesRequest,PROC
BrowseResources  PROCEDURE(*cppClientBrowseResourcesRequest request),*cppClientBrowseResourcesResponse,PROC
async_BrowseResources  PROCEDURE(*cppClientBrowseResourcesRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createClearQueueRequest  PROCEDURE(),*cppClientSMCQueueRequest,PROC
ClearQueue  PROCEDURE(*cppClientSMCQueueRequest request),*cppClientSMCQueueResponse,PROC
async_ClearQueue  PROCEDURE(*cppClientSMCQueueRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createGetStatusServerInfoRequest  PROCEDURE(),*cppClientGetStatusServerInfoRequest,PROC
GetStatusServerInfo  PROCEDURE(*cppClientGetStatusServerInfoRequest request),*cppClientGetStatusServerInfoResponse,PROC
async_GetStatusServerInfo  PROCEDURE(*cppClientGetStatusServerInfoRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createGetThorQueueAvailabilityRequest  PROCEDURE(),*cppClientGetThorQueueAvailabilityRequest,PROC
GetThorQueueAvailability  PROCEDURE(*cppClientGetThorQueueAvailabilityRequest request),*cppClientGetThorQueueAvailabilityResponse,PROC
async_GetThorQueueAvailability  PROCEDURE(*cppClientGetThorQueueAvailabilityRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createIndexRequest  PROCEDURE(),*cppClientSMCIndexRequest,PROC
Index  PROCEDURE(*cppClientSMCIndexRequest request),*cppClientSMCIndexResponse,PROC
async_Index  PROCEDURE(*cppClientSMCIndexRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createLockQueryRequest  PROCEDURE(),*cppClientLockQueryRequest,PROC
LockQuery  PROCEDURE(*cppClientLockQueryRequest request),*cppClientLockQueryResponse,PROC
async_LockQuery  PROCEDURE(*cppClientLockQueryRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createMoveJobBackRequest  PROCEDURE(),*cppClientSMCJobRequest,PROC
MoveJobBack  PROCEDURE(*cppClientSMCJobRequest request),*cppClientSMCJobResponse,PROC
async_MoveJobBack  PROCEDURE(*cppClientSMCJobRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createMoveJobDownRequest  PROCEDURE(),*cppClientSMCJobRequest,PROC
MoveJobDown  PROCEDURE(*cppClientSMCJobRequest request),*cppClientSMCJobResponse,PROC
async_MoveJobDown  PROCEDURE(*cppClientSMCJobRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createMoveJobFrontRequest  PROCEDURE(),*cppClientSMCJobRequest,PROC
MoveJobFront  PROCEDURE(*cppClientSMCJobRequest request),*cppClientSMCJobResponse,PROC
async_MoveJobFront  PROCEDURE(*cppClientSMCJobRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createMoveJobUpRequest  PROCEDURE(),*cppClientSMCJobRequest,PROC
MoveJobUp  PROCEDURE(*cppClientSMCJobRequest request),*cppClientSMCJobResponse,PROC
async_MoveJobUp  PROCEDURE(*cppClientSMCJobRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createNotInCommunityEditionRequest  PROCEDURE(),*cppClientNotInCommunityEditionRequest,PROC
NotInCommunityEdition  PROCEDURE(*cppClientNotInCommunityEditionRequest request),*cppClientNotInCommunityEditionResponse,PROC
async_NotInCommunityEdition  PROCEDURE(*cppClientNotInCommunityEditionRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createPauseQueueRequest  PROCEDURE(),*cppClientSMCQueueRequest,PROC
PauseQueue  PROCEDURE(*cppClientSMCQueueRequest request),*cppClientSMCQueueResponse,PROC
async_PauseQueue  PROCEDURE(*cppClientSMCQueueRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createPingRequest  PROCEDURE(),*cppClientWsSMCPingRequest,PROC
Ping  PROCEDURE(*cppClientWsSMCPingRequest request),*cppClientWsSMCPingResponse,PROC
async_Ping  PROCEDURE(*cppClientWsSMCPingRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createRemoveJobRequest  PROCEDURE(),*cppClientSMCJobRequest,PROC
RemoveJob  PROCEDURE(*cppClientSMCJobRequest request),*cppClientSMCJobResponse,PROC
async_RemoveJob  PROCEDURE(*cppClientSMCJobRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createResumeQueueRequest  PROCEDURE(),*cppClientSMCQueueRequest,PROC
ResumeQueue  PROCEDURE(*cppClientSMCQueueRequest request),*cppClientSMCQueueResponse,PROC
async_ResumeQueue  PROCEDURE(*cppClientSMCQueueRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createRoxieControlCmdRequest  PROCEDURE(),*cppClientRoxieControlCmdRequest,PROC
RoxieControlCmd  PROCEDURE(*cppClientRoxieControlCmdRequest request),*cppClientRoxieControlCmdResponse,PROC
async_RoxieControlCmd  PROCEDURE(*cppClientRoxieControlCmdRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createSetBannerRequest  PROCEDURE(),*cppClientSetBannerRequest,PROC
SetBanner  PROCEDURE(*cppClientSetBannerRequest request),*cppClientSetBannerResponse,PROC
async_SetBanner  PROCEDURE(*cppClientSetBannerRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createSetJobPriorityRequest  PROCEDURE(),*cppClientSMCPriorityRequest,PROC
SetJobPriority  PROCEDURE(*cppClientSMCPriorityRequest request),*cppClientSMCPriorityResponse,PROC
async_SetJobPriority  PROCEDURE(*cppClientSMCPriorityRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC
createStopQueueRequest  PROCEDURE(),*cppClientSMCQueueRequest,PROC
StopQueue  PROCEDURE(*cppClientSMCQueueRequest request),*cppClientSMCQueueResponse,PROC
async_StopQueue  PROCEDURE(*cppClientSMCQueueRequest request, *cppClientWsSMCEvents events,*cppInterface State),PROC

  END




  MAP
    MODULE('ws_smc')
      createWsSMCClient (),*cppClientWsSMC, pascal, raw, name('_createWsSMCClient@0')
    END

  END


EndOfInclude
