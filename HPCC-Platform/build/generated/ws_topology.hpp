// *** Include file generated by HIDL Version 1.3 from ws_topology.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_topology_SCM_INCL
#define ws_topology_SCM_INCL

#include "esp.hpp"



////////////////////////////////////////////////////////////

//  ===========================================================================

interface IConstTpMachine : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getNetaddress()=0;
	virtual const char * getConfigNetaddress()=0;
	virtual const char * getDomain()=0;
	virtual const char * getDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getAvailable()=0;
	virtual int getOS()=0;
	virtual const char * getPath()=0;
	virtual int getPort()=0;
	virtual int getProcessNumber()=0;
};

interface IEspTpMachine : extends IConstTpMachine
{
	virtual void setName(const char * val)=0;
	virtual void setNetaddress(const char * val)=0;
	virtual void setConfigNetaddress(const char * val)=0;
	virtual void setDomain(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setAvailable(const char * val)=0;
	virtual void setOS(int val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void setProcessNumber(int val)=0;
	virtual void copy(IConstTpMachine &from)=0;
};

interface IClientTpMachine : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setNetaddress(const char * val)=0;
	virtual void setConfigNetaddress(const char * val)=0;
	virtual void setDomain(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setAvailable(const char * val)=0;
	virtual void setOS(int val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void setProcessNumber(int val)=0;
	virtual const char * getName()=0;
	virtual const char * getNetaddress()=0;
	virtual const char * getConfigNetaddress()=0;
	virtual const char * getDomain()=0;
	virtual const char * getDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getAvailable()=0;
	virtual int getOS()=0;
	virtual const char * getPath()=0;
	virtual int getPort()=0;
	virtual int getProcessNumber()=0;
};



//  ===========================================================================
interface IConstTpCluster : extends IEspStruct
{
	virtual const char * getType()=0;
	virtual const char * getName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getBuild()=0;
	virtual const char * getDirectory()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getDesc()=0;
	virtual const char * getPrefix()=0;
	virtual const char * getPath()=0;
	virtual const char * getDataModel()=0;
	virtual int getOS()=0;
	virtual bool getHasThorSpareProcess()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpCluster : extends IConstTpCluster
{
	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setDesc(const char * val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDataModel(const char * val)=0;
	virtual void setOS(int val)=0;
	virtual void setHasThorSpareProcess(bool val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpCluster &from)=0;
};

interface IClientTpCluster : extends IInterface
{
	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setQueueName(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setDesc(const char * val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDataModel(const char * val)=0;
	virtual void setOS(int val)=0;
	virtual void setHasThorSpareProcess(bool val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getType()=0;
	virtual const char * getName()=0;
	virtual const char * getQueueName()=0;
	virtual const char * getBuild()=0;
	virtual const char * getDirectory()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getDesc()=0;
	virtual const char * getPrefix()=0;
	virtual const char * getPath()=0;
	virtual const char * getDataModel()=0;
	virtual int getOS()=0;
	virtual bool getHasThorSpareProcess()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================

//  ===========================================================================
interface IConstTpLogicalCluster : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getQueue()=0;
	virtual const char * getLanguageVersion()=0;
	virtual const char * getProcess()=0;
	virtual const char * getType()=0;
};

interface IEspTpLogicalCluster : extends IConstTpLogicalCluster
{
	virtual void setName(const char * val)=0;
	virtual void setQueue(const char * val)=0;
	virtual void setLanguageVersion(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void copy(IConstTpLogicalCluster &from)=0;
};

interface IClientTpLogicalCluster : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setQueue(const char * val)=0;
	virtual void setLanguageVersion(const char * val)=0;
	virtual void setProcess(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getQueue()=0;
	virtual const char * getLanguageVersion()=0;
	virtual const char * getProcess()=0;
	virtual const char * getType()=0;
};


//  ===========================================================================

//  ===========================================================================

interface IConstTpGroup : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getKind()=0;
	virtual bool getReplicateOutputs_isNull()=0;
	virtual bool getReplicateOutputs()=0;
};

interface IEspTpGroup : extends IConstTpGroup
{
	virtual void setName(const char * val)=0;
	virtual void setKind(const char * val)=0;
	virtual void setReplicateOutputs_null()=0;
	virtual void setReplicateOutputs(bool val)=0;
	virtual void copy(IConstTpGroup &from)=0;
};

interface IClientTpGroup : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setKind(const char * val)=0;
	virtual void setReplicateOutputs_null()=0;
	virtual void setReplicateOutputs(bool val)=0;
	virtual const char * getName()=0;
	virtual const char * getKind()=0;
	virtual bool getReplicateOutputs_isNull()=0;
	virtual bool getReplicateOutputs()=0;
};



//  ===========================================================================
interface IConstTpDali : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getBackupComputer()=0;
	virtual const char * getBackupDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getAuditLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpDali : extends IConstTpDali
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setBackupComputer(const char * val)=0;
	virtual void setBackupDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setAuditLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpDali &from)=0;
};

interface IClientTpDali : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setBackupComputer(const char * val)=0;
	virtual void setBackupDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setAuditLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getBackupComputer()=0;
	virtual const char * getBackupDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getAuditLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpEclServer : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpEclServer : extends IConstTpEclServer
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpEclServer &from)=0;
};

interface IClientTpEclServer : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpEclAgent : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getDaliServer()=0;
	virtual const char * getLogDir()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpEclAgent : extends IConstTpEclAgent
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDaliServer(const char * val)=0;
	virtual void setLogDir(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpEclAgent &from)=0;
};

interface IClientTpEclAgent : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDaliServer(const char * val)=0;
	virtual void setLogDir(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getDaliServer()=0;
	virtual const char * getLogDir()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpAgentExec : extends IEspStruct
{
	virtual const char * getDaliServer()=0;
	virtual const char * getLogDir()=0;
};

interface IEspTpAgentExec : extends IConstTpAgentExec
{
	virtual void setDaliServer(const char * val)=0;
	virtual void setLogDir(const char * val)=0;
	virtual void copy(IConstTpAgentExec &from)=0;
};

interface IClientTpAgentExec : extends IInterface
{
	virtual void setDaliServer(const char * val)=0;
	virtual void setLogDir(const char * val)=0;
	virtual const char * getDaliServer()=0;
	virtual const char * getLogDir()=0;
};


//  ===========================================================================
interface IConstTpEclScheduler : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpEclScheduler : extends IConstTpEclScheduler
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpEclScheduler &from)=0;
};

interface IClientTpEclScheduler : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpBinding : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getService()=0;
	virtual const char * getServiceType()=0;
	virtual const char * getBindingType()=0;
	virtual const char * getServiceBuildSet()=0;
	virtual const char * getPort()=0;
	virtual const char * getProtocol()=0;
};

interface IEspTpBinding : extends IConstTpBinding
{
	virtual void setName(const char * val)=0;
	virtual void setService(const char * val)=0;
	virtual void setServiceType(const char * val)=0;
	virtual void setBindingType(const char * val)=0;
	virtual void setServiceBuildSet(const char * val)=0;
	virtual void setPort(const char * val)=0;
	virtual void setProtocol(const char * val)=0;
	virtual void copy(IConstTpBinding &from)=0;
};

interface IClientTpBinding : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setService(const char * val)=0;
	virtual void setServiceType(const char * val)=0;
	virtual void setBindingType(const char * val)=0;
	virtual void setServiceBuildSet(const char * val)=0;
	virtual void setPort(const char * val)=0;
	virtual void setProtocol(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getService()=0;
	virtual const char * getServiceType()=0;
	virtual const char * getBindingType()=0;
	virtual const char * getServiceBuildSet()=0;
	virtual const char * getPort()=0;
	virtual const char * getProtocol()=0;
};



interface IConstTpEspServicePlugin : extends IEspStruct
{
	virtual const char * getShortName()=0;
	virtual const char * getLongName()=0;
	virtual const char * getFolderName()=0;
	virtual const char * getWidgetName()=0;
};

interface IEspTpEspServicePlugin : extends IConstTpEspServicePlugin
{
	virtual void setShortName(const char * val)=0;
	virtual void setLongName(const char * val)=0;
	virtual void setFolderName(const char * val)=0;
	virtual void setWidgetName(const char * val)=0;
	virtual void copy(IConstTpEspServicePlugin &from)=0;
};

interface IClientTpEspServicePlugin : extends IInterface
{
	virtual void setShortName(const char * val)=0;
	virtual void setLongName(const char * val)=0;
	virtual void setFolderName(const char * val)=0;
	virtual void setWidgetName(const char * val)=0;
	virtual const char * getShortName()=0;
	virtual const char * getLongName()=0;
	virtual const char * getFolderName()=0;
	virtual const char * getWidgetName()=0;
};



//  ===========================================================================
interface IConstTpEspServer : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
	virtual IArrayOf<IConstTpBinding> & getTpBindings()=0;
};

interface IEspTpEspServer : extends IConstTpEspServer
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void setTpBindings(IArrayOf<IEspTpBinding> &val)=0;
	virtual void setTpBindings(IArrayOf<IConstTpBinding> &val)=0;
	virtual void copy(IConstTpEspServer &from)=0;
};

interface IClientTpEspServer : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void setTpBindings(IArrayOf<IEspTpBinding> &val)=0;
	virtual void setTpBindings(IArrayOf<IConstTpBinding> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
	virtual IArrayOf<IConstTpBinding> & getTpBindings()=0;
};


//  ===========================================================================
interface IConstTpDfuServer : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getQueue()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpDfuServer : extends IConstTpDfuServer
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setQueue(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpDfuServer &from)=0;
};

interface IClientTpDfuServer : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setQueue(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getQueue()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpSashaServer : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpSashaServer : extends IConstTpSashaServer
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpSashaServer &from)=0;
};

interface IClientTpSashaServer : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpLdapServer : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpLdapServer : extends IConstTpLdapServer
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpLdapServer &from)=0;
};

interface IClientTpLdapServer : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpDropZone : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual bool getECLWatchVisible()=0;
	virtual const char * getUMask()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpDropZone : extends IConstTpDropZone
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setECLWatchVisible(bool val)=0;
	virtual void setUMask(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpDropZone &from)=0;
};

interface IClientTpDropZone : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setECLWatchVisible(bool val)=0;
	virtual void setUMask(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual bool getECLWatchVisible()=0;
	virtual const char * getUMask()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpMySqlServer : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpMySqlServer : extends IConstTpMySqlServer
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpMySqlServer &from)=0;
};

interface IClientTpMySqlServer : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpFTSlave : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpFTSlave : extends IConstTpFTSlave
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpFTSlave &from)=0;
};

interface IClientTpFTSlave : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpDkcSlave : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpDkcSlave : extends IConstTpDkcSlave
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpDkcSlave &from)=0;
};

interface IClientTpDkcSlave : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};


//  ===========================================================================
interface IConstTpGenesisServer : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpGenesisServer : extends IConstTpGenesisServer
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpGenesisServer &from)=0;
};

interface IClientTpGenesisServer : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};



//  ===========================================================================
interface IConstTpSparkThor : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getBuild()=0;
	virtual const char * getThorClusterName()=0;
	virtual const char * getThorPath()=0;
	virtual unsigned int getSparkExecutorCores()=0;
	virtual __int64 getSparkExecutorMemory()=0;
	virtual unsigned int getSparkMasterPort()=0;
	virtual unsigned int getSparkMasterWebUIPort()=0;
	virtual unsigned int getSparkWorkerCores()=0;
	virtual __int64 getSparkWorkerMemory()=0;
	virtual unsigned int getSparkWorkerPort()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpSparkThor : extends IConstTpSparkThor
{
	virtual void setName(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setThorClusterName(const char * val)=0;
	virtual void setThorPath(const char * val)=0;
	virtual void setSparkExecutorCores(unsigned int val)=0;
	virtual void setSparkExecutorMemory(__int64 val)=0;
	virtual void setSparkMasterPort(unsigned int val)=0;
	virtual void setSparkMasterWebUIPort(unsigned int val)=0;
	virtual void setSparkWorkerCores(unsigned int val)=0;
	virtual void setSparkWorkerMemory(__int64 val)=0;
	virtual void setSparkWorkerPort(unsigned int val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpSparkThor &from)=0;
};

interface IClientTpSparkThor : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setThorClusterName(const char * val)=0;
	virtual void setThorPath(const char * val)=0;
	virtual void setSparkExecutorCores(unsigned int val)=0;
	virtual void setSparkExecutorMemory(__int64 val)=0;
	virtual void setSparkMasterPort(unsigned int val)=0;
	virtual void setSparkMasterWebUIPort(unsigned int val)=0;
	virtual void setSparkWorkerCores(unsigned int val)=0;
	virtual void setSparkWorkerMemory(__int64 val)=0;
	virtual void setSparkWorkerPort(unsigned int val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getBuild()=0;
	virtual const char * getThorClusterName()=0;
	virtual const char * getThorPath()=0;
	virtual unsigned int getSparkExecutorCores()=0;
	virtual __int64 getSparkExecutorMemory()=0;
	virtual unsigned int getSparkMasterPort()=0;
	virtual unsigned int getSparkMasterWebUIPort()=0;
	virtual unsigned int getSparkWorkerCores()=0;
	virtual __int64 getSparkWorkerMemory()=0;
	virtual unsigned int getSparkWorkerPort()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getPath()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};



//  ===========================================================================
interface IConstTpQueue : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getWorkUnit()=0;
};

interface IEspTpQueue : extends IConstTpQueue
{
	virtual void setName(const char * val)=0;
	virtual void setWorkUnit(const char * val)=0;
	virtual void copy(IConstTpQueue &from)=0;
};

interface IClientTpQueue : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setWorkUnit(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getWorkUnit()=0;
};



//  ===========================================================================

interface IConstTpServices : extends IEspStruct
{
	virtual IArrayOf<IConstTpDali> & getTpDalis()=0;
	virtual IArrayOf<IConstTpDfuServer> & getTpDfuServers()=0;
	virtual IArrayOf<IConstTpDkcSlave> & getTpDkcSlaves()=0;
	virtual IArrayOf<IConstTpDropZone> & getTpDropZones()=0;
	virtual IArrayOf<IConstTpEclAgent> & getTpEclAgents()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclServers()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclCCServers()=0;
	virtual IArrayOf<IConstTpEclScheduler> & getTpEclSchedulers()=0;
	virtual IArrayOf<IConstTpEspServer> & getTpEspServers()=0;
	virtual IArrayOf<IConstTpFTSlave> & getTpFTSlaves()=0;
	virtual IArrayOf<IConstTpGenesisServer> & getTpGenesisServers()=0;
	virtual IArrayOf<IConstTpLdapServer> & getTpLdapServers()=0;
	virtual IArrayOf<IConstTpMySqlServer> & getTpMySqlServers()=0;
	virtual IArrayOf<IConstTpSashaServer> & getTpSashaServers()=0;
	virtual IArrayOf<IConstTpSparkThor> & getTpSparkThors()=0;
};

interface IEspTpServices : extends IConstTpServices
{
	virtual void setTpDalis(IArrayOf<IEspTpDali> &val)=0;
	virtual void setTpDalis(IArrayOf<IConstTpDali> &val)=0;
	virtual void setTpDfuServers(IArrayOf<IEspTpDfuServer> &val)=0;
	virtual void setTpDfuServers(IArrayOf<IConstTpDfuServer> &val)=0;
	virtual void setTpDkcSlaves(IArrayOf<IEspTpDkcSlave> &val)=0;
	virtual void setTpDkcSlaves(IArrayOf<IConstTpDkcSlave> &val)=0;
	virtual void setTpDropZones(IArrayOf<IEspTpDropZone> &val)=0;
	virtual void setTpDropZones(IArrayOf<IConstTpDropZone> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IEspTpEclAgent> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IConstTpEclAgent> &val)=0;
	virtual void setTpEclServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IEspTpEclScheduler> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IConstTpEclScheduler> &val)=0;
	virtual void setTpEspServers(IArrayOf<IEspTpEspServer> &val)=0;
	virtual void setTpEspServers(IArrayOf<IConstTpEspServer> &val)=0;
	virtual void setTpFTSlaves(IArrayOf<IEspTpFTSlave> &val)=0;
	virtual void setTpFTSlaves(IArrayOf<IConstTpFTSlave> &val)=0;
	virtual void setTpGenesisServers(IArrayOf<IEspTpGenesisServer> &val)=0;
	virtual void setTpGenesisServers(IArrayOf<IConstTpGenesisServer> &val)=0;
	virtual void setTpLdapServers(IArrayOf<IEspTpLdapServer> &val)=0;
	virtual void setTpLdapServers(IArrayOf<IConstTpLdapServer> &val)=0;
	virtual void setTpMySqlServers(IArrayOf<IEspTpMySqlServer> &val)=0;
	virtual void setTpMySqlServers(IArrayOf<IConstTpMySqlServer> &val)=0;
	virtual void setTpSashaServers(IArrayOf<IEspTpSashaServer> &val)=0;
	virtual void setTpSashaServers(IArrayOf<IConstTpSashaServer> &val)=0;
	virtual void setTpSparkThors(IArrayOf<IEspTpSparkThor> &val)=0;
	virtual void setTpSparkThors(IArrayOf<IConstTpSparkThor> &val)=0;
	virtual void copy(IConstTpServices &from)=0;
};

interface IClientTpServices : extends IInterface
{
	virtual void setTpDalis(IArrayOf<IEspTpDali> &val)=0;
	virtual void setTpDalis(IArrayOf<IConstTpDali> &val)=0;
	virtual void setTpDfuServers(IArrayOf<IEspTpDfuServer> &val)=0;
	virtual void setTpDfuServers(IArrayOf<IConstTpDfuServer> &val)=0;
	virtual void setTpDkcSlaves(IArrayOf<IEspTpDkcSlave> &val)=0;
	virtual void setTpDkcSlaves(IArrayOf<IConstTpDkcSlave> &val)=0;
	virtual void setTpDropZones(IArrayOf<IEspTpDropZone> &val)=0;
	virtual void setTpDropZones(IArrayOf<IConstTpDropZone> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IEspTpEclAgent> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IConstTpEclAgent> &val)=0;
	virtual void setTpEclServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IEspTpEclScheduler> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IConstTpEclScheduler> &val)=0;
	virtual void setTpEspServers(IArrayOf<IEspTpEspServer> &val)=0;
	virtual void setTpEspServers(IArrayOf<IConstTpEspServer> &val)=0;
	virtual void setTpFTSlaves(IArrayOf<IEspTpFTSlave> &val)=0;
	virtual void setTpFTSlaves(IArrayOf<IConstTpFTSlave> &val)=0;
	virtual void setTpGenesisServers(IArrayOf<IEspTpGenesisServer> &val)=0;
	virtual void setTpGenesisServers(IArrayOf<IConstTpGenesisServer> &val)=0;
	virtual void setTpLdapServers(IArrayOf<IEspTpLdapServer> &val)=0;
	virtual void setTpLdapServers(IArrayOf<IConstTpLdapServer> &val)=0;
	virtual void setTpMySqlServers(IArrayOf<IEspTpMySqlServer> &val)=0;
	virtual void setTpMySqlServers(IArrayOf<IConstTpMySqlServer> &val)=0;
	virtual void setTpSashaServers(IArrayOf<IEspTpSashaServer> &val)=0;
	virtual void setTpSashaServers(IArrayOf<IConstTpSashaServer> &val)=0;
	virtual void setTpSparkThors(IArrayOf<IEspTpSparkThor> &val)=0;
	virtual void setTpSparkThors(IArrayOf<IConstTpSparkThor> &val)=0;
	virtual IArrayOf<IConstTpDali> & getTpDalis()=0;
	virtual IArrayOf<IConstTpDfuServer> & getTpDfuServers()=0;
	virtual IArrayOf<IConstTpDkcSlave> & getTpDkcSlaves()=0;
	virtual IArrayOf<IConstTpDropZone> & getTpDropZones()=0;
	virtual IArrayOf<IConstTpEclAgent> & getTpEclAgents()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclServers()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclCCServers()=0;
	virtual IArrayOf<IConstTpEclScheduler> & getTpEclSchedulers()=0;
	virtual IArrayOf<IConstTpEspServer> & getTpEspServers()=0;
	virtual IArrayOf<IConstTpFTSlave> & getTpFTSlaves()=0;
	virtual IArrayOf<IConstTpGenesisServer> & getTpGenesisServers()=0;
	virtual IArrayOf<IConstTpLdapServer> & getTpLdapServers()=0;
	virtual IArrayOf<IConstTpMySqlServer> & getTpMySqlServers()=0;
	virtual IArrayOf<IConstTpSashaServer> & getTpSashaServers()=0;
	virtual IArrayOf<IConstTpSparkThor> & getTpSparkThors()=0;
};



interface IConstTpClusterNameType : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual bool getIsDefault()=0;
};

interface IEspTpClusterNameType : extends IConstTpClusterNameType
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setIsDefault(bool val)=0;
	virtual void copy(IConstTpClusterNameType &from)=0;
};

interface IClientTpClusterNameType : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setIsDefault(bool val)=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual bool getIsDefault()=0;
};



interface IConstTpListTargetClustersRequest : extends IEspRequest
{
};

interface IEspTpListTargetClustersRequest : extends IConstTpListTargetClustersRequest
{
	virtual void copy(IConstTpListTargetClustersRequest &from)=0;
};

interface IClientTpListTargetClustersRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstTpListTargetClustersResponse : extends IEspResponse
{
	virtual IArrayOf<IConstTpClusterNameType> & getTargetClusters()=0;
};

interface IEspTpListTargetClustersResponse : extends IConstTpListTargetClustersResponse
{
	virtual void setTargetClusters(IArrayOf<IEspTpClusterNameType> &val)=0;
	virtual void setTargetClusters(IArrayOf<IConstTpClusterNameType> &val)=0;
	virtual void copy(IConstTpListTargetClustersResponse &from)=0;
};

interface IClientTpListTargetClustersResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstTpClusterNameType> & getTargetClusters()=0;

	virtual const IMultiException& getExceptions()=0;
};



//  ===========================================================================
interface IConstTpTargetCluster : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getPrefix()=0;
	virtual const char * getType()=0;
	virtual IArrayOf<IConstTpCluster> & getTpClusters()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclCCServers()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclServers()=0;
	virtual IArrayOf<IConstTpEclAgent> & getTpEclAgents()=0;
	virtual IArrayOf<IConstTpEclScheduler> & getTpEclSchedulers()=0;
};

interface IEspTpTargetCluster : extends IConstTpTargetCluster
{
	virtual void setName(const char * val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setTpClusters(IArrayOf<IEspTpCluster> &val)=0;
	virtual void setTpClusters(IArrayOf<IConstTpCluster> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IEspTpEclAgent> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IConstTpEclAgent> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IEspTpEclScheduler> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IConstTpEclScheduler> &val)=0;
	virtual void copy(IConstTpTargetCluster &from)=0;
};

interface IClientTpTargetCluster : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setPrefix(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setTpClusters(IArrayOf<IEspTpCluster> &val)=0;
	virtual void setTpClusters(IArrayOf<IConstTpCluster> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclCCServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclServers(IArrayOf<IEspTpEclServer> &val)=0;
	virtual void setTpEclServers(IArrayOf<IConstTpEclServer> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IEspTpEclAgent> &val)=0;
	virtual void setTpEclAgents(IArrayOf<IConstTpEclAgent> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IEspTpEclScheduler> &val)=0;
	virtual void setTpEclSchedulers(IArrayOf<IConstTpEclScheduler> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getPrefix()=0;
	virtual const char * getType()=0;
	virtual IArrayOf<IConstTpCluster> & getTpClusters()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclCCServers()=0;
	virtual IArrayOf<IConstTpEclServer> & getTpEclServers()=0;
	virtual IArrayOf<IConstTpEclAgent> & getTpEclAgents()=0;
	virtual IArrayOf<IConstTpEclScheduler> & getTpEclSchedulers()=0;
};



interface IConstTpQueryType : extends IEspStruct
{
	virtual const char * getTPCLUSTER()=0;
	virtual const char * getTPNODE()=0;
};

interface IEspTpQueryType : extends IConstTpQueryType
{
	virtual void setTPCLUSTER(const char * val)=0;
	virtual void setTPNODE(const char * val)=0;
	virtual void copy(IConstTpQueryType &from)=0;
};

interface IClientTpQueryType : extends IInterface
{
	virtual void setTPCLUSTER(const char * val)=0;
	virtual void setTPNODE(const char * val)=0;
	virtual const char * getTPCLUSTER()=0;
	virtual const char * getTPNODE()=0;
};


interface IConstTpTargetClusterQueryRequest : extends IEspRequest
{
	virtual const char * getType()=0;
	virtual const char * getName()=0;
	virtual bool getShowDetails()=0;
};

interface IEspTpTargetClusterQueryRequest : extends IConstTpTargetClusterQueryRequest
{
	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setShowDetails(bool val)=0;
	virtual void copy(IConstTpTargetClusterQueryRequest &from)=0;
};

interface IClientTpTargetClusterQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setShowDetails(bool val)=0;
};



interface IConstTpTargetClusterQueryResponse : extends IEspResponse
{
	virtual bool getShowDetails()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual const char * getPreflightProcessFilter()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstTpTargetCluster> & getTpTargetClusters()=0;
};

interface IEspTpTargetClusterQueryResponse : extends IConstTpTargetClusterQueryResponse
{
	virtual void setShowDetails(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void setPreflightProcessFilter(const char * val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void setTpTargetClusters(IArrayOf<IEspTpTargetCluster> &val)=0;
	virtual void setTpTargetClusters(IArrayOf<IConstTpTargetCluster> &val)=0;
	virtual void copy(IConstTpTargetClusterQueryResponse &from)=0;
};

interface IClientTpTargetClusterQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getShowDetails()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual const char * getPreflightProcessFilter()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstTpTargetCluster> & getTpTargetClusters()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstTpClusterQueryRequest : extends IEspRequest
{
	virtual const char * getType()=0;
};

interface IEspTpClusterQueryRequest : extends IConstTpClusterQueryRequest
{
	virtual void setType(const char * val)=0;
	virtual void copy(IConstTpClusterQueryRequest &from)=0;
};

interface IClientTpClusterQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setType(const char * val)=0;
};



interface IConstTpClusterQueryResponse : extends IEspResponse
{
	virtual bool getEnableSNMP()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstTpCluster> & getTpClusters()=0;
};

interface IEspTpClusterQueryResponse : extends IConstTpClusterQueryResponse
{
	virtual void setEnableSNMP(bool val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void setTpClusters(IArrayOf<IEspTpCluster> &val)=0;
	virtual void setTpClusters(IArrayOf<IConstTpCluster> &val)=0;
	virtual void copy(IConstTpClusterQueryResponse &from)=0;
};

interface IClientTpClusterQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getEnableSNMP()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstTpCluster> & getTpClusters()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstTpLogicalClusterQueryRequest : extends IEspRequest
{
	virtual const char * getEclServerQueue()=0;
};

interface IEspTpLogicalClusterQueryRequest : extends IConstTpLogicalClusterQueryRequest
{
	virtual void setEclServerQueue(const char * val)=0;
	virtual void copy(IConstTpLogicalClusterQueryRequest &from)=0;
};

interface IClientTpLogicalClusterQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEclServerQueue(const char * val)=0;
};



interface IConstTpLogicalClusterQueryResponse : extends IEspResponse
{
	virtual IArrayOf<IConstTpLogicalCluster> & getTpLogicalClusters()=0;
};

interface IEspTpLogicalClusterQueryResponse : extends IConstTpLogicalClusterQueryResponse
{
	virtual void setTpLogicalClusters(IArrayOf<IEspTpLogicalCluster> &val)=0;
	virtual void setTpLogicalClusters(IArrayOf<IConstTpLogicalCluster> &val)=0;
	virtual void copy(IConstTpLogicalClusterQueryResponse &from)=0;
};

interface IClientTpLogicalClusterQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstTpLogicalCluster> & getTpLogicalClusters()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstTpGroupQueryRequest : extends IEspRequest
{
	virtual const char * getKind()=0;
};

interface IEspTpGroupQueryRequest : extends IConstTpGroupQueryRequest
{
	virtual void setKind(const char * val)=0;
	virtual void copy(IConstTpGroupQueryRequest &from)=0;
};

interface IClientTpGroupQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setKind(const char * val)=0;
};



interface IConstTpGroupQueryResponse : extends IEspResponse
{
	virtual IArrayOf<IConstTpGroup> & getTpGroups()=0;
};

interface IEspTpGroupQueryResponse : extends IConstTpGroupQueryResponse
{
	virtual void setTpGroups(IArrayOf<IEspTpGroup> &val)=0;
	virtual void setTpGroups(IArrayOf<IConstTpGroup> &val)=0;
	virtual void copy(IConstTpGroupQueryResponse &from)=0;
};

interface IClientTpGroupQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstTpGroup> & getTpGroups()=0;

	virtual const IMultiException& getExceptions()=0;
};







interface IConstTpClusterInfoRequest : extends IEspRequest
{
	virtual const char * getName()=0;
};

interface IEspTpClusterInfoRequest : extends IConstTpClusterInfoRequest
{
	virtual void setName(const char * val)=0;
	virtual void copy(IConstTpClusterInfoRequest &from)=0;
};

interface IClientTpClusterInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setName(const char * val)=0;
};



interface IConstTpClusterInfoResponse : extends IEspResponse
{
	virtual const char * getName()=0;
	virtual const char * getWorkUnit()=0;
	virtual IArrayOf<IConstTpQueue> & getTpQueues()=0;
};

interface IEspTpClusterInfoResponse : extends IConstTpClusterInfoResponse
{
	virtual void setName(const char * val)=0;
	virtual void setWorkUnit(const char * val)=0;
	virtual void setTpQueues(IArrayOf<IEspTpQueue> &val)=0;
	virtual void setTpQueues(IArrayOf<IConstTpQueue> &val)=0;
	virtual void copy(IConstTpClusterInfoResponse &from)=0;
};

interface IClientTpClusterInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getName()=0;
	virtual const char * getWorkUnit()=0;
	virtual IArrayOf<IConstTpQueue> & getTpQueues()=0;

	virtual const IMultiException& getExceptions()=0;
};




enum TpMachineType
{
	TPMACHINECLUSTER = 0
};


interface IConstTpMachineQueryRequest : extends IEspRequest
{
	virtual const char * getType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getOldIP()=0;
	virtual const char * getPath()=0;
	virtual const char * getDirectory()=0;
	virtual const char * getLogDirectory()=0;
};

interface IEspTpMachineQueryRequest : extends IConstTpMachineQueryRequest
{
	virtual void setType(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void copy(IConstTpMachineQueryRequest &from)=0;
};

interface IClientTpMachineQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setType(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
};




interface IConstTpMachineQueryResponse : extends IEspResponse
{
	virtual bool getEnablePreflightInfo()=0;
	virtual bool getHasThorSpareProcess()=0;
	virtual const char * getType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getOldIP()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getPath()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual const char * getPreflightProcessFilter()=0;
	virtual bool getEnableSNMP()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;
};

interface IEspTpMachineQueryResponse : extends IConstTpMachineQueryResponse
{
	virtual void setEnablePreflightInfo(bool val)=0;
	virtual void setHasThorSpareProcess(bool val)=0;
	virtual void setType(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void setPreflightProcessFilter(const char * val)=0;
	virtual void setEnableSNMP(bool val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void setTpMachines(IArrayOf<IEspTpMachine> &val)=0;
	virtual void setTpMachines(IArrayOf<IConstTpMachine> &val)=0;
	virtual void copy(IConstTpMachineQueryResponse &from)=0;
};

interface IClientTpMachineQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getEnablePreflightInfo()=0;
	virtual bool getHasThorSpareProcess()=0;
	virtual const char * getType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getOldIP()=0;
	virtual const char * getLogDirectory()=0;
	virtual const char * getPath()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual const char * getPreflightProcessFilter()=0;
	virtual bool getEnableSNMP()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstTpMachine> & getTpMachines()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstTpMachineInfoRequest : extends IEspRequest
{
	virtual const char * getName()=0;
	virtual const char * getNetAddress()=0;
};

interface IEspTpMachineInfoRequest : extends IConstTpMachineInfoRequest
{
	virtual void setName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void copy(IConstTpMachineInfoRequest &from)=0;
};

interface IClientTpMachineInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
};




interface IConstTpMachineInfoResponse : extends IEspResponse
{
	virtual IConstTpMachine & getMachineInfo()=0;
};

interface IEspTpMachineInfoResponse : extends IConstTpMachineInfoResponse
{
	virtual IEspTpMachine & updateMachineInfo()=0;
	virtual void setMachineInfo(IConstTpMachine &ifrom)=0;
	virtual void copy(IConstTpMachineInfoResponse &from)=0;
};

interface IClientTpMachineInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstTpMachine & getMachineInfo()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstTpServiceQueryRequest : extends IEspRequest
{
	virtual const char * getType()=0;
};

interface IEspTpServiceQueryRequest : extends IConstTpServiceQueryRequest
{
	virtual void setType(const char * val)=0;
	virtual void copy(IConstTpServiceQueryRequest &from)=0;
};

interface IClientTpServiceQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setType(const char * val)=0;
};


interface IConstTpServiceQueryResponse : extends IEspResponse
{
	virtual bool getMemThreshold_isNull()=0;
	virtual int getMemThreshold()=0;
	virtual bool getDiskThreshold_isNull()=0;
	virtual int getDiskThreshold()=0;
	virtual bool getCpuThreshold_isNull()=0;
	virtual int getCpuThreshold()=0;
	virtual bool getEncapsulatedSystem_isNull()=0;
	virtual bool getEncapsulatedSystem()=0;
	virtual bool getEnableSNMP_isNull()=0;
	virtual bool getEnableSNMP()=0;
	virtual const char * getPreflightProcessFilter()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual IConstTpServices & getServiceList()=0;
};

interface IEspTpServiceQueryResponse : extends IConstTpServiceQueryResponse
{
	virtual void setMemThreshold_null()=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold_null()=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold_null()=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setEncapsulatedSystem_null()=0;
	virtual void setEncapsulatedSystem(bool val)=0;
	virtual void setEnableSNMP_null()=0;
	virtual void setEnableSNMP(bool val)=0;
	virtual void setPreflightProcessFilter(const char * val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual IEspTpServices & updateServiceList()=0;
	virtual void setServiceList(IConstTpServices &ifrom)=0;
	virtual void copy(IConstTpServiceQueryResponse &from)=0;
};

interface IClientTpServiceQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getMemThreshold_isNull()=0;
	virtual int getMemThreshold()=0;
	virtual bool getDiskThreshold_isNull()=0;
	virtual int getDiskThreshold()=0;
	virtual bool getCpuThreshold_isNull()=0;
	virtual int getCpuThreshold()=0;
	virtual bool getEncapsulatedSystem_isNull()=0;
	virtual bool getEncapsulatedSystem()=0;
	virtual bool getEnableSNMP_isNull()=0;
	virtual bool getEnableSNMP()=0;
	virtual const char * getPreflightProcessFilter()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual IConstTpServices & getServiceList()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstTpSetMachineStatusRequest : extends IEspRequest
{
	virtual const char * getMachinePath()=0;
	virtual const char * getStatusValue()=0;
};

interface IEspTpSetMachineStatusRequest : extends IConstTpSetMachineStatusRequest
{
	virtual void setMachinePath(const char * val)=0;
	virtual void setStatusValue(const char * val)=0;
	virtual void copy(IConstTpSetMachineStatusRequest &from)=0;
};

interface IClientTpSetMachineStatusRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setMachinePath(const char * val)=0;
	virtual void setStatusValue(const char * val)=0;
};




interface IConstTpSetMachineStatusResponse : extends IEspResponse
{
	virtual bool getTpSetMachineStatusResult()=0;
};

interface IEspTpSetMachineStatusResponse : extends IConstTpSetMachineStatusResponse
{
	virtual void setTpSetMachineStatusResult(bool val)=0;
	virtual void copy(IConstTpSetMachineStatusResponse &from)=0;
};

interface IClientTpSetMachineStatusResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getTpSetMachineStatusResult()=0;

	virtual const IMultiException& getExceptions()=0;
};


interface IConstTpSwapNodeRequest : extends IEspRequest
{
	virtual const char * getCluster()=0;
	virtual const char * getOldIP()=0;
	virtual const char * getNewIP()=0;
};

interface IEspTpSwapNodeRequest : extends IConstTpSwapNodeRequest
{
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setNewIP(const char * val)=0;
	virtual void copy(IConstTpSwapNodeRequest &from)=0;
};

interface IClientTpSwapNodeRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setNewIP(const char * val)=0;
};




interface IConstTpSwapNodeResponse : extends IEspResponse
{
	virtual bool getTpSwapNodeResult()=0;
};

interface IEspTpSwapNodeResponse : extends IConstTpSwapNodeResponse
{
	virtual void setTpSwapNodeResult(bool val)=0;
	virtual void copy(IConstTpSwapNodeResponse &from)=0;
};

interface IClientTpSwapNodeResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getTpSwapNodeResult()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstTpXMLFileRequest : extends IEspRequest
{
	virtual const char * getName()=0;
};

interface IEspTpXMLFileRequest : extends IConstTpXMLFileRequest
{
	virtual void setName(const char * val)=0;
	virtual void copy(IConstTpXMLFileRequest &from)=0;
};

interface IClientTpXMLFileRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setName(const char * val)=0;
};



interface IConstTpXMLFileResponse : extends IEspResponse
{
	virtual const char *getThefile_mimetype()=0;
	virtual const MemoryBuffer & getThefile()=0;
};

interface IEspTpXMLFileResponse : extends IConstTpXMLFileResponse
{
	virtual void setThefile_mimetype(const char *  val)=0;
	virtual void setThefile(const MemoryBuffer & val)=0;
	virtual void copy(IConstTpXMLFileResponse &from)=0;
};

interface IClientTpXMLFileResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char *getThefile_mimetype()=0;
	virtual const MemoryBuffer & getThefile()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstTpLogFileRequest : extends IEspRequest
{
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual bool getLastHours_isNull()=0;
	virtual int getLastHours()=0;
	virtual const char * getStartDate()=0;
	virtual const char * getEndDate()=0;
	virtual bool getFirstRows_isNull()=0;
	virtual int getFirstRows()=0;
	virtual bool getLastRows_isNull()=0;
	virtual int getLastRows()=0;
	virtual bool getFilterType_isNull()=0;
	virtual int getFilterType()=0;
	virtual bool getReversely_isNull()=0;
	virtual bool getReversely()=0;
	virtual bool getZip_isNull()=0;
	virtual bool getZip()=0;
	virtual bool getPageNumber_isNull()=0;
	virtual int getPageNumber()=0;
	virtual bool getLoadData_isNull()=0;
	virtual bool getLoadData()=0;
};

interface IEspTpLogFileRequest : extends IConstTpLogFileRequest
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setLastHours_null()=0;
	virtual void setLastHours(int val)=0;
	virtual void setStartDate(const char * val)=0;
	virtual void setEndDate(const char * val)=0;
	virtual void setFirstRows_null()=0;
	virtual void setFirstRows(int val)=0;
	virtual void setLastRows_null()=0;
	virtual void setLastRows(int val)=0;
	virtual void setFilterType_null()=0;
	virtual void setFilterType(int val)=0;
	virtual void setReversely_null()=0;
	virtual void setReversely(bool val)=0;
	virtual void setZip_null()=0;
	virtual void setZip(bool val)=0;
	virtual void setPageNumber_null()=0;
	virtual void setPageNumber(int val)=0;
	virtual void setLoadData_null()=0;
	virtual void setLoadData(bool val)=0;
	virtual void copy(IConstTpLogFileRequest &from)=0;
};

interface IClientTpLogFileRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setLastHours_null()=0;
	virtual void setLastHours(int val)=0;
	virtual void setStartDate(const char * val)=0;
	virtual void setEndDate(const char * val)=0;
	virtual void setFirstRows_null()=0;
	virtual void setFirstRows(int val)=0;
	virtual void setLastRows_null()=0;
	virtual void setLastRows(int val)=0;
	virtual void setFilterType_null()=0;
	virtual void setFilterType(int val)=0;
	virtual void setReversely_null()=0;
	virtual void setReversely(bool val)=0;
	virtual void setZip_null()=0;
	virtual void setZip(bool val)=0;
	virtual void setPageNumber_null()=0;
	virtual void setPageNumber(int val)=0;
	virtual void setLoadData_null()=0;
	virtual void setLoadData(bool val)=0;
};



interface IConstTpLogFileResponse : extends IEspResponse
{
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual const char * getStartDate()=0;
	virtual const char * getEndDate()=0;
	virtual int getLastHours()=0;
	virtual int getFirstRows()=0;
	virtual int getLastRows()=0;
	virtual bool getReversely()=0;
	virtual bool getZip()=0;
	virtual int getFilterType()=0;
	virtual const char * getLogData()=0;
	virtual bool getHasDate()=0;
	virtual __int64 getFileSize()=0;
	virtual __int64 getPageFrom()=0;
	virtual __int64 getPageTo()=0;
	virtual int getPageNumber()=0;
	virtual int getPrevPage()=0;
	virtual int getNextPage()=0;
	virtual int getTotalPages()=0;
	virtual const char * getAcceptLanguage()=0;
};

interface IEspTpLogFileResponse : extends IConstTpLogFileResponse
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setStartDate(const char * val)=0;
	virtual void setEndDate(const char * val)=0;
	virtual void setLastHours(int val)=0;
	virtual void setFirstRows(int val)=0;
	virtual void setLastRows(int val)=0;
	virtual void setReversely(bool val)=0;
	virtual void setZip(bool val)=0;
	virtual void setFilterType(int val)=0;
	virtual void setLogData(const char * val)=0;
	virtual void setHasDate(bool val)=0;
	virtual void setFileSize(__int64 val)=0;
	virtual void setPageFrom(__int64 val)=0;
	virtual void setPageTo(__int64 val)=0;
	virtual void setPageNumber(int val)=0;
	virtual void setPrevPage(int val)=0;
	virtual void setNextPage(int val)=0;
	virtual void setTotalPages(int val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void copy(IConstTpLogFileResponse &from)=0;
};

interface IClientTpLogFileResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual const char * getStartDate()=0;
	virtual const char * getEndDate()=0;
	virtual int getLastHours()=0;
	virtual int getFirstRows()=0;
	virtual int getLastRows()=0;
	virtual bool getReversely()=0;
	virtual bool getZip()=0;
	virtual int getFilterType()=0;
	virtual const char * getLogData()=0;
	virtual bool getHasDate()=0;
	virtual __int64 getFileSize()=0;
	virtual __int64 getPageFrom()=0;
	virtual __int64 getPageTo()=0;
	virtual int getPageNumber()=0;
	virtual int getPrevPage()=0;
	virtual int getNextPage()=0;
	virtual int getTotalPages()=0;
	virtual const char * getAcceptLanguage()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstSystemLogRequest : extends IEspRequest
{
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual bool getZip_isNull()=0;
	virtual int getZip()=0;
};

interface IEspSystemLogRequest : extends IConstSystemLogRequest
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setZip_null()=0;
	virtual void setZip(int val)=0;
	virtual void copy(IConstSystemLogRequest &from)=0;
};

interface IClientSystemLogRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setZip_null()=0;
	virtual void setZip(int val)=0;
};



interface IConstSystemLogResponse : extends IEspResponse
{
	virtual const char *getThefile_mimetype()=0;
	virtual const MemoryBuffer & getThefile()=0;
};

interface IEspSystemLogResponse : extends IConstSystemLogResponse
{
	virtual void setThefile_mimetype(const char *  val)=0;
	virtual void setThefile(const MemoryBuffer & val)=0;
	virtual void copy(IConstSystemLogResponse &from)=0;
};

interface IClientSystemLogResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char *getThefile_mimetype()=0;
	virtual const MemoryBuffer & getThefile()=0;

	virtual const IMultiException& getExceptions()=0;
};



enum OS_TYPE
{
	OS_WINDOWS = 0,
	OS_SOLARIS = 1,
	OS_LINUX = 2
};



interface IConstTpGetComponentFileRequest : extends IEspRequest
{
	virtual const char * getCompType()=0;
	virtual const char * getCompName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getDirectory()=0;
	virtual const char * getFileType()=0;
	virtual int getOsType()=0;
	virtual const char * getPlainText()=0;
};

interface IEspTpGetComponentFileRequest : extends IConstTpGetComponentFileRequest
{
	virtual void setCompType(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setFileType(const char * val)=0;
	virtual void setOsType(int val)=0;
	virtual void setPlainText(const char * val)=0;
	virtual void copy(IConstTpGetComponentFileRequest &from)=0;
};

interface IClientTpGetComponentFileRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setCompType(const char * val)=0;
	virtual void setCompName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setDirectory(const char * val)=0;
	virtual void setFileType(const char * val)=0;
	virtual void setOsType(int val)=0;
	virtual void setPlainText(const char * val)=0;
};



interface IConstTpGetComponentFileResponse : extends IEspResponse
{
	virtual const char *getFileContents_mimetype()=0;
	virtual const MemoryBuffer & getFileContents()=0;
};

interface IEspTpGetComponentFileResponse : extends IConstTpGetComponentFileResponse
{
	virtual void setFileContents_mimetype(const char *  val)=0;
	virtual void setFileContents(const MemoryBuffer & val)=0;
	virtual void copy(IConstTpGetComponentFileResponse &from)=0;
};

interface IClientTpGetComponentFileResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char *getFileContents_mimetype()=0;
	virtual const MemoryBuffer & getFileContents()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstTpThorStatusRequest : extends IEspRequest
{
	virtual const char * getName()=0;
};

interface IEspTpThorStatusRequest : extends IConstTpThorStatusRequest
{
	virtual void setName(const char * val)=0;
	virtual void copy(IConstTpThorStatusRequest &from)=0;
};

interface IClientTpThorStatusRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setName(const char * val)=0;
};



interface IConstTpThorStatusResponse : extends IEspResponse
{
	virtual const char * getName()=0;
	virtual const char * getQueue()=0;
	virtual const char * getGroup()=0;
	virtual const char * getThorMasterIPAddress()=0;
	virtual int getPort()=0;
	virtual const char * getStartTime()=0;
	virtual const char * getLogFile()=0;
	virtual const char * getWuid()=0;
	virtual const char * getGraph()=0;
	virtual int getSubGraph()=0;
	virtual int getSubGraphDuration()=0;
	virtual int getAutoRefresh()=0;
};

interface IEspTpThorStatusResponse : extends IConstTpThorStatusResponse
{
	virtual void setName(const char * val)=0;
	virtual void setQueue(const char * val)=0;
	virtual void setGroup(const char * val)=0;
	virtual void setThorMasterIPAddress(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void setStartTime(const char * val)=0;
	virtual void setLogFile(const char * val)=0;
	virtual void setWuid(const char * val)=0;
	virtual void setGraph(const char * val)=0;
	virtual void setSubGraph(int val)=0;
	virtual void setSubGraphDuration(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void copy(IConstTpThorStatusResponse &from)=0;
};

interface IClientTpThorStatusResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getName()=0;
	virtual const char * getQueue()=0;
	virtual const char * getGroup()=0;
	virtual const char * getThorMasterIPAddress()=0;
	virtual int getPort()=0;
	virtual const char * getStartTime()=0;
	virtual const char * getLogFile()=0;
	virtual const char * getWuid()=0;
	virtual const char * getGraph()=0;
	virtual int getSubGraph()=0;
	virtual int getSubGraphDuration()=0;
	virtual int getAutoRefresh()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstTpGetServicePluginsRequest : extends IEspRequest
{
};

interface IEspTpGetServicePluginsRequest : extends IConstTpGetServicePluginsRequest
{
	virtual void copy(IConstTpGetServicePluginsRequest &from)=0;
};

interface IClientTpGetServicePluginsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstTpGetServicePluginsResponse : extends IEspResponse
{
	virtual IArrayOf<IConstTpEspServicePlugin> & getPlugins()=0;
};

interface IEspTpGetServicePluginsResponse : extends IConstTpGetServicePluginsResponse
{
	virtual void setPlugins(IArrayOf<IEspTpEspServicePlugin> &val)=0;
	virtual void setPlugins(IArrayOf<IConstTpEspServicePlugin> &val)=0;
	virtual void copy(IConstTpGetServicePluginsResponse &from)=0;
};

interface IClientTpGetServicePluginsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstTpEspServicePlugin> & getPlugins()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstTpDropZoneQueryRequest : extends IEspRequest
{
	virtual const char * getName()=0;
	virtual bool getECLWatchVisibleOnly()=0;
};

interface IEspTpDropZoneQueryRequest : extends IConstTpDropZoneQueryRequest
{
	virtual void setName(const char * val)=0;
	virtual void setECLWatchVisibleOnly(bool val)=0;
	virtual void copy(IConstTpDropZoneQueryRequest &from)=0;
};

interface IClientTpDropZoneQueryRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setName(const char * val)=0;
	virtual void setECLWatchVisibleOnly(bool val)=0;
};



interface IConstTpDropZoneQueryResponse : extends IEspResponse
{
	virtual IArrayOf<IConstTpDropZone> & getTpDropZones()=0;
};

interface IEspTpDropZoneQueryResponse : extends IConstTpDropZoneQueryResponse
{
	virtual void setTpDropZones(IArrayOf<IEspTpDropZone> &val)=0;
	virtual void setTpDropZones(IArrayOf<IConstTpDropZone> &val)=0;
	virtual void copy(IConstTpDropZoneQueryResponse &from)=0;
};

interface IClientTpDropZoneQueryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstTpDropZone> & getTpDropZones()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstWsTopologyPingRequest : extends IEspRequest
{
};

interface IEspWsTopologyPingRequest : extends IConstWsTopologyPingRequest
{
	virtual void copy(IConstWsTopologyPingRequest &from)=0;
};

interface IClientWsTopologyPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstWsTopologyPingResponse : extends IEspResponse
{
};

interface IEspWsTopologyPingResponse : extends IConstWsTopologyPingResponse
{
	virtual void copy(IConstWsTopologyPingResponse &from)=0;
};

interface IClientWsTopologyPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspWsTopology : extends IEspService
{
	virtual bool onPing(IEspContext &context, IEspWsTopologyPingRequest &req, IEspWsTopologyPingResponse &resp)=0;
	virtual bool onSystemLog(IEspContext &context, IEspSystemLogRequest &req, IEspSystemLogResponse &resp)=0;
	virtual bool onTpClusterInfo(IEspContext &context, IEspTpClusterInfoRequest &req, IEspTpClusterInfoResponse &resp)=0;
	virtual bool onTpClusterQuery(IEspContext &context, IEspTpClusterQueryRequest &req, IEspTpClusterQueryResponse &resp)=0;
	virtual bool onTpDropZoneQuery(IEspContext &context, IEspTpDropZoneQueryRequest &req, IEspTpDropZoneQueryResponse &resp)=0;
	virtual bool onTpGetComponentFile(IEspContext &context, IEspTpGetComponentFileRequest &req, IEspTpGetComponentFileResponse &resp)=0;
	virtual bool onTpGetServicePlugins(IEspContext &context, IEspTpGetServicePluginsRequest &req, IEspTpGetServicePluginsResponse &resp)=0;
	virtual bool onTpGroupQuery(IEspContext &context, IEspTpGroupQueryRequest &req, IEspTpGroupQueryResponse &resp)=0;
	virtual bool onTpListTargetClusters(IEspContext &context, IEspTpListTargetClustersRequest &req, IEspTpListTargetClustersResponse &resp)=0;
	virtual bool onTpLogFile(IEspContext &context, IEspTpLogFileRequest &req, IEspTpLogFileResponse &resp)=0;
	virtual bool onTpLogFileDisplay(IEspContext &context, IEspTpLogFileRequest &req, IEspTpLogFileResponse &resp)=0;
	virtual bool onTpLogicalClusterQuery(IEspContext &context, IEspTpLogicalClusterQueryRequest &req, IEspTpLogicalClusterQueryResponse &resp)=0;
	virtual bool onTpMachineInfo(IEspContext &context, IEspTpMachineInfoRequest &req, IEspTpMachineInfoResponse &resp)=0;
	virtual bool onTpMachineQuery(IEspContext &context, IEspTpMachineQueryRequest &req, IEspTpMachineQueryResponse &resp)=0;
	virtual bool onTpServiceQuery(IEspContext &context, IEspTpServiceQueryRequest &req, IEspTpServiceQueryResponse &resp)=0;
	virtual bool onTpSetMachineStatus(IEspContext &context, IEspTpSetMachineStatusRequest &req, IEspTpSetMachineStatusResponse &resp)=0;
	virtual bool onTpSwapNode(IEspContext &context, IEspTpSwapNodeRequest &req, IEspTpSwapNodeResponse &resp)=0;
	virtual bool onTpTargetClusterQuery(IEspContext &context, IEspTpTargetClusterQueryRequest &req, IEspTpTargetClusterQueryResponse &resp)=0;
	virtual bool onTpThorStatus(IEspContext &context, IEspTpThorStatusRequest &req, IEspTpThorStatusResponse &resp)=0;
	virtual bool onTpXMLFile(IEspContext &context, IEspTpXMLFileRequest &req, IEspTpXMLFileResponse &resp)=0;
};

interface IClientWsTopologyEvents : extends IInterface
{
	virtual int onPingComplete(IClientWsTopologyPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientWsTopologyPingResponse *resp,IInterface* state)=0;
	virtual int onSystemLogComplete(IClientSystemLogResponse *resp,IInterface* state)=0;
	virtual int onSystemLogError(IClientSystemLogResponse *resp,IInterface* state)=0;
	virtual int onTpClusterInfoComplete(IClientTpClusterInfoResponse *resp,IInterface* state)=0;
	virtual int onTpClusterInfoError(IClientTpClusterInfoResponse *resp,IInterface* state)=0;
	virtual int onTpClusterQueryComplete(IClientTpClusterQueryResponse *resp,IInterface* state)=0;
	virtual int onTpClusterQueryError(IClientTpClusterQueryResponse *resp,IInterface* state)=0;
	virtual int onTpDropZoneQueryComplete(IClientTpDropZoneQueryResponse *resp,IInterface* state)=0;
	virtual int onTpDropZoneQueryError(IClientTpDropZoneQueryResponse *resp,IInterface* state)=0;
	virtual int onTpGetComponentFileComplete(IClientTpGetComponentFileResponse *resp,IInterface* state)=0;
	virtual int onTpGetComponentFileError(IClientTpGetComponentFileResponse *resp,IInterface* state)=0;
	virtual int onTpGetServicePluginsComplete(IClientTpGetServicePluginsResponse *resp,IInterface* state)=0;
	virtual int onTpGetServicePluginsError(IClientTpGetServicePluginsResponse *resp,IInterface* state)=0;
	virtual int onTpGroupQueryComplete(IClientTpGroupQueryResponse *resp,IInterface* state)=0;
	virtual int onTpGroupQueryError(IClientTpGroupQueryResponse *resp,IInterface* state)=0;
	virtual int onTpListTargetClustersComplete(IClientTpListTargetClustersResponse *resp,IInterface* state)=0;
	virtual int onTpListTargetClustersError(IClientTpListTargetClustersResponse *resp,IInterface* state)=0;
	virtual int onTpLogFileComplete(IClientTpLogFileResponse *resp,IInterface* state)=0;
	virtual int onTpLogFileError(IClientTpLogFileResponse *resp,IInterface* state)=0;
	virtual int onTpLogFileDisplayComplete(IClientTpLogFileResponse *resp,IInterface* state)=0;
	virtual int onTpLogFileDisplayError(IClientTpLogFileResponse *resp,IInterface* state)=0;
	virtual int onTpLogicalClusterQueryComplete(IClientTpLogicalClusterQueryResponse *resp,IInterface* state)=0;
	virtual int onTpLogicalClusterQueryError(IClientTpLogicalClusterQueryResponse *resp,IInterface* state)=0;
	virtual int onTpMachineInfoComplete(IClientTpMachineInfoResponse *resp,IInterface* state)=0;
	virtual int onTpMachineInfoError(IClientTpMachineInfoResponse *resp,IInterface* state)=0;
	virtual int onTpMachineQueryComplete(IClientTpMachineQueryResponse *resp,IInterface* state)=0;
	virtual int onTpMachineQueryError(IClientTpMachineQueryResponse *resp,IInterface* state)=0;
	virtual int onTpServiceQueryComplete(IClientTpServiceQueryResponse *resp,IInterface* state)=0;
	virtual int onTpServiceQueryError(IClientTpServiceQueryResponse *resp,IInterface* state)=0;
	virtual int onTpSetMachineStatusComplete(IClientTpSetMachineStatusResponse *resp,IInterface* state)=0;
	virtual int onTpSetMachineStatusError(IClientTpSetMachineStatusResponse *resp,IInterface* state)=0;
	virtual int onTpSwapNodeComplete(IClientTpSwapNodeResponse *resp,IInterface* state)=0;
	virtual int onTpSwapNodeError(IClientTpSwapNodeResponse *resp,IInterface* state)=0;
	virtual int onTpTargetClusterQueryComplete(IClientTpTargetClusterQueryResponse *resp,IInterface* state)=0;
	virtual int onTpTargetClusterQueryError(IClientTpTargetClusterQueryResponse *resp,IInterface* state)=0;
	virtual int onTpThorStatusComplete(IClientTpThorStatusResponse *resp,IInterface* state)=0;
	virtual int onTpThorStatusError(IClientTpThorStatusResponse *resp,IInterface* state)=0;
	virtual int onTpXMLFileComplete(IClientTpXMLFileResponse *resp,IInterface* state)=0;
	virtual int onTpXMLFileError(IClientTpXMLFileResponse *resp,IInterface* state)=0;
};

interface IClientWsTopology : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientWsTopologyPingRequest * createPingRequest()=0;
	virtual IClientWsTopologyPingResponse * Ping(IClientWsTopologyPingRequest *request)=0;
	virtual void async_Ping(IClientWsTopologyPingRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientSystemLogRequest * createSystemLogRequest()=0;
	virtual IClientSystemLogResponse * SystemLog(IClientSystemLogRequest *request)=0;
	virtual void async_SystemLog(IClientSystemLogRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpClusterInfoRequest * createTpClusterInfoRequest()=0;
	virtual IClientTpClusterInfoResponse * TpClusterInfo(IClientTpClusterInfoRequest *request)=0;
	virtual void async_TpClusterInfo(IClientTpClusterInfoRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpClusterQueryRequest * createTpClusterQueryRequest()=0;
	virtual IClientTpClusterQueryResponse * TpClusterQuery(IClientTpClusterQueryRequest *request)=0;
	virtual void async_TpClusterQuery(IClientTpClusterQueryRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpDropZoneQueryRequest * createTpDropZoneQueryRequest()=0;
	virtual IClientTpDropZoneQueryResponse * TpDropZoneQuery(IClientTpDropZoneQueryRequest *request)=0;
	virtual void async_TpDropZoneQuery(IClientTpDropZoneQueryRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpGetComponentFileRequest * createTpGetComponentFileRequest()=0;
	virtual IClientTpGetComponentFileResponse * TpGetComponentFile(IClientTpGetComponentFileRequest *request)=0;
	virtual void async_TpGetComponentFile(IClientTpGetComponentFileRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpGetServicePluginsRequest * createTpGetServicePluginsRequest()=0;
	virtual IClientTpGetServicePluginsResponse * TpGetServicePlugins(IClientTpGetServicePluginsRequest *request)=0;
	virtual void async_TpGetServicePlugins(IClientTpGetServicePluginsRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpGroupQueryRequest * createTpGroupQueryRequest()=0;
	virtual IClientTpGroupQueryResponse * TpGroupQuery(IClientTpGroupQueryRequest *request)=0;
	virtual void async_TpGroupQuery(IClientTpGroupQueryRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpListTargetClustersRequest * createTpListTargetClustersRequest()=0;
	virtual IClientTpListTargetClustersResponse * TpListTargetClusters(IClientTpListTargetClustersRequest *request)=0;
	virtual void async_TpListTargetClusters(IClientTpListTargetClustersRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpLogFileRequest * createTpLogFileRequest()=0;
	virtual IClientTpLogFileResponse * TpLogFile(IClientTpLogFileRequest *request)=0;
	virtual void async_TpLogFile(IClientTpLogFileRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpLogFileRequest * createTpLogFileDisplayRequest()=0;
	virtual IClientTpLogFileResponse * TpLogFileDisplay(IClientTpLogFileRequest *request)=0;
	virtual void async_TpLogFileDisplay(IClientTpLogFileRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpLogicalClusterQueryRequest * createTpLogicalClusterQueryRequest()=0;
	virtual IClientTpLogicalClusterQueryResponse * TpLogicalClusterQuery(IClientTpLogicalClusterQueryRequest *request)=0;
	virtual void async_TpLogicalClusterQuery(IClientTpLogicalClusterQueryRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpMachineInfoRequest * createTpMachineInfoRequest()=0;
	virtual IClientTpMachineInfoResponse * TpMachineInfo(IClientTpMachineInfoRequest *request)=0;
	virtual void async_TpMachineInfo(IClientTpMachineInfoRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpMachineQueryRequest * createTpMachineQueryRequest()=0;
	virtual IClientTpMachineQueryResponse * TpMachineQuery(IClientTpMachineQueryRequest *request)=0;
	virtual void async_TpMachineQuery(IClientTpMachineQueryRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpServiceQueryRequest * createTpServiceQueryRequest()=0;
	virtual IClientTpServiceQueryResponse * TpServiceQuery(IClientTpServiceQueryRequest *request)=0;
	virtual void async_TpServiceQuery(IClientTpServiceQueryRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpSetMachineStatusRequest * createTpSetMachineStatusRequest()=0;
	virtual IClientTpSetMachineStatusResponse * TpSetMachineStatus(IClientTpSetMachineStatusRequest *request)=0;
	virtual void async_TpSetMachineStatus(IClientTpSetMachineStatusRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpSwapNodeRequest * createTpSwapNodeRequest()=0;
	virtual IClientTpSwapNodeResponse * TpSwapNode(IClientTpSwapNodeRequest *request)=0;
	virtual void async_TpSwapNode(IClientTpSwapNodeRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpTargetClusterQueryRequest * createTpTargetClusterQueryRequest()=0;
	virtual IClientTpTargetClusterQueryResponse * TpTargetClusterQuery(IClientTpTargetClusterQueryRequest *request)=0;
	virtual void async_TpTargetClusterQuery(IClientTpTargetClusterQueryRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpThorStatusRequest * createTpThorStatusRequest()=0;
	virtual IClientTpThorStatusResponse * TpThorStatus(IClientTpThorStatusRequest *request)=0;
	virtual void async_TpThorStatus(IClientTpThorStatusRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;

	virtual IClientTpXMLFileRequest * createTpXMLFileRequest()=0;
	virtual IClientTpXMLFileResponse * TpXMLFile(IClientTpXMLFileRequest *request)=0;
	virtual void async_TpXMLFile(IClientTpXMLFileRequest *request, IClientWsTopologyEvents *events,IInterface* state=0)=0;


	virtual IClientWsTopologyPingResponse *PingFn()=0;

	virtual IClientSystemLogResponse *SystemLogFn(const char * Name_, const char * Type_, int Zip_)=0;

	virtual IClientTpClusterInfoResponse *TpClusterInfoFn(const char * Name_)=0;

	virtual IClientTpClusterQueryResponse *TpClusterQueryFn(const char * Type_)=0;

	virtual IClientTpDropZoneQueryResponse *TpDropZoneQueryFn(const char * Name_, bool ECLWatchVisibleOnly_)=0;

	virtual IClientTpGetComponentFileResponse *TpGetComponentFileFn(const char * CompType_, const char * CompName_, const char * NetAddress_, const char * Directory_, const char * FileType_, int OsType_, const char * PlainText_)=0;

	virtual IClientTpGetServicePluginsResponse *TpGetServicePluginsFn()=0;

	virtual IClientTpGroupQueryResponse *TpGroupQueryFn(const char * Kind_)=0;

	virtual IClientTpListTargetClustersResponse *TpListTargetClustersFn()=0;

	virtual IClientTpLogFileResponse *TpLogFileFn(const char * Name_, const char * Type_, int LastHours_, const char * StartDate_, const char * EndDate_, int FirstRows_, int LastRows_, int FilterType_, bool Reversely_, bool Zip_, int PageNumber_, bool LoadData_)=0;

	virtual IClientTpLogFileResponse *TpLogFileDisplayFn(const char * Name_, const char * Type_, int LastHours_, const char * StartDate_, const char * EndDate_, int FirstRows_, int LastRows_, int FilterType_, bool Reversely_, bool Zip_, int PageNumber_, bool LoadData_)=0;

	virtual IClientTpLogicalClusterQueryResponse *TpLogicalClusterQueryFn(const char * EclServerQueue_)=0;

	virtual IClientTpMachineInfoResponse *TpMachineInfoFn(const char * Name_, const char * NetAddress_)=0;

	virtual IClientTpMachineQueryResponse *TpMachineQueryFn(const char * Type_, const char * Cluster_, const char * OldIP_, const char * Path_, const char * Directory_, const char * LogDirectory_)=0;

	virtual IClientTpServiceQueryResponse *TpServiceQueryFn(const char * Type_)=0;

	virtual IClientTpSetMachineStatusResponse *TpSetMachineStatusFn(const char * MachinePath_, const char * StatusValue_)=0;

	virtual IClientTpSwapNodeResponse *TpSwapNodeFn(const char * Cluster_, const char * OldIP_, const char * NewIP_)=0;

	virtual IClientTpTargetClusterQueryResponse *TpTargetClusterQueryFn(const char * Type_, const char * Name_, bool ShowDetails_)=0;

	virtual IClientTpThorStatusResponse *TpThorStatusFn(const char * Name_)=0;

	virtual IClientTpXMLFileResponse *TpXMLFileFn(const char * Name_)=0;
};



#ifndef WSWU_API
#define WSWU_API
#endif //WSWU_API



extern "C" WSWU_API IClientWsTopology * createWsTopologyClient();


extern "C"  IEspTpMachine *createTpMachine(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpMachine *createClientTpMachine(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpCluster *createTpCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpCluster *createClientTpCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpLogicalCluster *createTpLogicalCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpLogicalCluster *createClientTpLogicalCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpGroup *createTpGroup(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpGroup *createClientTpGroup(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpDali *createTpDali(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpDali *createClientTpDali(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpEclServer *createTpEclServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpEclServer *createClientTpEclServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpEclAgent *createTpEclAgent(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpEclAgent *createClientTpEclAgent(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpAgentExec *createTpAgentExec(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpAgentExec *createClientTpAgentExec(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpEclScheduler *createTpEclScheduler(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpEclScheduler *createClientTpEclScheduler(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpBinding *createTpBinding(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpBinding *createClientTpBinding(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpEspServicePlugin *createTpEspServicePlugin(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpEspServicePlugin *createClientTpEspServicePlugin(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpEspServer *createTpEspServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpEspServer *createClientTpEspServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpDfuServer *createTpDfuServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpDfuServer *createClientTpDfuServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpSashaServer *createTpSashaServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpSashaServer *createClientTpSashaServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpLdapServer *createTpLdapServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpLdapServer *createClientTpLdapServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpDropZone *createTpDropZone(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpDropZone *createClientTpDropZone(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpMySqlServer *createTpMySqlServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpMySqlServer *createClientTpMySqlServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpFTSlave *createTpFTSlave(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpFTSlave *createClientTpFTSlave(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpDkcSlave *createTpDkcSlave(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpDkcSlave *createClientTpDkcSlave(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpGenesisServer *createTpGenesisServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpGenesisServer *createClientTpGenesisServer(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpSparkThor *createTpSparkThor(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpSparkThor *createClientTpSparkThor(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpQueue *createTpQueue(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpQueue *createClientTpQueue(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpServices *createTpServices(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpServices *createClientTpServices(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpClusterNameType *createTpClusterNameType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpClusterNameType *createClientTpClusterNameType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpListTargetClustersRequest *createTpListTargetClustersRequest(const char *serv=NULL);
extern "C"  IClientTpListTargetClustersRequest *createClientTpListTargetClustersRequest(const char *serv=NULL);
extern "C"  IEspTpListTargetClustersResponse *createTpListTargetClustersResponse(const char *serv=NULL);
extern "C"  IClientTpListTargetClustersResponse *createClientTpListTargetClustersResponse(const char *serv=NULL);
extern "C"  IEspTpTargetCluster *createTpTargetCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpTargetCluster *createClientTpTargetCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpQueryType *createTpQueryType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpQueryType *createClientTpQueryType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTpTargetClusterQueryRequest *createTpTargetClusterQueryRequest(const char *serv=NULL);
extern "C"  IClientTpTargetClusterQueryRequest *createClientTpTargetClusterQueryRequest(const char *serv=NULL);
extern "C"  IEspTpTargetClusterQueryResponse *createTpTargetClusterQueryResponse(const char *serv=NULL);
extern "C"  IClientTpTargetClusterQueryResponse *createClientTpTargetClusterQueryResponse(const char *serv=NULL);
extern "C"  IEspTpClusterQueryRequest *createTpClusterQueryRequest(const char *serv=NULL);
extern "C"  IClientTpClusterQueryRequest *createClientTpClusterQueryRequest(const char *serv=NULL);
extern "C"  IEspTpClusterQueryResponse *createTpClusterQueryResponse(const char *serv=NULL);
extern "C"  IClientTpClusterQueryResponse *createClientTpClusterQueryResponse(const char *serv=NULL);
extern "C"  IEspTpLogicalClusterQueryRequest *createTpLogicalClusterQueryRequest(const char *serv=NULL);
extern "C"  IClientTpLogicalClusterQueryRequest *createClientTpLogicalClusterQueryRequest(const char *serv=NULL);
extern "C"  IEspTpLogicalClusterQueryResponse *createTpLogicalClusterQueryResponse(const char *serv=NULL);
extern "C"  IClientTpLogicalClusterQueryResponse *createClientTpLogicalClusterQueryResponse(const char *serv=NULL);
extern "C"  IEspTpGroupQueryRequest *createTpGroupQueryRequest(const char *serv=NULL);
extern "C"  IClientTpGroupQueryRequest *createClientTpGroupQueryRequest(const char *serv=NULL);
extern "C"  IEspTpGroupQueryResponse *createTpGroupQueryResponse(const char *serv=NULL);
extern "C"  IClientTpGroupQueryResponse *createClientTpGroupQueryResponse(const char *serv=NULL);
extern "C"  IEspTpClusterInfoRequest *createTpClusterInfoRequest(const char *serv=NULL);
extern "C"  IClientTpClusterInfoRequest *createClientTpClusterInfoRequest(const char *serv=NULL);
extern "C"  IEspTpClusterInfoResponse *createTpClusterInfoResponse(const char *serv=NULL);
extern "C"  IClientTpClusterInfoResponse *createClientTpClusterInfoResponse(const char *serv=NULL);
extern "C"  IEspTpMachineQueryRequest *createTpMachineQueryRequest(const char *serv=NULL);
extern "C"  IClientTpMachineQueryRequest *createClientTpMachineQueryRequest(const char *serv=NULL);
extern "C"  IEspTpMachineQueryResponse *createTpMachineQueryResponse(const char *serv=NULL);
extern "C"  IClientTpMachineQueryResponse *createClientTpMachineQueryResponse(const char *serv=NULL);
extern "C"  IEspTpMachineInfoRequest *createTpMachineInfoRequest(const char *serv=NULL);
extern "C"  IClientTpMachineInfoRequest *createClientTpMachineInfoRequest(const char *serv=NULL);
extern "C"  IEspTpMachineInfoResponse *createTpMachineInfoResponse(const char *serv=NULL);
extern "C"  IClientTpMachineInfoResponse *createClientTpMachineInfoResponse(const char *serv=NULL);
extern "C"  IEspTpServiceQueryRequest *createTpServiceQueryRequest(const char *serv=NULL);
extern "C"  IClientTpServiceQueryRequest *createClientTpServiceQueryRequest(const char *serv=NULL);
extern "C"  IEspTpServiceQueryResponse *createTpServiceQueryResponse(const char *serv=NULL);
extern "C"  IClientTpServiceQueryResponse *createClientTpServiceQueryResponse(const char *serv=NULL);
extern "C"  IEspTpSetMachineStatusRequest *createTpSetMachineStatusRequest(const char *serv=NULL);
extern "C"  IClientTpSetMachineStatusRequest *createClientTpSetMachineStatusRequest(const char *serv=NULL);
extern "C"  IEspTpSetMachineStatusResponse *createTpSetMachineStatusResponse(const char *serv=NULL);
extern "C"  IClientTpSetMachineStatusResponse *createClientTpSetMachineStatusResponse(const char *serv=NULL);
extern "C"  IEspTpSwapNodeRequest *createTpSwapNodeRequest(const char *serv=NULL);
extern "C"  IClientTpSwapNodeRequest *createClientTpSwapNodeRequest(const char *serv=NULL);
extern "C"  IEspTpSwapNodeResponse *createTpSwapNodeResponse(const char *serv=NULL);
extern "C"  IClientTpSwapNodeResponse *createClientTpSwapNodeResponse(const char *serv=NULL);
extern "C"  IEspTpXMLFileRequest *createTpXMLFileRequest(const char *serv=NULL);
extern "C"  IClientTpXMLFileRequest *createClientTpXMLFileRequest(const char *serv=NULL);
extern "C"  IEspTpXMLFileResponse *createTpXMLFileResponse(const char *serv=NULL);
extern "C"  IClientTpXMLFileResponse *createClientTpXMLFileResponse(const char *serv=NULL);
extern "C"  IEspTpLogFileRequest *createTpLogFileRequest(const char *serv=NULL);
extern "C"  IClientTpLogFileRequest *createClientTpLogFileRequest(const char *serv=NULL);
extern "C"  IEspTpLogFileResponse *createTpLogFileResponse(const char *serv=NULL);
extern "C"  IClientTpLogFileResponse *createClientTpLogFileResponse(const char *serv=NULL);
extern "C"  IEspSystemLogRequest *createSystemLogRequest(const char *serv=NULL);
extern "C"  IClientSystemLogRequest *createClientSystemLogRequest(const char *serv=NULL);
extern "C"  IEspSystemLogResponse *createSystemLogResponse(const char *serv=NULL);
extern "C"  IClientSystemLogResponse *createClientSystemLogResponse(const char *serv=NULL);
extern "C"  IEspTpGetComponentFileRequest *createTpGetComponentFileRequest(const char *serv=NULL);
extern "C"  IClientTpGetComponentFileRequest *createClientTpGetComponentFileRequest(const char *serv=NULL);
extern "C"  IEspTpGetComponentFileResponse *createTpGetComponentFileResponse(const char *serv=NULL);
extern "C"  IClientTpGetComponentFileResponse *createClientTpGetComponentFileResponse(const char *serv=NULL);
extern "C"  IEspTpThorStatusRequest *createTpThorStatusRequest(const char *serv=NULL);
extern "C"  IClientTpThorStatusRequest *createClientTpThorStatusRequest(const char *serv=NULL);
extern "C"  IEspTpThorStatusResponse *createTpThorStatusResponse(const char *serv=NULL);
extern "C"  IClientTpThorStatusResponse *createClientTpThorStatusResponse(const char *serv=NULL);
extern "C"  IEspTpGetServicePluginsRequest *createTpGetServicePluginsRequest(const char *serv=NULL);
extern "C"  IClientTpGetServicePluginsRequest *createClientTpGetServicePluginsRequest(const char *serv=NULL);
extern "C"  IEspTpGetServicePluginsResponse *createTpGetServicePluginsResponse(const char *serv=NULL);
extern "C"  IClientTpGetServicePluginsResponse *createClientTpGetServicePluginsResponse(const char *serv=NULL);
extern "C"  IEspTpDropZoneQueryRequest *createTpDropZoneQueryRequest(const char *serv=NULL);
extern "C"  IClientTpDropZoneQueryRequest *createClientTpDropZoneQueryRequest(const char *serv=NULL);
extern "C"  IEspTpDropZoneQueryResponse *createTpDropZoneQueryResponse(const char *serv=NULL);
extern "C"  IClientTpDropZoneQueryResponse *createClientTpDropZoneQueryResponse(const char *serv=NULL);
extern "C"  IEspWsTopologyPingRequest *createWsTopologyPingRequest(const char *serv=NULL);
extern "C"  IClientWsTopologyPingRequest *createClientWsTopologyPingRequest(const char *serv=NULL);
extern "C"  IEspWsTopologyPingResponse *createWsTopologyPingResponse(const char *serv=NULL);
extern "C"  IClientWsTopologyPingResponse *createClientWsTopologyPingResponse(const char *serv=NULL);

#endif // _ws_topology_SCM_INCL
//end
