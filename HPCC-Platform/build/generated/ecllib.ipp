// *** Source file generated by HIDL Version 1.3 from ecllib.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#include "ecllib.hpp"

// clarion interface stub for IClientInstantEclResp 
class SCMCLWSTUB_IClientInstantEclResp: public SCMStubBase, implements IClientInstantEclResp // interface
	IClientInstantEclResp &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IClientInstantEclResp(IClientInstantEclResp *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IClientInstantEclResp() { _o.Release(); } 
	unsigned long _stdcall getRequestId()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclResp_getRequestId;
		SCMCLW_INTRO_IClientInstantEclResp_getRequestId;
#endif
		unsigned long _return;
		_return = _o.getRequestId();
#ifdef SCMCLW_OUTRO_IClientInstantEclResp_getRequestId;
		SCMCLW_OUTRO_IClientInstantEclResp_getRequestId;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	unsigned long _stdcall getClientValue()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclResp_getClientValue;
		SCMCLW_INTRO_IClientInstantEclResp_getClientValue;
#endif
		unsigned long _return;
		_return = _o.getClientValue();
#ifdef SCMCLW_OUTRO_IClientInstantEclResp_getClientValue;
		SCMCLW_OUTRO_IClientInstantEclResp_getClientValue;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	InstantEclState _stdcall getState()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclResp_getState;
		SCMCLW_INTRO_IClientInstantEclResp_getState;
#endif
		InstantEclState _return;
		_return = _o.getState();
#ifdef SCMCLW_OUTRO_IClientInstantEclResp_getState;
		SCMCLW_OUTRO_IClientInstantEclResp_getState;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getResultsXML()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclResp_getResultsXML;
		SCMCLW_INTRO_IClientInstantEclResp_getResultsXML;
#endif
		char * _return;
		_return = _o.getResultsXML();
#ifdef SCMCLW_OUTRO_IClientInstantEclResp_getResultsXML;
		SCMCLW_OUTRO_IClientInstantEclResp_getResultsXML;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IClientInstantEclRequest 
class SCMCLWSTUB_IClientInstantEclRequest: public SCMStubBase, implements IClientInstantEclRequest // interface
	IClientInstantEclRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IClientInstantEclRequest(IClientInstantEclRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IClientInstantEclRequest() { _o.Release(); } 
	void _stdcall setUser(const char * user)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclRequest_setUser;
		SCMCLW_INTRO_IClientInstantEclRequest_setUser;
#endif
		_o.setUser(user);
#ifdef SCMCLW_OUTRO_IClientInstantEclRequest_setUser;
		SCMCLW_OUTRO_IClientInstantEclRequest_setUser;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setUserToken(const char * user, const char * password)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclRequest_setUserToken;
		SCMCLW_INTRO_IClientInstantEclRequest_setUserToken;
#endif
		_o.setUserToken(user, password);
#ifdef SCMCLW_OUTRO_IClientInstantEclRequest_setUserToken;
		SCMCLW_OUTRO_IClientInstantEclRequest_setUserToken;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setEclServer(const char * eclserver)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclRequest_setEclServer;
		SCMCLW_INTRO_IClientInstantEclRequest_setEclServer;
#endif
		_o.setEclServer(eclserver);
#ifdef SCMCLW_OUTRO_IClientInstantEclRequest_setEclServer;
		SCMCLW_OUTRO_IClientInstantEclRequest_setEclServer;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setCluster(const char * cluster)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclRequest_setCluster;
		SCMCLW_INTRO_IClientInstantEclRequest_setCluster;
#endif
		_o.setCluster(cluster);
#ifdef SCMCLW_OUTRO_IClientInstantEclRequest_setCluster;
		SCMCLW_OUTRO_IClientInstantEclRequest_setCluster;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setClientValue(unsigned long cv)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclRequest_setClientValue;
		SCMCLW_INTRO_IClientInstantEclRequest_setClientValue;
#endif
		_o.setClientValue(cv);
#ifdef SCMCLW_OUTRO_IClientInstantEclRequest_setClientValue;
		SCMCLW_OUTRO_IClientInstantEclRequest_setClientValue;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setEclText(const char * text)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclRequest_setEclText;
		SCMCLW_INTRO_IClientInstantEclRequest_setEclText;
#endif
		_o.setEclText(text);
#ifdef SCMCLW_OUTRO_IClientInstantEclRequest_setEclText;
		SCMCLW_OUTRO_IClientInstantEclRequest_setEclText;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IClientInstantEclEvents 
class SCMCLWSTUB_IClientInstantEclEvents: public SCMStubBase, implements IClientInstantEclEvents // interface
	IClientInstantEclEvents &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IClientInstantEclEvents(IClientInstantEclEvents *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IClientInstantEclEvents() { _o.Release(); } 
	int _stdcall onComplete(IClientInstantEclResp & resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclEvents_onComplete;
		SCMCLW_INTRO_IClientInstantEclEvents_onComplete;
#endif
		int _return;
		_return = _o.onComplete(resp);
#ifdef SCMCLW_OUTRO_IClientInstantEclEvents_onComplete;
		SCMCLW_OUTRO_IClientInstantEclEvents_onComplete;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall onError(IClientInstantEclResp & resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEclEvents_onError;
		SCMCLW_INTRO_IClientInstantEclEvents_onError;
#endif
		int _return;
		_return = _o.onError(resp);
#ifdef SCMCLW_OUTRO_IClientInstantEclEvents_onError;
		SCMCLW_OUTRO_IClientInstantEclEvents_onError;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IClientInstantEcl 
class SCMCLWSTUB_IClientInstantEcl: public SCMStubBase, implements IClientInstantEcl // interface
	IClientInstantEcl &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IClientInstantEcl(IClientInstantEcl *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IClientInstantEcl() { _o.Release(); } 
	void _stdcall addServiceUrl(const char * url)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEcl_addServiceUrl;
		SCMCLW_INTRO_IClientInstantEcl_addServiceUrl;
#endif
		_o.addServiceUrl(url);
#ifdef SCMCLW_OUTRO_IClientInstantEcl_addServiceUrl;
		SCMCLW_OUTRO_IClientInstantEcl_addServiceUrl;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall removeServiceUrl(const char * url)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEcl_removeServiceUrl;
		SCMCLW_INTRO_IClientInstantEcl_removeServiceUrl;
#endif
		_o.removeServiceUrl(url);
#ifdef SCMCLW_OUTRO_IClientInstantEcl_removeServiceUrl;
		SCMCLW_OUTRO_IClientInstantEcl_removeServiceUrl;
#endif
		SCMCLW_OUTRO;
	}
	IClientInstantEclRequest * _stdcall createRequest()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEcl_createRequest;
		SCMCLW_INTRO_IClientInstantEcl_createRequest;
#endif
		IClientInstantEclRequest * _return;
		_return = _o.createRequest();
#ifdef SCMCLW_OUTRO_IClientInstantEcl_createRequest;
		SCMCLW_OUTRO_IClientInstantEcl_createRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	IClientInstantEclResp * _stdcall runEcl(IClientInstantEclRequest * request)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEcl_runEcl;
		SCMCLW_INTRO_IClientInstantEcl_runEcl;
#endif
		IClientInstantEclResp * _return;
		_return = _o.runEcl(request);
#ifdef SCMCLW_OUTRO_IClientInstantEcl_runEcl;
		SCMCLW_OUTRO_IClientInstantEcl_runEcl;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall runEclAsync(IClientInstantEclRequest * request, IClientInstantEclEvents & events)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IClientInstantEcl_runEclAsync;
		SCMCLW_INTRO_IClientInstantEcl_runEclAsync;
#endif
		_o.runEclAsync(request, events);
#ifdef SCMCLW_OUTRO_IClientInstantEcl_runEclAsync;
		SCMCLW_OUTRO_IClientInstantEcl_runEclAsync;
#endif
		SCMCLW_OUTRO;
	}
};
//end
