// *** Include file generated by HIDL Version 1.3 from ws_machine.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_machine_SCM_INCL
#define ws_machine_SCM_INCL

#include "esp.hpp"



#include "xslprocessor.hpp" 

enum ThresholdType
{
	THRESHOLD_PERCENTAGE = 0,
	THRESHOLD_MB = 1
};



interface IConstDiskUsage : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getPath()=0;
	virtual const char * getDescription()=0;
	virtual bool getInUse_isNull()=0;
	virtual __int64 getInUse()=0;
	virtual bool getAvailable_isNull()=0;
	virtual __int64 getAvailable()=0;
	virtual bool getPercentAvailable_isNull()=0;
	virtual int getPercentAvailable()=0;
};

interface IEspDiskUsage : extends IConstDiskUsage
{
	virtual void setName(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setInUse_null()=0;
	virtual void setInUse(__int64 val)=0;
	virtual void setAvailable_null()=0;
	virtual void setAvailable(__int64 val)=0;
	virtual void setPercentAvailable_null()=0;
	virtual void setPercentAvailable(int val)=0;
	virtual void copy(IConstDiskUsage &from)=0;
};

interface IClientDiskUsage : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setInUse_null()=0;
	virtual void setInUse(__int64 val)=0;
	virtual void setAvailable_null()=0;
	virtual void setAvailable(__int64 val)=0;
	virtual void setPercentAvailable_null()=0;
	virtual void setPercentAvailable(int val)=0;
	virtual const char * getName()=0;
	virtual const char * getPath()=0;
	virtual const char * getDescription()=0;
	virtual bool getInUse_isNull()=0;
	virtual __int64 getInUse()=0;
	virtual bool getAvailable_isNull()=0;
	virtual __int64 getAvailable()=0;
	virtual bool getPercentAvailable_isNull()=0;
	virtual int getPercentAvailable()=0;
};



interface IConstMachineUsage : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstDiskUsage> & getDiskUsages()=0;
};

interface IEspMachineUsage : extends IConstMachineUsage
{
	virtual void setName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setDiskUsages(IArrayOf<IEspDiskUsage> &val)=0;
	virtual void setDiskUsages(IArrayOf<IConstDiskUsage> &val)=0;
	virtual void copy(IConstMachineUsage &from)=0;
};

interface IClientMachineUsage : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setNetAddress(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setDiskUsages(IArrayOf<IEspDiskUsage> &val)=0;
	virtual void setDiskUsages(IArrayOf<IConstDiskUsage> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getNetAddress()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstDiskUsage> & getDiskUsages()=0;
};



interface IConstComponent : extends IEspStruct
{
	virtual const char * getType()=0;
	virtual const char * getName()=0;
};

interface IEspComponent : extends IConstComponent
{
	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void copy(IConstComponent &from)=0;
};

interface IClientComponent : extends IInterface
{
	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual const char * getType()=0;
	virtual const char * getName()=0;
};



interface IConstComponentUsage : extends IEspStruct
{
	virtual const char * getType()=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstMachineUsage> & getMachineUsages()=0;
};

interface IEspComponentUsage : extends IConstComponentUsage
{
	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setMachineUsages(IArrayOf<IEspMachineUsage> &val)=0;
	virtual void setMachineUsages(IArrayOf<IConstMachineUsage> &val)=0;
	virtual void copy(IConstComponentUsage &from)=0;
};

interface IClientComponentUsage : extends IInterface
{
	virtual void setType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setMachineUsages(IArrayOf<IEspMachineUsage> &val)=0;
	virtual void setMachineUsages(IArrayOf<IConstMachineUsage> &val)=0;
	virtual const char * getType()=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstMachineUsage> & getMachineUsages()=0;
};



interface IConstTargetClusterUsage : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstComponentUsage> & getComponentUsages()=0;
};

interface IEspTargetClusterUsage : extends IConstTargetClusterUsage
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setComponentUsages(IArrayOf<IEspComponentUsage> &val)=0;
	virtual void setComponentUsages(IArrayOf<IConstComponentUsage> &val)=0;
	virtual void copy(IConstTargetClusterUsage &from)=0;
};

interface IClientTargetClusterUsage : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setComponentUsages(IArrayOf<IEspComponentUsage> &val)=0;
	virtual void setComponentUsages(IArrayOf<IConstComponentUsage> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstComponentUsage> & getComponentUsages()=0;
};



interface IConstNodeGroupUsage : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstComponentUsage> & getComponentUsages()=0;
};

interface IEspNodeGroupUsage : extends IConstNodeGroupUsage
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setComponentUsages(IArrayOf<IEspComponentUsage> &val)=0;
	virtual void setComponentUsages(IArrayOf<IConstComponentUsage> &val)=0;
	virtual void copy(IConstNodeGroupUsage &from)=0;
};

interface IClientNodeGroupUsage : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setComponentUsages(IArrayOf<IEspComponentUsage> &val)=0;
	virtual void setComponentUsages(IArrayOf<IConstComponentUsage> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual IArrayOf<IConstComponentUsage> & getComponentUsages()=0;
};



interface IConstGetMachineInfoRequest : extends IEspRequest
{
	virtual StringArray & getAddresses()=0;
	virtual const char * getSortBy()=0;
	virtual const char * getClusterType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getOldIP()=0;
	virtual const char * getPath()=0;
	virtual const char * getAddProcessesToFilter()=0;
	virtual bool getApplyProcessFilter()=0;
	virtual bool getGetProcessorInfo()=0;
	virtual bool getGetStorageInfo()=0;
	virtual bool getLocalFileSystemsOnly()=0;
	virtual bool getGetSoftwareInfo()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual const char * getUserName()=0;
	virtual const char * getPassword()=0;
	virtual const char * getSecurityString()=0;
};

interface IEspGetMachineInfoRequest : extends IConstGetMachineInfoRequest
{
	virtual void setAddresses(StringArray &val)=0;
	virtual void setSortBy(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setAddProcessesToFilter(const char * val)=0;
	virtual void setApplyProcessFilter(bool val)=0;
	virtual void setGetProcessorInfo(bool val)=0;
	virtual void setGetStorageInfo(bool val)=0;
	virtual void setLocalFileSystemsOnly(bool val)=0;
	virtual void setGetSoftwareInfo(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setPassword(const char * val)=0;
	virtual void setSecurityString(const char * val)=0;
	virtual void copy(IConstGetMachineInfoRequest &from)=0;
};

interface IClientGetMachineInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setAddresses(StringArray &val)=0;
	virtual void setSortBy(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setAddProcessesToFilter(const char * val)=0;
	virtual void setApplyProcessFilter(bool val)=0;
	virtual void setGetProcessorInfo(bool val)=0;
	virtual void setGetStorageInfo(bool val)=0;
	virtual void setLocalFileSystemsOnly(bool val)=0;
	virtual void setGetSoftwareInfo(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setPassword(const char * val)=0;
	virtual void setSecurityString(const char * val)=0;
};



//--define a struct that mimics GetMachineInfoRequest so it can be
//--echoed back in the response
//
interface IConstRequestInfoStruct : extends IEspStruct
{
	virtual StringArray & getAddresses()=0;
	virtual const char * getSortBy()=0;
	virtual const char * getClusterType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getOldIP()=0;
	virtual const char * getPath()=0;
	virtual const char * getAddProcessesToFilter()=0;
	virtual bool getApplyProcessFilter()=0;
	virtual bool getGetProcessorInfo()=0;
	virtual bool getGetStorageInfo()=0;
	virtual bool getLocalFileSystemsOnly()=0;
	virtual bool getGetSoftwareInfo()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual const char * getSecurityString()=0;
	virtual const char * getUserName()=0;
	virtual const char * getPassword()=0;
	virtual bool getEnableSNMP()=0;
};

interface IEspRequestInfoStruct : extends IConstRequestInfoStruct
{
	virtual void setAddresses(StringArray &val)=0;
	virtual void setSortBy(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setAddProcessesToFilter(const char * val)=0;
	virtual void setApplyProcessFilter(bool val)=0;
	virtual void setGetProcessorInfo(bool val)=0;
	virtual void setGetStorageInfo(bool val)=0;
	virtual void setLocalFileSystemsOnly(bool val)=0;
	virtual void setGetSoftwareInfo(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void setSecurityString(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setPassword(const char * val)=0;
	virtual void setEnableSNMP(bool val)=0;
	virtual void copy(IConstRequestInfoStruct &from)=0;
};

interface IClientRequestInfoStruct : extends IInterface
{
	virtual void setAddresses(StringArray &val)=0;
	virtual void setSortBy(const char * val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setOldIP(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setAddProcessesToFilter(const char * val)=0;
	virtual void setApplyProcessFilter(bool val)=0;
	virtual void setGetProcessorInfo(bool val)=0;
	virtual void setGetStorageInfo(bool val)=0;
	virtual void setLocalFileSystemsOnly(bool val)=0;
	virtual void setGetSoftwareInfo(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void setSecurityString(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setPassword(const char * val)=0;
	virtual void setEnableSNMP(bool val)=0;
	virtual StringArray & getAddresses()=0;
	virtual const char * getSortBy()=0;
	virtual const char * getClusterType()=0;
	virtual const char * getCluster()=0;
	virtual const char * getOldIP()=0;
	virtual const char * getPath()=0;
	virtual const char * getAddProcessesToFilter()=0;
	virtual bool getApplyProcessFilter()=0;
	virtual bool getGetProcessorInfo()=0;
	virtual bool getGetStorageInfo()=0;
	virtual bool getLocalFileSystemsOnly()=0;
	virtual bool getGetSoftwareInfo()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
	virtual const char * getSecurityString()=0;
	virtual const char * getUserName()=0;
	virtual const char * getPassword()=0;
	virtual bool getEnableSNMP()=0;
};




interface IConstProcessorInfo : extends IEspStruct
{
	virtual const char * getType()=0;
	virtual int getLoad()=0;
};

interface IEspProcessorInfo : extends IConstProcessorInfo
{
	virtual void setType(const char * val)=0;
	virtual void setLoad(int val)=0;
	virtual void copy(IConstProcessorInfo &from)=0;
};

interface IClientProcessorInfo : extends IInterface
{
	virtual void setType(const char * val)=0;
	virtual void setLoad(int val)=0;
	virtual const char * getType()=0;
	virtual int getLoad()=0;
};



interface IConstStorageInfo : extends IEspStruct
{
	virtual const char * getDescription()=0;
	virtual const char * getType()=0;
	virtual __int64 getAvailable()=0;
	virtual int getPercentAvail()=0;
	virtual __int64 getTotal()=0;
	virtual int getFailures()=0;
};

interface IEspStorageInfo : extends IConstStorageInfo
{
	virtual void setDescription(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setAvailable(__int64 val)=0;
	virtual void setPercentAvail(int val)=0;
	virtual void setTotal(__int64 val)=0;
	virtual void setFailures(int val)=0;
	virtual void copy(IConstStorageInfo &from)=0;
};

interface IClientStorageInfo : extends IInterface
{
	virtual void setDescription(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setAvailable(__int64 val)=0;
	virtual void setPercentAvail(int val)=0;
	virtual void setTotal(__int64 val)=0;
	virtual void setFailures(int val)=0;
	virtual const char * getDescription()=0;
	virtual const char * getType()=0;
	virtual __int64 getAvailable()=0;
	virtual int getPercentAvail()=0;
	virtual __int64 getTotal()=0;
	virtual int getFailures()=0;
};



interface IConstSWRunInfo : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual int getInstances()=0;
	virtual int getState()=0;
};

interface IEspSWRunInfo : extends IConstSWRunInfo
{
	virtual void setName(const char * val)=0;
	virtual void setInstances(int val)=0;
	virtual void setState(int val)=0;
	virtual void copy(IConstSWRunInfo &from)=0;
};

interface IClientSWRunInfo : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setInstances(int val)=0;
	virtual void setState(int val)=0;
	virtual const char * getName()=0;
	virtual int getInstances()=0;
	virtual int getState()=0;
};



interface IConstProcessInfo : extends IEspStruct
{
	virtual int getPID()=0;
	virtual const char * getDescription()=0;
	virtual const char * getParameter()=0;
};

interface IEspProcessInfo : extends IConstProcessInfo
{
	virtual void setPID(int val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setParameter(const char * val)=0;
	virtual void copy(IConstProcessInfo &from)=0;
};

interface IClientProcessInfo : extends IInterface
{
	virtual void setPID(int val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setParameter(const char * val)=0;
	virtual int getPID()=0;
	virtual const char * getDescription()=0;
	virtual const char * getParameter()=0;
};


   
interface IConstComponentInfo : extends IEspStruct
{
	virtual bool getCondition_isNull()=0;
	virtual int getCondition()=0;
	virtual bool getState_isNull()=0;
	virtual int getState()=0;
	virtual const char * getUpTime()=0;
};

interface IEspComponentInfo : extends IConstComponentInfo
{
	virtual void setCondition_null()=0;
	virtual void setCondition(int val)=0;
	virtual void setState_null()=0;
	virtual void setState(int val)=0;
	virtual void setUpTime(const char * val)=0;
	virtual void copy(IConstComponentInfo &from)=0;
};

interface IClientComponentInfo : extends IInterface
{
	virtual void setCondition_null()=0;
	virtual void setCondition(int val)=0;
	virtual void setState_null()=0;
	virtual void setState(int val)=0;
	virtual void setUpTime(const char * val)=0;
	virtual bool getCondition_isNull()=0;
	virtual int getCondition()=0;
	virtual bool getState_isNull()=0;
	virtual int getState()=0;
	virtual const char * getUpTime()=0;
};



interface IConstMachineInfoEx : extends IEspStruct
{
	virtual const char * getAddress()=0;
	virtual const char * getConfigAddress()=0;
	virtual const char * getName()=0;
	virtual const char * getProcessType()=0;
	virtual const char * getDisplayType()=0;
	virtual const char * getDescription()=0;
	virtual const char * getAgentVersion()=0;
	virtual const char * getContact()=0;
	virtual const char * getLocation()=0;
	virtual const char * getUpTime()=0;
	virtual const char * getComponentName()=0;
	virtual const char * getComponentPath()=0;
	virtual const char * getRoxieState()=0;
	virtual const char * getRoxieStateDetails()=0;
	virtual int getOS()=0;
	virtual int getProcessNumber()=0;
	virtual IArrayOf<IConstProcessorInfo> & getProcessors()=0;
	virtual IArrayOf<IConstStorageInfo> & getStorage()=0;
	virtual IArrayOf<IConstSWRunInfo> & getRunning()=0;
	virtual IConstStorageInfo & getPhysicalMemory()=0;
	virtual IConstStorageInfo & getVirtualMemory()=0;
	virtual IConstComponentInfo & getComponentInfo()=0;
};

interface IEspMachineInfoEx : extends IConstMachineInfoEx
{
	virtual void setAddress(const char * val)=0;
	virtual void setConfigAddress(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setProcessType(const char * val)=0;
	virtual void setDisplayType(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setAgentVersion(const char * val)=0;
	virtual void setContact(const char * val)=0;
	virtual void setLocation(const char * val)=0;
	virtual void setUpTime(const char * val)=0;
	virtual void setComponentName(const char * val)=0;
	virtual void setComponentPath(const char * val)=0;
	virtual void setRoxieState(const char * val)=0;
	virtual void setRoxieStateDetails(const char * val)=0;
	virtual void setOS(int val)=0;
	virtual void setProcessNumber(int val)=0;
	virtual void setProcessors(IArrayOf<IEspProcessorInfo> &val)=0;
	virtual void setProcessors(IArrayOf<IConstProcessorInfo> &val)=0;
	virtual void setStorage(IArrayOf<IEspStorageInfo> &val)=0;
	virtual void setStorage(IArrayOf<IConstStorageInfo> &val)=0;
	virtual void setRunning(IArrayOf<IEspSWRunInfo> &val)=0;
	virtual void setRunning(IArrayOf<IConstSWRunInfo> &val)=0;
	virtual IEspStorageInfo & updatePhysicalMemory()=0;
	virtual void setPhysicalMemory(IConstStorageInfo &ifrom)=0;
	virtual IEspStorageInfo & updateVirtualMemory()=0;
	virtual void setVirtualMemory(IConstStorageInfo &ifrom)=0;
	virtual IEspComponentInfo & updateComponentInfo()=0;
	virtual void setComponentInfo(IConstComponentInfo &ifrom)=0;
	virtual void copy(IConstMachineInfoEx &from)=0;
};

interface IClientMachineInfoEx : extends IInterface
{
	virtual void setAddress(const char * val)=0;
	virtual void setConfigAddress(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setProcessType(const char * val)=0;
	virtual void setDisplayType(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setAgentVersion(const char * val)=0;
	virtual void setContact(const char * val)=0;
	virtual void setLocation(const char * val)=0;
	virtual void setUpTime(const char * val)=0;
	virtual void setComponentName(const char * val)=0;
	virtual void setComponentPath(const char * val)=0;
	virtual void setRoxieState(const char * val)=0;
	virtual void setRoxieStateDetails(const char * val)=0;
	virtual void setOS(int val)=0;
	virtual void setProcessNumber(int val)=0;
	virtual void setProcessors(IArrayOf<IEspProcessorInfo> &val)=0;
	virtual void setProcessors(IArrayOf<IConstProcessorInfo> &val)=0;
	virtual void setStorage(IArrayOf<IEspStorageInfo> &val)=0;
	virtual void setStorage(IArrayOf<IConstStorageInfo> &val)=0;
	virtual void setRunning(IArrayOf<IEspSWRunInfo> &val)=0;
	virtual void setRunning(IArrayOf<IConstSWRunInfo> &val)=0;
	virtual IEspStorageInfo & updatePhysicalMemory()=0;
	virtual void setPhysicalMemory(IConstStorageInfo &ifrom)=0;
	virtual IEspStorageInfo & updateVirtualMemory()=0;
	virtual void setVirtualMemory(IConstStorageInfo &ifrom)=0;
	virtual IEspComponentInfo & updateComponentInfo()=0;
	virtual void setComponentInfo(IConstComponentInfo &ifrom)=0;
	virtual const char * getAddress()=0;
	virtual const char * getConfigAddress()=0;
	virtual const char * getName()=0;
	virtual const char * getProcessType()=0;
	virtual const char * getDisplayType()=0;
	virtual const char * getDescription()=0;
	virtual const char * getAgentVersion()=0;
	virtual const char * getContact()=0;
	virtual const char * getLocation()=0;
	virtual const char * getUpTime()=0;
	virtual const char * getComponentName()=0;
	virtual const char * getComponentPath()=0;
	virtual const char * getRoxieState()=0;
	virtual const char * getRoxieStateDetails()=0;
	virtual int getOS()=0;
	virtual int getProcessNumber()=0;
	virtual IArrayOf<IConstProcessorInfo> & getProcessors()=0;
	virtual IArrayOf<IConstStorageInfo> & getStorage()=0;
	virtual IArrayOf<IConstSWRunInfo> & getRunning()=0;
	virtual IConstStorageInfo & getPhysicalMemory()=0;
	virtual IConstStorageInfo & getVirtualMemory()=0;
	virtual IConstComponentInfo & getComponentInfo()=0;
};




interface IConstGetMachineInfoResponse : extends IEspResponse
{
	virtual IConstRequestInfoStruct & getRequestInfo()=0;
	virtual StringArray & getColumns()=0;
	virtual IArrayOf<IConstMachineInfoEx> & getMachines()=0;
	virtual const char * getTimeStamp()=0;
	virtual const char * getUserName()=0;
	virtual const char * getPassword()=0;
	virtual const char * getAcceptLanguage()=0;
};

interface IEspGetMachineInfoResponse : extends IConstGetMachineInfoResponse
{
	virtual IEspRequestInfoStruct & updateRequestInfo()=0;
	virtual void setRequestInfo(IConstRequestInfoStruct &ifrom)=0;
	virtual void setColumns(StringArray &val)=0;
	virtual void setMachines(IArrayOf<IEspMachineInfoEx> &val)=0;
	virtual void setMachines(IArrayOf<IConstMachineInfoEx> &val)=0;
	virtual void setTimeStamp(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setPassword(const char * val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void copy(IConstGetMachineInfoResponse &from)=0;
};

interface IClientGetMachineInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstRequestInfoStruct & getRequestInfo()=0;
	virtual StringArray & getColumns()=0;
	virtual IArrayOf<IConstMachineInfoEx> & getMachines()=0;
	virtual const char * getTimeStamp()=0;
	virtual const char * getUserName()=0;
	virtual const char * getPassword()=0;
	virtual const char * getAcceptLanguage()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstGetMachineInfoRequestEx : extends IEspRequest
{
	virtual StringArray & getAddresses()=0;
	virtual const char * getClusterType()=0;
};

interface IEspGetMachineInfoRequestEx : extends IConstGetMachineInfoRequestEx
{
	virtual void setAddresses(StringArray &val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void copy(IConstGetMachineInfoRequestEx &from)=0;
};

interface IClientGetMachineInfoRequestEx : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setAddresses(StringArray &val)=0;
	virtual void setClusterType(const char * val)=0;
};



interface IConstGetMachineInfoResponseEx : extends IEspResponse
{
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstMachineInfoEx> & getMachines()=0;
};

interface IEspGetMachineInfoResponseEx : extends IConstGetMachineInfoResponseEx
{
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void setMachines(IArrayOf<IEspMachineInfoEx> &val)=0;
	virtual void setMachines(IArrayOf<IConstMachineInfoEx> &val)=0;
	virtual void copy(IConstGetMachineInfoResponseEx &from)=0;
};

interface IClientGetMachineInfoResponseEx : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getAcceptLanguage()=0;
	virtual IArrayOf<IConstMachineInfoEx> & getMachines()=0;

	virtual const IMultiException& getExceptions()=0;
};





//-------- GetMetrics ---------
//
interface IConstMetricsRequest : extends IEspRequest
{
	virtual const char * getSecurityString()=0;
	virtual StringArray & getAddresses()=0;
	virtual StringArray & getShowColumns()=0;
	virtual int getAutoRefresh()=0;
	virtual bool getSelectAllChecked()=0;
	virtual const char * getCluster()=0;
	virtual bool getAutoUpdate()=0;
};

interface IEspMetricsRequest : extends IConstMetricsRequest
{
	virtual void setSecurityString(const char * val)=0;
	virtual void setAddresses(StringArray &val)=0;
	virtual void setShowColumns(StringArray &val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setSelectAllChecked(bool val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setAutoUpdate(bool val)=0;
	virtual void copy(IConstMetricsRequest &from)=0;
};

interface IClientMetricsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSecurityString(const char * val)=0;
	virtual void setAddresses(StringArray &val)=0;
	virtual void setShowColumns(StringArray &val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setSelectAllChecked(bool val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setAutoUpdate(bool val)=0;
};



interface IConstMetricsResponse : extends IEspResponse
{
	virtual const char * getFieldInformation()=0;
	virtual const char * getMetrics()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getCluster()=0;
	virtual bool getSelectAllChecked()=0;
	virtual bool getAutoUpdate()=0;
	virtual const char * getAcceptLanguage()=0;
};

interface IEspMetricsResponse : extends IConstMetricsResponse
{
	virtual void setFieldInformation(const char * val)=0;
	virtual void setMetrics(const char * val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setCluster(const char * val)=0;
	virtual void setSelectAllChecked(bool val)=0;
	virtual void setAutoUpdate(bool val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void copy(IConstMetricsResponse &from)=0;
};

interface IClientMetricsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getFieldInformation()=0;
	virtual const char * getMetrics()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getCluster()=0;
	virtual bool getSelectAllChecked()=0;
	virtual bool getAutoUpdate()=0;
	virtual const char * getAcceptLanguage()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstRemoteExecResult : extends IEspStruct
{
	virtual const char * getClusterType()=0;
	virtual const char * getAddressOrig()=0;
	virtual const char * getAddress()=0;
	virtual const char * getResponse()=0;
	virtual int getResultCode()=0;
};

interface IEspRemoteExecResult : extends IConstRemoteExecResult
{
	virtual void setClusterType(const char * val)=0;
	virtual void setAddressOrig(const char * val)=0;
	virtual void setAddress(const char * val)=0;
	virtual void setResponse(const char * val)=0;
	virtual void setResultCode(int val)=0;
	virtual void copy(IConstRemoteExecResult &from)=0;
};

interface IClientRemoteExecResult : extends IInterface
{
	virtual void setClusterType(const char * val)=0;
	virtual void setAddressOrig(const char * val)=0;
	virtual void setAddress(const char * val)=0;
	virtual void setResponse(const char * val)=0;
	virtual void setResultCode(int val)=0;
	virtual const char * getClusterType()=0;
	virtual const char * getAddressOrig()=0;
	virtual const char * getAddress()=0;
	virtual const char * getResponse()=0;
	virtual int getResultCode()=0;
};



interface IConstStartStopBeginRequest : extends IEspRequest
{
	virtual StringArray & getAddresses()=0;
	virtual const char * getKey1()=0;
	virtual const char * getKey2()=0;
	virtual bool getStop()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
};

interface IEspStartStopBeginRequest : extends IConstStartStopBeginRequest
{
	virtual void setAddresses(StringArray &val)=0;
	virtual void setKey1(const char * val)=0;
	virtual void setKey2(const char * val)=0;
	virtual void setStop(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void copy(IConstStartStopBeginRequest &from)=0;
};

interface IClientStartStopBeginRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setAddresses(StringArray &val)=0;
	virtual void setKey1(const char * val)=0;
	virtual void setKey2(const char * val)=0;
	virtual void setStop(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
};



interface IConstStartStopBeginResponse : extends IEspResponse
{
	virtual const char * getAddresses()=0;
	virtual const char * getKey1()=0;
	virtual const char * getKey2()=0;
	virtual bool getStop()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
};

interface IEspStartStopBeginResponse : extends IConstStartStopBeginResponse
{
	virtual void setAddresses(const char * val)=0;
	virtual void setKey1(const char * val)=0;
	virtual void setKey2(const char * val)=0;
	virtual void setStop(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void copy(IConstStartStopBeginResponse &from)=0;
};

interface IClientStartStopBeginResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getAddresses()=0;
	virtual const char * getKey1()=0;
	virtual const char * getKey2()=0;
	virtual bool getStop()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstStartStopDoneRequest : extends IEspRequest
{
	virtual const char * getAddresses()=0;
	virtual const char * getKey1()=0;
	virtual const char * getKey2()=0;
	virtual bool getStop()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
};

interface IEspStartStopDoneRequest : extends IConstStartStopDoneRequest
{
	virtual void setAddresses(const char * val)=0;
	virtual void setKey1(const char * val)=0;
	virtual void setKey2(const char * val)=0;
	virtual void setStop(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void copy(IConstStartStopDoneRequest &from)=0;
};

interface IClientStartStopDoneRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setAddresses(const char * val)=0;
	virtual void setKey1(const char * val)=0;
	virtual void setKey2(const char * val)=0;
	virtual void setStop(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
};



interface IConstStartStopRequest : extends IEspRequest
{
	virtual StringArray & getAddresses()=0;
	virtual const char * getKey1()=0;
	virtual const char * getKey2()=0;
	virtual bool getStop()=0;
};

interface IEspStartStopRequest : extends IConstStartStopRequest
{
	virtual void setAddresses(StringArray &val)=0;
	virtual void setKey1(const char * val)=0;
	virtual void setKey2(const char * val)=0;
	virtual void setStop(bool val)=0;
	virtual void copy(IConstStartStopRequest &from)=0;
};

interface IClientStartStopRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setAddresses(StringArray &val)=0;
	virtual void setKey1(const char * val)=0;
	virtual void setKey2(const char * val)=0;
	virtual void setStop(bool val)=0;
};



interface IConstStartStopResult : extends IEspStruct
{
	virtual const char * getAddressOrig()=0;
	virtual const char * getAddress()=0;
	virtual const char * getCompType()=0;
	virtual const char * getName()=0;
	virtual const char * getPath()=0;
	virtual const char * getCommand()=0;
	virtual const char * getResponse()=0;
	virtual int getResultCode()=0;
	virtual int getOS()=0;
};

interface IEspStartStopResult : extends IConstStartStopResult
{
	virtual void setAddressOrig(const char * val)=0;
	virtual void setAddress(const char * val)=0;
	virtual void setCompType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setCommand(const char * val)=0;
	virtual void setResponse(const char * val)=0;
	virtual void setResultCode(int val)=0;
	virtual void setOS(int val)=0;
	virtual void copy(IConstStartStopResult &from)=0;
};

interface IClientStartStopResult : extends IInterface
{
	virtual void setAddressOrig(const char * val)=0;
	virtual void setAddress(const char * val)=0;
	virtual void setCompType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setCommand(const char * val)=0;
	virtual void setResponse(const char * val)=0;
	virtual void setResultCode(int val)=0;
	virtual void setOS(int val)=0;
	virtual const char * getAddressOrig()=0;
	virtual const char * getAddress()=0;
	virtual const char * getCompType()=0;
	virtual const char * getName()=0;
	virtual const char * getPath()=0;
	virtual const char * getCommand()=0;
	virtual const char * getResponse()=0;
	virtual int getResultCode()=0;
	virtual int getOS()=0;
};



interface IConstStartStopResponse : extends IEspResponse
{
	virtual IArrayOf<IConstStartStopResult> & getStartStopResults()=0;
	virtual bool getStop()=0;
	virtual bool getContainCluster()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
};

interface IEspStartStopResponse : extends IConstStartStopResponse
{
	virtual void setStartStopResults(IArrayOf<IEspStartStopResult> &val)=0;
	virtual void setStartStopResults(IArrayOf<IConstStartStopResult> &val)=0;
	virtual void setStop(bool val)=0;
	virtual void setContainCluster(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void copy(IConstStartStopResponse &from)=0;
};

interface IClientStartStopResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstStartStopResult> & getStartStopResults()=0;
	virtual bool getStop()=0;
	virtual bool getContainCluster()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetTargetClusterInfoRequest : extends IEspRequest
{
	virtual StringArray & getTargetClusters()=0;
	virtual const char * getAddProcessesToFilter()=0;
	virtual bool getApplyProcessFilter()=0;
	virtual bool getGetProcessorInfo()=0;
	virtual bool getGetStorageInfo()=0;
	virtual bool getLocalFileSystemsOnly()=0;
	virtual bool getGetSoftwareInfo()=0;
	virtual int getMemThreshold()=0;
	virtual int getDiskThreshold()=0;
	virtual int getCpuThreshold()=0;
	virtual int getAutoRefresh()=0;
	virtual const char * getMemThresholdType()=0;
	virtual const char * getDiskThresholdType()=0;
};

interface IEspGetTargetClusterInfoRequest : extends IConstGetTargetClusterInfoRequest
{
	virtual void setTargetClusters(StringArray &val)=0;
	virtual void setAddProcessesToFilter(const char * val)=0;
	virtual void setApplyProcessFilter(bool val)=0;
	virtual void setGetProcessorInfo(bool val)=0;
	virtual void setGetStorageInfo(bool val)=0;
	virtual void setLocalFileSystemsOnly(bool val)=0;
	virtual void setGetSoftwareInfo(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
	virtual void copy(IConstGetTargetClusterInfoRequest &from)=0;
};

interface IClientGetTargetClusterInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTargetClusters(StringArray &val)=0;
	virtual void setAddProcessesToFilter(const char * val)=0;
	virtual void setApplyProcessFilter(bool val)=0;
	virtual void setGetProcessorInfo(bool val)=0;
	virtual void setGetStorageInfo(bool val)=0;
	virtual void setLocalFileSystemsOnly(bool val)=0;
	virtual void setGetSoftwareInfo(bool val)=0;
	virtual void setMemThreshold(int val)=0;
	virtual void setDiskThreshold(int val)=0;
	virtual void setCpuThreshold(int val)=0;
	virtual void setAutoRefresh(int val)=0;
	virtual void setMemThresholdType(const char * val)=0;
	virtual void setDiskThresholdType(const char * val)=0;
};



interface IConstTargetClusterInfo : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual IArrayOf<IConstMachineInfoEx> & getProcesses()=0;
};

interface IEspTargetClusterInfo : extends IConstTargetClusterInfo
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setProcesses(IArrayOf<IEspMachineInfoEx> &val)=0;
	virtual void setProcesses(IArrayOf<IConstMachineInfoEx> &val)=0;
	virtual void copy(IConstTargetClusterInfo &from)=0;
};

interface IClientTargetClusterInfo : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setProcesses(IArrayOf<IEspMachineInfoEx> &val)=0;
	virtual void setProcesses(IArrayOf<IConstMachineInfoEx> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
	virtual IArrayOf<IConstMachineInfoEx> & getProcesses()=0;
};



interface IConstGetTargetClusterInfoResponse : extends IEspResponse
{
	virtual StringArray & getColumns()=0;
	virtual IConstRequestInfoStruct & getRequestInfo()=0;
	virtual IArrayOf<IConstTargetClusterInfo> & getTargetClusterInfoList()=0;
	virtual const char * getTimeStamp()=0;
	virtual const char * getAcceptLanguage()=0;
};

interface IEspGetTargetClusterInfoResponse : extends IConstGetTargetClusterInfoResponse
{
	virtual void setColumns(StringArray &val)=0;
	virtual IEspRequestInfoStruct & updateRequestInfo()=0;
	virtual void setRequestInfo(IConstRequestInfoStruct &ifrom)=0;
	virtual void setTargetClusterInfoList(IArrayOf<IEspTargetClusterInfo> &val)=0;
	virtual void setTargetClusterInfoList(IArrayOf<IConstTargetClusterInfo> &val)=0;
	virtual void setTimeStamp(const char * val)=0;
	virtual void setAcceptLanguage(const char * val)=0;
	virtual void copy(IConstGetTargetClusterInfoResponse &from)=0;
};

interface IClientGetTargetClusterInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual StringArray & getColumns()=0;
	virtual IConstRequestInfoStruct & getRequestInfo()=0;
	virtual IArrayOf<IConstTargetClusterInfo> & getTargetClusterInfoList()=0;
	virtual const char * getTimeStamp()=0;
	virtual const char * getAcceptLanguage()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstStatusReport : extends IEspStruct
{
	virtual bool getStatusID_isNull()=0;
	virtual int getStatusID()=0;
	virtual const char * getStatus()=0;
	virtual const char * getStatusDetails()=0;
	virtual const char * getReporter()=0;
	virtual bool getTimeReported_isNull()=0;
	virtual __int64 getTimeReported()=0;
	virtual const char * getTimeReportedStr()=0;
	virtual const char * getTimeCached()=0;
	virtual const char * getURL()=0;
};

interface IEspStatusReport : extends IConstStatusReport
{
	virtual void setStatusID_null()=0;
	virtual void setStatusID(int val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void setStatusDetails(const char * val)=0;
	virtual void setReporter(const char * val)=0;
	virtual void setTimeReported_null()=0;
	virtual void setTimeReported(__int64 val)=0;
	virtual void setTimeReportedStr(const char * val)=0;
	virtual void setTimeCached(const char * val)=0;
	virtual void setURL(const char * val)=0;
	virtual void copy(IConstStatusReport &from)=0;
};

interface IClientStatusReport : extends IInterface
{
	virtual void setStatusID_null()=0;
	virtual void setStatusID(int val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void setStatusDetails(const char * val)=0;
	virtual void setReporter(const char * val)=0;
	virtual void setTimeReported_null()=0;
	virtual void setTimeReported(__int64 val)=0;
	virtual void setTimeReportedStr(const char * val)=0;
	virtual void setTimeCached(const char * val)=0;
	virtual void setURL(const char * val)=0;
	virtual bool getStatusID_isNull()=0;
	virtual int getStatusID()=0;
	virtual const char * getStatus()=0;
	virtual const char * getStatusDetails()=0;
	virtual const char * getReporter()=0;
	virtual bool getTimeReported_isNull()=0;
	virtual __int64 getTimeReported()=0;
	virtual const char * getTimeReportedStr()=0;
	virtual const char * getTimeCached()=0;
	virtual const char * getURL()=0;
};



interface IConstComponentStatus : extends IEspStruct
{
	virtual bool getComponentTypeID_isNull()=0;
	virtual int getComponentTypeID()=0;
	virtual const char * getComponentType()=0;
	virtual const char * getEndPoint()=0;
	virtual bool getStatusID_isNull()=0;
	virtual int getStatusID()=0;
	virtual const char * getStatus()=0;
	virtual bool getTimeReported_isNull()=0;
	virtual __int64 getTimeReported()=0;
	virtual const char * getTimeReportedStr()=0;
	virtual const char * getReporter()=0;
	virtual IArrayOf<IConstStatusReport> & getStatusReports()=0;
};

interface IEspComponentStatus : extends IConstComponentStatus
{
	virtual void setComponentTypeID_null()=0;
	virtual void setComponentTypeID(int val)=0;
	virtual void setComponentType(const char * val)=0;
	virtual void setEndPoint(const char * val)=0;
	virtual void setStatusID_null()=0;
	virtual void setStatusID(int val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void setTimeReported_null()=0;
	virtual void setTimeReported(__int64 val)=0;
	virtual void setTimeReportedStr(const char * val)=0;
	virtual void setReporter(const char * val)=0;
	virtual void setStatusReports(IArrayOf<IEspStatusReport> &val)=0;
	virtual void setStatusReports(IArrayOf<IConstStatusReport> &val)=0;
	virtual void copy(IConstComponentStatus &from)=0;
};

interface IClientComponentStatus : extends IInterface
{
	virtual void setComponentTypeID_null()=0;
	virtual void setComponentTypeID(int val)=0;
	virtual void setComponentType(const char * val)=0;
	virtual void setEndPoint(const char * val)=0;
	virtual void setStatusID_null()=0;
	virtual void setStatusID(int val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void setTimeReported_null()=0;
	virtual void setTimeReported(__int64 val)=0;
	virtual void setTimeReportedStr(const char * val)=0;
	virtual void setReporter(const char * val)=0;
	virtual void setStatusReports(IArrayOf<IEspStatusReport> &val)=0;
	virtual void setStatusReports(IArrayOf<IConstStatusReport> &val)=0;
	virtual bool getComponentTypeID_isNull()=0;
	virtual int getComponentTypeID()=0;
	virtual const char * getComponentType()=0;
	virtual const char * getEndPoint()=0;
	virtual bool getStatusID_isNull()=0;
	virtual int getStatusID()=0;
	virtual const char * getStatus()=0;
	virtual bool getTimeReported_isNull()=0;
	virtual __int64 getTimeReported()=0;
	virtual const char * getTimeReportedStr()=0;
	virtual const char * getReporter()=0;
	virtual IArrayOf<IConstStatusReport> & getStatusReports()=0;
};



interface IConstGetComponentStatusRequest : extends IEspRequest
{
};

interface IEspGetComponentStatusRequest : extends IConstGetComponentStatusRequest
{
	virtual void copy(IConstGetComponentStatusRequest &from)=0;
};

interface IClientGetComponentStatusRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstGetComponentStatusResponse : extends IEspResponse
{
	virtual bool getStatusCode_isNull()=0;
	virtual int getStatusCode()=0;
	virtual const char * getStatus()=0;
	virtual const char * getComponentType()=0;
	virtual const char * getEndPoint()=0;
	virtual bool getComponentStatusID_isNull()=0;
	virtual int getComponentStatusID()=0;
	virtual const char * getComponentStatus()=0;
	virtual bool getTimeReported_isNull()=0;
	virtual __int64 getTimeReported()=0;
	virtual const char * getTimeReportedStr()=0;
	virtual const char * getReporter()=0;
	virtual IConstStatusReport & getStatusReport()=0;
	virtual IArrayOf<IConstComponentStatus> & getComponentStatusList()=0;
};

interface IEspGetComponentStatusResponse : extends IConstGetComponentStatusResponse
{
	virtual void setStatusCode_null()=0;
	virtual void setStatusCode(int val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void setComponentType(const char * val)=0;
	virtual void setEndPoint(const char * val)=0;
	virtual void setComponentStatusID_null()=0;
	virtual void setComponentStatusID(int val)=0;
	virtual void setComponentStatus(const char * val)=0;
	virtual void setTimeReported_null()=0;
	virtual void setTimeReported(__int64 val)=0;
	virtual void setTimeReportedStr(const char * val)=0;
	virtual void setReporter(const char * val)=0;
	virtual IEspStatusReport & updateStatusReport()=0;
	virtual void setStatusReport(IConstStatusReport &ifrom)=0;
	virtual void setComponentStatusList(IArrayOf<IEspComponentStatus> &val)=0;
	virtual void setComponentStatusList(IArrayOf<IConstComponentStatus> &val)=0;
	virtual void copy(IConstGetComponentStatusResponse &from)=0;
};

interface IClientGetComponentStatusResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getStatusCode_isNull()=0;
	virtual int getStatusCode()=0;
	virtual const char * getStatus()=0;
	virtual const char * getComponentType()=0;
	virtual const char * getEndPoint()=0;
	virtual bool getComponentStatusID_isNull()=0;
	virtual int getComponentStatusID()=0;
	virtual const char * getComponentStatus()=0;
	virtual bool getTimeReported_isNull()=0;
	virtual __int64 getTimeReported()=0;
	virtual const char * getTimeReportedStr()=0;
	virtual const char * getReporter()=0;
	virtual IConstStatusReport & getStatusReport()=0;
	virtual IArrayOf<IConstComponentStatus> & getComponentStatusList()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstUpdateComponentStatusRequest : extends IEspRequest
{
	virtual const char * getReporter()=0;
	virtual IArrayOf<IConstComponentStatus> & getComponentStatusList()=0;
};

interface IEspUpdateComponentStatusRequest : extends IConstUpdateComponentStatusRequest
{
	virtual void setReporter(const char * val)=0;
	virtual void setComponentStatusList(IArrayOf<IEspComponentStatus> &val)=0;
	virtual void setComponentStatusList(IArrayOf<IConstComponentStatus> &val)=0;
	virtual void copy(IConstUpdateComponentStatusRequest &from)=0;
};

interface IClientUpdateComponentStatusRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setReporter(const char * val)=0;
	virtual void setComponentStatusList(IArrayOf<IEspComponentStatus> &val)=0;
	virtual void setComponentStatusList(IArrayOf<IConstComponentStatus> &val)=0;
};



interface IConstUpdateComponentStatusResponse : extends IEspResponse
{
	virtual bool getStatusCode_isNull()=0;
	virtual int getStatusCode()=0;
	virtual const char * getStatus()=0;
};

interface IEspUpdateComponentStatusResponse : extends IConstUpdateComponentStatusResponse
{
	virtual void setStatusCode_null()=0;
	virtual void setStatusCode(int val)=0;
	virtual void setStatus(const char * val)=0;
	virtual void copy(IConstUpdateComponentStatusResponse &from)=0;
};

interface IClientUpdateComponentStatusResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getStatusCode_isNull()=0;
	virtual int getStatusCode()=0;
	virtual const char * getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetComponentUsageRequest : extends IEspRequest
{
	virtual IArrayOf<IConstComponent> & getComponents()=0;
	virtual bool getBypassCachedResult_isNull()=0;
	virtual bool getBypassCachedResult()=0;
};

interface IEspGetComponentUsageRequest : extends IConstGetComponentUsageRequest
{
	virtual void setComponents(IArrayOf<IEspComponent> &val)=0;
	virtual void setComponents(IArrayOf<IConstComponent> &val)=0;
	virtual void setBypassCachedResult_null()=0;
	virtual void setBypassCachedResult(bool val)=0;
	virtual void copy(IConstGetComponentUsageRequest &from)=0;
};

interface IClientGetComponentUsageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setComponents(IArrayOf<IEspComponent> &val)=0;
	virtual void setComponents(IArrayOf<IConstComponent> &val)=0;
	virtual void setBypassCachedResult_null()=0;
	virtual void setBypassCachedResult(bool val)=0;
};



interface IConstGetComponentUsageResponse : extends IEspResponse
{
	virtual IArrayOf<IConstComponentUsage> & getComponentUsages()=0;
};

interface IEspGetComponentUsageResponse : extends IConstGetComponentUsageResponse
{
	virtual void setComponentUsages(IArrayOf<IEspComponentUsage> &val)=0;
	virtual void setComponentUsages(IArrayOf<IConstComponentUsage> &val)=0;
	virtual void copy(IConstGetComponentUsageResponse &from)=0;
};

interface IClientGetComponentUsageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstComponentUsage> & getComponentUsages()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetTargetClusterUsageRequest : extends IEspRequest
{
	virtual StringArray & getTargetClusters()=0;
	virtual bool getBypassCachedResult_isNull()=0;
	virtual bool getBypassCachedResult()=0;
};

interface IEspGetTargetClusterUsageRequest : extends IConstGetTargetClusterUsageRequest
{
	virtual void setTargetClusters(StringArray &val)=0;
	virtual void setBypassCachedResult_null()=0;
	virtual void setBypassCachedResult(bool val)=0;
	virtual void copy(IConstGetTargetClusterUsageRequest &from)=0;
};

interface IClientGetTargetClusterUsageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTargetClusters(StringArray &val)=0;
	virtual void setBypassCachedResult_null()=0;
	virtual void setBypassCachedResult(bool val)=0;
};



interface IConstGetTargetClusterUsageResponse : extends IEspResponse
{
	virtual IArrayOf<IConstTargetClusterUsage> & getTargetClusterUsages()=0;
};

interface IEspGetTargetClusterUsageResponse : extends IConstGetTargetClusterUsageResponse
{
	virtual void setTargetClusterUsages(IArrayOf<IEspTargetClusterUsage> &val)=0;
	virtual void setTargetClusterUsages(IArrayOf<IConstTargetClusterUsage> &val)=0;
	virtual void copy(IConstGetTargetClusterUsageResponse &from)=0;
};

interface IClientGetTargetClusterUsageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstTargetClusterUsage> & getTargetClusterUsages()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetNodeGroupUsageRequest : extends IEspRequest
{
	virtual StringArray & getNodeGroups()=0;
	virtual bool getBypassCachedResult_isNull()=0;
	virtual bool getBypassCachedResult()=0;
};

interface IEspGetNodeGroupUsageRequest : extends IConstGetNodeGroupUsageRequest
{
	virtual void setNodeGroups(StringArray &val)=0;
	virtual void setBypassCachedResult_null()=0;
	virtual void setBypassCachedResult(bool val)=0;
	virtual void copy(IConstGetNodeGroupUsageRequest &from)=0;
};

interface IClientGetNodeGroupUsageRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setNodeGroups(StringArray &val)=0;
	virtual void setBypassCachedResult_null()=0;
	virtual void setBypassCachedResult(bool val)=0;
};



interface IConstGetNodeGroupUsageResponse : extends IEspResponse
{
	virtual IArrayOf<IConstNodeGroupUsage> & getNodeGroupUsages()=0;
};

interface IEspGetNodeGroupUsageResponse : extends IConstGetNodeGroupUsageResponse
{
	virtual void setNodeGroupUsages(IArrayOf<IEspNodeGroupUsage> &val)=0;
	virtual void setNodeGroupUsages(IArrayOf<IConstNodeGroupUsage> &val)=0;
	virtual void copy(IConstGetNodeGroupUsageResponse &from)=0;
};

interface IClientGetNodeGroupUsageResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstNodeGroupUsage> & getNodeGroupUsages()=0;

	virtual const IMultiException& getExceptions()=0;
};



//-------- service ---------
interface IConstws_machinePingRequest : extends IEspRequest
{
};

interface IEspws_machinePingRequest : extends IConstws_machinePingRequest
{
	virtual void copy(IConstws_machinePingRequest &from)=0;
};

interface IClientws_machinePingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstws_machinePingResponse : extends IEspResponse
{
};

interface IEspws_machinePingResponse : extends IConstws_machinePingResponse
{
	virtual void copy(IConstws_machinePingResponse &from)=0;
};

interface IClientws_machinePingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspws_machine : extends IEspService
{
	virtual bool onGetComponentStatus(IEspContext &context, IEspGetComponentStatusRequest &req, IEspGetComponentStatusResponse &resp)=0;
	virtual bool onGetComponentUsage(IEspContext &context, IEspGetComponentUsageRequest &req, IEspGetComponentUsageResponse &resp)=0;
	virtual bool onGetMachineInfo(IEspContext &context, IEspGetMachineInfoRequest &req, IEspGetMachineInfoResponse &resp)=0;
	virtual bool onGetMachineInfoEx(IEspContext &context, IEspGetMachineInfoRequestEx &req, IEspGetMachineInfoResponseEx &resp)=0;
	virtual bool onGetMetrics(IEspContext &context, IEspMetricsRequest &req, IEspMetricsResponse &resp)=0;
	virtual bool onGetNodeGroupUsage(IEspContext &context, IEspGetNodeGroupUsageRequest &req, IEspGetNodeGroupUsageResponse &resp)=0;
	virtual bool onGetTargetClusterInfo(IEspContext &context, IEspGetTargetClusterInfoRequest &req, IEspGetTargetClusterInfoResponse &resp)=0;
	virtual bool onGetTargetClusterUsage(IEspContext &context, IEspGetTargetClusterUsageRequest &req, IEspGetTargetClusterUsageResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspws_machinePingRequest &req, IEspws_machinePingResponse &resp)=0;
	virtual bool onUpdateComponentStatus(IEspContext &context, IEspUpdateComponentStatusRequest &req, IEspUpdateComponentStatusResponse &resp)=0;
};

interface IClientws_machineEvents : extends IInterface
{
	virtual int onGetComponentStatusComplete(IClientGetComponentStatusResponse *resp,IInterface* state)=0;
	virtual int onGetComponentStatusError(IClientGetComponentStatusResponse *resp,IInterface* state)=0;
	virtual int onGetComponentUsageComplete(IClientGetComponentUsageResponse *resp,IInterface* state)=0;
	virtual int onGetComponentUsageError(IClientGetComponentUsageResponse *resp,IInterface* state)=0;
	virtual int onGetMachineInfoComplete(IClientGetMachineInfoResponse *resp,IInterface* state)=0;
	virtual int onGetMachineInfoError(IClientGetMachineInfoResponse *resp,IInterface* state)=0;
	virtual int onGetMachineInfoExComplete(IClientGetMachineInfoResponseEx *resp,IInterface* state)=0;
	virtual int onGetMachineInfoExError(IClientGetMachineInfoResponseEx *resp,IInterface* state)=0;
	virtual int onGetMetricsComplete(IClientMetricsResponse *resp,IInterface* state)=0;
	virtual int onGetMetricsError(IClientMetricsResponse *resp,IInterface* state)=0;
	virtual int onGetNodeGroupUsageComplete(IClientGetNodeGroupUsageResponse *resp,IInterface* state)=0;
	virtual int onGetNodeGroupUsageError(IClientGetNodeGroupUsageResponse *resp,IInterface* state)=0;
	virtual int onGetTargetClusterInfoComplete(IClientGetTargetClusterInfoResponse *resp,IInterface* state)=0;
	virtual int onGetTargetClusterInfoError(IClientGetTargetClusterInfoResponse *resp,IInterface* state)=0;
	virtual int onGetTargetClusterUsageComplete(IClientGetTargetClusterUsageResponse *resp,IInterface* state)=0;
	virtual int onGetTargetClusterUsageError(IClientGetTargetClusterUsageResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientws_machinePingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientws_machinePingResponse *resp,IInterface* state)=0;
	virtual int onUpdateComponentStatusComplete(IClientUpdateComponentStatusResponse *resp,IInterface* state)=0;
	virtual int onUpdateComponentStatusError(IClientUpdateComponentStatusResponse *resp,IInterface* state)=0;
};

interface IClientws_machine : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientGetComponentStatusRequest * createGetComponentStatusRequest()=0;
	virtual IClientGetComponentStatusResponse * GetComponentStatus(IClientGetComponentStatusRequest *request)=0;
	virtual void async_GetComponentStatus(IClientGetComponentStatusRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientGetComponentUsageRequest * createGetComponentUsageRequest()=0;
	virtual IClientGetComponentUsageResponse * GetComponentUsage(IClientGetComponentUsageRequest *request)=0;
	virtual void async_GetComponentUsage(IClientGetComponentUsageRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientGetMachineInfoRequest * createGetMachineInfoRequest()=0;
	virtual IClientGetMachineInfoResponse * GetMachineInfo(IClientGetMachineInfoRequest *request)=0;
	virtual void async_GetMachineInfo(IClientGetMachineInfoRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientGetMachineInfoRequestEx * createGetMachineInfoExRequest()=0;
	virtual IClientGetMachineInfoResponseEx * GetMachineInfoEx(IClientGetMachineInfoRequestEx *request)=0;
	virtual void async_GetMachineInfoEx(IClientGetMachineInfoRequestEx *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientMetricsRequest * createGetMetricsRequest()=0;
	virtual IClientMetricsResponse * GetMetrics(IClientMetricsRequest *request)=0;
	virtual void async_GetMetrics(IClientMetricsRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientGetNodeGroupUsageRequest * createGetNodeGroupUsageRequest()=0;
	virtual IClientGetNodeGroupUsageResponse * GetNodeGroupUsage(IClientGetNodeGroupUsageRequest *request)=0;
	virtual void async_GetNodeGroupUsage(IClientGetNodeGroupUsageRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientGetTargetClusterInfoRequest * createGetTargetClusterInfoRequest()=0;
	virtual IClientGetTargetClusterInfoResponse * GetTargetClusterInfo(IClientGetTargetClusterInfoRequest *request)=0;
	virtual void async_GetTargetClusterInfo(IClientGetTargetClusterInfoRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientGetTargetClusterUsageRequest * createGetTargetClusterUsageRequest()=0;
	virtual IClientGetTargetClusterUsageResponse * GetTargetClusterUsage(IClientGetTargetClusterUsageRequest *request)=0;
	virtual void async_GetTargetClusterUsage(IClientGetTargetClusterUsageRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientws_machinePingRequest * createPingRequest()=0;
	virtual IClientws_machinePingResponse * Ping(IClientws_machinePingRequest *request)=0;
	virtual void async_Ping(IClientws_machinePingRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;

	virtual IClientUpdateComponentStatusRequest * createUpdateComponentStatusRequest()=0;
	virtual IClientUpdateComponentStatusResponse * UpdateComponentStatus(IClientUpdateComponentStatusRequest *request)=0;
	virtual void async_UpdateComponentStatus(IClientUpdateComponentStatusRequest *request, IClientws_machineEvents *events,IInterface* state=0)=0;


	virtual IClientGetComponentStatusResponse *GetComponentStatusFn()=0;

	virtual IClientGetComponentUsageResponse *GetComponentUsageFn(IArrayOf<IConstComponent> &Components_, bool BypassCachedResult_)=0;

	virtual IClientGetMachineInfoResponse *GetMachineInfoFn(StringArray &Addresses_, const char * SortBy_, const char * ClusterType_, const char * Cluster_, const char * OldIP_, const char * Path_, const char * AddProcessesToFilter_, bool ApplyProcessFilter_, bool GetProcessorInfo_, bool GetStorageInfo_, bool LocalFileSystemsOnly_, bool GetSoftwareInfo_, int MemThreshold_, int DiskThreshold_, int CpuThreshold_, int AutoRefresh_, const char * MemThresholdType_, const char * DiskThresholdType_, const char * UserName_, const char * Password_, const char * SecurityString_)=0;

	virtual IClientGetMachineInfoResponseEx *GetMachineInfoExFn(StringArray &Addresses_, const char * ClusterType_)=0;

	virtual IClientMetricsResponse *GetMetricsFn(const char * SecurityString_, StringArray &Addresses_, StringArray &ShowColumns_, int AutoRefresh_, bool SelectAllChecked_, const char * Cluster_, bool AutoUpdate_)=0;

	virtual IClientGetNodeGroupUsageResponse *GetNodeGroupUsageFn(StringArray &NodeGroups_, bool BypassCachedResult_)=0;

	virtual IClientGetTargetClusterInfoResponse *GetTargetClusterInfoFn(StringArray &TargetClusters_, const char * AddProcessesToFilter_, bool ApplyProcessFilter_, bool GetProcessorInfo_, bool GetStorageInfo_, bool LocalFileSystemsOnly_, bool GetSoftwareInfo_, int MemThreshold_, int DiskThreshold_, int CpuThreshold_, int AutoRefresh_, const char * MemThresholdType_, const char * DiskThresholdType_)=0;

	virtual IClientGetTargetClusterUsageResponse *GetTargetClusterUsageFn(StringArray &TargetClusters_, bool BypassCachedResult_)=0;

	virtual IClientws_machinePingResponse *PingFn()=0;

	virtual IClientUpdateComponentStatusResponse *UpdateComponentStatusFn(const char * Reporter_, IArrayOf<IConstComponentStatus> &ComponentStatusList_)=0;
};




#ifndef ws_machine_API
#define ws_machine_API
#endif //ws_machine_API



extern "C" ws_machine_API IClientws_machine * createws_machineClient();


extern "C"  IEspDiskUsage *createDiskUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDiskUsage *createClientDiskUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspMachineUsage *createMachineUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientMachineUsage *createClientMachineUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspComponent *createComponent(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientComponent *createClientComponent(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspComponentUsage *createComponentUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientComponentUsage *createClientComponentUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTargetClusterUsage *createTargetClusterUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTargetClusterUsage *createClientTargetClusterUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspNodeGroupUsage *createNodeGroupUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientNodeGroupUsage *createClientNodeGroupUsage(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetMachineInfoRequest *createGetMachineInfoRequest(const char *serv=NULL);
extern "C"  IClientGetMachineInfoRequest *createClientGetMachineInfoRequest(const char *serv=NULL);
extern "C"  IEspRequestInfoStruct *createRequestInfoStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientRequestInfoStruct *createClientRequestInfoStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspProcessorInfo *createProcessorInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientProcessorInfo *createClientProcessorInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspStorageInfo *createStorageInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientStorageInfo *createClientStorageInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspSWRunInfo *createSWRunInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientSWRunInfo *createClientSWRunInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspProcessInfo *createProcessInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientProcessInfo *createClientProcessInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspComponentInfo *createComponentInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientComponentInfo *createClientComponentInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspMachineInfoEx *createMachineInfoEx(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientMachineInfoEx *createClientMachineInfoEx(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetMachineInfoResponse *createGetMachineInfoResponse(const char *serv=NULL);
extern "C"  IClientGetMachineInfoResponse *createClientGetMachineInfoResponse(const char *serv=NULL);
extern "C"  IEspGetMachineInfoRequestEx *createGetMachineInfoRequestEx(const char *serv=NULL);
extern "C"  IClientGetMachineInfoRequestEx *createClientGetMachineInfoRequestEx(const char *serv=NULL);
extern "C"  IEspGetMachineInfoResponseEx *createGetMachineInfoResponseEx(const char *serv=NULL);
extern "C"  IClientGetMachineInfoResponseEx *createClientGetMachineInfoResponseEx(const char *serv=NULL);
extern "C"  IEspMetricsRequest *createMetricsRequest(const char *serv=NULL);
extern "C"  IClientMetricsRequest *createClientMetricsRequest(const char *serv=NULL);
extern "C"  IEspMetricsResponse *createMetricsResponse(const char *serv=NULL);
extern "C"  IClientMetricsResponse *createClientMetricsResponse(const char *serv=NULL);
extern "C"  IEspRemoteExecResult *createRemoteExecResult(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientRemoteExecResult *createClientRemoteExecResult(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspStartStopBeginRequest *createStartStopBeginRequest(const char *serv=NULL);
extern "C"  IClientStartStopBeginRequest *createClientStartStopBeginRequest(const char *serv=NULL);
extern "C"  IEspStartStopBeginResponse *createStartStopBeginResponse(const char *serv=NULL);
extern "C"  IClientStartStopBeginResponse *createClientStartStopBeginResponse(const char *serv=NULL);
extern "C"  IEspStartStopDoneRequest *createStartStopDoneRequest(const char *serv=NULL);
extern "C"  IClientStartStopDoneRequest *createClientStartStopDoneRequest(const char *serv=NULL);
extern "C"  IEspStartStopRequest *createStartStopRequest(const char *serv=NULL);
extern "C"  IClientStartStopRequest *createClientStartStopRequest(const char *serv=NULL);
extern "C"  IEspStartStopResult *createStartStopResult(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientStartStopResult *createClientStartStopResult(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspStartStopResponse *createStartStopResponse(const char *serv=NULL);
extern "C"  IClientStartStopResponse *createClientStartStopResponse(const char *serv=NULL);
extern "C"  IEspGetTargetClusterInfoRequest *createGetTargetClusterInfoRequest(const char *serv=NULL);
extern "C"  IClientGetTargetClusterInfoRequest *createClientGetTargetClusterInfoRequest(const char *serv=NULL);
extern "C"  IEspTargetClusterInfo *createTargetClusterInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTargetClusterInfo *createClientTargetClusterInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetTargetClusterInfoResponse *createGetTargetClusterInfoResponse(const char *serv=NULL);
extern "C"  IClientGetTargetClusterInfoResponse *createClientGetTargetClusterInfoResponse(const char *serv=NULL);
extern "C"  IEspStatusReport *createStatusReport(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientStatusReport *createClientStatusReport(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspComponentStatus *createComponentStatus(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientComponentStatus *createClientComponentStatus(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetComponentStatusRequest *createGetComponentStatusRequest(const char *serv=NULL);
extern "C"  IClientGetComponentStatusRequest *createClientGetComponentStatusRequest(const char *serv=NULL);
extern "C"  IEspGetComponentStatusResponse *createGetComponentStatusResponse(const char *serv=NULL);
extern "C"  IClientGetComponentStatusResponse *createClientGetComponentStatusResponse(const char *serv=NULL);
extern "C"  IEspUpdateComponentStatusRequest *createUpdateComponentStatusRequest(const char *serv=NULL);
extern "C"  IClientUpdateComponentStatusRequest *createClientUpdateComponentStatusRequest(const char *serv=NULL);
extern "C"  IEspUpdateComponentStatusResponse *createUpdateComponentStatusResponse(const char *serv=NULL);
extern "C"  IClientUpdateComponentStatusResponse *createClientUpdateComponentStatusResponse(const char *serv=NULL);
extern "C"  IEspGetComponentUsageRequest *createGetComponentUsageRequest(const char *serv=NULL);
extern "C"  IClientGetComponentUsageRequest *createClientGetComponentUsageRequest(const char *serv=NULL);
extern "C"  IEspGetComponentUsageResponse *createGetComponentUsageResponse(const char *serv=NULL);
extern "C"  IClientGetComponentUsageResponse *createClientGetComponentUsageResponse(const char *serv=NULL);
extern "C"  IEspGetTargetClusterUsageRequest *createGetTargetClusterUsageRequest(const char *serv=NULL);
extern "C"  IClientGetTargetClusterUsageRequest *createClientGetTargetClusterUsageRequest(const char *serv=NULL);
extern "C"  IEspGetTargetClusterUsageResponse *createGetTargetClusterUsageResponse(const char *serv=NULL);
extern "C"  IClientGetTargetClusterUsageResponse *createClientGetTargetClusterUsageResponse(const char *serv=NULL);
extern "C"  IEspGetNodeGroupUsageRequest *createGetNodeGroupUsageRequest(const char *serv=NULL);
extern "C"  IClientGetNodeGroupUsageRequest *createClientGetNodeGroupUsageRequest(const char *serv=NULL);
extern "C"  IEspGetNodeGroupUsageResponse *createGetNodeGroupUsageResponse(const char *serv=NULL);
extern "C"  IClientGetNodeGroupUsageResponse *createClientGetNodeGroupUsageResponse(const char *serv=NULL);
extern "C"  IEspws_machinePingRequest *createws_machinePingRequest(const char *serv=NULL);
extern "C"  IClientws_machinePingRequest *createClientws_machinePingRequest(const char *serv=NULL);
extern "C"  IEspws_machinePingResponse *createws_machinePingResponse(const char *serv=NULL);
extern "C"  IClientws_machinePingResponse *createClientws_machinePingResponse(const char *serv=NULL);

#endif // _ws_machine_SCM_INCL
//end
