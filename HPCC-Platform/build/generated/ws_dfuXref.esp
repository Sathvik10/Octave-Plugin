// *** Source file generated by HIDL Version 1.3 from ws_dfuXref.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_dfuXref_ESPGEN_INCLUDED
#define ws_dfuXref_ESPGEN_INCLUDED

#include "ws_dfuXref_esp.ipp"

#ifdef _WIN32
#include "edwin.h"
#include <process.h>
#endif



//=======================================================
// class CDFUXRefListRequest Implementation
//=======================================================

CDFUXRefListRequest::CDFUXRefListRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefListRequest::CDFUXRefListRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListRequest");
}

CDFUXRefListRequest::CDFUXRefListRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefListRequest::CDFUXRefListRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefListRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CDFUXRefListRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefListRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefListRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefListRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefListRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CDFUXRefListRequest::copy(CDFUXRefListRequest &from)
{
}


void CDFUXRefListRequest::copy(IConstDFUXRefListRequest &ifrom)
{
}


void CDFUXRefListRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefListRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CDFUXRefListRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefListRequest::serializer(IEspContext* ctx, IConstDFUXRefListRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefListRequest>");
	if (keepRootTag)
		buffer.append("</DFUXRefListRequest>");
}

bool CDFUXRefListRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CDFUXRefListRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CDFUXRefListRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspDFUXRefListRequest *createDFUXRefListRequest(const char *serv){return ((IEspDFUXRefListRequest *)new CDFUXRefListRequest(serv));}
extern "C"  IClientDFUXRefListRequest *createClientDFUXRefListRequest(const char *serv){return ((IClientDFUXRefListRequest *)new CDFUXRefListRequest(serv));}

//=======================================================
// class CDFUXRefListResponse Implementation
//=======================================================

CDFUXRefListResponse::CDFUXRefListResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefListResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefListResponse::CDFUXRefListResponse(const char *serviceName, const char *bc)
	: m_DFUXRefListResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListResponse");
}

CDFUXRefListResponse::CDFUXRefListResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefListResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefListResponse::CDFUXRefListResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefListResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefListResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefListResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefListResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefListResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefListResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefListResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefListResult");
	form.appendf("  <tr><td><b>DFUXRefListResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefListResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefListResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefListResult.marshall(rpc_resp, "DFUXRefListResult", "", "", "");
	}
}


void CDFUXRefListResponse::copy(CDFUXRefListResponse &from)
{
	m_DFUXRefListResult.copy(from.m_DFUXRefListResult);
}


void CDFUXRefListResponse::copy(IConstDFUXRefListResponse &ifrom)
{
	setDFUXRefListResult(ifrom.getDFUXRefListResult());
}


void CDFUXRefListResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefListResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefListResult.toStr(ctx, buffer, "DFUXRefListResult", "", false, "", "", false);
	}
}


void CDFUXRefListResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefListResponse::serializer(IEspContext* ctx, IConstDFUXRefListResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefListResponse>");
	// field DFUXRefListResult
	{
		const char* s = src.getDFUXRefListResult();
		if (s && *s)
		buffer.appendf("<DFUXRefListResult>%s</DFUXRefListResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefListResponse>");
}

bool CDFUXRefListResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefListResult.unmarshall(rpc_request, "DFUXRefListResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefListResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefListResult.unmarshall(ctx, soapval, "DFUXRefListResult");
	return hasValue;
}

bool CDFUXRefListResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefListResult.unmarshall(ctx, params, attachments, "DFUXRefListResult", basepath);
	return hasValue;
}

const char * CDFUXRefListResponse::getDFUXRefListResult() { return m_DFUXRefListResult.query();}
void CDFUXRefListResponse::setDFUXRefListResult(const char * val){ m_DFUXRefListResult.set(val); }
extern "C"  IEspDFUXRefListResponse *createDFUXRefListResponse(const char *serv){return ((IEspDFUXRefListResponse *)new CDFUXRefListResponse(serv));}
extern "C"  IClientDFUXRefListResponse *createClientDFUXRefListResponse(const char *serv){return ((IClientDFUXRefListResponse *)new CDFUXRefListResponse(serv));}

//=======================================================
// class CDFUXRefBuildRequest Implementation
//=======================================================

CDFUXRefBuildRequest::CDFUXRefBuildRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefBuildRequest::CDFUXRefBuildRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildRequest");
}

CDFUXRefBuildRequest::CDFUXRefBuildRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefBuildRequest::CDFUXRefBuildRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefBuildRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefBuildRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefBuildRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefBuildRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefBuildRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefBuildRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
}


void CDFUXRefBuildRequest::copy(CDFUXRefBuildRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
}


void CDFUXRefBuildRequest::copy(IConstDFUXRefBuildRequest &ifrom)
{
	setCluster(ifrom.getCluster());
}


void CDFUXRefBuildRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefBuildRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
}


void CDFUXRefBuildRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefBuildRequest::serializer(IEspContext* ctx, IConstDFUXRefBuildRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefBuildRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUXRefBuildRequest>");
}

bool CDFUXRefBuildRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	return hasValue;
}

bool CDFUXRefBuildRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	return hasValue;
}

bool CDFUXRefBuildRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	return hasValue;
}

const char * CDFUXRefBuildRequest::getCluster() { return m_Cluster.query();}
void CDFUXRefBuildRequest::setCluster(const char * val){ m_Cluster.set(val); }
extern "C"  IEspDFUXRefBuildRequest *createDFUXRefBuildRequest(const char *serv){return ((IEspDFUXRefBuildRequest *)new CDFUXRefBuildRequest(serv));}
extern "C"  IClientDFUXRefBuildRequest *createClientDFUXRefBuildRequest(const char *serv){return ((IClientDFUXRefBuildRequest *)new CDFUXRefBuildRequest(serv));}

//=======================================================
// class CDFUXRefBuildResponse Implementation
//=======================================================

CDFUXRefBuildResponse::CDFUXRefBuildResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefBuildResponse::CDFUXRefBuildResponse(const char *serviceName, const char *bc)
	: m_DFUXRefActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildResponse");
}

CDFUXRefBuildResponse::CDFUXRefBuildResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefBuildResponse::CDFUXRefBuildResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefBuildResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefActionResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefBuildResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefBuildResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefBuildResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefActionResult");
	form.appendf("  <tr><td><b>DFUXRefActionResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefBuildResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefBuildResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefActionResult.marshall(rpc_resp, "DFUXRefActionResult", "", "", "");
	}
}


void CDFUXRefBuildResponse::copy(CDFUXRefBuildResponse &from)
{
	m_DFUXRefActionResult.copy(from.m_DFUXRefActionResult);
}


void CDFUXRefBuildResponse::copy(IConstDFUXRefBuildResponse &ifrom)
{
	setDFUXRefActionResult(ifrom.getDFUXRefActionResult());
}


void CDFUXRefBuildResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefBuildResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefActionResult.toStr(ctx, buffer, "DFUXRefActionResult", "", false, "", "", false);
	}
}


void CDFUXRefBuildResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefBuildResponse::serializer(IEspContext* ctx, IConstDFUXRefBuildResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefBuildResponse>");
	// field DFUXRefActionResult
	{
		const char* s = src.getDFUXRefActionResult();
		if (s && *s)
		buffer.appendf("<DFUXRefActionResult>%s</DFUXRefActionResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefBuildResponse>");
}

bool CDFUXRefBuildResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefActionResult.unmarshall(rpc_request, "DFUXRefActionResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefBuildResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefActionResult.unmarshall(ctx, soapval, "DFUXRefActionResult");
	return hasValue;
}

bool CDFUXRefBuildResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefActionResult.unmarshall(ctx, params, attachments, "DFUXRefActionResult", basepath);
	return hasValue;
}

const char * CDFUXRefBuildResponse::getDFUXRefActionResult() { return m_DFUXRefActionResult.query();}
void CDFUXRefBuildResponse::setDFUXRefActionResult(const char * val){ m_DFUXRefActionResult.set(val); }
extern "C"  IEspDFUXRefBuildResponse *createDFUXRefBuildResponse(const char *serv){return ((IEspDFUXRefBuildResponse *)new CDFUXRefBuildResponse(serv));}
extern "C"  IClientDFUXRefBuildResponse *createClientDFUXRefBuildResponse(const char *serv){return ((IClientDFUXRefBuildResponse *)new CDFUXRefBuildResponse(serv));}

//=======================================================
// class CDFUXRefLostFilesQueryRequest Implementation
//=======================================================

CDFUXRefLostFilesQueryRequest::CDFUXRefLostFilesQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefLostFilesQueryRequest::CDFUXRefLostFilesQueryRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryRequest");
}

CDFUXRefLostFilesQueryRequest::CDFUXRefLostFilesQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefLostFilesQueryRequest::CDFUXRefLostFilesQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefLostFilesQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefLostFilesQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefLostFilesQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefLostFilesQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefLostFilesQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefLostFilesQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
}


void CDFUXRefLostFilesQueryRequest::copy(CDFUXRefLostFilesQueryRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
}


void CDFUXRefLostFilesQueryRequest::copy(IConstDFUXRefLostFilesQueryRequest &ifrom)
{
	setCluster(ifrom.getCluster());
}


void CDFUXRefLostFilesQueryRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefLostFilesQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
}


void CDFUXRefLostFilesQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefLostFilesQueryRequest::serializer(IEspContext* ctx, IConstDFUXRefLostFilesQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefLostFilesQueryRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUXRefLostFilesQueryRequest>");
}

bool CDFUXRefLostFilesQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	return hasValue;
}

bool CDFUXRefLostFilesQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	return hasValue;
}

bool CDFUXRefLostFilesQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	return hasValue;
}

const char * CDFUXRefLostFilesQueryRequest::getCluster() { return m_Cluster.query();}
void CDFUXRefLostFilesQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
extern "C"  IEspDFUXRefLostFilesQueryRequest *createDFUXRefLostFilesQueryRequest(const char *serv){return ((IEspDFUXRefLostFilesQueryRequest *)new CDFUXRefLostFilesQueryRequest(serv));}
extern "C"  IClientDFUXRefLostFilesQueryRequest *createClientDFUXRefLostFilesQueryRequest(const char *serv){return ((IClientDFUXRefLostFilesQueryRequest *)new CDFUXRefLostFilesQueryRequest(serv));}

//=======================================================
// class CDFUXRefLostFilesQueryResponse Implementation
//=======================================================

CDFUXRefLostFilesQueryResponse::CDFUXRefLostFilesQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefLostFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefLostFilesQueryResponse::CDFUXRefLostFilesQueryResponse(const char *serviceName, const char *bc)
	: m_DFUXRefLostFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryResponse");
}

CDFUXRefLostFilesQueryResponse::CDFUXRefLostFilesQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefLostFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefLostFilesQueryResponse::CDFUXRefLostFilesQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefLostFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefLostFilesQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefLostFilesQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefLostFilesQueryResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefLostFilesQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefLostFilesQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefLostFilesQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefLostFilesQueryResult");
	form.appendf("  <tr><td><b>DFUXRefLostFilesQueryResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefLostFilesQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefLostFilesQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefLostFilesQueryResult.marshall(rpc_resp, "DFUXRefLostFilesQueryResult", "", "", "");
	}
}


void CDFUXRefLostFilesQueryResponse::copy(CDFUXRefLostFilesQueryResponse &from)
{
	m_DFUXRefLostFilesQueryResult.copy(from.m_DFUXRefLostFilesQueryResult);
}


void CDFUXRefLostFilesQueryResponse::copy(IConstDFUXRefLostFilesQueryResponse &ifrom)
{
	setDFUXRefLostFilesQueryResult(ifrom.getDFUXRefLostFilesQueryResult());
}


void CDFUXRefLostFilesQueryResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefLostFilesQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefLostFilesQueryResult.toStr(ctx, buffer, "DFUXRefLostFilesQueryResult", "", false, "", "", false);
	}
}


void CDFUXRefLostFilesQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefLostFilesQueryResponse::serializer(IEspContext* ctx, IConstDFUXRefLostFilesQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefLostFilesQueryResponse>");
	// field DFUXRefLostFilesQueryResult
	{
		const char* s = src.getDFUXRefLostFilesQueryResult();
		if (s && *s)
		buffer.appendf("<DFUXRefLostFilesQueryResult>%s</DFUXRefLostFilesQueryResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefLostFilesQueryResponse>");
}

bool CDFUXRefLostFilesQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefLostFilesQueryResult.unmarshall(rpc_request, "DFUXRefLostFilesQueryResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefLostFilesQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefLostFilesQueryResult.unmarshall(ctx, soapval, "DFUXRefLostFilesQueryResult");
	return hasValue;
}

bool CDFUXRefLostFilesQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefLostFilesQueryResult.unmarshall(ctx, params, attachments, "DFUXRefLostFilesQueryResult", basepath);
	return hasValue;
}

const char * CDFUXRefLostFilesQueryResponse::getDFUXRefLostFilesQueryResult() { return m_DFUXRefLostFilesQueryResult.query();}
void CDFUXRefLostFilesQueryResponse::setDFUXRefLostFilesQueryResult(const char * val){ m_DFUXRefLostFilesQueryResult.set(val); }
extern "C"  IEspDFUXRefLostFilesQueryResponse *createDFUXRefLostFilesQueryResponse(const char *serv){return ((IEspDFUXRefLostFilesQueryResponse *)new CDFUXRefLostFilesQueryResponse(serv));}
extern "C"  IClientDFUXRefLostFilesQueryResponse *createClientDFUXRefLostFilesQueryResponse(const char *serv){return ((IClientDFUXRefLostFilesQueryResponse *)new CDFUXRefLostFilesQueryResponse(serv));}

//=======================================================
// class CDFUXRefOrphanFilesQueryRequest Implementation
//=======================================================

CDFUXRefOrphanFilesQueryRequest::CDFUXRefOrphanFilesQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefOrphanFilesQueryRequest::CDFUXRefOrphanFilesQueryRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryRequest");
}

CDFUXRefOrphanFilesQueryRequest::CDFUXRefOrphanFilesQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefOrphanFilesQueryRequest::CDFUXRefOrphanFilesQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefOrphanFilesQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefOrphanFilesQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefOrphanFilesQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefOrphanFilesQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefOrphanFilesQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefOrphanFilesQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
}


void CDFUXRefOrphanFilesQueryRequest::copy(CDFUXRefOrphanFilesQueryRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
}


void CDFUXRefOrphanFilesQueryRequest::copy(IConstDFUXRefOrphanFilesQueryRequest &ifrom)
{
	setCluster(ifrom.getCluster());
}


void CDFUXRefOrphanFilesQueryRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefOrphanFilesQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
}


void CDFUXRefOrphanFilesQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefOrphanFilesQueryRequest::serializer(IEspContext* ctx, IConstDFUXRefOrphanFilesQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefOrphanFilesQueryRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUXRefOrphanFilesQueryRequest>");
}

bool CDFUXRefOrphanFilesQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	return hasValue;
}

bool CDFUXRefOrphanFilesQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	return hasValue;
}

bool CDFUXRefOrphanFilesQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	return hasValue;
}

const char * CDFUXRefOrphanFilesQueryRequest::getCluster() { return m_Cluster.query();}
void CDFUXRefOrphanFilesQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
extern "C"  IEspDFUXRefOrphanFilesQueryRequest *createDFUXRefOrphanFilesQueryRequest(const char *serv){return ((IEspDFUXRefOrphanFilesQueryRequest *)new CDFUXRefOrphanFilesQueryRequest(serv));}
extern "C"  IClientDFUXRefOrphanFilesQueryRequest *createClientDFUXRefOrphanFilesQueryRequest(const char *serv){return ((IClientDFUXRefOrphanFilesQueryRequest *)new CDFUXRefOrphanFilesQueryRequest(serv));}

//=======================================================
// class CDFUXRefOrphanFilesQueryResponse Implementation
//=======================================================

CDFUXRefOrphanFilesQueryResponse::CDFUXRefOrphanFilesQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefOrphanFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefOrphanFilesQueryResponse::CDFUXRefOrphanFilesQueryResponse(const char *serviceName, const char *bc)
	: m_DFUXRefOrphanFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryResponse");
}

CDFUXRefOrphanFilesQueryResponse::CDFUXRefOrphanFilesQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefOrphanFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefOrphanFilesQueryResponse::CDFUXRefOrphanFilesQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefOrphanFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefOrphanFilesQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefOrphanFilesQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefOrphanFilesQueryResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefOrphanFilesQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefOrphanFilesQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefOrphanFilesQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefOrphanFilesQueryResult");
	form.appendf("  <tr><td><b>DFUXRefOrphanFilesQueryResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefOrphanFilesQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefOrphanFilesQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefOrphanFilesQueryResult.marshall(rpc_resp, "DFUXRefOrphanFilesQueryResult", "", "", "");
	}
}


void CDFUXRefOrphanFilesQueryResponse::copy(CDFUXRefOrphanFilesQueryResponse &from)
{
	m_DFUXRefOrphanFilesQueryResult.copy(from.m_DFUXRefOrphanFilesQueryResult);
}


void CDFUXRefOrphanFilesQueryResponse::copy(IConstDFUXRefOrphanFilesQueryResponse &ifrom)
{
	setDFUXRefOrphanFilesQueryResult(ifrom.getDFUXRefOrphanFilesQueryResult());
}


void CDFUXRefOrphanFilesQueryResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefOrphanFilesQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefOrphanFilesQueryResult.toStr(ctx, buffer, "DFUXRefOrphanFilesQueryResult", "", false, "", "", false);
	}
}


void CDFUXRefOrphanFilesQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefOrphanFilesQueryResponse::serializer(IEspContext* ctx, IConstDFUXRefOrphanFilesQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefOrphanFilesQueryResponse>");
	// field DFUXRefOrphanFilesQueryResult
	{
		const char* s = src.getDFUXRefOrphanFilesQueryResult();
		if (s && *s)
		buffer.appendf("<DFUXRefOrphanFilesQueryResult>%s</DFUXRefOrphanFilesQueryResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefOrphanFilesQueryResponse>");
}

bool CDFUXRefOrphanFilesQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefOrphanFilesQueryResult.unmarshall(rpc_request, "DFUXRefOrphanFilesQueryResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefOrphanFilesQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefOrphanFilesQueryResult.unmarshall(ctx, soapval, "DFUXRefOrphanFilesQueryResult");
	return hasValue;
}

bool CDFUXRefOrphanFilesQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefOrphanFilesQueryResult.unmarshall(ctx, params, attachments, "DFUXRefOrphanFilesQueryResult", basepath);
	return hasValue;
}

const char * CDFUXRefOrphanFilesQueryResponse::getDFUXRefOrphanFilesQueryResult() { return m_DFUXRefOrphanFilesQueryResult.query();}
void CDFUXRefOrphanFilesQueryResponse::setDFUXRefOrphanFilesQueryResult(const char * val){ m_DFUXRefOrphanFilesQueryResult.set(val); }
extern "C"  IEspDFUXRefOrphanFilesQueryResponse *createDFUXRefOrphanFilesQueryResponse(const char *serv){return ((IEspDFUXRefOrphanFilesQueryResponse *)new CDFUXRefOrphanFilesQueryResponse(serv));}
extern "C"  IClientDFUXRefOrphanFilesQueryResponse *createClientDFUXRefOrphanFilesQueryResponse(const char *serv){return ((IClientDFUXRefOrphanFilesQueryResponse *)new CDFUXRefOrphanFilesQueryResponse(serv));}

//=======================================================
// class CDFUXRefMessagesQueryRequest Implementation
//=======================================================

CDFUXRefMessagesQueryRequest::CDFUXRefMessagesQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefMessagesQueryRequest::CDFUXRefMessagesQueryRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryRequest");
}

CDFUXRefMessagesQueryRequest::CDFUXRefMessagesQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefMessagesQueryRequest::CDFUXRefMessagesQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefMessagesQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefMessagesQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefMessagesQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefMessagesQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefMessagesQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefMessagesQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
}


void CDFUXRefMessagesQueryRequest::copy(CDFUXRefMessagesQueryRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
}


void CDFUXRefMessagesQueryRequest::copy(IConstDFUXRefMessagesQueryRequest &ifrom)
{
	setCluster(ifrom.getCluster());
}


void CDFUXRefMessagesQueryRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefMessagesQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
}


void CDFUXRefMessagesQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefMessagesQueryRequest::serializer(IEspContext* ctx, IConstDFUXRefMessagesQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefMessagesQueryRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUXRefMessagesQueryRequest>");
}

bool CDFUXRefMessagesQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	return hasValue;
}

bool CDFUXRefMessagesQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	return hasValue;
}

bool CDFUXRefMessagesQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	return hasValue;
}

const char * CDFUXRefMessagesQueryRequest::getCluster() { return m_Cluster.query();}
void CDFUXRefMessagesQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
extern "C"  IEspDFUXRefMessagesQueryRequest *createDFUXRefMessagesQueryRequest(const char *serv){return ((IEspDFUXRefMessagesQueryRequest *)new CDFUXRefMessagesQueryRequest(serv));}
extern "C"  IClientDFUXRefMessagesQueryRequest *createClientDFUXRefMessagesQueryRequest(const char *serv){return ((IClientDFUXRefMessagesQueryRequest *)new CDFUXRefMessagesQueryRequest(serv));}

//=======================================================
// class CDFUXRefMessagesQueryResponse Implementation
//=======================================================

CDFUXRefMessagesQueryResponse::CDFUXRefMessagesQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefMessagesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefMessagesQueryResponse::CDFUXRefMessagesQueryResponse(const char *serviceName, const char *bc)
	: m_DFUXRefMessagesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryResponse");
}

CDFUXRefMessagesQueryResponse::CDFUXRefMessagesQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefMessagesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefMessagesQueryResponse::CDFUXRefMessagesQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefMessagesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefMessagesQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefMessagesQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefMessagesQueryResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefMessagesQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefMessagesQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefMessagesQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefMessagesQueryResult");
	form.appendf("  <tr><td><b>DFUXRefMessagesQueryResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefMessagesQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefMessagesQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefMessagesQueryResult.marshall(rpc_resp, "DFUXRefMessagesQueryResult", "", "", "");
	}
}


void CDFUXRefMessagesQueryResponse::copy(CDFUXRefMessagesQueryResponse &from)
{
	m_DFUXRefMessagesQueryResult.copy(from.m_DFUXRefMessagesQueryResult);
}


void CDFUXRefMessagesQueryResponse::copy(IConstDFUXRefMessagesQueryResponse &ifrom)
{
	setDFUXRefMessagesQueryResult(ifrom.getDFUXRefMessagesQueryResult());
}


void CDFUXRefMessagesQueryResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefMessagesQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefMessagesQueryResult.toStr(ctx, buffer, "DFUXRefMessagesQueryResult", "", false, "", "", false);
	}
}


void CDFUXRefMessagesQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefMessagesQueryResponse::serializer(IEspContext* ctx, IConstDFUXRefMessagesQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefMessagesQueryResponse>");
	// field DFUXRefMessagesQueryResult
	{
		const char* s = src.getDFUXRefMessagesQueryResult();
		if (s && *s)
		buffer.appendf("<DFUXRefMessagesQueryResult>%s</DFUXRefMessagesQueryResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefMessagesQueryResponse>");
}

bool CDFUXRefMessagesQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefMessagesQueryResult.unmarshall(rpc_request, "DFUXRefMessagesQueryResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefMessagesQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefMessagesQueryResult.unmarshall(ctx, soapval, "DFUXRefMessagesQueryResult");
	return hasValue;
}

bool CDFUXRefMessagesQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefMessagesQueryResult.unmarshall(ctx, params, attachments, "DFUXRefMessagesQueryResult", basepath);
	return hasValue;
}

const char * CDFUXRefMessagesQueryResponse::getDFUXRefMessagesQueryResult() { return m_DFUXRefMessagesQueryResult.query();}
void CDFUXRefMessagesQueryResponse::setDFUXRefMessagesQueryResult(const char * val){ m_DFUXRefMessagesQueryResult.set(val); }
extern "C"  IEspDFUXRefMessagesQueryResponse *createDFUXRefMessagesQueryResponse(const char *serv){return ((IEspDFUXRefMessagesQueryResponse *)new CDFUXRefMessagesQueryResponse(serv));}
extern "C"  IClientDFUXRefMessagesQueryResponse *createClientDFUXRefMessagesQueryResponse(const char *serv){return ((IClientDFUXRefMessagesQueryResponse *)new CDFUXRefMessagesQueryResponse(serv));}

//=======================================================
// class CDFUXRefDirectoriesQueryRequest Implementation
//=======================================================

CDFUXRefDirectoriesQueryRequest::CDFUXRefDirectoriesQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefDirectoriesQueryRequest::CDFUXRefDirectoriesQueryRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryRequest");
}

CDFUXRefDirectoriesQueryRequest::CDFUXRefDirectoriesQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefDirectoriesQueryRequest::CDFUXRefDirectoriesQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefDirectoriesQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefDirectoriesQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefDirectoriesQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefDirectoriesQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefDirectoriesQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefDirectoriesQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
}


void CDFUXRefDirectoriesQueryRequest::copy(CDFUXRefDirectoriesQueryRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
}


void CDFUXRefDirectoriesQueryRequest::copy(IConstDFUXRefDirectoriesQueryRequest &ifrom)
{
	setCluster(ifrom.getCluster());
}


void CDFUXRefDirectoriesQueryRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefDirectoriesQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
}


void CDFUXRefDirectoriesQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefDirectoriesQueryRequest::serializer(IEspContext* ctx, IConstDFUXRefDirectoriesQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefDirectoriesQueryRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUXRefDirectoriesQueryRequest>");
}

bool CDFUXRefDirectoriesQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	return hasValue;
}

bool CDFUXRefDirectoriesQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	return hasValue;
}

bool CDFUXRefDirectoriesQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	return hasValue;
}

const char * CDFUXRefDirectoriesQueryRequest::getCluster() { return m_Cluster.query();}
void CDFUXRefDirectoriesQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
extern "C"  IEspDFUXRefDirectoriesQueryRequest *createDFUXRefDirectoriesQueryRequest(const char *serv){return ((IEspDFUXRefDirectoriesQueryRequest *)new CDFUXRefDirectoriesQueryRequest(serv));}
extern "C"  IClientDFUXRefDirectoriesQueryRequest *createClientDFUXRefDirectoriesQueryRequest(const char *serv){return ((IClientDFUXRefDirectoriesQueryRequest *)new CDFUXRefDirectoriesQueryRequest(serv));}

//=======================================================
// class CDFUXRefDirectoriesQueryResponse Implementation
//=======================================================

CDFUXRefDirectoriesQueryResponse::CDFUXRefDirectoriesQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefDirectoriesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefDirectoriesQueryResponse::CDFUXRefDirectoriesQueryResponse(const char *serviceName, const char *bc)
	: m_DFUXRefDirectoriesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryResponse");
}

CDFUXRefDirectoriesQueryResponse::CDFUXRefDirectoriesQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefDirectoriesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefDirectoriesQueryResponse::CDFUXRefDirectoriesQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefDirectoriesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefDirectoriesQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefDirectoriesQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefDirectoriesQueryResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefDirectoriesQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefDirectoriesQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefDirectoriesQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefDirectoriesQueryResult");
	form.appendf("  <tr><td><b>DFUXRefDirectoriesQueryResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefDirectoriesQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefDirectoriesQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefDirectoriesQueryResult.marshall(rpc_resp, "DFUXRefDirectoriesQueryResult", "", "", "");
	}
}


void CDFUXRefDirectoriesQueryResponse::copy(CDFUXRefDirectoriesQueryResponse &from)
{
	m_DFUXRefDirectoriesQueryResult.copy(from.m_DFUXRefDirectoriesQueryResult);
}


void CDFUXRefDirectoriesQueryResponse::copy(IConstDFUXRefDirectoriesQueryResponse &ifrom)
{
	setDFUXRefDirectoriesQueryResult(ifrom.getDFUXRefDirectoriesQueryResult());
}


void CDFUXRefDirectoriesQueryResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefDirectoriesQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefDirectoriesQueryResult.toStr(ctx, buffer, "DFUXRefDirectoriesQueryResult", "", false, "", "", false);
	}
}


void CDFUXRefDirectoriesQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefDirectoriesQueryResponse::serializer(IEspContext* ctx, IConstDFUXRefDirectoriesQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefDirectoriesQueryResponse>");
	// field DFUXRefDirectoriesQueryResult
	{
		const char* s = src.getDFUXRefDirectoriesQueryResult();
		if (s && *s)
		buffer.appendf("<DFUXRefDirectoriesQueryResult>%s</DFUXRefDirectoriesQueryResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefDirectoriesQueryResponse>");
}

bool CDFUXRefDirectoriesQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefDirectoriesQueryResult.unmarshall(rpc_request, "DFUXRefDirectoriesQueryResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefDirectoriesQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefDirectoriesQueryResult.unmarshall(ctx, soapval, "DFUXRefDirectoriesQueryResult");
	return hasValue;
}

bool CDFUXRefDirectoriesQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefDirectoriesQueryResult.unmarshall(ctx, params, attachments, "DFUXRefDirectoriesQueryResult", basepath);
	return hasValue;
}

const char * CDFUXRefDirectoriesQueryResponse::getDFUXRefDirectoriesQueryResult() { return m_DFUXRefDirectoriesQueryResult.query();}
void CDFUXRefDirectoriesQueryResponse::setDFUXRefDirectoriesQueryResult(const char * val){ m_DFUXRefDirectoriesQueryResult.set(val); }
extern "C"  IEspDFUXRefDirectoriesQueryResponse *createDFUXRefDirectoriesQueryResponse(const char *serv){return ((IEspDFUXRefDirectoriesQueryResponse *)new CDFUXRefDirectoriesQueryResponse(serv));}
extern "C"  IClientDFUXRefDirectoriesQueryResponse *createClientDFUXRefDirectoriesQueryResponse(const char *serv){return ((IClientDFUXRefDirectoriesQueryResponse *)new CDFUXRefDirectoriesQueryResponse(serv));}

//=======================================================
// class CDFUXRefFoundFilesQueryRequest Implementation
//=======================================================

CDFUXRefFoundFilesQueryRequest::CDFUXRefFoundFilesQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefFoundFilesQueryRequest::CDFUXRefFoundFilesQueryRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryRequest");
}

CDFUXRefFoundFilesQueryRequest::CDFUXRefFoundFilesQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefFoundFilesQueryRequest::CDFUXRefFoundFilesQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefFoundFilesQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefFoundFilesQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefFoundFilesQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefFoundFilesQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefFoundFilesQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefFoundFilesQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
}


void CDFUXRefFoundFilesQueryRequest::copy(CDFUXRefFoundFilesQueryRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
}


void CDFUXRefFoundFilesQueryRequest::copy(IConstDFUXRefFoundFilesQueryRequest &ifrom)
{
	setCluster(ifrom.getCluster());
}


void CDFUXRefFoundFilesQueryRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefFoundFilesQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
}


void CDFUXRefFoundFilesQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefFoundFilesQueryRequest::serializer(IEspContext* ctx, IConstDFUXRefFoundFilesQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefFoundFilesQueryRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUXRefFoundFilesQueryRequest>");
}

bool CDFUXRefFoundFilesQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	return hasValue;
}

bool CDFUXRefFoundFilesQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	return hasValue;
}

bool CDFUXRefFoundFilesQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	return hasValue;
}

const char * CDFUXRefFoundFilesQueryRequest::getCluster() { return m_Cluster.query();}
void CDFUXRefFoundFilesQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
extern "C"  IEspDFUXRefFoundFilesQueryRequest *createDFUXRefFoundFilesQueryRequest(const char *serv){return ((IEspDFUXRefFoundFilesQueryRequest *)new CDFUXRefFoundFilesQueryRequest(serv));}
extern "C"  IClientDFUXRefFoundFilesQueryRequest *createClientDFUXRefFoundFilesQueryRequest(const char *serv){return ((IClientDFUXRefFoundFilesQueryRequest *)new CDFUXRefFoundFilesQueryRequest(serv));}

//=======================================================
// class CDFUXRefFoundFilesQueryResponse Implementation
//=======================================================

CDFUXRefFoundFilesQueryResponse::CDFUXRefFoundFilesQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefFoundFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefFoundFilesQueryResponse::CDFUXRefFoundFilesQueryResponse(const char *serviceName, const char *bc)
	: m_DFUXRefFoundFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryResponse");
}

CDFUXRefFoundFilesQueryResponse::CDFUXRefFoundFilesQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefFoundFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefFoundFilesQueryResponse::CDFUXRefFoundFilesQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefFoundFilesQueryResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefFoundFilesQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefFoundFilesQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefFoundFilesQueryResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefFoundFilesQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefFoundFilesQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefFoundFilesQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefFoundFilesQueryResult");
	form.appendf("  <tr><td><b>DFUXRefFoundFilesQueryResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefFoundFilesQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefFoundFilesQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefFoundFilesQueryResult.marshall(rpc_resp, "DFUXRefFoundFilesQueryResult", "", "", "");
	}
}


void CDFUXRefFoundFilesQueryResponse::copy(CDFUXRefFoundFilesQueryResponse &from)
{
	m_DFUXRefFoundFilesQueryResult.copy(from.m_DFUXRefFoundFilesQueryResult);
}


void CDFUXRefFoundFilesQueryResponse::copy(IConstDFUXRefFoundFilesQueryResponse &ifrom)
{
	setDFUXRefFoundFilesQueryResult(ifrom.getDFUXRefFoundFilesQueryResult());
}


void CDFUXRefFoundFilesQueryResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefFoundFilesQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefFoundFilesQueryResult.toStr(ctx, buffer, "DFUXRefFoundFilesQueryResult", "", false, "", "", false);
	}
}


void CDFUXRefFoundFilesQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefFoundFilesQueryResponse::serializer(IEspContext* ctx, IConstDFUXRefFoundFilesQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefFoundFilesQueryResponse>");
	// field DFUXRefFoundFilesQueryResult
	{
		const char* s = src.getDFUXRefFoundFilesQueryResult();
		if (s && *s)
		buffer.appendf("<DFUXRefFoundFilesQueryResult>%s</DFUXRefFoundFilesQueryResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefFoundFilesQueryResponse>");
}

bool CDFUXRefFoundFilesQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefFoundFilesQueryResult.unmarshall(rpc_request, "DFUXRefFoundFilesQueryResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefFoundFilesQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefFoundFilesQueryResult.unmarshall(ctx, soapval, "DFUXRefFoundFilesQueryResult");
	return hasValue;
}

bool CDFUXRefFoundFilesQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefFoundFilesQueryResult.unmarshall(ctx, params, attachments, "DFUXRefFoundFilesQueryResult", basepath);
	return hasValue;
}

const char * CDFUXRefFoundFilesQueryResponse::getDFUXRefFoundFilesQueryResult() { return m_DFUXRefFoundFilesQueryResult.query();}
void CDFUXRefFoundFilesQueryResponse::setDFUXRefFoundFilesQueryResult(const char * val){ m_DFUXRefFoundFilesQueryResult.set(val); }
extern "C"  IEspDFUXRefFoundFilesQueryResponse *createDFUXRefFoundFilesQueryResponse(const char *serv){return ((IEspDFUXRefFoundFilesQueryResponse *)new CDFUXRefFoundFilesQueryResponse(serv));}
extern "C"  IClientDFUXRefFoundFilesQueryResponse *createClientDFUXRefFoundFilesQueryResponse(const char *serv){return ((IClientDFUXRefFoundFilesQueryResponse *)new CDFUXRefFoundFilesQueryResponse(serv));}

//=======================================================
// class CDFUXRefArrayActionRequest Implementation
//=======================================================

CDFUXRefArrayActionRequest::CDFUXRefArrayActionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Type(nilIgnore),m_Cluster(nilIgnore),m_Action(nilIgnore),m_XRefFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefArrayActionRequest::CDFUXRefArrayActionRequest(const char *serviceName, const char *bc)
	: m_Type(nilIgnore),m_Cluster(nilIgnore),m_Action(nilIgnore),m_XRefFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionRequest");
}

CDFUXRefArrayActionRequest::CDFUXRefArrayActionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Type(nilIgnore),m_Cluster(nilIgnore),m_Action(nilIgnore),m_XRefFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefArrayActionRequest::CDFUXRefArrayActionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Type(nilIgnore),m_Cluster(nilIgnore),m_Action(nilIgnore),m_XRefFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefArrayActionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"XRefFiles\" type=\"tns:EspStringArray\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CDFUXRefArrayActionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefArrayActionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefArrayActionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("XRefFiles");
	form.appendf("<tr><td><b>XRefFiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefArrayActionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefArrayActionRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Action.marshall(rpc_resp, "Action", "", "", "");
	m_XRefFiles.marshall(rpc_resp, "XRefFiles", "Item");
}


void CDFUXRefArrayActionRequest::copy(CDFUXRefArrayActionRequest &from)
{
	m_Type.copy(from.m_Type);
	m_Cluster.copy(from.m_Cluster);
	m_Action.copy(from.m_Action);
	m_XRefFiles.copy(from.m_XRefFiles);
}


void CDFUXRefArrayActionRequest::copy(IConstDFUXRefArrayActionRequest &ifrom)
{
	setType(ifrom.getType());
	setCluster(ifrom.getCluster());
	setAction(ifrom.getAction());
	setXRefFiles(ifrom.getXRefFiles());
}


void CDFUXRefArrayActionRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefArrayActionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	m_XRefFiles.toStr(ctx, buffer, "XRefFiles", "Item");
}


void CDFUXRefArrayActionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefArrayActionRequest::serializer(IEspContext* ctx, IConstDFUXRefArrayActionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefArrayActionRequest>");
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Action
	{
		const char* s = src.getAction();
		if (s && *s)
		{
			buffer.append("<Action>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Action>");
		}
	}
	// field XRefFiles
	{
		StringArray& v = src.getXRefFiles();
		if (v.length()>0)
			buffer.append("<XRefFiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</XRefFiles>");
	}
	if (keepRootTag)
		buffer.append("</DFUXRefArrayActionRequest>");
}

bool CDFUXRefArrayActionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_XRefFiles.unmarshall(rpc_request, "XRefFiles", basepath);
	return hasValue;
}

bool CDFUXRefArrayActionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_XRefFiles.unmarshall(ctx, soapval, "XRefFiles");
	return hasValue;
}

bool CDFUXRefArrayActionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_XRefFiles.unmarshall(ctx, params, attachments, "XRefFiles", basepath);
	return hasValue;
}

const char * CDFUXRefArrayActionRequest::getType() { return m_Type.query();}
const char * CDFUXRefArrayActionRequest::getCluster() { return m_Cluster.query();}
const char * CDFUXRefArrayActionRequest::getAction() { return m_Action.query();}
StringArray & CDFUXRefArrayActionRequest::getXRefFiles() { return (StringArray &) m_XRefFiles; }
void CDFUXRefArrayActionRequest::setType(const char * val){ m_Type.set(val); }
void CDFUXRefArrayActionRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUXRefArrayActionRequest::setAction(const char * val){ m_Action.set(val); }
void CDFUXRefArrayActionRequest::setXRefFiles(StringArray &val){ m_XRefFiles->kill();  CloneArray(m_XRefFiles.getValue(), val); }
extern "C"  IEspDFUXRefArrayActionRequest *createDFUXRefArrayActionRequest(const char *serv){return ((IEspDFUXRefArrayActionRequest *)new CDFUXRefArrayActionRequest(serv));}
extern "C"  IClientDFUXRefArrayActionRequest *createClientDFUXRefArrayActionRequest(const char *serv){return ((IClientDFUXRefArrayActionRequest *)new CDFUXRefArrayActionRequest(serv));}

//=======================================================
// class CDFUXRefArrayActionResponse Implementation
//=======================================================

CDFUXRefArrayActionResponse::CDFUXRefArrayActionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefArrayActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefArrayActionResponse::CDFUXRefArrayActionResponse(const char *serviceName, const char *bc)
	: m_DFUXRefArrayActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionResponse");
}

CDFUXRefArrayActionResponse::CDFUXRefArrayActionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefArrayActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefArrayActionResponse::CDFUXRefArrayActionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefArrayActionResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefArrayActionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefArrayActionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefArrayActionResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefArrayActionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefArrayActionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefArrayActionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefArrayActionResult");
	form.appendf("  <tr><td><b>DFUXRefArrayActionResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefArrayActionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefArrayActionResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefArrayActionResult.marshall(rpc_resp, "DFUXRefArrayActionResult", "", "", "");
	}
}


void CDFUXRefArrayActionResponse::copy(CDFUXRefArrayActionResponse &from)
{
	m_DFUXRefArrayActionResult.copy(from.m_DFUXRefArrayActionResult);
}


void CDFUXRefArrayActionResponse::copy(IConstDFUXRefArrayActionResponse &ifrom)
{
	setDFUXRefArrayActionResult(ifrom.getDFUXRefArrayActionResult());
}


void CDFUXRefArrayActionResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefArrayActionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefArrayActionResult.toStr(ctx, buffer, "DFUXRefArrayActionResult", "", false, "", "", false);
	}
}


void CDFUXRefArrayActionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefArrayActionResponse::serializer(IEspContext* ctx, IConstDFUXRefArrayActionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefArrayActionResponse>");
	// field DFUXRefArrayActionResult
	{
		const char* s = src.getDFUXRefArrayActionResult();
		if (s && *s)
		buffer.appendf("<DFUXRefArrayActionResult>%s</DFUXRefArrayActionResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefArrayActionResponse>");
}

bool CDFUXRefArrayActionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefArrayActionResult.unmarshall(rpc_request, "DFUXRefArrayActionResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefArrayActionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefArrayActionResult.unmarshall(ctx, soapval, "DFUXRefArrayActionResult");
	return hasValue;
}

bool CDFUXRefArrayActionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefArrayActionResult.unmarshall(ctx, params, attachments, "DFUXRefArrayActionResult", basepath);
	return hasValue;
}

const char * CDFUXRefArrayActionResponse::getDFUXRefArrayActionResult() { return m_DFUXRefArrayActionResult.query();}
void CDFUXRefArrayActionResponse::setDFUXRefArrayActionResult(const char * val){ m_DFUXRefArrayActionResult.set(val); }
extern "C"  IEspDFUXRefArrayActionResponse *createDFUXRefArrayActionResponse(const char *serv){return ((IEspDFUXRefArrayActionResponse *)new CDFUXRefArrayActionResponse(serv));}
extern "C"  IClientDFUXRefArrayActionResponse *createClientDFUXRefArrayActionResponse(const char *serv){return ((IClientDFUXRefArrayActionResponse *)new CDFUXRefArrayActionResponse(serv));}

//=======================================================
// class CDFUXRefBuildCancelRequest Implementation
//=======================================================

CDFUXRefBuildCancelRequest::CDFUXRefBuildCancelRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefBuildCancelRequest::CDFUXRefBuildCancelRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelRequest");
}

CDFUXRefBuildCancelRequest::CDFUXRefBuildCancelRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefBuildCancelRequest::CDFUXRefBuildCancelRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefBuildCancelRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CDFUXRefBuildCancelRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefBuildCancelRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefBuildCancelRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefBuildCancelRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefBuildCancelRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CDFUXRefBuildCancelRequest::copy(CDFUXRefBuildCancelRequest &from)
{
}


void CDFUXRefBuildCancelRequest::copy(IConstDFUXRefBuildCancelRequest &ifrom)
{
}


void CDFUXRefBuildCancelRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefBuildCancelRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CDFUXRefBuildCancelRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefBuildCancelRequest::serializer(IEspContext* ctx, IConstDFUXRefBuildCancelRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefBuildCancelRequest>");
	if (keepRootTag)
		buffer.append("</DFUXRefBuildCancelRequest>");
}

bool CDFUXRefBuildCancelRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CDFUXRefBuildCancelRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CDFUXRefBuildCancelRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspDFUXRefBuildCancelRequest *createDFUXRefBuildCancelRequest(const char *serv){return ((IEspDFUXRefBuildCancelRequest *)new CDFUXRefBuildCancelRequest(serv));}
extern "C"  IClientDFUXRefBuildCancelRequest *createClientDFUXRefBuildCancelRequest(const char *serv){return ((IClientDFUXRefBuildCancelRequest *)new CDFUXRefBuildCancelRequest(serv));}

//=======================================================
// class CDFUXRefBuildCancelResponse Implementation
//=======================================================

CDFUXRefBuildCancelResponse::CDFUXRefBuildCancelResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFUXRefBuildCancelResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefBuildCancelResponse::CDFUXRefBuildCancelResponse(const char *serviceName, const char *bc)
	: m_DFUXRefBuildCancelResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelResponse");
}

CDFUXRefBuildCancelResponse::CDFUXRefBuildCancelResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFUXRefBuildCancelResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefBuildCancelResponse::CDFUXRefBuildCancelResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFUXRefBuildCancelResult(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefBuildCancelResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefBuildCancelResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUXRefBuildCancelResult\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefBuildCancelResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefBuildCancelResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefBuildCancelResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUXRefBuildCancelResult");
	form.appendf("  <tr><td><b>DFUXRefBuildCancelResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefBuildCancelResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefBuildCancelResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFUXRefBuildCancelResult.marshall(rpc_resp, "DFUXRefBuildCancelResult", "", "", "");
	}
}


void CDFUXRefBuildCancelResponse::copy(CDFUXRefBuildCancelResponse &from)
{
	m_DFUXRefBuildCancelResult.copy(from.m_DFUXRefBuildCancelResult);
}


void CDFUXRefBuildCancelResponse::copy(IConstDFUXRefBuildCancelResponse &ifrom)
{
	setDFUXRefBuildCancelResult(ifrom.getDFUXRefBuildCancelResult());
}


void CDFUXRefBuildCancelResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefBuildCancelResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DFUXRefBuildCancelResult.toStr(ctx, buffer, "DFUXRefBuildCancelResult", "", false, "", "", false);
	}
}


void CDFUXRefBuildCancelResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefBuildCancelResponse::serializer(IEspContext* ctx, IConstDFUXRefBuildCancelResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefBuildCancelResponse>");
	// field DFUXRefBuildCancelResult
	{
		const char* s = src.getDFUXRefBuildCancelResult();
		if (s && *s)
		buffer.appendf("<DFUXRefBuildCancelResult>%s</DFUXRefBuildCancelResult>",s);
	}
	if (keepRootTag)
		buffer.append("</DFUXRefBuildCancelResponse>");
}

bool CDFUXRefBuildCancelResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFUXRefBuildCancelResult.unmarshall(rpc_request, "DFUXRefBuildCancelResult", basepath);
	}
	return hasValue;
}

bool CDFUXRefBuildCancelResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefBuildCancelResult.unmarshall(ctx, soapval, "DFUXRefBuildCancelResult");
	return hasValue;
}

bool CDFUXRefBuildCancelResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFUXRefBuildCancelResult.unmarshall(ctx, params, attachments, "DFUXRefBuildCancelResult", basepath);
	return hasValue;
}

const char * CDFUXRefBuildCancelResponse::getDFUXRefBuildCancelResult() { return m_DFUXRefBuildCancelResult.query();}
void CDFUXRefBuildCancelResponse::setDFUXRefBuildCancelResult(const char * val){ m_DFUXRefBuildCancelResult.set(val); }
extern "C"  IEspDFUXRefBuildCancelResponse *createDFUXRefBuildCancelResponse(const char *serv){return ((IEspDFUXRefBuildCancelResponse *)new CDFUXRefBuildCancelResponse(serv));}
extern "C"  IClientDFUXRefBuildCancelResponse *createClientDFUXRefBuildCancelResponse(const char *serv){return ((IClientDFUXRefBuildCancelResponse *)new CDFUXRefBuildCancelResponse(serv));}

//=======================================================
// class CDFUXRefCleanDirectoriesRequest Implementation
//=======================================================

CDFUXRefCleanDirectoriesRequest::CDFUXRefCleanDirectoriesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefCleanDirectoriesRequest::CDFUXRefCleanDirectoriesRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesRequest");
}

CDFUXRefCleanDirectoriesRequest::CDFUXRefCleanDirectoriesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefCleanDirectoriesRequest::CDFUXRefCleanDirectoriesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefCleanDirectoriesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefCleanDirectoriesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefCleanDirectoriesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefCleanDirectoriesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefCleanDirectoriesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefCleanDirectoriesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
}


void CDFUXRefCleanDirectoriesRequest::copy(CDFUXRefCleanDirectoriesRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
}


void CDFUXRefCleanDirectoriesRequest::copy(IConstDFUXRefCleanDirectoriesRequest &ifrom)
{
	setCluster(ifrom.getCluster());
}


void CDFUXRefCleanDirectoriesRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefCleanDirectoriesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
}


void CDFUXRefCleanDirectoriesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefCleanDirectoriesRequest::serializer(IEspContext* ctx, IConstDFUXRefCleanDirectoriesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefCleanDirectoriesRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUXRefCleanDirectoriesRequest>");
}

bool CDFUXRefCleanDirectoriesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	return hasValue;
}

bool CDFUXRefCleanDirectoriesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	return hasValue;
}

bool CDFUXRefCleanDirectoriesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	return hasValue;
}

const char * CDFUXRefCleanDirectoriesRequest::getCluster() { return m_Cluster.query();}
void CDFUXRefCleanDirectoriesRequest::setCluster(const char * val){ m_Cluster.set(val); }
extern "C"  IEspDFUXRefCleanDirectoriesRequest *createDFUXRefCleanDirectoriesRequest(const char *serv){return ((IEspDFUXRefCleanDirectoriesRequest *)new CDFUXRefCleanDirectoriesRequest(serv));}
extern "C"  IClientDFUXRefCleanDirectoriesRequest *createClientDFUXRefCleanDirectoriesRequest(const char *serv){return ((IClientDFUXRefCleanDirectoriesRequest *)new CDFUXRefCleanDirectoriesRequest(serv));}

//=======================================================
// class CDFUXRefCleanDirectoriesResponse Implementation
//=======================================================

CDFUXRefCleanDirectoriesResponse::CDFUXRefCleanDirectoriesResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefCleanDirectoriesResponse::CDFUXRefCleanDirectoriesResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesResponse");
}

CDFUXRefCleanDirectoriesResponse::CDFUXRefCleanDirectoriesResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefCleanDirectoriesResponse::CDFUXRefCleanDirectoriesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefCleanDirectoriesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefCleanDirectoriesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefCleanDirectoriesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefCleanDirectoriesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefCleanDirectoriesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefCleanDirectoriesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefCleanDirectoriesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CDFUXRefCleanDirectoriesResponse::copy(CDFUXRefCleanDirectoriesResponse &from)
{
}


void CDFUXRefCleanDirectoriesResponse::copy(IConstDFUXRefCleanDirectoriesResponse &ifrom)
{
}


void CDFUXRefCleanDirectoriesResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefCleanDirectoriesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CDFUXRefCleanDirectoriesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefCleanDirectoriesResponse::serializer(IEspContext* ctx, IConstDFUXRefCleanDirectoriesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefCleanDirectoriesResponse>");
	if (keepRootTag)
		buffer.append("</DFUXRefCleanDirectoriesResponse>");
}

bool CDFUXRefCleanDirectoriesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CDFUXRefCleanDirectoriesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CDFUXRefCleanDirectoriesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspDFUXRefCleanDirectoriesResponse *createDFUXRefCleanDirectoriesResponse(const char *serv){return ((IEspDFUXRefCleanDirectoriesResponse *)new CDFUXRefCleanDirectoriesResponse(serv));}
extern "C"  IClientDFUXRefCleanDirectoriesResponse *createClientDFUXRefCleanDirectoriesResponse(const char *serv){return ((IClientDFUXRefCleanDirectoriesResponse *)new CDFUXRefCleanDirectoriesResponse(serv));}

//=======================================================
// class CDFUXRefUnusedFilesRequest Implementation
//=======================================================

CDFUXRefUnusedFilesRequest::CDFUXRefUnusedFilesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ProcessCluster(nilIgnore),m_CheckPackageMaps(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefUnusedFilesRequest::CDFUXRefUnusedFilesRequest(const char *serviceName, const char *bc)
	: m_ProcessCluster(nilIgnore),m_CheckPackageMaps(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesRequest");
}

CDFUXRefUnusedFilesRequest::CDFUXRefUnusedFilesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ProcessCluster(nilIgnore),m_CheckPackageMaps(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefUnusedFilesRequest::CDFUXRefUnusedFilesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ProcessCluster(nilIgnore),m_CheckPackageMaps(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefUnusedFilesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ProcessCluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CheckPackageMaps\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefUnusedFilesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefUnusedFilesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefUnusedFilesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ProcessCluster");
	form.appendf("  <tr><td><b>ProcessCluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CheckPackageMaps");
	
	form.appendf("  <tr><td><b>CheckPackageMaps? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefUnusedFilesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefUnusedFilesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ProcessCluster.marshall(rpc_resp, "ProcessCluster", "", "", "");
	m_CheckPackageMaps.marshall(rpc_resp, "CheckPackageMaps", "", "", "");
}


void CDFUXRefUnusedFilesRequest::copy(CDFUXRefUnusedFilesRequest &from)
{
	m_ProcessCluster.copy(from.m_ProcessCluster);
	m_CheckPackageMaps.copy(from.m_CheckPackageMaps);
}


void CDFUXRefUnusedFilesRequest::copy(IConstDFUXRefUnusedFilesRequest &ifrom)
{
	setProcessCluster(ifrom.getProcessCluster());
	setCheckPackageMaps(ifrom.getCheckPackageMaps());
}


void CDFUXRefUnusedFilesRequest::getAttributes(IProperties &attributes)
{
}


void CDFUXRefUnusedFilesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ProcessCluster.toStr(ctx, buffer, "ProcessCluster", "", true, "", "");
	m_CheckPackageMaps.toStr(ctx, buffer, "CheckPackageMaps", "", true, "", "");
}


void CDFUXRefUnusedFilesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefUnusedFilesRequest::serializer(IEspContext* ctx, IConstDFUXRefUnusedFilesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefUnusedFilesRequest>");
	// field ProcessCluster
	{
		const char* s = src.getProcessCluster();
		if (s && *s)
		{
			buffer.append("<ProcessCluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ProcessCluster>");
		}
	}
	// field CheckPackageMaps
	{
		bool b = src.getCheckPackageMaps();
		if (b)
			buffer.appendf("<CheckPackageMaps>1</CheckPackageMaps>");
	}
	if (keepRootTag)
		buffer.append("</DFUXRefUnusedFilesRequest>");
}

bool CDFUXRefUnusedFilesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ProcessCluster.unmarshall(rpc_request, "ProcessCluster", basepath);
	hasValue |= m_CheckPackageMaps.unmarshall(rpc_request, "CheckPackageMaps", basepath);
	return hasValue;
}

bool CDFUXRefUnusedFilesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ProcessCluster.unmarshall(ctx, soapval, "ProcessCluster");
	hasValue |= m_CheckPackageMaps.unmarshall(ctx, soapval, "CheckPackageMaps");
	return hasValue;
}

bool CDFUXRefUnusedFilesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ProcessCluster.unmarshall(ctx, params, attachments, "ProcessCluster", basepath);
	hasValue |= m_CheckPackageMaps.unmarshall(ctx, params, attachments, "CheckPackageMaps", basepath);
	return hasValue;
}

const char * CDFUXRefUnusedFilesRequest::getProcessCluster() { return m_ProcessCluster.query();}
bool CDFUXRefUnusedFilesRequest::getCheckPackageMaps() { return m_CheckPackageMaps;}
void CDFUXRefUnusedFilesRequest::setProcessCluster(const char * val){ m_ProcessCluster.set(val); }
void CDFUXRefUnusedFilesRequest::setCheckPackageMaps(bool val){ m_CheckPackageMaps=val; }
extern "C"  IEspDFUXRefUnusedFilesRequest *createDFUXRefUnusedFilesRequest(const char *serv){return ((IEspDFUXRefUnusedFilesRequest *)new CDFUXRefUnusedFilesRequest(serv));}
extern "C"  IClientDFUXRefUnusedFilesRequest *createClientDFUXRefUnusedFilesRequest(const char *serv){return ((IClientDFUXRefUnusedFilesRequest *)new CDFUXRefUnusedFilesRequest(serv));}

//=======================================================
// class CDFUXRefUnusedFilesResponse Implementation
//=======================================================

CDFUXRefUnusedFilesResponse::CDFUXRefUnusedFilesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_UnusedFileCount(nilIgnore),m_UnusedFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUXRefUnusedFilesResponse::CDFUXRefUnusedFilesResponse(const char *serviceName, const char *bc)
	: m_UnusedFileCount(nilIgnore),m_UnusedFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesResponse");
}

CDFUXRefUnusedFilesResponse::CDFUXRefUnusedFilesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_UnusedFileCount(nilIgnore),m_UnusedFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUXRefUnusedFilesResponse::CDFUXRefUnusedFilesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_UnusedFileCount(nilIgnore),m_UnusedFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUXRefUnusedFilesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUXRefUnusedFilesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"UnusedFileCount\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"UnusedFiles\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"File\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUXRefUnusedFilesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUXRefUnusedFilesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUXRefUnusedFilesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("UnusedFileCount");
	form.appendf("  <tr><td><b>UnusedFileCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UnusedFiles");
	form.appendf("<tr><td><b>UnusedFiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUXRefUnusedFilesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUXRefUnusedFilesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_UnusedFileCount.marshall(rpc_resp, "UnusedFileCount", "", "", "");
		m_UnusedFiles.marshall(rpc_resp, "UnusedFiles", "File");
	}
}


void CDFUXRefUnusedFilesResponse::copy(CDFUXRefUnusedFilesResponse &from)
{
	m_UnusedFileCount.copy(from.m_UnusedFileCount);
	m_UnusedFiles.copy(from.m_UnusedFiles);
}


void CDFUXRefUnusedFilesResponse::copy(IConstDFUXRefUnusedFilesResponse &ifrom)
{
	setUnusedFileCount(ifrom.getUnusedFileCount());
	setUnusedFiles(ifrom.getUnusedFiles());
}


void CDFUXRefUnusedFilesResponse::getAttributes(IProperties &attributes)
{
}


void CDFUXRefUnusedFilesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_UnusedFileCount.toStr(ctx, buffer, "UnusedFileCount", "", true, "", "");
		m_UnusedFiles.toStr(ctx, buffer, "UnusedFiles", "File");
	}
}


void CDFUXRefUnusedFilesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUXRefUnusedFilesResponse::serializer(IEspContext* ctx, IConstDFUXRefUnusedFilesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUXRefUnusedFilesResponse>");
	// field UnusedFileCount
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=UnusedFileCount
		buffer.append("<UnusedFileCount>");
		buffer.append(src.getUnusedFileCount());
		buffer.append("</UnusedFileCount>");
	}
	// field UnusedFiles
	{
		StringArray& v = src.getUnusedFiles();
		if (v.length()>0)
			buffer.append("<UnusedFiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<File>%s</File>",v.item(i));
		if (v.length()>0)
			buffer.append("</UnusedFiles>");
	}
	if (keepRootTag)
		buffer.append("</DFUXRefUnusedFilesResponse>");
}

bool CDFUXRefUnusedFilesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_UnusedFileCount.unmarshall(rpc_request, "UnusedFileCount", basepath);
		hasValue |= m_UnusedFiles.unmarshall(rpc_request, "UnusedFiles", basepath);
	}
	return hasValue;
}

bool CDFUXRefUnusedFilesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_UnusedFileCount.unmarshall(ctx, soapval, "UnusedFileCount");
	hasValue |= m_UnusedFiles.unmarshall(ctx, soapval, "UnusedFiles");
	return hasValue;
}

bool CDFUXRefUnusedFilesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_UnusedFileCount.unmarshall(ctx, params, attachments, "UnusedFileCount", basepath);
	hasValue |= m_UnusedFiles.unmarshall(ctx, params, attachments, "UnusedFiles", basepath);
	return hasValue;
}

unsigned int CDFUXRefUnusedFilesResponse::getUnusedFileCount() { return m_UnusedFileCount;}
StringArray & CDFUXRefUnusedFilesResponse::getUnusedFiles() { return (StringArray &) m_UnusedFiles; }
void CDFUXRefUnusedFilesResponse::setUnusedFileCount(unsigned int val){ m_UnusedFileCount=val; }
void CDFUXRefUnusedFilesResponse::setUnusedFiles(StringArray &val){ m_UnusedFiles->kill();  CloneArray(m_UnusedFiles.getValue(), val); }
extern "C"  IEspDFUXRefUnusedFilesResponse *createDFUXRefUnusedFilesResponse(const char *serv){return ((IEspDFUXRefUnusedFilesResponse *)new CDFUXRefUnusedFilesResponse(serv));}
extern "C"  IClientDFUXRefUnusedFilesResponse *createClientDFUXRefUnusedFilesResponse(const char *serv){return ((IClientDFUXRefUnusedFilesResponse *)new CDFUXRefUnusedFilesResponse(serv));}

//=======================================================
// class CWsDFUXRefPingRequest Implementation
//=======================================================

CWsDFUXRefPingRequest::CWsDFUXRefPingRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsDFUXRefPingRequest::CWsDFUXRefPingRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingRequest");
}

CWsDFUXRefPingRequest::CWsDFUXRefPingRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsDFUXRefPingRequest::CWsDFUXRefPingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsDFUXRefPingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsDFUXRefPingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsDFUXRefPingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsDFUXRefPingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsDFUXRefPingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsDFUXRefPingRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWsDFUXRefPingRequest::copy(CWsDFUXRefPingRequest &from)
{
}


void CWsDFUXRefPingRequest::copy(IConstWsDFUXRefPingRequest &ifrom)
{
}


void CWsDFUXRefPingRequest::getAttributes(IProperties &attributes)
{
}


void CWsDFUXRefPingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWsDFUXRefPingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsDFUXRefPingRequest::serializer(IEspContext* ctx, IConstWsDFUXRefPingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsDFUXRefPingRequest>");
	if (keepRootTag)
		buffer.append("</WsDFUXRefPingRequest>");
}

bool CWsDFUXRefPingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWsDFUXRefPingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsDFUXRefPingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsDFUXRefPingRequest *createWsDFUXRefPingRequest(const char *serv){return ((IEspWsDFUXRefPingRequest *)new CWsDFUXRefPingRequest(serv));}
extern "C"  IClientWsDFUXRefPingRequest *createClientWsDFUXRefPingRequest(const char *serv){return ((IClientWsDFUXRefPingRequest *)new CWsDFUXRefPingRequest(serv));}

//=======================================================
// class CWsDFUXRefPingResponse Implementation
//=======================================================

CWsDFUXRefPingResponse::CWsDFUXRefPingResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsDFUXRefPingResponse::CWsDFUXRefPingResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingResponse");
}

CWsDFUXRefPingResponse::CWsDFUXRefPingResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsDFUXRefPingResponse::CWsDFUXRefPingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDFUXRefPingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsDFUXRefPingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsDFUXRefPingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsDFUXRefPingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsDFUXRefPingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsDFUXRefPingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsDFUXRefPingResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWsDFUXRefPingResponse::copy(CWsDFUXRefPingResponse &from)
{
}


void CWsDFUXRefPingResponse::copy(IConstWsDFUXRefPingResponse &ifrom)
{
}


void CWsDFUXRefPingResponse::getAttributes(IProperties &attributes)
{
}


void CWsDFUXRefPingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWsDFUXRefPingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsDFUXRefPingResponse::serializer(IEspContext* ctx, IConstWsDFUXRefPingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsDFUXRefPingResponse>");
	if (keepRootTag)
		buffer.append("</WsDFUXRefPingResponse>");
}

bool CWsDFUXRefPingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWsDFUXRefPingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsDFUXRefPingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsDFUXRefPingResponse *createWsDFUXRefPingResponse(const char *serv){return ((IEspWsDFUXRefPingResponse *)new CWsDFUXRefPingResponse(serv));}
extern "C"  IClientWsDFUXRefPingResponse *createClientWsDFUXRefPingResponse(const char *serv){return ((IClientWsDFUXRefPingResponse *)new CWsDFUXRefPingResponse(serv));}

//=======================================================
// class CWsDFUXRefSoapBinding Implementation
//=======================================================

CWsDFUXRefSoapBinding::CWsDFUXRefSoapBinding(http_soap_log_level level):CHttpSoapBinding(NULL, NULL, NULL, level)
{
	init_strings();
	setWsdlVersion(1);
}

CWsDFUXRefSoapBinding::CWsDFUXRefSoapBinding(IPropertyTree* cfg, const char *bindname, const char *procname, http_soap_log_level level):CHttpSoapBinding(cfg, bindname, procname, level)
{
	init_strings(); 
	setWsdlVersion(1);

}

void CWsDFUXRefSoapBinding::init_strings()
{
}

int CWsDFUXRefSoapBinding::processRequest(IRpcMessage* rpc_call, IRpcMessage* rpc_response)
{
	if(rpc_call == NULL || rpc_response == NULL)
		return -1;

	IEspContext *ctx=rpc_call->queryContext();
	DBGLOG("Client version: %g", ctx->getClientVersion());
	StringBuffer serviceName;
	double clientVer=(ctx) ? ctx->getClientVersion() : 0.0;
	qualifyServiceName(*ctx, ctx->queryServiceName(NULL), NULL, serviceName, NULL);
	CRpcCall* thecall = static_cast<CRpcCall *>(rpc_call);
	CRpcResponse* response = static_cast<CRpcResponse*>(rpc_response);
	CHttpRequest* httprequest = thecall->getHttpReq();
	CHttpResponse* httpresponse = response->getHttpResp();

	Owned<IEspWsDFUXRef> iserv = (IEspWsDFUXRef*)getService();
	if(iserv == NULL)
	{
		response->set_status(SOAP_SERVER_ERROR);
		response->set_err("Service not available");
		DBGLOG("Service not available");
		return -1;
	}
	if (thecall->get_name() == NULL)
	{
		response->set_status(SOAP_CLIENT_ERROR);
		response->set_err("No service method specified");
		ERRLOG("No service method specified");
		return -1;
	}

	IEspContext& context = *rpc_call->queryContext();

	if(!stricmp(thecall->get_name(), "DFUXRefArrayAction")||!stricmp(thecall->get_name(), "DFUXRefArrayActionRequest"))
	{
		Owned<CDFUXRefArrayActionRequest> esp_request = new CDFUXRefArrayActionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefArrayActionResponse> esp_response = new CDFUXRefArrayActionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuXrefAccess", SecAccess_Access);
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefArrayAction");
			iserv->onDFUXRefArrayAction(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefArrayAction");
		response->set_name("DFUXRefArrayActionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefBuild")||!stricmp(thecall->get_name(), "DFUXRefBuildRequest"))
	{
		Owned<CDFUXRefBuildRequest> esp_request = new CDFUXRefBuildRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefBuildResponse> esp_response = new CDFUXRefBuildResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefBuild");
			iserv->onDFUXRefBuild(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefBuild");
		response->set_name("DFUXRefBuildResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefBuildCancel")||!stricmp(thecall->get_name(), "DFUXRefBuildCancelRequest"))
	{
		Owned<CDFUXRefBuildCancelRequest> esp_request = new CDFUXRefBuildCancelRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefBuildCancelResponse> esp_response = new CDFUXRefBuildCancelResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefBuildCancel");
			iserv->onDFUXRefBuildCancel(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefBuildCancel");
		response->set_name("DFUXRefBuildCancelResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefCleanDirectories")||!stricmp(thecall->get_name(), "DFUXRefCleanDirectoriesRequest"))
	{
		Owned<CDFUXRefCleanDirectoriesRequest> esp_request = new CDFUXRefCleanDirectoriesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefCleanDirectoriesResponse> esp_response = new CDFUXRefCleanDirectoriesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefCleanDirectories");
			iserv->onDFUXRefCleanDirectories(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefCleanDirectories");
		response->set_name("DFUXRefCleanDirectoriesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefDirectories")||!stricmp(thecall->get_name(), "DFUXRefDirectoriesQueryRequest"))
	{
		Owned<CDFUXRefDirectoriesQueryRequest> esp_request = new CDFUXRefDirectoriesQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefDirectoriesQueryResponse> esp_response = new CDFUXRefDirectoriesQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefDirectories");
			iserv->onDFUXRefDirectories(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefDirectories");
		response->set_name("DFUXRefDirectoriesQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefFoundFiles")||!stricmp(thecall->get_name(), "DFUXRefFoundFilesQueryRequest"))
	{
		Owned<CDFUXRefFoundFilesQueryRequest> esp_request = new CDFUXRefFoundFilesQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefFoundFilesQueryResponse> esp_response = new CDFUXRefFoundFilesQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefFoundFiles");
			iserv->onDFUXRefFoundFiles(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefFoundFiles");
		response->set_name("DFUXRefFoundFilesQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefList")||!stricmp(thecall->get_name(), "DFUXRefListRequest"))
	{
		Owned<CDFUXRefListRequest> esp_request = new CDFUXRefListRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefListResponse> esp_response = new CDFUXRefListResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefList");
			iserv->onDFUXRefList(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefList");
		response->set_name("DFUXRefListResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefLostFiles")||!stricmp(thecall->get_name(), "DFUXRefLostFilesQueryRequest"))
	{
		Owned<CDFUXRefLostFilesQueryRequest> esp_request = new CDFUXRefLostFilesQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefLostFilesQueryResponse> esp_response = new CDFUXRefLostFilesQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefLostFiles");
			iserv->onDFUXRefLostFiles(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefLostFiles");
		response->set_name("DFUXRefLostFilesQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefMessages")||!stricmp(thecall->get_name(), "DFUXRefMessagesQueryRequest"))
	{
		Owned<CDFUXRefMessagesQueryRequest> esp_request = new CDFUXRefMessagesQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefMessagesQueryResponse> esp_response = new CDFUXRefMessagesQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefMessages");
			iserv->onDFUXRefMessages(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefMessages");
		response->set_name("DFUXRefMessagesQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefOrphanFiles")||!stricmp(thecall->get_name(), "DFUXRefOrphanFilesQueryRequest"))
	{
		Owned<CDFUXRefOrphanFilesQueryRequest> esp_request = new CDFUXRefOrphanFilesQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefOrphanFilesQueryResponse> esp_response = new CDFUXRefOrphanFilesQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefOrphanFiles");
			iserv->onDFUXRefOrphanFiles(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefOrphanFiles");
		response->set_name("DFUXRefOrphanFilesQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUXRefUnusedFiles")||!stricmp(thecall->get_name(), "DFUXRefUnusedFilesRequest"))
	{
		Owned<CDFUXRefUnusedFilesRequest> esp_request = new CDFUXRefUnusedFilesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUXRefUnusedFilesResponse> esp_response = new CDFUXRefUnusedFilesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuXrefAccess", SecAccess_Access);
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefUnusedFiles");
			iserv->onDFUXRefUnusedFiles(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "DFUXRefUnusedFiles");
		response->set_name("DFUXRefUnusedFilesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "Ping")||!stricmp(thecall->get_name(), "WsDFUXRefPingRequest"))
	{
		Owned<CWsDFUXRefPingRequest> esp_request = new CWsDFUXRefPingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWsDFUXRefPingResponse> esp_response = new CWsDFUXRefPingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDFUXRef::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "Ping");
			iserv->onPing(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDFUXRef", "Ping");
		response->set_name("WsDFUXRefPingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	response->set_status(SOAP_CLIENT_ERROR);
	StringBuffer msg, svcName;
	msg.appendf("Method %s not available in service %s",thecall->get_name(),getServiceName(svcName).str());
	ERRLOG("%s", msg.str());
	response->set_err(msg);
	return -1;
}

int CWsDFUXRefSoapBinding::getXsdDefinition(IEspContext &context, CHttpRequest* request, StringBuffer &content, const char *service, const char *method, bool mda)
{
	BoolHash added;
	DBGLOG("Client version: %g", context.getClientVersion());
	bool fullservice = (!Utils::strcasecmp(service, "WsDFUXRef"));
	bool allMethods = (method==NULL || *method==0);
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefArrayAction"))) || Utils::strcasecmp(method, "DFUXRefArrayAction")==0)
	{
		CDFUXRefArrayActionRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefArrayActionResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefArrayActionRequest::getXsdDefinition(context, request, "DFUXRefArrayActionRequest", content, added);
		CDFUXRefArrayActionResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefBuild"))) || Utils::strcasecmp(method, "DFUXRefBuild")==0)
	{
		CDFUXRefBuildRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefBuildResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefBuildRequest::getXsdDefinition(context, request, "DFUXRefBuildRequest", content, added);
		CDFUXRefBuildResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefBuildCancel"))) || Utils::strcasecmp(method, "DFUXRefBuildCancel")==0)
	{
		CDFUXRefBuildCancelRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefBuildCancelResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefBuildCancelRequest::getXsdDefinition(context, request, "DFUXRefBuildCancelRequest", content, added);
		CDFUXRefBuildCancelResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefCleanDirectories"))) || Utils::strcasecmp(method, "DFUXRefCleanDirectories")==0)
	{
		CDFUXRefCleanDirectoriesRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefCleanDirectoriesResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefCleanDirectoriesRequest::getXsdDefinition(context, request, "DFUXRefCleanDirectoriesRequest", content, added);
		CDFUXRefCleanDirectoriesResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefDirectories"))) || Utils::strcasecmp(method, "DFUXRefDirectories")==0)
	{
		CDFUXRefDirectoriesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefDirectoriesQueryResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefDirectoriesQueryRequest::getXsdDefinition(context, request, "DFUXRefDirectoriesQueryRequest", content, added);
		CDFUXRefDirectoriesQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefFoundFiles"))) || Utils::strcasecmp(method, "DFUXRefFoundFiles")==0)
	{
		CDFUXRefFoundFilesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefFoundFilesQueryResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefFoundFilesQueryRequest::getXsdDefinition(context, request, "DFUXRefFoundFilesQueryRequest", content, added);
		CDFUXRefFoundFilesQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefList"))) || Utils::strcasecmp(method, "DFUXRefList")==0)
	{
		CDFUXRefListRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefListResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefListRequest::getXsdDefinition(context, request, "DFUXRefListRequest", content, added);
		CDFUXRefListResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefLostFiles"))) || Utils::strcasecmp(method, "DFUXRefLostFiles")==0)
	{
		CDFUXRefLostFilesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefLostFilesQueryResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefLostFilesQueryRequest::getXsdDefinition(context, request, "DFUXRefLostFilesQueryRequest", content, added);
		CDFUXRefLostFilesQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefMessages"))) || Utils::strcasecmp(method, "DFUXRefMessages")==0)
	{
		CDFUXRefMessagesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefMessagesQueryResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefMessagesQueryRequest::getXsdDefinition(context, request, "DFUXRefMessagesQueryRequest", content, added);
		CDFUXRefMessagesQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefOrphanFiles"))) || Utils::strcasecmp(method, "DFUXRefOrphanFiles")==0)
	{
		CDFUXRefOrphanFilesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefOrphanFilesQueryResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefOrphanFilesQueryRequest::getXsdDefinition(context, request, "DFUXRefOrphanFilesQueryRequest", content, added);
		CDFUXRefOrphanFilesQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUXRefUnusedFiles"))) || Utils::strcasecmp(method, "DFUXRefUnusedFiles")==0)
	{
		CDFUXRefUnusedFilesRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefUnusedFilesResponse::getMapInfo(context.queryMapInfo());
		CDFUXRefUnusedFilesRequest::getXsdDefinition(context, request, "DFUXRefUnusedFilesRequest", content, added);
		CDFUXRefUnusedFilesResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Ping"))) || Utils::strcasecmp(method, "Ping")==0)
	{
		CWsDFUXRefPingRequest::getMapInfo(context.queryMapInfo());
		CWsDFUXRefPingResponse::getMapInfo(context.queryMapInfo());
		CWsDFUXRefPingRequest::getXsdDefinition(context, request, "WsDFUXRefPingRequest", content, added);
		CWsDFUXRefPingResponse::getXsdDefinition(context, request, content, added);
	}
	return 0;
}

int CWsDFUXRefSoapBinding::getMethodHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &page, bool bIncludeFormTag)
{
	DBGLOG("Client version: %g", context.getClientVersion());
	if (Utils::strcasecmp(method, "DFUXRefArrayAction")==0)
	{
		CDFUXRefArrayActionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefBuild")==0)
	{
		CDFUXRefBuildRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefBuildCancel")==0)
	{
		CDFUXRefBuildCancelRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefCleanDirectories")==0)
	{
		CDFUXRefCleanDirectoriesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefDirectories")==0)
	{
		CDFUXRefDirectoriesQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefFoundFiles")==0)
	{
		CDFUXRefFoundFilesQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefList")==0)
	{
		CDFUXRefListRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefLostFiles")==0)
	{
		CDFUXRefLostFilesQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefMessages")==0)
	{
		CDFUXRefMessagesQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefOrphanFiles")==0)
	{
		CDFUXRefOrphanFilesQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUXRefUnusedFiles")==0)
	{
		CDFUXRefUnusedFilesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "Ping")==0)
	{
		CWsDFUXRefPingRequest::getHtmlForm(context, request, serv, method, page);
	}
	return 0;
}

int CWsDFUXRefSoapBinding::getQualifiedNames(IEspContext& ctx, MethodInfoArray & methods)
{
	double ver = ctx.getClientVersion();
	if (ver<=0)
		ver = getWsdlVersion();
	const char *servname=ctx.queryServiceName(NULL);
	bool fullservice = (!stricmp(servname, "esp")||!stricmp(servname, "WsDFUXRef"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefArrayAction")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefArrayAction", "DFUXRefArrayActionRequest", "DFUXRefArrayActionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefBuild")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefBuild", "DFUXRefBuildRequest", "DFUXRefBuildResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefBuildCancel")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefBuildCancel", "DFUXRefBuildCancelRequest", "DFUXRefBuildCancelResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefCleanDirectories")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefCleanDirectories", "DFUXRefCleanDirectoriesRequest", "DFUXRefCleanDirectoriesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefDirectories")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefDirectories", "DFUXRefDirectoriesQueryRequest", "DFUXRefDirectoriesQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefFoundFiles")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefFoundFiles", "DFUXRefFoundFilesQueryRequest", "DFUXRefFoundFilesQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefList")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefList", "DFUXRefListRequest", "DFUXRefListResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefLostFiles")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefLostFiles", "DFUXRefLostFilesQueryRequest", "DFUXRefLostFilesQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefMessages")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefMessages", "DFUXRefMessagesQueryRequest", "DFUXRefMessagesQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefOrphanFiles")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefOrphanFiles", "DFUXRefOrphanFilesQueryRequest", "DFUXRefOrphanFilesQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUXRefUnusedFiles")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUXRefUnusedFiles", "DFUXRefUnusedFilesRequest", "DFUXRefUnusedFilesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Ping")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Ping", "WsDFUXRefPingRequest", "WsDFUXRefPingResponse"));
	return methods.ordinality();
}

StringBuffer & CWsDFUXRefSoapBinding::getServiceName(StringBuffer &resp)
{
	resp.append("WsDFUXRef");
	return resp;
}

bool CWsDFUXRefSoapBinding::isValidServiceName(IEspContext &context, const char *name)
{
	if (!Utils::strcasecmp(name, "WsDFUXRef"))
		return true;
	else
		return (hasSubService(context, name));
}

bool CWsDFUXRefSoapBinding::qualifyMethodName(IEspContext &context, const char *methname, StringBuffer *methQName)
{
	if (!methname || !*methname)
	{
		if (methQName!=NULL)
			methQName->clear();
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefArrayAction")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefArrayAction");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefBuild")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefBuild");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefBuildCancel")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefBuildCancel");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefCleanDirectories")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefCleanDirectories");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefDirectories")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefDirectories");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefFoundFiles")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefFoundFiles");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefList")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefList");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefLostFiles")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefLostFiles");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefMessages")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefMessages");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefOrphanFiles")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefOrphanFiles");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUXRefUnusedFiles")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUXRefUnusedFiles");
		return true;
	}
	if (Utils::strcasecmp(methname, "Ping")==0)
	{
		if (methQName!=NULL)
			methQName->set("Ping");
		return true;
	}
	return false;
}

bool CWsDFUXRefSoapBinding::qualifyServiceName(IEspContext &context, const char *servname, const char *methname, StringBuffer &servQName, StringBuffer *methQName)
{
	servQName.clear();
	if (!Utils::strcasecmp(servname, "WsDFUXRef"))
	{
		servQName.append("WsDFUXRef");
		return qualifyMethodName(context, methname, methQName);
	}
	return qualifySubServiceName(context, servname, methname, servQName, methQName);
}

int CWsDFUXRefSoapBinding::onGetFile(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	StringBuffer mimetype;
	MemoryBuffer content;

	StringBuffer filepath;
	getBaseFilePath(filepath);
	if (strchr("\\/", filepath.charAt(filepath.length()-1))==NULL)
		filepath.append("/");
	filepath.append(pathex);
	response->httpContentFromFile(filepath.str());
	response->send();
	return 0;
}

int CWsDFUXRefSoapBinding::onGetForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if (!stricmp("DFUXRefArrayAction", method)) {
		CDFUXRefArrayActionRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefArrayActionResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefBuild", method)) {
		CDFUXRefBuildRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefBuildResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefBuildCancel", method)) {
		CDFUXRefBuildCancelRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefBuildCancelResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefCleanDirectories", method)) {
		CDFUXRefCleanDirectoriesRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefCleanDirectoriesResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefDirectories", method)) {
		CDFUXRefDirectoriesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefDirectoriesQueryResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefFoundFiles", method)) {
		CDFUXRefFoundFilesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefFoundFilesQueryResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefList", method)) {
		CDFUXRefListRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefListResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefLostFiles", method)) {
		CDFUXRefLostFilesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefLostFilesQueryResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefMessages", method)) {
		CDFUXRefMessagesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefMessagesQueryResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefOrphanFiles", method)) {
		CDFUXRefOrphanFilesQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefOrphanFilesQueryResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DFUXRefUnusedFiles", method)) {
		CDFUXRefUnusedFilesRequest::getMapInfo(context.queryMapInfo());
		CDFUXRefUnusedFilesResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("Ping", method)) {
		CWsDFUXRefPingRequest::getMapInfo(context.queryMapInfo());
		CWsDFUXRefPingResponse::getMapInfo(context.queryMapInfo());
	}

	return EspHttpBinding::onGetForm(context, request, response, service, method);
}
int CWsDFUXRefSoapBinding::onGetXForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	return EspHttpBinding::onGetXForm(context, request, response, service, method);
}

int CWsDFUXRefSoapBinding::onGetService(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	return onGetQuery(context, request, response, service, method);
}

 IRpcRequestBinding *CWsDFUXRefSoapBinding::createReqBinding(IEspContext &context, IHttpMessage *ireq, const char *service, const char *method)
{
	CHttpRequest *request=static_cast<CHttpRequest*>(ireq);
	IProperties *props = (request) ? request->queryParameters() : NULL;

	if (!stricmp(method, "DFUXRefArrayAction") || !stricmp(method, "DFUXRefArrayActionRequest"))
		return new CDFUXRefArrayActionRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefBuild") || !stricmp(method, "DFUXRefBuildRequest"))
		return new CDFUXRefBuildRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefBuildCancel") || !stricmp(method, "DFUXRefBuildCancelRequest"))
		return new CDFUXRefBuildCancelRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefCleanDirectories") || !stricmp(method, "DFUXRefCleanDirectoriesRequest"))
		return new CDFUXRefCleanDirectoriesRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefDirectories") || !stricmp(method, "DFUXRefDirectoriesQueryRequest"))
		return new CDFUXRefDirectoriesQueryRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefFoundFiles") || !stricmp(method, "DFUXRefFoundFilesQueryRequest"))
		return new CDFUXRefFoundFilesQueryRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefList") || !stricmp(method, "DFUXRefListRequest"))
		return new CDFUXRefListRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefLostFiles") || !stricmp(method, "DFUXRefLostFilesQueryRequest"))
		return new CDFUXRefLostFilesQueryRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefMessages") || !stricmp(method, "DFUXRefMessagesQueryRequest"))
		return new CDFUXRefMessagesQueryRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefOrphanFiles") || !stricmp(method, "DFUXRefOrphanFilesQueryRequest"))
		return new CDFUXRefOrphanFilesQueryRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "DFUXRefUnusedFiles") || !stricmp(method, "DFUXRefUnusedFilesRequest"))
		return new CDFUXRefUnusedFilesRequest(&context, "WsDFUXRef", props, NULL);
	if (!stricmp(method, "Ping") || !stricmp(method, "WsDFUXRefPingRequest"))
		return new CWsDFUXRefPingRequest(&context, "WsDFUXRef", props, NULL);
	return NULL;
}

int CWsDFUXRefSoapBinding::onGetInstantQuery(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if(request == NULL || response == NULL)
		return -1;
	StringBuffer respStr;
	Owned<IEspWsDFUXRef> iserv = (IEspWsDFUXRef*)getService();
	if(iserv == NULL)
	{
		respStr.append("Service not available");
		response->setContent(respStr.str());
		response->setContentType("text/html");
		response->send();
	}
	else
	{
		Owned<CSoapResponseBinding> esp_response;
		StringBuffer source;
		IEspContext& context = *request->queryContext();
		if(!stricmp(method, "DFUXRefArrayAction")||!stricmp(method, "DFUXRefArrayActionRequest"))
		{
			Owned<CDFUXRefArrayActionRequest> esp_request = new CDFUXRefArrayActionRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefArrayActionResponse> esp_response = new CDFUXRefArrayActionResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefArrayAction(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefArrayAction", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/action.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefBuild")||!stricmp(method, "DFUXRefBuildRequest"))
		{
			Owned<CDFUXRefBuildRequest> esp_request = new CDFUXRefBuildRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefBuildResponse> esp_response = new CDFUXRefBuildResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefBuild(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefBuild", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/action.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefBuildCancel")||!stricmp(method, "DFUXRefBuildCancelRequest"))
		{
			Owned<CDFUXRefBuildCancelRequest> esp_request = new CDFUXRefBuildCancelRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefBuildCancelResponse> esp_response = new CDFUXRefBuildCancelResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefBuildCancel(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefBuildCancel", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/action.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefCleanDirectories")||!stricmp(method, "DFUXRefCleanDirectoriesRequest"))
		{
			Owned<CDFUXRefCleanDirectoriesRequest> esp_request = new CDFUXRefCleanDirectoriesRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUXRefCleanDirectoriesResponse* resp = new CDFUXRefCleanDirectoriesResponse("WsDFUXRef");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefCleanDirectories");
				iserv->onDFUXRefCleanDirectories(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefCleanDirectories", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUXRefDirectories")||!stricmp(method, "DFUXRefDirectoriesQueryRequest"))
		{
			Owned<CDFUXRefDirectoriesQueryRequest> esp_request = new CDFUXRefDirectoriesQueryRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefDirectoriesQueryResponse> esp_response = new CDFUXRefDirectoriesQueryResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefDirectories(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefDirectories", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/xref_directories.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefFoundFiles")||!stricmp(method, "DFUXRefFoundFilesQueryRequest"))
		{
			Owned<CDFUXRefFoundFilesQueryRequest> esp_request = new CDFUXRefFoundFilesQueryRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefFoundFilesQueryResponse> esp_response = new CDFUXRefFoundFilesQueryResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefFoundFiles(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefFoundFiles", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/xref_found.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefList")||!stricmp(method, "DFUXRefListRequest"))
		{
			Owned<CDFUXRefListRequest> esp_request = new CDFUXRefListRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefListResponse> esp_response = new CDFUXRefListResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefList(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefList", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/xref_main.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefLostFiles")||!stricmp(method, "DFUXRefLostFilesQueryRequest"))
		{
			Owned<CDFUXRefLostFilesQueryRequest> esp_request = new CDFUXRefLostFilesQueryRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefLostFilesQueryResponse> esp_response = new CDFUXRefLostFilesQueryResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefLostFiles(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefLostFiles", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/xref_lost.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefMessages")||!stricmp(method, "DFUXRefMessagesQueryRequest"))
		{
			Owned<CDFUXRefMessagesQueryRequest> esp_request = new CDFUXRefMessagesQueryRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefMessagesQueryResponse> esp_response = new CDFUXRefMessagesQueryResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefMessages(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefMessages", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/xref_errwarn.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefOrphanFiles")||!stricmp(method, "DFUXRefOrphanFilesQueryRequest"))
		{
			Owned<CDFUXRefOrphanFilesQueryRequest> esp_request = new CDFUXRefOrphanFilesQueryRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUXRefOrphanFilesQueryResponse> esp_response = new CDFUXRefOrphanFilesQueryResponse("WsDFUXRef");
			StringBuffer source;
			source.appendf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUXRefOrphanFiles(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefOrphanFiles", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/xref_orphan.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUXRefUnusedFiles")||!stricmp(method, "DFUXRefUnusedFilesRequest"))
		{
			Owned<CDFUXRefUnusedFilesRequest> esp_request = new CDFUXRefUnusedFilesRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUXRefUnusedFilesResponse* resp = new CDFUXRefUnusedFilesResponse("WsDFUXRef");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuXrefAccess", SecAccess_Access);
			source.setf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "DFUXRefUnusedFiles");
				iserv->onDFUXRefUnusedFiles(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "DFUXRefUnusedFiles", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "Ping")||!stricmp(method, "WsDFUXRefPingRequest"))
		{
			Owned<CWsDFUXRefPingRequest> esp_request = new CWsDFUXRefPingRequest(&context, "WsDFUXRef", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWsDFUXRefPingResponse* resp = new CWsDFUXRefPingResponse("WsDFUXRef");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDFUXRef::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDFUXRef", "Ping");
				iserv->onPing(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDFUXRef", "Ping", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}

		if (esp_response.get())
		{
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
				response->redirect(*request, esp_response->getRedirectUrl());
			else
			{
				MemoryBuffer content;
				StringBuffer mimetype;
				esp_response->appendContent(&context,content, mimetype);
				onBeforeSendResponse(context,request,content,service,method);
				response->setContent(content.length(), content.toByteArray());
				response->setContentType(mimetype.str());
				response->send();
			}
			return 0;
		}
	}
	return onGetNotFound(context, request,  response, service);
}





//=======================================================
// client util methods
//=======================================================

//------ method DFUXRefArrayAction ---------

IClientDFUXRefArrayActionRequest * CClientWsDFUXRef::createDFUXRefArrayActionRequest()
{
	CDFUXRefArrayActionRequest* request = new CDFUXRefArrayActionRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefArrayActionResponse * CClientWsDFUXRef::DFUXRefArrayAction(IClientDFUXRefArrayActionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefArrayActionRequest* esprequest = static_cast<CDFUXRefArrayActionRequest*>(request);
	CDFUXRefArrayActionResponse* espresponse = new CDFUXRefArrayActionResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefArrayAction(IClientDFUXRefArrayActionRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefArrayActionRequest* esprequest = static_cast<CDFUXRefArrayActionRequest*>(request);
	esprequest->setMethod("DFUXRefArrayAction");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefArrayActionResponse *CClientWsDFUXRef::DFUXRefArrayActionFn(const char * Type_, const char * Cluster_, const char * Action_, StringArray &XRefFiles_)
{
	Owned<IClientDFUXRefArrayActionRequest> req =  createDFUXRefArrayActionRequest();
	req->setType(Type_);
	req->setCluster(Cluster_);
	req->setAction(Action_);
	req->setXRefFiles(XRefFiles_);
	return DFUXRefArrayAction(req.get());
}

//------ method DFUXRefBuild ---------

IClientDFUXRefBuildRequest * CClientWsDFUXRef::createDFUXRefBuildRequest()
{
	CDFUXRefBuildRequest* request = new CDFUXRefBuildRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefBuildResponse * CClientWsDFUXRef::DFUXRefBuild(IClientDFUXRefBuildRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefBuildRequest* esprequest = static_cast<CDFUXRefBuildRequest*>(request);
	CDFUXRefBuildResponse* espresponse = new CDFUXRefBuildResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefBuild(IClientDFUXRefBuildRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefBuildRequest* esprequest = static_cast<CDFUXRefBuildRequest*>(request);
	esprequest->setMethod("DFUXRefBuild");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefBuildResponse *CClientWsDFUXRef::DFUXRefBuildFn(const char * Cluster_)
{
	Owned<IClientDFUXRefBuildRequest> req =  createDFUXRefBuildRequest();
	req->setCluster(Cluster_);
	return DFUXRefBuild(req.get());
}

//------ method DFUXRefBuildCancel ---------

IClientDFUXRefBuildCancelRequest * CClientWsDFUXRef::createDFUXRefBuildCancelRequest()
{
	CDFUXRefBuildCancelRequest* request = new CDFUXRefBuildCancelRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefBuildCancelResponse * CClientWsDFUXRef::DFUXRefBuildCancel(IClientDFUXRefBuildCancelRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefBuildCancelRequest* esprequest = static_cast<CDFUXRefBuildCancelRequest*>(request);
	CDFUXRefBuildCancelResponse* espresponse = new CDFUXRefBuildCancelResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefBuildCancel(IClientDFUXRefBuildCancelRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefBuildCancelRequest* esprequest = static_cast<CDFUXRefBuildCancelRequest*>(request);
	esprequest->setMethod("DFUXRefBuildCancel");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefBuildCancelResponse *CClientWsDFUXRef::DFUXRefBuildCancelFn()
{
	Owned<IClientDFUXRefBuildCancelRequest> req =  createDFUXRefBuildCancelRequest();
	return DFUXRefBuildCancel(req.get());
}

//------ method DFUXRefCleanDirectories ---------

IClientDFUXRefCleanDirectoriesRequest * CClientWsDFUXRef::createDFUXRefCleanDirectoriesRequest()
{
	CDFUXRefCleanDirectoriesRequest* request = new CDFUXRefCleanDirectoriesRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefCleanDirectoriesResponse * CClientWsDFUXRef::DFUXRefCleanDirectories(IClientDFUXRefCleanDirectoriesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefCleanDirectoriesRequest* esprequest = static_cast<CDFUXRefCleanDirectoriesRequest*>(request);
	CDFUXRefCleanDirectoriesResponse* espresponse = new CDFUXRefCleanDirectoriesResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefCleanDirectories(IClientDFUXRefCleanDirectoriesRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefCleanDirectoriesRequest* esprequest = static_cast<CDFUXRefCleanDirectoriesRequest*>(request);
	esprequest->setMethod("DFUXRefCleanDirectories");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefCleanDirectoriesResponse *CClientWsDFUXRef::DFUXRefCleanDirectoriesFn(const char * Cluster_)
{
	Owned<IClientDFUXRefCleanDirectoriesRequest> req =  createDFUXRefCleanDirectoriesRequest();
	req->setCluster(Cluster_);
	return DFUXRefCleanDirectories(req.get());
}

//------ method DFUXRefDirectories ---------

IClientDFUXRefDirectoriesQueryRequest * CClientWsDFUXRef::createDFUXRefDirectoriesRequest()
{
	CDFUXRefDirectoriesQueryRequest* request = new CDFUXRefDirectoriesQueryRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefDirectoriesQueryResponse * CClientWsDFUXRef::DFUXRefDirectories(IClientDFUXRefDirectoriesQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefDirectoriesQueryRequest* esprequest = static_cast<CDFUXRefDirectoriesQueryRequest*>(request);
	CDFUXRefDirectoriesQueryResponse* espresponse = new CDFUXRefDirectoriesQueryResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefDirectories(IClientDFUXRefDirectoriesQueryRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefDirectoriesQueryRequest* esprequest = static_cast<CDFUXRefDirectoriesQueryRequest*>(request);
	esprequest->setMethod("DFUXRefDirectories");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefDirectoriesQueryResponse *CClientWsDFUXRef::DFUXRefDirectoriesFn(const char * Cluster_)
{
	Owned<IClientDFUXRefDirectoriesQueryRequest> req =  createDFUXRefDirectoriesRequest();
	req->setCluster(Cluster_);
	return DFUXRefDirectories(req.get());
}

//------ method DFUXRefFoundFiles ---------

IClientDFUXRefFoundFilesQueryRequest * CClientWsDFUXRef::createDFUXRefFoundFilesRequest()
{
	CDFUXRefFoundFilesQueryRequest* request = new CDFUXRefFoundFilesQueryRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefFoundFilesQueryResponse * CClientWsDFUXRef::DFUXRefFoundFiles(IClientDFUXRefFoundFilesQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefFoundFilesQueryRequest* esprequest = static_cast<CDFUXRefFoundFilesQueryRequest*>(request);
	CDFUXRefFoundFilesQueryResponse* espresponse = new CDFUXRefFoundFilesQueryResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefFoundFiles(IClientDFUXRefFoundFilesQueryRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefFoundFilesQueryRequest* esprequest = static_cast<CDFUXRefFoundFilesQueryRequest*>(request);
	esprequest->setMethod("DFUXRefFoundFiles");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefFoundFilesQueryResponse *CClientWsDFUXRef::DFUXRefFoundFilesFn(const char * Cluster_)
{
	Owned<IClientDFUXRefFoundFilesQueryRequest> req =  createDFUXRefFoundFilesRequest();
	req->setCluster(Cluster_);
	return DFUXRefFoundFiles(req.get());
}

//------ method DFUXRefList ---------

IClientDFUXRefListRequest * CClientWsDFUXRef::createDFUXRefListRequest()
{
	CDFUXRefListRequest* request = new CDFUXRefListRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefListResponse * CClientWsDFUXRef::DFUXRefList(IClientDFUXRefListRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefListRequest* esprequest = static_cast<CDFUXRefListRequest*>(request);
	CDFUXRefListResponse* espresponse = new CDFUXRefListResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefList(IClientDFUXRefListRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefListRequest* esprequest = static_cast<CDFUXRefListRequest*>(request);
	esprequest->setMethod("DFUXRefList");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefListResponse *CClientWsDFUXRef::DFUXRefListFn()
{
	Owned<IClientDFUXRefListRequest> req =  createDFUXRefListRequest();
	return DFUXRefList(req.get());
}

//------ method DFUXRefLostFiles ---------

IClientDFUXRefLostFilesQueryRequest * CClientWsDFUXRef::createDFUXRefLostFilesRequest()
{
	CDFUXRefLostFilesQueryRequest* request = new CDFUXRefLostFilesQueryRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefLostFilesQueryResponse * CClientWsDFUXRef::DFUXRefLostFiles(IClientDFUXRefLostFilesQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefLostFilesQueryRequest* esprequest = static_cast<CDFUXRefLostFilesQueryRequest*>(request);
	CDFUXRefLostFilesQueryResponse* espresponse = new CDFUXRefLostFilesQueryResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefLostFiles(IClientDFUXRefLostFilesQueryRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefLostFilesQueryRequest* esprequest = static_cast<CDFUXRefLostFilesQueryRequest*>(request);
	esprequest->setMethod("DFUXRefLostFiles");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefLostFilesQueryResponse *CClientWsDFUXRef::DFUXRefLostFilesFn(const char * Cluster_)
{
	Owned<IClientDFUXRefLostFilesQueryRequest> req =  createDFUXRefLostFilesRequest();
	req->setCluster(Cluster_);
	return DFUXRefLostFiles(req.get());
}

//------ method DFUXRefMessages ---------

IClientDFUXRefMessagesQueryRequest * CClientWsDFUXRef::createDFUXRefMessagesRequest()
{
	CDFUXRefMessagesQueryRequest* request = new CDFUXRefMessagesQueryRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefMessagesQueryResponse * CClientWsDFUXRef::DFUXRefMessages(IClientDFUXRefMessagesQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefMessagesQueryRequest* esprequest = static_cast<CDFUXRefMessagesQueryRequest*>(request);
	CDFUXRefMessagesQueryResponse* espresponse = new CDFUXRefMessagesQueryResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefMessages(IClientDFUXRefMessagesQueryRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefMessagesQueryRequest* esprequest = static_cast<CDFUXRefMessagesQueryRequest*>(request);
	esprequest->setMethod("DFUXRefMessages");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefMessagesQueryResponse *CClientWsDFUXRef::DFUXRefMessagesFn(const char * Cluster_)
{
	Owned<IClientDFUXRefMessagesQueryRequest> req =  createDFUXRefMessagesRequest();
	req->setCluster(Cluster_);
	return DFUXRefMessages(req.get());
}

//------ method DFUXRefOrphanFiles ---------

IClientDFUXRefOrphanFilesQueryRequest * CClientWsDFUXRef::createDFUXRefOrphanFilesRequest()
{
	CDFUXRefOrphanFilesQueryRequest* request = new CDFUXRefOrphanFilesQueryRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefOrphanFilesQueryResponse * CClientWsDFUXRef::DFUXRefOrphanFiles(IClientDFUXRefOrphanFilesQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefOrphanFilesQueryRequest* esprequest = static_cast<CDFUXRefOrphanFilesQueryRequest*>(request);
	CDFUXRefOrphanFilesQueryResponse* espresponse = new CDFUXRefOrphanFilesQueryResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefOrphanFiles(IClientDFUXRefOrphanFilesQueryRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefOrphanFilesQueryRequest* esprequest = static_cast<CDFUXRefOrphanFilesQueryRequest*>(request);
	esprequest->setMethod("DFUXRefOrphanFiles");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefOrphanFilesQueryResponse *CClientWsDFUXRef::DFUXRefOrphanFilesFn(const char * Cluster_)
{
	Owned<IClientDFUXRefOrphanFilesQueryRequest> req =  createDFUXRefOrphanFilesRequest();
	req->setCluster(Cluster_);
	return DFUXRefOrphanFiles(req.get());
}

//------ method DFUXRefUnusedFiles ---------

IClientDFUXRefUnusedFilesRequest * CClientWsDFUXRef::createDFUXRefUnusedFilesRequest()
{
	CDFUXRefUnusedFilesRequest* request = new CDFUXRefUnusedFilesRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUXRefUnusedFilesResponse * CClientWsDFUXRef::DFUXRefUnusedFiles(IClientDFUXRefUnusedFilesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefUnusedFilesRequest* esprequest = static_cast<CDFUXRefUnusedFilesRequest*>(request);
	CDFUXRefUnusedFilesResponse* espresponse = new CDFUXRefUnusedFilesResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_DFUXRefUnusedFiles(IClientDFUXRefUnusedFilesRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUXRefUnusedFilesRequest* esprequest = static_cast<CDFUXRefUnusedFilesRequest*>(request);
	esprequest->setMethod("DFUXRefUnusedFiles");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUXRefUnusedFilesResponse *CClientWsDFUXRef::DFUXRefUnusedFilesFn(const char * ProcessCluster_, bool CheckPackageMaps_)
{
	Owned<IClientDFUXRefUnusedFilesRequest> req =  createDFUXRefUnusedFilesRequest();
	req->setProcessCluster(ProcessCluster_);
	req->setCheckPackageMaps(CheckPackageMaps_);
	return DFUXRefUnusedFiles(req.get());
}

//------ method Ping ---------

IClientWsDFUXRefPingRequest * CClientWsDFUXRef::createPingRequest()
{
	CWsDFUXRefPingRequest* request = new CWsDFUXRefPingRequest("WsDFUXRef");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientWsDFUXRefPingResponse * CClientWsDFUXRef::Ping(IClientWsDFUXRefPingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsDFUXRefPingRequest* esprequest = static_cast<CWsDFUXRefPingRequest*>(request);
	CWsDFUXRefPingResponse* espresponse = new CWsDFUXRefPingResponse("WsDFUXRef");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDFUXRef::async_Ping(IClientWsDFUXRefPingRequest *request, IClientWsDFUXRefEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsDFUXRefPingRequest* esprequest = static_cast<CWsDFUXRefPingRequest*>(request);
	esprequest->setMethod("Ping");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDFUXRef::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWsDFUXRefPingResponse *CClientWsDFUXRef::PingFn()
{
	Owned<IClientWsDFUXRefPingRequest> req =  createPingRequest();
	return Ping(req.get());
}

int CClientWsDFUXRef::transferThunkEvent(void *data)
{
	IRpcResponseBinding *response = (IRpcResponseBinding *)data;
	if (response!=NULL)
	{
		IClientWsDFUXRefEvents *eventSink = (IClientWsDFUXRefEvents *)response->getEventSink();
		response->lock();

		if (stricmp(response->getMethod(), "DFUXRefArrayAction")==0)
		{
			IClientDFUXRefArrayActionResponse* icresp = dynamic_cast<IClientDFUXRefArrayActionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefArrayActionComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefArrayActionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefBuild")==0)
		{
			IClientDFUXRefBuildResponse* icresp = dynamic_cast<IClientDFUXRefBuildResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefBuildComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefBuildError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefBuildCancel")==0)
		{
			IClientDFUXRefBuildCancelResponse* icresp = dynamic_cast<IClientDFUXRefBuildCancelResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefBuildCancelComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefBuildCancelError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefCleanDirectories")==0)
		{
			IClientDFUXRefCleanDirectoriesResponse* icresp = dynamic_cast<IClientDFUXRefCleanDirectoriesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefCleanDirectoriesComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefCleanDirectoriesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefDirectories")==0)
		{
			IClientDFUXRefDirectoriesQueryResponse* icresp = dynamic_cast<IClientDFUXRefDirectoriesQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefDirectoriesComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefDirectoriesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefFoundFiles")==0)
		{
			IClientDFUXRefFoundFilesQueryResponse* icresp = dynamic_cast<IClientDFUXRefFoundFilesQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefFoundFilesComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefFoundFilesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefList")==0)
		{
			IClientDFUXRefListResponse* icresp = dynamic_cast<IClientDFUXRefListResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefListComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefListError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefLostFiles")==0)
		{
			IClientDFUXRefLostFilesQueryResponse* icresp = dynamic_cast<IClientDFUXRefLostFilesQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefLostFilesComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefLostFilesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefMessages")==0)
		{
			IClientDFUXRefMessagesQueryResponse* icresp = dynamic_cast<IClientDFUXRefMessagesQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefMessagesComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefMessagesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefOrphanFiles")==0)
		{
			IClientDFUXRefOrphanFilesQueryResponse* icresp = dynamic_cast<IClientDFUXRefOrphanFilesQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefOrphanFilesComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefOrphanFilesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUXRefUnusedFiles")==0)
		{
			IClientDFUXRefUnusedFilesResponse* icresp = dynamic_cast<IClientDFUXRefUnusedFilesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUXRefUnusedFilesComplete(icresp, response->queryState());
				else
					eventSink->onDFUXRefUnusedFilesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "Ping")==0)
		{
			IClientWsDFUXRefPingResponse* icresp = dynamic_cast<IClientWsDFUXRefPingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onPingComplete(icresp, response->queryState());
				else
					eventSink->onPingError(icresp,response->queryState());
			}
		}
		response->unlock();
	}
	return 0;
}

static IRpcResponseBinding* createWsDFUXRefResponseObject(IRpcRequestBinding *request)
{
	const char* method = request->getMethod();
	if (stricmp(method, "DFUXRefArrayAction")==0)
		return new CDFUXRefArrayActionResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefBuild")==0)
		return new CDFUXRefBuildResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefBuildCancel")==0)
		return new CDFUXRefBuildCancelResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefCleanDirectories")==0)
		return new CDFUXRefCleanDirectoriesResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefDirectories")==0)
		return new CDFUXRefDirectoriesQueryResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefFoundFiles")==0)
		return new CDFUXRefFoundFilesQueryResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefList")==0)
		return new CDFUXRefListResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefLostFiles")==0)
		return new CDFUXRefLostFilesQueryResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefMessages")==0)
		return new CDFUXRefMessagesQueryResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefOrphanFiles")==0)
		return new CDFUXRefOrphanFilesQueryResponse("WsDFUXRef", request);
	if (stricmp(method, "DFUXRefUnusedFiles")==0)
		return new CDFUXRefUnusedFilesResponse("WsDFUXRef", request);
	if (stricmp(method, "Ping")==0)
		return new CWsDFUXRefPingResponse("WsDFUXRef", request);
	return NULL;
}

#ifdef _WIN32
void CClientWsDFUXRef::espWorkerThread(void* data)
#else
void *CClientWsDFUXRef::espWorkerThread(void *data)
#endif
{
	IRpcRequestBinding *request = (IRpcRequestBinding *) data;

	if (request != NULL)
	{
		request->lock();
		IRpcResponseBinding *response=createWsDFUXRefResponseObject(request);
		if (response!=NULL)
		{
			try{
				request->post(*response);
			}
			catch(IException* ex){
				StringBuffer errorStr;
				ex->errorMessage(errorStr);
				ERRLOG("CClientWsDFUXRef::espWorkerThread(%s)--Exception caught while posting async request: %s", request->getMethod(), errorStr.str());
				ex->Release();
			}
			catch(...){
				ERRLOG("Unknown exception caught while posting async request");
			}
		}
#ifdef USE_CLIENT_THREAD
		ThunkToClientThread(request->getThunkHandle(), transferThunkEvent, (void *)response);
#else
		transferThunkEvent((void *)response);
#endif
		request->unlock();
		if(request->queryState()!=NULL)
			request->queryState()->Release();

		if(response!=NULL)
			response->Release();

		request->Release();
	}
#if defined(_WIN32)
#else
	return (void *) 0 ;
#endif
}



extern "C" IClientWsDFUXRef * createWsDFUXRefClient() {  return new CClientWsDFUXRef(); }


#endif //ws_dfuXref_ESPGEN_INCLUDED
