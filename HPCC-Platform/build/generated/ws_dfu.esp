// *** Source file generated by HIDL Version 1.3 from ws_dfu.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_dfu_ESPGEN_INCLUDED
#define ws_dfu_ESPGEN_INCLUDED

#include "ws_dfu_esp.ipp"

#ifdef _WIN32
#include "edwin.h"
#include <process.h>
#endif



//=======================================================
// class CSpaceItem Implementation
//=======================================================

CSpaceItem::CSpaceItem(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_LargestFile(nilIgnore),m_SmallestFile(nilIgnore),m_NumOfFilesInt(nilIgnore),m_NumOfFilesIntUnknown(nilIgnore),m_TotalSizeInt(nilIgnore),m_LargestSizeInt(nilIgnore),m_SmallestSizeInt(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SpaceItem");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSpaceItem::CSpaceItem(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_LargestFile(nilIgnore),m_SmallestFile(nilIgnore),m_NumOfFilesInt(nilIgnore),m_NumOfFilesIntUnknown(nilIgnore),m_TotalSizeInt(nilIgnore),m_LargestSizeInt(nilIgnore),m_SmallestSizeInt(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SpaceItem");
}

StringBuffer &CSpaceItem::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LargestFile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SmallestFile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumOfFilesInt\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumOfFilesIntUnknown\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TotalSizeInt\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LargestSizeInt\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SmallestSizeInt\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CSpaceItem::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSpaceItem::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSpaceItem::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LargestFile");
	form.appendf("  <tr><td><b>LargestFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SmallestFile");
	form.appendf("  <tr><td><b>SmallestFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NumOfFilesInt");
	form.appendf("  <tr><td><b>NumOfFilesInt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NumOfFilesIntUnknown");
	form.appendf("  <tr><td><b>NumOfFilesIntUnknown: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TotalSizeInt");
	form.appendf("  <tr><td><b>TotalSizeInt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LargestSizeInt");
	form.appendf("  <tr><td><b>LargestSizeInt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SmallestSizeInt");
	form.appendf("  <tr><td><b>SmallestSizeInt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSpaceItem::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSpaceItem::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_LargestFile.marshall(rpc_resp, "LargestFile", "", "", "");
	m_SmallestFile.marshall(rpc_resp, "SmallestFile", "", "", "");
	m_NumOfFilesInt.marshall(rpc_resp, "NumOfFilesInt", "", "", "");
	m_NumOfFilesIntUnknown.marshall(rpc_resp, "NumOfFilesIntUnknown", "", "", "");
	m_TotalSizeInt.marshall(rpc_resp, "TotalSizeInt", "", "", "");
	m_LargestSizeInt.marshall(rpc_resp, "LargestSizeInt", "", "", "");
	m_SmallestSizeInt.marshall(rpc_resp, "SmallestSizeInt", "", "", "");
}


void CSpaceItem::copy(CSpaceItem &from)
{
	m_Name.copy(from.m_Name);
	m_LargestFile.copy(from.m_LargestFile);
	m_SmallestFile.copy(from.m_SmallestFile);
	m_NumOfFilesInt.copy(from.m_NumOfFilesInt);
	m_NumOfFilesIntUnknown.copy(from.m_NumOfFilesIntUnknown);
	m_TotalSizeInt.copy(from.m_TotalSizeInt);
	m_LargestSizeInt.copy(from.m_LargestSizeInt);
	m_SmallestSizeInt.copy(from.m_SmallestSizeInt);
}


void CSpaceItem::copy(IConstSpaceItem &ifrom)
{
	setName(ifrom.getName());
	setLargestFile(ifrom.getLargestFile());
	setSmallestFile(ifrom.getSmallestFile());
	setNumOfFilesInt(ifrom.getNumOfFilesInt());
	setNumOfFilesIntUnknown(ifrom.getNumOfFilesIntUnknown());
	setTotalSizeInt(ifrom.getTotalSizeInt());
	setLargestSizeInt(ifrom.getLargestSizeInt());
	setSmallestSizeInt(ifrom.getSmallestSizeInt());
}


void CSpaceItem::getAttributes(IProperties &attributes)
{
}


void CSpaceItem::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_LargestFile.toStr(ctx, buffer, "LargestFile", "", true, "", "");
	m_SmallestFile.toStr(ctx, buffer, "SmallestFile", "", true, "", "");
	m_NumOfFilesInt.toStr(ctx, buffer, "NumOfFilesInt", "", true, "", "");
	m_NumOfFilesIntUnknown.toStr(ctx, buffer, "NumOfFilesIntUnknown", "", true, "", "");
	m_TotalSizeInt.toStr(ctx, buffer, "TotalSizeInt", "", true, "", "");
	m_LargestSizeInt.toStr(ctx, buffer, "LargestSizeInt", "", true, "", "");
	m_SmallestSizeInt.toStr(ctx, buffer, "SmallestSizeInt", "", true, "", "");
}


void CSpaceItem::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSpaceItem::serializer(IEspContext* ctx, IConstSpaceItem &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SpaceItem>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field LargestFile
	{
		const char* s = src.getLargestFile();
		if (s && *s)
		{
			buffer.append("<LargestFile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LargestFile>");
		}
	}
	// field SmallestFile
	{
		const char* s = src.getSmallestFile();
		if (s && *s)
		{
			buffer.append("<SmallestFile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SmallestFile>");
		}
	}
	// field NumOfFilesInt
	{
		//*** default kind: TK_INT; type=int64, name=NumOfFilesInt
		buffer.append("<NumOfFilesInt>");
		buffer.append(src.getNumOfFilesInt());
		buffer.append("</NumOfFilesInt>");
	}
	// field NumOfFilesIntUnknown
	{
		//*** default kind: TK_INT; type=int64, name=NumOfFilesIntUnknown
		buffer.append("<NumOfFilesIntUnknown>");
		buffer.append(src.getNumOfFilesIntUnknown());
		buffer.append("</NumOfFilesIntUnknown>");
	}
	// field TotalSizeInt
	{
		//*** default kind: TK_INT; type=int64, name=TotalSizeInt
		buffer.append("<TotalSizeInt>");
		buffer.append(src.getTotalSizeInt());
		buffer.append("</TotalSizeInt>");
	}
	// field LargestSizeInt
	{
		//*** default kind: TK_INT; type=int64, name=LargestSizeInt
		buffer.append("<LargestSizeInt>");
		buffer.append(src.getLargestSizeInt());
		buffer.append("</LargestSizeInt>");
	}
	// field SmallestSizeInt
	{
		//*** default kind: TK_INT; type=int64, name=SmallestSizeInt
		buffer.append("<SmallestSizeInt>");
		buffer.append(src.getSmallestSizeInt());
		buffer.append("</SmallestSizeInt>");
	}
	if (keepRootTag)
		buffer.append("</SpaceItem>");
}

bool CSpaceItem::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_LargestFile.unmarshall(rpc_request, "LargestFile", basepath);
	hasValue |= m_SmallestFile.unmarshall(rpc_request, "SmallestFile", basepath);
	hasValue |= m_NumOfFilesInt.unmarshall(rpc_request, "NumOfFilesInt", basepath);
	hasValue |= m_NumOfFilesIntUnknown.unmarshall(rpc_request, "NumOfFilesIntUnknown", basepath);
	hasValue |= m_TotalSizeInt.unmarshall(rpc_request, "TotalSizeInt", basepath);
	hasValue |= m_LargestSizeInt.unmarshall(rpc_request, "LargestSizeInt", basepath);
	hasValue |= m_SmallestSizeInt.unmarshall(rpc_request, "SmallestSizeInt", basepath);
	return hasValue;
}

bool CSpaceItem::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_LargestFile.unmarshall(ctx, soapval, "LargestFile");
	hasValue |= m_SmallestFile.unmarshall(ctx, soapval, "SmallestFile");
	hasValue |= m_NumOfFilesInt.unmarshall(ctx, soapval, "NumOfFilesInt");
	hasValue |= m_NumOfFilesIntUnknown.unmarshall(ctx, soapval, "NumOfFilesIntUnknown");
	hasValue |= m_TotalSizeInt.unmarshall(ctx, soapval, "TotalSizeInt");
	hasValue |= m_LargestSizeInt.unmarshall(ctx, soapval, "LargestSizeInt");
	hasValue |= m_SmallestSizeInt.unmarshall(ctx, soapval, "SmallestSizeInt");
	return hasValue;
}

bool CSpaceItem::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_LargestFile.unmarshall(ctx, params, attachments, "LargestFile", basepath);
	hasValue |= m_SmallestFile.unmarshall(ctx, params, attachments, "SmallestFile", basepath);
	hasValue |= m_NumOfFilesInt.unmarshall(ctx, params, attachments, "NumOfFilesInt", basepath);
	hasValue |= m_NumOfFilesIntUnknown.unmarshall(ctx, params, attachments, "NumOfFilesIntUnknown", basepath);
	hasValue |= m_TotalSizeInt.unmarshall(ctx, params, attachments, "TotalSizeInt", basepath);
	hasValue |= m_LargestSizeInt.unmarshall(ctx, params, attachments, "LargestSizeInt", basepath);
	hasValue |= m_SmallestSizeInt.unmarshall(ctx, params, attachments, "SmallestSizeInt", basepath);
	return hasValue;
}

const char * CSpaceItem::getName() { return m_Name.query();}
const char * CSpaceItem::getLargestFile() { return m_LargestFile.query();}
const char * CSpaceItem::getSmallestFile() { return m_SmallestFile.query();}
__int64 CSpaceItem::getNumOfFilesInt() { return m_NumOfFilesInt;}
__int64 CSpaceItem::getNumOfFilesIntUnknown() { return m_NumOfFilesIntUnknown;}
__int64 CSpaceItem::getTotalSizeInt() { return m_TotalSizeInt;}
__int64 CSpaceItem::getLargestSizeInt() { return m_LargestSizeInt;}
__int64 CSpaceItem::getSmallestSizeInt() { return m_SmallestSizeInt;}
void CSpaceItem::setName(const char * val){ m_Name.set(val); }
void CSpaceItem::setLargestFile(const char * val){ m_LargestFile.set(val); }
void CSpaceItem::setSmallestFile(const char * val){ m_SmallestFile.set(val); }
void CSpaceItem::setNumOfFilesInt(__int64 val){ m_NumOfFilesInt=val; }
void CSpaceItem::setNumOfFilesIntUnknown(__int64 val){ m_NumOfFilesIntUnknown=val; }
void CSpaceItem::setTotalSizeInt(__int64 val){ m_TotalSizeInt=val; }
void CSpaceItem::setLargestSizeInt(__int64 val){ m_LargestSizeInt=val; }
void CSpaceItem::setSmallestSizeInt(__int64 val){ m_SmallestSizeInt=val; }
extern "C"  IEspSpaceItem *createSpaceItem(const char *serv, const char *msgname){return ((IEspSpaceItem *)new CSpaceItem(serv /*, msgname*/));}
extern "C"  IClientSpaceItem *createClientSpaceItem(const char *serv, const char *msgname){return ((IClientSpaceItem *)new CSpaceItem(serv /*, msgname*/));}

//=======================================================
// class CDFUFilePartition Implementation
//=======================================================

CDFUFilePartition::CDFUFilePartition(const char *serviceName, IRpcMessageBinding *init)
	: m_FieldMask(nilIgnore),m_FieldNames(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePartition");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFilePartition::CDFUFilePartition(const char *serviceName, const char *bc)
	: m_FieldMask(nilIgnore),m_FieldNames(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePartition");
}

StringBuffer &CDFUFilePartition::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FieldMask\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FieldNames\" type=\"tns:EspStringArray\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CDFUFilePartition::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFilePartition::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUFilePartition::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FieldMask");
	form.appendf("  <tr><td><b>FieldMask: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FieldNames");
	form.appendf("<tr><td><b>FieldNames: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFilePartition::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFilePartition::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_FieldMask.marshall(rpc_resp, "FieldMask", "", "", "");
	m_FieldNames.marshall(rpc_resp, "FieldNames", "Item");
}


void CDFUFilePartition::copy(CDFUFilePartition &from)
{
	m_FieldMask.copy(from.m_FieldMask);
	m_FieldNames.copy(from.m_FieldNames);
}


void CDFUFilePartition::copy(IConstDFUFilePartition &ifrom)
{
	setFieldMask(ifrom.getFieldMask());
	setFieldNames(ifrom.getFieldNames());
}


void CDFUFilePartition::getAttributes(IProperties &attributes)
{
}


void CDFUFilePartition::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_FieldMask.toStr(ctx, buffer, "FieldMask", "", true, "", "");
	m_FieldNames.toStr(ctx, buffer, "FieldNames", "Item");
}


void CDFUFilePartition::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFilePartition::serializer(IEspContext* ctx, IConstDFUFilePartition &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFilePartition>");
	// field FieldMask
	{
		//*** default kind: TK_INT; type=int64, name=FieldMask
		buffer.append("<FieldMask>");
		buffer.append(src.getFieldMask());
		buffer.append("</FieldMask>");
	}
	// field FieldNames
	{
		StringArray& v = src.getFieldNames();
		if (v.length()>0)
			buffer.append("<FieldNames>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</FieldNames>");
	}
	if (keepRootTag)
		buffer.append("</DFUFilePartition>");
}

bool CDFUFilePartition::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_FieldMask.unmarshall(rpc_request, "FieldMask", basepath);
	hasValue |= m_FieldNames.unmarshall(rpc_request, "FieldNames", basepath);
	return hasValue;
}

bool CDFUFilePartition::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FieldMask.unmarshall(ctx, soapval, "FieldMask");
	hasValue |= m_FieldNames.unmarshall(ctx, soapval, "FieldNames");
	return hasValue;
}

bool CDFUFilePartition::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FieldMask.unmarshall(ctx, params, attachments, "FieldMask", basepath);
	hasValue |= m_FieldNames.unmarshall(ctx, params, attachments, "FieldNames", basepath);
	return hasValue;
}

__int64 CDFUFilePartition::getFieldMask() { return m_FieldMask;}
StringArray & CDFUFilePartition::getFieldNames() { return (StringArray &) m_FieldNames; }
void CDFUFilePartition::setFieldMask(__int64 val){ m_FieldMask=val; }
void CDFUFilePartition::setFieldNames(StringArray &val){ m_FieldNames->kill();  CloneArray(m_FieldNames.getValue(), val); }
extern "C"  IEspDFUFilePartition *createDFUFilePartition(const char *serv, const char *msgname){return ((IEspDFUFilePartition *)new CDFUFilePartition(serv /*, msgname*/));}
extern "C"  IClientDFUFilePartition *createClientDFUFilePartition(const char *serv, const char *msgname){return ((IClientDFUFilePartition *)new CDFUFilePartition(serv /*, msgname*/));}

//=======================================================
// class CDFUFileBloom Implementation
//=======================================================

CDFUFileBloom::CDFUFileBloom(const char *serviceName, IRpcMessageBinding *init)
	: m_FieldMask(nilIgnore),m_FieldNames(nilIgnore),m_Limit(nilIgnore),m_Probability(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileBloom");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileBloom::CDFUFileBloom(const char *serviceName, const char *bc)
	: m_FieldMask(nilIgnore),m_FieldNames(nilIgnore),m_Limit(nilIgnore),m_Probability(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileBloom");
}

StringBuffer &CDFUFileBloom::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FieldMask\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FieldNames\" type=\"tns:EspStringArray\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Limit\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Probability\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CDFUFileBloom::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileBloom::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUFileBloom::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FieldMask");
	form.appendf("  <tr><td><b>FieldMask: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FieldNames");
	form.appendf("<tr><td><b>FieldNames: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Limit");
	form.appendf("  <tr><td><b>Limit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Probability");
	form.appendf("  <tr><td><b>Probability: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileBloom::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileBloom::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_FieldMask.marshall(rpc_resp, "FieldMask", "", "", "");
	m_FieldNames.marshall(rpc_resp, "FieldNames", "Item");
	m_Limit.marshall(rpc_resp, "Limit", "", "", "");
	m_Probability.marshall(rpc_resp, "Probability", "", "", "");
}


void CDFUFileBloom::copy(CDFUFileBloom &from)
{
	m_FieldMask.copy(from.m_FieldMask);
	m_FieldNames.copy(from.m_FieldNames);
	m_Limit.copy(from.m_Limit);
	m_Probability.copy(from.m_Probability);
}


void CDFUFileBloom::copy(IConstDFUFileBloom &ifrom)
{
	setFieldMask(ifrom.getFieldMask());
	setFieldNames(ifrom.getFieldNames());
	setLimit(ifrom.getLimit());
	setProbability(ifrom.getProbability());
}


void CDFUFileBloom::getAttributes(IProperties &attributes)
{
}


void CDFUFileBloom::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_FieldMask.toStr(ctx, buffer, "FieldMask", "", true, "", "");
	m_FieldNames.toStr(ctx, buffer, "FieldNames", "Item");
	m_Limit.toStr(ctx, buffer, "Limit", "", true, "", "");
	m_Probability.toStr(ctx, buffer, "Probability", "", true, "", "");
}


void CDFUFileBloom::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileBloom::serializer(IEspContext* ctx, IConstDFUFileBloom &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileBloom>");
	// field FieldMask
	{
		//*** default kind: TK_INT; type=int64, name=FieldMask
		buffer.append("<FieldMask>");
		buffer.append(src.getFieldMask());
		buffer.append("</FieldMask>");
	}
	// field FieldNames
	{
		StringArray& v = src.getFieldNames();
		if (v.length()>0)
			buffer.append("<FieldNames>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</FieldNames>");
	}
	// field Limit
	{
		//*** default kind: TK_INT; type=int64, name=Limit
		buffer.append("<Limit>");
		buffer.append(src.getLimit());
		buffer.append("</Limit>");
	}
	// field Probability
	{
		const char* s = src.getProbability();
		if (s && *s)
		{
			buffer.append("<Probability>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Probability>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUFileBloom>");
}

bool CDFUFileBloom::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_FieldMask.unmarshall(rpc_request, "FieldMask", basepath);
	hasValue |= m_FieldNames.unmarshall(rpc_request, "FieldNames", basepath);
	hasValue |= m_Limit.unmarshall(rpc_request, "Limit", basepath);
	hasValue |= m_Probability.unmarshall(rpc_request, "Probability", basepath);
	return hasValue;
}

bool CDFUFileBloom::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FieldMask.unmarshall(ctx, soapval, "FieldMask");
	hasValue |= m_FieldNames.unmarshall(ctx, soapval, "FieldNames");
	hasValue |= m_Limit.unmarshall(ctx, soapval, "Limit");
	hasValue |= m_Probability.unmarshall(ctx, soapval, "Probability");
	return hasValue;
}

bool CDFUFileBloom::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FieldMask.unmarshall(ctx, params, attachments, "FieldMask", basepath);
	hasValue |= m_FieldNames.unmarshall(ctx, params, attachments, "FieldNames", basepath);
	hasValue |= m_Limit.unmarshall(ctx, params, attachments, "Limit", basepath);
	hasValue |= m_Probability.unmarshall(ctx, params, attachments, "Probability", basepath);
	return hasValue;
}

__int64 CDFUFileBloom::getFieldMask() { return m_FieldMask;}
StringArray & CDFUFileBloom::getFieldNames() { return (StringArray &) m_FieldNames; }
__int64 CDFUFileBloom::getLimit() { return m_Limit;}
const char * CDFUFileBloom::getProbability() { return m_Probability.query();}
void CDFUFileBloom::setFieldMask(__int64 val){ m_FieldMask=val; }
void CDFUFileBloom::setFieldNames(StringArray &val){ m_FieldNames->kill();  CloneArray(m_FieldNames.getValue(), val); }
void CDFUFileBloom::setLimit(__int64 val){ m_Limit=val; }
void CDFUFileBloom::setProbability(const char * val){ m_Probability.set(val); }
extern "C"  IEspDFUFileBloom *createDFUFileBloom(const char *serv, const char *msgname){return ((IEspDFUFileBloom *)new CDFUFileBloom(serv /*, msgname*/));}
extern "C"  IClientDFUFileBloom *createClientDFUFileBloom(const char *serv, const char *msgname){return ((IClientDFUFileBloom *)new CDFUFileBloom(serv /*, msgname*/));}

//=======================================================
// class CDFULogicalFile Implementation
//=======================================================

CDFULogicalFile::CDFULogicalFile(const char *serviceName, IRpcMessageBinding *init)
	: m_Prefix(nilIgnore),m_ClusterName(nilIgnore),m_NodeGroup(nilIgnore),m_Directory(nilIgnore),m_Description(nilIgnore),m_Parts(nilIgnore),m_Name(nilIgnore),m_Owner(nilIgnore),m_Totalsize(nilIgnore),m_RecordCount(nilIgnore),m_Modified(nilIgnore),m_LongSize(nilIgnore),m_LongRecordCount(nilIgnore),m_isSuperfile(nilIgnore),m_isZipfile(nilIgnore),m_isDirectory(0, nilIgnore,false),m_Replicate(0, nilIgnore,false),m_IntSize(nilIgnore),m_IntRecordCount(nilIgnore),m_FromRoxieCluster(nilIgnore),m_BrowseData(nilIgnore),m_IsKeyFile(nilIgnore),m_IsCompressed(nilIgnore),m_ContentType(nilIgnore),m_CompressedFileSize(nilIgnore),m_SuperOwners(nilIgnore),m_Persistent(0, nilIgnore,false),m_IsProtected(0, nilIgnore,false),m_KeyType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFULogicalFile");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFULogicalFile::CDFULogicalFile(const char *serviceName, const char *bc)
	: m_Prefix(nilIgnore),m_ClusterName(nilIgnore),m_NodeGroup(nilIgnore),m_Directory(nilIgnore),m_Description(nilIgnore),m_Parts(nilIgnore),m_Name(nilIgnore),m_Owner(nilIgnore),m_Totalsize(nilIgnore),m_RecordCount(nilIgnore),m_Modified(nilIgnore),m_LongSize(nilIgnore),m_LongRecordCount(nilIgnore),m_isSuperfile(nilIgnore),m_isZipfile(nilIgnore),m_isDirectory(0, nilIgnore,false),m_Replicate(0, nilIgnore,false),m_IntSize(nilIgnore),m_IntRecordCount(nilIgnore),m_FromRoxieCluster(nilIgnore),m_BrowseData(nilIgnore),m_IsKeyFile(nilIgnore),m_IsCompressed(nilIgnore),m_ContentType(nilIgnore),m_CompressedFileSize(nilIgnore),m_SuperOwners(nilIgnore),m_Persistent(0, nilIgnore,false),m_IsProtected(0, nilIgnore,false),m_KeyType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFULogicalFile");
}

StringBuffer &CDFULogicalFile::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Prefix\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFULogicalFile","ClusterName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","NodeGroup")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NodeGroup\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Directory\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Parts\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Totalsize\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RecordCount\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Modified\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LongSize\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LongRecordCount\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"isSuperfile\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("DFULogicalFile","isZipfile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"isZipfile\" type=\"xsd:boolean\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"isDirectory\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Replicate\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("DFULogicalFile","IntSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IntSize\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","IntRecordCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IntRecordCount\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","FromRoxieCluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FromRoxieCluster\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","BrowseData")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BrowseData\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","IsKeyFile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsKeyFile\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","IsCompressed")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsCompressed\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","ContentType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ContentType\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","CompressedFileSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CompressedFileSize\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","SuperOwners")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SuperOwners\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","Persistent")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Persistent\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","IsProtected")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IsProtected\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFULogicalFile","KeyType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"KeyType\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFULogicalFile::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFULogicalFile::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("DFULogicalFile","ClusterName",1.26);
	info.addMinVersion("DFULogicalFile","NodeGroup",1.26);
	info.addDeprVersion("DFULogicalFile","isZipfile",1.22);
	info.addMinVersion("DFULogicalFile","IntSize",1.01);
	info.addMinVersion("DFULogicalFile","IntRecordCount",1.01);
	info.addMinVersion("DFULogicalFile","FromRoxieCluster",1.02);
	info.addMinVersion("DFULogicalFile","BrowseData",1.03);
	info.addMinVersion("DFULogicalFile","IsKeyFile",1.14);
	info.addDeprVersion("DFULogicalFile","IsKeyFile",1.24);
	info.addMinVersion("DFULogicalFile","IsCompressed",1.22);
	info.addMinVersion("DFULogicalFile","ContentType",1.24);
	info.addMinVersion("DFULogicalFile","CompressedFileSize",1.22);
	info.addMinVersion("DFULogicalFile","SuperOwners",1.3);
	info.addMinVersion("DFULogicalFile","Persistent",1.3);
	info.addMinVersion("DFULogicalFile","IsProtected",1.34);
	info.addMinVersion("DFULogicalFile","KeyType",1.41);
}

StringBuffer &CDFULogicalFile::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Prefix");
	form.appendf("  <tr><td><b>Prefix: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFULogicalFile","ClusterName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterName");
		form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFULogicalFile","NodeGroup")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NodeGroup");
		form.appendf("  <tr><td><b>NodeGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Directory");
	form.appendf("  <tr><td><b>Directory: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Parts");
	form.appendf("  <tr><td><b>Parts: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Totalsize");
	form.appendf("  <tr><td><b>Totalsize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RecordCount");
	form.appendf("  <tr><td><b>RecordCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Modified");
	form.appendf("  <tr><td><b>Modified: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LongSize");
	form.appendf("  <tr><td><b>LongSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LongRecordCount");
	form.appendf("  <tr><td><b>LongRecordCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("isSuperfile");
	
	form.appendf("  <tr><td><b>isSuperfile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("DFULogicalFile","isZipfile")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("isZipfile");
		
	form.appendf("  <tr><td><b>isZipfile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("isDirectory");
	
	form.appendf("  <tr><td><b>isDirectory? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Replicate");
	
	form.appendf("  <tr><td><b>Replicate? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("DFULogicalFile","IntSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IntSize");
		form.appendf("  <tr><td><b>IntSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFULogicalFile","IntRecordCount")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IntRecordCount");
		form.appendf("  <tr><td><b>IntRecordCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFULogicalFile","FromRoxieCluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FromRoxieCluster");
		
	form.appendf("  <tr><td><b>FromRoxieCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFULogicalFile","BrowseData")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BrowseData");
		
	form.appendf("  <tr><td><b>BrowseData? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFULogicalFile","IsKeyFile")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsKeyFile");
		
	form.appendf("  <tr><td><b>IsKeyFile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFULogicalFile","IsCompressed")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsCompressed");
		
	form.appendf("  <tr><td><b>IsCompressed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFULogicalFile","ContentType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ContentType");
		form.appendf("  <tr><td><b>ContentType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFULogicalFile","CompressedFileSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CompressedFileSize");
		form.appendf("  <tr><td><b>CompressedFileSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFULogicalFile","SuperOwners")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SuperOwners");
		form.appendf("  <tr><td><b>SuperOwners: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFULogicalFile","Persistent")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Persistent");
		
	form.appendf("  <tr><td><b>Persistent? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFULogicalFile","IsProtected")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsProtected");
		
	form.appendf("  <tr><td><b>IsProtected? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFULogicalFile","KeyType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("KeyType");
		form.appendf("  <tr><td><b>KeyType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFULogicalFile::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFULogicalFile::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Prefix.marshall(rpc_resp, "Prefix", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.26))
		m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.26))
		m_NodeGroup.marshall(rpc_resp, "NodeGroup", "", "", "");
	m_Directory.marshall(rpc_resp, "Directory", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
	m_Parts.marshall(rpc_resp, "Parts", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_Totalsize.marshall(rpc_resp, "Totalsize", "", "", "");
	m_RecordCount.marshall(rpc_resp, "RecordCount", "", "", "");
	m_Modified.marshall(rpc_resp, "Modified", "", "", "");
	m_LongSize.marshall(rpc_resp, "LongSize", "", "", "");
	m_LongRecordCount.marshall(rpc_resp, "LongRecordCount", "", "", "");
	m_isSuperfile.marshall(rpc_resp, "isSuperfile", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.22))
		m_isZipfile.marshall(rpc_resp, "isZipfile", "", "", "");
	m_isDirectory.marshall(rpc_resp, "isDirectory", "", "", "");
	m_Replicate.marshall(rpc_resp, "Replicate", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_IntSize.marshall(rpc_resp, "IntSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_IntRecordCount.marshall(rpc_resp, "IntRecordCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_FromRoxieCluster.marshall(rpc_resp, "FromRoxieCluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_BrowseData.marshall(rpc_resp, "BrowseData", "", "", "");
	if ((clientVer==-1.0 || (clientVer>=1.14 && clientVer<1.24)))
		m_IsKeyFile.marshall(rpc_resp, "IsKeyFile", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_IsCompressed.marshall(rpc_resp, "IsCompressed", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.24))
		m_ContentType.marshall(rpc_resp, "ContentType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_CompressedFileSize.marshall(rpc_resp, "CompressedFileSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_SuperOwners.marshall(rpc_resp, "SuperOwners", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_Persistent.marshall(rpc_resp, "Persistent", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_IsProtected.marshall(rpc_resp, "IsProtected", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.41))
		m_KeyType.marshall(rpc_resp, "KeyType", "", "", "");
}


void CDFULogicalFile::copy(CDFULogicalFile &from)
{
	m_Prefix.copy(from.m_Prefix);
	m_ClusterName.copy(from.m_ClusterName);
	m_NodeGroup.copy(from.m_NodeGroup);
	m_Directory.copy(from.m_Directory);
	m_Description.copy(from.m_Description);
	m_Parts.copy(from.m_Parts);
	m_Name.copy(from.m_Name);
	m_Owner.copy(from.m_Owner);
	m_Totalsize.copy(from.m_Totalsize);
	m_RecordCount.copy(from.m_RecordCount);
	m_Modified.copy(from.m_Modified);
	m_LongSize.copy(from.m_LongSize);
	m_LongRecordCount.copy(from.m_LongRecordCount);
	m_isSuperfile.copy(from.m_isSuperfile);
	m_isZipfile.copy(from.m_isZipfile);
	m_isDirectory.copy(from.m_isDirectory);
	m_Replicate.copy(from.m_Replicate);
	m_IntSize.copy(from.m_IntSize);
	m_IntRecordCount.copy(from.m_IntRecordCount);
	m_FromRoxieCluster.copy(from.m_FromRoxieCluster);
	m_BrowseData.copy(from.m_BrowseData);
	m_IsKeyFile.copy(from.m_IsKeyFile);
	m_IsCompressed.copy(from.m_IsCompressed);
	m_ContentType.copy(from.m_ContentType);
	m_CompressedFileSize.copy(from.m_CompressedFileSize);
	m_SuperOwners.copy(from.m_SuperOwners);
	m_Persistent.copy(from.m_Persistent);
	m_IsProtected.copy(from.m_IsProtected);
	m_KeyType.copy(from.m_KeyType);
}


void CDFULogicalFile::copy(IConstDFULogicalFile &ifrom)
{
	setPrefix(ifrom.getPrefix());
	setClusterName(ifrom.getClusterName());
	setNodeGroup(ifrom.getNodeGroup());
	setDirectory(ifrom.getDirectory());
	setDescription(ifrom.getDescription());
	setParts(ifrom.getParts());
	setName(ifrom.getName());
	setOwner(ifrom.getOwner());
	setTotalsize(ifrom.getTotalsize());
	setRecordCount(ifrom.getRecordCount());
	setModified(ifrom.getModified());
	setLongSize(ifrom.getLongSize());
	setLongRecordCount(ifrom.getLongRecordCount());
	setIsSuperfile(ifrom.getIsSuperfile());
	setIsZipfile(ifrom.getIsZipfile());
	setIsDirectory(ifrom.getIsDirectory());
	setReplicate(ifrom.getReplicate());
	setIntSize(ifrom.getIntSize());
	setIntRecordCount(ifrom.getIntRecordCount());
	setFromRoxieCluster(ifrom.getFromRoxieCluster());
	setBrowseData(ifrom.getBrowseData());
	setIsKeyFile(ifrom.getIsKeyFile());
	setIsCompressed(ifrom.getIsCompressed());
	setContentType(ifrom.getContentType());
	setCompressedFileSize(ifrom.getCompressedFileSize());
	setSuperOwners(ifrom.getSuperOwners());
	setPersistent(ifrom.getPersistent());
	setIsProtected(ifrom.getIsProtected());
	setKeyType(ifrom.getKeyType());
}


void CDFULogicalFile::getAttributes(IProperties &attributes)
{
}


void CDFULogicalFile::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Prefix.toStr(ctx, buffer, "Prefix", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.26))
		m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.26))
		m_NodeGroup.toStr(ctx, buffer, "NodeGroup", "", true, "", "");
	m_Directory.toStr(ctx, buffer, "Directory", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	m_Parts.toStr(ctx, buffer, "Parts", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_Totalsize.toStr(ctx, buffer, "Totalsize", "", true, "", "");
	m_RecordCount.toStr(ctx, buffer, "RecordCount", "", true, "", "");
	m_Modified.toStr(ctx, buffer, "Modified", "", true, "", "");
	m_LongSize.toStr(ctx, buffer, "LongSize", "", true, "", "");
	m_LongRecordCount.toStr(ctx, buffer, "LongRecordCount", "", true, "", "");
	m_isSuperfile.toStr(ctx, buffer, "isSuperfile", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.22))
		m_isZipfile.toStr(ctx, buffer, "isZipfile", "", true, "", "");
	m_isDirectory.toStr(ctx, buffer, "isDirectory", "", true, "", "");
	m_Replicate.toStr(ctx, buffer, "Replicate", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_IntSize.toStr(ctx, buffer, "IntSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_IntRecordCount.toStr(ctx, buffer, "IntRecordCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_FromRoxieCluster.toStr(ctx, buffer, "FromRoxieCluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_BrowseData.toStr(ctx, buffer, "BrowseData", "", true, "", "");
	if ((clientVer==-1.0 || (clientVer>=1.14 && clientVer<1.24)))
		m_IsKeyFile.toStr(ctx, buffer, "IsKeyFile", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_IsCompressed.toStr(ctx, buffer, "IsCompressed", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.24))
		m_ContentType.toStr(ctx, buffer, "ContentType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_CompressedFileSize.toStr(ctx, buffer, "CompressedFileSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_SuperOwners.toStr(ctx, buffer, "SuperOwners", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_Persistent.toStr(ctx, buffer, "Persistent", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_IsProtected.toStr(ctx, buffer, "IsProtected", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.41))
		m_KeyType.toStr(ctx, buffer, "KeyType", "", true, "", "");
}


void CDFULogicalFile::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFULogicalFile::serializer(IEspContext* ctx, IConstDFULogicalFile &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFULogicalFile>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Prefix
	{
		const char* s = src.getPrefix();
		if (s && *s)
		{
			buffer.append("<Prefix>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Prefix>");
		}
	}
	// field ClusterName
	if ((clientVer==-1.0 || clientVer<1.26))
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field NodeGroup
	if ((clientVer==-1.0 || clientVer>=1.26))
	{
		const char* s = src.getNodeGroup();
		if (s && *s)
		{
			buffer.append("<NodeGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NodeGroup>");
		}
	}
	// field Directory
	{
		const char* s = src.getDirectory();
		if (s && *s)
		{
			buffer.append("<Directory>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Directory>");
		}
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field Parts
	{
		const char* s = src.getParts();
		if (s && *s)
		{
			buffer.append("<Parts>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Parts>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field Totalsize
	{
		const char* s = src.getTotalsize();
		if (s && *s)
		{
			buffer.append("<Totalsize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Totalsize>");
		}
	}
	// field RecordCount
	{
		const char* s = src.getRecordCount();
		if (s && *s)
		{
			buffer.append("<RecordCount>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RecordCount>");
		}
	}
	// field Modified
	{
		const char* s = src.getModified();
		if (s && *s)
		{
			buffer.append("<Modified>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Modified>");
		}
	}
	// field LongSize
	{
		const char* s = src.getLongSize();
		if (s && *s)
		{
			buffer.append("<LongSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LongSize>");
		}
	}
	// field LongRecordCount
	{
		const char* s = src.getLongRecordCount();
		if (s && *s)
		{
			buffer.append("<LongRecordCount>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LongRecordCount>");
		}
	}
	// field isSuperfile
	{
		bool b = src.getIsSuperfile();
		if (b)
			buffer.appendf("<isSuperfile>1</isSuperfile>");
	}
	// field isZipfile
	if ((clientVer==-1.0 || clientVer<1.22))
	{
		bool b = src.getIsZipfile();
		if (b)
			buffer.appendf("<isZipfile>1</isZipfile>");
	}
	// field isDirectory
	{
		bool b = src.getIsDirectory();
		if (b)
			buffer.appendf("<isDirectory>1</isDirectory>");
	}
	// field Replicate
	{
		bool b = src.getReplicate();
		if (b)
			buffer.appendf("<Replicate>1</Replicate>");
	}
	// field IntSize
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		//*** default kind: TK_INT; type=int64, name=IntSize
		buffer.append("<IntSize>");
		buffer.append(src.getIntSize());
		buffer.append("</IntSize>");
	}
	// field IntRecordCount
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		//*** default kind: TK_INT; type=int64, name=IntRecordCount
		buffer.append("<IntRecordCount>");
		buffer.append(src.getIntRecordCount());
		buffer.append("</IntRecordCount>");
	}
	// field FromRoxieCluster
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		bool b = src.getFromRoxieCluster();
		if (b)
			buffer.appendf("<FromRoxieCluster>1</FromRoxieCluster>");
	}
	// field BrowseData
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		bool b = src.getBrowseData();
		if (b)
			buffer.appendf("<BrowseData>1</BrowseData>");
	}
	// field IsKeyFile
	if ((clientVer==-1.0 || (clientVer>=1.14 && clientVer<1.24)))
	{
		bool b = src.getIsKeyFile();
		if (b)
			buffer.appendf("<IsKeyFile>1</IsKeyFile>");
	}
	// field IsCompressed
	if ((clientVer==-1.0 || clientVer>=1.22))
	{
		bool b = src.getIsCompressed();
		if (b)
			buffer.appendf("<IsCompressed>1</IsCompressed>");
	}
	// field ContentType
	if ((clientVer==-1.0 || clientVer>=1.24))
	{
		const char* s = src.getContentType();
		if (s && *s)
		{
			buffer.append("<ContentType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ContentType>");
		}
	}
	// field CompressedFileSize
	if ((clientVer==-1.0 || clientVer>=1.22))
	{
		//*** default kind: TK_INT; type=int64, name=CompressedFileSize
		buffer.append("<CompressedFileSize>");
		buffer.append(src.getCompressedFileSize());
		buffer.append("</CompressedFileSize>");
	}
	// field SuperOwners
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		const char* s = src.getSuperOwners();
		if (s && *s)
		{
			buffer.append("<SuperOwners>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SuperOwners>");
		}
	}
	// field Persistent
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		bool b = src.getPersistent();
		if (b)
			buffer.appendf("<Persistent>1</Persistent>");
	}
	// field IsProtected
	if ((clientVer==-1.0 || clientVer>=1.34))
	{
		bool b = src.getIsProtected();
		if (b)
			buffer.appendf("<IsProtected>1</IsProtected>");
	}
	// field KeyType
	if ((clientVer==-1.0 || clientVer>=1.41))
	{
		const char* s = src.getKeyType();
		if (s && *s)
		{
			buffer.append("<KeyType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</KeyType>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFULogicalFile>");
}

bool CDFULogicalFile::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Prefix.unmarshall(rpc_request, "Prefix", basepath);
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_NodeGroup.unmarshall(rpc_request, "NodeGroup", basepath);
	hasValue |= m_Directory.unmarshall(rpc_request, "Directory", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_Parts.unmarshall(rpc_request, "Parts", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_Totalsize.unmarshall(rpc_request, "Totalsize", basepath);
	hasValue |= m_RecordCount.unmarshall(rpc_request, "RecordCount", basepath);
	hasValue |= m_Modified.unmarshall(rpc_request, "Modified", basepath);
	hasValue |= m_LongSize.unmarshall(rpc_request, "LongSize", basepath);
	hasValue |= m_LongRecordCount.unmarshall(rpc_request, "LongRecordCount", basepath);
	hasValue |= m_isSuperfile.unmarshall(rpc_request, "isSuperfile", basepath);
	hasValue |= m_isZipfile.unmarshall(rpc_request, "isZipfile", basepath);
	hasValue |= m_isDirectory.unmarshall(rpc_request, "isDirectory", basepath);
	hasValue |= m_Replicate.unmarshall(rpc_request, "Replicate", basepath);
	hasValue |= m_IntSize.unmarshall(rpc_request, "IntSize", basepath);
	hasValue |= m_IntRecordCount.unmarshall(rpc_request, "IntRecordCount", basepath);
	hasValue |= m_FromRoxieCluster.unmarshall(rpc_request, "FromRoxieCluster", basepath);
	hasValue |= m_BrowseData.unmarshall(rpc_request, "BrowseData", basepath);
	hasValue |= m_IsKeyFile.unmarshall(rpc_request, "IsKeyFile", basepath);
	hasValue |= m_IsCompressed.unmarshall(rpc_request, "IsCompressed", basepath);
	hasValue |= m_ContentType.unmarshall(rpc_request, "ContentType", basepath);
	hasValue |= m_CompressedFileSize.unmarshall(rpc_request, "CompressedFileSize", basepath);
	hasValue |= m_SuperOwners.unmarshall(rpc_request, "SuperOwners", basepath);
	hasValue |= m_Persistent.unmarshall(rpc_request, "Persistent", basepath);
	hasValue |= m_IsProtected.unmarshall(rpc_request, "IsProtected", basepath);
	hasValue |= m_KeyType.unmarshall(rpc_request, "KeyType", basepath);
	return hasValue;
}

bool CDFULogicalFile::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Prefix.unmarshall(ctx, soapval, "Prefix");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_NodeGroup.unmarshall(ctx, soapval, "NodeGroup");
	hasValue |= m_Directory.unmarshall(ctx, soapval, "Directory");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_Parts.unmarshall(ctx, soapval, "Parts");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_Totalsize.unmarshall(ctx, soapval, "Totalsize");
	hasValue |= m_RecordCount.unmarshall(ctx, soapval, "RecordCount");
	hasValue |= m_Modified.unmarshall(ctx, soapval, "Modified");
	hasValue |= m_LongSize.unmarshall(ctx, soapval, "LongSize");
	hasValue |= m_LongRecordCount.unmarshall(ctx, soapval, "LongRecordCount");
	hasValue |= m_isSuperfile.unmarshall(ctx, soapval, "isSuperfile");
	hasValue |= m_isZipfile.unmarshall(ctx, soapval, "isZipfile");
	hasValue |= m_isDirectory.unmarshall(ctx, soapval, "isDirectory");
	hasValue |= m_Replicate.unmarshall(ctx, soapval, "Replicate");
	hasValue |= m_IntSize.unmarshall(ctx, soapval, "IntSize");
	hasValue |= m_IntRecordCount.unmarshall(ctx, soapval, "IntRecordCount");
	hasValue |= m_FromRoxieCluster.unmarshall(ctx, soapval, "FromRoxieCluster");
	hasValue |= m_BrowseData.unmarshall(ctx, soapval, "BrowseData");
	hasValue |= m_IsKeyFile.unmarshall(ctx, soapval, "IsKeyFile");
	hasValue |= m_IsCompressed.unmarshall(ctx, soapval, "IsCompressed");
	hasValue |= m_ContentType.unmarshall(ctx, soapval, "ContentType");
	hasValue |= m_CompressedFileSize.unmarshall(ctx, soapval, "CompressedFileSize");
	hasValue |= m_SuperOwners.unmarshall(ctx, soapval, "SuperOwners");
	hasValue |= m_Persistent.unmarshall(ctx, soapval, "Persistent");
	hasValue |= m_IsProtected.unmarshall(ctx, soapval, "IsProtected");
	hasValue |= m_KeyType.unmarshall(ctx, soapval, "KeyType");
	return hasValue;
}

bool CDFULogicalFile::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Prefix.unmarshall(ctx, params, attachments, "Prefix", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_NodeGroup.unmarshall(ctx, params, attachments, "NodeGroup", basepath);
	hasValue |= m_Directory.unmarshall(ctx, params, attachments, "Directory", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_Parts.unmarshall(ctx, params, attachments, "Parts", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_Totalsize.unmarshall(ctx, params, attachments, "Totalsize", basepath);
	hasValue |= m_RecordCount.unmarshall(ctx, params, attachments, "RecordCount", basepath);
	hasValue |= m_Modified.unmarshall(ctx, params, attachments, "Modified", basepath);
	hasValue |= m_LongSize.unmarshall(ctx, params, attachments, "LongSize", basepath);
	hasValue |= m_LongRecordCount.unmarshall(ctx, params, attachments, "LongRecordCount", basepath);
	hasValue |= m_isSuperfile.unmarshall(ctx, params, attachments, "isSuperfile", basepath);
	hasValue |= m_isZipfile.unmarshall(ctx, params, attachments, "isZipfile", basepath);
	hasValue |= m_isDirectory.unmarshall(ctx, params, attachments, "isDirectory", basepath);
	hasValue |= m_Replicate.unmarshall(ctx, params, attachments, "Replicate", basepath);
	hasValue |= m_IntSize.unmarshall(ctx, params, attachments, "IntSize", basepath);
	hasValue |= m_IntRecordCount.unmarshall(ctx, params, attachments, "IntRecordCount", basepath);
	hasValue |= m_FromRoxieCluster.unmarshall(ctx, params, attachments, "FromRoxieCluster", basepath);
	hasValue |= m_BrowseData.unmarshall(ctx, params, attachments, "BrowseData", basepath);
	hasValue |= m_IsKeyFile.unmarshall(ctx, params, attachments, "IsKeyFile", basepath);
	hasValue |= m_IsCompressed.unmarshall(ctx, params, attachments, "IsCompressed", basepath);
	hasValue |= m_ContentType.unmarshall(ctx, params, attachments, "ContentType", basepath);
	hasValue |= m_CompressedFileSize.unmarshall(ctx, params, attachments, "CompressedFileSize", basepath);
	hasValue |= m_SuperOwners.unmarshall(ctx, params, attachments, "SuperOwners", basepath);
	hasValue |= m_Persistent.unmarshall(ctx, params, attachments, "Persistent", basepath);
	hasValue |= m_IsProtected.unmarshall(ctx, params, attachments, "IsProtected", basepath);
	hasValue |= m_KeyType.unmarshall(ctx, params, attachments, "KeyType", basepath);
	return hasValue;
}

const char * CDFULogicalFile::getPrefix() { return m_Prefix.query();}
const char * CDFULogicalFile::getClusterName() { return m_ClusterName.query();}
const char * CDFULogicalFile::getNodeGroup() { return m_NodeGroup.query();}
const char * CDFULogicalFile::getDirectory() { return m_Directory.query();}
const char * CDFULogicalFile::getDescription() { return m_Description.query();}
const char * CDFULogicalFile::getParts() { return m_Parts.query();}
const char * CDFULogicalFile::getName() { return m_Name.query();}
const char * CDFULogicalFile::getOwner() { return m_Owner.query();}
const char * CDFULogicalFile::getTotalsize() { return m_Totalsize.query();}
const char * CDFULogicalFile::getRecordCount() { return m_RecordCount.query();}
const char * CDFULogicalFile::getModified() { return m_Modified.query();}
const char * CDFULogicalFile::getLongSize() { return m_LongSize.query();}
const char * CDFULogicalFile::getLongRecordCount() { return m_LongRecordCount.query();}
bool CDFULogicalFile::getIsSuperfile() { return m_isSuperfile;}
bool CDFULogicalFile::getIsZipfile() { return m_isZipfile;}
bool CDFULogicalFile::getIsDirectory() { return m_isDirectory;}
bool CDFULogicalFile::getReplicate() { return m_Replicate;}
__int64 CDFULogicalFile::getIntSize() { return m_IntSize;}
__int64 CDFULogicalFile::getIntRecordCount() { return m_IntRecordCount;}
bool CDFULogicalFile::getFromRoxieCluster() { return m_FromRoxieCluster;}
bool CDFULogicalFile::getBrowseData() { return m_BrowseData;}
bool CDFULogicalFile::getIsKeyFile() { return m_IsKeyFile;}
bool CDFULogicalFile::getIsCompressed() { return m_IsCompressed;}
const char * CDFULogicalFile::getContentType() { return m_ContentType.query();}
__int64 CDFULogicalFile::getCompressedFileSize() { return m_CompressedFileSize;}
const char * CDFULogicalFile::getSuperOwners() { return m_SuperOwners.query();}
bool CDFULogicalFile::getPersistent() { return m_Persistent;}
bool CDFULogicalFile::getIsProtected() { return m_IsProtected;}
const char * CDFULogicalFile::getKeyType() { return m_KeyType.query();}
void CDFULogicalFile::setPrefix(const char * val){ m_Prefix.set(val); }
void CDFULogicalFile::setClusterName(const char * val){ m_ClusterName.set(val); }
void CDFULogicalFile::setNodeGroup(const char * val){ m_NodeGroup.set(val); }
void CDFULogicalFile::setDirectory(const char * val){ m_Directory.set(val); }
void CDFULogicalFile::setDescription(const char * val){ m_Description.set(val); }
void CDFULogicalFile::setParts(const char * val){ m_Parts.set(val); }
void CDFULogicalFile::setName(const char * val){ m_Name.set(val); }
void CDFULogicalFile::setOwner(const char * val){ m_Owner.set(val); }
void CDFULogicalFile::setTotalsize(const char * val){ m_Totalsize.set(val); }
void CDFULogicalFile::setRecordCount(const char * val){ m_RecordCount.set(val); }
void CDFULogicalFile::setModified(const char * val){ m_Modified.set(val); }
void CDFULogicalFile::setLongSize(const char * val){ m_LongSize.set(val); }
void CDFULogicalFile::setLongRecordCount(const char * val){ m_LongRecordCount.set(val); }
void CDFULogicalFile::setIsSuperfile(bool val){ m_isSuperfile=val; }
void CDFULogicalFile::setIsZipfile(bool val){ m_isZipfile=val; }
void CDFULogicalFile::setIsDirectory(bool val){ m_isDirectory=val; }
void CDFULogicalFile::setReplicate(bool val){ m_Replicate=val; }
void CDFULogicalFile::setIntSize(__int64 val){ m_IntSize=val; }
void CDFULogicalFile::setIntRecordCount(__int64 val){ m_IntRecordCount=val; }
void CDFULogicalFile::setFromRoxieCluster(bool val){ m_FromRoxieCluster=val; }
void CDFULogicalFile::setBrowseData(bool val){ m_BrowseData=val; }
void CDFULogicalFile::setIsKeyFile(bool val){ m_IsKeyFile=val; }
void CDFULogicalFile::setIsCompressed(bool val){ m_IsCompressed=val; }
void CDFULogicalFile::setContentType(const char * val){ m_ContentType.set(val); }
void CDFULogicalFile::setCompressedFileSize(__int64 val){ m_CompressedFileSize=val; }
void CDFULogicalFile::setSuperOwners(const char * val){ m_SuperOwners.set(val); }
void CDFULogicalFile::setPersistent(bool val){ m_Persistent=val; }
void CDFULogicalFile::setIsProtected(bool val){ m_IsProtected=val; }
void CDFULogicalFile::setKeyType(const char * val){ m_KeyType.set(val); }
extern "C"  IEspDFULogicalFile *createDFULogicalFile(const char *serv, const char *msgname){return ((IEspDFULogicalFile *)new CDFULogicalFile(serv /*, msgname*/));}
extern "C"  IClientDFULogicalFile *createClientDFULogicalFile(const char *serv, const char *msgname){return ((IClientDFULogicalFile *)new CDFULogicalFile(serv /*, msgname*/));}

//=======================================================
// class CDFUPart Implementation
//=======================================================

CDFUPart::CDFUPart(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilIgnore),m_Copy(nilIgnore),m_ActualSize(nilIgnore),m_Ip(nilIgnore),m_Partsize(nilIgnore),m_PartSizeInt64(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUPart");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUPart::CDFUPart(const char *serviceName, const char *bc)
	: m_Id(nilIgnore),m_Copy(nilIgnore),m_ActualSize(nilIgnore),m_Ip(nilIgnore),m_Partsize(nilIgnore),m_PartSizeInt64(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUPart");
}

StringBuffer &CDFUPart::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Copy\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("DFUPart","ActualSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ActualSize\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Ip\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Partsize\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUPart","PartSizeInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PartSizeInt64\" type=\"xsd:long\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUPart::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUPart::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("DFUPart","ActualSize",1.23);
	info.addMinVersion("DFUPart","PartSizeInt64",1.38);
}

StringBuffer &CDFUPart::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Copy");
	form.appendf("  <tr><td><b>Copy: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUPart","ActualSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ActualSize");
		form.appendf("  <tr><td><b>ActualSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Ip");
	form.appendf("  <tr><td><b>Ip: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Partsize");
	form.appendf("  <tr><td><b>Partsize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUPart","PartSizeInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PartSizeInt64");
		form.appendf("  <tr><td><b>PartSizeInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUPart::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUPart::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_Copy.marshall(rpc_resp, "Copy", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.23))
		m_ActualSize.marshall(rpc_resp, "ActualSize", "", "", "");
	m_Ip.marshall(rpc_resp, "Ip", "", "", "");
	m_Partsize.marshall(rpc_resp, "Partsize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_PartSizeInt64.marshall(rpc_resp, "PartSizeInt64", "", "", "");
}


void CDFUPart::copy(CDFUPart &from)
{
	m_Id.copy(from.m_Id);
	m_Copy.copy(from.m_Copy);
	m_ActualSize.copy(from.m_ActualSize);
	m_Ip.copy(from.m_Ip);
	m_Partsize.copy(from.m_Partsize);
	m_PartSizeInt64.copy(from.m_PartSizeInt64);
}


void CDFUPart::copy(IConstDFUPart &ifrom)
{
	setId(ifrom.getId());
	setCopy(ifrom.getCopy());
	setActualSize(ifrom.getActualSize());
	setIp(ifrom.getIp());
	setPartsize(ifrom.getPartsize());
	setPartSizeInt64(ifrom.getPartSizeInt64());
}


void CDFUPart::getAttributes(IProperties &attributes)
{
}


void CDFUPart::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_Copy.toStr(ctx, buffer, "Copy", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.23))
		m_ActualSize.toStr(ctx, buffer, "ActualSize", "", true, "", "");
	m_Ip.toStr(ctx, buffer, "Ip", "", true, "", "");
	m_Partsize.toStr(ctx, buffer, "Partsize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_PartSizeInt64.toStr(ctx, buffer, "PartSizeInt64", "", true, "", "");
}


void CDFUPart::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUPart::serializer(IEspContext* ctx, IConstDFUPart &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUPart>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Id
	{
		int n = src.getId();
		if (n)
			buffer.appendf("<Id>%d</Id>", n);
	}
	// field Copy
	{
		int n = src.getCopy();
		if (n)
			buffer.appendf("<Copy>%d</Copy>", n);
	}
	// field ActualSize
	if ((clientVer==-1.0 || clientVer<1.23))
	{
		const char* s = src.getActualSize();
		if (s && *s)
		{
			buffer.append("<ActualSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ActualSize>");
		}
	}
	// field Ip
	{
		const char* s = src.getIp();
		if (s && *s)
		{
			buffer.append("<Ip>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Ip>");
		}
	}
	// field Partsize
	{
		const char* s = src.getPartsize();
		if (s && *s)
		{
			buffer.append("<Partsize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Partsize>");
		}
	}
	// field PartSizeInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=PartSizeInt64
		buffer.append("<PartSizeInt64>");
		buffer.append(src.getPartSizeInt64());
		buffer.append("</PartSizeInt64>");
	}
	if (keepRootTag)
		buffer.append("</DFUPart>");
}

bool CDFUPart::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_Copy.unmarshall(rpc_request, "Copy", basepath);
	hasValue |= m_ActualSize.unmarshall(rpc_request, "ActualSize", basepath);
	hasValue |= m_Ip.unmarshall(rpc_request, "Ip", basepath);
	hasValue |= m_Partsize.unmarshall(rpc_request, "Partsize", basepath);
	hasValue |= m_PartSizeInt64.unmarshall(rpc_request, "PartSizeInt64", basepath);
	return hasValue;
}

bool CDFUPart::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_Copy.unmarshall(ctx, soapval, "Copy");
	hasValue |= m_ActualSize.unmarshall(ctx, soapval, "ActualSize");
	hasValue |= m_Ip.unmarshall(ctx, soapval, "Ip");
	hasValue |= m_Partsize.unmarshall(ctx, soapval, "Partsize");
	hasValue |= m_PartSizeInt64.unmarshall(ctx, soapval, "PartSizeInt64");
	return hasValue;
}

bool CDFUPart::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_Copy.unmarshall(ctx, params, attachments, "Copy", basepath);
	hasValue |= m_ActualSize.unmarshall(ctx, params, attachments, "ActualSize", basepath);
	hasValue |= m_Ip.unmarshall(ctx, params, attachments, "Ip", basepath);
	hasValue |= m_Partsize.unmarshall(ctx, params, attachments, "Partsize", basepath);
	hasValue |= m_PartSizeInt64.unmarshall(ctx, params, attachments, "PartSizeInt64", basepath);
	return hasValue;
}

int CDFUPart::getId() { return m_Id;}
int CDFUPart::getCopy() { return m_Copy;}
const char * CDFUPart::getActualSize() { return m_ActualSize.query();}
const char * CDFUPart::getIp() { return m_Ip.query();}
const char * CDFUPart::getPartsize() { return m_Partsize.query();}
__int64 CDFUPart::getPartSizeInt64() { return m_PartSizeInt64;}
void CDFUPart::setId(int val){ m_Id=val; }
void CDFUPart::setCopy(int val){ m_Copy=val; }
void CDFUPart::setActualSize(const char * val){ m_ActualSize.set(val); }
void CDFUPart::setIp(const char * val){ m_Ip.set(val); }
void CDFUPart::setPartsize(const char * val){ m_Partsize.set(val); }
void CDFUPart::setPartSizeInt64(__int64 val){ m_PartSizeInt64=val; }
extern "C"  IEspDFUPart *createDFUPart(const char *serv, const char *msgname){return ((IEspDFUPart *)new CDFUPart(serv /*, msgname*/));}
extern "C"  IClientDFUPart *createClientDFUPart(const char *serv, const char *msgname){return ((IClientDFUPart *)new CDFUPart(serv /*, msgname*/));}

//=======================================================
// class CDFUFileStat Implementation
//=======================================================

CDFUFileStat::CDFUFileStat(const char *serviceName, IRpcMessageBinding *init)
	: m_MinSkew(nilIgnore),m_MaxSkew(nilIgnore),m_MinSkewInt64(nilIgnore),m_MaxSkewInt64(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileStat");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileStat::CDFUFileStat(const char *serviceName, const char *bc)
	: m_MinSkew(nilIgnore),m_MaxSkew(nilIgnore),m_MinSkewInt64(nilIgnore),m_MaxSkewInt64(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileStat");
}

StringBuffer &CDFUFileStat::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"MinSkew\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxSkew\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileStat","MinSkewInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MinSkewInt64\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUFileStat","MaxSkewInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MaxSkewInt64\" type=\"xsd:long\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUFileStat::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileStat::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUFileStat","MinSkewInt64",1.38);
	info.addMinVersion("DFUFileStat","MaxSkewInt64",1.38);
}

StringBuffer &CDFUFileStat::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MinSkew");
	form.appendf("  <tr><td><b>MinSkew: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MaxSkew");
	form.appendf("  <tr><td><b>MaxSkew: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileStat","MinSkewInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MinSkewInt64");
		form.appendf("  <tr><td><b>MinSkewInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileStat","MaxSkewInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MaxSkewInt64");
		form.appendf("  <tr><td><b>MaxSkewInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileStat::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileStat::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_MinSkew.marshall(rpc_resp, "MinSkew", "", "", "");
	m_MaxSkew.marshall(rpc_resp, "MaxSkew", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_MinSkewInt64.marshall(rpc_resp, "MinSkewInt64", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_MaxSkewInt64.marshall(rpc_resp, "MaxSkewInt64", "", "", "");
}


void CDFUFileStat::copy(CDFUFileStat &from)
{
	m_MinSkew.copy(from.m_MinSkew);
	m_MaxSkew.copy(from.m_MaxSkew);
	m_MinSkewInt64.copy(from.m_MinSkewInt64);
	m_MaxSkewInt64.copy(from.m_MaxSkewInt64);
}


void CDFUFileStat::copy(IConstDFUFileStat &ifrom)
{
	setMinSkew(ifrom.getMinSkew());
	setMaxSkew(ifrom.getMaxSkew());
	setMinSkewInt64(ifrom.getMinSkewInt64());
	setMaxSkewInt64(ifrom.getMaxSkewInt64());
}


void CDFUFileStat::getAttributes(IProperties &attributes)
{
}


void CDFUFileStat::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_MinSkew.toStr(ctx, buffer, "MinSkew", "", true, "", "");
	m_MaxSkew.toStr(ctx, buffer, "MaxSkew", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_MinSkewInt64.toStr(ctx, buffer, "MinSkewInt64", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_MaxSkewInt64.toStr(ctx, buffer, "MaxSkewInt64", "", true, "", "");
}


void CDFUFileStat::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileStat::serializer(IEspContext* ctx, IConstDFUFileStat &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileStat>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field MinSkew
	{
		const char* s = src.getMinSkew();
		if (s && *s)
		{
			buffer.append("<MinSkew>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MinSkew>");
		}
	}
	// field MaxSkew
	{
		const char* s = src.getMaxSkew();
		if (s && *s)
		{
			buffer.append("<MaxSkew>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MaxSkew>");
		}
	}
	// field MinSkewInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=MinSkewInt64
		buffer.append("<MinSkewInt64>");
		buffer.append(src.getMinSkewInt64());
		buffer.append("</MinSkewInt64>");
	}
	// field MaxSkewInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=MaxSkewInt64
		buffer.append("<MaxSkewInt64>");
		buffer.append(src.getMaxSkewInt64());
		buffer.append("</MaxSkewInt64>");
	}
	if (keepRootTag)
		buffer.append("</DFUFileStat>");
}

bool CDFUFileStat::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_MinSkew.unmarshall(rpc_request, "MinSkew", basepath);
	hasValue |= m_MaxSkew.unmarshall(rpc_request, "MaxSkew", basepath);
	hasValue |= m_MinSkewInt64.unmarshall(rpc_request, "MinSkewInt64", basepath);
	hasValue |= m_MaxSkewInt64.unmarshall(rpc_request, "MaxSkewInt64", basepath);
	return hasValue;
}

bool CDFUFileStat::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_MinSkew.unmarshall(ctx, soapval, "MinSkew");
	hasValue |= m_MaxSkew.unmarshall(ctx, soapval, "MaxSkew");
	hasValue |= m_MinSkewInt64.unmarshall(ctx, soapval, "MinSkewInt64");
	hasValue |= m_MaxSkewInt64.unmarshall(ctx, soapval, "MaxSkewInt64");
	return hasValue;
}

bool CDFUFileStat::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_MinSkew.unmarshall(ctx, params, attachments, "MinSkew", basepath);
	hasValue |= m_MaxSkew.unmarshall(ctx, params, attachments, "MaxSkew", basepath);
	hasValue |= m_MinSkewInt64.unmarshall(ctx, params, attachments, "MinSkewInt64", basepath);
	hasValue |= m_MaxSkewInt64.unmarshall(ctx, params, attachments, "MaxSkewInt64", basepath);
	return hasValue;
}

const char * CDFUFileStat::getMinSkew() { return m_MinSkew.query();}
const char * CDFUFileStat::getMaxSkew() { return m_MaxSkew.query();}
__int64 CDFUFileStat::getMinSkewInt64() { return m_MinSkewInt64;}
__int64 CDFUFileStat::getMaxSkewInt64() { return m_MaxSkewInt64;}
void CDFUFileStat::setMinSkew(const char * val){ m_MinSkew.set(val); }
void CDFUFileStat::setMaxSkew(const char * val){ m_MaxSkew.set(val); }
void CDFUFileStat::setMinSkewInt64(__int64 val){ m_MinSkewInt64=val; }
void CDFUFileStat::setMaxSkewInt64(__int64 val){ m_MaxSkewInt64=val; }
extern "C"  IEspDFUFileStat *createDFUFileStat(const char *serv, const char *msgname){return ((IEspDFUFileStat *)new CDFUFileStat(serv /*, msgname*/));}
extern "C"  IClientDFUFileStat *createClientDFUFileStat(const char *serv, const char *msgname){return ((IClientDFUFileStat *)new CDFUFileStat(serv /*, msgname*/));}

//=======================================================
// class CDFUFilePartsOnCluster Implementation
//=======================================================

CDFUFilePartsOnCluster::CDFUFilePartsOnCluster(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilRemove),m_BaseDir(nilRemove),m_ReplicateDir(nilRemove),m_Replicate(nilRemove),m_CanReplicate(nilRemove),m_DFUFileParts(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePartsOnCluster");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFilePartsOnCluster::CDFUFilePartsOnCluster(const char *serviceName, const char *bc)
	: m_Cluster(nilRemove),m_BaseDir(nilRemove),m_ReplicateDir(nilRemove),m_Replicate(nilRemove),m_CanReplicate(nilRemove),m_DFUFileParts(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePartsOnCluster");
}

StringBuffer &CDFUFilePartsOnCluster::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFilePartsOnCluster","BaseDir")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BaseDir\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFilePartsOnCluster","ReplicateDir")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ReplicateDir\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFilePartsOnCluster","Replicate")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Replicate\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUFilePartsOnCluster","CanReplicate")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CanReplicate\" type=\"xsd:boolean\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUFileParts\" type=\"tns:ArrayOfDFUPart\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUPart::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUPart") && added.getValue("ArrayOfDFUPart")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUPart\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUPart\" type=\"tns:DFUPart\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUPart",1);
	}
	return schema;
}

void CDFUFilePartsOnCluster::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFilePartsOnCluster::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUFilePartsOnCluster","BaseDir",1.31);
	info.addMinVersion("DFUFilePartsOnCluster","ReplicateDir",1.31);
	info.addMinVersion("DFUFilePartsOnCluster","Replicate",1.31);
	info.addMinVersion("DFUFilePartsOnCluster","CanReplicate",1.32);
	if (!added.getValue("DFUPart"))
	{
		added.setValue("DFUPart",1);
		CDFUPart::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFilePartsOnCluster::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFilePartsOnCluster","BaseDir")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BaseDir");
		form.appendf("  <tr><td><b>BaseDir: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFilePartsOnCluster","ReplicateDir")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ReplicateDir");
		form.appendf("  <tr><td><b>ReplicateDir: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFilePartsOnCluster","Replicate")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Replicate");
		
	form.appendf("  <tr><td><b>Replicate? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUFilePartsOnCluster","CanReplicate")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CanReplicate");
		
	form.appendf("  <tr><td><b>CanReplicate? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUFileParts");
	form.appendf("<tr><td><b>DFUFileParts: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFilePartsOnCluster::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFilePartsOnCluster::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_BaseDir.marshall(rpc_resp, "BaseDir", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_ReplicateDir.marshall(rpc_resp, "ReplicateDir", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_Replicate.marshall(rpc_resp, "Replicate", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_CanReplicate.marshall(rpc_resp, "CanReplicate", "", "", "");
	m_DFUFileParts.marshall(rpc_resp, "DFUFileParts", "DFUPart");
}


void CDFUFilePartsOnCluster::copy(CDFUFilePartsOnCluster &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_BaseDir.copy(from.m_BaseDir);
	m_ReplicateDir.copy(from.m_ReplicateDir);
	m_Replicate.copy(from.m_Replicate);
	m_CanReplicate.copy(from.m_CanReplicate);
	m_DFUFileParts.copy(from.m_DFUFileParts);
}


void CDFUFilePartsOnCluster::copy(IConstDFUFilePartsOnCluster &ifrom)
{
	setCluster(ifrom.getCluster());
	setBaseDir(ifrom.getBaseDir());
	setReplicateDir(ifrom.getReplicateDir());
	setReplicate(ifrom.getReplicate());
	setCanReplicate(ifrom.getCanReplicate());
	setDFUFileParts(ifrom.getDFUFileParts());
}


void CDFUFilePartsOnCluster::getAttributes(IProperties &attributes)
{
}


void CDFUFilePartsOnCluster::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_BaseDir.toStr(ctx, buffer, "BaseDir", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_ReplicateDir.toStr(ctx, buffer, "ReplicateDir", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_Replicate.toStr(ctx, buffer, "Replicate", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_CanReplicate.toStr(ctx, buffer, "CanReplicate", "", true, "", "");
	m_DFUFileParts.toStr(ctx, buffer, "DFUFileParts", "DFUPart");
}


void CDFUFilePartsOnCluster::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFilePartsOnCluster::serializer(IEspContext* ctx, IConstDFUFilePartsOnCluster &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFilePartsOnCluster>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field BaseDir
	if ((clientVer==-1.0 || clientVer>=1.31))
	{
		const char* s = src.getBaseDir();
		if (s && *s)
		{
			buffer.append("<BaseDir>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BaseDir>");
		}
	}
	// field ReplicateDir
	if ((clientVer==-1.0 || clientVer>=1.31))
	{
		const char* s = src.getReplicateDir();
		if (s && *s)
		{
			buffer.append("<ReplicateDir>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ReplicateDir>");
		}
	}
	// field Replicate
	if ((clientVer==-1.0 || clientVer>=1.31))
	{
		bool b = src.getReplicate();
		if (b)
			buffer.appendf("<Replicate>1</Replicate>");
	}
	// field CanReplicate
	if ((clientVer==-1.0 || clientVer>=1.32))
	{
		bool b = src.getCanReplicate();
		if (b)
			buffer.appendf("<CanReplicate>1</CanReplicate>");
	}
	// field DFUFileParts
	{
		IArrayOf<IConstDFUPart>& v = src.getDFUFileParts();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUFileParts>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUPart::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUFileParts>");
	}
	if (keepRootTag)
		buffer.append("</DFUFilePartsOnCluster>");
}

bool CDFUFilePartsOnCluster::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_BaseDir.unmarshall(rpc_request, "BaseDir", basepath);
	hasValue |= m_ReplicateDir.unmarshall(rpc_request, "ReplicateDir", basepath);
	hasValue |= m_Replicate.unmarshall(rpc_request, "Replicate", basepath);
	hasValue |= m_CanReplicate.unmarshall(rpc_request, "CanReplicate", basepath);
	hasValue |= m_DFUFileParts.unmarshall(rpc_request, "DFUFileParts", basepath);
	return hasValue;
}

bool CDFUFilePartsOnCluster::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_BaseDir.unmarshall(ctx, soapval, "BaseDir");
	hasValue |= m_ReplicateDir.unmarshall(ctx, soapval, "ReplicateDir");
	hasValue |= m_Replicate.unmarshall(ctx, soapval, "Replicate");
	hasValue |= m_CanReplicate.unmarshall(ctx, soapval, "CanReplicate");
	hasValue |= m_DFUFileParts.unmarshall(ctx, soapval, "DFUFileParts");
	return hasValue;
}

bool CDFUFilePartsOnCluster::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_BaseDir.unmarshall(ctx, params, attachments, "BaseDir", basepath);
	hasValue |= m_ReplicateDir.unmarshall(ctx, params, attachments, "ReplicateDir", basepath);
	hasValue |= m_Replicate.unmarshall(ctx, params, attachments, "Replicate", basepath);
	hasValue |= m_CanReplicate.unmarshall(ctx, params, attachments, "CanReplicate", basepath);
	hasValue |= m_DFUFileParts.unmarshall(ctx, params, attachments, "DFUFileParts", basepath);
	return hasValue;
}

const char * CDFUFilePartsOnCluster::getCluster() { return m_Cluster.query();}
const char * CDFUFilePartsOnCluster::getBaseDir() { return m_BaseDir.query();}
const char * CDFUFilePartsOnCluster::getReplicateDir() { return m_ReplicateDir.query();}
bool CDFUFilePartsOnCluster::getReplicate_isNull(){return m_Replicate.is_nil();}
bool CDFUFilePartsOnCluster::getReplicate() { return m_Replicate;}
bool CDFUFilePartsOnCluster::getCanReplicate_isNull(){return m_CanReplicate.is_nil();}
bool CDFUFilePartsOnCluster::getCanReplicate() { return m_CanReplicate;}
IArrayOf<IConstDFUPart> & CDFUFilePartsOnCluster::getDFUFileParts() { return (IArrayOf<IConstDFUPart> &) m_DFUFileParts; }
void CDFUFilePartsOnCluster::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUFilePartsOnCluster::setBaseDir(const char * val){ m_BaseDir.set(val); }
void CDFUFilePartsOnCluster::setReplicateDir(const char * val){ m_ReplicateDir.set(val); }
void CDFUFilePartsOnCluster::setReplicate_null(){ m_Replicate.Nil(); }void CDFUFilePartsOnCluster::setReplicate(bool val){ m_Replicate=val; }
void CDFUFilePartsOnCluster::setCanReplicate_null(){ m_CanReplicate.Nil(); }void CDFUFilePartsOnCluster::setCanReplicate(bool val){ m_CanReplicate=val; }
void CDFUFilePartsOnCluster::setDFUFileParts(IArrayOf<IEspDFUPart> &val)
{
	m_DFUFileParts->kill();
	IArrayOf<IConstDFUPart> &target = m_DFUFileParts.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUPart &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFilePartsOnCluster::setDFUFileParts(IArrayOf<IConstDFUPart> &val)
{
	m_DFUFileParts->kill();
	IArrayOf<IConstDFUPart> &target = m_DFUFileParts.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUPart &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspDFUFilePartsOnCluster *createDFUFilePartsOnCluster(const char *serv, const char *msgname){return ((IEspDFUFilePartsOnCluster *)new CDFUFilePartsOnCluster(serv /*, msgname*/));}
extern "C"  IClientDFUFilePartsOnCluster *createClientDFUFilePartsOnCluster(const char *serv, const char *msgname){return ((IClientDFUFilePartsOnCluster *)new CDFUFilePartsOnCluster(serv /*, msgname*/));}

//=======================================================
// class CDFUFileProtect Implementation
//=======================================================

CDFUFileProtect::CDFUFileProtect(const char *serviceName, IRpcMessageBinding *init)
	: m_Owner(nilRemove),m_Count(nilRemove),m_Modified(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileProtect");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileProtect::CDFUFileProtect(const char *serviceName, const char *bc)
	: m_Owner(nilRemove),m_Count(nilRemove),m_Modified(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileProtect");
}

StringBuffer &CDFUFileProtect::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Modified\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUFileProtect::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileProtect::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUFileProtect::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Modified");
	form.appendf("  <tr><td><b>Modified: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileProtect::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileProtect::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
	m_Modified.marshall(rpc_resp, "Modified", "", "", "");
}


void CDFUFileProtect::copy(CDFUFileProtect &from)
{
	m_Owner.copy(from.m_Owner);
	m_Count.copy(from.m_Count);
	m_Modified.copy(from.m_Modified);
}


void CDFUFileProtect::copy(IConstDFUFileProtect &ifrom)
{
	setOwner(ifrom.getOwner());
	setCount(ifrom.getCount());
	setModified(ifrom.getModified());
}


void CDFUFileProtect::getAttributes(IProperties &attributes)
{
}


void CDFUFileProtect::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
	m_Modified.toStr(ctx, buffer, "Modified", "", true, "", "");
}


void CDFUFileProtect::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileProtect::serializer(IEspContext* ctx, IConstDFUFileProtect &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileProtect>");
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field Modified
	{
		const char* s = src.getModified();
		if (s && *s)
		{
			buffer.append("<Modified>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Modified>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUFileProtect>");
}

bool CDFUFileProtect::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	hasValue |= m_Modified.unmarshall(rpc_request, "Modified", basepath);
	return hasValue;
}

bool CDFUFileProtect::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_Modified.unmarshall(ctx, soapval, "Modified");
	return hasValue;
}

bool CDFUFileProtect::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_Modified.unmarshall(ctx, params, attachments, "Modified", basepath);
	return hasValue;
}

const char * CDFUFileProtect::getOwner() { return m_Owner.query();}
bool CDFUFileProtect::getCount_isNull(){return m_Count.is_nil();}
int CDFUFileProtect::getCount() { return m_Count;}
const char * CDFUFileProtect::getModified() { return m_Modified.query();}
void CDFUFileProtect::setOwner(const char * val){ m_Owner.set(val); }
void CDFUFileProtect::setCount_null(){ m_Count.Nil(); }void CDFUFileProtect::setCount(int val){ m_Count=val; }
void CDFUFileProtect::setModified(const char * val){ m_Modified.set(val); }
extern "C"  IEspDFUFileProtect *createDFUFileProtect(const char *serv, const char *msgname){return ((IEspDFUFileProtect *)new CDFUFileProtect(serv /*, msgname*/));}
extern "C"  IClientDFUFileProtect *createClientDFUFileProtect(const char *serv, const char *msgname){return ((IClientDFUFileProtect *)new CDFUFileProtect(serv /*, msgname*/));}

//=======================================================
// class CDFUFileDetail Implementation
//=======================================================

CDFUFileDetail::CDFUFileDetail(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Filename(nilRemove),m_Prefix(nilRemove),m_NodeGroup(nilRemove),m_NumParts(nilRemove),m_Description(nilRemove),m_Dir(nilRemove),m_PathMask(nilRemove),m_Filesize(nilRemove),m_FileSizeInt64(nilRemove),m_ActualSize(nilRemove),m_RecordSize(nilRemove),m_RecordCount(nilRemove),m_RecordSizeInt64(nilRemove),m_RecordCountInt64(nilRemove),m_Wuid(nilRemove),m_Owner(nilRemove),m_Cluster(nilRemove),m_JobName(nilRemove),m_Persistent(nilRemove),m_Format(nilRemove),m_MaxRecordSize(nilRemove),m_CsvSeparate(nilRemove),m_CsvQuote(nilRemove),m_CsvTerminate(nilRemove),m_CsvEscape(nilRemove),m_Modified(nilRemove),m_Ecl(nilRemove),m_ZipFile(0, nilRemove,false),m_Stat(serviceName, nilRemove),m_DFUFileParts(nilRemove),m_DFUFilePartsOnClusters(nilRemove),m_isSuperfile(0, nilRemove,false),m_ShowFileContent(1, nilRemove,false),m_subfiles(nilRemove),m_Superfiles(nilRemove),m_ProtectList(nilRemove),m_FromRoxieCluster(nilRemove),m_Graphs(nilRemove),m_UserPermission(nilRemove),m_ContentType(nilRemove),m_CompressedFileSize(nilRemove),m_PercentCompressed(nilRemove),m_IsCompressed(0, nilRemove,false),m_BrowseData(1, nilRemove,false),m_jsonInfo(nilRemove),m_binInfo(nilRemove),m_PackageID(nilRemove),m_Partition(serviceName, nilRemove),m_Blooms(nilRemove),m_ExpireDays(nilRemove),m_KeyType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileDetail");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileDetail::CDFUFileDetail(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Filename(nilRemove),m_Prefix(nilRemove),m_NodeGroup(nilRemove),m_NumParts(nilRemove),m_Description(nilRemove),m_Dir(nilRemove),m_PathMask(nilRemove),m_Filesize(nilRemove),m_FileSizeInt64(nilRemove),m_ActualSize(nilRemove),m_RecordSize(nilRemove),m_RecordCount(nilRemove),m_RecordSizeInt64(nilRemove),m_RecordCountInt64(nilRemove),m_Wuid(nilRemove),m_Owner(nilRemove),m_Cluster(nilRemove),m_JobName(nilRemove),m_Persistent(nilRemove),m_Format(nilRemove),m_MaxRecordSize(nilRemove),m_CsvSeparate(nilRemove),m_CsvQuote(nilRemove),m_CsvTerminate(nilRemove),m_CsvEscape(nilRemove),m_Modified(nilRemove),m_Ecl(nilRemove),m_ZipFile(0, nilRemove,false),m_Stat(serviceName, nilRemove),m_DFUFileParts(nilRemove),m_DFUFilePartsOnClusters(nilRemove),m_isSuperfile(0, nilRemove,false),m_ShowFileContent(1, nilRemove,false),m_subfiles(nilRemove),m_Superfiles(nilRemove),m_ProtectList(nilRemove),m_FromRoxieCluster(nilRemove),m_Graphs(nilRemove),m_UserPermission(nilRemove),m_ContentType(nilRemove),m_CompressedFileSize(nilRemove),m_PercentCompressed(nilRemove),m_IsCompressed(0, nilRemove,false),m_BrowseData(1, nilRemove,false),m_jsonInfo(nilRemove),m_binInfo(nilRemove),m_PackageID(nilRemove),m_Partition(serviceName, nilRemove),m_Blooms(nilRemove),m_ExpireDays(nilRemove),m_KeyType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileDetail");
}

StringBuffer &CDFUFileDetail::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Filename\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileDetail","Prefix")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Prefix\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","NodeGroup")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NodeGroup\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","NumParts")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NumParts\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Dir\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PathMask\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Filesize\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileDetail","FileSizeInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileSizeInt64\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","ActualSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ActualSize\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"RecordSize\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RecordCount\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileDetail","RecordSizeInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RecordSizeInt64\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","RecordCountInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RecordCountInt64\" type=\"xsd:long\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileDetail","Cluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"JobName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Persistent\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Format\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxRecordSize\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CsvSeparate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CsvQuote\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CsvTerminate\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileDetail","CsvEscape")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CsvEscape\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Modified\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Ecl\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileDetail","ZipFile")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ZipFile\" type=\"xsd:boolean\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Stat\" type=\"tns:DFUFileStat\"/>\n");
		if (!context.suppressed("DFUFileDetail","DFUFileParts")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUFileParts\" type=\"tns:ArrayOfDFUPart\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","DFUFilePartsOnClusters")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUFilePartsOnClusters\" type=\"tns:ArrayOfDFUFilePartsOnCluster\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"isSuperfile\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"ShowFileContent\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"subfiles\" type=\"tns:EspStringArray\"/>\n");
		if (!context.suppressed("DFUFileDetail","Superfiles")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Superfiles\" type=\"tns:ArrayOfDFULogicalFile\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","ProtectList")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ProtectList\" type=\"tns:ArrayOfDFUFileProtect\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","FromRoxieCluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FromRoxieCluster\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","Graphs")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Graphs\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"ECLGraph\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("DFUFileDetail","UserPermission")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"UserPermission\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","ContentType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ContentType\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","CompressedFileSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CompressedFileSize\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","PercentCompressed")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PercentCompressed\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","IsCompressed")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IsCompressed\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","BrowseData")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"BrowseData\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","jsonInfo")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"jsonInfo\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","binInfo")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"binInfo\" type=\"xsd:base64Binary\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","PackageID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PackageID\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","Partition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Partition\" type=\"tns:DFUFilePartition\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","Blooms")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Blooms\" type=\"tns:ArrayOfDFUFileBloom\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","ExpireDays")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ExpireDays\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUFileDetail","KeyType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"KeyType\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUFileStat::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("DFUFileDetail","DFUFileParts"))
			CDFUPart::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("DFUFileDetail","DFUFilePartsOnClusters"))
			CDFUFilePartsOnCluster::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("DFUFileDetail","Superfiles"))
			CDFULogicalFile::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("DFUFileDetail","ProtectList"))
			CDFUFileProtect::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("DFUFileDetail","Partition"))
			CDFUFilePartition::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("DFUFileDetail","Blooms"))
			CDFUFileBloom::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	if (added.getValue("DFUFileBloom") && added.getValue("ArrayOfDFUFileBloom")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUFileBloom\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUFileBloom\" type=\"tns:DFUFileBloom\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUFileBloom",1);
	}
	if (added.getValue("DFUFilePartsOnCluster") && added.getValue("ArrayOfDFUFilePartsOnCluster")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUFilePartsOnCluster\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUFilePartsOnCluster\" type=\"tns:DFUFilePartsOnCluster\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUFilePartsOnCluster",1);
	}
	if (added.getValue("DFUFileProtect") && added.getValue("ArrayOfDFUFileProtect")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUFileProtect\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUFileProtect\" type=\"tns:DFUFileProtect\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUFileProtect",1);
	}
	if (added.getValue("DFULogicalFile") && added.getValue("ArrayOfDFULogicalFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFULogicalFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFULogicalFile\" type=\"tns:DFULogicalFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFULogicalFile",1);
	}
	if (added.getValue("DFUPart") && added.getValue("ArrayOfDFUPart")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUPart\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUPart\" type=\"tns:DFUPart\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUPart",1);
	}
	return schema;
}

void CDFUFileDetail::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileDetail::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUFileDetail","Prefix",1.28);
	info.addMinVersion("DFUFileDetail","NodeGroup",1.28);
	info.addMinVersion("DFUFileDetail","NumParts",1.28);
	info.addMinVersion("DFUFileDetail","FileSizeInt64",1.38);
	info.addDeprVersion("DFUFileDetail","ActualSize",1.23);
	info.addMinVersion("DFUFileDetail","RecordSizeInt64",1.38);
	info.addMinVersion("DFUFileDetail","RecordCountInt64",1.38);
	info.addDeprVersion("DFUFileDetail","Cluster",1.25);
	info.addMinVersion("DFUFileDetail","CsvEscape",1.2);
	info.addDeprVersion("DFUFileDetail","ZipFile",1.22);
	info.addDeprVersion("DFUFileDetail","DFUFileParts",1.25);
	info.addMinVersion("DFUFileDetail","DFUFilePartsOnClusters",1.25);
	info.addMinVersion("DFUFileDetail","Superfiles",1.01);
	info.addMinVersion("DFUFileDetail","ProtectList",1.34);
	info.addMinVersion("DFUFileDetail","FromRoxieCluster",1.06);
	info.addMinVersion("DFUFileDetail","Graphs",1.07);
	info.addMinVersion("DFUFileDetail","UserPermission",1.09);
	info.addMinVersion("DFUFileDetail","ContentType",1.21);
	info.addMinVersion("DFUFileDetail","CompressedFileSize",1.22);
	info.addMinVersion("DFUFileDetail","PercentCompressed",1.34);
	info.addMinVersion("DFUFileDetail","IsCompressed",1.22);
	info.addMinVersion("DFUFileDetail","BrowseData",1.28);
	info.addMinVersion("DFUFileDetail","jsonInfo",1.37);
	info.addMinVersion("DFUFileDetail","binInfo",1.37);
	info.addMinVersion("DFUFileDetail","PackageID",1.38);
	info.addMinVersion("DFUFileDetail","Partition",1.39);
	info.addMinVersion("DFUFileDetail","Blooms",1.39);
	info.addMinVersion("DFUFileDetail","ExpireDays",1.4);
	info.addMinVersion("DFUFileDetail","KeyType",1.41);
	if (!added.getValue("DFUFileBloom"))
	{
		added.setValue("DFUFileBloom",1);
		CDFUFileBloom::getMapInfo(info,added);
	}
	if (!added.getValue("DFUFilePartition"))
	{
		added.setValue("DFUFilePartition",1);
		CDFUFilePartition::getMapInfo(info,added);
	}
	if (!added.getValue("DFUFilePartsOnCluster"))
	{
		added.setValue("DFUFilePartsOnCluster",1);
		CDFUFilePartsOnCluster::getMapInfo(info,added);
	}
	if (!added.getValue("DFUFileProtect"))
	{
		added.setValue("DFUFileProtect",1);
		CDFUFileProtect::getMapInfo(info,added);
	}
	if (!added.getValue("DFUFileStat"))
	{
		added.setValue("DFUFileStat",1);
		CDFUFileStat::getMapInfo(info,added);
	}
	if (!added.getValue("DFULogicalFile"))
	{
		added.setValue("DFULogicalFile",1);
		CDFULogicalFile::getMapInfo(info,added);
	}
	if (!added.getValue("DFUPart"))
	{
		added.setValue("DFUPart",1);
		CDFUPart::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileDetail::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Filename");
	form.appendf("  <tr><td><b>Filename: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileDetail","Prefix")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Prefix");
		form.appendf("  <tr><td><b>Prefix: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","NodeGroup")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NodeGroup");
		form.appendf("  <tr><td><b>NodeGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","NumParts")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("NumParts");
		form.appendf("  <tr><td><b>NumParts: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Dir");
	form.appendf("  <tr><td><b>Dir: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PathMask");
	form.appendf("  <tr><td><b>PathMask: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Filesize");
	form.appendf("  <tr><td><b>Filesize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileDetail","FileSizeInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileSizeInt64");
		form.appendf("  <tr><td><b>FileSizeInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","ActualSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ActualSize");
		form.appendf("  <tr><td><b>ActualSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RecordSize");
	form.appendf("  <tr><td><b>RecordSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RecordCount");
	form.appendf("  <tr><td><b>RecordCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileDetail","RecordSizeInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RecordSizeInt64");
		form.appendf("  <tr><td><b>RecordSizeInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","RecordCountInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RecordCountInt64");
		form.appendf("  <tr><td><b>RecordCountInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileDetail","Cluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Cluster");
		form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobName");
	form.appendf("  <tr><td><b>JobName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Persistent");
	form.appendf("  <tr><td><b>Persistent: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Format");
	form.appendf("  <tr><td><b>Format: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MaxRecordSize");
	form.appendf("  <tr><td><b>MaxRecordSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CsvSeparate");
	form.appendf("  <tr><td><b>CsvSeparate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CsvQuote");
	form.appendf("  <tr><td><b>CsvQuote: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CsvTerminate");
	form.appendf("  <tr><td><b>CsvTerminate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileDetail","CsvEscape")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CsvEscape");
		form.appendf("  <tr><td><b>CsvEscape: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Modified");
	form.appendf("  <tr><td><b>Modified: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Ecl");
	form.appendf("  <tr><td><b>Ecl: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileDetail","ZipFile")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ZipFile");
		
	form.appendf("  <tr><td><b>ZipFile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Stat");
	form.append("<tr>").append("<td><b>Stat: </b></td><td><hr/>");
	CDFUFileStat::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (!context.suppressed("DFUFileDetail","DFUFileParts")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUFileParts");
		form.appendf("<tr><td><b>DFUFileParts: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUFileDetail","DFUFilePartsOnClusters")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUFilePartsOnClusters");
		form.appendf("<tr><td><b>DFUFilePartsOnClusters: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("isSuperfile");
	
	form.appendf("  <tr><td><b>isSuperfile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowFileContent");
	
	form.appendf("  <tr><td><b>ShowFileContent? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("subfiles");
	form.appendf("<tr><td><b>subfiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("DFUFileDetail","Superfiles")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Superfiles");
		form.appendf("<tr><td><b>Superfiles: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUFileDetail","ProtectList")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ProtectList");
		form.appendf("<tr><td><b>ProtectList: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUFileDetail","FromRoxieCluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FromRoxieCluster");
		
	form.appendf("  <tr><td><b>FromRoxieCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUFileDetail","Graphs")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Graphs");
		form.appendf("<tr><td><b>Graphs: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUFileDetail","UserPermission")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("UserPermission");
		form.appendf("  <tr><td><b>UserPermission: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","ContentType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ContentType");
		form.appendf("  <tr><td><b>ContentType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","CompressedFileSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CompressedFileSize");
		form.appendf("  <tr><td><b>CompressedFileSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","PercentCompressed")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PercentCompressed");
		form.appendf("  <tr><td><b>PercentCompressed: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","IsCompressed")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsCompressed");
		
	form.appendf("  <tr><td><b>IsCompressed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUFileDetail","BrowseData")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BrowseData");
		
	form.appendf("  <tr><td><b>BrowseData? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUFileDetail","jsonInfo")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("jsonInfo");
		form.appendf("  <tr><td><b>jsonInfo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","binInfo")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("binInfo");
		form.appendf("  <tr><td><b>binInfo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","PackageID")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PackageID");
		form.appendf("  <tr><td><b>PackageID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","Partition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Partition");
		form.append("<tr>").append("<td><b>Partition: </b></td><td><hr/>");
		CDFUFilePartition::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (!context.suppressed("DFUFileDetail","Blooms")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Blooms");
		form.appendf("<tr><td><b>Blooms: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUFileDetail","ExpireDays")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ExpireDays");
		form.appendf("  <tr><td><b>ExpireDays: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUFileDetail","KeyType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("KeyType");
		form.appendf("  <tr><td><b>KeyType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileDetail::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileDetail::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Filename.marshall(rpc_resp, "Filename", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_Prefix.marshall(rpc_resp, "Prefix", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_NodeGroup.marshall(rpc_resp, "NodeGroup", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_NumParts.marshall(rpc_resp, "NumParts", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
	m_Dir.marshall(rpc_resp, "Dir", "", "", "");
	m_PathMask.marshall(rpc_resp, "PathMask", "", "", "");
	m_Filesize.marshall(rpc_resp, "Filesize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_FileSizeInt64.marshall(rpc_resp, "FileSizeInt64", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.23))
		m_ActualSize.marshall(rpc_resp, "ActualSize", "", "", "");
	m_RecordSize.marshall(rpc_resp, "RecordSize", "", "", "");
	m_RecordCount.marshall(rpc_resp, "RecordCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_RecordSizeInt64.marshall(rpc_resp, "RecordSizeInt64", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_RecordCountInt64.marshall(rpc_resp, "RecordCountInt64", "", "", "");
	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.25))
		m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_JobName.marshall(rpc_resp, "JobName", "", "", "");
	m_Persistent.marshall(rpc_resp, "Persistent", "", "", "");
	m_Format.marshall(rpc_resp, "Format", "", "", "");
	m_MaxRecordSize.marshall(rpc_resp, "MaxRecordSize", "", "", "");
	m_CsvSeparate.marshall(rpc_resp, "CsvSeparate", "", "", "");
	m_CsvQuote.marshall(rpc_resp, "CsvQuote", "", "", "");
	m_CsvTerminate.marshall(rpc_resp, "CsvTerminate", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_CsvEscape.marshall(rpc_resp, "CsvEscape", "", "", "");
	m_Modified.marshall(rpc_resp, "Modified", "", "", "");
	m_Ecl.marshall(rpc_resp, "Ecl", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.22))
		m_ZipFile.marshall(rpc_resp, "ZipFile", "", "", "");
	m_Stat.marshall(rpc_resp, "Stat", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.25))
		m_DFUFileParts.marshall(rpc_resp, "DFUFileParts", "DFUPart");
	if ((clientVer==-1.0 || clientVer>=1.25))
		m_DFUFilePartsOnClusters.marshall(rpc_resp, "DFUFilePartsOnClusters", "DFUFilePartsOnCluster");
	m_isSuperfile.marshall(rpc_resp, "isSuperfile", "", "", "");
	m_ShowFileContent.marshall(rpc_resp, "ShowFileContent", "", "", "");
	m_subfiles.marshall(rpc_resp, "subfiles", "Item");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Superfiles.marshall(rpc_resp, "Superfiles", "DFULogicalFile");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_ProtectList.marshall(rpc_resp, "ProtectList", "DFUFileProtect");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_FromRoxieCluster.marshall(rpc_resp, "FromRoxieCluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.07))
		m_Graphs.marshall(rpc_resp, "Graphs", "ECLGraph");
	if ((clientVer==-1.0 || clientVer>=1.09))
		m_UserPermission.marshall(rpc_resp, "UserPermission", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_ContentType.marshall(rpc_resp, "ContentType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_CompressedFileSize.marshall(rpc_resp, "CompressedFileSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_PercentCompressed.marshall(rpc_resp, "PercentCompressed", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_IsCompressed.marshall(rpc_resp, "IsCompressed", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_BrowseData.marshall(rpc_resp, "BrowseData", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_jsonInfo.marshall(rpc_resp, "jsonInfo", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_binInfo.marshall(rpc_resp, "binInfo", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_PackageID.marshall(rpc_resp, "PackageID", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_Partition.marshall(rpc_resp, "Partition", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_Blooms.marshall(rpc_resp, "Blooms", "DFUFileBloom");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_ExpireDays.marshall(rpc_resp, "ExpireDays", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.41))
		m_KeyType.marshall(rpc_resp, "KeyType", "", "", "");
}


void CDFUFileDetail::copy(CDFUFileDetail &from)
{
	m_Name.copy(from.m_Name);
	m_Filename.copy(from.m_Filename);
	m_Prefix.copy(from.m_Prefix);
	m_NodeGroup.copy(from.m_NodeGroup);
	m_NumParts.copy(from.m_NumParts);
	m_Description.copy(from.m_Description);
	m_Dir.copy(from.m_Dir);
	m_PathMask.copy(from.m_PathMask);
	m_Filesize.copy(from.m_Filesize);
	m_FileSizeInt64.copy(from.m_FileSizeInt64);
	m_ActualSize.copy(from.m_ActualSize);
	m_RecordSize.copy(from.m_RecordSize);
	m_RecordCount.copy(from.m_RecordCount);
	m_RecordSizeInt64.copy(from.m_RecordSizeInt64);
	m_RecordCountInt64.copy(from.m_RecordCountInt64);
	m_Wuid.copy(from.m_Wuid);
	m_Owner.copy(from.m_Owner);
	m_Cluster.copy(from.m_Cluster);
	m_JobName.copy(from.m_JobName);
	m_Persistent.copy(from.m_Persistent);
	m_Format.copy(from.m_Format);
	m_MaxRecordSize.copy(from.m_MaxRecordSize);
	m_CsvSeparate.copy(from.m_CsvSeparate);
	m_CsvQuote.copy(from.m_CsvQuote);
	m_CsvTerminate.copy(from.m_CsvTerminate);
	m_CsvEscape.copy(from.m_CsvEscape);
	m_Modified.copy(from.m_Modified);
	m_Ecl.copy(from.m_Ecl);
	m_ZipFile.copy(from.m_ZipFile);
	m_Stat.copy(from.m_Stat);
	m_DFUFileParts.copy(from.m_DFUFileParts);
	m_DFUFilePartsOnClusters.copy(from.m_DFUFilePartsOnClusters);
	m_isSuperfile.copy(from.m_isSuperfile);
	m_ShowFileContent.copy(from.m_ShowFileContent);
	m_subfiles.copy(from.m_subfiles);
	m_Superfiles.copy(from.m_Superfiles);
	m_ProtectList.copy(from.m_ProtectList);
	m_FromRoxieCluster.copy(from.m_FromRoxieCluster);
	m_Graphs.copy(from.m_Graphs);
	m_UserPermission.copy(from.m_UserPermission);
	m_ContentType.copy(from.m_ContentType);
	m_CompressedFileSize.copy(from.m_CompressedFileSize);
	m_PercentCompressed.copy(from.m_PercentCompressed);
	m_IsCompressed.copy(from.m_IsCompressed);
	m_BrowseData.copy(from.m_BrowseData);
	m_jsonInfo.copy(from.m_jsonInfo);
	m_binInfo.copy(from.m_binInfo);
	m_PackageID.copy(from.m_PackageID);
	m_Partition.copy(from.m_Partition);
	m_Blooms.copy(from.m_Blooms);
	m_ExpireDays.copy(from.m_ExpireDays);
	m_KeyType.copy(from.m_KeyType);
}


void CDFUFileDetail::copy(IConstDFUFileDetail &ifrom)
{
	setName(ifrom.getName());
	setFilename(ifrom.getFilename());
	setPrefix(ifrom.getPrefix());
	setNodeGroup(ifrom.getNodeGroup());
	setNumParts(ifrom.getNumParts());
	setDescription(ifrom.getDescription());
	setDir(ifrom.getDir());
	setPathMask(ifrom.getPathMask());
	setFilesize(ifrom.getFilesize());
	setFileSizeInt64(ifrom.getFileSizeInt64());
	setActualSize(ifrom.getActualSize());
	setRecordSize(ifrom.getRecordSize());
	setRecordCount(ifrom.getRecordCount());
	setRecordSizeInt64(ifrom.getRecordSizeInt64());
	setRecordCountInt64(ifrom.getRecordCountInt64());
	setWuid(ifrom.getWuid());
	setOwner(ifrom.getOwner());
	setCluster(ifrom.getCluster());
	setJobName(ifrom.getJobName());
	setPersistent(ifrom.getPersistent());
	setFormat(ifrom.getFormat());
	setMaxRecordSize(ifrom.getMaxRecordSize());
	setCsvSeparate(ifrom.getCsvSeparate());
	setCsvQuote(ifrom.getCsvQuote());
	setCsvTerminate(ifrom.getCsvTerminate());
	setCsvEscape(ifrom.getCsvEscape());
	setModified(ifrom.getModified());
	setEcl(ifrom.getEcl());
	setZipFile(ifrom.getZipFile());
	setStat(ifrom.getStat());
	setDFUFileParts(ifrom.getDFUFileParts());
	setDFUFilePartsOnClusters(ifrom.getDFUFilePartsOnClusters());
	setIsSuperfile(ifrom.getIsSuperfile());
	setShowFileContent(ifrom.getShowFileContent());
	setSubfiles(ifrom.getSubfiles());
	setSuperfiles(ifrom.getSuperfiles());
	setProtectList(ifrom.getProtectList());
	setFromRoxieCluster(ifrom.getFromRoxieCluster());
	setGraphs(ifrom.getGraphs());
	setUserPermission(ifrom.getUserPermission());
	setContentType(ifrom.getContentType());
	setCompressedFileSize(ifrom.getCompressedFileSize());
	setPercentCompressed(ifrom.getPercentCompressed());
	setIsCompressed(ifrom.getIsCompressed());
	setBrowseData(ifrom.getBrowseData());
	setJsonInfo(ifrom.getJsonInfo());
	setBinInfo(ifrom.getBinInfo());
	setPackageID(ifrom.getPackageID());
	setPartition(ifrom.getPartition());
	setBlooms(ifrom.getBlooms());
	setExpireDays(ifrom.getExpireDays());
	setKeyType(ifrom.getKeyType());
}


void CDFUFileDetail::getAttributes(IProperties &attributes)
{
}


void CDFUFileDetail::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Filename.toStr(ctx, buffer, "Filename", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_Prefix.toStr(ctx, buffer, "Prefix", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_NodeGroup.toStr(ctx, buffer, "NodeGroup", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_NumParts.toStr(ctx, buffer, "NumParts", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	m_Dir.toStr(ctx, buffer, "Dir", "", true, "", "");
	m_PathMask.toStr(ctx, buffer, "PathMask", "", true, "", "");
	m_Filesize.toStr(ctx, buffer, "Filesize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_FileSizeInt64.toStr(ctx, buffer, "FileSizeInt64", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.23))
		m_ActualSize.toStr(ctx, buffer, "ActualSize", "", true, "", "");
	m_RecordSize.toStr(ctx, buffer, "RecordSize", "", true, "", "");
	m_RecordCount.toStr(ctx, buffer, "RecordCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_RecordSizeInt64.toStr(ctx, buffer, "RecordSizeInt64", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_RecordCountInt64.toStr(ctx, buffer, "RecordCountInt64", "", true, "", "");
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.25))
		m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_JobName.toStr(ctx, buffer, "JobName", "", true, "", "");
	m_Persistent.toStr(ctx, buffer, "Persistent", "", true, "", "");
	m_Format.toStr(ctx, buffer, "Format", "", true, "", "");
	m_MaxRecordSize.toStr(ctx, buffer, "MaxRecordSize", "", true, "", "");
	m_CsvSeparate.toStr(ctx, buffer, "CsvSeparate", "", true, "", "");
	m_CsvQuote.toStr(ctx, buffer, "CsvQuote", "", true, "", "");
	m_CsvTerminate.toStr(ctx, buffer, "CsvTerminate", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_CsvEscape.toStr(ctx, buffer, "CsvEscape", "", true, "", "");
	m_Modified.toStr(ctx, buffer, "Modified", "", true, "", "");
	m_Ecl.toStr(ctx, buffer, "Ecl", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.22))
		m_ZipFile.toStr(ctx, buffer, "ZipFile", "", true, "", "");
	m_Stat.toStr(ctx, buffer, "Stat", "", false, "", "");
	if ((clientVer==-1.0 || clientVer<1.25))
		m_DFUFileParts.toStr(ctx, buffer, "DFUFileParts", "DFUPart");
	if ((clientVer==-1.0 || clientVer>=1.25))
		m_DFUFilePartsOnClusters.toStr(ctx, buffer, "DFUFilePartsOnClusters", "DFUFilePartsOnCluster");
	m_isSuperfile.toStr(ctx, buffer, "isSuperfile", "", true, "", "");
	m_ShowFileContent.toStr(ctx, buffer, "ShowFileContent", "", true, "", "");
	m_subfiles.toStr(ctx, buffer, "subfiles", "Item");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Superfiles.toStr(ctx, buffer, "Superfiles", "DFULogicalFile");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_ProtectList.toStr(ctx, buffer, "ProtectList", "DFUFileProtect");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_FromRoxieCluster.toStr(ctx, buffer, "FromRoxieCluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.07))
		m_Graphs.toStr(ctx, buffer, "Graphs", "ECLGraph");
	if ((clientVer==-1.0 || clientVer>=1.09))
		m_UserPermission.toStr(ctx, buffer, "UserPermission", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_ContentType.toStr(ctx, buffer, "ContentType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_CompressedFileSize.toStr(ctx, buffer, "CompressedFileSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_PercentCompressed.toStr(ctx, buffer, "PercentCompressed", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_IsCompressed.toStr(ctx, buffer, "IsCompressed", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.28))
		m_BrowseData.toStr(ctx, buffer, "BrowseData", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_jsonInfo.toStr(ctx, buffer, "jsonInfo", "", true, "", "", false);
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_binInfo.toStr(ctx, buffer, "binInfo", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_PackageID.toStr(ctx, buffer, "PackageID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_Partition.toStr(ctx, buffer, "Partition", "", false, "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_Blooms.toStr(ctx, buffer, "Blooms", "DFUFileBloom");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_ExpireDays.toStr(ctx, buffer, "ExpireDays", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.41))
		m_KeyType.toStr(ctx, buffer, "KeyType", "", true, "", "");
}


void CDFUFileDetail::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileDetail::serializer(IEspContext* ctx, IConstDFUFileDetail &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileDetail>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Filename
	{
		const char* s = src.getFilename();
		if (s && *s)
		{
			buffer.append("<Filename>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filename>");
		}
	}
	// field Prefix
	if ((clientVer==-1.0 || clientVer>=1.28))
	{
		const char* s = src.getPrefix();
		if (s && *s)
		{
			buffer.append("<Prefix>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Prefix>");
		}
	}
	// field NodeGroup
	if ((clientVer==-1.0 || clientVer>=1.28))
	{
		const char* s = src.getNodeGroup();
		if (s && *s)
		{
			buffer.append("<NodeGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NodeGroup>");
		}
	}
	// field NumParts
	if ((clientVer==-1.0 || clientVer>=1.28))
	{
		int n = src.getNumParts();
		if (n)
			buffer.appendf("<NumParts>%d</NumParts>", n);
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field Dir
	{
		const char* s = src.getDir();
		if (s && *s)
		{
			buffer.append("<Dir>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Dir>");
		}
	}
	// field PathMask
	{
		const char* s = src.getPathMask();
		if (s && *s)
		{
			buffer.append("<PathMask>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PathMask>");
		}
	}
	// field Filesize
	{
		const char* s = src.getFilesize();
		if (s && *s)
		{
			buffer.append("<Filesize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filesize>");
		}
	}
	// field FileSizeInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=FileSizeInt64
		buffer.append("<FileSizeInt64>");
		buffer.append(src.getFileSizeInt64());
		buffer.append("</FileSizeInt64>");
	}
	// field ActualSize
	if ((clientVer==-1.0 || clientVer<1.23))
	{
		const char* s = src.getActualSize();
		if (s && *s)
		{
			buffer.append("<ActualSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ActualSize>");
		}
	}
	// field RecordSize
	{
		const char* s = src.getRecordSize();
		if (s && *s)
		{
			buffer.append("<RecordSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RecordSize>");
		}
	}
	// field RecordCount
	{
		const char* s = src.getRecordCount();
		if (s && *s)
		{
			buffer.append("<RecordCount>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RecordCount>");
		}
	}
	// field RecordSizeInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=RecordSizeInt64
		buffer.append("<RecordSizeInt64>");
		buffer.append(src.getRecordSizeInt64());
		buffer.append("</RecordSizeInt64>");
	}
	// field RecordCountInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=RecordCountInt64
		buffer.append("<RecordCountInt64>");
		buffer.append(src.getRecordCountInt64());
		buffer.append("</RecordCountInt64>");
	}
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field Cluster
	if ((clientVer==-1.0 || clientVer<1.25))
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field JobName
	{
		const char* s = src.getJobName();
		if (s && *s)
		{
			buffer.append("<JobName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobName>");
		}
	}
	// field Persistent
	{
		const char* s = src.getPersistent();
		if (s && *s)
		{
			buffer.append("<Persistent>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Persistent>");
		}
	}
	// field Format
	{
		const char* s = src.getFormat();
		if (s && *s)
		{
			buffer.append("<Format>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Format>");
		}
	}
	// field MaxRecordSize
	{
		const char* s = src.getMaxRecordSize();
		if (s && *s)
		{
			buffer.append("<MaxRecordSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MaxRecordSize>");
		}
	}
	// field CsvSeparate
	{
		const char* s = src.getCsvSeparate();
		if (s && *s)
		{
			buffer.append("<CsvSeparate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CsvSeparate>");
		}
	}
	// field CsvQuote
	{
		const char* s = src.getCsvQuote();
		if (s && *s)
		{
			buffer.append("<CsvQuote>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CsvQuote>");
		}
	}
	// field CsvTerminate
	{
		const char* s = src.getCsvTerminate();
		if (s && *s)
		{
			buffer.append("<CsvTerminate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CsvTerminate>");
		}
	}
	// field CsvEscape
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		const char* s = src.getCsvEscape();
		if (s && *s)
		{
			buffer.append("<CsvEscape>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CsvEscape>");
		}
	}
	// field Modified
	{
		const char* s = src.getModified();
		if (s && *s)
		{
			buffer.append("<Modified>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Modified>");
		}
	}
	// field Ecl
	{
		const char* s = src.getEcl();
		if (s && *s)
		{
			buffer.append("<Ecl>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Ecl>");
		}
	}
	// field ZipFile
	if ((clientVer==-1.0 || clientVer<1.22))
	{
		bool b = src.getZipFile();
		if (b)
			buffer.appendf("<ZipFile>1</ZipFile>");
	}
	// field Stat
	{
		StringBuffer tmp;
		CDFUFileStat::serializer(ctx,src.getStat(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Stat>%s</Stat>",tmp.str());
	}
	// field DFUFileParts
	if ((clientVer==-1.0 || clientVer<1.25))
	{
		IArrayOf<IConstDFUPart>& v = src.getDFUFileParts();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUFileParts>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUPart::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUFileParts>");
	}
	// field DFUFilePartsOnClusters
	if ((clientVer==-1.0 || clientVer>=1.25))
	{
		IArrayOf<IConstDFUFilePartsOnCluster>& v = src.getDFUFilePartsOnClusters();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUFilePartsOnClusters>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUFilePartsOnCluster::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUFilePartsOnClusters>");
	}
	// field isSuperfile
	{
		bool b = src.getIsSuperfile();
		if (b)
			buffer.appendf("<isSuperfile>1</isSuperfile>");
	}
	// field ShowFileContent
	{
		bool b = src.getShowFileContent();
		if (b)
			buffer.appendf("<ShowFileContent>1</ShowFileContent>");
	}
	// field subfiles
	{
		StringArray& v = src.getSubfiles();
		if (v.length()>0)
			buffer.append("<subfiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</subfiles>");
	}
	// field Superfiles
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		IArrayOf<IConstDFULogicalFile>& v = src.getSuperfiles();
		int size = v.length();
		if (size>0)
			buffer.append("<Superfiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFULogicalFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Superfiles>");
	}
	// field ProtectList
	if ((clientVer==-1.0 || clientVer>=1.34))
	{
		IArrayOf<IConstDFUFileProtect>& v = src.getProtectList();
		int size = v.length();
		if (size>0)
			buffer.append("<ProtectList>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUFileProtect::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ProtectList>");
	}
	// field FromRoxieCluster
	if ((clientVer==-1.0 || clientVer>=1.06))
	{
		bool b = src.getFromRoxieCluster();
		if (b)
			buffer.appendf("<FromRoxieCluster>1</FromRoxieCluster>");
	}
	// field Graphs
	if ((clientVer==-1.0 || clientVer>=1.07))
	{
		StringArray& v = src.getGraphs();
		if (v.length()>0)
			buffer.append("<Graphs>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<ECLGraph>%s</ECLGraph>",v.item(i));
		if (v.length()>0)
			buffer.append("</Graphs>");
	}
	// field UserPermission
	if ((clientVer==-1.0 || clientVer>=1.09))
	{
		const char* s = src.getUserPermission();
		if (s && *s)
		{
			buffer.append("<UserPermission>");
			encodeUtf8XML(s,buffer);
			buffer.append("</UserPermission>");
		}
	}
	// field ContentType
	if ((clientVer==-1.0 || clientVer>=1.21))
	{
		const char* s = src.getContentType();
		if (s && *s)
		{
			buffer.append("<ContentType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ContentType>");
		}
	}
	// field CompressedFileSize
	if ((clientVer==-1.0 || clientVer>=1.22))
	{
		//*** default kind: TK_INT; type=int64, name=CompressedFileSize
		buffer.append("<CompressedFileSize>");
		buffer.append(src.getCompressedFileSize());
		buffer.append("</CompressedFileSize>");
	}
	// field PercentCompressed
	if ((clientVer==-1.0 || clientVer>=1.34))
	{
		const char* s = src.getPercentCompressed();
		if (s && *s)
		{
			buffer.append("<PercentCompressed>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PercentCompressed>");
		}
	}
	// field IsCompressed
	if ((clientVer==-1.0 || clientVer>=1.22))
	{
		bool b = src.getIsCompressed();
		if (b)
			buffer.appendf("<IsCompressed>1</IsCompressed>");
	}
	// field BrowseData
	if ((clientVer==-1.0 || clientVer>=1.28))
	{
		bool b = src.getBrowseData();
		if (b)
			buffer.appendf("<BrowseData>1</BrowseData>");
	}
	// field jsonInfo
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		const char* s = src.getJsonInfo();
		if (s && *s)
		{
			buffer.append("<jsonInfo>");
			encodeUtf8XML(s,buffer);
			buffer.append("</jsonInfo>");
		}
	}
	// field binInfo
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getBinInfo().toByteArray(), src.getBinInfo().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<binInfo>%s</binInfo>",tmp.str());
	}
	// field PackageID
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		const char* s = src.getPackageID();
		if (s && *s)
		{
			buffer.append("<PackageID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PackageID>");
		}
	}
	// field Partition
	if ((clientVer==-1.0 || clientVer>=1.39))
	{
		StringBuffer tmp;
		CDFUFilePartition::serializer(ctx,src.getPartition(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Partition>%s</Partition>",tmp.str());
	}
	// field Blooms
	if ((clientVer==-1.0 || clientVer>=1.39))
	{
		IArrayOf<IConstDFUFileBloom>& v = src.getBlooms();
		int size = v.length();
		if (size>0)
			buffer.append("<Blooms>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUFileBloom::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Blooms>");
	}
	// field ExpireDays
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		int n = src.getExpireDays();
		if (n)
			buffer.appendf("<ExpireDays>%d</ExpireDays>", n);
	}
	// field KeyType
	if ((clientVer==-1.0 || clientVer>=1.41))
	{
		const char* s = src.getKeyType();
		if (s && *s)
		{
			buffer.append("<KeyType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</KeyType>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUFileDetail>");
}

bool CDFUFileDetail::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Filename.unmarshall(rpc_request, "Filename", basepath);
	hasValue |= m_Prefix.unmarshall(rpc_request, "Prefix", basepath);
	hasValue |= m_NodeGroup.unmarshall(rpc_request, "NodeGroup", basepath);
	hasValue |= m_NumParts.unmarshall(rpc_request, "NumParts", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_Dir.unmarshall(rpc_request, "Dir", basepath);
	hasValue |= m_PathMask.unmarshall(rpc_request, "PathMask", basepath);
	hasValue |= m_Filesize.unmarshall(rpc_request, "Filesize", basepath);
	hasValue |= m_FileSizeInt64.unmarshall(rpc_request, "FileSizeInt64", basepath);
	hasValue |= m_ActualSize.unmarshall(rpc_request, "ActualSize", basepath);
	hasValue |= m_RecordSize.unmarshall(rpc_request, "RecordSize", basepath);
	hasValue |= m_RecordCount.unmarshall(rpc_request, "RecordCount", basepath);
	hasValue |= m_RecordSizeInt64.unmarshall(rpc_request, "RecordSizeInt64", basepath);
	hasValue |= m_RecordCountInt64.unmarshall(rpc_request, "RecordCountInt64", basepath);
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_JobName.unmarshall(rpc_request, "JobName", basepath);
	hasValue |= m_Persistent.unmarshall(rpc_request, "Persistent", basepath);
	hasValue |= m_Format.unmarshall(rpc_request, "Format", basepath);
	hasValue |= m_MaxRecordSize.unmarshall(rpc_request, "MaxRecordSize", basepath);
	hasValue |= m_CsvSeparate.unmarshall(rpc_request, "CsvSeparate", basepath);
	hasValue |= m_CsvQuote.unmarshall(rpc_request, "CsvQuote", basepath);
	hasValue |= m_CsvTerminate.unmarshall(rpc_request, "CsvTerminate", basepath);
	hasValue |= m_CsvEscape.unmarshall(rpc_request, "CsvEscape", basepath);
	hasValue |= m_Modified.unmarshall(rpc_request, "Modified", basepath);
	hasValue |= m_Ecl.unmarshall(rpc_request, "Ecl", basepath);
	hasValue |= m_ZipFile.unmarshall(rpc_request, "ZipFile", basepath);
	hasValue |= m_Stat.unmarshall(rpc_request, "Stat", basepath);
	hasValue |= m_DFUFileParts.unmarshall(rpc_request, "DFUFileParts", basepath);
	hasValue |= m_DFUFilePartsOnClusters.unmarshall(rpc_request, "DFUFilePartsOnClusters", basepath);
	hasValue |= m_isSuperfile.unmarshall(rpc_request, "isSuperfile", basepath);
	hasValue |= m_ShowFileContent.unmarshall(rpc_request, "ShowFileContent", basepath);
	hasValue |= m_subfiles.unmarshall(rpc_request, "subfiles", basepath);
	hasValue |= m_Superfiles.unmarshall(rpc_request, "Superfiles", basepath);
	hasValue |= m_ProtectList.unmarshall(rpc_request, "ProtectList", basepath);
	hasValue |= m_FromRoxieCluster.unmarshall(rpc_request, "FromRoxieCluster", basepath);
	hasValue |= m_Graphs.unmarshall(rpc_request, "Graphs", basepath);
	hasValue |= m_UserPermission.unmarshall(rpc_request, "UserPermission", basepath);
	hasValue |= m_ContentType.unmarshall(rpc_request, "ContentType", basepath);
	hasValue |= m_CompressedFileSize.unmarshall(rpc_request, "CompressedFileSize", basepath);
	hasValue |= m_PercentCompressed.unmarshall(rpc_request, "PercentCompressed", basepath);
	hasValue |= m_IsCompressed.unmarshall(rpc_request, "IsCompressed", basepath);
	hasValue |= m_BrowseData.unmarshall(rpc_request, "BrowseData", basepath);
	hasValue |= m_jsonInfo.unmarshall(rpc_request, "jsonInfo", basepath);
	hasValue |= m_binInfo.unmarshall(rpc_request, "binInfo", basepath);
	hasValue |= m_PackageID.unmarshall(rpc_request, "PackageID", basepath);
	hasValue |= m_Partition.unmarshall(rpc_request, "Partition", basepath);
	hasValue |= m_Blooms.unmarshall(rpc_request, "Blooms", basepath);
	hasValue |= m_ExpireDays.unmarshall(rpc_request, "ExpireDays", basepath);
	hasValue |= m_KeyType.unmarshall(rpc_request, "KeyType", basepath);
	return hasValue;
}

bool CDFUFileDetail::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Filename.unmarshall(ctx, soapval, "Filename");
	hasValue |= m_Prefix.unmarshall(ctx, soapval, "Prefix");
	hasValue |= m_NodeGroup.unmarshall(ctx, soapval, "NodeGroup");
	hasValue |= m_NumParts.unmarshall(ctx, soapval, "NumParts");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_Dir.unmarshall(ctx, soapval, "Dir");
	hasValue |= m_PathMask.unmarshall(ctx, soapval, "PathMask");
	hasValue |= m_Filesize.unmarshall(ctx, soapval, "Filesize");
	hasValue |= m_FileSizeInt64.unmarshall(ctx, soapval, "FileSizeInt64");
	hasValue |= m_ActualSize.unmarshall(ctx, soapval, "ActualSize");
	hasValue |= m_RecordSize.unmarshall(ctx, soapval, "RecordSize");
	hasValue |= m_RecordCount.unmarshall(ctx, soapval, "RecordCount");
	hasValue |= m_RecordSizeInt64.unmarshall(ctx, soapval, "RecordSizeInt64");
	hasValue |= m_RecordCountInt64.unmarshall(ctx, soapval, "RecordCountInt64");
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_JobName.unmarshall(ctx, soapval, "JobName");
	hasValue |= m_Persistent.unmarshall(ctx, soapval, "Persistent");
	hasValue |= m_Format.unmarshall(ctx, soapval, "Format");
	hasValue |= m_MaxRecordSize.unmarshall(ctx, soapval, "MaxRecordSize");
	hasValue |= m_CsvSeparate.unmarshall(ctx, soapval, "CsvSeparate");
	hasValue |= m_CsvQuote.unmarshall(ctx, soapval, "CsvQuote");
	hasValue |= m_CsvTerminate.unmarshall(ctx, soapval, "CsvTerminate");
	hasValue |= m_CsvEscape.unmarshall(ctx, soapval, "CsvEscape");
	hasValue |= m_Modified.unmarshall(ctx, soapval, "Modified");
	hasValue |= m_Ecl.unmarshall(ctx, soapval, "Ecl");
	hasValue |= m_ZipFile.unmarshall(ctx, soapval, "ZipFile");
	hasValue |= m_Stat.unmarshall(ctx, soapval, "Stat");
	hasValue |= m_DFUFileParts.unmarshall(ctx, soapval, "DFUFileParts");
	hasValue |= m_DFUFilePartsOnClusters.unmarshall(ctx, soapval, "DFUFilePartsOnClusters");
	hasValue |= m_isSuperfile.unmarshall(ctx, soapval, "isSuperfile");
	hasValue |= m_ShowFileContent.unmarshall(ctx, soapval, "ShowFileContent");
	hasValue |= m_subfiles.unmarshall(ctx, soapval, "subfiles");
	hasValue |= m_Superfiles.unmarshall(ctx, soapval, "Superfiles");
	hasValue |= m_ProtectList.unmarshall(ctx, soapval, "ProtectList");
	hasValue |= m_FromRoxieCluster.unmarshall(ctx, soapval, "FromRoxieCluster");
	hasValue |= m_Graphs.unmarshall(ctx, soapval, "Graphs");
	hasValue |= m_UserPermission.unmarshall(ctx, soapval, "UserPermission");
	hasValue |= m_ContentType.unmarshall(ctx, soapval, "ContentType");
	hasValue |= m_CompressedFileSize.unmarshall(ctx, soapval, "CompressedFileSize");
	hasValue |= m_PercentCompressed.unmarshall(ctx, soapval, "PercentCompressed");
	hasValue |= m_IsCompressed.unmarshall(ctx, soapval, "IsCompressed");
	hasValue |= m_BrowseData.unmarshall(ctx, soapval, "BrowseData");
	hasValue |= m_jsonInfo.unmarshall(ctx, soapval, "jsonInfo");
	hasValue |= m_binInfo.unmarshall(ctx, soapval, "binInfo");
	hasValue |= m_PackageID.unmarshall(ctx, soapval, "PackageID");
	hasValue |= m_Partition.unmarshall(ctx, soapval, "Partition");
	hasValue |= m_Blooms.unmarshall(ctx, soapval, "Blooms");
	hasValue |= m_ExpireDays.unmarshall(ctx, soapval, "ExpireDays");
	hasValue |= m_KeyType.unmarshall(ctx, soapval, "KeyType");
	return hasValue;
}

bool CDFUFileDetail::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Filename.unmarshall(ctx, params, attachments, "Filename", basepath);
	hasValue |= m_Prefix.unmarshall(ctx, params, attachments, "Prefix", basepath);
	hasValue |= m_NodeGroup.unmarshall(ctx, params, attachments, "NodeGroup", basepath);
	hasValue |= m_NumParts.unmarshall(ctx, params, attachments, "NumParts", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_Dir.unmarshall(ctx, params, attachments, "Dir", basepath);
	hasValue |= m_PathMask.unmarshall(ctx, params, attachments, "PathMask", basepath);
	hasValue |= m_Filesize.unmarshall(ctx, params, attachments, "Filesize", basepath);
	hasValue |= m_FileSizeInt64.unmarshall(ctx, params, attachments, "FileSizeInt64", basepath);
	hasValue |= m_ActualSize.unmarshall(ctx, params, attachments, "ActualSize", basepath);
	hasValue |= m_RecordSize.unmarshall(ctx, params, attachments, "RecordSize", basepath);
	hasValue |= m_RecordCount.unmarshall(ctx, params, attachments, "RecordCount", basepath);
	hasValue |= m_RecordSizeInt64.unmarshall(ctx, params, attachments, "RecordSizeInt64", basepath);
	hasValue |= m_RecordCountInt64.unmarshall(ctx, params, attachments, "RecordCountInt64", basepath);
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_JobName.unmarshall(ctx, params, attachments, "JobName", basepath);
	hasValue |= m_Persistent.unmarshall(ctx, params, attachments, "Persistent", basepath);
	hasValue |= m_Format.unmarshall(ctx, params, attachments, "Format", basepath);
	hasValue |= m_MaxRecordSize.unmarshall(ctx, params, attachments, "MaxRecordSize", basepath);
	hasValue |= m_CsvSeparate.unmarshall(ctx, params, attachments, "CsvSeparate", basepath);
	hasValue |= m_CsvQuote.unmarshall(ctx, params, attachments, "CsvQuote", basepath);
	hasValue |= m_CsvTerminate.unmarshall(ctx, params, attachments, "CsvTerminate", basepath);
	hasValue |= m_CsvEscape.unmarshall(ctx, params, attachments, "CsvEscape", basepath);
	hasValue |= m_Modified.unmarshall(ctx, params, attachments, "Modified", basepath);
	hasValue |= m_Ecl.unmarshall(ctx, params, attachments, "Ecl", basepath);
	hasValue |= m_ZipFile.unmarshall(ctx, params, attachments, "ZipFile", basepath);
	hasValue |= m_Stat.unmarshall(ctx, params, attachments, "Stat", basepath);
	hasValue |= m_DFUFileParts.unmarshall(ctx, params, attachments, "DFUFileParts", basepath);
	hasValue |= m_DFUFilePartsOnClusters.unmarshall(ctx, params, attachments, "DFUFilePartsOnClusters", basepath);
	hasValue |= m_isSuperfile.unmarshall(ctx, params, attachments, "isSuperfile", basepath);
	hasValue |= m_ShowFileContent.unmarshall(ctx, params, attachments, "ShowFileContent", basepath);
	hasValue |= m_subfiles.unmarshall(ctx, params, attachments, "subfiles", basepath);
	hasValue |= m_Superfiles.unmarshall(ctx, params, attachments, "Superfiles", basepath);
	hasValue |= m_ProtectList.unmarshall(ctx, params, attachments, "ProtectList", basepath);
	hasValue |= m_FromRoxieCluster.unmarshall(ctx, params, attachments, "FromRoxieCluster", basepath);
	hasValue |= m_Graphs.unmarshall(ctx, params, attachments, "Graphs", basepath);
	hasValue |= m_UserPermission.unmarshall(ctx, params, attachments, "UserPermission", basepath);
	hasValue |= m_ContentType.unmarshall(ctx, params, attachments, "ContentType", basepath);
	hasValue |= m_CompressedFileSize.unmarshall(ctx, params, attachments, "CompressedFileSize", basepath);
	hasValue |= m_PercentCompressed.unmarshall(ctx, params, attachments, "PercentCompressed", basepath);
	hasValue |= m_IsCompressed.unmarshall(ctx, params, attachments, "IsCompressed", basepath);
	hasValue |= m_BrowseData.unmarshall(ctx, params, attachments, "BrowseData", basepath);
	hasValue |= m_jsonInfo.unmarshall(ctx, params, attachments, "jsonInfo", basepath);
	hasValue |= m_binInfo.unmarshall(ctx, params, attachments, "binInfo", basepath);
	hasValue |= m_PackageID.unmarshall(ctx, params, attachments, "PackageID", basepath);
	hasValue |= m_Partition.unmarshall(ctx, params, attachments, "Partition", basepath);
	hasValue |= m_Blooms.unmarshall(ctx, params, attachments, "Blooms", basepath);
	hasValue |= m_ExpireDays.unmarshall(ctx, params, attachments, "ExpireDays", basepath);
	hasValue |= m_KeyType.unmarshall(ctx, params, attachments, "KeyType", basepath);
	return hasValue;
}

const char * CDFUFileDetail::getName() { return m_Name.query();}
const char * CDFUFileDetail::getFilename() { return m_Filename.query();}
const char * CDFUFileDetail::getPrefix() { return m_Prefix.query();}
const char * CDFUFileDetail::getNodeGroup() { return m_NodeGroup.query();}
bool CDFUFileDetail::getNumParts_isNull(){return m_NumParts.is_nil();}
int CDFUFileDetail::getNumParts() { return m_NumParts;}
const char * CDFUFileDetail::getDescription() { return m_Description.query();}
const char * CDFUFileDetail::getDir() { return m_Dir.query();}
const char * CDFUFileDetail::getPathMask() { return m_PathMask.query();}
const char * CDFUFileDetail::getFilesize() { return m_Filesize.query();}
bool CDFUFileDetail::getFileSizeInt64_isNull(){return m_FileSizeInt64.is_nil();}
__int64 CDFUFileDetail::getFileSizeInt64() { return m_FileSizeInt64;}
const char * CDFUFileDetail::getActualSize() { return m_ActualSize.query();}
const char * CDFUFileDetail::getRecordSize() { return m_RecordSize.query();}
const char * CDFUFileDetail::getRecordCount() { return m_RecordCount.query();}
bool CDFUFileDetail::getRecordSizeInt64_isNull(){return m_RecordSizeInt64.is_nil();}
__int64 CDFUFileDetail::getRecordSizeInt64() { return m_RecordSizeInt64;}
bool CDFUFileDetail::getRecordCountInt64_isNull(){return m_RecordCountInt64.is_nil();}
__int64 CDFUFileDetail::getRecordCountInt64() { return m_RecordCountInt64;}
const char * CDFUFileDetail::getWuid() { return m_Wuid.query();}
const char * CDFUFileDetail::getOwner() { return m_Owner.query();}
const char * CDFUFileDetail::getCluster() { return m_Cluster.query();}
const char * CDFUFileDetail::getJobName() { return m_JobName.query();}
const char * CDFUFileDetail::getPersistent() { return m_Persistent.query();}
const char * CDFUFileDetail::getFormat() { return m_Format.query();}
const char * CDFUFileDetail::getMaxRecordSize() { return m_MaxRecordSize.query();}
const char * CDFUFileDetail::getCsvSeparate() { return m_CsvSeparate.query();}
const char * CDFUFileDetail::getCsvQuote() { return m_CsvQuote.query();}
const char * CDFUFileDetail::getCsvTerminate() { return m_CsvTerminate.query();}
const char * CDFUFileDetail::getCsvEscape() { return m_CsvEscape.query();}
const char * CDFUFileDetail::getModified() { return m_Modified.query();}
const char * CDFUFileDetail::getEcl() { return m_Ecl.query();}
bool CDFUFileDetail::getZipFile_isNull(){return m_ZipFile.is_nil();}
bool CDFUFileDetail::getZipFile() { return m_ZipFile;}
IConstDFUFileStat & CDFUFileDetail::getStat() { return (IConstDFUFileStat &) m_Stat.getValue();}
IArrayOf<IConstDFUPart> & CDFUFileDetail::getDFUFileParts() { return (IArrayOf<IConstDFUPart> &) m_DFUFileParts; }
IArrayOf<IConstDFUFilePartsOnCluster> & CDFUFileDetail::getDFUFilePartsOnClusters() { return (IArrayOf<IConstDFUFilePartsOnCluster> &) m_DFUFilePartsOnClusters; }
bool CDFUFileDetail::getIsSuperfile_isNull(){return m_isSuperfile.is_nil();}
bool CDFUFileDetail::getIsSuperfile() { return m_isSuperfile;}
bool CDFUFileDetail::getShowFileContent_isNull(){return m_ShowFileContent.is_nil();}
bool CDFUFileDetail::getShowFileContent() { return m_ShowFileContent;}
StringArray & CDFUFileDetail::getSubfiles() { return (StringArray &) m_subfiles; }
IArrayOf<IConstDFULogicalFile> & CDFUFileDetail::getSuperfiles() { return (IArrayOf<IConstDFULogicalFile> &) m_Superfiles; }
IArrayOf<IConstDFUFileProtect> & CDFUFileDetail::getProtectList() { return (IArrayOf<IConstDFUFileProtect> &) m_ProtectList; }
bool CDFUFileDetail::getFromRoxieCluster_isNull(){return m_FromRoxieCluster.is_nil();}
bool CDFUFileDetail::getFromRoxieCluster() { return m_FromRoxieCluster;}
StringArray & CDFUFileDetail::getGraphs() { return (StringArray &) m_Graphs; }
const char * CDFUFileDetail::getUserPermission() { return m_UserPermission.query();}
const char * CDFUFileDetail::getContentType() { return m_ContentType.query();}
bool CDFUFileDetail::getCompressedFileSize_isNull(){return m_CompressedFileSize.is_nil();}
__int64 CDFUFileDetail::getCompressedFileSize() { return m_CompressedFileSize;}
const char * CDFUFileDetail::getPercentCompressed() { return m_PercentCompressed.query();}
bool CDFUFileDetail::getIsCompressed_isNull(){return m_IsCompressed.is_nil();}
bool CDFUFileDetail::getIsCompressed() { return m_IsCompressed;}
bool CDFUFileDetail::getBrowseData_isNull(){return m_BrowseData.is_nil();}
bool CDFUFileDetail::getBrowseData() { return m_BrowseData;}
const char * CDFUFileDetail::getJsonInfo() { return m_jsonInfo.query();}
const MemoryBuffer & CDFUFileDetail::getBinInfo() { return m_binInfo.getValue();}
const char * CDFUFileDetail::getPackageID() { return m_PackageID.query();}
IConstDFUFilePartition & CDFUFileDetail::getPartition() { return (IConstDFUFilePartition &) m_Partition.getValue();}
IArrayOf<IConstDFUFileBloom> & CDFUFileDetail::getBlooms() { return (IArrayOf<IConstDFUFileBloom> &) m_Blooms; }
bool CDFUFileDetail::getExpireDays_isNull(){return m_ExpireDays.is_nil();}
int CDFUFileDetail::getExpireDays() { return m_ExpireDays;}
const char * CDFUFileDetail::getKeyType() { return m_KeyType.query();}
void CDFUFileDetail::setName(const char * val){ m_Name.set(val); }
void CDFUFileDetail::setFilename(const char * val){ m_Filename.set(val); }
void CDFUFileDetail::setPrefix(const char * val){ m_Prefix.set(val); }
void CDFUFileDetail::setNodeGroup(const char * val){ m_NodeGroup.set(val); }
void CDFUFileDetail::setNumParts_null(){ m_NumParts.Nil(); }void CDFUFileDetail::setNumParts(int val){ m_NumParts=val; }
void CDFUFileDetail::setDescription(const char * val){ m_Description.set(val); }
void CDFUFileDetail::setDir(const char * val){ m_Dir.set(val); }
void CDFUFileDetail::setPathMask(const char * val){ m_PathMask.set(val); }
void CDFUFileDetail::setFilesize(const char * val){ m_Filesize.set(val); }
void CDFUFileDetail::setFileSizeInt64_null(){ m_FileSizeInt64.Nil(); }void CDFUFileDetail::setFileSizeInt64(__int64 val){ m_FileSizeInt64=val; }
void CDFUFileDetail::setActualSize(const char * val){ m_ActualSize.set(val); }
void CDFUFileDetail::setRecordSize(const char * val){ m_RecordSize.set(val); }
void CDFUFileDetail::setRecordCount(const char * val){ m_RecordCount.set(val); }
void CDFUFileDetail::setRecordSizeInt64_null(){ m_RecordSizeInt64.Nil(); }void CDFUFileDetail::setRecordSizeInt64(__int64 val){ m_RecordSizeInt64=val; }
void CDFUFileDetail::setRecordCountInt64_null(){ m_RecordCountInt64.Nil(); }void CDFUFileDetail::setRecordCountInt64(__int64 val){ m_RecordCountInt64=val; }
void CDFUFileDetail::setWuid(const char * val){ m_Wuid.set(val); }
void CDFUFileDetail::setOwner(const char * val){ m_Owner.set(val); }
void CDFUFileDetail::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUFileDetail::setJobName(const char * val){ m_JobName.set(val); }
void CDFUFileDetail::setPersistent(const char * val){ m_Persistent.set(val); }
void CDFUFileDetail::setFormat(const char * val){ m_Format.set(val); }
void CDFUFileDetail::setMaxRecordSize(const char * val){ m_MaxRecordSize.set(val); }
void CDFUFileDetail::setCsvSeparate(const char * val){ m_CsvSeparate.set(val); }
void CDFUFileDetail::setCsvQuote(const char * val){ m_CsvQuote.set(val); }
void CDFUFileDetail::setCsvTerminate(const char * val){ m_CsvTerminate.set(val); }
void CDFUFileDetail::setCsvEscape(const char * val){ m_CsvEscape.set(val); }
void CDFUFileDetail::setModified(const char * val){ m_Modified.set(val); }
void CDFUFileDetail::setEcl(const char * val){ m_Ecl.set(val); }
void CDFUFileDetail::setZipFile_null(){ m_ZipFile.Nil(); }void CDFUFileDetail::setZipFile(bool val){ m_ZipFile=val; }
IEspDFUFileStat & CDFUFileDetail::updateStat(){ return (IEspDFUFileStat &) m_Stat.getValue(); }
void CDFUFileDetail::setStat(IConstDFUFileStat &ifrom){ m_Stat.copy(ifrom); }
void CDFUFileDetail::setDFUFileParts(IArrayOf<IEspDFUPart> &val)
{
	m_DFUFileParts->kill();
	IArrayOf<IConstDFUPart> &target = m_DFUFileParts.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUPart &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setDFUFileParts(IArrayOf<IConstDFUPart> &val)
{
	m_DFUFileParts->kill();
	IArrayOf<IConstDFUPart> &target = m_DFUFileParts.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUPart &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setDFUFilePartsOnClusters(IArrayOf<IEspDFUFilePartsOnCluster> &val)
{
	m_DFUFilePartsOnClusters->kill();
	IArrayOf<IConstDFUFilePartsOnCluster> &target = m_DFUFilePartsOnClusters.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUFilePartsOnCluster &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setDFUFilePartsOnClusters(IArrayOf<IConstDFUFilePartsOnCluster> &val)
{
	m_DFUFilePartsOnClusters->kill();
	IArrayOf<IConstDFUFilePartsOnCluster> &target = m_DFUFilePartsOnClusters.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUFilePartsOnCluster &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setIsSuperfile_null(){ m_isSuperfile.Nil(); }void CDFUFileDetail::setIsSuperfile(bool val){ m_isSuperfile=val; }
void CDFUFileDetail::setShowFileContent_null(){ m_ShowFileContent.Nil(); }void CDFUFileDetail::setShowFileContent(bool val){ m_ShowFileContent=val; }
void CDFUFileDetail::setSubfiles(StringArray &val){ m_subfiles->kill();  CloneArray(m_subfiles.getValue(), val); }
void CDFUFileDetail::setSuperfiles(IArrayOf<IEspDFULogicalFile> &val)
{
	m_Superfiles->kill();
	IArrayOf<IConstDFULogicalFile> &target = m_Superfiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFULogicalFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setSuperfiles(IArrayOf<IConstDFULogicalFile> &val)
{
	m_Superfiles->kill();
	IArrayOf<IConstDFULogicalFile> &target = m_Superfiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFULogicalFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setProtectList(IArrayOf<IEspDFUFileProtect> &val)
{
	m_ProtectList->kill();
	IArrayOf<IConstDFUFileProtect> &target = m_ProtectList.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUFileProtect &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setProtectList(IArrayOf<IConstDFUFileProtect> &val)
{
	m_ProtectList->kill();
	IArrayOf<IConstDFUFileProtect> &target = m_ProtectList.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUFileProtect &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setFromRoxieCluster_null(){ m_FromRoxieCluster.Nil(); }void CDFUFileDetail::setFromRoxieCluster(bool val){ m_FromRoxieCluster=val; }
void CDFUFileDetail::setGraphs(StringArray &val){ m_Graphs->kill();  CloneArray(m_Graphs.getValue(), val); }
void CDFUFileDetail::setUserPermission(const char * val){ m_UserPermission.set(val); }
void CDFUFileDetail::setContentType(const char * val){ m_ContentType.set(val); }
void CDFUFileDetail::setCompressedFileSize_null(){ m_CompressedFileSize.Nil(); }void CDFUFileDetail::setCompressedFileSize(__int64 val){ m_CompressedFileSize=val; }
void CDFUFileDetail::setPercentCompressed(const char * val){ m_PercentCompressed.set(val); }
void CDFUFileDetail::setIsCompressed_null(){ m_IsCompressed.Nil(); }void CDFUFileDetail::setIsCompressed(bool val){ m_IsCompressed=val; }
void CDFUFileDetail::setBrowseData_null(){ m_BrowseData.Nil(); }void CDFUFileDetail::setBrowseData(bool val){ m_BrowseData=val; }
void CDFUFileDetail::setJsonInfo(const char * val){ m_jsonInfo.set(val); }
void CDFUFileDetail::setBinInfo(const MemoryBuffer & val){ m_binInfo->clear().append(val); }
void CDFUFileDetail::setPackageID(const char * val){ m_PackageID.set(val); }
IEspDFUFilePartition & CDFUFileDetail::updatePartition(){ return (IEspDFUFilePartition &) m_Partition.getValue(); }
void CDFUFileDetail::setPartition(IConstDFUFilePartition &ifrom){ m_Partition.copy(ifrom); }
void CDFUFileDetail::setBlooms(IArrayOf<IEspDFUFileBloom> &val)
{
	m_Blooms->kill();
	IArrayOf<IConstDFUFileBloom> &target = m_Blooms.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUFileBloom &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setBlooms(IArrayOf<IConstDFUFileBloom> &val)
{
	m_Blooms->kill();
	IArrayOf<IConstDFUFileBloom> &target = m_Blooms.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUFileBloom &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileDetail::setExpireDays_null(){ m_ExpireDays.Nil(); }void CDFUFileDetail::setExpireDays(int val){ m_ExpireDays=val; }
void CDFUFileDetail::setKeyType(const char * val){ m_KeyType.set(val); }
extern "C"  IEspDFUFileDetail *createDFUFileDetail(const char *serv, const char *msgname){return ((IEspDFUFileDetail *)new CDFUFileDetail(serv /*, msgname*/));}
extern "C"  IClientDFUFileDetail *createClientDFUFileDetail(const char *serv, const char *msgname){return ((IClientDFUFileDetail *)new CDFUFileDetail(serv /*, msgname*/));}

//=======================================================
// class CDFUSpaceItem Implementation
//=======================================================

CDFUSpaceItem::CDFUSpaceItem(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_NumOfFiles(nilIgnore),m_NumOfFilesUnknown(nilIgnore),m_TotalSize(nilIgnore),m_LargestFile(nilIgnore),m_LargestSize(nilIgnore),m_SmallestFile(nilIgnore),m_SmallestSize(nilIgnore),m_NumOfFilesInt64(nilIgnore),m_NumOfFilesUnknownInt64(nilIgnore),m_TotalSizeInt64(nilIgnore),m_LargestSizeInt64(nilIgnore),m_SmallestSizeInt64(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceItem");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUSpaceItem::CDFUSpaceItem(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_NumOfFiles(nilIgnore),m_NumOfFilesUnknown(nilIgnore),m_TotalSize(nilIgnore),m_LargestFile(nilIgnore),m_LargestSize(nilIgnore),m_SmallestFile(nilIgnore),m_SmallestSize(nilIgnore),m_NumOfFilesInt64(nilIgnore),m_NumOfFilesUnknownInt64(nilIgnore),m_TotalSizeInt64(nilIgnore),m_LargestSizeInt64(nilIgnore),m_SmallestSizeInt64(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceItem");
}

StringBuffer &CDFUSpaceItem::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumOfFiles\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumOfFilesUnknown\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TotalSize\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LargestFile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LargestSize\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SmallestFile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SmallestSize\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUSpaceItem","NumOfFilesInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NumOfFilesInt64\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUSpaceItem","NumOfFilesUnknownInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NumOfFilesUnknownInt64\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUSpaceItem","TotalSizeInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"TotalSizeInt64\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUSpaceItem","LargestSizeInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"LargestSizeInt64\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUSpaceItem","SmallestSizeInt64")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SmallestSizeInt64\" type=\"xsd:long\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUSpaceItem::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUSpaceItem::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUSpaceItem","NumOfFilesInt64",1.38);
	info.addMinVersion("DFUSpaceItem","NumOfFilesUnknownInt64",1.38);
	info.addMinVersion("DFUSpaceItem","TotalSizeInt64",1.38);
	info.addMinVersion("DFUSpaceItem","LargestSizeInt64",1.38);
	info.addMinVersion("DFUSpaceItem","SmallestSizeInt64",1.38);
}

StringBuffer &CDFUSpaceItem::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NumOfFiles");
	form.appendf("  <tr><td><b>NumOfFiles: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NumOfFilesUnknown");
	form.appendf("  <tr><td><b>NumOfFilesUnknown: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TotalSize");
	form.appendf("  <tr><td><b>TotalSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LargestFile");
	form.appendf("  <tr><td><b>LargestFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LargestSize");
	form.appendf("  <tr><td><b>LargestSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SmallestFile");
	form.appendf("  <tr><td><b>SmallestFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SmallestSize");
	form.appendf("  <tr><td><b>SmallestSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUSpaceItem","NumOfFilesInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NumOfFilesInt64");
		form.appendf("  <tr><td><b>NumOfFilesInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUSpaceItem","NumOfFilesUnknownInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NumOfFilesUnknownInt64");
		form.appendf("  <tr><td><b>NumOfFilesUnknownInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUSpaceItem","TotalSizeInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("TotalSizeInt64");
		form.appendf("  <tr><td><b>TotalSizeInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUSpaceItem","LargestSizeInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("LargestSizeInt64");
		form.appendf("  <tr><td><b>LargestSizeInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUSpaceItem","SmallestSizeInt64")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SmallestSizeInt64");
		form.appendf("  <tr><td><b>SmallestSizeInt64: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUSpaceItem::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUSpaceItem::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_NumOfFiles.marshall(rpc_resp, "NumOfFiles", "", "", "");
	m_NumOfFilesUnknown.marshall(rpc_resp, "NumOfFilesUnknown", "", "", "");
	m_TotalSize.marshall(rpc_resp, "TotalSize", "", "", "");
	m_LargestFile.marshall(rpc_resp, "LargestFile", "", "", "");
	m_LargestSize.marshall(rpc_resp, "LargestSize", "", "", "");
	m_SmallestFile.marshall(rpc_resp, "SmallestFile", "", "", "");
	m_SmallestSize.marshall(rpc_resp, "SmallestSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_NumOfFilesInt64.marshall(rpc_resp, "NumOfFilesInt64", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_NumOfFilesUnknownInt64.marshall(rpc_resp, "NumOfFilesUnknownInt64", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_TotalSizeInt64.marshall(rpc_resp, "TotalSizeInt64", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_LargestSizeInt64.marshall(rpc_resp, "LargestSizeInt64", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_SmallestSizeInt64.marshall(rpc_resp, "SmallestSizeInt64", "", "", "");
}


void CDFUSpaceItem::copy(CDFUSpaceItem &from)
{
	m_Name.copy(from.m_Name);
	m_NumOfFiles.copy(from.m_NumOfFiles);
	m_NumOfFilesUnknown.copy(from.m_NumOfFilesUnknown);
	m_TotalSize.copy(from.m_TotalSize);
	m_LargestFile.copy(from.m_LargestFile);
	m_LargestSize.copy(from.m_LargestSize);
	m_SmallestFile.copy(from.m_SmallestFile);
	m_SmallestSize.copy(from.m_SmallestSize);
	m_NumOfFilesInt64.copy(from.m_NumOfFilesInt64);
	m_NumOfFilesUnknownInt64.copy(from.m_NumOfFilesUnknownInt64);
	m_TotalSizeInt64.copy(from.m_TotalSizeInt64);
	m_LargestSizeInt64.copy(from.m_LargestSizeInt64);
	m_SmallestSizeInt64.copy(from.m_SmallestSizeInt64);
}


void CDFUSpaceItem::copy(IConstDFUSpaceItem &ifrom)
{
	setName(ifrom.getName());
	setNumOfFiles(ifrom.getNumOfFiles());
	setNumOfFilesUnknown(ifrom.getNumOfFilesUnknown());
	setTotalSize(ifrom.getTotalSize());
	setLargestFile(ifrom.getLargestFile());
	setLargestSize(ifrom.getLargestSize());
	setSmallestFile(ifrom.getSmallestFile());
	setSmallestSize(ifrom.getSmallestSize());
	setNumOfFilesInt64(ifrom.getNumOfFilesInt64());
	setNumOfFilesUnknownInt64(ifrom.getNumOfFilesUnknownInt64());
	setTotalSizeInt64(ifrom.getTotalSizeInt64());
	setLargestSizeInt64(ifrom.getLargestSizeInt64());
	setSmallestSizeInt64(ifrom.getSmallestSizeInt64());
}


void CDFUSpaceItem::getAttributes(IProperties &attributes)
{
}


void CDFUSpaceItem::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_NumOfFiles.toStr(ctx, buffer, "NumOfFiles", "", true, "", "");
	m_NumOfFilesUnknown.toStr(ctx, buffer, "NumOfFilesUnknown", "", true, "", "");
	m_TotalSize.toStr(ctx, buffer, "TotalSize", "", true, "", "");
	m_LargestFile.toStr(ctx, buffer, "LargestFile", "", true, "", "");
	m_LargestSize.toStr(ctx, buffer, "LargestSize", "", true, "", "");
	m_SmallestFile.toStr(ctx, buffer, "SmallestFile", "", true, "", "");
	m_SmallestSize.toStr(ctx, buffer, "SmallestSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_NumOfFilesInt64.toStr(ctx, buffer, "NumOfFilesInt64", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_NumOfFilesUnknownInt64.toStr(ctx, buffer, "NumOfFilesUnknownInt64", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_TotalSizeInt64.toStr(ctx, buffer, "TotalSizeInt64", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_LargestSizeInt64.toStr(ctx, buffer, "LargestSizeInt64", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_SmallestSizeInt64.toStr(ctx, buffer, "SmallestSizeInt64", "", true, "", "");
}


void CDFUSpaceItem::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUSpaceItem::serializer(IEspContext* ctx, IConstDFUSpaceItem &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUSpaceItem>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field NumOfFiles
	{
		const char* s = src.getNumOfFiles();
		if (s && *s)
		{
			buffer.append("<NumOfFiles>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NumOfFiles>");
		}
	}
	// field NumOfFilesUnknown
	{
		const char* s = src.getNumOfFilesUnknown();
		if (s && *s)
		{
			buffer.append("<NumOfFilesUnknown>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NumOfFilesUnknown>");
		}
	}
	// field TotalSize
	{
		const char* s = src.getTotalSize();
		if (s && *s)
		{
			buffer.append("<TotalSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</TotalSize>");
		}
	}
	// field LargestFile
	{
		const char* s = src.getLargestFile();
		if (s && *s)
		{
			buffer.append("<LargestFile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LargestFile>");
		}
	}
	// field LargestSize
	{
		const char* s = src.getLargestSize();
		if (s && *s)
		{
			buffer.append("<LargestSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LargestSize>");
		}
	}
	// field SmallestFile
	{
		const char* s = src.getSmallestFile();
		if (s && *s)
		{
			buffer.append("<SmallestFile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SmallestFile>");
		}
	}
	// field SmallestSize
	{
		const char* s = src.getSmallestSize();
		if (s && *s)
		{
			buffer.append("<SmallestSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SmallestSize>");
		}
	}
	// field NumOfFilesInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=NumOfFilesInt64
		buffer.append("<NumOfFilesInt64>");
		buffer.append(src.getNumOfFilesInt64());
		buffer.append("</NumOfFilesInt64>");
	}
	// field NumOfFilesUnknownInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=NumOfFilesUnknownInt64
		buffer.append("<NumOfFilesUnknownInt64>");
		buffer.append(src.getNumOfFilesUnknownInt64());
		buffer.append("</NumOfFilesUnknownInt64>");
	}
	// field TotalSizeInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=TotalSizeInt64
		buffer.append("<TotalSizeInt64>");
		buffer.append(src.getTotalSizeInt64());
		buffer.append("</TotalSizeInt64>");
	}
	// field LargestSizeInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=LargestSizeInt64
		buffer.append("<LargestSizeInt64>");
		buffer.append(src.getLargestSizeInt64());
		buffer.append("</LargestSizeInt64>");
	}
	// field SmallestSizeInt64
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		//*** default kind: TK_INT; type=int64, name=SmallestSizeInt64
		buffer.append("<SmallestSizeInt64>");
		buffer.append(src.getSmallestSizeInt64());
		buffer.append("</SmallestSizeInt64>");
	}
	if (keepRootTag)
		buffer.append("</DFUSpaceItem>");
}

bool CDFUSpaceItem::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_NumOfFiles.unmarshall(rpc_request, "NumOfFiles", basepath);
	hasValue |= m_NumOfFilesUnknown.unmarshall(rpc_request, "NumOfFilesUnknown", basepath);
	hasValue |= m_TotalSize.unmarshall(rpc_request, "TotalSize", basepath);
	hasValue |= m_LargestFile.unmarshall(rpc_request, "LargestFile", basepath);
	hasValue |= m_LargestSize.unmarshall(rpc_request, "LargestSize", basepath);
	hasValue |= m_SmallestFile.unmarshall(rpc_request, "SmallestFile", basepath);
	hasValue |= m_SmallestSize.unmarshall(rpc_request, "SmallestSize", basepath);
	hasValue |= m_NumOfFilesInt64.unmarshall(rpc_request, "NumOfFilesInt64", basepath);
	hasValue |= m_NumOfFilesUnknownInt64.unmarshall(rpc_request, "NumOfFilesUnknownInt64", basepath);
	hasValue |= m_TotalSizeInt64.unmarshall(rpc_request, "TotalSizeInt64", basepath);
	hasValue |= m_LargestSizeInt64.unmarshall(rpc_request, "LargestSizeInt64", basepath);
	hasValue |= m_SmallestSizeInt64.unmarshall(rpc_request, "SmallestSizeInt64", basepath);
	return hasValue;
}

bool CDFUSpaceItem::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_NumOfFiles.unmarshall(ctx, soapval, "NumOfFiles");
	hasValue |= m_NumOfFilesUnknown.unmarshall(ctx, soapval, "NumOfFilesUnknown");
	hasValue |= m_TotalSize.unmarshall(ctx, soapval, "TotalSize");
	hasValue |= m_LargestFile.unmarshall(ctx, soapval, "LargestFile");
	hasValue |= m_LargestSize.unmarshall(ctx, soapval, "LargestSize");
	hasValue |= m_SmallestFile.unmarshall(ctx, soapval, "SmallestFile");
	hasValue |= m_SmallestSize.unmarshall(ctx, soapval, "SmallestSize");
	hasValue |= m_NumOfFilesInt64.unmarshall(ctx, soapval, "NumOfFilesInt64");
	hasValue |= m_NumOfFilesUnknownInt64.unmarshall(ctx, soapval, "NumOfFilesUnknownInt64");
	hasValue |= m_TotalSizeInt64.unmarshall(ctx, soapval, "TotalSizeInt64");
	hasValue |= m_LargestSizeInt64.unmarshall(ctx, soapval, "LargestSizeInt64");
	hasValue |= m_SmallestSizeInt64.unmarshall(ctx, soapval, "SmallestSizeInt64");
	return hasValue;
}

bool CDFUSpaceItem::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_NumOfFiles.unmarshall(ctx, params, attachments, "NumOfFiles", basepath);
	hasValue |= m_NumOfFilesUnknown.unmarshall(ctx, params, attachments, "NumOfFilesUnknown", basepath);
	hasValue |= m_TotalSize.unmarshall(ctx, params, attachments, "TotalSize", basepath);
	hasValue |= m_LargestFile.unmarshall(ctx, params, attachments, "LargestFile", basepath);
	hasValue |= m_LargestSize.unmarshall(ctx, params, attachments, "LargestSize", basepath);
	hasValue |= m_SmallestFile.unmarshall(ctx, params, attachments, "SmallestFile", basepath);
	hasValue |= m_SmallestSize.unmarshall(ctx, params, attachments, "SmallestSize", basepath);
	hasValue |= m_NumOfFilesInt64.unmarshall(ctx, params, attachments, "NumOfFilesInt64", basepath);
	hasValue |= m_NumOfFilesUnknownInt64.unmarshall(ctx, params, attachments, "NumOfFilesUnknownInt64", basepath);
	hasValue |= m_TotalSizeInt64.unmarshall(ctx, params, attachments, "TotalSizeInt64", basepath);
	hasValue |= m_LargestSizeInt64.unmarshall(ctx, params, attachments, "LargestSizeInt64", basepath);
	hasValue |= m_SmallestSizeInt64.unmarshall(ctx, params, attachments, "SmallestSizeInt64", basepath);
	return hasValue;
}

const char * CDFUSpaceItem::getName() { return m_Name.query();}
const char * CDFUSpaceItem::getNumOfFiles() { return m_NumOfFiles.query();}
const char * CDFUSpaceItem::getNumOfFilesUnknown() { return m_NumOfFilesUnknown.query();}
const char * CDFUSpaceItem::getTotalSize() { return m_TotalSize.query();}
const char * CDFUSpaceItem::getLargestFile() { return m_LargestFile.query();}
const char * CDFUSpaceItem::getLargestSize() { return m_LargestSize.query();}
const char * CDFUSpaceItem::getSmallestFile() { return m_SmallestFile.query();}
const char * CDFUSpaceItem::getSmallestSize() { return m_SmallestSize.query();}
__int64 CDFUSpaceItem::getNumOfFilesInt64() { return m_NumOfFilesInt64;}
__int64 CDFUSpaceItem::getNumOfFilesUnknownInt64() { return m_NumOfFilesUnknownInt64;}
__int64 CDFUSpaceItem::getTotalSizeInt64() { return m_TotalSizeInt64;}
__int64 CDFUSpaceItem::getLargestSizeInt64() { return m_LargestSizeInt64;}
__int64 CDFUSpaceItem::getSmallestSizeInt64() { return m_SmallestSizeInt64;}
void CDFUSpaceItem::setName(const char * val){ m_Name.set(val); }
void CDFUSpaceItem::setNumOfFiles(const char * val){ m_NumOfFiles.set(val); }
void CDFUSpaceItem::setNumOfFilesUnknown(const char * val){ m_NumOfFilesUnknown.set(val); }
void CDFUSpaceItem::setTotalSize(const char * val){ m_TotalSize.set(val); }
void CDFUSpaceItem::setLargestFile(const char * val){ m_LargestFile.set(val); }
void CDFUSpaceItem::setLargestSize(const char * val){ m_LargestSize.set(val); }
void CDFUSpaceItem::setSmallestFile(const char * val){ m_SmallestFile.set(val); }
void CDFUSpaceItem::setSmallestSize(const char * val){ m_SmallestSize.set(val); }
void CDFUSpaceItem::setNumOfFilesInt64(__int64 val){ m_NumOfFilesInt64=val; }
void CDFUSpaceItem::setNumOfFilesUnknownInt64(__int64 val){ m_NumOfFilesUnknownInt64=val; }
void CDFUSpaceItem::setTotalSizeInt64(__int64 val){ m_TotalSizeInt64=val; }
void CDFUSpaceItem::setLargestSizeInt64(__int64 val){ m_LargestSizeInt64=val; }
void CDFUSpaceItem::setSmallestSizeInt64(__int64 val){ m_SmallestSizeInt64=val; }
extern "C"  IEspDFUSpaceItem *createDFUSpaceItem(const char *serv, const char *msgname){return ((IEspDFUSpaceItem *)new CDFUSpaceItem(serv /*, msgname*/));}
extern "C"  IClientDFUSpaceItem *createClientDFUSpaceItem(const char *serv, const char *msgname){return ((IClientDFUSpaceItem *)new CDFUSpaceItem(serv /*, msgname*/));}

//=======================================================
// class CDFUActionInfo Implementation
//=======================================================

CDFUActionInfo::CDFUActionInfo(const char *serviceName, IRpcMessageBinding *init)
	: m_FileName(nilIgnore),m_NodeGroup(nilIgnore),m_ActionResult(nilIgnore),m_Failed(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUActionInfo");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUActionInfo::CDFUActionInfo(const char *serviceName, const char *bc)
	: m_FileName(nilIgnore),m_NodeGroup(nilIgnore),m_ActionResult(nilIgnore),m_Failed(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUActionInfo");
}

StringBuffer &CDFUActionInfo::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NodeGroup\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionResult\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Failed\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUActionInfo::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUActionInfo::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUActionInfo::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NodeGroup");
	form.appendf("  <tr><td><b>NodeGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionResult");
	form.appendf("  <tr><td><b>ActionResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Failed");
	
	form.appendf("  <tr><td><b>Failed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUActionInfo::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUActionInfo::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	m_NodeGroup.marshall(rpc_resp, "NodeGroup", "", "", "");
	m_ActionResult.marshall(rpc_resp, "ActionResult", "", "", "");
	m_Failed.marshall(rpc_resp, "Failed", "", "", "");
}


void CDFUActionInfo::copy(CDFUActionInfo &from)
{
	m_FileName.copy(from.m_FileName);
	m_NodeGroup.copy(from.m_NodeGroup);
	m_ActionResult.copy(from.m_ActionResult);
	m_Failed.copy(from.m_Failed);
}


void CDFUActionInfo::copy(IConstDFUActionInfo &ifrom)
{
	setFileName(ifrom.getFileName());
	setNodeGroup(ifrom.getNodeGroup());
	setActionResult(ifrom.getActionResult());
	setFailed(ifrom.getFailed());
}


void CDFUActionInfo::getAttributes(IProperties &attributes)
{
}


void CDFUActionInfo::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	m_NodeGroup.toStr(ctx, buffer, "NodeGroup", "", true, "", "");
	m_ActionResult.toStr(ctx, buffer, "ActionResult", "", true, "", "");
	m_Failed.toStr(ctx, buffer, "Failed", "", true, "", "");
}


void CDFUActionInfo::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUActionInfo::serializer(IEspContext* ctx, IConstDFUActionInfo &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUActionInfo>");
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field NodeGroup
	{
		const char* s = src.getNodeGroup();
		if (s && *s)
		{
			buffer.append("<NodeGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NodeGroup>");
		}
	}
	// field ActionResult
	{
		const char* s = src.getActionResult();
		if (s && *s)
		{
			buffer.append("<ActionResult>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ActionResult>");
		}
	}
	// field Failed
	{
		bool b = src.getFailed();
		if (b)
			buffer.appendf("<Failed>1</Failed>");
	}
	if (keepRootTag)
		buffer.append("</DFUActionInfo>");
}

bool CDFUActionInfo::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_NodeGroup.unmarshall(rpc_request, "NodeGroup", basepath);
	hasValue |= m_ActionResult.unmarshall(rpc_request, "ActionResult", basepath);
	hasValue |= m_Failed.unmarshall(rpc_request, "Failed", basepath);
	return hasValue;
}

bool CDFUActionInfo::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_NodeGroup.unmarshall(ctx, soapval, "NodeGroup");
	hasValue |= m_ActionResult.unmarshall(ctx, soapval, "ActionResult");
	hasValue |= m_Failed.unmarshall(ctx, soapval, "Failed");
	return hasValue;
}

bool CDFUActionInfo::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_NodeGroup.unmarshall(ctx, params, attachments, "NodeGroup", basepath);
	hasValue |= m_ActionResult.unmarshall(ctx, params, attachments, "ActionResult", basepath);
	hasValue |= m_Failed.unmarshall(ctx, params, attachments, "Failed", basepath);
	return hasValue;
}

const char * CDFUActionInfo::getFileName() { return m_FileName.query();}
const char * CDFUActionInfo::getNodeGroup() { return m_NodeGroup.query();}
const char * CDFUActionInfo::getActionResult() { return m_ActionResult.query();}
bool CDFUActionInfo::getFailed() { return m_Failed;}
void CDFUActionInfo::setFileName(const char * val){ m_FileName.set(val); }
void CDFUActionInfo::setNodeGroup(const char * val){ m_NodeGroup.set(val); }
void CDFUActionInfo::setActionResult(const char * val){ m_ActionResult.set(val); }
void CDFUActionInfo::setFailed(bool val){ m_Failed=val; }
extern "C"  IEspDFUActionInfo *createDFUActionInfo(const char *serv, const char *msgname){return ((IEspDFUActionInfo *)new CDFUActionInfo(serv /*, msgname*/));}
extern "C"  IClientDFUActionInfo *createClientDFUActionInfo(const char *serv, const char *msgname){return ((IClientDFUActionInfo *)new CDFUActionInfo(serv /*, msgname*/));}

//=======================================================
// class CDFUQueryRequest Implementation
//=======================================================

CDFUQueryRequest::CDFUQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Prefix(nilRemove),m_ClusterName(nilRemove),m_NodeGroup(nilRemove),m_ContentType(nilRemove),m_LogicalName(nilRemove),m_Owner(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_FileType(nilRemove),m_FileSizeFrom(-1, nilRemove,false),m_FileSizeTo(-1, nilRemove,false),m_FirstN(-1, nilRemove,false),m_FirstNType(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_OneLevelDirFileReturn(0, nilRemove,false),m_CacheHint(nilRemove),m_MaxNumberOfFiles(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUQueryRequest::CDFUQueryRequest(const char *serviceName, const char *bc)
	: m_Prefix(nilRemove),m_ClusterName(nilRemove),m_NodeGroup(nilRemove),m_ContentType(nilRemove),m_LogicalName(nilRemove),m_Owner(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_FileType(nilRemove),m_FileSizeFrom(-1, nilRemove,false),m_FileSizeTo(-1, nilRemove,false),m_FirstN(-1, nilRemove,false),m_FirstNType(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_OneLevelDirFileReturn(0, nilRemove,false),m_CacheHint(nilRemove),m_MaxNumberOfFiles(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryRequest");
}

CDFUQueryRequest::CDFUQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Prefix(nilRemove),m_ClusterName(nilRemove),m_NodeGroup(nilRemove),m_ContentType(nilRemove),m_LogicalName(nilRemove),m_Owner(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_FileType(nilRemove),m_FileSizeFrom(-1, nilRemove,false),m_FileSizeTo(-1, nilRemove,false),m_FirstN(-1, nilRemove,false),m_FirstNType(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_OneLevelDirFileReturn(0, nilRemove,false),m_CacheHint(nilRemove),m_MaxNumberOfFiles(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUQueryRequest::CDFUQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Prefix(nilRemove),m_ClusterName(nilRemove),m_NodeGroup(nilRemove),m_ContentType(nilRemove),m_LogicalName(nilRemove),m_Owner(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_FileType(nilRemove),m_FileSizeFrom(-1, nilRemove,false),m_FileSizeTo(-1, nilRemove,false),m_FirstN(-1, nilRemove,false),m_FirstNType(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_OneLevelDirFileReturn(0, nilRemove,false),m_CacheHint(nilRemove),m_MaxNumberOfFiles(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Prefix\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUQueryRequest","ClusterName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUQueryRequest","NodeGroup")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NodeGroup\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUQueryRequest","ContentType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ContentType\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"FileSizeFrom\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"FileSizeTo\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"FirstN\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("DFUQueryRequest","FirstNType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FirstNType\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageStartFrom\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sortby\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"OneLevelDirFileReturn\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("DFUQueryRequest","CacheHint")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUQueryRequest","MaxNumberOfFiles")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MaxNumberOfFiles\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUQueryRequest","IncludeSuperOwner")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IncludeSuperOwner\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("DFUQueryRequest","ClusterName",1.26);
	info.addMinVersion("DFUQueryRequest","NodeGroup",1.26);
	info.addMinVersion("DFUQueryRequest","ContentType",1.3);
	info.addDeprVersion("DFUQueryRequest","FirstNType",1.24);
	info.addMinVersion("DFUQueryRequest","CacheHint",1.24);
	info.addMinVersion("DFUQueryRequest","MaxNumberOfFiles",1.3);
	info.addMinVersion("DFUQueryRequest","IncludeSuperOwner",1.3);
}

StringBuffer &CDFUQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Prefix");
	form.appendf("  <tr><td><b>Prefix: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUQueryRequest","ClusterName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterName");
		form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUQueryRequest","NodeGroup")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NodeGroup");
		form.appendf("  <tr><td><b>NodeGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUQueryRequest","ContentType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ContentType");
		form.appendf("  <tr><td><b>ContentType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileType");
	form.appendf("  <tr><td><b>FileType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileSizeFrom");
	form.appendf("  <tr><td><b>FileSizeFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileSizeTo");
	form.appendf("  <tr><td><b>FileSizeTo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("FirstN");
	form.appendf("  <tr><td><b>FirstN: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUQueryRequest","FirstNType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FirstNType");
		form.appendf("  <tr><td><b>FirstNType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PageSize");
	form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PageStartFrom");
	form.appendf("  <tr><td><b>PageStartFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Sortby");
	form.appendf("  <tr><td><b>Sortby: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Descending");
	
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OneLevelDirFileReturn");
	
	form.appendf("  <tr><td><b>OneLevelDirFileReturn? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("DFUQueryRequest","CacheHint")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CacheHint");
		form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUQueryRequest","MaxNumberOfFiles")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("MaxNumberOfFiles");
		form.appendf("  <tr><td><b>MaxNumberOfFiles: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUQueryRequest","IncludeSuperOwner")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeSuperOwner");
		
	form.appendf("  <tr><td><b>IncludeSuperOwner? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Prefix.marshall(rpc_resp, "Prefix", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.26))
		m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.26))
		m_NodeGroup.marshall(rpc_resp, "NodeGroup", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_ContentType.marshall(rpc_resp, "ContentType", "", "", "");
	m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_FileType.marshall(rpc_resp, "FileType", "", "", "");
	m_FileSizeFrom.marshall(rpc_resp, "FileSizeFrom", "", "", "");
	m_FileSizeTo.marshall(rpc_resp, "FileSizeTo", "", "", "");
	m_FirstN.marshall(rpc_resp, "FirstN", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.24))
		m_FirstNType.marshall(rpc_resp, "FirstNType", "", "", "");
	m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
	m_PageStartFrom.marshall(rpc_resp, "PageStartFrom", "", "", "");
	m_Sortby.marshall(rpc_resp, "Sortby", "", "", "");
	m_Descending.marshall(rpc_resp, "Descending", "", "", "");
	m_OneLevelDirFileReturn.marshall(rpc_resp, "OneLevelDirFileReturn", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.24))
		m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_MaxNumberOfFiles.marshall(rpc_resp, "MaxNumberOfFiles", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_IncludeSuperOwner.marshall(rpc_resp, "IncludeSuperOwner", "", "", "");
}


void CDFUQueryRequest::copy(CDFUQueryRequest &from)
{
	m_Prefix.copy(from.m_Prefix);
	m_ClusterName.copy(from.m_ClusterName);
	m_NodeGroup.copy(from.m_NodeGroup);
	m_ContentType.copy(from.m_ContentType);
	m_LogicalName.copy(from.m_LogicalName);
	m_Owner.copy(from.m_Owner);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_FileType.copy(from.m_FileType);
	m_FileSizeFrom.copy(from.m_FileSizeFrom);
	m_FileSizeTo.copy(from.m_FileSizeTo);
	m_FirstN.copy(from.m_FirstN);
	m_FirstNType.copy(from.m_FirstNType);
	m_PageSize.copy(from.m_PageSize);
	m_PageStartFrom.copy(from.m_PageStartFrom);
	m_Sortby.copy(from.m_Sortby);
	m_Descending.copy(from.m_Descending);
	m_OneLevelDirFileReturn.copy(from.m_OneLevelDirFileReturn);
	m_CacheHint.copy(from.m_CacheHint);
	m_MaxNumberOfFiles.copy(from.m_MaxNumberOfFiles);
	m_IncludeSuperOwner.copy(from.m_IncludeSuperOwner);
}


void CDFUQueryRequest::copy(IConstDFUQueryRequest &ifrom)
{
	setPrefix(ifrom.getPrefix());
	setClusterName(ifrom.getClusterName());
	setNodeGroup(ifrom.getNodeGroup());
	setContentType(ifrom.getContentType());
	setLogicalName(ifrom.getLogicalName());
	setOwner(ifrom.getOwner());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setFileType(ifrom.getFileType());
	setFileSizeFrom(ifrom.getFileSizeFrom());
	setFileSizeTo(ifrom.getFileSizeTo());
	setFirstN(ifrom.getFirstN());
	setFirstNType(ifrom.getFirstNType());
	setPageSize(ifrom.getPageSize());
	setPageStartFrom(ifrom.getPageStartFrom());
	setSortby(ifrom.getSortby());
	setDescending(ifrom.getDescending());
	setOneLevelDirFileReturn(ifrom.getOneLevelDirFileReturn());
	setCacheHint(ifrom.getCacheHint());
	setMaxNumberOfFiles(ifrom.getMaxNumberOfFiles());
	setIncludeSuperOwner(ifrom.getIncludeSuperOwner());
}


void CDFUQueryRequest::getAttributes(IProperties &attributes)
{
}


void CDFUQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Prefix.toStr(ctx, buffer, "Prefix", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.26))
		m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.26))
		m_NodeGroup.toStr(ctx, buffer, "NodeGroup", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_ContentType.toStr(ctx, buffer, "ContentType", "", true, "", "");
	m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_FileType.toStr(ctx, buffer, "FileType", "", true, "", "");
	m_FileSizeFrom.toStr(ctx, buffer, "FileSizeFrom", "", true, "", "");
	m_FileSizeTo.toStr(ctx, buffer, "FileSizeTo", "", true, "", "");
	m_FirstN.toStr(ctx, buffer, "FirstN", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.24))
		m_FirstNType.toStr(ctx, buffer, "FirstNType", "", true, "", "");
	m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
	m_PageStartFrom.toStr(ctx, buffer, "PageStartFrom", "", true, "", "");
	m_Sortby.toStr(ctx, buffer, "Sortby", "", true, "", "");
	m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
	m_OneLevelDirFileReturn.toStr(ctx, buffer, "OneLevelDirFileReturn", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.24))
		m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_MaxNumberOfFiles.toStr(ctx, buffer, "MaxNumberOfFiles", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_IncludeSuperOwner.toStr(ctx, buffer, "IncludeSuperOwner", "", true, "", "");
}


void CDFUQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUQueryRequest::serializer(IEspContext* ctx, IConstDFUQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUQueryRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Prefix
	{
		const char* s = src.getPrefix();
		if (s && *s)
		{
			buffer.append("<Prefix>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Prefix>");
		}
	}
	// field ClusterName
	if ((clientVer==-1.0 || clientVer<1.26))
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field NodeGroup
	if ((clientVer==-1.0 || clientVer>=1.26))
	{
		const char* s = src.getNodeGroup();
		if (s && *s)
		{
			buffer.append("<NodeGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NodeGroup>");
		}
	}
	// field ContentType
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		const char* s = src.getContentType();
		if (s && *s)
		{
			buffer.append("<ContentType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ContentType>");
		}
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field FileType
	{
		const char* s = src.getFileType();
		if (s && *s)
		{
			buffer.append("<FileType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileType>");
		}
	}
	// field FileSizeFrom
	{
		//*** default kind: TK_INT; type=int64, name=FileSizeFrom
		buffer.append("<FileSizeFrom>");
		buffer.append(src.getFileSizeFrom());
		buffer.append("</FileSizeFrom>");
	}
	// field FileSizeTo
	{
		//*** default kind: TK_INT; type=int64, name=FileSizeTo
		buffer.append("<FileSizeTo>");
		buffer.append(src.getFileSizeTo());
		buffer.append("</FileSizeTo>");
	}
	// field FirstN
	{
		int n = src.getFirstN();
		if (n)
			buffer.appendf("<FirstN>%d</FirstN>", n);
	}
	// field FirstNType
	if ((clientVer==-1.0 || clientVer<1.24))
	{
		const char* s = src.getFirstNType();
		if (s && *s)
		{
			buffer.append("<FirstNType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FirstNType>");
		}
	}
	// field PageSize
	{
		int n = src.getPageSize();
		if (n)
			buffer.appendf("<PageSize>%d</PageSize>", n);
	}
	// field PageStartFrom
	{
		int n = src.getPageStartFrom();
		if (n)
			buffer.appendf("<PageStartFrom>%d</PageStartFrom>", n);
	}
	// field Sortby
	{
		const char* s = src.getSortby();
		if (s && *s)
		{
			buffer.append("<Sortby>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Sortby>");
		}
	}
	// field Descending
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field OneLevelDirFileReturn
	{
		bool b = src.getOneLevelDirFileReturn();
		if (b)
			buffer.appendf("<OneLevelDirFileReturn>1</OneLevelDirFileReturn>");
	}
	// field CacheHint
	if ((clientVer==-1.0 || clientVer>=1.24))
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	// field MaxNumberOfFiles
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		int n = src.getMaxNumberOfFiles();
		if (n)
			buffer.appendf("<MaxNumberOfFiles>%d</MaxNumberOfFiles>", n);
	}
	// field IncludeSuperOwner
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		bool b = src.getIncludeSuperOwner();
		if (b)
			buffer.appendf("<IncludeSuperOwner>1</IncludeSuperOwner>");
	}
	if (keepRootTag)
		buffer.append("</DFUQueryRequest>");
}

bool CDFUQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Prefix.unmarshall(rpc_request, "Prefix", basepath);
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_NodeGroup.unmarshall(rpc_request, "NodeGroup", basepath);
	hasValue |= m_ContentType.unmarshall(rpc_request, "ContentType", basepath);
	hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_FileType.unmarshall(rpc_request, "FileType", basepath);
	hasValue |= m_FileSizeFrom.unmarshall(rpc_request, "FileSizeFrom", basepath);
	hasValue |= m_FileSizeTo.unmarshall(rpc_request, "FileSizeTo", basepath);
	hasValue |= m_FirstN.unmarshall(rpc_request, "FirstN", basepath);
	hasValue |= m_FirstNType.unmarshall(rpc_request, "FirstNType", basepath);
	hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(rpc_request, "PageStartFrom", basepath);
	hasValue |= m_Sortby.unmarshall(rpc_request, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
	hasValue |= m_OneLevelDirFileReturn.unmarshall(rpc_request, "OneLevelDirFileReturn", basepath);
	hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
	hasValue |= m_MaxNumberOfFiles.unmarshall(rpc_request, "MaxNumberOfFiles", basepath);
	hasValue |= m_IncludeSuperOwner.unmarshall(rpc_request, "IncludeSuperOwner", basepath);
	return hasValue;
}

bool CDFUQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Prefix.unmarshall(ctx, soapval, "Prefix");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_NodeGroup.unmarshall(ctx, soapval, "NodeGroup");
	hasValue |= m_ContentType.unmarshall(ctx, soapval, "ContentType");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_FileType.unmarshall(ctx, soapval, "FileType");
	hasValue |= m_FileSizeFrom.unmarshall(ctx, soapval, "FileSizeFrom");
	hasValue |= m_FileSizeTo.unmarshall(ctx, soapval, "FileSizeTo");
	hasValue |= m_FirstN.unmarshall(ctx, soapval, "FirstN");
	hasValue |= m_FirstNType.unmarshall(ctx, soapval, "FirstNType");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_PageStartFrom.unmarshall(ctx, soapval, "PageStartFrom");
	hasValue |= m_Sortby.unmarshall(ctx, soapval, "Sortby");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_OneLevelDirFileReturn.unmarshall(ctx, soapval, "OneLevelDirFileReturn");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	hasValue |= m_MaxNumberOfFiles.unmarshall(ctx, soapval, "MaxNumberOfFiles");
	hasValue |= m_IncludeSuperOwner.unmarshall(ctx, soapval, "IncludeSuperOwner");
	return hasValue;
}

bool CDFUQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Prefix.unmarshall(ctx, params, attachments, "Prefix", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_NodeGroup.unmarshall(ctx, params, attachments, "NodeGroup", basepath);
	hasValue |= m_ContentType.unmarshall(ctx, params, attachments, "ContentType", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_FileType.unmarshall(ctx, params, attachments, "FileType", basepath);
	hasValue |= m_FileSizeFrom.unmarshall(ctx, params, attachments, "FileSizeFrom", basepath);
	hasValue |= m_FileSizeTo.unmarshall(ctx, params, attachments, "FileSizeTo", basepath);
	hasValue |= m_FirstN.unmarshall(ctx, params, attachments, "FirstN", basepath);
	hasValue |= m_FirstNType.unmarshall(ctx, params, attachments, "FirstNType", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(ctx, params, attachments, "PageStartFrom", basepath);
	hasValue |= m_Sortby.unmarshall(ctx, params, attachments, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_OneLevelDirFileReturn.unmarshall(ctx, params, attachments, "OneLevelDirFileReturn", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	hasValue |= m_MaxNumberOfFiles.unmarshall(ctx, params, attachments, "MaxNumberOfFiles", basepath);
	hasValue |= m_IncludeSuperOwner.unmarshall(ctx, params, attachments, "IncludeSuperOwner", basepath);
	return hasValue;
}

const char * CDFUQueryRequest::getPrefix() { return m_Prefix.query();}
const char * CDFUQueryRequest::getClusterName() { return m_ClusterName.query();}
const char * CDFUQueryRequest::getNodeGroup() { return m_NodeGroup.query();}
const char * CDFUQueryRequest::getContentType() { return m_ContentType.query();}
const char * CDFUQueryRequest::getLogicalName() { return m_LogicalName.query();}
const char * CDFUQueryRequest::getOwner() { return m_Owner.query();}
const char * CDFUQueryRequest::getStartDate() { return m_StartDate.query();}
const char * CDFUQueryRequest::getEndDate() { return m_EndDate.query();}
const char * CDFUQueryRequest::getFileType() { return m_FileType.query();}
bool CDFUQueryRequest::getFileSizeFrom_isNull(){return m_FileSizeFrom.is_nil();}
__int64 CDFUQueryRequest::getFileSizeFrom() { return m_FileSizeFrom;}
bool CDFUQueryRequest::getFileSizeTo_isNull(){return m_FileSizeTo.is_nil();}
__int64 CDFUQueryRequest::getFileSizeTo() { return m_FileSizeTo;}
bool CDFUQueryRequest::getFirstN_isNull(){return m_FirstN.is_nil();}
int CDFUQueryRequest::getFirstN() { return m_FirstN;}
const char * CDFUQueryRequest::getFirstNType() { return m_FirstNType.query();}
bool CDFUQueryRequest::getPageSize_isNull(){return m_PageSize.is_nil();}
int CDFUQueryRequest::getPageSize() { return m_PageSize;}
bool CDFUQueryRequest::getPageStartFrom_isNull(){return m_PageStartFrom.is_nil();}
int CDFUQueryRequest::getPageStartFrom() { return m_PageStartFrom;}
const char * CDFUQueryRequest::getSortby() { return m_Sortby.query();}
bool CDFUQueryRequest::getDescending_isNull(){return m_Descending.is_nil();}
bool CDFUQueryRequest::getDescending() { return m_Descending;}
bool CDFUQueryRequest::getOneLevelDirFileReturn_isNull(){return m_OneLevelDirFileReturn.is_nil();}
bool CDFUQueryRequest::getOneLevelDirFileReturn() { return m_OneLevelDirFileReturn;}
bool CDFUQueryRequest::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CDFUQueryRequest::getCacheHint() { return m_CacheHint;}
bool CDFUQueryRequest::getMaxNumberOfFiles_isNull(){return m_MaxNumberOfFiles.is_nil();}
int CDFUQueryRequest::getMaxNumberOfFiles() { return m_MaxNumberOfFiles;}
bool CDFUQueryRequest::getIncludeSuperOwner_isNull(){return m_IncludeSuperOwner.is_nil();}
bool CDFUQueryRequest::getIncludeSuperOwner() { return m_IncludeSuperOwner;}
void CDFUQueryRequest::setPrefix(const char * val){ m_Prefix.set(val); }
void CDFUQueryRequest::setClusterName(const char * val){ m_ClusterName.set(val); }
void CDFUQueryRequest::setNodeGroup(const char * val){ m_NodeGroup.set(val); }
void CDFUQueryRequest::setContentType(const char * val){ m_ContentType.set(val); }
void CDFUQueryRequest::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUQueryRequest::setOwner(const char * val){ m_Owner.set(val); }
void CDFUQueryRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CDFUQueryRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CDFUQueryRequest::setFileType(const char * val){ m_FileType.set(val); }
void CDFUQueryRequest::setFileSizeFrom_null(){ m_FileSizeFrom.Nil(); }void CDFUQueryRequest::setFileSizeFrom(__int64 val){ m_FileSizeFrom=val; }
void CDFUQueryRequest::setFileSizeTo_null(){ m_FileSizeTo.Nil(); }void CDFUQueryRequest::setFileSizeTo(__int64 val){ m_FileSizeTo=val; }
void CDFUQueryRequest::setFirstN_null(){ m_FirstN.Nil(); }void CDFUQueryRequest::setFirstN(int val){ m_FirstN=val; }
void CDFUQueryRequest::setFirstNType(const char * val){ m_FirstNType.set(val); }
void CDFUQueryRequest::setPageSize_null(){ m_PageSize.Nil(); }void CDFUQueryRequest::setPageSize(int val){ m_PageSize=val; }
void CDFUQueryRequest::setPageStartFrom_null(){ m_PageStartFrom.Nil(); }void CDFUQueryRequest::setPageStartFrom(int val){ m_PageStartFrom=val; }
void CDFUQueryRequest::setSortby(const char * val){ m_Sortby.set(val); }
void CDFUQueryRequest::setDescending_null(){ m_Descending.Nil(); }void CDFUQueryRequest::setDescending(bool val){ m_Descending=val; }
void CDFUQueryRequest::setOneLevelDirFileReturn_null(){ m_OneLevelDirFileReturn.Nil(); }void CDFUQueryRequest::setOneLevelDirFileReturn(bool val){ m_OneLevelDirFileReturn=val; }
void CDFUQueryRequest::setCacheHint_null(){ m_CacheHint.Nil(); }void CDFUQueryRequest::setCacheHint(__int64 val){ m_CacheHint=val; }
void CDFUQueryRequest::setMaxNumberOfFiles_null(){ m_MaxNumberOfFiles.Nil(); }void CDFUQueryRequest::setMaxNumberOfFiles(int val){ m_MaxNumberOfFiles=val; }
void CDFUQueryRequest::setIncludeSuperOwner_null(){ m_IncludeSuperOwner.Nil(); }void CDFUQueryRequest::setIncludeSuperOwner(bool val){ m_IncludeSuperOwner=val; }
extern "C"  IEspDFUQueryRequest *createDFUQueryRequest(const char *serv){return ((IEspDFUQueryRequest *)new CDFUQueryRequest(serv));}
extern "C"  IClientDFUQueryRequest *createClientDFUQueryRequest(const char *serv){return ((IClientDFUQueryRequest *)new CDFUQueryRequest(serv));}

//=======================================================
// class CDFUQueryResponse Implementation
//=======================================================

CDFUQueryResponse::CDFUQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DFULogicalFiles(nilIgnore),m_Prefix(nilIgnore),m_ClusterName(nilIgnore),m_NodeGroup(nilIgnore),m_LogicalName(nilIgnore),m_Description(nilIgnore),m_Owner(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_FileType(nilIgnore),m_FileSizeFrom(-1, nilIgnore,false),m_FileSizeTo(-1, nilIgnore,false),m_FirstN(-1, nilIgnore,false),m_FirstNType(nilIgnore),m_PageSize(20, nilIgnore,false),m_PageStartFrom(1, nilIgnore,false),m_LastPageFrom(-1, nilIgnore,false),m_PageEndAt(nilIgnore),m_PrevPageFrom(-1, nilIgnore,false),m_NextPageFrom(-1, nilIgnore,false),m_NumFiles(nilIgnore),m_Sortby(nilIgnore),m_Descending(0, nilIgnore,false),m_BasicQuery(nilIgnore),m_ParametersForPaging(nilIgnore),m_Filters(nilIgnore),m_CacheHint(nilIgnore),m_IsSubsetOfFiles(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUQueryResponse::CDFUQueryResponse(const char *serviceName, const char *bc)
	: m_DFULogicalFiles(nilIgnore),m_Prefix(nilIgnore),m_ClusterName(nilIgnore),m_NodeGroup(nilIgnore),m_LogicalName(nilIgnore),m_Description(nilIgnore),m_Owner(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_FileType(nilIgnore),m_FileSizeFrom(-1, nilIgnore,false),m_FileSizeTo(-1, nilIgnore,false),m_FirstN(-1, nilIgnore,false),m_FirstNType(nilIgnore),m_PageSize(20, nilIgnore,false),m_PageStartFrom(1, nilIgnore,false),m_LastPageFrom(-1, nilIgnore,false),m_PageEndAt(nilIgnore),m_PrevPageFrom(-1, nilIgnore,false),m_NextPageFrom(-1, nilIgnore,false),m_NumFiles(nilIgnore),m_Sortby(nilIgnore),m_Descending(0, nilIgnore,false),m_BasicQuery(nilIgnore),m_ParametersForPaging(nilIgnore),m_Filters(nilIgnore),m_CacheHint(nilIgnore),m_IsSubsetOfFiles(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryResponse");
}

CDFUQueryResponse::CDFUQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DFULogicalFiles(nilIgnore),m_Prefix(nilIgnore),m_ClusterName(nilIgnore),m_NodeGroup(nilIgnore),m_LogicalName(nilIgnore),m_Description(nilIgnore),m_Owner(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_FileType(nilIgnore),m_FileSizeFrom(-1, nilIgnore,false),m_FileSizeTo(-1, nilIgnore,false),m_FirstN(-1, nilIgnore,false),m_FirstNType(nilIgnore),m_PageSize(20, nilIgnore,false),m_PageStartFrom(1, nilIgnore,false),m_LastPageFrom(-1, nilIgnore,false),m_PageEndAt(nilIgnore),m_PrevPageFrom(-1, nilIgnore,false),m_NextPageFrom(-1, nilIgnore,false),m_NumFiles(nilIgnore),m_Sortby(nilIgnore),m_Descending(0, nilIgnore,false),m_BasicQuery(nilIgnore),m_ParametersForPaging(nilIgnore),m_Filters(nilIgnore),m_CacheHint(nilIgnore),m_IsSubsetOfFiles(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUQueryResponse::CDFUQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DFULogicalFiles(nilIgnore),m_Prefix(nilIgnore),m_ClusterName(nilIgnore),m_NodeGroup(nilIgnore),m_LogicalName(nilIgnore),m_Description(nilIgnore),m_Owner(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_FileType(nilIgnore),m_FileSizeFrom(-1, nilIgnore,false),m_FileSizeTo(-1, nilIgnore,false),m_FirstN(-1, nilIgnore,false),m_FirstNType(nilIgnore),m_PageSize(20, nilIgnore,false),m_PageStartFrom(1, nilIgnore,false),m_LastPageFrom(-1, nilIgnore,false),m_PageEndAt(nilIgnore),m_PrevPageFrom(-1, nilIgnore,false),m_NextPageFrom(-1, nilIgnore,false),m_NumFiles(nilIgnore),m_Sortby(nilIgnore),m_Descending(0, nilIgnore,false),m_BasicQuery(nilIgnore),m_ParametersForPaging(nilIgnore),m_Filters(nilIgnore),m_CacheHint(nilIgnore),m_IsSubsetOfFiles(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFULogicalFiles\" type=\"tns:ArrayOfDFULogicalFile\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Prefix\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUQueryResponse","ClusterName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUQueryResponse","NodeGroup")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NodeGroup\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"FileSizeFrom\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"FileSizeTo\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"FirstN\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("DFUQueryResponse","FirstNType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FirstNType\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"20\" name=\"PageSize\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"1\" name=\"PageStartFrom\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"LastPageFrom\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageEndAt\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"PrevPageFrom\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"NextPageFrom\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumFiles\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sortby\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BasicQuery\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ParametersForPaging\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Filters\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUQueryResponse","CacheHint")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("DFUQueryResponse","IsSubsetOfFiles")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsSubsetOfFiles\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUQueryResponse","Warning")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Warning\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFULogicalFile::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFULogicalFile") && added.getValue("ArrayOfDFULogicalFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFULogicalFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFULogicalFile\" type=\"tns:DFULogicalFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFULogicalFile",1);
	}
	return schema;
}

void CDFUQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("DFUQueryResponse","ClusterName",1.26);
	info.addMinVersion("DFUQueryResponse","NodeGroup",1.26);
	info.addDeprVersion("DFUQueryResponse","FirstNType",1.24);
	info.addMinVersion("DFUQueryResponse","CacheHint",1.24);
	info.addMinVersion("DFUQueryResponse","IsSubsetOfFiles",1.3);
	info.addMinVersion("DFUQueryResponse","Warning",1.3);
	if (!added.getValue("DFULogicalFile"))
	{
		added.setValue("DFULogicalFile",1);
		CDFULogicalFile::getMapInfo(info,added);
	}
}

StringBuffer &CDFUQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFULogicalFiles");
	form.appendf("<tr><td><b>DFULogicalFiles: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Prefix");
	form.appendf("  <tr><td><b>Prefix: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUQueryResponse","ClusterName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterName");
		form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUQueryResponse","NodeGroup")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NodeGroup");
		form.appendf("  <tr><td><b>NodeGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileType");
	form.appendf("  <tr><td><b>FileType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileSizeFrom");
	form.appendf("  <tr><td><b>FileSizeFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileSizeTo");
	form.appendf("  <tr><td><b>FileSizeTo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("FirstN");
	form.appendf("  <tr><td><b>FirstN: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUQueryResponse","FirstNType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FirstNType");
		form.appendf("  <tr><td><b>FirstNType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PageSize");
	form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PageStartFrom");
	form.appendf("  <tr><td><b>PageStartFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LastPageFrom");
	form.appendf("  <tr><td><b>LastPageFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PageEndAt");
	form.appendf("  <tr><td><b>PageEndAt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PrevPageFrom");
	form.appendf("  <tr><td><b>PrevPageFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NextPageFrom");
	form.appendf("  <tr><td><b>NextPageFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NumFiles");
	form.appendf("  <tr><td><b>NumFiles: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Sortby");
	form.appendf("  <tr><td><b>Sortby: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Descending");
	
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BasicQuery");
	form.appendf("  <tr><td><b>BasicQuery: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ParametersForPaging");
	form.appendf("  <tr><td><b>ParametersForPaging: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Filters");
	form.appendf("  <tr><td><b>Filters: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUQueryResponse","CacheHint")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CacheHint");
		form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUQueryResponse","IsSubsetOfFiles")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsSubsetOfFiles");
		
	form.appendf("  <tr><td><b>IsSubsetOfFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUQueryResponse","Warning")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Warning");
		form.appendf("  <tr><td><b>Warning: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DFULogicalFiles.marshall(rpc_resp, "DFULogicalFiles", "DFULogicalFile");
		m_Prefix.marshall(rpc_resp, "Prefix", "", "", "");
		if ((clientVer==-1.0 || clientVer<1.26))
			m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.26))
			m_NodeGroup.marshall(rpc_resp, "NodeGroup", "", "", "");
		m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
		m_Description.marshall(rpc_resp, "Description", "", "", "");
		m_Owner.marshall(rpc_resp, "Owner", "", "", "");
		m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
		m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
		m_FileType.marshall(rpc_resp, "FileType", "", "", "");
		m_FileSizeFrom.marshall(rpc_resp, "FileSizeFrom", "", "", "");
		m_FileSizeTo.marshall(rpc_resp, "FileSizeTo", "", "", "");
		m_FirstN.marshall(rpc_resp, "FirstN", "", "", "");
		if ((clientVer==-1.0 || clientVer<1.24))
			m_FirstNType.marshall(rpc_resp, "FirstNType", "", "", "");
		m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
		m_PageStartFrom.marshall(rpc_resp, "PageStartFrom", "", "", "");
		m_LastPageFrom.marshall(rpc_resp, "LastPageFrom", "", "", "");
		m_PageEndAt.marshall(rpc_resp, "PageEndAt", "", "", "");
		m_PrevPageFrom.marshall(rpc_resp, "PrevPageFrom", "", "", "");
		m_NextPageFrom.marshall(rpc_resp, "NextPageFrom", "", "", "");
		m_NumFiles.marshall(rpc_resp, "NumFiles", "", "", "");
		m_Sortby.marshall(rpc_resp, "Sortby", "", "", "");
		m_Descending.marshall(rpc_resp, "Descending", "", "", "");
		m_BasicQuery.marshall(rpc_resp, "BasicQuery", "", "", "");
		m_ParametersForPaging.marshall(rpc_resp, "ParametersForPaging", "", "", "");
		m_Filters.marshall(rpc_resp, "Filters", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.24))
			m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.3))
			m_IsSubsetOfFiles.marshall(rpc_resp, "IsSubsetOfFiles", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.3))
			m_Warning.marshall(rpc_resp, "Warning", "", "", "");
	}
}


void CDFUQueryResponse::copy(CDFUQueryResponse &from)
{
	m_DFULogicalFiles.copy(from.m_DFULogicalFiles);
	m_Prefix.copy(from.m_Prefix);
	m_ClusterName.copy(from.m_ClusterName);
	m_NodeGroup.copy(from.m_NodeGroup);
	m_LogicalName.copy(from.m_LogicalName);
	m_Description.copy(from.m_Description);
	m_Owner.copy(from.m_Owner);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_FileType.copy(from.m_FileType);
	m_FileSizeFrom.copy(from.m_FileSizeFrom);
	m_FileSizeTo.copy(from.m_FileSizeTo);
	m_FirstN.copy(from.m_FirstN);
	m_FirstNType.copy(from.m_FirstNType);
	m_PageSize.copy(from.m_PageSize);
	m_PageStartFrom.copy(from.m_PageStartFrom);
	m_LastPageFrom.copy(from.m_LastPageFrom);
	m_PageEndAt.copy(from.m_PageEndAt);
	m_PrevPageFrom.copy(from.m_PrevPageFrom);
	m_NextPageFrom.copy(from.m_NextPageFrom);
	m_NumFiles.copy(from.m_NumFiles);
	m_Sortby.copy(from.m_Sortby);
	m_Descending.copy(from.m_Descending);
	m_BasicQuery.copy(from.m_BasicQuery);
	m_ParametersForPaging.copy(from.m_ParametersForPaging);
	m_Filters.copy(from.m_Filters);
	m_CacheHint.copy(from.m_CacheHint);
	m_IsSubsetOfFiles.copy(from.m_IsSubsetOfFiles);
	m_Warning.copy(from.m_Warning);
}


void CDFUQueryResponse::copy(IConstDFUQueryResponse &ifrom)
{
	setDFULogicalFiles(ifrom.getDFULogicalFiles());
	setPrefix(ifrom.getPrefix());
	setClusterName(ifrom.getClusterName());
	setNodeGroup(ifrom.getNodeGroup());
	setLogicalName(ifrom.getLogicalName());
	setDescription(ifrom.getDescription());
	setOwner(ifrom.getOwner());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setFileType(ifrom.getFileType());
	setFileSizeFrom(ifrom.getFileSizeFrom());
	setFileSizeTo(ifrom.getFileSizeTo());
	setFirstN(ifrom.getFirstN());
	setFirstNType(ifrom.getFirstNType());
	setPageSize(ifrom.getPageSize());
	setPageStartFrom(ifrom.getPageStartFrom());
	setLastPageFrom(ifrom.getLastPageFrom());
	setPageEndAt(ifrom.getPageEndAt());
	setPrevPageFrom(ifrom.getPrevPageFrom());
	setNextPageFrom(ifrom.getNextPageFrom());
	setNumFiles(ifrom.getNumFiles());
	setSortby(ifrom.getSortby());
	setDescending(ifrom.getDescending());
	setBasicQuery(ifrom.getBasicQuery());
	setParametersForPaging(ifrom.getParametersForPaging());
	setFilters(ifrom.getFilters());
	setCacheHint(ifrom.getCacheHint());
	setIsSubsetOfFiles(ifrom.getIsSubsetOfFiles());
	setWarning(ifrom.getWarning());
}


void CDFUQueryResponse::getAttributes(IProperties &attributes)
{
}


void CDFUQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_DFULogicalFiles.toStr(ctx, buffer, "DFULogicalFiles", "DFULogicalFile");
		m_Prefix.toStr(ctx, buffer, "Prefix", "", true, "", "");
		if ((clientVer==-1.0 || clientVer<1.26))
			m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.26))
			m_NodeGroup.toStr(ctx, buffer, "NodeGroup", "", true, "", "");
		m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
		m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
		m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
		m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
		m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
		m_FileType.toStr(ctx, buffer, "FileType", "", true, "", "");
		m_FileSizeFrom.toStr(ctx, buffer, "FileSizeFrom", "", true, "", "");
		m_FileSizeTo.toStr(ctx, buffer, "FileSizeTo", "", true, "", "");
		m_FirstN.toStr(ctx, buffer, "FirstN", "", true, "", "");
		if ((clientVer==-1.0 || clientVer<1.24))
			m_FirstNType.toStr(ctx, buffer, "FirstNType", "", true, "", "");
		m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
		m_PageStartFrom.toStr(ctx, buffer, "PageStartFrom", "", true, "", "");
		m_LastPageFrom.toStr(ctx, buffer, "LastPageFrom", "", true, "", "");
		m_PageEndAt.toStr(ctx, buffer, "PageEndAt", "", true, "", "");
		m_PrevPageFrom.toStr(ctx, buffer, "PrevPageFrom", "", true, "", "");
		m_NextPageFrom.toStr(ctx, buffer, "NextPageFrom", "", true, "", "");
		m_NumFiles.toStr(ctx, buffer, "NumFiles", "", true, "", "");
		m_Sortby.toStr(ctx, buffer, "Sortby", "", true, "", "");
		m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
		m_BasicQuery.toStr(ctx, buffer, "BasicQuery", "", true, "", "");
		m_ParametersForPaging.toStr(ctx, buffer, "ParametersForPaging", "", true, "", "");
		m_Filters.toStr(ctx, buffer, "Filters", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.24))
			m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.3))
			m_IsSubsetOfFiles.toStr(ctx, buffer, "IsSubsetOfFiles", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.3))
			m_Warning.toStr(ctx, buffer, "Warning", "", true, "", "");
	}
}


void CDFUQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUQueryResponse::serializer(IEspContext* ctx, IConstDFUQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUQueryResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field DFULogicalFiles
	{
		IArrayOf<IConstDFULogicalFile>& v = src.getDFULogicalFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<DFULogicalFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFULogicalFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFULogicalFiles>");
	}
	// field Prefix
	{
		const char* s = src.getPrefix();
		if (s && *s)
		{
			buffer.append("<Prefix>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Prefix>");
		}
	}
	// field ClusterName
	if ((clientVer==-1.0 || clientVer<1.26))
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field NodeGroup
	if ((clientVer==-1.0 || clientVer>=1.26))
	{
		const char* s = src.getNodeGroup();
		if (s && *s)
		{
			buffer.append("<NodeGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NodeGroup>");
		}
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field FileType
	{
		const char* s = src.getFileType();
		if (s && *s)
		{
			buffer.append("<FileType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileType>");
		}
	}
	// field FileSizeFrom
	{
		//*** default kind: TK_INT; type=int64, name=FileSizeFrom
		buffer.append("<FileSizeFrom>");
		buffer.append(src.getFileSizeFrom());
		buffer.append("</FileSizeFrom>");
	}
	// field FileSizeTo
	{
		//*** default kind: TK_INT; type=int64, name=FileSizeTo
		buffer.append("<FileSizeTo>");
		buffer.append(src.getFileSizeTo());
		buffer.append("</FileSizeTo>");
	}
	// field FirstN
	{
		int n = src.getFirstN();
		if (n)
			buffer.appendf("<FirstN>%d</FirstN>", n);
	}
	// field FirstNType
	if ((clientVer==-1.0 || clientVer<1.24))
	{
		const char* s = src.getFirstNType();
		if (s && *s)
		{
			buffer.append("<FirstNType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FirstNType>");
		}
	}
	// field PageSize
	{
		int n = src.getPageSize();
		if (n)
			buffer.appendf("<PageSize>%d</PageSize>", n);
	}
	// field PageStartFrom
	{
		//*** default kind: TK_INT; type=int64, name=PageStartFrom
		buffer.append("<PageStartFrom>");
		buffer.append(src.getPageStartFrom());
		buffer.append("</PageStartFrom>");
	}
	// field LastPageFrom
	{
		//*** default kind: TK_INT; type=int64, name=LastPageFrom
		buffer.append("<LastPageFrom>");
		buffer.append(src.getLastPageFrom());
		buffer.append("</LastPageFrom>");
	}
	// field PageEndAt
	{
		//*** default kind: TK_INT; type=int64, name=PageEndAt
		buffer.append("<PageEndAt>");
		buffer.append(src.getPageEndAt());
		buffer.append("</PageEndAt>");
	}
	// field PrevPageFrom
	{
		//*** default kind: TK_INT; type=int64, name=PrevPageFrom
		buffer.append("<PrevPageFrom>");
		buffer.append(src.getPrevPageFrom());
		buffer.append("</PrevPageFrom>");
	}
	// field NextPageFrom
	{
		//*** default kind: TK_INT; type=int64, name=NextPageFrom
		buffer.append("<NextPageFrom>");
		buffer.append(src.getNextPageFrom());
		buffer.append("</NextPageFrom>");
	}
	// field NumFiles
	{
		//*** default kind: TK_INT; type=int64, name=NumFiles
		buffer.append("<NumFiles>");
		buffer.append(src.getNumFiles());
		buffer.append("</NumFiles>");
	}
	// field Sortby
	{
		const char* s = src.getSortby();
		if (s && *s)
		{
			buffer.append("<Sortby>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Sortby>");
		}
	}
	// field Descending
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field BasicQuery
	{
		const char* s = src.getBasicQuery();
		if (s && *s)
		{
			buffer.append("<BasicQuery>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BasicQuery>");
		}
	}
	// field ParametersForPaging
	{
		const char* s = src.getParametersForPaging();
		if (s && *s)
		{
			buffer.append("<ParametersForPaging>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ParametersForPaging>");
		}
	}
	// field Filters
	{
		const char* s = src.getFilters();
		if (s && *s)
		{
			buffer.append("<Filters>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filters>");
		}
	}
	// field CacheHint
	if ((clientVer==-1.0 || clientVer>=1.24))
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	// field IsSubsetOfFiles
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		bool b = src.getIsSubsetOfFiles();
		if (b)
			buffer.appendf("<IsSubsetOfFiles>1</IsSubsetOfFiles>");
	}
	// field Warning
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		const char* s = src.getWarning();
		if (s && *s)
		{
			buffer.append("<Warning>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Warning>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUQueryResponse>");
}

bool CDFUQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DFULogicalFiles.unmarshall(rpc_request, "DFULogicalFiles", basepath);
		hasValue |= m_Prefix.unmarshall(rpc_request, "Prefix", basepath);
		hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
		hasValue |= m_NodeGroup.unmarshall(rpc_request, "NodeGroup", basepath);
		hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
		hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
		hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
		hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
		hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
		hasValue |= m_FileType.unmarshall(rpc_request, "FileType", basepath);
		hasValue |= m_FileSizeFrom.unmarshall(rpc_request, "FileSizeFrom", basepath);
		hasValue |= m_FileSizeTo.unmarshall(rpc_request, "FileSizeTo", basepath);
		hasValue |= m_FirstN.unmarshall(rpc_request, "FirstN", basepath);
		hasValue |= m_FirstNType.unmarshall(rpc_request, "FirstNType", basepath);
		hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
		hasValue |= m_PageStartFrom.unmarshall(rpc_request, "PageStartFrom", basepath);
		hasValue |= m_LastPageFrom.unmarshall(rpc_request, "LastPageFrom", basepath);
		hasValue |= m_PageEndAt.unmarshall(rpc_request, "PageEndAt", basepath);
		hasValue |= m_PrevPageFrom.unmarshall(rpc_request, "PrevPageFrom", basepath);
		hasValue |= m_NextPageFrom.unmarshall(rpc_request, "NextPageFrom", basepath);
		hasValue |= m_NumFiles.unmarshall(rpc_request, "NumFiles", basepath);
		hasValue |= m_Sortby.unmarshall(rpc_request, "Sortby", basepath);
		hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
		hasValue |= m_BasicQuery.unmarshall(rpc_request, "BasicQuery", basepath);
		hasValue |= m_ParametersForPaging.unmarshall(rpc_request, "ParametersForPaging", basepath);
		hasValue |= m_Filters.unmarshall(rpc_request, "Filters", basepath);
		hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
		hasValue |= m_IsSubsetOfFiles.unmarshall(rpc_request, "IsSubsetOfFiles", basepath);
		hasValue |= m_Warning.unmarshall(rpc_request, "Warning", basepath);
	}
	return hasValue;
}

bool CDFUQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DFULogicalFiles.unmarshall(ctx, soapval, "DFULogicalFiles");
	hasValue |= m_Prefix.unmarshall(ctx, soapval, "Prefix");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_NodeGroup.unmarshall(ctx, soapval, "NodeGroup");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_FileType.unmarshall(ctx, soapval, "FileType");
	hasValue |= m_FileSizeFrom.unmarshall(ctx, soapval, "FileSizeFrom");
	hasValue |= m_FileSizeTo.unmarshall(ctx, soapval, "FileSizeTo");
	hasValue |= m_FirstN.unmarshall(ctx, soapval, "FirstN");
	hasValue |= m_FirstNType.unmarshall(ctx, soapval, "FirstNType");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_PageStartFrom.unmarshall(ctx, soapval, "PageStartFrom");
	hasValue |= m_LastPageFrom.unmarshall(ctx, soapval, "LastPageFrom");
	hasValue |= m_PageEndAt.unmarshall(ctx, soapval, "PageEndAt");
	hasValue |= m_PrevPageFrom.unmarshall(ctx, soapval, "PrevPageFrom");
	hasValue |= m_NextPageFrom.unmarshall(ctx, soapval, "NextPageFrom");
	hasValue |= m_NumFiles.unmarshall(ctx, soapval, "NumFiles");
	hasValue |= m_Sortby.unmarshall(ctx, soapval, "Sortby");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_BasicQuery.unmarshall(ctx, soapval, "BasicQuery");
	hasValue |= m_ParametersForPaging.unmarshall(ctx, soapval, "ParametersForPaging");
	hasValue |= m_Filters.unmarshall(ctx, soapval, "Filters");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	hasValue |= m_IsSubsetOfFiles.unmarshall(ctx, soapval, "IsSubsetOfFiles");
	hasValue |= m_Warning.unmarshall(ctx, soapval, "Warning");
	return hasValue;
}

bool CDFUQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DFULogicalFiles.unmarshall(ctx, params, attachments, "DFULogicalFiles", basepath);
	hasValue |= m_Prefix.unmarshall(ctx, params, attachments, "Prefix", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_NodeGroup.unmarshall(ctx, params, attachments, "NodeGroup", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_FileType.unmarshall(ctx, params, attachments, "FileType", basepath);
	hasValue |= m_FileSizeFrom.unmarshall(ctx, params, attachments, "FileSizeFrom", basepath);
	hasValue |= m_FileSizeTo.unmarshall(ctx, params, attachments, "FileSizeTo", basepath);
	hasValue |= m_FirstN.unmarshall(ctx, params, attachments, "FirstN", basepath);
	hasValue |= m_FirstNType.unmarshall(ctx, params, attachments, "FirstNType", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(ctx, params, attachments, "PageStartFrom", basepath);
	hasValue |= m_LastPageFrom.unmarshall(ctx, params, attachments, "LastPageFrom", basepath);
	hasValue |= m_PageEndAt.unmarshall(ctx, params, attachments, "PageEndAt", basepath);
	hasValue |= m_PrevPageFrom.unmarshall(ctx, params, attachments, "PrevPageFrom", basepath);
	hasValue |= m_NextPageFrom.unmarshall(ctx, params, attachments, "NextPageFrom", basepath);
	hasValue |= m_NumFiles.unmarshall(ctx, params, attachments, "NumFiles", basepath);
	hasValue |= m_Sortby.unmarshall(ctx, params, attachments, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_BasicQuery.unmarshall(ctx, params, attachments, "BasicQuery", basepath);
	hasValue |= m_ParametersForPaging.unmarshall(ctx, params, attachments, "ParametersForPaging", basepath);
	hasValue |= m_Filters.unmarshall(ctx, params, attachments, "Filters", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	hasValue |= m_IsSubsetOfFiles.unmarshall(ctx, params, attachments, "IsSubsetOfFiles", basepath);
	hasValue |= m_Warning.unmarshall(ctx, params, attachments, "Warning", basepath);
	return hasValue;
}

IArrayOf<IConstDFULogicalFile> & CDFUQueryResponse::getDFULogicalFiles() { return (IArrayOf<IConstDFULogicalFile> &) m_DFULogicalFiles; }
const char * CDFUQueryResponse::getPrefix() { return m_Prefix.query();}
const char * CDFUQueryResponse::getClusterName() { return m_ClusterName.query();}
const char * CDFUQueryResponse::getNodeGroup() { return m_NodeGroup.query();}
const char * CDFUQueryResponse::getLogicalName() { return m_LogicalName.query();}
const char * CDFUQueryResponse::getDescription() { return m_Description.query();}
const char * CDFUQueryResponse::getOwner() { return m_Owner.query();}
const char * CDFUQueryResponse::getStartDate() { return m_StartDate.query();}
const char * CDFUQueryResponse::getEndDate() { return m_EndDate.query();}
const char * CDFUQueryResponse::getFileType() { return m_FileType.query();}
__int64 CDFUQueryResponse::getFileSizeFrom() { return m_FileSizeFrom;}
__int64 CDFUQueryResponse::getFileSizeTo() { return m_FileSizeTo;}
int CDFUQueryResponse::getFirstN() { return m_FirstN;}
const char * CDFUQueryResponse::getFirstNType() { return m_FirstNType.query();}
int CDFUQueryResponse::getPageSize() { return m_PageSize;}
__int64 CDFUQueryResponse::getPageStartFrom() { return m_PageStartFrom;}
__int64 CDFUQueryResponse::getLastPageFrom() { return m_LastPageFrom;}
__int64 CDFUQueryResponse::getPageEndAt() { return m_PageEndAt;}
__int64 CDFUQueryResponse::getPrevPageFrom() { return m_PrevPageFrom;}
__int64 CDFUQueryResponse::getNextPageFrom() { return m_NextPageFrom;}
__int64 CDFUQueryResponse::getNumFiles() { return m_NumFiles;}
const char * CDFUQueryResponse::getSortby() { return m_Sortby.query();}
bool CDFUQueryResponse::getDescending() { return m_Descending;}
const char * CDFUQueryResponse::getBasicQuery() { return m_BasicQuery.query();}
const char * CDFUQueryResponse::getParametersForPaging() { return m_ParametersForPaging.query();}
const char * CDFUQueryResponse::getFilters() { return m_Filters.query();}
__int64 CDFUQueryResponse::getCacheHint() { return m_CacheHint;}
bool CDFUQueryResponse::getIsSubsetOfFiles() { return m_IsSubsetOfFiles;}
const char * CDFUQueryResponse::getWarning() { return m_Warning.query();}
void CDFUQueryResponse::setDFULogicalFiles(IArrayOf<IEspDFULogicalFile> &val)
{
	m_DFULogicalFiles->kill();
	IArrayOf<IConstDFULogicalFile> &target = m_DFULogicalFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFULogicalFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUQueryResponse::setDFULogicalFiles(IArrayOf<IConstDFULogicalFile> &val)
{
	m_DFULogicalFiles->kill();
	IArrayOf<IConstDFULogicalFile> &target = m_DFULogicalFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFULogicalFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUQueryResponse::setPrefix(const char * val){ m_Prefix.set(val); }
void CDFUQueryResponse::setClusterName(const char * val){ m_ClusterName.set(val); }
void CDFUQueryResponse::setNodeGroup(const char * val){ m_NodeGroup.set(val); }
void CDFUQueryResponse::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUQueryResponse::setDescription(const char * val){ m_Description.set(val); }
void CDFUQueryResponse::setOwner(const char * val){ m_Owner.set(val); }
void CDFUQueryResponse::setStartDate(const char * val){ m_StartDate.set(val); }
void CDFUQueryResponse::setEndDate(const char * val){ m_EndDate.set(val); }
void CDFUQueryResponse::setFileType(const char * val){ m_FileType.set(val); }
void CDFUQueryResponse::setFileSizeFrom(__int64 val){ m_FileSizeFrom=val; }
void CDFUQueryResponse::setFileSizeTo(__int64 val){ m_FileSizeTo=val; }
void CDFUQueryResponse::setFirstN(int val){ m_FirstN=val; }
void CDFUQueryResponse::setFirstNType(const char * val){ m_FirstNType.set(val); }
void CDFUQueryResponse::setPageSize(int val){ m_PageSize=val; }
void CDFUQueryResponse::setPageStartFrom(__int64 val){ m_PageStartFrom=val; }
void CDFUQueryResponse::setLastPageFrom(__int64 val){ m_LastPageFrom=val; }
void CDFUQueryResponse::setPageEndAt(__int64 val){ m_PageEndAt=val; }
void CDFUQueryResponse::setPrevPageFrom(__int64 val){ m_PrevPageFrom=val; }
void CDFUQueryResponse::setNextPageFrom(__int64 val){ m_NextPageFrom=val; }
void CDFUQueryResponse::setNumFiles(__int64 val){ m_NumFiles=val; }
void CDFUQueryResponse::setSortby(const char * val){ m_Sortby.set(val); }
void CDFUQueryResponse::setDescending(bool val){ m_Descending=val; }
void CDFUQueryResponse::setBasicQuery(const char * val){ m_BasicQuery.set(val); }
void CDFUQueryResponse::setParametersForPaging(const char * val){ m_ParametersForPaging.set(val); }
void CDFUQueryResponse::setFilters(const char * val){ m_Filters.set(val); }
void CDFUQueryResponse::setCacheHint(__int64 val){ m_CacheHint=val; }
void CDFUQueryResponse::setIsSubsetOfFiles(bool val){ m_IsSubsetOfFiles=val; }
void CDFUQueryResponse::setWarning(const char * val){ m_Warning.set(val); }
extern "C"  IEspDFUQueryResponse *createDFUQueryResponse(const char *serv){return ((IEspDFUQueryResponse *)new CDFUQueryResponse(serv));}
extern "C"  IClientDFUQueryResponse *createClientDFUQueryResponse(const char *serv){return ((IClientDFUQueryResponse *)new CDFUQueryResponse(serv));}

//=======================================================
// class CDFUSearchRequest Implementation
//=======================================================

CDFUSearchRequest::CDFUSearchRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ShowExample(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUSearchRequest::CDFUSearchRequest(const char *serviceName, const char *bc)
	: m_ShowExample(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchRequest");
}

CDFUSearchRequest::CDFUSearchRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ShowExample(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUSearchRequest::CDFUSearchRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ShowExample(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUSearchRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowExample\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUSearchRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUSearchRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUSearchRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowExample");
	form.appendf("  <tr><td><b>ShowExample: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUSearchRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUSearchRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ShowExample.marshall(rpc_resp, "ShowExample", "", "", "");
}


void CDFUSearchRequest::copy(CDFUSearchRequest &from)
{
	m_ShowExample.copy(from.m_ShowExample);
}


void CDFUSearchRequest::copy(IConstDFUSearchRequest &ifrom)
{
	setShowExample(ifrom.getShowExample());
}


void CDFUSearchRequest::getAttributes(IProperties &attributes)
{
}


void CDFUSearchRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ShowExample.toStr(ctx, buffer, "ShowExample", "", true, "", "");
}


void CDFUSearchRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUSearchRequest::serializer(IEspContext* ctx, IConstDFUSearchRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUSearchRequest>");
	// field ShowExample
	{
		const char* s = src.getShowExample();
		if (s && *s)
		{
			buffer.append("<ShowExample>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowExample>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUSearchRequest>");
}

bool CDFUSearchRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ShowExample.unmarshall(rpc_request, "ShowExample", basepath);
	return hasValue;
}

bool CDFUSearchRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ShowExample.unmarshall(ctx, soapval, "ShowExample");
	return hasValue;
}

bool CDFUSearchRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ShowExample.unmarshall(ctx, params, attachments, "ShowExample", basepath);
	return hasValue;
}

const char * CDFUSearchRequest::getShowExample() { return m_ShowExample.query();}
void CDFUSearchRequest::setShowExample(const char * val){ m_ShowExample.set(val); }
extern "C"  IEspDFUSearchRequest *createDFUSearchRequest(const char *serv){return ((IEspDFUSearchRequest *)new CDFUSearchRequest(serv));}
extern "C"  IClientDFUSearchRequest *createClientDFUSearchRequest(const char *serv){return ((IClientDFUSearchRequest *)new CDFUSearchRequest(serv));}

//=======================================================
// class CDFUSearchResponse Implementation
//=======================================================

CDFUSearchResponse::CDFUSearchResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ShowExample(nilIgnore),m_ClusterNames(nilIgnore),m_FileTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUSearchResponse::CDFUSearchResponse(const char *serviceName, const char *bc)
	: m_ShowExample(nilIgnore),m_ClusterNames(nilIgnore),m_FileTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchResponse");
}

CDFUSearchResponse::CDFUSearchResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ShowExample(nilIgnore),m_ClusterNames(nilIgnore),m_FileTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUSearchResponse::CDFUSearchResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ShowExample(nilIgnore),m_ClusterNames(nilIgnore),m_FileTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUSearchResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowExample\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterNames\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"ClusterName\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileTypes\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"FileType\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUSearchResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUSearchResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUSearchResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowExample");
	form.appendf("  <tr><td><b>ShowExample: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterNames");
	form.appendf("<tr><td><b>ClusterNames: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileTypes");
	form.appendf("<tr><td><b>FileTypes: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUSearchResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUSearchResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ShowExample.marshall(rpc_resp, "ShowExample", "", "", "");
		m_ClusterNames.marshall(rpc_resp, "ClusterNames", "ClusterName");
		m_FileTypes.marshall(rpc_resp, "FileTypes", "FileType");
	}
}


void CDFUSearchResponse::copy(CDFUSearchResponse &from)
{
	m_ShowExample.copy(from.m_ShowExample);
	m_ClusterNames.copy(from.m_ClusterNames);
	m_FileTypes.copy(from.m_FileTypes);
}


void CDFUSearchResponse::copy(IConstDFUSearchResponse &ifrom)
{
	setShowExample(ifrom.getShowExample());
	setClusterNames(ifrom.getClusterNames());
	setFileTypes(ifrom.getFileTypes());
}


void CDFUSearchResponse::getAttributes(IProperties &attributes)
{
}


void CDFUSearchResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ShowExample.toStr(ctx, buffer, "ShowExample", "", true, "", "");
		m_ClusterNames.toStr(ctx, buffer, "ClusterNames", "ClusterName");
		m_FileTypes.toStr(ctx, buffer, "FileTypes", "FileType");
	}
}


void CDFUSearchResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUSearchResponse::serializer(IEspContext* ctx, IConstDFUSearchResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUSearchResponse>");
	// field ShowExample
	{
		const char* s = src.getShowExample();
		if (s && *s)
		{
			buffer.append("<ShowExample>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowExample>");
		}
	}
	// field ClusterNames
	{
		StringArray& v = src.getClusterNames();
		if (v.length()>0)
			buffer.append("<ClusterNames>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<ClusterName>%s</ClusterName>",v.item(i));
		if (v.length()>0)
			buffer.append("</ClusterNames>");
	}
	// field FileTypes
	{
		StringArray& v = src.getFileTypes();
		if (v.length()>0)
			buffer.append("<FileTypes>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<FileType>%s</FileType>",v.item(i));
		if (v.length()>0)
			buffer.append("</FileTypes>");
	}
	if (keepRootTag)
		buffer.append("</DFUSearchResponse>");
}

bool CDFUSearchResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ShowExample.unmarshall(rpc_request, "ShowExample", basepath);
		hasValue |= m_ClusterNames.unmarshall(rpc_request, "ClusterNames", basepath);
		hasValue |= m_FileTypes.unmarshall(rpc_request, "FileTypes", basepath);
	}
	return hasValue;
}

bool CDFUSearchResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ShowExample.unmarshall(ctx, soapval, "ShowExample");
	hasValue |= m_ClusterNames.unmarshall(ctx, soapval, "ClusterNames");
	hasValue |= m_FileTypes.unmarshall(ctx, soapval, "FileTypes");
	return hasValue;
}

bool CDFUSearchResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ShowExample.unmarshall(ctx, params, attachments, "ShowExample", basepath);
	hasValue |= m_ClusterNames.unmarshall(ctx, params, attachments, "ClusterNames", basepath);
	hasValue |= m_FileTypes.unmarshall(ctx, params, attachments, "FileTypes", basepath);
	return hasValue;
}

const char * CDFUSearchResponse::getShowExample() { return m_ShowExample.query();}
StringArray & CDFUSearchResponse::getClusterNames() { return (StringArray &) m_ClusterNames; }
StringArray & CDFUSearchResponse::getFileTypes() { return (StringArray &) m_FileTypes; }
void CDFUSearchResponse::setShowExample(const char * val){ m_ShowExample.set(val); }
void CDFUSearchResponse::setClusterNames(StringArray &val){ m_ClusterNames->kill();  CloneArray(m_ClusterNames.getValue(), val); }
void CDFUSearchResponse::setFileTypes(StringArray &val){ m_FileTypes->kill();  CloneArray(m_FileTypes.getValue(), val); }
extern "C"  IEspDFUSearchResponse *createDFUSearchResponse(const char *serv){return ((IEspDFUSearchResponse *)new CDFUSearchResponse(serv));}
extern "C"  IClientDFUSearchResponse *createClientDFUSearchResponse(const char *serv){return ((IClientDFUSearchResponse *)new CDFUSearchResponse(serv));}

//=======================================================
// class CDFUArrayActionRequest Implementation
//=======================================================

CDFUArrayActionRequest::CDFUArrayActionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Type(nilIgnore),m_NoDelete(nilIgnore),m_BackToPage(nilIgnore),m_LogicalFiles(nilIgnore),m_removeFromSuperfiles(0, nilIgnore,false),m_removeRecursively(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUArrayActionRequest::CDFUArrayActionRequest(const char *serviceName, const char *bc)
	: m_Type(nilIgnore),m_NoDelete(nilIgnore),m_BackToPage(nilIgnore),m_LogicalFiles(nilIgnore),m_removeFromSuperfiles(0, nilIgnore,false),m_removeRecursively(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionRequest");
}

CDFUArrayActionRequest::CDFUArrayActionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Type(nilIgnore),m_NoDelete(nilIgnore),m_BackToPage(nilIgnore),m_LogicalFiles(nilIgnore),m_removeFromSuperfiles(0, nilIgnore,false),m_removeRecursively(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUArrayActionRequest::CDFUArrayActionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Type(nilIgnore),m_NoDelete(nilIgnore),m_BackToPage(nilIgnore),m_LogicalFiles(nilIgnore),m_removeFromSuperfiles(0, nilIgnore,false),m_removeRecursively(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUArrayActionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"tns:DFUArrayActions\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NoDelete\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("DFUArrayActionRequest","BackToPage")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BackToPage\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalFiles\" type=\"tns:EspStringArray\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"removeFromSuperfiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"removeRecursively\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXDFUArrayActions::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CDFUArrayActionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUArrayActionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUArrayActionRequest","BackToPage",1.04);
	if (!added.getValue("DFUArrayActions"))
	{
		added.setValue("DFUArrayActions",1);
		CXDFUArrayActions::getMapInfo(info,added);
	}
}

StringBuffer &CDFUArrayActionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoDelete");
	
	form.appendf("  <tr><td><b>NoDelete? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("DFUArrayActionRequest","BackToPage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BackToPage");
		form.appendf("  <tr><td><b>BackToPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalFiles");
	form.appendf("<tr><td><b>LogicalFiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("removeFromSuperfiles");
	
	form.appendf("  <tr><td><b>removeFromSuperfiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("removeRecursively");
	
	form.appendf("  <tr><td><b>removeRecursively? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUArrayActionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUArrayActionRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_NoDelete.marshall(rpc_resp, "NoDelete", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.04))
		m_BackToPage.marshall(rpc_resp, "BackToPage", "", "", "");
	m_LogicalFiles.marshall(rpc_resp, "LogicalFiles", "Item");
	m_removeFromSuperfiles.marshall(rpc_resp, "removeFromSuperfiles", "", "", "");
	m_removeRecursively.marshall(rpc_resp, "removeRecursively", "", "", "");
}


void CDFUArrayActionRequest::copy(CDFUArrayActionRequest &from)
{
	m_Type.copy(from.m_Type);
	m_NoDelete.copy(from.m_NoDelete);
	m_BackToPage.copy(from.m_BackToPage);
	m_LogicalFiles.copy(from.m_LogicalFiles);
	m_removeFromSuperfiles.copy(from.m_removeFromSuperfiles);
	m_removeRecursively.copy(from.m_removeRecursively);
}


void CDFUArrayActionRequest::copy(IConstDFUArrayActionRequest &ifrom)
{
	setType(ifrom.getType());
	setNoDelete(ifrom.getNoDelete());
	setBackToPage(ifrom.getBackToPage());
	setLogicalFiles(ifrom.getLogicalFiles());
	setRemoveFromSuperfiles(ifrom.getRemoveFromSuperfiles());
	setRemoveRecursively(ifrom.getRemoveRecursively());
}


void CDFUArrayActionRequest::getAttributes(IProperties &attributes)
{
}


void CDFUArrayActionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_NoDelete.toStr(ctx, buffer, "NoDelete", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.04))
		m_BackToPage.toStr(ctx, buffer, "BackToPage", "", true, "", "");
	m_LogicalFiles.toStr(ctx, buffer, "LogicalFiles", "Item");
	m_removeFromSuperfiles.toStr(ctx, buffer, "removeFromSuperfiles", "", true, "", "");
	m_removeRecursively.toStr(ctx, buffer, "removeRecursively", "", true, "", "");
}


void CDFUArrayActionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUArrayActionRequest::serializer(IEspContext* ctx, IConstDFUArrayActionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUArrayActionRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Type
	{
		const char* s = src.getTypeAsString();
		buffer.append("<Type>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Type>");
	}
	// field NoDelete
	{
		bool b = src.getNoDelete();
		if (b)
			buffer.appendf("<NoDelete>1</NoDelete>");
	}
	// field BackToPage
	if ((clientVer==-1.0 || clientVer>=1.04))
	{
		const char* s = src.getBackToPage();
		if (s && *s)
		{
			buffer.append("<BackToPage>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BackToPage>");
		}
	}
	// field LogicalFiles
	{
		StringArray& v = src.getLogicalFiles();
		if (v.length()>0)
			buffer.append("<LogicalFiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</LogicalFiles>");
	}
	// field removeFromSuperfiles
	{
		bool b = src.getRemoveFromSuperfiles();
		if (b)
			buffer.appendf("<removeFromSuperfiles>1</removeFromSuperfiles>");
	}
	// field removeRecursively
	{
		bool b = src.getRemoveRecursively();
		if (b)
			buffer.appendf("<removeRecursively>1</removeRecursively>");
	}
	if (keepRootTag)
		buffer.append("</DFUArrayActionRequest>");
}

bool CDFUArrayActionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_NoDelete.unmarshall(rpc_request, "NoDelete", basepath);
	hasValue |= m_BackToPage.unmarshall(rpc_request, "BackToPage", basepath);
	hasValue |= m_LogicalFiles.unmarshall(rpc_request, "LogicalFiles", basepath);
	hasValue |= m_removeFromSuperfiles.unmarshall(rpc_request, "removeFromSuperfiles", basepath);
	hasValue |= m_removeRecursively.unmarshall(rpc_request, "removeRecursively", basepath);
	return hasValue;
}

bool CDFUArrayActionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_NoDelete.unmarshall(ctx, soapval, "NoDelete");
	hasValue |= m_BackToPage.unmarshall(ctx, soapval, "BackToPage");
	hasValue |= m_LogicalFiles.unmarshall(ctx, soapval, "LogicalFiles");
	hasValue |= m_removeFromSuperfiles.unmarshall(ctx, soapval, "removeFromSuperfiles");
	hasValue |= m_removeRecursively.unmarshall(ctx, soapval, "removeRecursively");
	return hasValue;
}

bool CDFUArrayActionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_NoDelete.unmarshall(ctx, params, attachments, "NoDelete", basepath);
	hasValue |= m_BackToPage.unmarshall(ctx, params, attachments, "BackToPage", basepath);
	hasValue |= m_LogicalFiles.unmarshall(ctx, params, attachments, "LogicalFiles", basepath);
	hasValue |= m_removeFromSuperfiles.unmarshall(ctx, params, attachments, "removeFromSuperfiles", basepath);
	hasValue |= m_removeRecursively.unmarshall(ctx, params, attachments, "removeRecursively", basepath);
	return hasValue;
}

CDFUArrayActions CDFUArrayActionRequest::getType() { return m_Type.getValue(); }
const char* CDFUArrayActionRequest::getTypeAsString() {  return (const char*)m_Type; }
bool CDFUArrayActionRequest::getNoDelete() { return m_NoDelete;}
const char * CDFUArrayActionRequest::getBackToPage() { return m_BackToPage.query();}
StringArray & CDFUArrayActionRequest::getLogicalFiles() { return (StringArray &) m_LogicalFiles; }
bool CDFUArrayActionRequest::getRemoveFromSuperfiles() { return m_removeFromSuperfiles;}
bool CDFUArrayActionRequest::getRemoveRecursively() { return m_removeRecursively;}
void CDFUArrayActionRequest::setType(CDFUArrayActions val) { m_Type.setValue(val); }
void CDFUArrayActionRequest::setType(const char* val) { m_Type.setValue(val); }
void CDFUArrayActionRequest::setNoDelete(bool val){ m_NoDelete=val; }
void CDFUArrayActionRequest::setBackToPage(const char * val){ m_BackToPage.set(val); }
void CDFUArrayActionRequest::setLogicalFiles(StringArray &val){ m_LogicalFiles->kill();  CloneArray(m_LogicalFiles.getValue(), val); }
void CDFUArrayActionRequest::setRemoveFromSuperfiles(bool val){ m_removeFromSuperfiles=val; }
void CDFUArrayActionRequest::setRemoveRecursively(bool val){ m_removeRecursively=val; }
extern "C"  IEspDFUArrayActionRequest *createDFUArrayActionRequest(const char *serv){return ((IEspDFUArrayActionRequest *)new CDFUArrayActionRequest(serv));}
extern "C"  IClientDFUArrayActionRequest *createClientDFUArrayActionRequest(const char *serv){return ((IClientDFUArrayActionRequest *)new CDFUArrayActionRequest(serv));}

//=======================================================
// class CDFUArrayActionResponse Implementation
//=======================================================

CDFUArrayActionResponse::CDFUArrayActionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_BackToPage(nilIgnore),m_RedirectTo(nilIgnore),m_DFUArrayActionResult(nilIgnore),m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUArrayActionResponse::CDFUArrayActionResponse(const char *serviceName, const char *bc)
	: m_BackToPage(nilIgnore),m_RedirectTo(nilIgnore),m_DFUArrayActionResult(nilIgnore),m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionResponse");
}

CDFUArrayActionResponse::CDFUArrayActionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_BackToPage(nilIgnore),m_RedirectTo(nilIgnore),m_DFUArrayActionResult(nilIgnore),m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUArrayActionResponse::CDFUArrayActionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_BackToPage(nilIgnore),m_RedirectTo(nilIgnore),m_DFUArrayActionResult(nilIgnore),m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUArrayActionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUArrayActionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!context.suppressed("DFUArrayActionResponse","BackToPage")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BackToPage\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUArrayActionResponse","RedirectTo")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RedirectTo\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUArrayActionResponse","DFUArrayActionResult")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUArrayActionResult\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUArrayActionResponse","ActionResults")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ActionResults\" type=\"tns:ArrayOfDFUActionInfo\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("DFUArrayActionResponse","ActionResults"))
			CDFUActionInfo::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUActionInfo") && added.getValue("ArrayOfDFUActionInfo")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUActionInfo\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUActionInfo\" type=\"tns:DFUActionInfo\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUActionInfo",1);
	}
	return schema;
}

void CDFUArrayActionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUArrayActionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUArrayActionResponse","BackToPage",1.04);
	info.addMinVersion("DFUArrayActionResponse","RedirectTo",1.18);
	info.addDeprVersion("DFUArrayActionResponse","DFUArrayActionResult",1.33);
	info.addMinVersion("DFUArrayActionResponse","ActionResults",1.27);
	if (!added.getValue("DFUActionInfo"))
	{
		added.setValue("DFUActionInfo",1);
		CDFUActionInfo::getMapInfo(info,added);
	}
}

StringBuffer &CDFUArrayActionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("DFUArrayActionResponse","BackToPage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BackToPage");
		form.appendf("  <tr><td><b>BackToPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUArrayActionResponse","RedirectTo")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RedirectTo");
		form.appendf("  <tr><td><b>RedirectTo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUArrayActionResponse","DFUArrayActionResult")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUArrayActionResult");
		form.appendf("  <tr><td><b>DFUArrayActionResult: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUArrayActionResponse","ActionResults")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ActionResults");
		form.appendf("<tr><td><b>ActionResults: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUArrayActionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUArrayActionResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		if ((clientVer==-1.0 || clientVer>=1.04))
			m_BackToPage.marshall(rpc_resp, "BackToPage", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.18))
			m_RedirectTo.marshall(rpc_resp, "RedirectTo", "", "", "");
		if ((clientVer==-1.0 || clientVer<1.33))
			m_DFUArrayActionResult.marshall(rpc_resp, "DFUArrayActionResult", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.27))
			m_ActionResults.marshall(rpc_resp, "ActionResults", "DFUActionInfo");
	}
}


void CDFUArrayActionResponse::copy(CDFUArrayActionResponse &from)
{
	m_BackToPage.copy(from.m_BackToPage);
	m_RedirectTo.copy(from.m_RedirectTo);
	m_DFUArrayActionResult.copy(from.m_DFUArrayActionResult);
	m_ActionResults.copy(from.m_ActionResults);
}


void CDFUArrayActionResponse::copy(IConstDFUArrayActionResponse &ifrom)
{
	setBackToPage(ifrom.getBackToPage());
	setRedirectTo(ifrom.getRedirectTo());
	setDFUArrayActionResult(ifrom.getDFUArrayActionResult());
	setActionResults(ifrom.getActionResults());
}


void CDFUArrayActionResponse::getAttributes(IProperties &attributes)
{
}


void CDFUArrayActionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		if ((clientVer==-1.0 || clientVer>=1.04))
			m_BackToPage.toStr(ctx, buffer, "BackToPage", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.18))
			m_RedirectTo.toStr(ctx, buffer, "RedirectTo", "", false, "", "");
		if ((clientVer==-1.0 || clientVer<1.33))
			m_DFUArrayActionResult.toStr(ctx, buffer, "DFUArrayActionResult", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.27))
			m_ActionResults.toStr(ctx, buffer, "ActionResults", "DFUActionInfo");
	}
}


void CDFUArrayActionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUArrayActionResponse::serializer(IEspContext* ctx, IConstDFUArrayActionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUArrayActionResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field BackToPage
	if ((clientVer==-1.0 || clientVer>=1.04))
	{
		const char* s = src.getBackToPage();
		if (s && *s)
		buffer.appendf("<BackToPage>%s</BackToPage>",s);
	}
	// field RedirectTo
	if ((clientVer==-1.0 || clientVer>=1.18))
	{
		const char* s = src.getRedirectTo();
		if (s && *s)
		buffer.appendf("<RedirectTo>%s</RedirectTo>",s);
	}
	// field DFUArrayActionResult
	if ((clientVer==-1.0 || clientVer<1.33))
	{
		const char* s = src.getDFUArrayActionResult();
		if (s && *s)
		buffer.appendf("<DFUArrayActionResult>%s</DFUArrayActionResult>",s);
	}
	// field ActionResults
	if ((clientVer==-1.0 || clientVer>=1.27))
	{
		IArrayOf<IConstDFUActionInfo>& v = src.getActionResults();
		int size = v.length();
		if (size>0)
			buffer.append("<ActionResults>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUActionInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ActionResults>");
	}
	if (keepRootTag)
		buffer.append("</DFUArrayActionResponse>");
}

bool CDFUArrayActionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_BackToPage.unmarshall(rpc_request, "BackToPage", basepath);
		hasValue |= m_RedirectTo.unmarshall(rpc_request, "RedirectTo", basepath);
		hasValue |= m_DFUArrayActionResult.unmarshall(rpc_request, "DFUArrayActionResult", basepath);
		hasValue |= m_ActionResults.unmarshall(rpc_request, "ActionResults", basepath);
	}
	return hasValue;
}

bool CDFUArrayActionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_BackToPage.unmarshall(ctx, soapval, "BackToPage");
	hasValue |= m_RedirectTo.unmarshall(ctx, soapval, "RedirectTo");
	hasValue |= m_DFUArrayActionResult.unmarshall(ctx, soapval, "DFUArrayActionResult");
	hasValue |= m_ActionResults.unmarshall(ctx, soapval, "ActionResults");
	return hasValue;
}

bool CDFUArrayActionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_BackToPage.unmarshall(ctx, params, attachments, "BackToPage", basepath);
	hasValue |= m_RedirectTo.unmarshall(ctx, params, attachments, "RedirectTo", basepath);
	hasValue |= m_DFUArrayActionResult.unmarshall(ctx, params, attachments, "DFUArrayActionResult", basepath);
	hasValue |= m_ActionResults.unmarshall(ctx, params, attachments, "ActionResults", basepath);
	return hasValue;
}

const char * CDFUArrayActionResponse::getBackToPage() { return m_BackToPage.query();}
const char * CDFUArrayActionResponse::getRedirectTo() { return m_RedirectTo.query();}
const char * CDFUArrayActionResponse::getDFUArrayActionResult() { return m_DFUArrayActionResult.query();}
IArrayOf<IConstDFUActionInfo> & CDFUArrayActionResponse::getActionResults() { return (IArrayOf<IConstDFUActionInfo> &) m_ActionResults; }
void CDFUArrayActionResponse::setBackToPage(const char * val){ m_BackToPage.set(val); }
void CDFUArrayActionResponse::setRedirectTo(const char * val){ m_RedirectTo.set(val); }
void CDFUArrayActionResponse::setDFUArrayActionResult(const char * val){ m_DFUArrayActionResult.set(val); }
void CDFUArrayActionResponse::setActionResults(IArrayOf<IEspDFUActionInfo> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstDFUActionInfo> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUActionInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUArrayActionResponse::setActionResults(IArrayOf<IConstDFUActionInfo> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstDFUActionInfo> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUActionInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspDFUArrayActionResponse *createDFUArrayActionResponse(const char *serv){return ((IEspDFUArrayActionResponse *)new CDFUArrayActionResponse(serv));}
extern "C"  IClientDFUArrayActionResponse *createClientDFUArrayActionResponse(const char *serv){return ((IClientDFUArrayActionResponse *)new CDFUArrayActionResponse(serv));}

//=======================================================
// class CDFUInfoRequest Implementation
//=======================================================

CDFUInfoRequest::CDFUInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_UpdateDescription(0, nilIgnore,false),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_FileName(nilIgnore),m_FileDesc(nilIgnore),m_IncludeJsonTypeInfo(0, nilIgnore,false),m_IncludeBinTypeInfo(0, nilIgnore,false),m_Protect("0")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUInfoRequest::CDFUInfoRequest(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_UpdateDescription(0, nilIgnore,false),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_FileName(nilIgnore),m_FileDesc(nilIgnore),m_IncludeJsonTypeInfo(0, nilIgnore,false),m_IncludeBinTypeInfo(0, nilIgnore,false),m_Protect("0")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoRequest");
}

CDFUInfoRequest::CDFUInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_UpdateDescription(0, nilIgnore,false),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_FileName(nilIgnore),m_FileDesc(nilIgnore),m_IncludeJsonTypeInfo(0, nilIgnore,false),m_IncludeBinTypeInfo(0, nilIgnore,false),m_Protect("0")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUInfoRequest::CDFUInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_UpdateDescription(0, nilIgnore,false),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_FileName(nilIgnore),m_FileDesc(nilIgnore),m_IncludeJsonTypeInfo(0, nilIgnore,false),m_IncludeBinTypeInfo(0, nilIgnore,false),m_Protect("0")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateDescription\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("DFUInfoRequest","QuerySet")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUInfoRequest","Query")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Query\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUInfoRequest","FileName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileDesc\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUInfoRequest","IncludeJsonTypeInfo")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeJsonTypeInfo\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUInfoRequest","IncludeBinTypeInfo")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeBinTypeInfo\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUInfoRequest","Protect")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"0\" name=\"Protect\" type=\"tns:DFUChangeProtection\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("DFUInfoRequest","Protect"))
			CXDFUChangeProtection::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUInfoRequest","QuerySet",1.38);
	info.addMinVersion("DFUInfoRequest","Query",1.38);
	info.addDeprVersion("DFUInfoRequest","FileName",1.38);
	info.addMinVersion("DFUInfoRequest","IncludeJsonTypeInfo",1.37);
	info.addMinVersion("DFUInfoRequest","IncludeBinTypeInfo",1.37);
	info.addMinVersion("DFUInfoRequest","Protect",1.39);
	if (!added.getValue("DFUChangeProtection"))
	{
		added.setValue("DFUChangeProtection",1);
		CXDFUChangeProtection::getMapInfo(info,added);
	}
}

StringBuffer &CDFUInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateDescription");
	
	form.appendf("  <tr><td><b>UpdateDescription? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("DFUInfoRequest","QuerySet")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QuerySet");
		form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUInfoRequest","Query")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Query");
		form.appendf("  <tr><td><b>Query: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUInfoRequest","FileName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileName");
		form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileDesc");
	form.appendf("  <tr><td><b>FileDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUInfoRequest","IncludeJsonTypeInfo")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeJsonTypeInfo");
		
	form.appendf("  <tr><td><b>IncludeJsonTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUInfoRequest","IncludeBinTypeInfo")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeBinTypeInfo");
		
	form.appendf("  <tr><td><b>IncludeBinTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUInfoRequest","Protect")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Protect");
		form.appendf("  <tr><td><b>Protect: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_UpdateDescription.marshall(rpc_resp, "UpdateDescription", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_Query.marshall(rpc_resp, "Query", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.38))
		m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	m_FileDesc.marshall(rpc_resp, "FileDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_IncludeJsonTypeInfo.marshall(rpc_resp, "IncludeJsonTypeInfo", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_IncludeBinTypeInfo.marshall(rpc_resp, "IncludeBinTypeInfo", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_Protect.marshall(rpc_resp, "Protect", "", "", "");
}


void CDFUInfoRequest::copy(CDFUInfoRequest &from)
{
	m_Name.copy(from.m_Name);
	m_Cluster.copy(from.m_Cluster);
	m_UpdateDescription.copy(from.m_UpdateDescription);
	m_QuerySet.copy(from.m_QuerySet);
	m_Query.copy(from.m_Query);
	m_FileName.copy(from.m_FileName);
	m_FileDesc.copy(from.m_FileDesc);
	m_IncludeJsonTypeInfo.copy(from.m_IncludeJsonTypeInfo);
	m_IncludeBinTypeInfo.copy(from.m_IncludeBinTypeInfo);
	m_Protect.copy(from.m_Protect);
}


void CDFUInfoRequest::copy(IConstDFUInfoRequest &ifrom)
{
	setName(ifrom.getName());
	setCluster(ifrom.getCluster());
	setUpdateDescription(ifrom.getUpdateDescription());
	setQuerySet(ifrom.getQuerySet());
	setQuery(ifrom.getQuery());
	setFileName(ifrom.getFileName());
	setFileDesc(ifrom.getFileDesc());
	setIncludeJsonTypeInfo(ifrom.getIncludeJsonTypeInfo());
	setIncludeBinTypeInfo(ifrom.getIncludeBinTypeInfo());
	setProtect(ifrom.getProtect());
}


void CDFUInfoRequest::getAttributes(IProperties &attributes)
{
}


void CDFUInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_UpdateDescription.toStr(ctx, buffer, "UpdateDescription", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_Query.toStr(ctx, buffer, "Query", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.38))
		m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	m_FileDesc.toStr(ctx, buffer, "FileDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_IncludeJsonTypeInfo.toStr(ctx, buffer, "IncludeJsonTypeInfo", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.37))
		m_IncludeBinTypeInfo.toStr(ctx, buffer, "IncludeBinTypeInfo", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_Protect.toStr(ctx, buffer, "Protect", "", true, "", "");
}


void CDFUInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUInfoRequest::serializer(IEspContext* ctx, IConstDFUInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUInfoRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field UpdateDescription
	{
		bool b = src.getUpdateDescription();
		if (b)
			buffer.appendf("<UpdateDescription>1</UpdateDescription>");
	}
	// field QuerySet
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field Query
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		const char* s = src.getQuery();
		if (s && *s)
		{
			buffer.append("<Query>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Query>");
		}
	}
	// field FileName
	if ((clientVer==-1.0 || clientVer<1.38))
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field FileDesc
	{
		const char* s = src.getFileDesc();
		if (s && *s)
		{
			buffer.append("<FileDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileDesc>");
		}
	}
	// field IncludeJsonTypeInfo
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		bool b = src.getIncludeJsonTypeInfo();
		if (b)
			buffer.appendf("<IncludeJsonTypeInfo>1</IncludeJsonTypeInfo>");
	}
	// field IncludeBinTypeInfo
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		bool b = src.getIncludeBinTypeInfo();
		if (b)
			buffer.appendf("<IncludeBinTypeInfo>1</IncludeBinTypeInfo>");
	}
	// field Protect
	if ((clientVer==-1.0 || clientVer>=1.39))
	{
		const char* s = src.getProtectAsString();
		buffer.append("<Protect>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Protect>");
	}
	if (keepRootTag)
		buffer.append("</DFUInfoRequest>");
}

bool CDFUInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_UpdateDescription.unmarshall(rpc_request, "UpdateDescription", basepath);
	hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(rpc_request, "Query", basepath);
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_FileDesc.unmarshall(rpc_request, "FileDesc", basepath);
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(rpc_request, "IncludeJsonTypeInfo", basepath);
	hasValue |= m_IncludeBinTypeInfo.unmarshall(rpc_request, "IncludeBinTypeInfo", basepath);
	hasValue |= m_Protect.unmarshall(rpc_request, "Protect", basepath);
	return hasValue;
}

bool CDFUInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_UpdateDescription.unmarshall(ctx, soapval, "UpdateDescription");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_Query.unmarshall(ctx, soapval, "Query");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_FileDesc.unmarshall(ctx, soapval, "FileDesc");
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(ctx, soapval, "IncludeJsonTypeInfo");
	hasValue |= m_IncludeBinTypeInfo.unmarshall(ctx, soapval, "IncludeBinTypeInfo");
	hasValue |= m_Protect.unmarshall(ctx, soapval, "Protect");
	return hasValue;
}

bool CDFUInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_UpdateDescription.unmarshall(ctx, params, attachments, "UpdateDescription", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(ctx, params, attachments, "Query", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_FileDesc.unmarshall(ctx, params, attachments, "FileDesc", basepath);
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(ctx, params, attachments, "IncludeJsonTypeInfo", basepath);
	hasValue |= m_IncludeBinTypeInfo.unmarshall(ctx, params, attachments, "IncludeBinTypeInfo", basepath);
	hasValue |= m_Protect.unmarshall(ctx, params, attachments, "Protect", basepath);
	return hasValue;
}

const char * CDFUInfoRequest::getName() { return m_Name.query();}
const char * CDFUInfoRequest::getCluster() { return m_Cluster.query();}
bool CDFUInfoRequest::getUpdateDescription() { return m_UpdateDescription;}
const char * CDFUInfoRequest::getQuerySet() { return m_QuerySet.query();}
const char * CDFUInfoRequest::getQuery() { return m_Query.query();}
const char * CDFUInfoRequest::getFileName() { return m_FileName.query();}
const char * CDFUInfoRequest::getFileDesc() { return m_FileDesc.query();}
bool CDFUInfoRequest::getIncludeJsonTypeInfo() { return m_IncludeJsonTypeInfo;}
bool CDFUInfoRequest::getIncludeBinTypeInfo() { return m_IncludeBinTypeInfo;}
CDFUChangeProtection CDFUInfoRequest::getProtect() { return m_Protect.getValue(); }
const char* CDFUInfoRequest::getProtectAsString() {  return (const char*)m_Protect; }
void CDFUInfoRequest::setName(const char * val){ m_Name.set(val); }
void CDFUInfoRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUInfoRequest::setUpdateDescription(bool val){ m_UpdateDescription=val; }
void CDFUInfoRequest::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CDFUInfoRequest::setQuery(const char * val){ m_Query.set(val); }
void CDFUInfoRequest::setFileName(const char * val){ m_FileName.set(val); }
void CDFUInfoRequest::setFileDesc(const char * val){ m_FileDesc.set(val); }
void CDFUInfoRequest::setIncludeJsonTypeInfo(bool val){ m_IncludeJsonTypeInfo=val; }
void CDFUInfoRequest::setIncludeBinTypeInfo(bool val){ m_IncludeBinTypeInfo=val; }
void CDFUInfoRequest::setProtect(CDFUChangeProtection val) { m_Protect.setValue(val); }
void CDFUInfoRequest::setProtect(const char* val) { m_Protect.setValue(val); }
extern "C"  IEspDFUInfoRequest *createDFUInfoRequest(const char *serv){return ((IEspDFUInfoRequest *)new CDFUInfoRequest(serv));}
extern "C"  IClientDFUInfoRequest *createClientDFUInfoRequest(const char *serv){return ((IClientDFUInfoRequest *)new CDFUInfoRequest(serv));}

//=======================================================
// class CDFUInfoResponse Implementation
//=======================================================

CDFUInfoResponse::CDFUInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_FileDetail(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUInfoResponse::CDFUInfoResponse(const char *serviceName, const char *bc)
	: m_FileDetail(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoResponse");
}

CDFUInfoResponse::CDFUInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_FileDetail(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUInfoResponse::CDFUInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_FileDetail(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileDetail\" type=\"tns:DFUFileDetail\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUFileDetail::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUFileDetail"))
	{
		added.setValue("DFUFileDetail",1);
		CDFUFileDetail::getMapInfo(info,added);
	}
}

StringBuffer &CDFUInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileDetail");
	form.append("<tr>").append("<td><b>FileDetail: </b></td><td><hr/>");
	CDFUFileDetail::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_FileDetail.marshall(rpc_resp, "FileDetail", "", "", "");
	}
}


void CDFUInfoResponse::copy(CDFUInfoResponse &from)
{
	m_FileDetail.copy(from.m_FileDetail);
}


void CDFUInfoResponse::copy(IConstDFUInfoResponse &ifrom)
{
	setFileDetail(ifrom.getFileDetail());
}


void CDFUInfoResponse::getAttributes(IProperties &attributes)
{
}


void CDFUInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_FileDetail.toStr(ctx, buffer, "FileDetail", "", false, "", "");
	}
}


void CDFUInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUInfoResponse::serializer(IEspContext* ctx, IConstDFUInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUInfoResponse>");
	// field FileDetail
	{
		StringBuffer tmp;
		CDFUFileDetail::serializer(ctx,src.getFileDetail(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<FileDetail>%s</FileDetail>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DFUInfoResponse>");
}

bool CDFUInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_FileDetail.unmarshall(rpc_request, "FileDetail", basepath);
	}
	return hasValue;
}

bool CDFUInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FileDetail.unmarshall(ctx, soapval, "FileDetail");
	return hasValue;
}

bool CDFUInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FileDetail.unmarshall(ctx, params, attachments, "FileDetail", basepath);
	return hasValue;
}

IConstDFUFileDetail & CDFUInfoResponse::getFileDetail() { return (IConstDFUFileDetail &) m_FileDetail.getValue();}
IEspDFUFileDetail & CDFUInfoResponse::updateFileDetail(){ return (IEspDFUFileDetail &) m_FileDetail.getValue(); }
void CDFUInfoResponse::setFileDetail(IConstDFUFileDetail &ifrom){ m_FileDetail.copy(ifrom); }
extern "C"  IEspDFUInfoResponse *createDFUInfoResponse(const char *serv){return ((IEspDFUInfoResponse *)new CDFUInfoResponse(serv));}
extern "C"  IClientDFUInfoResponse *createClientDFUInfoResponse(const char *serv){return ((IClientDFUInfoResponse *)new CDFUInfoResponse(serv));}

//=======================================================
// class CDFUDefFileRequest Implementation
//=======================================================

CDFUDefFileRequest::CDFUDefFileRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Format(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUDefFileRequest::CDFUDefFileRequest(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Format(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileRequest");
}

CDFUDefFileRequest::CDFUDefFileRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore),m_Format(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUDefFileRequest::CDFUDefFileRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore),m_Format(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUDefFileRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Format\" type=\"tns:DFUDefFileFormat\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXDFUDefFileFormat::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUDefFileRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUDefFileRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUDefFileFormat"))
	{
		added.setValue("DFUDefFileFormat",1);
		CXDFUDefFileFormat::getMapInfo(info,added);
	}
}

StringBuffer &CDFUDefFileRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Format");
	form.appendf("  <tr><td><b>Format: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUDefFileRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUDefFileRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Format.marshall(rpc_resp, "Format", "", "", "");
}


void CDFUDefFileRequest::copy(CDFUDefFileRequest &from)
{
	m_Name.copy(from.m_Name);
	m_Format.copy(from.m_Format);
}


void CDFUDefFileRequest::copy(IConstDFUDefFileRequest &ifrom)
{
	setName(ifrom.getName());
	setFormat(ifrom.getFormat());
}


void CDFUDefFileRequest::getAttributes(IProperties &attributes)
{
}


void CDFUDefFileRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Format.toStr(ctx, buffer, "Format", "", true, "", "");
}


void CDFUDefFileRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUDefFileRequest::serializer(IEspContext* ctx, IConstDFUDefFileRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUDefFileRequest>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Format
	{
		const char* s = src.getFormatAsString();
		buffer.append("<Format>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Format>");
	}
	if (keepRootTag)
		buffer.append("</DFUDefFileRequest>");
}

bool CDFUDefFileRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Format.unmarshall(rpc_request, "Format", basepath);
	return hasValue;
}

bool CDFUDefFileRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Format.unmarshall(ctx, soapval, "Format");
	return hasValue;
}

bool CDFUDefFileRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Format.unmarshall(ctx, params, attachments, "Format", basepath);
	return hasValue;
}

const char * CDFUDefFileRequest::getName() { return m_Name.query();}
CDFUDefFileFormat CDFUDefFileRequest::getFormat() { return m_Format.getValue(); }
const char* CDFUDefFileRequest::getFormatAsString() {  return (const char*)m_Format; }
void CDFUDefFileRequest::setName(const char * val){ m_Name.set(val); }
void CDFUDefFileRequest::setFormat(CDFUDefFileFormat val) { m_Format.setValue(val); }
void CDFUDefFileRequest::setFormat(const char* val) { m_Format.setValue(val); }
extern "C"  IEspDFUDefFileRequest *createDFUDefFileRequest(const char *serv){return ((IEspDFUDefFileRequest *)new CDFUDefFileRequest(serv));}
extern "C"  IClientDFUDefFileRequest *createClientDFUDefFileRequest(const char *serv){return ((IClientDFUDefFileRequest *)new CDFUDefFileRequest(serv));}

//=======================================================
// class CDFUDefFileResponse Implementation
//=======================================================

CDFUDefFileResponse::CDFUDefFileResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_defFile(nilIgnore),m_defFile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUDefFileResponse::CDFUDefFileResponse(const char *serviceName, const char *bc)
	: m_defFile(nilIgnore), m_defFile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileResponse");
}

CDFUDefFileResponse::CDFUDefFileResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_defFile(nilIgnore), m_defFile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUDefFileResponse::CDFUDefFileResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_defFile(nilIgnore), m_defFile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDefFileResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUDefFileResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"defFile\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUDefFileResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUDefFileResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUDefFileResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("defFile");
	form.appendf("  <tr><td><b>defFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUDefFileResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUDefFileResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_defFile.marshall(rpc_resp, "defFile", "", "", "");
	}
}


void CDFUDefFileResponse::copy(CDFUDefFileResponse &from)
{
	m_defFile.copy(from.m_defFile);
}


void CDFUDefFileResponse::copy(IConstDFUDefFileResponse &ifrom)
{
	setDefFile(ifrom.getDefFile());
}


void CDFUDefFileResponse::getAttributes(IProperties &attributes)
{
}


void CDFUDefFileResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_defFile.toStr(ctx, buffer, "defFile", "", true, "", "");
	}
}


void CDFUDefFileResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUDefFileResponse::serializer(IEspContext* ctx, IConstDFUDefFileResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUDefFileResponse>");
	// field defFile
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getDefFile().toByteArray(), src.getDefFile().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<defFile>%s</defFile>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DFUDefFileResponse>");
}

void CDFUDefFileResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_defFile.getValue());
	mimetype.set(m_defFile_mimetype.str());
}

bool CDFUDefFileResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_defFile.unmarshall(rpc_request, "defFile", basepath);
	}
	return hasValue;
}

bool CDFUDefFileResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_defFile.unmarshall(ctx, soapval, "defFile");
	return hasValue;
}

bool CDFUDefFileResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_defFile.unmarshall(ctx, params, attachments, "defFile", basepath);
	return hasValue;
}

const char *CDFUDefFileResponse::getDefFile_mimetype(){ return m_defFile_mimetype.str(); }
const MemoryBuffer & CDFUDefFileResponse::getDefFile() { return m_defFile.getValue();}
void CDFUDefFileResponse::setDefFile_mimetype(const char *  val){ m_defFile_mimetype.set(val); }
void CDFUDefFileResponse::setDefFile(const MemoryBuffer & val){ m_defFile->clear().append(val); }
extern "C"  IEspDFUDefFileResponse *createDFUDefFileResponse(const char *serv){return ((IEspDFUDefFileResponse *)new CDFUDefFileResponse(serv));}
extern "C"  IClientDFUDefFileResponse *createClientDFUDefFileResponse(const char *serv){return ((IClientDFUDefFileResponse *)new CDFUDefFileResponse(serv));}

//=======================================================
// class CDFURecordTypeInfoRequest Implementation
//=======================================================

CDFURecordTypeInfoRequest::CDFURecordTypeInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFURecordTypeInfoRequest::CDFURecordTypeInfoRequest(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoRequest");
}

CDFURecordTypeInfoRequest::CDFURecordTypeInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFURecordTypeInfoRequest::CDFURecordTypeInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFURecordTypeInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeJsonTypeInfo\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeBinTypeInfo\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFURecordTypeInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFURecordTypeInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFURecordTypeInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeJsonTypeInfo");
	
	form.appendf("  <tr><td><b>IncludeJsonTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeBinTypeInfo");
	
	form.appendf("  <tr><td><b>IncludeBinTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFURecordTypeInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFURecordTypeInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_IncludeJsonTypeInfo.marshall(rpc_resp, "IncludeJsonTypeInfo", "", "", "");
	m_IncludeBinTypeInfo.marshall(rpc_resp, "IncludeBinTypeInfo", "", "", "");
}


void CDFURecordTypeInfoRequest::copy(CDFURecordTypeInfoRequest &from)
{
	m_Name.copy(from.m_Name);
	m_IncludeJsonTypeInfo.copy(from.m_IncludeJsonTypeInfo);
	m_IncludeBinTypeInfo.copy(from.m_IncludeBinTypeInfo);
}


void CDFURecordTypeInfoRequest::copy(IConstDFURecordTypeInfoRequest &ifrom)
{
	setName(ifrom.getName());
	setIncludeJsonTypeInfo(ifrom.getIncludeJsonTypeInfo());
	setIncludeBinTypeInfo(ifrom.getIncludeBinTypeInfo());
}


void CDFURecordTypeInfoRequest::getAttributes(IProperties &attributes)
{
}


void CDFURecordTypeInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_IncludeJsonTypeInfo.toStr(ctx, buffer, "IncludeJsonTypeInfo", "", true, "", "");
	m_IncludeBinTypeInfo.toStr(ctx, buffer, "IncludeBinTypeInfo", "", true, "", "");
}


void CDFURecordTypeInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFURecordTypeInfoRequest::serializer(IEspContext* ctx, IConstDFURecordTypeInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFURecordTypeInfoRequest>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field IncludeJsonTypeInfo
	{
		bool b = src.getIncludeJsonTypeInfo();
		if (b)
			buffer.appendf("<IncludeJsonTypeInfo>1</IncludeJsonTypeInfo>");
	}
	// field IncludeBinTypeInfo
	{
		bool b = src.getIncludeBinTypeInfo();
		if (b)
			buffer.appendf("<IncludeBinTypeInfo>1</IncludeBinTypeInfo>");
	}
	if (keepRootTag)
		buffer.append("</DFURecordTypeInfoRequest>");
}

bool CDFURecordTypeInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(rpc_request, "IncludeJsonTypeInfo", basepath);
	hasValue |= m_IncludeBinTypeInfo.unmarshall(rpc_request, "IncludeBinTypeInfo", basepath);
	return hasValue;
}

bool CDFURecordTypeInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(ctx, soapval, "IncludeJsonTypeInfo");
	hasValue |= m_IncludeBinTypeInfo.unmarshall(ctx, soapval, "IncludeBinTypeInfo");
	return hasValue;
}

bool CDFURecordTypeInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(ctx, params, attachments, "IncludeJsonTypeInfo", basepath);
	hasValue |= m_IncludeBinTypeInfo.unmarshall(ctx, params, attachments, "IncludeBinTypeInfo", basepath);
	return hasValue;
}

const char * CDFURecordTypeInfoRequest::getName() { return m_Name.query();}
bool CDFURecordTypeInfoRequest::getIncludeJsonTypeInfo() { return m_IncludeJsonTypeInfo;}
bool CDFURecordTypeInfoRequest::getIncludeBinTypeInfo() { return m_IncludeBinTypeInfo;}
void CDFURecordTypeInfoRequest::setName(const char * val){ m_Name.set(val); }
void CDFURecordTypeInfoRequest::setIncludeJsonTypeInfo(bool val){ m_IncludeJsonTypeInfo=val; }
void CDFURecordTypeInfoRequest::setIncludeBinTypeInfo(bool val){ m_IncludeBinTypeInfo=val; }
extern "C"  IEspDFURecordTypeInfoRequest *createDFURecordTypeInfoRequest(const char *serv){return ((IEspDFURecordTypeInfoRequest *)new CDFURecordTypeInfoRequest(serv));}
extern "C"  IClientDFURecordTypeInfoRequest *createClientDFURecordTypeInfoRequest(const char *serv){return ((IClientDFURecordTypeInfoRequest *)new CDFURecordTypeInfoRequest(serv));}

//=======================================================
// class CDFURecordTypeInfoResponse Implementation
//=======================================================

CDFURecordTypeInfoResponse::CDFURecordTypeInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFURecordTypeInfoResponse::CDFURecordTypeInfoResponse(const char *serviceName, const char *bc)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoResponse");
}

CDFURecordTypeInfoResponse::CDFURecordTypeInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFURecordTypeInfoResponse::CDFURecordTypeInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFURecordTypeInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFURecordTypeInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"jsonInfo\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"binInfo\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFURecordTypeInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFURecordTypeInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFURecordTypeInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("jsonInfo");
	form.appendf("  <tr><td><b>jsonInfo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("binInfo");
	form.appendf("  <tr><td><b>binInfo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFURecordTypeInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFURecordTypeInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_jsonInfo.marshall(rpc_resp, "jsonInfo", "", "", "");
		m_binInfo.marshall(rpc_resp, "binInfo", "", "", "");
	}
}


void CDFURecordTypeInfoResponse::copy(CDFURecordTypeInfoResponse &from)
{
	m_jsonInfo.copy(from.m_jsonInfo);
	m_binInfo.copy(from.m_binInfo);
}


void CDFURecordTypeInfoResponse::copy(IConstDFURecordTypeInfoResponse &ifrom)
{
	setJsonInfo(ifrom.getJsonInfo());
	setBinInfo(ifrom.getBinInfo());
}


void CDFURecordTypeInfoResponse::getAttributes(IProperties &attributes)
{
}


void CDFURecordTypeInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_jsonInfo.toStr(ctx, buffer, "jsonInfo", "", true, "", "", false);
		m_binInfo.toStr(ctx, buffer, "binInfo", "", true, "", "");
	}
}


void CDFURecordTypeInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFURecordTypeInfoResponse::serializer(IEspContext* ctx, IConstDFURecordTypeInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFURecordTypeInfoResponse>");
	// field jsonInfo
	{
		const char* s = src.getJsonInfo();
		if (s && *s)
		{
			buffer.append("<jsonInfo>");
			encodeUtf8XML(s,buffer);
			buffer.append("</jsonInfo>");
		}
	}
	// field binInfo
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getBinInfo().toByteArray(), src.getBinInfo().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<binInfo>%s</binInfo>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DFURecordTypeInfoResponse>");
}

bool CDFURecordTypeInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_jsonInfo.unmarshall(rpc_request, "jsonInfo", basepath);
		hasValue |= m_binInfo.unmarshall(rpc_request, "binInfo", basepath);
	}
	return hasValue;
}

bool CDFURecordTypeInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_jsonInfo.unmarshall(ctx, soapval, "jsonInfo");
	hasValue |= m_binInfo.unmarshall(ctx, soapval, "binInfo");
	return hasValue;
}

bool CDFURecordTypeInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_jsonInfo.unmarshall(ctx, params, attachments, "jsonInfo", basepath);
	hasValue |= m_binInfo.unmarshall(ctx, params, attachments, "binInfo", basepath);
	return hasValue;
}

const char * CDFURecordTypeInfoResponse::getJsonInfo() { return m_jsonInfo.query();}
const MemoryBuffer & CDFURecordTypeInfoResponse::getBinInfo() { return m_binInfo.getValue();}
void CDFURecordTypeInfoResponse::setJsonInfo(const char * val){ m_jsonInfo.set(val); }
void CDFURecordTypeInfoResponse::setBinInfo(const MemoryBuffer & val){ m_binInfo->clear().append(val); }
extern "C"  IEspDFURecordTypeInfoResponse *createDFURecordTypeInfoResponse(const char *serv){return ((IEspDFURecordTypeInfoResponse *)new CDFURecordTypeInfoResponse(serv));}
extern "C"  IClientDFURecordTypeInfoResponse *createClientDFURecordTypeInfoResponse(const char *serv){return ((IClientDFURecordTypeInfoResponse *)new CDFURecordTypeInfoResponse(serv));}

//=======================================================
// class CEclRecordTypeInfoRequest Implementation
//=======================================================

CEclRecordTypeInfoRequest::CEclRecordTypeInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Ecl(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEclRecordTypeInfoRequest::CEclRecordTypeInfoRequest(const char *serviceName, const char *bc)
	: m_Ecl(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoRequest");
}

CEclRecordTypeInfoRequest::CEclRecordTypeInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Ecl(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CEclRecordTypeInfoRequest::CEclRecordTypeInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Ecl(nilIgnore),m_IncludeJsonTypeInfo(1, nilIgnore,false),m_IncludeBinTypeInfo(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CEclRecordTypeInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Ecl\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeJsonTypeInfo\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeBinTypeInfo\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CEclRecordTypeInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEclRecordTypeInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CEclRecordTypeInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Ecl");
	form.appendf("  <tr><td><b>Ecl: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeJsonTypeInfo");
	
	form.appendf("  <tr><td><b>IncludeJsonTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeBinTypeInfo");
	
	form.appendf("  <tr><td><b>IncludeBinTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEclRecordTypeInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEclRecordTypeInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Ecl.marshall(rpc_resp, "Ecl", "", "", "");
	m_IncludeJsonTypeInfo.marshall(rpc_resp, "IncludeJsonTypeInfo", "", "", "");
	m_IncludeBinTypeInfo.marshall(rpc_resp, "IncludeBinTypeInfo", "", "", "");
}


void CEclRecordTypeInfoRequest::copy(CEclRecordTypeInfoRequest &from)
{
	m_Ecl.copy(from.m_Ecl);
	m_IncludeJsonTypeInfo.copy(from.m_IncludeJsonTypeInfo);
	m_IncludeBinTypeInfo.copy(from.m_IncludeBinTypeInfo);
}


void CEclRecordTypeInfoRequest::copy(IConstEclRecordTypeInfoRequest &ifrom)
{
	setEcl(ifrom.getEcl());
	setIncludeJsonTypeInfo(ifrom.getIncludeJsonTypeInfo());
	setIncludeBinTypeInfo(ifrom.getIncludeBinTypeInfo());
}


void CEclRecordTypeInfoRequest::getAttributes(IProperties &attributes)
{
}


void CEclRecordTypeInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Ecl.toStr(ctx, buffer, "Ecl", "", true, "", "");
	m_IncludeJsonTypeInfo.toStr(ctx, buffer, "IncludeJsonTypeInfo", "", true, "", "");
	m_IncludeBinTypeInfo.toStr(ctx, buffer, "IncludeBinTypeInfo", "", true, "", "");
}


void CEclRecordTypeInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEclRecordTypeInfoRequest::serializer(IEspContext* ctx, IConstEclRecordTypeInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EclRecordTypeInfoRequest>");
	// field Ecl
	{
		const char* s = src.getEcl();
		if (s && *s)
		{
			buffer.append("<Ecl>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Ecl>");
		}
	}
	// field IncludeJsonTypeInfo
	{
		bool b = src.getIncludeJsonTypeInfo();
		if (b)
			buffer.appendf("<IncludeJsonTypeInfo>1</IncludeJsonTypeInfo>");
	}
	// field IncludeBinTypeInfo
	{
		bool b = src.getIncludeBinTypeInfo();
		if (b)
			buffer.appendf("<IncludeBinTypeInfo>1</IncludeBinTypeInfo>");
	}
	if (keepRootTag)
		buffer.append("</EclRecordTypeInfoRequest>");
}

bool CEclRecordTypeInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Ecl.unmarshall(rpc_request, "Ecl", basepath);
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(rpc_request, "IncludeJsonTypeInfo", basepath);
	hasValue |= m_IncludeBinTypeInfo.unmarshall(rpc_request, "IncludeBinTypeInfo", basepath);
	return hasValue;
}

bool CEclRecordTypeInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Ecl.unmarshall(ctx, soapval, "Ecl");
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(ctx, soapval, "IncludeJsonTypeInfo");
	hasValue |= m_IncludeBinTypeInfo.unmarshall(ctx, soapval, "IncludeBinTypeInfo");
	return hasValue;
}

bool CEclRecordTypeInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Ecl.unmarshall(ctx, params, attachments, "Ecl", basepath);
	hasValue |= m_IncludeJsonTypeInfo.unmarshall(ctx, params, attachments, "IncludeJsonTypeInfo", basepath);
	hasValue |= m_IncludeBinTypeInfo.unmarshall(ctx, params, attachments, "IncludeBinTypeInfo", basepath);
	return hasValue;
}

const char * CEclRecordTypeInfoRequest::getEcl() { return m_Ecl.query();}
bool CEclRecordTypeInfoRequest::getIncludeJsonTypeInfo() { return m_IncludeJsonTypeInfo;}
bool CEclRecordTypeInfoRequest::getIncludeBinTypeInfo() { return m_IncludeBinTypeInfo;}
void CEclRecordTypeInfoRequest::setEcl(const char * val){ m_Ecl.set(val); }
void CEclRecordTypeInfoRequest::setIncludeJsonTypeInfo(bool val){ m_IncludeJsonTypeInfo=val; }
void CEclRecordTypeInfoRequest::setIncludeBinTypeInfo(bool val){ m_IncludeBinTypeInfo=val; }
extern "C"  IEspEclRecordTypeInfoRequest *createEclRecordTypeInfoRequest(const char *serv){return ((IEspEclRecordTypeInfoRequest *)new CEclRecordTypeInfoRequest(serv));}
extern "C"  IClientEclRecordTypeInfoRequest *createClientEclRecordTypeInfoRequest(const char *serv){return ((IClientEclRecordTypeInfoRequest *)new CEclRecordTypeInfoRequest(serv));}

//=======================================================
// class CEclRecordTypeInfoResponse Implementation
//=======================================================

CEclRecordTypeInfoResponse::CEclRecordTypeInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEclRecordTypeInfoResponse::CEclRecordTypeInfoResponse(const char *serviceName, const char *bc)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoResponse");
}

CEclRecordTypeInfoResponse::CEclRecordTypeInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CEclRecordTypeInfoResponse::CEclRecordTypeInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_jsonInfo(nilIgnore),m_binInfo(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EclRecordTypeInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CEclRecordTypeInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"jsonInfo\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"binInfo\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CEclRecordTypeInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEclRecordTypeInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CEclRecordTypeInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("jsonInfo");
	form.appendf("  <tr><td><b>jsonInfo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("binInfo");
	form.appendf("  <tr><td><b>binInfo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEclRecordTypeInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEclRecordTypeInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_jsonInfo.marshall(rpc_resp, "jsonInfo", "", "", "");
		m_binInfo.marshall(rpc_resp, "binInfo", "", "", "");
	}
}


void CEclRecordTypeInfoResponse::copy(CEclRecordTypeInfoResponse &from)
{
	m_jsonInfo.copy(from.m_jsonInfo);
	m_binInfo.copy(from.m_binInfo);
}


void CEclRecordTypeInfoResponse::copy(IConstEclRecordTypeInfoResponse &ifrom)
{
	setJsonInfo(ifrom.getJsonInfo());
	setBinInfo(ifrom.getBinInfo());
}


void CEclRecordTypeInfoResponse::getAttributes(IProperties &attributes)
{
}


void CEclRecordTypeInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_jsonInfo.toStr(ctx, buffer, "jsonInfo", "", true, "", "", false);
		m_binInfo.toStr(ctx, buffer, "binInfo", "", true, "", "");
	}
}


void CEclRecordTypeInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEclRecordTypeInfoResponse::serializer(IEspContext* ctx, IConstEclRecordTypeInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EclRecordTypeInfoResponse>");
	// field jsonInfo
	{
		const char* s = src.getJsonInfo();
		if (s && *s)
		{
			buffer.append("<jsonInfo>");
			encodeUtf8XML(s,buffer);
			buffer.append("</jsonInfo>");
		}
	}
	// field binInfo
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getBinInfo().toByteArray(), src.getBinInfo().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<binInfo>%s</binInfo>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</EclRecordTypeInfoResponse>");
}

bool CEclRecordTypeInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_jsonInfo.unmarshall(rpc_request, "jsonInfo", basepath);
		hasValue |= m_binInfo.unmarshall(rpc_request, "binInfo", basepath);
	}
	return hasValue;
}

bool CEclRecordTypeInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_jsonInfo.unmarshall(ctx, soapval, "jsonInfo");
	hasValue |= m_binInfo.unmarshall(ctx, soapval, "binInfo");
	return hasValue;
}

bool CEclRecordTypeInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_jsonInfo.unmarshall(ctx, params, attachments, "jsonInfo", basepath);
	hasValue |= m_binInfo.unmarshall(ctx, params, attachments, "binInfo", basepath);
	return hasValue;
}

const char * CEclRecordTypeInfoResponse::getJsonInfo() { return m_jsonInfo.query();}
const MemoryBuffer & CEclRecordTypeInfoResponse::getBinInfo() { return m_binInfo.getValue();}
void CEclRecordTypeInfoResponse::setJsonInfo(const char * val){ m_jsonInfo.set(val); }
void CEclRecordTypeInfoResponse::setBinInfo(const MemoryBuffer & val){ m_binInfo->clear().append(val); }
extern "C"  IEspEclRecordTypeInfoResponse *createEclRecordTypeInfoResponse(const char *serv){return ((IEspEclRecordTypeInfoResponse *)new CEclRecordTypeInfoResponse(serv));}
extern "C"  IClientEclRecordTypeInfoResponse *createClientEclRecordTypeInfoResponse(const char *serv){return ((IClientEclRecordTypeInfoResponse *)new CEclRecordTypeInfoResponse(serv));}

//=======================================================
// class CSuperfileActionRequest Implementation
//=======================================================

CSuperfileActionRequest::CSuperfileActionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_action(nilIgnore),m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore),m_delete(nilIgnore),m_removeSuperfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSuperfileActionRequest::CSuperfileActionRequest(const char *serviceName, const char *bc)
	: m_action(nilIgnore),m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore),m_delete(nilIgnore),m_removeSuperfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionRequest");
}

CSuperfileActionRequest::CSuperfileActionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_action(nilIgnore),m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore),m_delete(nilIgnore),m_removeSuperfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CSuperfileActionRequest::CSuperfileActionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_action(nilIgnore),m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore),m_delete(nilIgnore),m_removeSuperfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSuperfileActionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"action\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"superfile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"subfiles\" type=\"tns:EspStringArray\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"before\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"delete\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"removeSuperfile\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CSuperfileActionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSuperfileActionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSuperfileActionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("action");
	form.appendf("  <tr><td><b>action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("superfile");
	form.appendf("  <tr><td><b>superfile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("subfiles");
	form.appendf("<tr><td><b>subfiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("before");
	form.appendf("  <tr><td><b>before: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("delete");
	
	form.appendf("  <tr><td><b>delete? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("removeSuperfile");
	
	form.appendf("  <tr><td><b>removeSuperfile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSuperfileActionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSuperfileActionRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_action.marshall(rpc_resp, "action", "", "", "");
	m_superfile.marshall(rpc_resp, "superfile", "", "", "");
	m_subfiles.marshall(rpc_resp, "subfiles", "Item");
	m_before.marshall(rpc_resp, "before", "", "", "");
	m_delete.marshall(rpc_resp, "delete", "", "", "");
	m_removeSuperfile.marshall(rpc_resp, "removeSuperfile", "", "", "");
}


void CSuperfileActionRequest::copy(CSuperfileActionRequest &from)
{
	m_action.copy(from.m_action);
	m_superfile.copy(from.m_superfile);
	m_subfiles.copy(from.m_subfiles);
	m_before.copy(from.m_before);
	m_delete.copy(from.m_delete);
	m_removeSuperfile.copy(from.m_removeSuperfile);
}


void CSuperfileActionRequest::copy(IConstSuperfileActionRequest &ifrom)
{
	setAction(ifrom.getAction());
	setSuperfile(ifrom.getSuperfile());
	setSubfiles(ifrom.getSubfiles());
	setBefore(ifrom.getBefore());
	setDelete(ifrom.getDelete());
	setRemoveSuperfile(ifrom.getRemoveSuperfile());
}


void CSuperfileActionRequest::getAttributes(IProperties &attributes)
{
}


void CSuperfileActionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_action.toStr(ctx, buffer, "action", "", true, "", "");
	m_superfile.toStr(ctx, buffer, "superfile", "", true, "", "");
	m_subfiles.toStr(ctx, buffer, "subfiles", "Item");
	m_before.toStr(ctx, buffer, "before", "", true, "", "");
	m_delete.toStr(ctx, buffer, "delete", "", true, "", "");
	m_removeSuperfile.toStr(ctx, buffer, "removeSuperfile", "", true, "", "");
}


void CSuperfileActionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSuperfileActionRequest::serializer(IEspContext* ctx, IConstSuperfileActionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SuperfileActionRequest>");
	// field action
	{
		const char* s = src.getAction();
		if (s && *s)
		{
			buffer.append("<action>");
			encodeUtf8XML(s,buffer);
			buffer.append("</action>");
		}
	}
	// field superfile
	{
		const char* s = src.getSuperfile();
		if (s && *s)
		{
			buffer.append("<superfile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</superfile>");
		}
	}
	// field subfiles
	{
		StringArray& v = src.getSubfiles();
		if (v.length()>0)
			buffer.append("<subfiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</subfiles>");
	}
	// field before
	{
		const char* s = src.getBefore();
		if (s && *s)
		{
			buffer.append("<before>");
			encodeUtf8XML(s,buffer);
			buffer.append("</before>");
		}
	}
	// field delete
	{
		bool b = src.getDelete();
		if (b)
			buffer.appendf("<delete>1</delete>");
	}
	// field removeSuperfile
	{
		bool b = src.getRemoveSuperfile();
		if (b)
			buffer.appendf("<removeSuperfile>1</removeSuperfile>");
	}
	if (keepRootTag)
		buffer.append("</SuperfileActionRequest>");
}

bool CSuperfileActionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_action.unmarshall(rpc_request, "action", basepath);
	hasValue |= m_superfile.unmarshall(rpc_request, "superfile", basepath);
	hasValue |= m_subfiles.unmarshall(rpc_request, "subfiles", basepath);
	hasValue |= m_before.unmarshall(rpc_request, "before", basepath);
	hasValue |= m_delete.unmarshall(rpc_request, "delete", basepath);
	hasValue |= m_removeSuperfile.unmarshall(rpc_request, "removeSuperfile", basepath);
	return hasValue;
}

bool CSuperfileActionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_action.unmarshall(ctx, soapval, "action");
	hasValue |= m_superfile.unmarshall(ctx, soapval, "superfile");
	hasValue |= m_subfiles.unmarshall(ctx, soapval, "subfiles");
	hasValue |= m_before.unmarshall(ctx, soapval, "before");
	hasValue |= m_delete.unmarshall(ctx, soapval, "delete");
	hasValue |= m_removeSuperfile.unmarshall(ctx, soapval, "removeSuperfile");
	return hasValue;
}

bool CSuperfileActionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_action.unmarshall(ctx, params, attachments, "action", basepath);
	hasValue |= m_superfile.unmarshall(ctx, params, attachments, "superfile", basepath);
	hasValue |= m_subfiles.unmarshall(ctx, params, attachments, "subfiles", basepath);
	hasValue |= m_before.unmarshall(ctx, params, attachments, "before", basepath);
	hasValue |= m_delete.unmarshall(ctx, params, attachments, "delete", basepath);
	hasValue |= m_removeSuperfile.unmarshall(ctx, params, attachments, "removeSuperfile", basepath);
	return hasValue;
}

const char * CSuperfileActionRequest::getAction() { return m_action.query();}
const char * CSuperfileActionRequest::getSuperfile() { return m_superfile.query();}
StringArray & CSuperfileActionRequest::getSubfiles() { return (StringArray &) m_subfiles; }
const char * CSuperfileActionRequest::getBefore() { return m_before.query();}
bool CSuperfileActionRequest::getDelete() { return m_delete;}
bool CSuperfileActionRequest::getRemoveSuperfile() { return m_removeSuperfile;}
void CSuperfileActionRequest::setAction(const char * val){ m_action.set(val); }
void CSuperfileActionRequest::setSuperfile(const char * val){ m_superfile.set(val); }
void CSuperfileActionRequest::setSubfiles(StringArray &val){ m_subfiles->kill();  CloneArray(m_subfiles.getValue(), val); }
void CSuperfileActionRequest::setBefore(const char * val){ m_before.set(val); }
void CSuperfileActionRequest::setDelete(bool val){ m_delete=val; }
void CSuperfileActionRequest::setRemoveSuperfile(bool val){ m_removeSuperfile=val; }
extern "C"  IEspSuperfileActionRequest *createSuperfileActionRequest(const char *serv){return ((IEspSuperfileActionRequest *)new CSuperfileActionRequest(serv));}
extern "C"  IClientSuperfileActionRequest *createClientSuperfileActionRequest(const char *serv){return ((IClientSuperfileActionRequest *)new CSuperfileActionRequest(serv));}

//=======================================================
// class CSuperfileActionResponse Implementation
//=======================================================

CSuperfileActionResponse::CSuperfileActionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSuperfileActionResponse::CSuperfileActionResponse(const char *serviceName, const char *bc)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionResponse");
}

CSuperfileActionResponse::CSuperfileActionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CSuperfileActionResponse::CSuperfileActionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileActionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSuperfileActionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"superfile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"retcode\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CSuperfileActionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSuperfileActionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSuperfileActionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("superfile");
	form.appendf("  <tr><td><b>superfile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("retcode");
	form.appendf("  <tr><td><b>retcode: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSuperfileActionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSuperfileActionResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_superfile.marshall(rpc_resp, "superfile", "", "", "");
		m_retcode.marshall(rpc_resp, "retcode", "", "", "");
	}
}


void CSuperfileActionResponse::copy(CSuperfileActionResponse &from)
{
	m_superfile.copy(from.m_superfile);
	m_retcode.copy(from.m_retcode);
}


void CSuperfileActionResponse::copy(IConstSuperfileActionResponse &ifrom)
{
	setSuperfile(ifrom.getSuperfile());
	setRetcode(ifrom.getRetcode());
}


void CSuperfileActionResponse::getAttributes(IProperties &attributes)
{
}


void CSuperfileActionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_superfile.toStr(ctx, buffer, "superfile", "", true, "", "");
		m_retcode.toStr(ctx, buffer, "retcode", "", true, "", "");
	}
}


void CSuperfileActionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSuperfileActionResponse::serializer(IEspContext* ctx, IConstSuperfileActionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SuperfileActionResponse>");
	// field superfile
	{
		const char* s = src.getSuperfile();
		if (s && *s)
		{
			buffer.append("<superfile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</superfile>");
		}
	}
	// field retcode
	{
		int n = src.getRetcode();
		if (n)
			buffer.appendf("<retcode>%d</retcode>", n);
	}
	if (keepRootTag)
		buffer.append("</SuperfileActionResponse>");
}

bool CSuperfileActionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_superfile.unmarshall(rpc_request, "superfile", basepath);
		hasValue |= m_retcode.unmarshall(rpc_request, "retcode", basepath);
	}
	return hasValue;
}

bool CSuperfileActionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, soapval, "superfile");
	hasValue |= m_retcode.unmarshall(ctx, soapval, "retcode");
	return hasValue;
}

bool CSuperfileActionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, params, attachments, "superfile", basepath);
	hasValue |= m_retcode.unmarshall(ctx, params, attachments, "retcode", basepath);
	return hasValue;
}

const char * CSuperfileActionResponse::getSuperfile() { return m_superfile.query();}
bool CSuperfileActionResponse::getRetcode_isNull(){return m_retcode.is_nil();}
int CSuperfileActionResponse::getRetcode() { return m_retcode;}
void CSuperfileActionResponse::setSuperfile(const char * val){ m_superfile.set(val); }
void CSuperfileActionResponse::setRetcode_null(){ m_retcode.Nil(); }void CSuperfileActionResponse::setRetcode(int val){ m_retcode=val; }
extern "C"  IEspSuperfileActionResponse *createSuperfileActionResponse(const char *serv){return ((IEspSuperfileActionResponse *)new CSuperfileActionResponse(serv));}
extern "C"  IClientSuperfileActionResponse *createClientSuperfileActionResponse(const char *serv){return ((IClientSuperfileActionResponse *)new CSuperfileActionResponse(serv));}

//=======================================================
// class CAddtoSuperfileRequest Implementation
//=======================================================

CAddtoSuperfileRequest::CAddtoSuperfileRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Superfile(nilIgnore),m_Subfiles(nilIgnore),m_names(nilIgnore),m_ExistingFile(0, nilIgnore,false),m_BackToPage(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CAddtoSuperfileRequest::CAddtoSuperfileRequest(const char *serviceName, const char *bc)
	: m_Superfile(nilIgnore),m_Subfiles(nilIgnore),m_names(nilIgnore),m_ExistingFile(0, nilIgnore,false),m_BackToPage(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileRequest");
}

CAddtoSuperfileRequest::CAddtoSuperfileRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Superfile(nilIgnore),m_Subfiles(nilIgnore),m_names(nilIgnore),m_ExistingFile(0, nilIgnore,false),m_BackToPage(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CAddtoSuperfileRequest::CAddtoSuperfileRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Superfile(nilIgnore),m_Subfiles(nilIgnore),m_names(nilIgnore),m_ExistingFile(0, nilIgnore,false),m_BackToPage(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CAddtoSuperfileRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Superfile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Subfiles\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"names\" type=\"tns:EspStringArray\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ExistingFile\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("AddtoSuperfileRequest","BackToPage")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BackToPage\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CAddtoSuperfileRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CAddtoSuperfileRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("AddtoSuperfileRequest","BackToPage",1.18);
}

StringBuffer &CAddtoSuperfileRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Superfile");
	form.appendf("  <tr><td><b>Superfile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Subfiles");
	form.appendf("  <tr><td><b>Subfiles: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("names");
	form.appendf("<tr><td><b>names: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExistingFile");
	
	form.appendf("  <tr><td><b>ExistingFile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("AddtoSuperfileRequest","BackToPage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BackToPage");
		form.appendf("  <tr><td><b>BackToPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CAddtoSuperfileRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CAddtoSuperfileRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Superfile.marshall(rpc_resp, "Superfile", "", "", "");
	m_Subfiles.marshall(rpc_resp, "Subfiles", "", "", "");
	m_names.marshall(rpc_resp, "names", "Item");
	m_ExistingFile.marshall(rpc_resp, "ExistingFile", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.18))
		m_BackToPage.marshall(rpc_resp, "BackToPage", "", "", "");
}


void CAddtoSuperfileRequest::copy(CAddtoSuperfileRequest &from)
{
	m_Superfile.copy(from.m_Superfile);
	m_Subfiles.copy(from.m_Subfiles);
	m_names.copy(from.m_names);
	m_ExistingFile.copy(from.m_ExistingFile);
	m_BackToPage.copy(from.m_BackToPage);
}


void CAddtoSuperfileRequest::copy(IConstAddtoSuperfileRequest &ifrom)
{
	setSuperfile(ifrom.getSuperfile());
	setSubfiles(ifrom.getSubfiles());
	setNames(ifrom.getNames());
	setExistingFile(ifrom.getExistingFile());
	setBackToPage(ifrom.getBackToPage());
}


void CAddtoSuperfileRequest::getAttributes(IProperties &attributes)
{
}


void CAddtoSuperfileRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Superfile.toStr(ctx, buffer, "Superfile", "", true, "", "");
	m_Subfiles.toStr(ctx, buffer, "Subfiles", "", true, "", "");
	m_names.toStr(ctx, buffer, "names", "Item");
	m_ExistingFile.toStr(ctx, buffer, "ExistingFile", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.18))
		m_BackToPage.toStr(ctx, buffer, "BackToPage", "", true, "", "");
}


void CAddtoSuperfileRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CAddtoSuperfileRequest::serializer(IEspContext* ctx, IConstAddtoSuperfileRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<AddtoSuperfileRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Superfile
	{
		const char* s = src.getSuperfile();
		if (s && *s)
		{
			buffer.append("<Superfile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Superfile>");
		}
	}
	// field Subfiles
	{
		const char* s = src.getSubfiles();
		if (s && *s)
		{
			buffer.append("<Subfiles>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Subfiles>");
		}
	}
	// field names
	{
		StringArray& v = src.getNames();
		if (v.length()>0)
			buffer.append("<names>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</names>");
	}
	// field ExistingFile
	{
		bool b = src.getExistingFile();
		if (b)
			buffer.appendf("<ExistingFile>1</ExistingFile>");
	}
	// field BackToPage
	if ((clientVer==-1.0 || clientVer>=1.18))
	{
		const char* s = src.getBackToPage();
		if (s && *s)
		{
			buffer.append("<BackToPage>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BackToPage>");
		}
	}
	if (keepRootTag)
		buffer.append("</AddtoSuperfileRequest>");
}

bool CAddtoSuperfileRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Superfile.unmarshall(rpc_request, "Superfile", basepath);
	hasValue |= m_Subfiles.unmarshall(rpc_request, "Subfiles", basepath);
	hasValue |= m_names.unmarshall(rpc_request, "names", basepath);
	hasValue |= m_ExistingFile.unmarshall(rpc_request, "ExistingFile", basepath);
	hasValue |= m_BackToPage.unmarshall(rpc_request, "BackToPage", basepath);
	return hasValue;
}

bool CAddtoSuperfileRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Superfile.unmarshall(ctx, soapval, "Superfile");
	hasValue |= m_Subfiles.unmarshall(ctx, soapval, "Subfiles");
	hasValue |= m_names.unmarshall(ctx, soapval, "names");
	hasValue |= m_ExistingFile.unmarshall(ctx, soapval, "ExistingFile");
	hasValue |= m_BackToPage.unmarshall(ctx, soapval, "BackToPage");
	return hasValue;
}

bool CAddtoSuperfileRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Superfile.unmarshall(ctx, params, attachments, "Superfile", basepath);
	hasValue |= m_Subfiles.unmarshall(ctx, params, attachments, "Subfiles", basepath);
	hasValue |= m_names.unmarshall(ctx, params, attachments, "names", basepath);
	hasValue |= m_ExistingFile.unmarshall(ctx, params, attachments, "ExistingFile", basepath);
	hasValue |= m_BackToPage.unmarshall(ctx, params, attachments, "BackToPage", basepath);
	return hasValue;
}

const char * CAddtoSuperfileRequest::getSuperfile() { return m_Superfile.query();}
const char * CAddtoSuperfileRequest::getSubfiles() { return m_Subfiles.query();}
StringArray & CAddtoSuperfileRequest::getNames() { return (StringArray &) m_names; }
bool CAddtoSuperfileRequest::getExistingFile() { return m_ExistingFile;}
const char * CAddtoSuperfileRequest::getBackToPage() { return m_BackToPage.query();}
void CAddtoSuperfileRequest::setSuperfile(const char * val){ m_Superfile.set(val); }
void CAddtoSuperfileRequest::setSubfiles(const char * val){ m_Subfiles.set(val); }
void CAddtoSuperfileRequest::setNames(StringArray &val){ m_names->kill();  CloneArray(m_names.getValue(), val); }
void CAddtoSuperfileRequest::setExistingFile(bool val){ m_ExistingFile=val; }
void CAddtoSuperfileRequest::setBackToPage(const char * val){ m_BackToPage.set(val); }
extern "C"  IEspAddtoSuperfileRequest *createAddtoSuperfileRequest(const char *serv){return ((IEspAddtoSuperfileRequest *)new CAddtoSuperfileRequest(serv));}
extern "C"  IClientAddtoSuperfileRequest *createClientAddtoSuperfileRequest(const char *serv){return ((IClientAddtoSuperfileRequest *)new CAddtoSuperfileRequest(serv));}

//=======================================================
// class CAddtoSuperfileResponse Implementation
//=======================================================

CAddtoSuperfileResponse::CAddtoSuperfileResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Subfiles(nilRemove),m_BackToPage(nilRemove),m_SubfileNames(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CAddtoSuperfileResponse::CAddtoSuperfileResponse(const char *serviceName, const char *bc)
	: m_Subfiles(nilRemove),m_BackToPage(nilRemove),m_SubfileNames(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileResponse");
}

CAddtoSuperfileResponse::CAddtoSuperfileResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Subfiles(nilRemove),m_BackToPage(nilRemove),m_SubfileNames(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CAddtoSuperfileResponse::CAddtoSuperfileResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Subfiles(nilRemove),m_BackToPage(nilRemove),m_SubfileNames(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddtoSuperfileResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CAddtoSuperfileResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Subfiles\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("AddtoSuperfileResponse","BackToPage")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BackToPage\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("AddtoSuperfileResponse","SubfileNames")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubfileNames\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"SubfileName\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CAddtoSuperfileResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CAddtoSuperfileResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("AddtoSuperfileResponse","BackToPage",1.18);
	info.addMinVersion("AddtoSuperfileResponse","SubfileNames",1.16);
}

StringBuffer &CAddtoSuperfileResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Subfiles");
	form.appendf("  <tr><td><b>Subfiles: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("AddtoSuperfileResponse","BackToPage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BackToPage");
		form.appendf("  <tr><td><b>BackToPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("AddtoSuperfileResponse","SubfileNames")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SubfileNames");
		form.appendf("<tr><td><b>SubfileNames: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CAddtoSuperfileResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CAddtoSuperfileResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Subfiles.marshall(rpc_resp, "Subfiles", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.18))
			m_BackToPage.marshall(rpc_resp, "BackToPage", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.16))
			m_SubfileNames.marshall(rpc_resp, "SubfileNames", "SubfileName");
	}
}


void CAddtoSuperfileResponse::copy(CAddtoSuperfileResponse &from)
{
	m_Subfiles.copy(from.m_Subfiles);
	m_BackToPage.copy(from.m_BackToPage);
	m_SubfileNames.copy(from.m_SubfileNames);
}


void CAddtoSuperfileResponse::copy(IConstAddtoSuperfileResponse &ifrom)
{
	setSubfiles(ifrom.getSubfiles());
	setBackToPage(ifrom.getBackToPage());
	setSubfileNames(ifrom.getSubfileNames());
}


void CAddtoSuperfileResponse::getAttributes(IProperties &attributes)
{
}


void CAddtoSuperfileResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Subfiles.toStr(ctx, buffer, "Subfiles", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.18))
			m_BackToPage.toStr(ctx, buffer, "BackToPage", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.16))
			m_SubfileNames.toStr(ctx, buffer, "SubfileNames", "SubfileName");
	}
}


void CAddtoSuperfileResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CAddtoSuperfileResponse::serializer(IEspContext* ctx, IConstAddtoSuperfileResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<AddtoSuperfileResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Subfiles
	{
		const char* s = src.getSubfiles();
		if (s && *s)
		{
			buffer.append("<Subfiles>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Subfiles>");
		}
	}
	// field BackToPage
	if ((clientVer==-1.0 || clientVer>=1.18))
	{
		const char* s = src.getBackToPage();
		if (s && *s)
		{
			buffer.append("<BackToPage>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BackToPage>");
		}
	}
	// field SubfileNames
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		StringArray& v = src.getSubfileNames();
		if (v.length()>0)
			buffer.append("<SubfileNames>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<SubfileName>%s</SubfileName>",v.item(i));
		if (v.length()>0)
			buffer.append("</SubfileNames>");
	}
	if (keepRootTag)
		buffer.append("</AddtoSuperfileResponse>");
}

bool CAddtoSuperfileResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Subfiles.unmarshall(rpc_request, "Subfiles", basepath);
		hasValue |= m_BackToPage.unmarshall(rpc_request, "BackToPage", basepath);
		hasValue |= m_SubfileNames.unmarshall(rpc_request, "SubfileNames", basepath);
	}
	return hasValue;
}

bool CAddtoSuperfileResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Subfiles.unmarshall(ctx, soapval, "Subfiles");
	hasValue |= m_BackToPage.unmarshall(ctx, soapval, "BackToPage");
	hasValue |= m_SubfileNames.unmarshall(ctx, soapval, "SubfileNames");
	return hasValue;
}

bool CAddtoSuperfileResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Subfiles.unmarshall(ctx, params, attachments, "Subfiles", basepath);
	hasValue |= m_BackToPage.unmarshall(ctx, params, attachments, "BackToPage", basepath);
	hasValue |= m_SubfileNames.unmarshall(ctx, params, attachments, "SubfileNames", basepath);
	return hasValue;
}

const char * CAddtoSuperfileResponse::getSubfiles() { return m_Subfiles.query();}
const char * CAddtoSuperfileResponse::getBackToPage() { return m_BackToPage.query();}
StringArray & CAddtoSuperfileResponse::getSubfileNames() { return (StringArray &) m_SubfileNames; }
void CAddtoSuperfileResponse::setSubfiles(const char * val){ m_Subfiles.set(val); }
void CAddtoSuperfileResponse::setBackToPage(const char * val){ m_BackToPage.set(val); }
void CAddtoSuperfileResponse::setSubfileNames(StringArray &val){ m_SubfileNames->kill();  CloneArray(m_SubfileNames.getValue(), val); }
extern "C"  IEspAddtoSuperfileResponse *createAddtoSuperfileResponse(const char *serv){return ((IEspAddtoSuperfileResponse *)new CAddtoSuperfileResponse(serv));}
extern "C"  IClientAddtoSuperfileResponse *createClientAddtoSuperfileResponse(const char *serv){return ((IClientAddtoSuperfileResponse *)new CAddtoSuperfileResponse(serv));}

//=======================================================
// class CSuperfileListRequest Implementation
//=======================================================

CSuperfileListRequest::CSuperfileListRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_superfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSuperfileListRequest::CSuperfileListRequest(const char *serviceName, const char *bc)
	: m_superfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListRequest");
}

CSuperfileListRequest::CSuperfileListRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_superfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CSuperfileListRequest::CSuperfileListRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_superfile(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSuperfileListRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"superfile\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CSuperfileListRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSuperfileListRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSuperfileListRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("superfile");
	form.appendf("  <tr><td><b>superfile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSuperfileListRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSuperfileListRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_superfile.marshall(rpc_resp, "superfile", "", "", "");
}


void CSuperfileListRequest::copy(CSuperfileListRequest &from)
{
	m_superfile.copy(from.m_superfile);
}


void CSuperfileListRequest::copy(IConstSuperfileListRequest &ifrom)
{
	setSuperfile(ifrom.getSuperfile());
}


void CSuperfileListRequest::getAttributes(IProperties &attributes)
{
}


void CSuperfileListRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_superfile.toStr(ctx, buffer, "superfile", "", true, "", "");
}


void CSuperfileListRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSuperfileListRequest::serializer(IEspContext* ctx, IConstSuperfileListRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SuperfileListRequest>");
	// field superfile
	{
		const char* s = src.getSuperfile();
		if (s && *s)
		{
			buffer.append("<superfile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</superfile>");
		}
	}
	if (keepRootTag)
		buffer.append("</SuperfileListRequest>");
}

bool CSuperfileListRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(rpc_request, "superfile", basepath);
	return hasValue;
}

bool CSuperfileListRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, soapval, "superfile");
	return hasValue;
}

bool CSuperfileListRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, params, attachments, "superfile", basepath);
	return hasValue;
}

const char * CSuperfileListRequest::getSuperfile() { return m_superfile.query();}
void CSuperfileListRequest::setSuperfile(const char * val){ m_superfile.set(val); }
extern "C"  IEspSuperfileListRequest *createSuperfileListRequest(const char *serv){return ((IEspSuperfileListRequest *)new CSuperfileListRequest(serv));}
extern "C"  IClientSuperfileListRequest *createClientSuperfileListRequest(const char *serv){return ((IClientSuperfileListRequest *)new CSuperfileListRequest(serv));}

//=======================================================
// class CSuperfileListResponse Implementation
//=======================================================

CSuperfileListResponse::CSuperfileListResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_superfile(nilRemove),m_subfiles(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSuperfileListResponse::CSuperfileListResponse(const char *serviceName, const char *bc)
	: m_superfile(nilRemove),m_subfiles(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListResponse");
}

CSuperfileListResponse::CSuperfileListResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_superfile(nilRemove),m_subfiles(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CSuperfileListResponse::CSuperfileListResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_superfile(nilRemove),m_subfiles(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileListResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSuperfileListResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"superfile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"subfiles\" type=\"tns:EspStringArray\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CSuperfileListResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSuperfileListResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSuperfileListResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("superfile");
	form.appendf("  <tr><td><b>superfile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("subfiles");
	form.appendf("<tr><td><b>subfiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSuperfileListResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSuperfileListResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_superfile.marshall(rpc_resp, "superfile", "", "", "");
		m_subfiles.marshall(rpc_resp, "subfiles", "Item");
	}
}


void CSuperfileListResponse::copy(CSuperfileListResponse &from)
{
	m_superfile.copy(from.m_superfile);
	m_subfiles.copy(from.m_subfiles);
}


void CSuperfileListResponse::copy(IConstSuperfileListResponse &ifrom)
{
	setSuperfile(ifrom.getSuperfile());
	setSubfiles(ifrom.getSubfiles());
}


void CSuperfileListResponse::getAttributes(IProperties &attributes)
{
}


void CSuperfileListResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_superfile.toStr(ctx, buffer, "superfile", "", true, "", "");
		m_subfiles.toStr(ctx, buffer, "subfiles", "Item");
	}
}


void CSuperfileListResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSuperfileListResponse::serializer(IEspContext* ctx, IConstSuperfileListResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SuperfileListResponse>");
	// field superfile
	{
		const char* s = src.getSuperfile();
		if (s && *s)
		{
			buffer.append("<superfile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</superfile>");
		}
	}
	// field subfiles
	{
		StringArray& v = src.getSubfiles();
		if (v.length()>0)
			buffer.append("<subfiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</subfiles>");
	}
	if (keepRootTag)
		buffer.append("</SuperfileListResponse>");
}

bool CSuperfileListResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_superfile.unmarshall(rpc_request, "superfile", basepath);
		hasValue |= m_subfiles.unmarshall(rpc_request, "subfiles", basepath);
	}
	return hasValue;
}

bool CSuperfileListResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, soapval, "superfile");
	hasValue |= m_subfiles.unmarshall(ctx, soapval, "subfiles");
	return hasValue;
}

bool CSuperfileListResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, params, attachments, "superfile", basepath);
	hasValue |= m_subfiles.unmarshall(ctx, params, attachments, "subfiles", basepath);
	return hasValue;
}

const char * CSuperfileListResponse::getSuperfile() { return m_superfile.query();}
StringArray & CSuperfileListResponse::getSubfiles() { return (StringArray &) m_subfiles; }
void CSuperfileListResponse::setSuperfile(const char * val){ m_superfile.set(val); }
void CSuperfileListResponse::setSubfiles(StringArray &val){ m_subfiles->kill();  CloneArray(m_subfiles.getValue(), val); }
extern "C"  IEspSuperfileListResponse *createSuperfileListResponse(const char *serv){return ((IEspSuperfileListResponse *)new CSuperfileListResponse(serv));}
extern "C"  IClientSuperfileListResponse *createClientSuperfileListResponse(const char *serv){return ((IClientSuperfileListResponse *)new CSuperfileListResponse(serv));}

//=======================================================
// class CSuperfileAddRawRequest Implementation
//=======================================================

CSuperfileAddRawRequest::CSuperfileAddRawRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSuperfileAddRawRequest::CSuperfileAddRawRequest(const char *serviceName, const char *bc)
	: m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawRequest");
}

CSuperfileAddRawRequest::CSuperfileAddRawRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CSuperfileAddRawRequest::CSuperfileAddRawRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_superfile(nilIgnore),m_subfiles(nilIgnore),m_before(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSuperfileAddRawRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"superfile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"subfiles\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"before\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CSuperfileAddRawRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSuperfileAddRawRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSuperfileAddRawRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("superfile");
	form.appendf("  <tr><td><b>superfile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("subfiles");
	form.appendf("  <tr><td><b>subfiles: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("before");
	form.appendf("  <tr><td><b>before: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSuperfileAddRawRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSuperfileAddRawRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_superfile.marshall(rpc_resp, "superfile", "", "", "");
	m_subfiles.marshall(rpc_resp, "subfiles", "", "", "");
	m_before.marshall(rpc_resp, "before", "", "", "");
}


void CSuperfileAddRawRequest::copy(CSuperfileAddRawRequest &from)
{
	m_superfile.copy(from.m_superfile);
	m_subfiles.copy(from.m_subfiles);
	m_before.copy(from.m_before);
}


void CSuperfileAddRawRequest::copy(IConstSuperfileAddRawRequest &ifrom)
{
	setSuperfile(ifrom.getSuperfile());
	setSubfiles(ifrom.getSubfiles());
	setBefore(ifrom.getBefore());
}


void CSuperfileAddRawRequest::getAttributes(IProperties &attributes)
{
}


void CSuperfileAddRawRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_superfile.toStr(ctx, buffer, "superfile", "", true, "", "");
	m_subfiles.toStr(ctx, buffer, "subfiles", "", true, "", "");
	m_before.toStr(ctx, buffer, "before", "", true, "", "");
}


void CSuperfileAddRawRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSuperfileAddRawRequest::serializer(IEspContext* ctx, IConstSuperfileAddRawRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SuperfileAddRawRequest>");
	// field superfile
	{
		const char* s = src.getSuperfile();
		if (s && *s)
		{
			buffer.append("<superfile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</superfile>");
		}
	}
	// field subfiles
	{
		const char* s = src.getSubfiles();
		if (s && *s)
		{
			buffer.append("<subfiles>");
			encodeUtf8XML(s,buffer);
			buffer.append("</subfiles>");
		}
	}
	// field before
	{
		const char* s = src.getBefore();
		if (s && *s)
		{
			buffer.append("<before>");
			encodeUtf8XML(s,buffer);
			buffer.append("</before>");
		}
	}
	if (keepRootTag)
		buffer.append("</SuperfileAddRawRequest>");
}

bool CSuperfileAddRawRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(rpc_request, "superfile", basepath);
	hasValue |= m_subfiles.unmarshall(rpc_request, "subfiles", basepath);
	hasValue |= m_before.unmarshall(rpc_request, "before", basepath);
	return hasValue;
}

bool CSuperfileAddRawRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, soapval, "superfile");
	hasValue |= m_subfiles.unmarshall(ctx, soapval, "subfiles");
	hasValue |= m_before.unmarshall(ctx, soapval, "before");
	return hasValue;
}

bool CSuperfileAddRawRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, params, attachments, "superfile", basepath);
	hasValue |= m_subfiles.unmarshall(ctx, params, attachments, "subfiles", basepath);
	hasValue |= m_before.unmarshall(ctx, params, attachments, "before", basepath);
	return hasValue;
}

const char * CSuperfileAddRawRequest::getSuperfile() { return m_superfile.query();}
const char * CSuperfileAddRawRequest::getSubfiles() { return m_subfiles.query();}
const char * CSuperfileAddRawRequest::getBefore() { return m_before.query();}
void CSuperfileAddRawRequest::setSuperfile(const char * val){ m_superfile.set(val); }
void CSuperfileAddRawRequest::setSubfiles(const char * val){ m_subfiles.set(val); }
void CSuperfileAddRawRequest::setBefore(const char * val){ m_before.set(val); }
extern "C"  IEspSuperfileAddRawRequest *createSuperfileAddRawRequest(const char *serv){return ((IEspSuperfileAddRawRequest *)new CSuperfileAddRawRequest(serv));}
extern "C"  IClientSuperfileAddRawRequest *createClientSuperfileAddRawRequest(const char *serv){return ((IClientSuperfileAddRawRequest *)new CSuperfileAddRawRequest(serv));}

//=======================================================
// class CSuperfileAddRawResponse Implementation
//=======================================================

CSuperfileAddRawResponse::CSuperfileAddRawResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSuperfileAddRawResponse::CSuperfileAddRawResponse(const char *serviceName, const char *bc)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawResponse");
}

CSuperfileAddRawResponse::CSuperfileAddRawResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CSuperfileAddRawResponse::CSuperfileAddRawResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_superfile(nilRemove),m_retcode(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SuperfileAddRawResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSuperfileAddRawResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"superfile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"retcode\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CSuperfileAddRawResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSuperfileAddRawResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSuperfileAddRawResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("superfile");
	form.appendf("  <tr><td><b>superfile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("retcode");
	form.appendf("  <tr><td><b>retcode: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSuperfileAddRawResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSuperfileAddRawResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_superfile.marshall(rpc_resp, "superfile", "", "", "");
		m_retcode.marshall(rpc_resp, "retcode", "", "", "");
	}
}


void CSuperfileAddRawResponse::copy(CSuperfileAddRawResponse &from)
{
	m_superfile.copy(from.m_superfile);
	m_retcode.copy(from.m_retcode);
}


void CSuperfileAddRawResponse::copy(IConstSuperfileAddRawResponse &ifrom)
{
	setSuperfile(ifrom.getSuperfile());
	setRetcode(ifrom.getRetcode());
}


void CSuperfileAddRawResponse::getAttributes(IProperties &attributes)
{
}


void CSuperfileAddRawResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_superfile.toStr(ctx, buffer, "superfile", "", true, "", "");
		m_retcode.toStr(ctx, buffer, "retcode", "", true, "", "");
	}
}


void CSuperfileAddRawResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSuperfileAddRawResponse::serializer(IEspContext* ctx, IConstSuperfileAddRawResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SuperfileAddRawResponse>");
	// field superfile
	{
		const char* s = src.getSuperfile();
		if (s && *s)
		{
			buffer.append("<superfile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</superfile>");
		}
	}
	// field retcode
	{
		int n = src.getRetcode();
		if (n)
			buffer.appendf("<retcode>%d</retcode>", n);
	}
	if (keepRootTag)
		buffer.append("</SuperfileAddRawResponse>");
}

bool CSuperfileAddRawResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_superfile.unmarshall(rpc_request, "superfile", basepath);
		hasValue |= m_retcode.unmarshall(rpc_request, "retcode", basepath);
	}
	return hasValue;
}

bool CSuperfileAddRawResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, soapval, "superfile");
	hasValue |= m_retcode.unmarshall(ctx, soapval, "retcode");
	return hasValue;
}

bool CSuperfileAddRawResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_superfile.unmarshall(ctx, params, attachments, "superfile", basepath);
	hasValue |= m_retcode.unmarshall(ctx, params, attachments, "retcode", basepath);
	return hasValue;
}

const char * CSuperfileAddRawResponse::getSuperfile() { return m_superfile.query();}
bool CSuperfileAddRawResponse::getRetcode_isNull(){return m_retcode.is_nil();}
int CSuperfileAddRawResponse::getRetcode() { return m_retcode;}
void CSuperfileAddRawResponse::setSuperfile(const char * val){ m_superfile.set(val); }
void CSuperfileAddRawResponse::setRetcode_null(){ m_retcode.Nil(); }void CSuperfileAddRawResponse::setRetcode(int val){ m_retcode=val; }
extern "C"  IEspSuperfileAddRawResponse *createSuperfileAddRawResponse(const char *serv){return ((IEspSuperfileAddRawResponse *)new CSuperfileAddRawResponse(serv));}
extern "C"  IClientSuperfileAddRawResponse *createClientSuperfileAddRawResponse(const char *serv){return ((IClientSuperfileAddRawResponse *)new CSuperfileAddRawResponse(serv));}

//=======================================================
// class CSavexmlRequest Implementation
//=======================================================

CSavexmlRequest::CSavexmlRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSavexmlRequest::CSavexmlRequest(const char *serviceName, const char *bc)
	: m_name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlRequest");
}

CSavexmlRequest::CSavexmlRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CSavexmlRequest::CSavexmlRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSavexmlRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"name\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CSavexmlRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSavexmlRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSavexmlRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("name");
	form.appendf("  <tr><td><b>name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSavexmlRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSavexmlRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_name.marshall(rpc_resp, "name", "", "", "");
}


void CSavexmlRequest::copy(CSavexmlRequest &from)
{
	m_name.copy(from.m_name);
}


void CSavexmlRequest::copy(IConstSavexmlRequest &ifrom)
{
	setName(ifrom.getName());
}


void CSavexmlRequest::getAttributes(IProperties &attributes)
{
}


void CSavexmlRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_name.toStr(ctx, buffer, "name", "", true, "", "");
}


void CSavexmlRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSavexmlRequest::serializer(IEspContext* ctx, IConstSavexmlRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SavexmlRequest>");
	// field name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</name>");
		}
	}
	if (keepRootTag)
		buffer.append("</SavexmlRequest>");
}

bool CSavexmlRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_name.unmarshall(rpc_request, "name", basepath);
	return hasValue;
}

bool CSavexmlRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_name.unmarshall(ctx, soapval, "name");
	return hasValue;
}

bool CSavexmlRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_name.unmarshall(ctx, params, attachments, "name", basepath);
	return hasValue;
}

const char * CSavexmlRequest::getName() { return m_name.query();}
void CSavexmlRequest::setName(const char * val){ m_name.set(val); }
extern "C"  IEspSavexmlRequest *createSavexmlRequest(const char *serv){return ((IEspSavexmlRequest *)new CSavexmlRequest(serv));}
extern "C"  IClientSavexmlRequest *createClientSavexmlRequest(const char *serv){return ((IClientSavexmlRequest *)new CSavexmlRequest(serv));}

//=======================================================
// class CSavexmlResponse Implementation
//=======================================================

CSavexmlResponse::CSavexmlResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_xmlmap(nilRemove),m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CSavexmlResponse::CSavexmlResponse(const char *serviceName, const char *bc)
	: m_xmlmap(nilRemove), m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlResponse");
}

CSavexmlResponse::CSavexmlResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_xmlmap(nilRemove), m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CSavexmlResponse::CSavexmlResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_xmlmap(nilRemove), m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("SavexmlResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CSavexmlResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"xmlmap\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CSavexmlResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CSavexmlResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CSavexmlResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("xmlmap");
	form.appendf("  <tr><td><b>xmlmap: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CSavexmlResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CSavexmlResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_xmlmap.marshall(rpc_resp, "xmlmap", "", "", "");
	}
}


void CSavexmlResponse::copy(CSavexmlResponse &from)
{
	m_xmlmap.copy(from.m_xmlmap);
}


void CSavexmlResponse::copy(IConstSavexmlResponse &ifrom)
{
	setXmlmap(ifrom.getXmlmap());
}


void CSavexmlResponse::getAttributes(IProperties &attributes)
{
}


void CSavexmlResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_xmlmap.toStr(ctx, buffer, "xmlmap", "", true, "", "");
	}
}


void CSavexmlResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CSavexmlResponse::serializer(IEspContext* ctx, IConstSavexmlResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<SavexmlResponse>");
	// field xmlmap
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getXmlmap().toByteArray(), src.getXmlmap().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<xmlmap>%s</xmlmap>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</SavexmlResponse>");
}

void CSavexmlResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_xmlmap.getValue());
	mimetype.set(m_xmlmap_mimetype.str());
}

bool CSavexmlResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_xmlmap.unmarshall(rpc_request, "xmlmap", basepath);
	}
	return hasValue;
}

bool CSavexmlResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_xmlmap.unmarshall(ctx, soapval, "xmlmap");
	return hasValue;
}

bool CSavexmlResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_xmlmap.unmarshall(ctx, params, attachments, "xmlmap", basepath);
	return hasValue;
}

const char *CSavexmlResponse::getXmlmap_mimetype(){ return m_xmlmap_mimetype.str(); }
const MemoryBuffer & CSavexmlResponse::getXmlmap() { return m_xmlmap.getValue();}
void CSavexmlResponse::setXmlmap_mimetype(const char *  val){ m_xmlmap_mimetype.set(val); }
void CSavexmlResponse::setXmlmap(const MemoryBuffer & val){ m_xmlmap->clear().append(val); }
extern "C"  IEspSavexmlResponse *createSavexmlResponse(const char *serv){return ((IEspSavexmlResponse *)new CSavexmlResponse(serv));}
extern "C"  IClientSavexmlResponse *createClientSavexmlResponse(const char *serv){return ((IClientSavexmlResponse *)new CSavexmlResponse(serv));}

//=======================================================
// class CAddRequest Implementation
//=======================================================

CAddRequest::CAddRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_dstname(nilIgnore),m_xmlmap(nilIgnore),m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CAddRequest::CAddRequest(const char *serviceName, const char *bc)
	: m_dstname(nilIgnore),m_xmlmap(nilIgnore), m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRequest");
}

CAddRequest::CAddRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_dstname(nilIgnore),m_xmlmap(nilIgnore), m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CAddRequest::CAddRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_dstname(nilIgnore),m_xmlmap(nilIgnore), m_xmlmap_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CAddRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"dstname\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"xmlmap\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CAddRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CAddRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CAddRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("dstname");
	form.appendf("  <tr><td><b>dstname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("xmlmap");
	form.appendf("  <tr><td><b>xmlmap: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CAddRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CAddRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_dstname.marshall(rpc_resp, "dstname", "", "", "");
	m_xmlmap.marshall(rpc_resp, "xmlmap", "", "", "");
}


void CAddRequest::copy(CAddRequest &from)
{
	m_dstname.copy(from.m_dstname);
	m_xmlmap.copy(from.m_xmlmap);
}


void CAddRequest::copy(IConstAddRequest &ifrom)
{
	setDstname(ifrom.getDstname());
	setXmlmap(ifrom.getXmlmap());
}


void CAddRequest::getAttributes(IProperties &attributes)
{
}


void CAddRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_dstname.toStr(ctx, buffer, "dstname", "", true, "", "");
	m_xmlmap.toStr(ctx, buffer, "xmlmap", "", true, "", "");
}


void CAddRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CAddRequest::serializer(IEspContext* ctx, IConstAddRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<AddRequest>");
	// field dstname
	{
		const char* s = src.getDstname();
		if (s && *s)
		{
			buffer.append("<dstname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</dstname>");
		}
	}
	// field xmlmap
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getXmlmap().toByteArray(), src.getXmlmap().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<xmlmap>%s</xmlmap>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</AddRequest>");
}

void CAddRequest::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_xmlmap.getValue());
	mimetype.set(m_xmlmap_mimetype.str());
}

bool CAddRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_dstname.unmarshall(rpc_request, "dstname", basepath);
	hasValue |= m_xmlmap.unmarshall(rpc_request, "xmlmap", basepath);
	return hasValue;
}

bool CAddRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_dstname.unmarshall(ctx, soapval, "dstname");
	hasValue |= m_xmlmap.unmarshall(ctx, soapval, "xmlmap");
	return hasValue;
}

bool CAddRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_dstname.unmarshall(ctx, params, attachments, "dstname", basepath);
	hasValue |= m_xmlmap.unmarshall(ctx, params, attachments, "xmlmap", basepath);
	return hasValue;
}

const char * CAddRequest::getDstname() { return m_dstname.query();}
const char *CAddRequest::getXmlmap_mimetype(){ return m_xmlmap_mimetype.str(); }
const MemoryBuffer & CAddRequest::getXmlmap() { return m_xmlmap.getValue();}
void CAddRequest::setDstname(const char * val){ m_dstname.set(val); }
void CAddRequest::setXmlmap_mimetype(const char *  val){ m_xmlmap_mimetype.set(val); }
void CAddRequest::setXmlmap(const MemoryBuffer & val){ m_xmlmap->clear().append(val); }
extern "C"  IEspAddRequest *createAddRequest(const char *serv){return ((IEspAddRequest *)new CAddRequest(serv));}
extern "C"  IClientAddRequest *createClientAddRequest(const char *serv){return ((IClientAddRequest *)new CAddRequest(serv));}

//=======================================================
// class CAddResponse Implementation
//=======================================================

CAddResponse::CAddResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CAddResponse::CAddResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddResponse");
}

CAddResponse::CAddResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CAddResponse::CAddResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CAddResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CAddResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CAddResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CAddResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CAddResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CAddResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CAddResponse::copy(CAddResponse &from)
{
}


void CAddResponse::copy(IConstAddResponse &ifrom)
{
}


void CAddResponse::getAttributes(IProperties &attributes)
{
}


void CAddResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CAddResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CAddResponse::serializer(IEspContext* ctx, IConstAddResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<AddResponse>");
	if (keepRootTag)
		buffer.append("</AddResponse>");
}

bool CAddResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CAddResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CAddResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspAddResponse *createAddResponse(const char *serv){return ((IEspAddResponse *)new CAddResponse(serv));}
extern "C"  IClientAddResponse *createClientAddResponse(const char *serv){return ((IClientAddResponse *)new CAddResponse(serv));}

//=======================================================
// class CAddRemoteRequest Implementation
//=======================================================

CAddRemoteRequest::CAddRemoteRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_dstname(nilIgnore),m_srcname(nilIgnore),m_srcdali(nilIgnore),m_srcusername(nilIgnore),m_srcpassword(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CAddRemoteRequest::CAddRemoteRequest(const char *serviceName, const char *bc)
	: m_dstname(nilIgnore),m_srcname(nilIgnore),m_srcdali(nilIgnore),m_srcusername(nilIgnore),m_srcpassword(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteRequest");
}

CAddRemoteRequest::CAddRemoteRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_dstname(nilIgnore),m_srcname(nilIgnore),m_srcdali(nilIgnore),m_srcusername(nilIgnore),m_srcpassword(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CAddRemoteRequest::CAddRemoteRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_dstname(nilIgnore),m_srcname(nilIgnore),m_srcdali(nilIgnore),m_srcusername(nilIgnore),m_srcpassword(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CAddRemoteRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"dstname\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"srcname\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"srcdali\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"srcusername\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"srcpassword\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CAddRemoteRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CAddRemoteRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CAddRemoteRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("dstname");
	form.appendf("  <tr><td><b>dstname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("srcname");
	form.appendf("  <tr><td><b>srcname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("srcdali");
	form.appendf("  <tr><td><b>srcdali: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("srcusername");
	form.appendf("  <tr><td><b>srcusername: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("srcpassword");
	form.appendf("  <tr><td><b>srcpassword: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CAddRemoteRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CAddRemoteRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_dstname.marshall(rpc_resp, "dstname", "", "", "");
	m_srcname.marshall(rpc_resp, "srcname", "", "", "");
	m_srcdali.marshall(rpc_resp, "srcdali", "", "", "");
	m_srcusername.marshall(rpc_resp, "srcusername", "", "", "");
	m_srcpassword.marshall(rpc_resp, "srcpassword", "", "", "");
}


void CAddRemoteRequest::copy(CAddRemoteRequest &from)
{
	m_dstname.copy(from.m_dstname);
	m_srcname.copy(from.m_srcname);
	m_srcdali.copy(from.m_srcdali);
	m_srcusername.copy(from.m_srcusername);
	m_srcpassword.copy(from.m_srcpassword);
}


void CAddRemoteRequest::copy(IConstAddRemoteRequest &ifrom)
{
	setDstname(ifrom.getDstname());
	setSrcname(ifrom.getSrcname());
	setSrcdali(ifrom.getSrcdali());
	setSrcusername(ifrom.getSrcusername());
	setSrcpassword(ifrom.getSrcpassword());
}


void CAddRemoteRequest::getAttributes(IProperties &attributes)
{
}


void CAddRemoteRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_dstname.toStr(ctx, buffer, "dstname", "", true, "", "");
	m_srcname.toStr(ctx, buffer, "srcname", "", true, "", "");
	m_srcdali.toStr(ctx, buffer, "srcdali", "", true, "", "");
	m_srcusername.toStr(ctx, buffer, "srcusername", "", true, "", "");
	m_srcpassword.toStr(ctx, buffer, "srcpassword", "", true, "", "");
}


void CAddRemoteRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CAddRemoteRequest::serializer(IEspContext* ctx, IConstAddRemoteRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<AddRemoteRequest>");
	// field dstname
	{
		const char* s = src.getDstname();
		if (s && *s)
		{
			buffer.append("<dstname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</dstname>");
		}
	}
	// field srcname
	{
		const char* s = src.getSrcname();
		if (s && *s)
		{
			buffer.append("<srcname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</srcname>");
		}
	}
	// field srcdali
	{
		const char* s = src.getSrcdali();
		if (s && *s)
		{
			buffer.append("<srcdali>");
			encodeUtf8XML(s,buffer);
			buffer.append("</srcdali>");
		}
	}
	// field srcusername
	{
		const char* s = src.getSrcusername();
		if (s && *s)
		{
			buffer.append("<srcusername>");
			encodeUtf8XML(s,buffer);
			buffer.append("</srcusername>");
		}
	}
	// field srcpassword
	{
		const char* s = src.getSrcpassword();
		if (s && *s)
		{
			buffer.append("<srcpassword>");
			encodeUtf8XML(s,buffer);
			buffer.append("</srcpassword>");
		}
	}
	if (keepRootTag)
		buffer.append("</AddRemoteRequest>");
}

bool CAddRemoteRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_dstname.unmarshall(rpc_request, "dstname", basepath);
	hasValue |= m_srcname.unmarshall(rpc_request, "srcname", basepath);
	hasValue |= m_srcdali.unmarshall(rpc_request, "srcdali", basepath);
	hasValue |= m_srcusername.unmarshall(rpc_request, "srcusername", basepath);
	hasValue |= m_srcpassword.unmarshall(rpc_request, "srcpassword", basepath);
	return hasValue;
}

bool CAddRemoteRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_dstname.unmarshall(ctx, soapval, "dstname");
	hasValue |= m_srcname.unmarshall(ctx, soapval, "srcname");
	hasValue |= m_srcdali.unmarshall(ctx, soapval, "srcdali");
	hasValue |= m_srcusername.unmarshall(ctx, soapval, "srcusername");
	hasValue |= m_srcpassword.unmarshall(ctx, soapval, "srcpassword");
	return hasValue;
}

bool CAddRemoteRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_dstname.unmarshall(ctx, params, attachments, "dstname", basepath);
	hasValue |= m_srcname.unmarshall(ctx, params, attachments, "srcname", basepath);
	hasValue |= m_srcdali.unmarshall(ctx, params, attachments, "srcdali", basepath);
	hasValue |= m_srcusername.unmarshall(ctx, params, attachments, "srcusername", basepath);
	hasValue |= m_srcpassword.unmarshall(ctx, params, attachments, "srcpassword", basepath);
	return hasValue;
}

const char * CAddRemoteRequest::getDstname() { return m_dstname.query();}
const char * CAddRemoteRequest::getSrcname() { return m_srcname.query();}
const char * CAddRemoteRequest::getSrcdali() { return m_srcdali.query();}
const char * CAddRemoteRequest::getSrcusername() { return m_srcusername.query();}
const char * CAddRemoteRequest::getSrcpassword() { return m_srcpassword.query();}
void CAddRemoteRequest::setDstname(const char * val){ m_dstname.set(val); }
void CAddRemoteRequest::setSrcname(const char * val){ m_srcname.set(val); }
void CAddRemoteRequest::setSrcdali(const char * val){ m_srcdali.set(val); }
void CAddRemoteRequest::setSrcusername(const char * val){ m_srcusername.set(val); }
void CAddRemoteRequest::setSrcpassword(const char * val){ m_srcpassword.set(val); }
extern "C"  IEspAddRemoteRequest *createAddRemoteRequest(const char *serv){return ((IEspAddRemoteRequest *)new CAddRemoteRequest(serv));}
extern "C"  IClientAddRemoteRequest *createClientAddRemoteRequest(const char *serv){return ((IClientAddRemoteRequest *)new CAddRemoteRequest(serv));}

//=======================================================
// class CAddRemoteResponse Implementation
//=======================================================

CAddRemoteResponse::CAddRemoteResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CAddRemoteResponse::CAddRemoteResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteResponse");
}

CAddRemoteResponse::CAddRemoteResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CAddRemoteResponse::CAddRemoteResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("AddRemoteResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CAddRemoteResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CAddRemoteResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CAddRemoteResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CAddRemoteResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CAddRemoteResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CAddRemoteResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CAddRemoteResponse::copy(CAddRemoteResponse &from)
{
}


void CAddRemoteResponse::copy(IConstAddRemoteResponse &ifrom)
{
}


void CAddRemoteResponse::getAttributes(IProperties &attributes)
{
}


void CAddRemoteResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CAddRemoteResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CAddRemoteResponse::serializer(IEspContext* ctx, IConstAddRemoteResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<AddRemoteResponse>");
	if (keepRootTag)
		buffer.append("</AddRemoteResponse>");
}

bool CAddRemoteResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CAddRemoteResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CAddRemoteResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspAddRemoteResponse *createAddRemoteResponse(const char *serv){return ((IEspAddRemoteResponse *)new CAddRemoteResponse(serv));}
extern "C"  IClientAddRemoteResponse *createClientAddRemoteResponse(const char *serv){return ((IClientAddRemoteResponse *)new CAddRemoteResponse(serv));}

//=======================================================
// class CDFUSpaceRequest Implementation
//=======================================================

CDFUSpaceRequest::CDFUSpaceRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUSpaceRequest::CDFUSpaceRequest(const char *serviceName, const char *bc)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceRequest");
}

CDFUSpaceRequest::CDFUSpaceRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUSpaceRequest::CDFUSpaceRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUSpaceRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"CountBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeUnder\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"OwnerUnder\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Interval\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUSpaceRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUSpaceRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUSpaceRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CountBy");
	form.appendf("  <tr><td><b>CountBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeUnder");
	form.appendf("  <tr><td><b>ScopeUnder: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OwnerUnder");
	form.appendf("  <tr><td><b>OwnerUnder: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Interval");
	form.appendf("  <tr><td><b>Interval: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUSpaceRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUSpaceRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_CountBy.marshall(rpc_resp, "CountBy", "", "", "");
	m_ScopeUnder.marshall(rpc_resp, "ScopeUnder", "", "", "");
	m_OwnerUnder.marshall(rpc_resp, "OwnerUnder", "", "", "");
	m_Interval.marshall(rpc_resp, "Interval", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
}


void CDFUSpaceRequest::copy(CDFUSpaceRequest &from)
{
	m_CountBy.copy(from.m_CountBy);
	m_ScopeUnder.copy(from.m_ScopeUnder);
	m_OwnerUnder.copy(from.m_OwnerUnder);
	m_Interval.copy(from.m_Interval);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
}


void CDFUSpaceRequest::copy(IConstDFUSpaceRequest &ifrom)
{
	setCountBy(ifrom.getCountBy());
	setScopeUnder(ifrom.getScopeUnder());
	setOwnerUnder(ifrom.getOwnerUnder());
	setInterval(ifrom.getInterval());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
}


void CDFUSpaceRequest::getAttributes(IProperties &attributes)
{
}


void CDFUSpaceRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_CountBy.toStr(ctx, buffer, "CountBy", "", true, "", "");
	m_ScopeUnder.toStr(ctx, buffer, "ScopeUnder", "", true, "", "");
	m_OwnerUnder.toStr(ctx, buffer, "OwnerUnder", "", true, "", "");
	m_Interval.toStr(ctx, buffer, "Interval", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
}


void CDFUSpaceRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUSpaceRequest::serializer(IEspContext* ctx, IConstDFUSpaceRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUSpaceRequest>");
	// field CountBy
	{
		const char* s = src.getCountBy();
		if (s && *s)
		{
			buffer.append("<CountBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CountBy>");
		}
	}
	// field ScopeUnder
	{
		const char* s = src.getScopeUnder();
		if (s && *s)
		{
			buffer.append("<ScopeUnder>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ScopeUnder>");
		}
	}
	// field OwnerUnder
	{
		const char* s = src.getOwnerUnder();
		if (s && *s)
		{
			buffer.append("<OwnerUnder>");
			encodeUtf8XML(s,buffer);
			buffer.append("</OwnerUnder>");
		}
	}
	// field Interval
	{
		const char* s = src.getInterval();
		if (s && *s)
		{
			buffer.append("<Interval>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Interval>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUSpaceRequest>");
}

bool CDFUSpaceRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_CountBy.unmarshall(rpc_request, "CountBy", basepath);
	hasValue |= m_ScopeUnder.unmarshall(rpc_request, "ScopeUnder", basepath);
	hasValue |= m_OwnerUnder.unmarshall(rpc_request, "OwnerUnder", basepath);
	hasValue |= m_Interval.unmarshall(rpc_request, "Interval", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	return hasValue;
}

bool CDFUSpaceRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_CountBy.unmarshall(ctx, soapval, "CountBy");
	hasValue |= m_ScopeUnder.unmarshall(ctx, soapval, "ScopeUnder");
	hasValue |= m_OwnerUnder.unmarshall(ctx, soapval, "OwnerUnder");
	hasValue |= m_Interval.unmarshall(ctx, soapval, "Interval");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	return hasValue;
}

bool CDFUSpaceRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_CountBy.unmarshall(ctx, params, attachments, "CountBy", basepath);
	hasValue |= m_ScopeUnder.unmarshall(ctx, params, attachments, "ScopeUnder", basepath);
	hasValue |= m_OwnerUnder.unmarshall(ctx, params, attachments, "OwnerUnder", basepath);
	hasValue |= m_Interval.unmarshall(ctx, params, attachments, "Interval", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	return hasValue;
}

const char * CDFUSpaceRequest::getCountBy() { return m_CountBy.query();}
const char * CDFUSpaceRequest::getScopeUnder() { return m_ScopeUnder.query();}
const char * CDFUSpaceRequest::getOwnerUnder() { return m_OwnerUnder.query();}
const char * CDFUSpaceRequest::getInterval() { return m_Interval.query();}
const char * CDFUSpaceRequest::getStartDate() { return m_StartDate.query();}
const char * CDFUSpaceRequest::getEndDate() { return m_EndDate.query();}
void CDFUSpaceRequest::setCountBy(const char * val){ m_CountBy.set(val); }
void CDFUSpaceRequest::setScopeUnder(const char * val){ m_ScopeUnder.set(val); }
void CDFUSpaceRequest::setOwnerUnder(const char * val){ m_OwnerUnder.set(val); }
void CDFUSpaceRequest::setInterval(const char * val){ m_Interval.set(val); }
void CDFUSpaceRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CDFUSpaceRequest::setEndDate(const char * val){ m_EndDate.set(val); }
extern "C"  IEspDFUSpaceRequest *createDFUSpaceRequest(const char *serv){return ((IEspDFUSpaceRequest *)new CDFUSpaceRequest(serv));}
extern "C"  IClientDFUSpaceRequest *createClientDFUSpaceRequest(const char *serv){return ((IClientDFUSpaceRequest *)new CDFUSpaceRequest(serv));}

//=======================================================
// class CDFUSpaceResponse Implementation
//=======================================================

CDFUSpaceResponse::CDFUSpaceResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_DFUSpaceItems(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUSpaceResponse::CDFUSpaceResponse(const char *serviceName, const char *bc)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_DFUSpaceItems(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceResponse");
}

CDFUSpaceResponse::CDFUSpaceResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_DFUSpaceItems(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUSpaceResponse::CDFUSpaceResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_CountBy(nilIgnore),m_ScopeUnder(nilIgnore),m_OwnerUnder(nilIgnore),m_Interval(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_DFUSpaceItems(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSpaceResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUSpaceResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"CountBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeUnder\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"OwnerUnder\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Interval\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUSpaceItems\" type=\"tns:ArrayOfDFUSpaceItem\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUSpaceItem::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUSpaceItem") && added.getValue("ArrayOfDFUSpaceItem")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUSpaceItem\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUSpaceItem\" type=\"tns:DFUSpaceItem\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUSpaceItem",1);
	}
	return schema;
}

void CDFUSpaceResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUSpaceResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUSpaceItem"))
	{
		added.setValue("DFUSpaceItem",1);
		CDFUSpaceItem::getMapInfo(info,added);
	}
}

StringBuffer &CDFUSpaceResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CountBy");
	form.appendf("  <tr><td><b>CountBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeUnder");
	form.appendf("  <tr><td><b>ScopeUnder: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OwnerUnder");
	form.appendf("  <tr><td><b>OwnerUnder: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Interval");
	form.appendf("  <tr><td><b>Interval: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUSpaceItems");
	form.appendf("<tr><td><b>DFUSpaceItems: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUSpaceResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUSpaceResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_CountBy.marshall(rpc_resp, "CountBy", "", "", "");
		m_ScopeUnder.marshall(rpc_resp, "ScopeUnder", "", "", "");
		m_OwnerUnder.marshall(rpc_resp, "OwnerUnder", "", "", "");
		m_Interval.marshall(rpc_resp, "Interval", "", "", "");
		m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
		m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
		m_DFUSpaceItems.marshall(rpc_resp, "DFUSpaceItems", "DFUSpaceItem");
	}
}


void CDFUSpaceResponse::copy(CDFUSpaceResponse &from)
{
	m_CountBy.copy(from.m_CountBy);
	m_ScopeUnder.copy(from.m_ScopeUnder);
	m_OwnerUnder.copy(from.m_OwnerUnder);
	m_Interval.copy(from.m_Interval);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_DFUSpaceItems.copy(from.m_DFUSpaceItems);
}


void CDFUSpaceResponse::copy(IConstDFUSpaceResponse &ifrom)
{
	setCountBy(ifrom.getCountBy());
	setScopeUnder(ifrom.getScopeUnder());
	setOwnerUnder(ifrom.getOwnerUnder());
	setInterval(ifrom.getInterval());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setDFUSpaceItems(ifrom.getDFUSpaceItems());
}


void CDFUSpaceResponse::getAttributes(IProperties &attributes)
{
}


void CDFUSpaceResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_CountBy.toStr(ctx, buffer, "CountBy", "", true, "", "");
		m_ScopeUnder.toStr(ctx, buffer, "ScopeUnder", "", true, "", "");
		m_OwnerUnder.toStr(ctx, buffer, "OwnerUnder", "", true, "", "");
		m_Interval.toStr(ctx, buffer, "Interval", "", true, "", "");
		m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
		m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
		m_DFUSpaceItems.toStr(ctx, buffer, "DFUSpaceItems", "DFUSpaceItem");
	}
}


void CDFUSpaceResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUSpaceResponse::serializer(IEspContext* ctx, IConstDFUSpaceResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUSpaceResponse>");
	// field CountBy
	{
		const char* s = src.getCountBy();
		if (s && *s)
		{
			buffer.append("<CountBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CountBy>");
		}
	}
	// field ScopeUnder
	{
		const char* s = src.getScopeUnder();
		if (s && *s)
		{
			buffer.append("<ScopeUnder>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ScopeUnder>");
		}
	}
	// field OwnerUnder
	{
		const char* s = src.getOwnerUnder();
		if (s && *s)
		{
			buffer.append("<OwnerUnder>");
			encodeUtf8XML(s,buffer);
			buffer.append("</OwnerUnder>");
		}
	}
	// field Interval
	{
		const char* s = src.getInterval();
		if (s && *s)
		{
			buffer.append("<Interval>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Interval>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field DFUSpaceItems
	{
		IArrayOf<IConstDFUSpaceItem>& v = src.getDFUSpaceItems();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUSpaceItems>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUSpaceItem::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUSpaceItems>");
	}
	if (keepRootTag)
		buffer.append("</DFUSpaceResponse>");
}

bool CDFUSpaceResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_CountBy.unmarshall(rpc_request, "CountBy", basepath);
		hasValue |= m_ScopeUnder.unmarshall(rpc_request, "ScopeUnder", basepath);
		hasValue |= m_OwnerUnder.unmarshall(rpc_request, "OwnerUnder", basepath);
		hasValue |= m_Interval.unmarshall(rpc_request, "Interval", basepath);
		hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
		hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
		hasValue |= m_DFUSpaceItems.unmarshall(rpc_request, "DFUSpaceItems", basepath);
	}
	return hasValue;
}

bool CDFUSpaceResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_CountBy.unmarshall(ctx, soapval, "CountBy");
	hasValue |= m_ScopeUnder.unmarshall(ctx, soapval, "ScopeUnder");
	hasValue |= m_OwnerUnder.unmarshall(ctx, soapval, "OwnerUnder");
	hasValue |= m_Interval.unmarshall(ctx, soapval, "Interval");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_DFUSpaceItems.unmarshall(ctx, soapval, "DFUSpaceItems");
	return hasValue;
}

bool CDFUSpaceResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_CountBy.unmarshall(ctx, params, attachments, "CountBy", basepath);
	hasValue |= m_ScopeUnder.unmarshall(ctx, params, attachments, "ScopeUnder", basepath);
	hasValue |= m_OwnerUnder.unmarshall(ctx, params, attachments, "OwnerUnder", basepath);
	hasValue |= m_Interval.unmarshall(ctx, params, attachments, "Interval", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_DFUSpaceItems.unmarshall(ctx, params, attachments, "DFUSpaceItems", basepath);
	return hasValue;
}

const char * CDFUSpaceResponse::getCountBy() { return m_CountBy.query();}
const char * CDFUSpaceResponse::getScopeUnder() { return m_ScopeUnder.query();}
const char * CDFUSpaceResponse::getOwnerUnder() { return m_OwnerUnder.query();}
const char * CDFUSpaceResponse::getInterval() { return m_Interval.query();}
const char * CDFUSpaceResponse::getStartDate() { return m_StartDate.query();}
const char * CDFUSpaceResponse::getEndDate() { return m_EndDate.query();}
IArrayOf<IConstDFUSpaceItem> & CDFUSpaceResponse::getDFUSpaceItems() { return (IArrayOf<IConstDFUSpaceItem> &) m_DFUSpaceItems; }
void CDFUSpaceResponse::setCountBy(const char * val){ m_CountBy.set(val); }
void CDFUSpaceResponse::setScopeUnder(const char * val){ m_ScopeUnder.set(val); }
void CDFUSpaceResponse::setOwnerUnder(const char * val){ m_OwnerUnder.set(val); }
void CDFUSpaceResponse::setInterval(const char * val){ m_Interval.set(val); }
void CDFUSpaceResponse::setStartDate(const char * val){ m_StartDate.set(val); }
void CDFUSpaceResponse::setEndDate(const char * val){ m_EndDate.set(val); }
void CDFUSpaceResponse::setDFUSpaceItems(IArrayOf<IEspDFUSpaceItem> &val)
{
	m_DFUSpaceItems->kill();
	IArrayOf<IConstDFUSpaceItem> &target = m_DFUSpaceItems.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUSpaceItem &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSpaceResponse::setDFUSpaceItems(IArrayOf<IConstDFUSpaceItem> &val)
{
	m_DFUSpaceItems->kill();
	IArrayOf<IConstDFUSpaceItem> &target = m_DFUSpaceItems.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUSpaceItem &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspDFUSpaceResponse *createDFUSpaceResponse(const char *serv){return ((IEspDFUSpaceResponse *)new CDFUSpaceResponse(serv));}
extern "C"  IClientDFUSpaceResponse *createClientDFUSpaceResponse(const char *serv){return ((IClientDFUSpaceResponse *)new CDFUSpaceResponse(serv));}

//=======================================================
// class CDFUFileViewRequest Implementation
//=======================================================

CDFUFileViewRequest::CDFUFileViewRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Scope(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileViewRequest::CDFUFileViewRequest(const char *serviceName, const char *bc)
	: m_Scope(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewRequest");
}

CDFUFileViewRequest::CDFUFileViewRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Scope(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileViewRequest::CDFUFileViewRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Scope(nilRemove),m_IncludeSuperOwner(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileViewRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scope\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFileViewRequest","IncludeSuperOwner")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IncludeSuperOwner\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUFileViewRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileViewRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUFileViewRequest","IncludeSuperOwner",1.35);
}

StringBuffer &CDFUFileViewRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scope");
	form.appendf("  <tr><td><b>Scope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFileViewRequest","IncludeSuperOwner")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeSuperOwner");
		
	form.appendf("  <tr><td><b>IncludeSuperOwner? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileViewRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileViewRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Scope.marshall(rpc_resp, "Scope", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.35))
		m_IncludeSuperOwner.marshall(rpc_resp, "IncludeSuperOwner", "", "", "");
}


void CDFUFileViewRequest::copy(CDFUFileViewRequest &from)
{
	m_Scope.copy(from.m_Scope);
	m_IncludeSuperOwner.copy(from.m_IncludeSuperOwner);
}


void CDFUFileViewRequest::copy(IConstDFUFileViewRequest &ifrom)
{
	setScope(ifrom.getScope());
	setIncludeSuperOwner(ifrom.getIncludeSuperOwner());
}


void CDFUFileViewRequest::getAttributes(IProperties &attributes)
{
}


void CDFUFileViewRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Scope.toStr(ctx, buffer, "Scope", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.35))
		m_IncludeSuperOwner.toStr(ctx, buffer, "IncludeSuperOwner", "", true, "", "");
}


void CDFUFileViewRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileViewRequest::serializer(IEspContext* ctx, IConstDFUFileViewRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileViewRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Scope
	{
		const char* s = src.getScope();
		if (s && *s)
		{
			buffer.append("<Scope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Scope>");
		}
	}
	// field IncludeSuperOwner
	if ((clientVer==-1.0 || clientVer>=1.35))
	{
		bool b = src.getIncludeSuperOwner();
		if (b)
			buffer.appendf("<IncludeSuperOwner>1</IncludeSuperOwner>");
	}
	if (keepRootTag)
		buffer.append("</DFUFileViewRequest>");
}

bool CDFUFileViewRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Scope.unmarshall(rpc_request, "Scope", basepath);
	hasValue |= m_IncludeSuperOwner.unmarshall(rpc_request, "IncludeSuperOwner", basepath);
	return hasValue;
}

bool CDFUFileViewRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Scope.unmarshall(ctx, soapval, "Scope");
	hasValue |= m_IncludeSuperOwner.unmarshall(ctx, soapval, "IncludeSuperOwner");
	return hasValue;
}

bool CDFUFileViewRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Scope.unmarshall(ctx, params, attachments, "Scope", basepath);
	hasValue |= m_IncludeSuperOwner.unmarshall(ctx, params, attachments, "IncludeSuperOwner", basepath);
	return hasValue;
}

const char * CDFUFileViewRequest::getScope() { return m_Scope.query();}
bool CDFUFileViewRequest::getIncludeSuperOwner_isNull(){return m_IncludeSuperOwner.is_nil();}
bool CDFUFileViewRequest::getIncludeSuperOwner() { return m_IncludeSuperOwner;}
void CDFUFileViewRequest::setScope(const char * val){ m_Scope.set(val); }
void CDFUFileViewRequest::setIncludeSuperOwner_null(){ m_IncludeSuperOwner.Nil(); }void CDFUFileViewRequest::setIncludeSuperOwner(bool val){ m_IncludeSuperOwner=val; }
extern "C"  IEspDFUFileViewRequest *createDFUFileViewRequest(const char *serv){return ((IEspDFUFileViewRequest *)new CDFUFileViewRequest(serv));}
extern "C"  IClientDFUFileViewRequest *createClientDFUFileViewRequest(const char *serv){return ((IClientDFUFileViewRequest *)new CDFUFileViewRequest(serv));}

//=======================================================
// class CDFUFileViewResponse Implementation
//=======================================================

CDFUFileViewResponse::CDFUFileViewResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Scope(nilIgnore),m_NumFiles(0, nilIgnore,false),m_DFULogicalFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileViewResponse::CDFUFileViewResponse(const char *serviceName, const char *bc)
	: m_Scope(nilIgnore),m_NumFiles(0, nilIgnore,false),m_DFULogicalFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewResponse");
}

CDFUFileViewResponse::CDFUFileViewResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Scope(nilIgnore),m_NumFiles(0, nilIgnore,false),m_DFULogicalFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileViewResponse::CDFUFileViewResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Scope(nilIgnore),m_NumFiles(0, nilIgnore,false),m_DFULogicalFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileViewResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileViewResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scope\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumFiles\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFULogicalFiles\" type=\"tns:ArrayOfDFULogicalFile\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFULogicalFile::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFULogicalFile") && added.getValue("ArrayOfDFULogicalFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFULogicalFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFULogicalFile\" type=\"tns:DFULogicalFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFULogicalFile",1);
	}
	return schema;
}

void CDFUFileViewResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileViewResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFULogicalFile"))
	{
		added.setValue("DFULogicalFile",1);
		CDFULogicalFile::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileViewResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scope");
	form.appendf("  <tr><td><b>Scope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumFiles");
	form.appendf("  <tr><td><b>NumFiles: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFULogicalFiles");
	form.appendf("<tr><td><b>DFULogicalFiles: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileViewResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileViewResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Scope.marshall(rpc_resp, "Scope", "", "", "");
		m_NumFiles.marshall(rpc_resp, "NumFiles", "", "", "");
		m_DFULogicalFiles.marshall(rpc_resp, "DFULogicalFiles", "DFULogicalFile");
	}
}


void CDFUFileViewResponse::copy(CDFUFileViewResponse &from)
{
	m_Scope.copy(from.m_Scope);
	m_NumFiles.copy(from.m_NumFiles);
	m_DFULogicalFiles.copy(from.m_DFULogicalFiles);
}


void CDFUFileViewResponse::copy(IConstDFUFileViewResponse &ifrom)
{
	setScope(ifrom.getScope());
	setNumFiles(ifrom.getNumFiles());
	setDFULogicalFiles(ifrom.getDFULogicalFiles());
}


void CDFUFileViewResponse::getAttributes(IProperties &attributes)
{
}


void CDFUFileViewResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Scope.toStr(ctx, buffer, "Scope", "", true, "", "");
		m_NumFiles.toStr(ctx, buffer, "NumFiles", "", true, "", "");
		m_DFULogicalFiles.toStr(ctx, buffer, "DFULogicalFiles", "DFULogicalFile");
	}
}


void CDFUFileViewResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileViewResponse::serializer(IEspContext* ctx, IConstDFUFileViewResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileViewResponse>");
	// field Scope
	{
		const char* s = src.getScope();
		if (s && *s)
		{
			buffer.append("<Scope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Scope>");
		}
	}
	// field NumFiles
	{
		int n = src.getNumFiles();
		if (n)
			buffer.appendf("<NumFiles>%d</NumFiles>", n);
	}
	// field DFULogicalFiles
	{
		IArrayOf<IConstDFULogicalFile>& v = src.getDFULogicalFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<DFULogicalFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFULogicalFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFULogicalFiles>");
	}
	if (keepRootTag)
		buffer.append("</DFUFileViewResponse>");
}

bool CDFUFileViewResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Scope.unmarshall(rpc_request, "Scope", basepath);
		hasValue |= m_NumFiles.unmarshall(rpc_request, "NumFiles", basepath);
		hasValue |= m_DFULogicalFiles.unmarshall(rpc_request, "DFULogicalFiles", basepath);
	}
	return hasValue;
}

bool CDFUFileViewResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Scope.unmarshall(ctx, soapval, "Scope");
	hasValue |= m_NumFiles.unmarshall(ctx, soapval, "NumFiles");
	hasValue |= m_DFULogicalFiles.unmarshall(ctx, soapval, "DFULogicalFiles");
	return hasValue;
}

bool CDFUFileViewResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Scope.unmarshall(ctx, params, attachments, "Scope", basepath);
	hasValue |= m_NumFiles.unmarshall(ctx, params, attachments, "NumFiles", basepath);
	hasValue |= m_DFULogicalFiles.unmarshall(ctx, params, attachments, "DFULogicalFiles", basepath);
	return hasValue;
}

const char * CDFUFileViewResponse::getScope() { return m_Scope.query();}
int CDFUFileViewResponse::getNumFiles() { return m_NumFiles;}
IArrayOf<IConstDFULogicalFile> & CDFUFileViewResponse::getDFULogicalFiles() { return (IArrayOf<IConstDFULogicalFile> &) m_DFULogicalFiles; }
void CDFUFileViewResponse::setScope(const char * val){ m_Scope.set(val); }
void CDFUFileViewResponse::setNumFiles(int val){ m_NumFiles=val; }
void CDFUFileViewResponse::setDFULogicalFiles(IArrayOf<IEspDFULogicalFile> &val)
{
	m_DFULogicalFiles->kill();
	IArrayOf<IConstDFULogicalFile> &target = m_DFULogicalFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFULogicalFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileViewResponse::setDFULogicalFiles(IArrayOf<IConstDFULogicalFile> &val)
{
	m_DFULogicalFiles->kill();
	IArrayOf<IConstDFULogicalFile> &target = m_DFULogicalFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFULogicalFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspDFUFileViewResponse *createDFUFileViewResponse(const char *serv){return ((IEspDFUFileViewResponse *)new CDFUFileViewResponse(serv));}
extern "C"  IClientDFUFileViewResponse *createClientDFUFileViewResponse(const char *serv){return ((IClientDFUFileViewResponse *)new CDFUFileViewResponse(serv));}

//=======================================================
// class CDFUDataColumn Implementation
//=======================================================

CDFUDataColumn::CDFUDataColumn(const char *serviceName, IRpcMessageBinding *init)
	: m_ColumnID(nilRemove),m_ColumnLabel(nilRemove),m_ColumnType(nilRemove),m_ColumnValue(nilRemove),m_ColumnSize(nilRemove),m_MaxSize(nilRemove),m_ColumnEclType(nilRemove),m_ColumnRawSize(nilRemove),m_IsNaturalColumn(nilRemove),m_IsKeyedColumn(nilRemove),m_DataColumns(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDataColumn");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUDataColumn::CDFUDataColumn(const char *serviceName, const char *bc)
	: m_ColumnID(nilRemove),m_ColumnLabel(nilRemove),m_ColumnType(nilRemove),m_ColumnValue(nilRemove),m_ColumnSize(nilRemove),m_MaxSize(nilRemove),m_ColumnEclType(nilRemove),m_ColumnRawSize(nilRemove),m_IsNaturalColumn(nilRemove),m_IsKeyedColumn(nilRemove),m_DataColumns(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUDataColumn");
}

StringBuffer &CDFUDataColumn::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		if (!context.suppressed("DFUDataColumn","ColumnID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnID\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnLabel\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnType\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUDataColumn","ColumnValue")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnValue\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnSize\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxSize\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("DFUDataColumn","ColumnEclType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnEclType\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUDataColumn","ColumnRawSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnRawSize\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUDataColumn","IsNaturalColumn")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsNaturalColumn\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUDataColumn","IsKeyedColumn")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsKeyedColumn\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUDataColumn","DataColumns")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DataColumns\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (added.getValue("DFUDataColumn") && added.getValue("ArrayOfDFUDataColumn")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUDataColumn\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUDataColumn\" type=\"tns:DFUDataColumn\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUDataColumn",1);
	}
	return schema;
}

void CDFUDataColumn::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUDataColumn::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUDataColumn","ColumnID",1.29);
	info.addMinVersion("DFUDataColumn","ColumnValue",1.05);
	info.addMinVersion("DFUDataColumn","ColumnEclType",1.29);
	info.addMinVersion("DFUDataColumn","ColumnRawSize",1.29);
	info.addMinVersion("DFUDataColumn","IsNaturalColumn",1.29);
	info.addMinVersion("DFUDataColumn","IsKeyedColumn",1.29);
	info.addMinVersion("DFUDataColumn","DataColumns",1.31);
}

StringBuffer &CDFUDataColumn::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("DFUDataColumn","ColumnID")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ColumnID");
		form.appendf("  <tr><td><b>ColumnID: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ColumnLabel");
	form.appendf("  <tr><td><b>ColumnLabel: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ColumnType");
	form.appendf("  <tr><td><b>ColumnType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUDataColumn","ColumnValue")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ColumnValue");
		form.appendf("  <tr><td><b>ColumnValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ColumnSize");
	form.appendf("  <tr><td><b>ColumnSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxSize");
	form.appendf("  <tr><td><b>MaxSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUDataColumn","ColumnEclType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ColumnEclType");
		form.appendf("  <tr><td><b>ColumnEclType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUDataColumn","ColumnRawSize")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ColumnRawSize");
		form.appendf("  <tr><td><b>ColumnRawSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUDataColumn","IsNaturalColumn")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsNaturalColumn");
		
	form.appendf("  <tr><td><b>IsNaturalColumn? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUDataColumn","IsKeyedColumn")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsKeyedColumn");
		
	form.appendf("  <tr><td><b>IsKeyedColumn? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUDataColumn","DataColumns")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DataColumns");
		form.appendf("<tr><td><b>DataColumns: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUDataColumn::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUDataColumn::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ColumnID.marshall(rpc_resp, "ColumnID", "", "", "");
	m_ColumnLabel.marshall(rpc_resp, "ColumnLabel", "", "", "");
	m_ColumnType.marshall(rpc_resp, "ColumnType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ColumnValue.marshall(rpc_resp, "ColumnValue", "", "", "");
	m_ColumnSize.marshall(rpc_resp, "ColumnSize", "", "", "");
	m_MaxSize.marshall(rpc_resp, "MaxSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ColumnEclType.marshall(rpc_resp, "ColumnEclType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ColumnRawSize.marshall(rpc_resp, "ColumnRawSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_IsNaturalColumn.marshall(rpc_resp, "IsNaturalColumn", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_IsKeyedColumn.marshall(rpc_resp, "IsKeyedColumn", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_DataColumns.marshall(rpc_resp, "DataColumns", "DFUDataColumn");
}


void CDFUDataColumn::copy(CDFUDataColumn &from)
{
	m_ColumnID.copy(from.m_ColumnID);
	m_ColumnLabel.copy(from.m_ColumnLabel);
	m_ColumnType.copy(from.m_ColumnType);
	m_ColumnValue.copy(from.m_ColumnValue);
	m_ColumnSize.copy(from.m_ColumnSize);
	m_MaxSize.copy(from.m_MaxSize);
	m_ColumnEclType.copy(from.m_ColumnEclType);
	m_ColumnRawSize.copy(from.m_ColumnRawSize);
	m_IsNaturalColumn.copy(from.m_IsNaturalColumn);
	m_IsKeyedColumn.copy(from.m_IsKeyedColumn);
	m_DataColumns.copy(from.m_DataColumns);
}


void CDFUDataColumn::copy(IConstDFUDataColumn &ifrom)
{
	setColumnID(ifrom.getColumnID());
	setColumnLabel(ifrom.getColumnLabel());
	setColumnType(ifrom.getColumnType());
	setColumnValue(ifrom.getColumnValue());
	setColumnSize(ifrom.getColumnSize());
	setMaxSize(ifrom.getMaxSize());
	setColumnEclType(ifrom.getColumnEclType());
	setColumnRawSize(ifrom.getColumnRawSize());
	setIsNaturalColumn(ifrom.getIsNaturalColumn());
	setIsKeyedColumn(ifrom.getIsKeyedColumn());
	setDataColumns(ifrom.getDataColumns());
}


void CDFUDataColumn::getAttributes(IProperties &attributes)
{
}


void CDFUDataColumn::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ColumnID.toStr(ctx, buffer, "ColumnID", "", true, "", "");
	m_ColumnLabel.toStr(ctx, buffer, "ColumnLabel", "", true, "", "");
	m_ColumnType.toStr(ctx, buffer, "ColumnType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ColumnValue.toStr(ctx, buffer, "ColumnValue", "", true, "", "");
	m_ColumnSize.toStr(ctx, buffer, "ColumnSize", "", true, "", "");
	m_MaxSize.toStr(ctx, buffer, "MaxSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ColumnEclType.toStr(ctx, buffer, "ColumnEclType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ColumnRawSize.toStr(ctx, buffer, "ColumnRawSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_IsNaturalColumn.toStr(ctx, buffer, "IsNaturalColumn", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_IsKeyedColumn.toStr(ctx, buffer, "IsKeyedColumn", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_DataColumns.toStr(ctx, buffer, "DataColumns", "DFUDataColumn");
}


void CDFUDataColumn::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUDataColumn::serializer(IEspContext* ctx, IConstDFUDataColumn &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUDataColumn>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field ColumnID
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		int n = src.getColumnID();
		if (n)
			buffer.appendf("<ColumnID>%d</ColumnID>", n);
	}
	// field ColumnLabel
	{
		const char* s = src.getColumnLabel();
		if (s && *s)
		{
			buffer.append("<ColumnLabel>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ColumnLabel>");
		}
	}
	// field ColumnType
	{
		const char* s = src.getColumnType();
		if (s && *s)
		{
			buffer.append("<ColumnType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ColumnType>");
		}
	}
	// field ColumnValue
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getColumnValue();
		if (s && *s)
		{
			buffer.append("<ColumnValue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ColumnValue>");
		}
	}
	// field ColumnSize
	{
		int n = src.getColumnSize();
		if (n)
			buffer.appendf("<ColumnSize>%d</ColumnSize>", n);
	}
	// field MaxSize
	{
		int n = src.getMaxSize();
		if (n)
			buffer.appendf("<MaxSize>%d</MaxSize>", n);
	}
	// field ColumnEclType
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getColumnEclType();
		if (s && *s)
		{
			buffer.append("<ColumnEclType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ColumnEclType>");
		}
	}
	// field ColumnRawSize
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		int n = src.getColumnRawSize();
		if (n)
			buffer.appendf("<ColumnRawSize>%d</ColumnRawSize>", n);
	}
	// field IsNaturalColumn
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		bool b = src.getIsNaturalColumn();
		if (b)
			buffer.appendf("<IsNaturalColumn>1</IsNaturalColumn>");
	}
	// field IsKeyedColumn
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		bool b = src.getIsKeyedColumn();
		if (b)
			buffer.appendf("<IsKeyedColumn>1</IsKeyedColumn>");
	}
	// field DataColumns
	if ((clientVer==-1.0 || clientVer>=1.31))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDataColumns();
		int size = v.length();
		if (size>0)
			buffer.append("<DataColumns>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DataColumns>");
	}
	if (keepRootTag)
		buffer.append("</DFUDataColumn>");
}

bool CDFUDataColumn::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ColumnID.unmarshall(rpc_request, "ColumnID", basepath);
	hasValue |= m_ColumnLabel.unmarshall(rpc_request, "ColumnLabel", basepath);
	hasValue |= m_ColumnType.unmarshall(rpc_request, "ColumnType", basepath);
	hasValue |= m_ColumnValue.unmarshall(rpc_request, "ColumnValue", basepath);
	hasValue |= m_ColumnSize.unmarshall(rpc_request, "ColumnSize", basepath);
	hasValue |= m_MaxSize.unmarshall(rpc_request, "MaxSize", basepath);
	hasValue |= m_ColumnEclType.unmarshall(rpc_request, "ColumnEclType", basepath);
	hasValue |= m_ColumnRawSize.unmarshall(rpc_request, "ColumnRawSize", basepath);
	hasValue |= m_IsNaturalColumn.unmarshall(rpc_request, "IsNaturalColumn", basepath);
	hasValue |= m_IsKeyedColumn.unmarshall(rpc_request, "IsKeyedColumn", basepath);
	hasValue |= m_DataColumns.unmarshall(rpc_request, "DataColumns", basepath);
	return hasValue;
}

bool CDFUDataColumn::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ColumnID.unmarshall(ctx, soapval, "ColumnID");
	hasValue |= m_ColumnLabel.unmarshall(ctx, soapval, "ColumnLabel");
	hasValue |= m_ColumnType.unmarshall(ctx, soapval, "ColumnType");
	hasValue |= m_ColumnValue.unmarshall(ctx, soapval, "ColumnValue");
	hasValue |= m_ColumnSize.unmarshall(ctx, soapval, "ColumnSize");
	hasValue |= m_MaxSize.unmarshall(ctx, soapval, "MaxSize");
	hasValue |= m_ColumnEclType.unmarshall(ctx, soapval, "ColumnEclType");
	hasValue |= m_ColumnRawSize.unmarshall(ctx, soapval, "ColumnRawSize");
	hasValue |= m_IsNaturalColumn.unmarshall(ctx, soapval, "IsNaturalColumn");
	hasValue |= m_IsKeyedColumn.unmarshall(ctx, soapval, "IsKeyedColumn");
	hasValue |= m_DataColumns.unmarshall(ctx, soapval, "DataColumns");
	return hasValue;
}

bool CDFUDataColumn::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ColumnID.unmarshall(ctx, params, attachments, "ColumnID", basepath);
	hasValue |= m_ColumnLabel.unmarshall(ctx, params, attachments, "ColumnLabel", basepath);
	hasValue |= m_ColumnType.unmarshall(ctx, params, attachments, "ColumnType", basepath);
	hasValue |= m_ColumnValue.unmarshall(ctx, params, attachments, "ColumnValue", basepath);
	hasValue |= m_ColumnSize.unmarshall(ctx, params, attachments, "ColumnSize", basepath);
	hasValue |= m_MaxSize.unmarshall(ctx, params, attachments, "MaxSize", basepath);
	hasValue |= m_ColumnEclType.unmarshall(ctx, params, attachments, "ColumnEclType", basepath);
	hasValue |= m_ColumnRawSize.unmarshall(ctx, params, attachments, "ColumnRawSize", basepath);
	hasValue |= m_IsNaturalColumn.unmarshall(ctx, params, attachments, "IsNaturalColumn", basepath);
	hasValue |= m_IsKeyedColumn.unmarshall(ctx, params, attachments, "IsKeyedColumn", basepath);
	hasValue |= m_DataColumns.unmarshall(ctx, params, attachments, "DataColumns", basepath);
	return hasValue;
}

bool CDFUDataColumn::getColumnID_isNull(){return m_ColumnID.is_nil();}
int CDFUDataColumn::getColumnID() { return m_ColumnID;}
const char * CDFUDataColumn::getColumnLabel() { return m_ColumnLabel.query();}
const char * CDFUDataColumn::getColumnType() { return m_ColumnType.query();}
const char * CDFUDataColumn::getColumnValue() { return m_ColumnValue.query();}
bool CDFUDataColumn::getColumnSize_isNull(){return m_ColumnSize.is_nil();}
int CDFUDataColumn::getColumnSize() { return m_ColumnSize;}
bool CDFUDataColumn::getMaxSize_isNull(){return m_MaxSize.is_nil();}
int CDFUDataColumn::getMaxSize() { return m_MaxSize;}
const char * CDFUDataColumn::getColumnEclType() { return m_ColumnEclType.query();}
bool CDFUDataColumn::getColumnRawSize_isNull(){return m_ColumnRawSize.is_nil();}
int CDFUDataColumn::getColumnRawSize() { return m_ColumnRawSize;}
bool CDFUDataColumn::getIsNaturalColumn_isNull(){return m_IsNaturalColumn.is_nil();}
bool CDFUDataColumn::getIsNaturalColumn() { return m_IsNaturalColumn;}
bool CDFUDataColumn::getIsKeyedColumn_isNull(){return m_IsKeyedColumn.is_nil();}
bool CDFUDataColumn::getIsKeyedColumn() { return m_IsKeyedColumn;}
IArrayOf<IConstDFUDataColumn> & CDFUDataColumn::getDataColumns() { return (IArrayOf<IConstDFUDataColumn> &) m_DataColumns; }
void CDFUDataColumn::setColumnID_null(){ m_ColumnID.Nil(); }void CDFUDataColumn::setColumnID(int val){ m_ColumnID=val; }
void CDFUDataColumn::setColumnLabel(const char * val){ m_ColumnLabel.set(val); }
void CDFUDataColumn::setColumnType(const char * val){ m_ColumnType.set(val); }
void CDFUDataColumn::setColumnValue(const char * val){ m_ColumnValue.set(val); }
void CDFUDataColumn::setColumnSize_null(){ m_ColumnSize.Nil(); }void CDFUDataColumn::setColumnSize(int val){ m_ColumnSize=val; }
void CDFUDataColumn::setMaxSize_null(){ m_MaxSize.Nil(); }void CDFUDataColumn::setMaxSize(int val){ m_MaxSize=val; }
void CDFUDataColumn::setColumnEclType(const char * val){ m_ColumnEclType.set(val); }
void CDFUDataColumn::setColumnRawSize_null(){ m_ColumnRawSize.Nil(); }void CDFUDataColumn::setColumnRawSize(int val){ m_ColumnRawSize=val; }
void CDFUDataColumn::setIsNaturalColumn_null(){ m_IsNaturalColumn.Nil(); }void CDFUDataColumn::setIsNaturalColumn(bool val){ m_IsNaturalColumn=val; }
void CDFUDataColumn::setIsKeyedColumn_null(){ m_IsKeyedColumn.Nil(); }void CDFUDataColumn::setIsKeyedColumn(bool val){ m_IsKeyedColumn=val; }
void CDFUDataColumn::setDataColumns(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DataColumns->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DataColumns.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUDataColumn::setDataColumns(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DataColumns->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DataColumns.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspDFUDataColumn *createDFUDataColumn(const char *serv, const char *msgname){return ((IEspDFUDataColumn *)new CDFUDataColumn(serv /*, msgname*/));}
extern "C"  IClientDFUDataColumn *createClientDFUDataColumn(const char *serv, const char *msgname){return ((IClientDFUDataColumn *)new CDFUDataColumn(serv /*, msgname*/));}

//=======================================================
// class CDFUGetDataColumnsRequest Implementation
//=======================================================

CDFUGetDataColumnsRequest::CDFUGetDataColumnsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_OpenLogicalName(nilIgnore),m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUGetDataColumnsRequest::CDFUGetDataColumnsRequest(const char *serviceName, const char *bc)
	: m_OpenLogicalName(nilIgnore),m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsRequest");
}

CDFUGetDataColumnsRequest::CDFUGetDataColumnsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_OpenLogicalName(nilIgnore),m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUGetDataColumnsRequest::CDFUGetDataColumnsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_OpenLogicalName(nilIgnore),m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUGetDataColumnsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"OpenLogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUGetDataColumnsRequest","FilterBy")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FilterBy\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsRequest","ShowColumns")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ShowColumns\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsRequest","ChooseFile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ChooseFile\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsRequest","Cluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsRequest","ClusterType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterType\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartIndex\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndIndex\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUGetDataColumnsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUGetDataColumnsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUGetDataColumnsRequest","FilterBy",1.05);
	info.addMinVersion("DFUGetDataColumnsRequest","ShowColumns",1.05);
	info.addMinVersion("DFUGetDataColumnsRequest","ChooseFile",1.1);
	info.addMinVersion("DFUGetDataColumnsRequest","Cluster",1.12);
	info.addMinVersion("DFUGetDataColumnsRequest","ClusterType",1.12);
}

StringBuffer &CDFUGetDataColumnsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OpenLogicalName");
	form.appendf("  <tr><td><b>OpenLogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUGetDataColumnsRequest","FilterBy")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FilterBy");
		form.appendf("  <tr><td><b>FilterBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUGetDataColumnsRequest","ShowColumns")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ShowColumns");
		form.appendf("  <tr><td><b>ShowColumns: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUGetDataColumnsRequest","ChooseFile")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ChooseFile");
		form.appendf("  <tr><td><b>ChooseFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUGetDataColumnsRequest","Cluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Cluster");
		form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUGetDataColumnsRequest","ClusterType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterType");
		form.appendf("  <tr><td><b>ClusterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartIndex");
	form.appendf("  <tr><td><b>StartIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndIndex");
	form.appendf("  <tr><td><b>EndIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUGetDataColumnsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUGetDataColumnsRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_OpenLogicalName.marshall(rpc_resp, "OpenLogicalName", "", "", "");
	m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_FilterBy.marshall(rpc_resp, "FilterBy", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ShowColumns.marshall(rpc_resp, "ShowColumns", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_ChooseFile.marshall(rpc_resp, "ChooseFile", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_ClusterType.marshall(rpc_resp, "ClusterType", "", "", "");
	m_StartIndex.marshall(rpc_resp, "StartIndex", "", "", "");
	m_EndIndex.marshall(rpc_resp, "EndIndex", "", "", "");
}


void CDFUGetDataColumnsRequest::copy(CDFUGetDataColumnsRequest &from)
{
	m_OpenLogicalName.copy(from.m_OpenLogicalName);
	m_LogicalName.copy(from.m_LogicalName);
	m_FilterBy.copy(from.m_FilterBy);
	m_ShowColumns.copy(from.m_ShowColumns);
	m_ChooseFile.copy(from.m_ChooseFile);
	m_Cluster.copy(from.m_Cluster);
	m_ClusterType.copy(from.m_ClusterType);
	m_StartIndex.copy(from.m_StartIndex);
	m_EndIndex.copy(from.m_EndIndex);
}


void CDFUGetDataColumnsRequest::copy(IConstDFUGetDataColumnsRequest &ifrom)
{
	setOpenLogicalName(ifrom.getOpenLogicalName());
	setLogicalName(ifrom.getLogicalName());
	setFilterBy(ifrom.getFilterBy());
	setShowColumns(ifrom.getShowColumns());
	setChooseFile(ifrom.getChooseFile());
	setCluster(ifrom.getCluster());
	setClusterType(ifrom.getClusterType());
	setStartIndex(ifrom.getStartIndex());
	setEndIndex(ifrom.getEndIndex());
}


void CDFUGetDataColumnsRequest::getAttributes(IProperties &attributes)
{
}


void CDFUGetDataColumnsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_OpenLogicalName.toStr(ctx, buffer, "OpenLogicalName", "", true, "", "");
	m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_FilterBy.toStr(ctx, buffer, "FilterBy", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ShowColumns.toStr(ctx, buffer, "ShowColumns", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_ChooseFile.toStr(ctx, buffer, "ChooseFile", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_ClusterType.toStr(ctx, buffer, "ClusterType", "", true, "", "");
	m_StartIndex.toStr(ctx, buffer, "StartIndex", "", true, "", "");
	m_EndIndex.toStr(ctx, buffer, "EndIndex", "", true, "", "");
}


void CDFUGetDataColumnsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUGetDataColumnsRequest::serializer(IEspContext* ctx, IConstDFUGetDataColumnsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUGetDataColumnsRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field OpenLogicalName
	{
		const char* s = src.getOpenLogicalName();
		if (s && *s)
		{
			buffer.append("<OpenLogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</OpenLogicalName>");
		}
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field FilterBy
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getFilterBy();
		if (s && *s)
		{
			buffer.append("<FilterBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FilterBy>");
		}
	}
	// field ShowColumns
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getShowColumns();
		if (s && *s)
		{
			buffer.append("<ShowColumns>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowColumns>");
		}
	}
	// field ChooseFile
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		int n = src.getChooseFile();
		if (n)
			buffer.appendf("<ChooseFile>%d</ChooseFile>", n);
	}
	// field Cluster
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field ClusterType
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getClusterType();
		if (s && *s)
		{
			buffer.append("<ClusterType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterType>");
		}
	}
	// field StartIndex
	{
		//*** default kind: TK_INT; type=int64, name=StartIndex
		buffer.append("<StartIndex>");
		buffer.append(src.getStartIndex());
		buffer.append("</StartIndex>");
	}
	// field EndIndex
	{
		//*** default kind: TK_INT; type=int64, name=EndIndex
		buffer.append("<EndIndex>");
		buffer.append(src.getEndIndex());
		buffer.append("</EndIndex>");
	}
	if (keepRootTag)
		buffer.append("</DFUGetDataColumnsRequest>");
}

bool CDFUGetDataColumnsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_OpenLogicalName.unmarshall(rpc_request, "OpenLogicalName", basepath);
	hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
	hasValue |= m_FilterBy.unmarshall(rpc_request, "FilterBy", basepath);
	hasValue |= m_ShowColumns.unmarshall(rpc_request, "ShowColumns", basepath);
	hasValue |= m_ChooseFile.unmarshall(rpc_request, "ChooseFile", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(rpc_request, "ClusterType", basepath);
	hasValue |= m_StartIndex.unmarshall(rpc_request, "StartIndex", basepath);
	hasValue |= m_EndIndex.unmarshall(rpc_request, "EndIndex", basepath);
	return hasValue;
}

bool CDFUGetDataColumnsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_OpenLogicalName.unmarshall(ctx, soapval, "OpenLogicalName");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_FilterBy.unmarshall(ctx, soapval, "FilterBy");
	hasValue |= m_ShowColumns.unmarshall(ctx, soapval, "ShowColumns");
	hasValue |= m_ChooseFile.unmarshall(ctx, soapval, "ChooseFile");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_ClusterType.unmarshall(ctx, soapval, "ClusterType");
	hasValue |= m_StartIndex.unmarshall(ctx, soapval, "StartIndex");
	hasValue |= m_EndIndex.unmarshall(ctx, soapval, "EndIndex");
	return hasValue;
}

bool CDFUGetDataColumnsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_OpenLogicalName.unmarshall(ctx, params, attachments, "OpenLogicalName", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_FilterBy.unmarshall(ctx, params, attachments, "FilterBy", basepath);
	hasValue |= m_ShowColumns.unmarshall(ctx, params, attachments, "ShowColumns", basepath);
	hasValue |= m_ChooseFile.unmarshall(ctx, params, attachments, "ChooseFile", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(ctx, params, attachments, "ClusterType", basepath);
	hasValue |= m_StartIndex.unmarshall(ctx, params, attachments, "StartIndex", basepath);
	hasValue |= m_EndIndex.unmarshall(ctx, params, attachments, "EndIndex", basepath);
	return hasValue;
}

const char * CDFUGetDataColumnsRequest::getOpenLogicalName() { return m_OpenLogicalName.query();}
const char * CDFUGetDataColumnsRequest::getLogicalName() { return m_LogicalName.query();}
const char * CDFUGetDataColumnsRequest::getFilterBy() { return m_FilterBy.query();}
const char * CDFUGetDataColumnsRequest::getShowColumns() { return m_ShowColumns.query();}
int CDFUGetDataColumnsRequest::getChooseFile() { return m_ChooseFile;}
const char * CDFUGetDataColumnsRequest::getCluster() { return m_Cluster.query();}
const char * CDFUGetDataColumnsRequest::getClusterType() { return m_ClusterType.query();}
__int64 CDFUGetDataColumnsRequest::getStartIndex() { return m_StartIndex;}
__int64 CDFUGetDataColumnsRequest::getEndIndex() { return m_EndIndex;}
void CDFUGetDataColumnsRequest::setOpenLogicalName(const char * val){ m_OpenLogicalName.set(val); }
void CDFUGetDataColumnsRequest::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUGetDataColumnsRequest::setFilterBy(const char * val){ m_FilterBy.set(val); }
void CDFUGetDataColumnsRequest::setShowColumns(const char * val){ m_ShowColumns.set(val); }
void CDFUGetDataColumnsRequest::setChooseFile(int val){ m_ChooseFile=val; }
void CDFUGetDataColumnsRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUGetDataColumnsRequest::setClusterType(const char * val){ m_ClusterType.set(val); }
void CDFUGetDataColumnsRequest::setStartIndex(__int64 val){ m_StartIndex=val; }
void CDFUGetDataColumnsRequest::setEndIndex(__int64 val){ m_EndIndex=val; }
extern "C"  IEspDFUGetDataColumnsRequest *createDFUGetDataColumnsRequest(const char *serv){return ((IEspDFUGetDataColumnsRequest *)new CDFUGetDataColumnsRequest(serv));}
extern "C"  IClientDFUGetDataColumnsRequest *createClientDFUGetDataColumnsRequest(const char *serv){return ((IClientDFUGetDataColumnsRequest *)new CDFUGetDataColumnsRequest(serv));}

//=======================================================
// class CDFUGetDataColumnsResponse Implementation
//=======================================================

CDFUGetDataColumnsResponse::CDFUGetDataColumnsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_LogicalName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUGetDataColumnsResponse::CDFUGetDataColumnsResponse(const char *serviceName, const char *bc)
	: m_LogicalName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsResponse");
}

CDFUGetDataColumnsResponse::CDFUGetDataColumnsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_LogicalName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUGetDataColumnsResponse::CDFUGetDataColumnsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_LogicalName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetDataColumnsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUGetDataColumnsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartIndex\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndIndex\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns1\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns2\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns3\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns4\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns5\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns6\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns7\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns8\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns9\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns10\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns11")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns11\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns12")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns12\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns13")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns13\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns14")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns14\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns15")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns15\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns16")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns16\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns17")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns17\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns18")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns18\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns19")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns19\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns20")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns20\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns1\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns2\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns3\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns4\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns5\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns6\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns7\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns8\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns9\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns10\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns11")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns11\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns12")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns12\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns13")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns13\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns14")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns14\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns15")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns15\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns16")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns16\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns17")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns17\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns18")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns18\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns19")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns19\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns20")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns20\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"RowCount\" type=\"xsd:long\"/>\n");
		if (!context.suppressed("DFUGetDataColumnsResponse","ShowColumns")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ShowColumns\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","ChooseFile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ChooseFile\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","Cluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUGetDataColumnsResponse","ClusterType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterType\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUDataColumn::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUDataColumn") && added.getValue("ArrayOfDFUDataColumn")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUDataColumn\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUDataColumn\" type=\"tns:DFUDataColumn\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUDataColumn",1);
	}
	return schema;
}

void CDFUGetDataColumnsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUGetDataColumnsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns11",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns12",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns13",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns14",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns15",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns16",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns17",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns18",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns19",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataKeyedColumns20",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns11",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns12",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns13",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns14",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns15",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns16",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns17",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns18",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns19",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns20",1.15);
	info.addMinVersion("DFUGetDataColumnsResponse","ShowColumns",1.05);
	info.addMinVersion("DFUGetDataColumnsResponse","ChooseFile",1.1);
	info.addMinVersion("DFUGetDataColumnsResponse","Cluster",1.12);
	info.addMinVersion("DFUGetDataColumnsResponse","ClusterType",1.12);
	if (!added.getValue("DFUDataColumn"))
	{
		added.setValue("DFUDataColumn",1);
		CDFUDataColumn::getMapInfo(info,added);
	}
}

StringBuffer &CDFUGetDataColumnsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartIndex");
	form.appendf("  <tr><td><b>StartIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndIndex");
	form.appendf("  <tr><td><b>EndIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns1");
	form.appendf("<tr><td><b>DFUDataKeyedColumns1: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns2");
	form.appendf("<tr><td><b>DFUDataKeyedColumns2: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns3");
	form.appendf("<tr><td><b>DFUDataKeyedColumns3: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns4");
	form.appendf("<tr><td><b>DFUDataKeyedColumns4: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns5");
	form.appendf("<tr><td><b>DFUDataKeyedColumns5: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns6");
	form.appendf("<tr><td><b>DFUDataKeyedColumns6: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns7");
	form.appendf("<tr><td><b>DFUDataKeyedColumns7: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns8");
	form.appendf("<tr><td><b>DFUDataKeyedColumns8: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns9");
	form.appendf("<tr><td><b>DFUDataKeyedColumns9: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns10");
	form.appendf("<tr><td><b>DFUDataKeyedColumns10: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns11")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns11");
		form.appendf("<tr><td><b>DFUDataKeyedColumns11: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns12")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns12");
		form.appendf("<tr><td><b>DFUDataKeyedColumns12: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns13")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns13");
		form.appendf("<tr><td><b>DFUDataKeyedColumns13: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns14")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns14");
		form.appendf("<tr><td><b>DFUDataKeyedColumns14: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns15")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns15");
		form.appendf("<tr><td><b>DFUDataKeyedColumns15: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns16")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns16");
		form.appendf("<tr><td><b>DFUDataKeyedColumns16: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns17")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns17");
		form.appendf("<tr><td><b>DFUDataKeyedColumns17: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns18")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns18");
		form.appendf("<tr><td><b>DFUDataKeyedColumns18: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns19")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns19");
		form.appendf("<tr><td><b>DFUDataKeyedColumns19: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataKeyedColumns20")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns20");
		form.appendf("<tr><td><b>DFUDataKeyedColumns20: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns1");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns1: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns2");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns2: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns3");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns3: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns4");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns4: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns5");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns5: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns6");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns6: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns7");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns7: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns8");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns8: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns9");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns9: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns10");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns10: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns11")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns11");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns11: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns12")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns12");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns12: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns13")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns13");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns13: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns14")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns14");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns14: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns15")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns15");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns15: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns16")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns16");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns16: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns17")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns17");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns17: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns18")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns18");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns18: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns19")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns19");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns19: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","DFUDataNonKeyedColumns20")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns20");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns20: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RowCount");
	form.appendf("  <tr><td><b>RowCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUGetDataColumnsResponse","ShowColumns")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ShowColumns");
		form.appendf("  <tr><td><b>ShowColumns: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","ChooseFile")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ChooseFile");
		form.appendf("  <tr><td><b>ChooseFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","Cluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Cluster");
		form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUGetDataColumnsResponse","ClusterType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterType");
		form.appendf("  <tr><td><b>ClusterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUGetDataColumnsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUGetDataColumnsResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
		m_StartIndex.marshall(rpc_resp, "StartIndex", "", "", "");
		m_EndIndex.marshall(rpc_resp, "EndIndex", "", "", "");
		m_DFUDataKeyedColumns1.marshall(rpc_resp, "DFUDataKeyedColumns1", "DFUDataColumn");
		m_DFUDataKeyedColumns2.marshall(rpc_resp, "DFUDataKeyedColumns2", "DFUDataColumn");
		m_DFUDataKeyedColumns3.marshall(rpc_resp, "DFUDataKeyedColumns3", "DFUDataColumn");
		m_DFUDataKeyedColumns4.marshall(rpc_resp, "DFUDataKeyedColumns4", "DFUDataColumn");
		m_DFUDataKeyedColumns5.marshall(rpc_resp, "DFUDataKeyedColumns5", "DFUDataColumn");
		m_DFUDataKeyedColumns6.marshall(rpc_resp, "DFUDataKeyedColumns6", "DFUDataColumn");
		m_DFUDataKeyedColumns7.marshall(rpc_resp, "DFUDataKeyedColumns7", "DFUDataColumn");
		m_DFUDataKeyedColumns8.marshall(rpc_resp, "DFUDataKeyedColumns8", "DFUDataColumn");
		m_DFUDataKeyedColumns9.marshall(rpc_resp, "DFUDataKeyedColumns9", "DFUDataColumn");
		m_DFUDataKeyedColumns10.marshall(rpc_resp, "DFUDataKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns11.marshall(rpc_resp, "DFUDataKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns12.marshall(rpc_resp, "DFUDataKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns13.marshall(rpc_resp, "DFUDataKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns14.marshall(rpc_resp, "DFUDataKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns15.marshall(rpc_resp, "DFUDataKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns16.marshall(rpc_resp, "DFUDataKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns17.marshall(rpc_resp, "DFUDataKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns18.marshall(rpc_resp, "DFUDataKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns19.marshall(rpc_resp, "DFUDataKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns20.marshall(rpc_resp, "DFUDataKeyedColumns20", "DFUDataColumn");
		m_DFUDataNonKeyedColumns1.marshall(rpc_resp, "DFUDataNonKeyedColumns1", "DFUDataColumn");
		m_DFUDataNonKeyedColumns2.marshall(rpc_resp, "DFUDataNonKeyedColumns2", "DFUDataColumn");
		m_DFUDataNonKeyedColumns3.marshall(rpc_resp, "DFUDataNonKeyedColumns3", "DFUDataColumn");
		m_DFUDataNonKeyedColumns4.marshall(rpc_resp, "DFUDataNonKeyedColumns4", "DFUDataColumn");
		m_DFUDataNonKeyedColumns5.marshall(rpc_resp, "DFUDataNonKeyedColumns5", "DFUDataColumn");
		m_DFUDataNonKeyedColumns6.marshall(rpc_resp, "DFUDataNonKeyedColumns6", "DFUDataColumn");
		m_DFUDataNonKeyedColumns7.marshall(rpc_resp, "DFUDataNonKeyedColumns7", "DFUDataColumn");
		m_DFUDataNonKeyedColumns8.marshall(rpc_resp, "DFUDataNonKeyedColumns8", "DFUDataColumn");
		m_DFUDataNonKeyedColumns9.marshall(rpc_resp, "DFUDataNonKeyedColumns9", "DFUDataColumn");
		m_DFUDataNonKeyedColumns10.marshall(rpc_resp, "DFUDataNonKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns11.marshall(rpc_resp, "DFUDataNonKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns12.marshall(rpc_resp, "DFUDataNonKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns13.marshall(rpc_resp, "DFUDataNonKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns14.marshall(rpc_resp, "DFUDataNonKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns15.marshall(rpc_resp, "DFUDataNonKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns16.marshall(rpc_resp, "DFUDataNonKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns17.marshall(rpc_resp, "DFUDataNonKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns18.marshall(rpc_resp, "DFUDataNonKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns19.marshall(rpc_resp, "DFUDataNonKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns20.marshall(rpc_resp, "DFUDataNonKeyedColumns20", "DFUDataColumn");
		m_RowCount.marshall(rpc_resp, "RowCount", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_ShowColumns.marshall(rpc_resp, "ShowColumns", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.1))
			m_ChooseFile.marshall(rpc_resp, "ChooseFile", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_ClusterType.marshall(rpc_resp, "ClusterType", "", "", "");
	}
}


void CDFUGetDataColumnsResponse::copy(CDFUGetDataColumnsResponse &from)
{
	m_LogicalName.copy(from.m_LogicalName);
	m_StartIndex.copy(from.m_StartIndex);
	m_EndIndex.copy(from.m_EndIndex);
	m_DFUDataKeyedColumns1.copy(from.m_DFUDataKeyedColumns1);
	m_DFUDataKeyedColumns2.copy(from.m_DFUDataKeyedColumns2);
	m_DFUDataKeyedColumns3.copy(from.m_DFUDataKeyedColumns3);
	m_DFUDataKeyedColumns4.copy(from.m_DFUDataKeyedColumns4);
	m_DFUDataKeyedColumns5.copy(from.m_DFUDataKeyedColumns5);
	m_DFUDataKeyedColumns6.copy(from.m_DFUDataKeyedColumns6);
	m_DFUDataKeyedColumns7.copy(from.m_DFUDataKeyedColumns7);
	m_DFUDataKeyedColumns8.copy(from.m_DFUDataKeyedColumns8);
	m_DFUDataKeyedColumns9.copy(from.m_DFUDataKeyedColumns9);
	m_DFUDataKeyedColumns10.copy(from.m_DFUDataKeyedColumns10);
	m_DFUDataKeyedColumns11.copy(from.m_DFUDataKeyedColumns11);
	m_DFUDataKeyedColumns12.copy(from.m_DFUDataKeyedColumns12);
	m_DFUDataKeyedColumns13.copy(from.m_DFUDataKeyedColumns13);
	m_DFUDataKeyedColumns14.copy(from.m_DFUDataKeyedColumns14);
	m_DFUDataKeyedColumns15.copy(from.m_DFUDataKeyedColumns15);
	m_DFUDataKeyedColumns16.copy(from.m_DFUDataKeyedColumns16);
	m_DFUDataKeyedColumns17.copy(from.m_DFUDataKeyedColumns17);
	m_DFUDataKeyedColumns18.copy(from.m_DFUDataKeyedColumns18);
	m_DFUDataKeyedColumns19.copy(from.m_DFUDataKeyedColumns19);
	m_DFUDataKeyedColumns20.copy(from.m_DFUDataKeyedColumns20);
	m_DFUDataNonKeyedColumns1.copy(from.m_DFUDataNonKeyedColumns1);
	m_DFUDataNonKeyedColumns2.copy(from.m_DFUDataNonKeyedColumns2);
	m_DFUDataNonKeyedColumns3.copy(from.m_DFUDataNonKeyedColumns3);
	m_DFUDataNonKeyedColumns4.copy(from.m_DFUDataNonKeyedColumns4);
	m_DFUDataNonKeyedColumns5.copy(from.m_DFUDataNonKeyedColumns5);
	m_DFUDataNonKeyedColumns6.copy(from.m_DFUDataNonKeyedColumns6);
	m_DFUDataNonKeyedColumns7.copy(from.m_DFUDataNonKeyedColumns7);
	m_DFUDataNonKeyedColumns8.copy(from.m_DFUDataNonKeyedColumns8);
	m_DFUDataNonKeyedColumns9.copy(from.m_DFUDataNonKeyedColumns9);
	m_DFUDataNonKeyedColumns10.copy(from.m_DFUDataNonKeyedColumns10);
	m_DFUDataNonKeyedColumns11.copy(from.m_DFUDataNonKeyedColumns11);
	m_DFUDataNonKeyedColumns12.copy(from.m_DFUDataNonKeyedColumns12);
	m_DFUDataNonKeyedColumns13.copy(from.m_DFUDataNonKeyedColumns13);
	m_DFUDataNonKeyedColumns14.copy(from.m_DFUDataNonKeyedColumns14);
	m_DFUDataNonKeyedColumns15.copy(from.m_DFUDataNonKeyedColumns15);
	m_DFUDataNonKeyedColumns16.copy(from.m_DFUDataNonKeyedColumns16);
	m_DFUDataNonKeyedColumns17.copy(from.m_DFUDataNonKeyedColumns17);
	m_DFUDataNonKeyedColumns18.copy(from.m_DFUDataNonKeyedColumns18);
	m_DFUDataNonKeyedColumns19.copy(from.m_DFUDataNonKeyedColumns19);
	m_DFUDataNonKeyedColumns20.copy(from.m_DFUDataNonKeyedColumns20);
	m_RowCount.copy(from.m_RowCount);
	m_ShowColumns.copy(from.m_ShowColumns);
	m_ChooseFile.copy(from.m_ChooseFile);
	m_Cluster.copy(from.m_Cluster);
	m_ClusterType.copy(from.m_ClusterType);
}


void CDFUGetDataColumnsResponse::copy(IConstDFUGetDataColumnsResponse &ifrom)
{
	setLogicalName(ifrom.getLogicalName());
	setStartIndex(ifrom.getStartIndex());
	setEndIndex(ifrom.getEndIndex());
	setDFUDataKeyedColumns1(ifrom.getDFUDataKeyedColumns1());
	setDFUDataKeyedColumns2(ifrom.getDFUDataKeyedColumns2());
	setDFUDataKeyedColumns3(ifrom.getDFUDataKeyedColumns3());
	setDFUDataKeyedColumns4(ifrom.getDFUDataKeyedColumns4());
	setDFUDataKeyedColumns5(ifrom.getDFUDataKeyedColumns5());
	setDFUDataKeyedColumns6(ifrom.getDFUDataKeyedColumns6());
	setDFUDataKeyedColumns7(ifrom.getDFUDataKeyedColumns7());
	setDFUDataKeyedColumns8(ifrom.getDFUDataKeyedColumns8());
	setDFUDataKeyedColumns9(ifrom.getDFUDataKeyedColumns9());
	setDFUDataKeyedColumns10(ifrom.getDFUDataKeyedColumns10());
	setDFUDataKeyedColumns11(ifrom.getDFUDataKeyedColumns11());
	setDFUDataKeyedColumns12(ifrom.getDFUDataKeyedColumns12());
	setDFUDataKeyedColumns13(ifrom.getDFUDataKeyedColumns13());
	setDFUDataKeyedColumns14(ifrom.getDFUDataKeyedColumns14());
	setDFUDataKeyedColumns15(ifrom.getDFUDataKeyedColumns15());
	setDFUDataKeyedColumns16(ifrom.getDFUDataKeyedColumns16());
	setDFUDataKeyedColumns17(ifrom.getDFUDataKeyedColumns17());
	setDFUDataKeyedColumns18(ifrom.getDFUDataKeyedColumns18());
	setDFUDataKeyedColumns19(ifrom.getDFUDataKeyedColumns19());
	setDFUDataKeyedColumns20(ifrom.getDFUDataKeyedColumns20());
	setDFUDataNonKeyedColumns1(ifrom.getDFUDataNonKeyedColumns1());
	setDFUDataNonKeyedColumns2(ifrom.getDFUDataNonKeyedColumns2());
	setDFUDataNonKeyedColumns3(ifrom.getDFUDataNonKeyedColumns3());
	setDFUDataNonKeyedColumns4(ifrom.getDFUDataNonKeyedColumns4());
	setDFUDataNonKeyedColumns5(ifrom.getDFUDataNonKeyedColumns5());
	setDFUDataNonKeyedColumns6(ifrom.getDFUDataNonKeyedColumns6());
	setDFUDataNonKeyedColumns7(ifrom.getDFUDataNonKeyedColumns7());
	setDFUDataNonKeyedColumns8(ifrom.getDFUDataNonKeyedColumns8());
	setDFUDataNonKeyedColumns9(ifrom.getDFUDataNonKeyedColumns9());
	setDFUDataNonKeyedColumns10(ifrom.getDFUDataNonKeyedColumns10());
	setDFUDataNonKeyedColumns11(ifrom.getDFUDataNonKeyedColumns11());
	setDFUDataNonKeyedColumns12(ifrom.getDFUDataNonKeyedColumns12());
	setDFUDataNonKeyedColumns13(ifrom.getDFUDataNonKeyedColumns13());
	setDFUDataNonKeyedColumns14(ifrom.getDFUDataNonKeyedColumns14());
	setDFUDataNonKeyedColumns15(ifrom.getDFUDataNonKeyedColumns15());
	setDFUDataNonKeyedColumns16(ifrom.getDFUDataNonKeyedColumns16());
	setDFUDataNonKeyedColumns17(ifrom.getDFUDataNonKeyedColumns17());
	setDFUDataNonKeyedColumns18(ifrom.getDFUDataNonKeyedColumns18());
	setDFUDataNonKeyedColumns19(ifrom.getDFUDataNonKeyedColumns19());
	setDFUDataNonKeyedColumns20(ifrom.getDFUDataNonKeyedColumns20());
	setRowCount(ifrom.getRowCount());
	setShowColumns(ifrom.getShowColumns());
	setChooseFile(ifrom.getChooseFile());
	setCluster(ifrom.getCluster());
	setClusterType(ifrom.getClusterType());
}


void CDFUGetDataColumnsResponse::getAttributes(IProperties &attributes)
{
}


void CDFUGetDataColumnsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
		m_StartIndex.toStr(ctx, buffer, "StartIndex", "", true, "", "");
		m_EndIndex.toStr(ctx, buffer, "EndIndex", "", true, "", "");
		m_DFUDataKeyedColumns1.toStr(ctx, buffer, "DFUDataKeyedColumns1", "DFUDataColumn");
		m_DFUDataKeyedColumns2.toStr(ctx, buffer, "DFUDataKeyedColumns2", "DFUDataColumn");
		m_DFUDataKeyedColumns3.toStr(ctx, buffer, "DFUDataKeyedColumns3", "DFUDataColumn");
		m_DFUDataKeyedColumns4.toStr(ctx, buffer, "DFUDataKeyedColumns4", "DFUDataColumn");
		m_DFUDataKeyedColumns5.toStr(ctx, buffer, "DFUDataKeyedColumns5", "DFUDataColumn");
		m_DFUDataKeyedColumns6.toStr(ctx, buffer, "DFUDataKeyedColumns6", "DFUDataColumn");
		m_DFUDataKeyedColumns7.toStr(ctx, buffer, "DFUDataKeyedColumns7", "DFUDataColumn");
		m_DFUDataKeyedColumns8.toStr(ctx, buffer, "DFUDataKeyedColumns8", "DFUDataColumn");
		m_DFUDataKeyedColumns9.toStr(ctx, buffer, "DFUDataKeyedColumns9", "DFUDataColumn");
		m_DFUDataKeyedColumns10.toStr(ctx, buffer, "DFUDataKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns11.toStr(ctx, buffer, "DFUDataKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns12.toStr(ctx, buffer, "DFUDataKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns13.toStr(ctx, buffer, "DFUDataKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns14.toStr(ctx, buffer, "DFUDataKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns15.toStr(ctx, buffer, "DFUDataKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns16.toStr(ctx, buffer, "DFUDataKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns17.toStr(ctx, buffer, "DFUDataKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns18.toStr(ctx, buffer, "DFUDataKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns19.toStr(ctx, buffer, "DFUDataKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns20.toStr(ctx, buffer, "DFUDataKeyedColumns20", "DFUDataColumn");
		m_DFUDataNonKeyedColumns1.toStr(ctx, buffer, "DFUDataNonKeyedColumns1", "DFUDataColumn");
		m_DFUDataNonKeyedColumns2.toStr(ctx, buffer, "DFUDataNonKeyedColumns2", "DFUDataColumn");
		m_DFUDataNonKeyedColumns3.toStr(ctx, buffer, "DFUDataNonKeyedColumns3", "DFUDataColumn");
		m_DFUDataNonKeyedColumns4.toStr(ctx, buffer, "DFUDataNonKeyedColumns4", "DFUDataColumn");
		m_DFUDataNonKeyedColumns5.toStr(ctx, buffer, "DFUDataNonKeyedColumns5", "DFUDataColumn");
		m_DFUDataNonKeyedColumns6.toStr(ctx, buffer, "DFUDataNonKeyedColumns6", "DFUDataColumn");
		m_DFUDataNonKeyedColumns7.toStr(ctx, buffer, "DFUDataNonKeyedColumns7", "DFUDataColumn");
		m_DFUDataNonKeyedColumns8.toStr(ctx, buffer, "DFUDataNonKeyedColumns8", "DFUDataColumn");
		m_DFUDataNonKeyedColumns9.toStr(ctx, buffer, "DFUDataNonKeyedColumns9", "DFUDataColumn");
		m_DFUDataNonKeyedColumns10.toStr(ctx, buffer, "DFUDataNonKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns11.toStr(ctx, buffer, "DFUDataNonKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns12.toStr(ctx, buffer, "DFUDataNonKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns13.toStr(ctx, buffer, "DFUDataNonKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns14.toStr(ctx, buffer, "DFUDataNonKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns15.toStr(ctx, buffer, "DFUDataNonKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns16.toStr(ctx, buffer, "DFUDataNonKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns17.toStr(ctx, buffer, "DFUDataNonKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns18.toStr(ctx, buffer, "DFUDataNonKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns19.toStr(ctx, buffer, "DFUDataNonKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns20.toStr(ctx, buffer, "DFUDataNonKeyedColumns20", "DFUDataColumn");
		m_RowCount.toStr(ctx, buffer, "RowCount", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_ShowColumns.toStr(ctx, buffer, "ShowColumns", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.1))
			m_ChooseFile.toStr(ctx, buffer, "ChooseFile", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_ClusterType.toStr(ctx, buffer, "ClusterType", "", true, "", "");
	}
}


void CDFUGetDataColumnsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUGetDataColumnsResponse::serializer(IEspContext* ctx, IConstDFUGetDataColumnsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUGetDataColumnsResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field StartIndex
	{
		//*** default kind: TK_INT; type=int64, name=StartIndex
		buffer.append("<StartIndex>");
		buffer.append(src.getStartIndex());
		buffer.append("</StartIndex>");
	}
	// field EndIndex
	{
		//*** default kind: TK_INT; type=int64, name=EndIndex
		buffer.append("<EndIndex>");
		buffer.append(src.getEndIndex());
		buffer.append("</EndIndex>");
	}
	// field DFUDataKeyedColumns1
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns1();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns1>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns1>");
	}
	// field DFUDataKeyedColumns2
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns2();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns2>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns2>");
	}
	// field DFUDataKeyedColumns3
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns3();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns3>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns3>");
	}
	// field DFUDataKeyedColumns4
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns4();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns4>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns4>");
	}
	// field DFUDataKeyedColumns5
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns5();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns5>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns5>");
	}
	// field DFUDataKeyedColumns6
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns6();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns6>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns6>");
	}
	// field DFUDataKeyedColumns7
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns7();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns7>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns7>");
	}
	// field DFUDataKeyedColumns8
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns8();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns8>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns8>");
	}
	// field DFUDataKeyedColumns9
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns9();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns9>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns9>");
	}
	// field DFUDataKeyedColumns10
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns10();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns10>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns10>");
	}
	// field DFUDataKeyedColumns11
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns11();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns11>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns11>");
	}
	// field DFUDataKeyedColumns12
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns12();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns12>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns12>");
	}
	// field DFUDataKeyedColumns13
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns13();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns13>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns13>");
	}
	// field DFUDataKeyedColumns14
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns14();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns14>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns14>");
	}
	// field DFUDataKeyedColumns15
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns15();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns15>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns15>");
	}
	// field DFUDataKeyedColumns16
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns16();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns16>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns16>");
	}
	// field DFUDataKeyedColumns17
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns17();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns17>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns17>");
	}
	// field DFUDataKeyedColumns18
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns18();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns18>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns18>");
	}
	// field DFUDataKeyedColumns19
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns19();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns19>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns19>");
	}
	// field DFUDataKeyedColumns20
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns20();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns20>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns20>");
	}
	// field DFUDataNonKeyedColumns1
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns1();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns1>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns1>");
	}
	// field DFUDataNonKeyedColumns2
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns2();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns2>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns2>");
	}
	// field DFUDataNonKeyedColumns3
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns3();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns3>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns3>");
	}
	// field DFUDataNonKeyedColumns4
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns4();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns4>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns4>");
	}
	// field DFUDataNonKeyedColumns5
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns5();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns5>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns5>");
	}
	// field DFUDataNonKeyedColumns6
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns6();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns6>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns6>");
	}
	// field DFUDataNonKeyedColumns7
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns7();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns7>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns7>");
	}
	// field DFUDataNonKeyedColumns8
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns8();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns8>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns8>");
	}
	// field DFUDataNonKeyedColumns9
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns9();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns9>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns9>");
	}
	// field DFUDataNonKeyedColumns10
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns10();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns10>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns10>");
	}
	// field DFUDataNonKeyedColumns11
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns11();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns11>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns11>");
	}
	// field DFUDataNonKeyedColumns12
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns12();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns12>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns12>");
	}
	// field DFUDataNonKeyedColumns13
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns13();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns13>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns13>");
	}
	// field DFUDataNonKeyedColumns14
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns14();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns14>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns14>");
	}
	// field DFUDataNonKeyedColumns15
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns15();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns15>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns15>");
	}
	// field DFUDataNonKeyedColumns16
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns16();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns16>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns16>");
	}
	// field DFUDataNonKeyedColumns17
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns17();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns17>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns17>");
	}
	// field DFUDataNonKeyedColumns18
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns18();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns18>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns18>");
	}
	// field DFUDataNonKeyedColumns19
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns19();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns19>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns19>");
	}
	// field DFUDataNonKeyedColumns20
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns20();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns20>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns20>");
	}
	// field RowCount
	{
		//*** default kind: TK_INT; type=int64, name=RowCount
		buffer.append("<RowCount>");
		buffer.append(src.getRowCount());
		buffer.append("</RowCount>");
	}
	// field ShowColumns
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getShowColumns();
		if (s && *s)
		{
			buffer.append("<ShowColumns>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowColumns>");
		}
	}
	// field ChooseFile
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		int n = src.getChooseFile();
		if (n)
			buffer.appendf("<ChooseFile>%d</ChooseFile>", n);
	}
	// field Cluster
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field ClusterType
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getClusterType();
		if (s && *s)
		{
			buffer.append("<ClusterType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterType>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUGetDataColumnsResponse>");
}

bool CDFUGetDataColumnsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
		hasValue |= m_StartIndex.unmarshall(rpc_request, "StartIndex", basepath);
		hasValue |= m_EndIndex.unmarshall(rpc_request, "EndIndex", basepath);
		hasValue |= m_DFUDataKeyedColumns1.unmarshall(rpc_request, "DFUDataKeyedColumns1", basepath);
		hasValue |= m_DFUDataKeyedColumns2.unmarshall(rpc_request, "DFUDataKeyedColumns2", basepath);
		hasValue |= m_DFUDataKeyedColumns3.unmarshall(rpc_request, "DFUDataKeyedColumns3", basepath);
		hasValue |= m_DFUDataKeyedColumns4.unmarshall(rpc_request, "DFUDataKeyedColumns4", basepath);
		hasValue |= m_DFUDataKeyedColumns5.unmarshall(rpc_request, "DFUDataKeyedColumns5", basepath);
		hasValue |= m_DFUDataKeyedColumns6.unmarshall(rpc_request, "DFUDataKeyedColumns6", basepath);
		hasValue |= m_DFUDataKeyedColumns7.unmarshall(rpc_request, "DFUDataKeyedColumns7", basepath);
		hasValue |= m_DFUDataKeyedColumns8.unmarshall(rpc_request, "DFUDataKeyedColumns8", basepath);
		hasValue |= m_DFUDataKeyedColumns9.unmarshall(rpc_request, "DFUDataKeyedColumns9", basepath);
		hasValue |= m_DFUDataKeyedColumns10.unmarshall(rpc_request, "DFUDataKeyedColumns10", basepath);
		hasValue |= m_DFUDataKeyedColumns11.unmarshall(rpc_request, "DFUDataKeyedColumns11", basepath);
		hasValue |= m_DFUDataKeyedColumns12.unmarshall(rpc_request, "DFUDataKeyedColumns12", basepath);
		hasValue |= m_DFUDataKeyedColumns13.unmarshall(rpc_request, "DFUDataKeyedColumns13", basepath);
		hasValue |= m_DFUDataKeyedColumns14.unmarshall(rpc_request, "DFUDataKeyedColumns14", basepath);
		hasValue |= m_DFUDataKeyedColumns15.unmarshall(rpc_request, "DFUDataKeyedColumns15", basepath);
		hasValue |= m_DFUDataKeyedColumns16.unmarshall(rpc_request, "DFUDataKeyedColumns16", basepath);
		hasValue |= m_DFUDataKeyedColumns17.unmarshall(rpc_request, "DFUDataKeyedColumns17", basepath);
		hasValue |= m_DFUDataKeyedColumns18.unmarshall(rpc_request, "DFUDataKeyedColumns18", basepath);
		hasValue |= m_DFUDataKeyedColumns19.unmarshall(rpc_request, "DFUDataKeyedColumns19", basepath);
		hasValue |= m_DFUDataKeyedColumns20.unmarshall(rpc_request, "DFUDataKeyedColumns20", basepath);
		hasValue |= m_DFUDataNonKeyedColumns1.unmarshall(rpc_request, "DFUDataNonKeyedColumns1", basepath);
		hasValue |= m_DFUDataNonKeyedColumns2.unmarshall(rpc_request, "DFUDataNonKeyedColumns2", basepath);
		hasValue |= m_DFUDataNonKeyedColumns3.unmarshall(rpc_request, "DFUDataNonKeyedColumns3", basepath);
		hasValue |= m_DFUDataNonKeyedColumns4.unmarshall(rpc_request, "DFUDataNonKeyedColumns4", basepath);
		hasValue |= m_DFUDataNonKeyedColumns5.unmarshall(rpc_request, "DFUDataNonKeyedColumns5", basepath);
		hasValue |= m_DFUDataNonKeyedColumns6.unmarshall(rpc_request, "DFUDataNonKeyedColumns6", basepath);
		hasValue |= m_DFUDataNonKeyedColumns7.unmarshall(rpc_request, "DFUDataNonKeyedColumns7", basepath);
		hasValue |= m_DFUDataNonKeyedColumns8.unmarshall(rpc_request, "DFUDataNonKeyedColumns8", basepath);
		hasValue |= m_DFUDataNonKeyedColumns9.unmarshall(rpc_request, "DFUDataNonKeyedColumns9", basepath);
		hasValue |= m_DFUDataNonKeyedColumns10.unmarshall(rpc_request, "DFUDataNonKeyedColumns10", basepath);
		hasValue |= m_DFUDataNonKeyedColumns11.unmarshall(rpc_request, "DFUDataNonKeyedColumns11", basepath);
		hasValue |= m_DFUDataNonKeyedColumns12.unmarshall(rpc_request, "DFUDataNonKeyedColumns12", basepath);
		hasValue |= m_DFUDataNonKeyedColumns13.unmarshall(rpc_request, "DFUDataNonKeyedColumns13", basepath);
		hasValue |= m_DFUDataNonKeyedColumns14.unmarshall(rpc_request, "DFUDataNonKeyedColumns14", basepath);
		hasValue |= m_DFUDataNonKeyedColumns15.unmarshall(rpc_request, "DFUDataNonKeyedColumns15", basepath);
		hasValue |= m_DFUDataNonKeyedColumns16.unmarshall(rpc_request, "DFUDataNonKeyedColumns16", basepath);
		hasValue |= m_DFUDataNonKeyedColumns17.unmarshall(rpc_request, "DFUDataNonKeyedColumns17", basepath);
		hasValue |= m_DFUDataNonKeyedColumns18.unmarshall(rpc_request, "DFUDataNonKeyedColumns18", basepath);
		hasValue |= m_DFUDataNonKeyedColumns19.unmarshall(rpc_request, "DFUDataNonKeyedColumns19", basepath);
		hasValue |= m_DFUDataNonKeyedColumns20.unmarshall(rpc_request, "DFUDataNonKeyedColumns20", basepath);
		hasValue |= m_RowCount.unmarshall(rpc_request, "RowCount", basepath);
		hasValue |= m_ShowColumns.unmarshall(rpc_request, "ShowColumns", basepath);
		hasValue |= m_ChooseFile.unmarshall(rpc_request, "ChooseFile", basepath);
		hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
		hasValue |= m_ClusterType.unmarshall(rpc_request, "ClusterType", basepath);
	}
	return hasValue;
}

bool CDFUGetDataColumnsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_StartIndex.unmarshall(ctx, soapval, "StartIndex");
	hasValue |= m_EndIndex.unmarshall(ctx, soapval, "EndIndex");
	hasValue |= m_DFUDataKeyedColumns1.unmarshall(ctx, soapval, "DFUDataKeyedColumns1");
	hasValue |= m_DFUDataKeyedColumns2.unmarshall(ctx, soapval, "DFUDataKeyedColumns2");
	hasValue |= m_DFUDataKeyedColumns3.unmarshall(ctx, soapval, "DFUDataKeyedColumns3");
	hasValue |= m_DFUDataKeyedColumns4.unmarshall(ctx, soapval, "DFUDataKeyedColumns4");
	hasValue |= m_DFUDataKeyedColumns5.unmarshall(ctx, soapval, "DFUDataKeyedColumns5");
	hasValue |= m_DFUDataKeyedColumns6.unmarshall(ctx, soapval, "DFUDataKeyedColumns6");
	hasValue |= m_DFUDataKeyedColumns7.unmarshall(ctx, soapval, "DFUDataKeyedColumns7");
	hasValue |= m_DFUDataKeyedColumns8.unmarshall(ctx, soapval, "DFUDataKeyedColumns8");
	hasValue |= m_DFUDataKeyedColumns9.unmarshall(ctx, soapval, "DFUDataKeyedColumns9");
	hasValue |= m_DFUDataKeyedColumns10.unmarshall(ctx, soapval, "DFUDataKeyedColumns10");
	hasValue |= m_DFUDataKeyedColumns11.unmarshall(ctx, soapval, "DFUDataKeyedColumns11");
	hasValue |= m_DFUDataKeyedColumns12.unmarshall(ctx, soapval, "DFUDataKeyedColumns12");
	hasValue |= m_DFUDataKeyedColumns13.unmarshall(ctx, soapval, "DFUDataKeyedColumns13");
	hasValue |= m_DFUDataKeyedColumns14.unmarshall(ctx, soapval, "DFUDataKeyedColumns14");
	hasValue |= m_DFUDataKeyedColumns15.unmarshall(ctx, soapval, "DFUDataKeyedColumns15");
	hasValue |= m_DFUDataKeyedColumns16.unmarshall(ctx, soapval, "DFUDataKeyedColumns16");
	hasValue |= m_DFUDataKeyedColumns17.unmarshall(ctx, soapval, "DFUDataKeyedColumns17");
	hasValue |= m_DFUDataKeyedColumns18.unmarshall(ctx, soapval, "DFUDataKeyedColumns18");
	hasValue |= m_DFUDataKeyedColumns19.unmarshall(ctx, soapval, "DFUDataKeyedColumns19");
	hasValue |= m_DFUDataKeyedColumns20.unmarshall(ctx, soapval, "DFUDataKeyedColumns20");
	hasValue |= m_DFUDataNonKeyedColumns1.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns1");
	hasValue |= m_DFUDataNonKeyedColumns2.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns2");
	hasValue |= m_DFUDataNonKeyedColumns3.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns3");
	hasValue |= m_DFUDataNonKeyedColumns4.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns4");
	hasValue |= m_DFUDataNonKeyedColumns5.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns5");
	hasValue |= m_DFUDataNonKeyedColumns6.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns6");
	hasValue |= m_DFUDataNonKeyedColumns7.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns7");
	hasValue |= m_DFUDataNonKeyedColumns8.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns8");
	hasValue |= m_DFUDataNonKeyedColumns9.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns9");
	hasValue |= m_DFUDataNonKeyedColumns10.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns10");
	hasValue |= m_DFUDataNonKeyedColumns11.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns11");
	hasValue |= m_DFUDataNonKeyedColumns12.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns12");
	hasValue |= m_DFUDataNonKeyedColumns13.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns13");
	hasValue |= m_DFUDataNonKeyedColumns14.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns14");
	hasValue |= m_DFUDataNonKeyedColumns15.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns15");
	hasValue |= m_DFUDataNonKeyedColumns16.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns16");
	hasValue |= m_DFUDataNonKeyedColumns17.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns17");
	hasValue |= m_DFUDataNonKeyedColumns18.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns18");
	hasValue |= m_DFUDataNonKeyedColumns19.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns19");
	hasValue |= m_DFUDataNonKeyedColumns20.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns20");
	hasValue |= m_RowCount.unmarshall(ctx, soapval, "RowCount");
	hasValue |= m_ShowColumns.unmarshall(ctx, soapval, "ShowColumns");
	hasValue |= m_ChooseFile.unmarshall(ctx, soapval, "ChooseFile");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_ClusterType.unmarshall(ctx, soapval, "ClusterType");
	return hasValue;
}

bool CDFUGetDataColumnsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_StartIndex.unmarshall(ctx, params, attachments, "StartIndex", basepath);
	hasValue |= m_EndIndex.unmarshall(ctx, params, attachments, "EndIndex", basepath);
	hasValue |= m_DFUDataKeyedColumns1.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns1", basepath);
	hasValue |= m_DFUDataKeyedColumns2.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns2", basepath);
	hasValue |= m_DFUDataKeyedColumns3.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns3", basepath);
	hasValue |= m_DFUDataKeyedColumns4.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns4", basepath);
	hasValue |= m_DFUDataKeyedColumns5.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns5", basepath);
	hasValue |= m_DFUDataKeyedColumns6.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns6", basepath);
	hasValue |= m_DFUDataKeyedColumns7.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns7", basepath);
	hasValue |= m_DFUDataKeyedColumns8.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns8", basepath);
	hasValue |= m_DFUDataKeyedColumns9.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns9", basepath);
	hasValue |= m_DFUDataKeyedColumns10.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns10", basepath);
	hasValue |= m_DFUDataKeyedColumns11.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns11", basepath);
	hasValue |= m_DFUDataKeyedColumns12.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns12", basepath);
	hasValue |= m_DFUDataKeyedColumns13.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns13", basepath);
	hasValue |= m_DFUDataKeyedColumns14.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns14", basepath);
	hasValue |= m_DFUDataKeyedColumns15.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns15", basepath);
	hasValue |= m_DFUDataKeyedColumns16.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns16", basepath);
	hasValue |= m_DFUDataKeyedColumns17.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns17", basepath);
	hasValue |= m_DFUDataKeyedColumns18.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns18", basepath);
	hasValue |= m_DFUDataKeyedColumns19.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns19", basepath);
	hasValue |= m_DFUDataKeyedColumns20.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns20", basepath);
	hasValue |= m_DFUDataNonKeyedColumns1.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns1", basepath);
	hasValue |= m_DFUDataNonKeyedColumns2.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns2", basepath);
	hasValue |= m_DFUDataNonKeyedColumns3.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns3", basepath);
	hasValue |= m_DFUDataNonKeyedColumns4.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns4", basepath);
	hasValue |= m_DFUDataNonKeyedColumns5.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns5", basepath);
	hasValue |= m_DFUDataNonKeyedColumns6.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns6", basepath);
	hasValue |= m_DFUDataNonKeyedColumns7.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns7", basepath);
	hasValue |= m_DFUDataNonKeyedColumns8.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns8", basepath);
	hasValue |= m_DFUDataNonKeyedColumns9.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns9", basepath);
	hasValue |= m_DFUDataNonKeyedColumns10.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns10", basepath);
	hasValue |= m_DFUDataNonKeyedColumns11.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns11", basepath);
	hasValue |= m_DFUDataNonKeyedColumns12.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns12", basepath);
	hasValue |= m_DFUDataNonKeyedColumns13.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns13", basepath);
	hasValue |= m_DFUDataNonKeyedColumns14.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns14", basepath);
	hasValue |= m_DFUDataNonKeyedColumns15.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns15", basepath);
	hasValue |= m_DFUDataNonKeyedColumns16.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns16", basepath);
	hasValue |= m_DFUDataNonKeyedColumns17.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns17", basepath);
	hasValue |= m_DFUDataNonKeyedColumns18.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns18", basepath);
	hasValue |= m_DFUDataNonKeyedColumns19.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns19", basepath);
	hasValue |= m_DFUDataNonKeyedColumns20.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns20", basepath);
	hasValue |= m_RowCount.unmarshall(ctx, params, attachments, "RowCount", basepath);
	hasValue |= m_ShowColumns.unmarshall(ctx, params, attachments, "ShowColumns", basepath);
	hasValue |= m_ChooseFile.unmarshall(ctx, params, attachments, "ChooseFile", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(ctx, params, attachments, "ClusterType", basepath);
	return hasValue;
}

const char * CDFUGetDataColumnsResponse::getLogicalName() { return m_LogicalName.query();}
bool CDFUGetDataColumnsResponse::getStartIndex_isNull(){return m_StartIndex.is_nil();}
__int64 CDFUGetDataColumnsResponse::getStartIndex() { return m_StartIndex;}
bool CDFUGetDataColumnsResponse::getEndIndex_isNull(){return m_EndIndex.is_nil();}
__int64 CDFUGetDataColumnsResponse::getEndIndex() { return m_EndIndex;}
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns1() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns1; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns2() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns2; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns3() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns3; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns4() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns4; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns5() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns5; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns6() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns6; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns7() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns7; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns8() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns8; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns9() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns9; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns10() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns10; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns11() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns11; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns12() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns12; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns13() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns13; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns14() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns14; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns15() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns15; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns16() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns16; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns17() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns17; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns18() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns18; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns19() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns19; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataKeyedColumns20() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns20; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns1() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns1; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns2() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns2; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns3() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns3; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns4() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns4; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns5() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns5; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns6() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns6; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns7() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns7; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns8() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns8; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns9() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns9; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns10() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns10; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns11() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns11; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns12() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns12; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns13() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns13; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns14() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns14; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns15() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns15; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns16() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns16; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns17() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns17; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns18() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns18; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns19() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns19; }
IArrayOf<IConstDFUDataColumn> & CDFUGetDataColumnsResponse::getDFUDataNonKeyedColumns20() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns20; }
bool CDFUGetDataColumnsResponse::getRowCount_isNull(){return m_RowCount.is_nil();}
__int64 CDFUGetDataColumnsResponse::getRowCount() { return m_RowCount;}
const char * CDFUGetDataColumnsResponse::getShowColumns() { return m_ShowColumns.query();}
bool CDFUGetDataColumnsResponse::getChooseFile_isNull(){return m_ChooseFile.is_nil();}
int CDFUGetDataColumnsResponse::getChooseFile() { return m_ChooseFile;}
const char * CDFUGetDataColumnsResponse::getCluster() { return m_Cluster.query();}
const char * CDFUGetDataColumnsResponse::getClusterType() { return m_ClusterType.query();}
void CDFUGetDataColumnsResponse::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUGetDataColumnsResponse::setStartIndex_null(){ m_StartIndex.Nil(); }void CDFUGetDataColumnsResponse::setStartIndex(__int64 val){ m_StartIndex=val; }
void CDFUGetDataColumnsResponse::setEndIndex_null(){ m_EndIndex.Nil(); }void CDFUGetDataColumnsResponse::setEndIndex(__int64 val){ m_EndIndex=val; }
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns1(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns1(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns2(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns2(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns3(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns3(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns4(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns4(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns5(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns5(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns6(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns6(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns7(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns7(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns8(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns8(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns9(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns9(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns10(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns10(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns11(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns11(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns12(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns12(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns13(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns13(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns14(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns14(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns15(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns15(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns16(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns16(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns17(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns17(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns18(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns18(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns19(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns19(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns20(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataKeyedColumns20(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns1(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns1(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns2(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns2(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns3(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns3(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns4(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns4(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns5(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns5(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns6(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns6(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns7(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns7(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns8(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns8(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns9(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns9(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns10(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns10(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns11(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns11(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns12(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns12(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns13(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns13(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns14(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns14(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns15(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns15(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns16(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns16(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns17(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns17(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns18(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns18(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns19(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns19(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns20(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setDFUDataNonKeyedColumns20(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetDataColumnsResponse::setRowCount_null(){ m_RowCount.Nil(); }void CDFUGetDataColumnsResponse::setRowCount(__int64 val){ m_RowCount=val; }
void CDFUGetDataColumnsResponse::setShowColumns(const char * val){ m_ShowColumns.set(val); }
void CDFUGetDataColumnsResponse::setChooseFile_null(){ m_ChooseFile.Nil(); }void CDFUGetDataColumnsResponse::setChooseFile(int val){ m_ChooseFile=val; }
void CDFUGetDataColumnsResponse::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUGetDataColumnsResponse::setClusterType(const char * val){ m_ClusterType.set(val); }
extern "C"  IEspDFUGetDataColumnsResponse *createDFUGetDataColumnsResponse(const char *serv){return ((IEspDFUGetDataColumnsResponse *)new CDFUGetDataColumnsResponse(serv));}
extern "C"  IClientDFUGetDataColumnsResponse *createClientDFUGetDataColumnsResponse(const char *serv){return ((IClientDFUGetDataColumnsResponse *)new CDFUGetDataColumnsResponse(serv));}

//=======================================================
// class CDFUBrowseDataRequest Implementation
//=======================================================

CDFUBrowseDataRequest::CDFUBrowseDataRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_SchemaOnly(0, nilIgnore,false),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_ParentName(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_DisableUppercaseTranslation(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUBrowseDataRequest::CDFUBrowseDataRequest(const char *serviceName, const char *bc)
	: m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_SchemaOnly(0, nilIgnore,false),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_ParentName(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_DisableUppercaseTranslation(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataRequest");
}

CDFUBrowseDataRequest::CDFUBrowseDataRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_SchemaOnly(0, nilIgnore,false),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_ParentName(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_DisableUppercaseTranslation(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUBrowseDataRequest::CDFUBrowseDataRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_LogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_SchemaOnly(0, nilIgnore,false),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_ParentName(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_DisableUppercaseTranslation(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUBrowseDataRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FilterBy\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUBrowseDataRequest","ShowColumns")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ShowColumns\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataRequest","SchemaOnly")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"SchemaOnly\" type=\"xsd:boolean\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartForGoback\" type=\"xsd:long\"/>\n");
		if (!context.suppressed("DFUBrowseDataRequest","CountForGoback")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CountForGoback\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataRequest","ChooseFile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ChooseFile\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataRequest","Cluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataRequest","ClusterType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterType\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataRequest","ParentName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ParentName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("DFUBrowseDataRequest","DisableUppercaseTranslation")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DisableUppercaseTranslation\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUBrowseDataRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUBrowseDataRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUBrowseDataRequest","ShowColumns",1.05);
	info.addMinVersion("DFUBrowseDataRequest","SchemaOnly",1.11);
	info.addMinVersion("DFUBrowseDataRequest","CountForGoback",1.05);
	info.addMinVersion("DFUBrowseDataRequest","ChooseFile",1.1);
	info.addMinVersion("DFUBrowseDataRequest","Cluster",1.12);
	info.addMinVersion("DFUBrowseDataRequest","ClusterType",1.12);
	info.addMinVersion("DFUBrowseDataRequest","ParentName",1.13);
	info.addMinVersion("DFUBrowseDataRequest","DisableUppercaseTranslation",1.17);
}

StringBuffer &CDFUBrowseDataRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FilterBy");
	form.appendf("  <tr><td><b>FilterBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUBrowseDataRequest","ShowColumns")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ShowColumns");
		form.appendf("  <tr><td><b>ShowColumns: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataRequest","SchemaOnly")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SchemaOnly");
		
	form.appendf("  <tr><td><b>SchemaOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartForGoback");
	form.appendf("  <tr><td><b>StartForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUBrowseDataRequest","CountForGoback")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("CountForGoback");
		form.appendf("  <tr><td><b>CountForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataRequest","ChooseFile")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ChooseFile");
		form.appendf("  <tr><td><b>ChooseFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataRequest","Cluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Cluster");
		form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataRequest","ClusterType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterType");
		form.appendf("  <tr><td><b>ClusterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataRequest","ParentName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ParentName");
		form.appendf("  <tr><td><b>ParentName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUBrowseDataRequest","DisableUppercaseTranslation")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DisableUppercaseTranslation");
		
	form.appendf("  <tr><td><b>DisableUppercaseTranslation? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUBrowseDataRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUBrowseDataRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
	m_FilterBy.marshall(rpc_resp, "FilterBy", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ShowColumns.marshall(rpc_resp, "ShowColumns", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.11))
		m_SchemaOnly.marshall(rpc_resp, "SchemaOnly", "", "", "");
	m_StartForGoback.marshall(rpc_resp, "StartForGoback", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_CountForGoback.marshall(rpc_resp, "CountForGoback", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_ChooseFile.marshall(rpc_resp, "ChooseFile", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_ClusterType.marshall(rpc_resp, "ClusterType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.13))
		m_ParentName.marshall(rpc_resp, "ParentName", "", "", "");
	m_Start.marshall(rpc_resp, "Start", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_DisableUppercaseTranslation.marshall(rpc_resp, "DisableUppercaseTranslation", "", "", "");
}


void CDFUBrowseDataRequest::copy(CDFUBrowseDataRequest &from)
{
	m_LogicalName.copy(from.m_LogicalName);
	m_FilterBy.copy(from.m_FilterBy);
	m_ShowColumns.copy(from.m_ShowColumns);
	m_SchemaOnly.copy(from.m_SchemaOnly);
	m_StartForGoback.copy(from.m_StartForGoback);
	m_CountForGoback.copy(from.m_CountForGoback);
	m_ChooseFile.copy(from.m_ChooseFile);
	m_Cluster.copy(from.m_Cluster);
	m_ClusterType.copy(from.m_ClusterType);
	m_ParentName.copy(from.m_ParentName);
	m_Start.copy(from.m_Start);
	m_Count.copy(from.m_Count);
	m_DisableUppercaseTranslation.copy(from.m_DisableUppercaseTranslation);
}


void CDFUBrowseDataRequest::copy(IConstDFUBrowseDataRequest &ifrom)
{
	setLogicalName(ifrom.getLogicalName());
	setFilterBy(ifrom.getFilterBy());
	setShowColumns(ifrom.getShowColumns());
	setSchemaOnly(ifrom.getSchemaOnly());
	setStartForGoback(ifrom.getStartForGoback());
	setCountForGoback(ifrom.getCountForGoback());
	setChooseFile(ifrom.getChooseFile());
	setCluster(ifrom.getCluster());
	setClusterType(ifrom.getClusterType());
	setParentName(ifrom.getParentName());
	setStart(ifrom.getStart());
	setCount(ifrom.getCount());
	setDisableUppercaseTranslation(ifrom.getDisableUppercaseTranslation());
}


void CDFUBrowseDataRequest::getAttributes(IProperties &attributes)
{
}


void CDFUBrowseDataRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
	m_FilterBy.toStr(ctx, buffer, "FilterBy", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ShowColumns.toStr(ctx, buffer, "ShowColumns", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.11))
		m_SchemaOnly.toStr(ctx, buffer, "SchemaOnly", "", true, "", "");
	m_StartForGoback.toStr(ctx, buffer, "StartForGoback", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_CountForGoback.toStr(ctx, buffer, "CountForGoback", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_ChooseFile.toStr(ctx, buffer, "ChooseFile", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_ClusterType.toStr(ctx, buffer, "ClusterType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.13))
		m_ParentName.toStr(ctx, buffer, "ParentName", "", true, "", "");
	m_Start.toStr(ctx, buffer, "Start", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_DisableUppercaseTranslation.toStr(ctx, buffer, "DisableUppercaseTranslation", "", true, "", "");
}


void CDFUBrowseDataRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUBrowseDataRequest::serializer(IEspContext* ctx, IConstDFUBrowseDataRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUBrowseDataRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field FilterBy
	{
		const char* s = src.getFilterBy();
		if (s && *s)
		{
			buffer.append("<FilterBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FilterBy>");
		}
	}
	// field ShowColumns
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getShowColumns();
		if (s && *s)
		{
			buffer.append("<ShowColumns>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowColumns>");
		}
	}
	// field SchemaOnly
	if ((clientVer==-1.0 || clientVer>=1.11))
	{
		bool b = src.getSchemaOnly();
		if (b)
			buffer.appendf("<SchemaOnly>1</SchemaOnly>");
	}
	// field StartForGoback
	{
		//*** default kind: TK_INT; type=int64, name=StartForGoback
		buffer.append("<StartForGoback>");
		buffer.append(src.getStartForGoback());
		buffer.append("</StartForGoback>");
	}
	// field CountForGoback
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		int n = src.getCountForGoback();
		if (n)
			buffer.appendf("<CountForGoback>%d</CountForGoback>", n);
	}
	// field ChooseFile
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		int n = src.getChooseFile();
		if (n)
			buffer.appendf("<ChooseFile>%d</ChooseFile>", n);
	}
	// field Cluster
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field ClusterType
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getClusterType();
		if (s && *s)
		{
			buffer.append("<ClusterType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterType>");
		}
	}
	// field ParentName
	if ((clientVer==-1.0 || clientVer>=1.13))
	{
		const char* s = src.getParentName();
		if (s && *s)
		{
			buffer.append("<ParentName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ParentName>");
		}
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field DisableUppercaseTranslation
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getDisableUppercaseTranslation();
		if (b)
			buffer.appendf("<DisableUppercaseTranslation>1</DisableUppercaseTranslation>");
	}
	if (keepRootTag)
		buffer.append("</DFUBrowseDataRequest>");
}

bool CDFUBrowseDataRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
	hasValue |= m_FilterBy.unmarshall(rpc_request, "FilterBy", basepath);
	hasValue |= m_ShowColumns.unmarshall(rpc_request, "ShowColumns", basepath);
	hasValue |= m_SchemaOnly.unmarshall(rpc_request, "SchemaOnly", basepath);
	hasValue |= m_StartForGoback.unmarshall(rpc_request, "StartForGoback", basepath);
	hasValue |= m_CountForGoback.unmarshall(rpc_request, "CountForGoback", basepath);
	hasValue |= m_ChooseFile.unmarshall(rpc_request, "ChooseFile", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(rpc_request, "ClusterType", basepath);
	hasValue |= m_ParentName.unmarshall(rpc_request, "ParentName", basepath);
	hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	hasValue |= m_DisableUppercaseTranslation.unmarshall(rpc_request, "DisableUppercaseTranslation", basepath);
	return hasValue;
}

bool CDFUBrowseDataRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_FilterBy.unmarshall(ctx, soapval, "FilterBy");
	hasValue |= m_ShowColumns.unmarshall(ctx, soapval, "ShowColumns");
	hasValue |= m_SchemaOnly.unmarshall(ctx, soapval, "SchemaOnly");
	hasValue |= m_StartForGoback.unmarshall(ctx, soapval, "StartForGoback");
	hasValue |= m_CountForGoback.unmarshall(ctx, soapval, "CountForGoback");
	hasValue |= m_ChooseFile.unmarshall(ctx, soapval, "ChooseFile");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_ClusterType.unmarshall(ctx, soapval, "ClusterType");
	hasValue |= m_ParentName.unmarshall(ctx, soapval, "ParentName");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, soapval, "DisableUppercaseTranslation");
	return hasValue;
}

bool CDFUBrowseDataRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_FilterBy.unmarshall(ctx, params, attachments, "FilterBy", basepath);
	hasValue |= m_ShowColumns.unmarshall(ctx, params, attachments, "ShowColumns", basepath);
	hasValue |= m_SchemaOnly.unmarshall(ctx, params, attachments, "SchemaOnly", basepath);
	hasValue |= m_StartForGoback.unmarshall(ctx, params, attachments, "StartForGoback", basepath);
	hasValue |= m_CountForGoback.unmarshall(ctx, params, attachments, "CountForGoback", basepath);
	hasValue |= m_ChooseFile.unmarshall(ctx, params, attachments, "ChooseFile", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(ctx, params, attachments, "ClusterType", basepath);
	hasValue |= m_ParentName.unmarshall(ctx, params, attachments, "ParentName", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, params, attachments, "DisableUppercaseTranslation", basepath);
	return hasValue;
}

const char * CDFUBrowseDataRequest::getLogicalName() { return m_LogicalName.query();}
const char * CDFUBrowseDataRequest::getFilterBy() { return m_FilterBy.query();}
const char * CDFUBrowseDataRequest::getShowColumns() { return m_ShowColumns.query();}
bool CDFUBrowseDataRequest::getSchemaOnly() { return m_SchemaOnly;}
__int64 CDFUBrowseDataRequest::getStartForGoback() { return m_StartForGoback;}
int CDFUBrowseDataRequest::getCountForGoback() { return m_CountForGoback;}
int CDFUBrowseDataRequest::getChooseFile() { return m_ChooseFile;}
const char * CDFUBrowseDataRequest::getCluster() { return m_Cluster.query();}
const char * CDFUBrowseDataRequest::getClusterType() { return m_ClusterType.query();}
const char * CDFUBrowseDataRequest::getParentName() { return m_ParentName.query();}
__int64 CDFUBrowseDataRequest::getStart() { return m_Start;}
int CDFUBrowseDataRequest::getCount() { return m_Count;}
bool CDFUBrowseDataRequest::getDisableUppercaseTranslation() { return m_DisableUppercaseTranslation;}
void CDFUBrowseDataRequest::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUBrowseDataRequest::setFilterBy(const char * val){ m_FilterBy.set(val); }
void CDFUBrowseDataRequest::setShowColumns(const char * val){ m_ShowColumns.set(val); }
void CDFUBrowseDataRequest::setSchemaOnly(bool val){ m_SchemaOnly=val; }
void CDFUBrowseDataRequest::setStartForGoback(__int64 val){ m_StartForGoback=val; }
void CDFUBrowseDataRequest::setCountForGoback(int val){ m_CountForGoback=val; }
void CDFUBrowseDataRequest::setChooseFile(int val){ m_ChooseFile=val; }
void CDFUBrowseDataRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUBrowseDataRequest::setClusterType(const char * val){ m_ClusterType.set(val); }
void CDFUBrowseDataRequest::setParentName(const char * val){ m_ParentName.set(val); }
void CDFUBrowseDataRequest::setStart(__int64 val){ m_Start=val; }
void CDFUBrowseDataRequest::setCount(int val){ m_Count=val; }
void CDFUBrowseDataRequest::setDisableUppercaseTranslation(bool val){ m_DisableUppercaseTranslation=val; }
extern "C"  IEspDFUBrowseDataRequest *createDFUBrowseDataRequest(const char *serv){return ((IEspDFUBrowseDataRequest *)new CDFUBrowseDataRequest(serv));}
extern "C"  IClientDFUBrowseDataRequest *createClientDFUBrowseDataRequest(const char *serv){return ((IClientDFUBrowseDataRequest *)new CDFUBrowseDataRequest(serv));}

//=======================================================
// class CDFUBrowseDataResponse Implementation
//=======================================================

CDFUBrowseDataResponse::CDFUBrowseDataResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_LogicalName(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_ChooseFile(0, nilRemove,false),m_SchemaOnly(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_ParentName(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_DisableUppercaseTranslation(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUBrowseDataResponse::CDFUBrowseDataResponse(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_LogicalName(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_ChooseFile(0, nilRemove,false),m_SchemaOnly(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_ParentName(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_DisableUppercaseTranslation(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataResponse");
}

CDFUBrowseDataResponse::CDFUBrowseDataResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilRemove),m_LogicalName(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_ChooseFile(0, nilRemove,false),m_SchemaOnly(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_ParentName(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_DisableUppercaseTranslation(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUBrowseDataResponse::CDFUBrowseDataResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilRemove),m_LogicalName(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_ChooseFile(0, nilRemove,false),m_SchemaOnly(0, nilRemove,false),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_ParentName(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_DisableUppercaseTranslation(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUBrowseDataResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUBrowseDataResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FilterBy\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUBrowseDataResponse","FilterForGoBack")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FilterForGoBack\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataResponse","ColumnsHidden")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnsHidden\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ColumnHidden\" type=\"tns:DFUDataColumn\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!context.suppressed("DFUBrowseDataResponse","ColumnCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnCount\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartForGoback\" type=\"xsd:long\"/>\n");
		if (!context.suppressed("DFUBrowseDataResponse","CountForGoback")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CountForGoback\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataResponse","ChooseFile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ChooseFile\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataResponse","SchemaOnly")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"SchemaOnly\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataResponse","Cluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataResponse","ClusterType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterType\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataResponse","ParentName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ParentName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Total\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUBrowseDataResponse","MsgToDisplay")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MsgToDisplay\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("DFUBrowseDataResponse","DisableUppercaseTranslation")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DisableUppercaseTranslation\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("DFUBrowseDataResponse","ColumnsHidden"))
			CDFUDataColumn::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUBrowseDataResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUBrowseDataResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUBrowseDataResponse","FilterForGoBack",1.05);
	info.addMinVersion("DFUBrowseDataResponse","ColumnsHidden",1.05);
	info.addMinVersion("DFUBrowseDataResponse","ColumnCount",1.05);
	info.addMinVersion("DFUBrowseDataResponse","CountForGoback",1.05);
	info.addMinVersion("DFUBrowseDataResponse","ChooseFile",1.1);
	info.addMinVersion("DFUBrowseDataResponse","SchemaOnly",1.11);
	info.addMinVersion("DFUBrowseDataResponse","Cluster",1.12);
	info.addMinVersion("DFUBrowseDataResponse","ClusterType",1.12);
	info.addMinVersion("DFUBrowseDataResponse","ParentName",1.13);
	info.addMinVersion("DFUBrowseDataResponse","MsgToDisplay",1.08);
	info.addMinVersion("DFUBrowseDataResponse","DisableUppercaseTranslation",1.17);
	if (!added.getValue("DFUDataColumn"))
	{
		added.setValue("DFUDataColumn",1);
		CDFUDataColumn::getMapInfo(info,added);
	}
}

StringBuffer &CDFUBrowseDataResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FilterBy");
	form.appendf("  <tr><td><b>FilterBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUBrowseDataResponse","FilterForGoBack")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FilterForGoBack");
		form.appendf("  <tr><td><b>FilterForGoBack: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataResponse","ColumnsHidden")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ColumnsHidden");
		form.appendf("<tr><td><b>ColumnsHidden: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUBrowseDataResponse","ColumnCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ColumnCount");
		form.appendf("  <tr><td><b>ColumnCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartForGoback");
	form.appendf("  <tr><td><b>StartForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUBrowseDataResponse","CountForGoback")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("CountForGoback");
		form.appendf("  <tr><td><b>CountForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataResponse","ChooseFile")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ChooseFile");
		form.appendf("  <tr><td><b>ChooseFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataResponse","SchemaOnly")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SchemaOnly");
		
	form.appendf("  <tr><td><b>SchemaOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUBrowseDataResponse","Cluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Cluster");
		form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataResponse","ClusterType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterType");
		form.appendf("  <tr><td><b>ClusterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataResponse","ParentName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ParentName");
		form.appendf("  <tr><td><b>ParentName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PageSize");
	form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Total");
	form.appendf("  <tr><td><b>Total: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUBrowseDataResponse","MsgToDisplay")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MsgToDisplay");
		form.appendf("  <tr><td><b>MsgToDisplay: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("DFUBrowseDataResponse","DisableUppercaseTranslation")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DisableUppercaseTranslation");
		
	form.appendf("  <tr><td><b>DisableUppercaseTranslation? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUBrowseDataResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUBrowseDataResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
		m_FilterBy.marshall(rpc_resp, "FilterBy", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_FilterForGoBack.marshall(rpc_resp, "FilterForGoBack", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_ColumnsHidden.marshall(rpc_resp, "ColumnsHidden", "ColumnHidden");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_ColumnCount.marshall(rpc_resp, "ColumnCount", "", "", "");
		m_StartForGoback.marshall(rpc_resp, "StartForGoback", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_CountForGoback.marshall(rpc_resp, "CountForGoback", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.1))
			m_ChooseFile.marshall(rpc_resp, "ChooseFile", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.11))
			m_SchemaOnly.marshall(rpc_resp, "SchemaOnly", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_ClusterType.marshall(rpc_resp, "ClusterType", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.13))
			m_ParentName.marshall(rpc_resp, "ParentName", "", "", "");
		m_Start.marshall(rpc_resp, "Start", "", "", "");
		m_Count.marshall(rpc_resp, "Count", "", "", "");
		m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
		m_Total.marshall(rpc_resp, "Total", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.08))
			m_MsgToDisplay.marshall(rpc_resp, "MsgToDisplay", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_DisableUppercaseTranslation.marshall(rpc_resp, "DisableUppercaseTranslation", "", "", "");
	}
}


void CDFUBrowseDataResponse::copy(CDFUBrowseDataResponse &from)
{
	m_Name.copy(from.m_Name);
	m_LogicalName.copy(from.m_LogicalName);
	m_FilterBy.copy(from.m_FilterBy);
	m_FilterForGoBack.copy(from.m_FilterForGoBack);
	m_ColumnsHidden.copy(from.m_ColumnsHidden);
	m_ColumnCount.copy(from.m_ColumnCount);
	m_StartForGoback.copy(from.m_StartForGoback);
	m_CountForGoback.copy(from.m_CountForGoback);
	m_ChooseFile.copy(from.m_ChooseFile);
	m_SchemaOnly.copy(from.m_SchemaOnly);
	m_Cluster.copy(from.m_Cluster);
	m_ClusterType.copy(from.m_ClusterType);
	m_ParentName.copy(from.m_ParentName);
	m_Start.copy(from.m_Start);
	m_Count.copy(from.m_Count);
	m_PageSize.copy(from.m_PageSize);
	m_Total.copy(from.m_Total);
	m_Result.copy(from.m_Result);
	m_MsgToDisplay.copy(from.m_MsgToDisplay);
	m_DisableUppercaseTranslation.copy(from.m_DisableUppercaseTranslation);
}


void CDFUBrowseDataResponse::copy(IConstDFUBrowseDataResponse &ifrom)
{
	setName(ifrom.getName());
	setLogicalName(ifrom.getLogicalName());
	setFilterBy(ifrom.getFilterBy());
	setFilterForGoBack(ifrom.getFilterForGoBack());
	setColumnsHidden(ifrom.getColumnsHidden());
	setColumnCount(ifrom.getColumnCount());
	setStartForGoback(ifrom.getStartForGoback());
	setCountForGoback(ifrom.getCountForGoback());
	setChooseFile(ifrom.getChooseFile());
	setSchemaOnly(ifrom.getSchemaOnly());
	setCluster(ifrom.getCluster());
	setClusterType(ifrom.getClusterType());
	setParentName(ifrom.getParentName());
	setStart(ifrom.getStart());
	setCount(ifrom.getCount());
	setPageSize(ifrom.getPageSize());
	setTotal(ifrom.getTotal());
	setResult(ifrom.getResult());
	setMsgToDisplay(ifrom.getMsgToDisplay());
	setDisableUppercaseTranslation(ifrom.getDisableUppercaseTranslation());
}


void CDFUBrowseDataResponse::getAttributes(IProperties &attributes)
{
}


void CDFUBrowseDataResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Name.toStr(ctx, buffer, "Name", "", false, "", "");
		m_LogicalName.toStr(ctx, buffer, "LogicalName", "", false, "", "");
		m_FilterBy.toStr(ctx, buffer, "FilterBy", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_FilterForGoBack.toStr(ctx, buffer, "FilterForGoBack", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_ColumnsHidden.toStr(ctx, buffer, "ColumnsHidden", "ColumnHidden");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_ColumnCount.toStr(ctx, buffer, "ColumnCount", "", false, "", "");
		m_StartForGoback.toStr(ctx, buffer, "StartForGoback", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.05))
			m_CountForGoback.toStr(ctx, buffer, "CountForGoback", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.1))
			m_ChooseFile.toStr(ctx, buffer, "ChooseFile", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.11))
			m_SchemaOnly.toStr(ctx, buffer, "SchemaOnly", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_Cluster.toStr(ctx, buffer, "Cluster", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.12))
			m_ClusterType.toStr(ctx, buffer, "ClusterType", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.13))
			m_ParentName.toStr(ctx, buffer, "ParentName", "", false, "", "");
		m_Start.toStr(ctx, buffer, "Start", "", false, "", "");
		m_Count.toStr(ctx, buffer, "Count", "", false, "", "");
		m_PageSize.toStr(ctx, buffer, "PageSize", "", false, "", "");
		m_Total.toStr(ctx, buffer, "Total", "", false, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.08))
			m_MsgToDisplay.toStr(ctx, buffer, "MsgToDisplay", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_DisableUppercaseTranslation.toStr(ctx, buffer, "DisableUppercaseTranslation", "", false, "", "");
	}
}


void CDFUBrowseDataResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUBrowseDataResponse::serializer(IEspContext* ctx, IConstDFUBrowseDataResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUBrowseDataResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field FilterBy
	{
		const char* s = src.getFilterBy();
		if (s && *s)
		{
			buffer.append("<FilterBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FilterBy>");
		}
	}
	// field FilterForGoBack
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getFilterForGoBack();
		if (s && *s)
		{
			buffer.append("<FilterForGoBack>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FilterForGoBack>");
		}
	}
	// field ColumnsHidden
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getColumnsHidden();
		int size = v.length();
		if (size>0)
			buffer.append("<ColumnsHidden>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<ColumnHidden>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</ColumnHidden>");
		}
		if (size>0)
			buffer.append("</ColumnsHidden>");
	}
	// field ColumnCount
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		int n = src.getColumnCount();
		if (n)
			buffer.appendf("<ColumnCount>%d</ColumnCount>", n);
	}
	// field StartForGoback
	{
		//*** default kind: TK_INT; type=int64, name=StartForGoback
		buffer.append("<StartForGoback>");
		buffer.append(src.getStartForGoback());
		buffer.append("</StartForGoback>");
	}
	// field CountForGoback
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		int n = src.getCountForGoback();
		if (n)
			buffer.appendf("<CountForGoback>%d</CountForGoback>", n);
	}
	// field ChooseFile
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		int n = src.getChooseFile();
		if (n)
			buffer.appendf("<ChooseFile>%d</ChooseFile>", n);
	}
	// field SchemaOnly
	if ((clientVer==-1.0 || clientVer>=1.11))
	{
		bool b = src.getSchemaOnly();
		if (b)
			buffer.appendf("<SchemaOnly>1</SchemaOnly>");
	}
	// field Cluster
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field ClusterType
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getClusterType();
		if (s && *s)
		{
			buffer.append("<ClusterType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterType>");
		}
	}
	// field ParentName
	if ((clientVer==-1.0 || clientVer>=1.13))
	{
		const char* s = src.getParentName();
		if (s && *s)
		{
			buffer.append("<ParentName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ParentName>");
		}
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Count
	{
		//*** default kind: TK_INT; type=int64, name=Count
		buffer.append("<Count>");
		buffer.append(src.getCount());
		buffer.append("</Count>");
	}
	// field PageSize
	{
		//*** default kind: TK_INT; type=int64, name=PageSize
		buffer.append("<PageSize>");
		buffer.append(src.getPageSize());
		buffer.append("</PageSize>");
	}
	// field Total
	{
		//*** default kind: TK_INT; type=int64, name=Total
		buffer.append("<Total>");
		buffer.append(src.getTotal());
		buffer.append("</Total>");
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	// field MsgToDisplay
	if ((clientVer==-1.0 || clientVer>=1.08))
	{
		const char* s = src.getMsgToDisplay();
		if (s && *s)
		{
			buffer.append("<MsgToDisplay>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MsgToDisplay>");
		}
	}
	// field DisableUppercaseTranslation
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getDisableUppercaseTranslation();
		if (b)
			buffer.appendf("<DisableUppercaseTranslation>1</DisableUppercaseTranslation>");
	}
	if (keepRootTag)
		buffer.append("</DFUBrowseDataResponse>");
}

bool CDFUBrowseDataResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
		hasValue |= m_FilterBy.unmarshall(rpc_request, "FilterBy", basepath);
		hasValue |= m_FilterForGoBack.unmarshall(rpc_request, "FilterForGoBack", basepath);
		hasValue |= m_ColumnsHidden.unmarshall(rpc_request, "ColumnsHidden", basepath);
		hasValue |= m_ColumnCount.unmarshall(rpc_request, "ColumnCount", basepath);
		hasValue |= m_StartForGoback.unmarshall(rpc_request, "StartForGoback", basepath);
		hasValue |= m_CountForGoback.unmarshall(rpc_request, "CountForGoback", basepath);
		hasValue |= m_ChooseFile.unmarshall(rpc_request, "ChooseFile", basepath);
		hasValue |= m_SchemaOnly.unmarshall(rpc_request, "SchemaOnly", basepath);
		hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
		hasValue |= m_ClusterType.unmarshall(rpc_request, "ClusterType", basepath);
		hasValue |= m_ParentName.unmarshall(rpc_request, "ParentName", basepath);
		hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
		hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
		hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
		hasValue |= m_Total.unmarshall(rpc_request, "Total", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
		hasValue |= m_MsgToDisplay.unmarshall(rpc_request, "MsgToDisplay", basepath);
		hasValue |= m_DisableUppercaseTranslation.unmarshall(rpc_request, "DisableUppercaseTranslation", basepath);
	}
	return hasValue;
}

bool CDFUBrowseDataResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_FilterBy.unmarshall(ctx, soapval, "FilterBy");
	hasValue |= m_FilterForGoBack.unmarshall(ctx, soapval, "FilterForGoBack");
	hasValue |= m_ColumnsHidden.unmarshall(ctx, soapval, "ColumnsHidden");
	hasValue |= m_ColumnCount.unmarshall(ctx, soapval, "ColumnCount");
	hasValue |= m_StartForGoback.unmarshall(ctx, soapval, "StartForGoback");
	hasValue |= m_CountForGoback.unmarshall(ctx, soapval, "CountForGoback");
	hasValue |= m_ChooseFile.unmarshall(ctx, soapval, "ChooseFile");
	hasValue |= m_SchemaOnly.unmarshall(ctx, soapval, "SchemaOnly");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_ClusterType.unmarshall(ctx, soapval, "ClusterType");
	hasValue |= m_ParentName.unmarshall(ctx, soapval, "ParentName");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_Total.unmarshall(ctx, soapval, "Total");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	hasValue |= m_MsgToDisplay.unmarshall(ctx, soapval, "MsgToDisplay");
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, soapval, "DisableUppercaseTranslation");
	return hasValue;
}

bool CDFUBrowseDataResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_FilterBy.unmarshall(ctx, params, attachments, "FilterBy", basepath);
	hasValue |= m_FilterForGoBack.unmarshall(ctx, params, attachments, "FilterForGoBack", basepath);
	hasValue |= m_ColumnsHidden.unmarshall(ctx, params, attachments, "ColumnsHidden", basepath);
	hasValue |= m_ColumnCount.unmarshall(ctx, params, attachments, "ColumnCount", basepath);
	hasValue |= m_StartForGoback.unmarshall(ctx, params, attachments, "StartForGoback", basepath);
	hasValue |= m_CountForGoback.unmarshall(ctx, params, attachments, "CountForGoback", basepath);
	hasValue |= m_ChooseFile.unmarshall(ctx, params, attachments, "ChooseFile", basepath);
	hasValue |= m_SchemaOnly.unmarshall(ctx, params, attachments, "SchemaOnly", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(ctx, params, attachments, "ClusterType", basepath);
	hasValue |= m_ParentName.unmarshall(ctx, params, attachments, "ParentName", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_Total.unmarshall(ctx, params, attachments, "Total", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	hasValue |= m_MsgToDisplay.unmarshall(ctx, params, attachments, "MsgToDisplay", basepath);
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, params, attachments, "DisableUppercaseTranslation", basepath);
	return hasValue;
}

const char * CDFUBrowseDataResponse::getName() { return m_Name.query();}
const char * CDFUBrowseDataResponse::getLogicalName() { return m_LogicalName.query();}
const char * CDFUBrowseDataResponse::getFilterBy() { return m_FilterBy.query();}
const char * CDFUBrowseDataResponse::getFilterForGoBack() { return m_FilterForGoBack.query();}
IArrayOf<IConstDFUDataColumn> & CDFUBrowseDataResponse::getColumnsHidden() { return (IArrayOf<IConstDFUDataColumn> &) m_ColumnsHidden; }
bool CDFUBrowseDataResponse::getColumnCount_isNull(){return m_ColumnCount.is_nil();}
int CDFUBrowseDataResponse::getColumnCount() { return m_ColumnCount;}
bool CDFUBrowseDataResponse::getStartForGoback_isNull(){return m_StartForGoback.is_nil();}
__int64 CDFUBrowseDataResponse::getStartForGoback() { return m_StartForGoback;}
bool CDFUBrowseDataResponse::getCountForGoback_isNull(){return m_CountForGoback.is_nil();}
int CDFUBrowseDataResponse::getCountForGoback() { return m_CountForGoback;}
bool CDFUBrowseDataResponse::getChooseFile_isNull(){return m_ChooseFile.is_nil();}
int CDFUBrowseDataResponse::getChooseFile() { return m_ChooseFile;}
bool CDFUBrowseDataResponse::getSchemaOnly_isNull(){return m_SchemaOnly.is_nil();}
bool CDFUBrowseDataResponse::getSchemaOnly() { return m_SchemaOnly;}
const char * CDFUBrowseDataResponse::getCluster() { return m_Cluster.query();}
const char * CDFUBrowseDataResponse::getClusterType() { return m_ClusterType.query();}
const char * CDFUBrowseDataResponse::getParentName() { return m_ParentName.query();}
bool CDFUBrowseDataResponse::getStart_isNull(){return m_Start.is_nil();}
__int64 CDFUBrowseDataResponse::getStart() { return m_Start;}
bool CDFUBrowseDataResponse::getCount_isNull(){return m_Count.is_nil();}
__int64 CDFUBrowseDataResponse::getCount() { return m_Count;}
bool CDFUBrowseDataResponse::getPageSize_isNull(){return m_PageSize.is_nil();}
__int64 CDFUBrowseDataResponse::getPageSize() { return m_PageSize;}
bool CDFUBrowseDataResponse::getTotal_isNull(){return m_Total.is_nil();}
__int64 CDFUBrowseDataResponse::getTotal() { return m_Total;}
const char * CDFUBrowseDataResponse::getResult() { return m_Result.query();}
const char * CDFUBrowseDataResponse::getMsgToDisplay() { return m_MsgToDisplay.query();}
bool CDFUBrowseDataResponse::getDisableUppercaseTranslation_isNull(){return m_DisableUppercaseTranslation.is_nil();}
bool CDFUBrowseDataResponse::getDisableUppercaseTranslation() { return m_DisableUppercaseTranslation;}
void CDFUBrowseDataResponse::setName(const char * val){ m_Name.set(val); }
void CDFUBrowseDataResponse::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUBrowseDataResponse::setFilterBy(const char * val){ m_FilterBy.set(val); }
void CDFUBrowseDataResponse::setFilterForGoBack(const char * val){ m_FilterForGoBack.set(val); }
void CDFUBrowseDataResponse::setColumnsHidden(IArrayOf<IEspDFUDataColumn> &val)
{
	m_ColumnsHidden->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_ColumnsHidden.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUBrowseDataResponse::setColumnsHidden(IArrayOf<IConstDFUDataColumn> &val)
{
	m_ColumnsHidden->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_ColumnsHidden.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUBrowseDataResponse::setColumnCount_null(){ m_ColumnCount.Nil(); }void CDFUBrowseDataResponse::setColumnCount(int val){ m_ColumnCount=val; }
void CDFUBrowseDataResponse::setStartForGoback_null(){ m_StartForGoback.Nil(); }void CDFUBrowseDataResponse::setStartForGoback(__int64 val){ m_StartForGoback=val; }
void CDFUBrowseDataResponse::setCountForGoback_null(){ m_CountForGoback.Nil(); }void CDFUBrowseDataResponse::setCountForGoback(int val){ m_CountForGoback=val; }
void CDFUBrowseDataResponse::setChooseFile_null(){ m_ChooseFile.Nil(); }void CDFUBrowseDataResponse::setChooseFile(int val){ m_ChooseFile=val; }
void CDFUBrowseDataResponse::setSchemaOnly_null(){ m_SchemaOnly.Nil(); }void CDFUBrowseDataResponse::setSchemaOnly(bool val){ m_SchemaOnly=val; }
void CDFUBrowseDataResponse::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUBrowseDataResponse::setClusterType(const char * val){ m_ClusterType.set(val); }
void CDFUBrowseDataResponse::setParentName(const char * val){ m_ParentName.set(val); }
void CDFUBrowseDataResponse::setStart_null(){ m_Start.Nil(); }void CDFUBrowseDataResponse::setStart(__int64 val){ m_Start=val; }
void CDFUBrowseDataResponse::setCount_null(){ m_Count.Nil(); }void CDFUBrowseDataResponse::setCount(__int64 val){ m_Count=val; }
void CDFUBrowseDataResponse::setPageSize_null(){ m_PageSize.Nil(); }void CDFUBrowseDataResponse::setPageSize(__int64 val){ m_PageSize=val; }
void CDFUBrowseDataResponse::setTotal_null(){ m_Total.Nil(); }void CDFUBrowseDataResponse::setTotal(__int64 val){ m_Total=val; }
void CDFUBrowseDataResponse::setResult(const char * val){ m_Result.set(val); }
void CDFUBrowseDataResponse::setMsgToDisplay(const char * val){ m_MsgToDisplay.set(val); }
void CDFUBrowseDataResponse::setDisableUppercaseTranslation_null(){ m_DisableUppercaseTranslation.Nil(); }void CDFUBrowseDataResponse::setDisableUppercaseTranslation(bool val){ m_DisableUppercaseTranslation=val; }
extern "C"  IEspDFUBrowseDataResponse *createDFUBrowseDataResponse(const char *serv){return ((IEspDFUBrowseDataResponse *)new CDFUBrowseDataResponse(serv));}
extern "C"  IClientDFUBrowseDataResponse *createClientDFUBrowseDataResponse(const char *serv){return ((IClientDFUBrowseDataResponse *)new CDFUBrowseDataResponse(serv));}

//=======================================================
// class CDFUData Implementation
//=======================================================

CDFUData::CDFUData(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Data(nilIgnore),m_NumRows(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUData");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUData::CDFUData(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Data(nilIgnore),m_NumRows(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUData");
}

StringBuffer &CDFUData::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Data\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumRows\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUData::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUData::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUData::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Data");
	form.appendf("  <tr><td><b>Data: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NumRows");
	form.appendf("  <tr><td><b>NumRows: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUData::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUData::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Data.marshall(rpc_resp, "Data", "", "", "");
	m_NumRows.marshall(rpc_resp, "NumRows", "", "", "");
}


void CDFUData::copy(CDFUData &from)
{
	m_Name.copy(from.m_Name);
	m_Data.copy(from.m_Data);
	m_NumRows.copy(from.m_NumRows);
}


void CDFUData::copy(IConstDFUData &ifrom)
{
	setName(ifrom.getName());
	setData(ifrom.getData());
	setNumRows(ifrom.getNumRows());
}


void CDFUData::getAttributes(IProperties &attributes)
{
}


void CDFUData::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Data.toStr(ctx, buffer, "Data", "", true, "", "");
	m_NumRows.toStr(ctx, buffer, "NumRows", "", true, "", "");
}


void CDFUData::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUData::serializer(IEspContext* ctx, IConstDFUData &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUData>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Data
	{
		const char* s = src.getData();
		if (s && *s)
		{
			buffer.append("<Data>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Data>");
		}
	}
	// field NumRows
	{
		//*** default kind: TK_INT; type=int64, name=NumRows
		buffer.append("<NumRows>");
		buffer.append(src.getNumRows());
		buffer.append("</NumRows>");
	}
	if (keepRootTag)
		buffer.append("</DFUData>");
}

bool CDFUData::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Data.unmarshall(rpc_request, "Data", basepath);
	hasValue |= m_NumRows.unmarshall(rpc_request, "NumRows", basepath);
	return hasValue;
}

bool CDFUData::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Data.unmarshall(ctx, soapval, "Data");
	hasValue |= m_NumRows.unmarshall(ctx, soapval, "NumRows");
	return hasValue;
}

bool CDFUData::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Data.unmarshall(ctx, params, attachments, "Data", basepath);
	hasValue |= m_NumRows.unmarshall(ctx, params, attachments, "NumRows", basepath);
	return hasValue;
}

const char * CDFUData::getName() { return m_Name.query();}
const char * CDFUData::getData() { return m_Data.query();}
__int64 CDFUData::getNumRows() { return m_NumRows;}
void CDFUData::setName(const char * val){ m_Name.set(val); }
void CDFUData::setData(const char * val){ m_Data.set(val); }
void CDFUData::setNumRows(__int64 val){ m_NumRows=val; }
extern "C"  IEspDFUData *createDFUData(const char *serv, const char *msgname){return ((IEspDFUData *)new CDFUData(serv /*, msgname*/));}
extern "C"  IClientDFUData *createClientDFUData(const char *serv, const char *msgname){return ((IClientDFUData *)new CDFUData(serv /*, msgname*/));}

//=======================================================
// class CDFUSearchDataRequest Implementation
//=======================================================

CDFUSearchDataRequest::CDFUSearchDataRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_OpenLogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false),m_LogicalName(nilIgnore),m_ParentName(nilIgnore),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_File(nilIgnore),m_Key(nilIgnore),m_SchemaOnly(1, nilIgnore,false),m_RoxieSelections(1, nilIgnore,false),m_DisableUppercaseTranslation(nilIgnore),m_SelectedKey(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUSearchDataRequest::CDFUSearchDataRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_OpenLogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false),m_LogicalName(nilIgnore),m_ParentName(nilIgnore),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_File(nilIgnore),m_Key(nilIgnore),m_SchemaOnly(1, nilIgnore,false),m_RoxieSelections(1, nilIgnore,false),m_DisableUppercaseTranslation(nilIgnore),m_SelectedKey(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataRequest");
}

CDFUSearchDataRequest::CDFUSearchDataRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_OpenLogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false),m_LogicalName(nilIgnore),m_ParentName(nilIgnore),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_File(nilIgnore),m_Key(nilIgnore),m_SchemaOnly(1, nilIgnore,false),m_RoxieSelections(1, nilIgnore,false),m_DisableUppercaseTranslation(nilIgnore),m_SelectedKey(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUSearchDataRequest::CDFUSearchDataRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore),m_ClusterType(nilIgnore),m_OpenLogicalName(nilIgnore),m_FilterBy(nilIgnore),m_ShowColumns(nilIgnore),m_ChooseFile(0, nilIgnore,false),m_StartIndex(0, nilIgnore,false),m_EndIndex(0, nilIgnore,false),m_LogicalName(nilIgnore),m_ParentName(nilIgnore),m_StartForGoback(nilIgnore),m_CountForGoback(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore),m_File(nilIgnore),m_Key(nilIgnore),m_SchemaOnly(1, nilIgnore,false),m_RoxieSelections(1, nilIgnore,false),m_DisableUppercaseTranslation(nilIgnore),m_SelectedKey(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUSearchDataRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"OpenLogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FilterBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowColumns\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ChooseFile\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartIndex\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndIndex\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ParentName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartForGoback\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CountForGoback\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"File\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Key\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"SchemaOnly\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("DFUSearchDataRequest","RoxieSelections")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"RoxieSelections\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataRequest","DisableUppercaseTranslation")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DisableUppercaseTranslation\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataRequest","SelectedKey")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SelectedKey\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUSearchDataRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUSearchDataRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUSearchDataRequest","RoxieSelections",1.17);
	info.addMinVersion("DFUSearchDataRequest","DisableUppercaseTranslation",1.17);
	info.addMinVersion("DFUSearchDataRequest","SelectedKey",1.19);
}

StringBuffer &CDFUSearchDataRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterType");
	form.appendf("  <tr><td><b>ClusterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OpenLogicalName");
	form.appendf("  <tr><td><b>OpenLogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FilterBy");
	form.appendf("  <tr><td><b>FilterBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowColumns");
	form.appendf("  <tr><td><b>ShowColumns: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ChooseFile");
	form.appendf("  <tr><td><b>ChooseFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartIndex");
	form.appendf("  <tr><td><b>StartIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndIndex");
	form.appendf("  <tr><td><b>EndIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ParentName");
	form.appendf("  <tr><td><b>ParentName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartForGoback");
	form.appendf("  <tr><td><b>StartForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("CountForGoback");
	form.appendf("  <tr><td><b>CountForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("File");
	form.appendf("  <tr><td><b>File: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Key");
	form.appendf("  <tr><td><b>Key: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SchemaOnly");
	
	form.appendf("  <tr><td><b>SchemaOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	if (!context.suppressed("DFUSearchDataRequest","RoxieSelections")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RoxieSelections");
		
	form.appendf("  <tr><td><b>RoxieSelections? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUSearchDataRequest","DisableUppercaseTranslation")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DisableUppercaseTranslation");
		
	form.appendf("  <tr><td><b>DisableUppercaseTranslation? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUSearchDataRequest","SelectedKey")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SelectedKey");
		form.appendf("  <tr><td><b>SelectedKey: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUSearchDataRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUSearchDataRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_ClusterType.marshall(rpc_resp, "ClusterType", "", "", "");
	m_OpenLogicalName.marshall(rpc_resp, "OpenLogicalName", "", "", "");
	m_FilterBy.marshall(rpc_resp, "FilterBy", "", "", "");
	m_ShowColumns.marshall(rpc_resp, "ShowColumns", "", "", "");
	m_ChooseFile.marshall(rpc_resp, "ChooseFile", "", "", "");
	m_StartIndex.marshall(rpc_resp, "StartIndex", "", "", "");
	m_EndIndex.marshall(rpc_resp, "EndIndex", "", "", "");
	m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
	m_ParentName.marshall(rpc_resp, "ParentName", "", "", "");
	m_StartForGoback.marshall(rpc_resp, "StartForGoback", "", "", "");
	m_CountForGoback.marshall(rpc_resp, "CountForGoback", "", "", "");
	m_Start.marshall(rpc_resp, "Start", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
	m_File.marshall(rpc_resp, "File", "", "", "");
	m_Key.marshall(rpc_resp, "Key", "", "", "");
	m_SchemaOnly.marshall(rpc_resp, "SchemaOnly", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_RoxieSelections.marshall(rpc_resp, "RoxieSelections", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_DisableUppercaseTranslation.marshall(rpc_resp, "DisableUppercaseTranslation", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_SelectedKey.marshall(rpc_resp, "SelectedKey", "", "", "");
}


void CDFUSearchDataRequest::copy(CDFUSearchDataRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_ClusterType.copy(from.m_ClusterType);
	m_OpenLogicalName.copy(from.m_OpenLogicalName);
	m_FilterBy.copy(from.m_FilterBy);
	m_ShowColumns.copy(from.m_ShowColumns);
	m_ChooseFile.copy(from.m_ChooseFile);
	m_StartIndex.copy(from.m_StartIndex);
	m_EndIndex.copy(from.m_EndIndex);
	m_LogicalName.copy(from.m_LogicalName);
	m_ParentName.copy(from.m_ParentName);
	m_StartForGoback.copy(from.m_StartForGoback);
	m_CountForGoback.copy(from.m_CountForGoback);
	m_Start.copy(from.m_Start);
	m_Count.copy(from.m_Count);
	m_File.copy(from.m_File);
	m_Key.copy(from.m_Key);
	m_SchemaOnly.copy(from.m_SchemaOnly);
	m_RoxieSelections.copy(from.m_RoxieSelections);
	m_DisableUppercaseTranslation.copy(from.m_DisableUppercaseTranslation);
	m_SelectedKey.copy(from.m_SelectedKey);
}


void CDFUSearchDataRequest::copy(IConstDFUSearchDataRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setClusterType(ifrom.getClusterType());
	setOpenLogicalName(ifrom.getOpenLogicalName());
	setFilterBy(ifrom.getFilterBy());
	setShowColumns(ifrom.getShowColumns());
	setChooseFile(ifrom.getChooseFile());
	setStartIndex(ifrom.getStartIndex());
	setEndIndex(ifrom.getEndIndex());
	setLogicalName(ifrom.getLogicalName());
	setParentName(ifrom.getParentName());
	setStartForGoback(ifrom.getStartForGoback());
	setCountForGoback(ifrom.getCountForGoback());
	setStart(ifrom.getStart());
	setCount(ifrom.getCount());
	setFile(ifrom.getFile());
	setKey(ifrom.getKey());
	setSchemaOnly(ifrom.getSchemaOnly());
	setRoxieSelections(ifrom.getRoxieSelections());
	setDisableUppercaseTranslation(ifrom.getDisableUppercaseTranslation());
	setSelectedKey(ifrom.getSelectedKey());
}


void CDFUSearchDataRequest::getAttributes(IProperties &attributes)
{
}


void CDFUSearchDataRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_ClusterType.toStr(ctx, buffer, "ClusterType", "", true, "", "");
	m_OpenLogicalName.toStr(ctx, buffer, "OpenLogicalName", "", true, "", "");
	m_FilterBy.toStr(ctx, buffer, "FilterBy", "", true, "", "");
	m_ShowColumns.toStr(ctx, buffer, "ShowColumns", "", true, "", "");
	m_ChooseFile.toStr(ctx, buffer, "ChooseFile", "", true, "", "");
	m_StartIndex.toStr(ctx, buffer, "StartIndex", "", true, "", "");
	m_EndIndex.toStr(ctx, buffer, "EndIndex", "", true, "", "");
	m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
	m_ParentName.toStr(ctx, buffer, "ParentName", "", true, "", "");
	m_StartForGoback.toStr(ctx, buffer, "StartForGoback", "", true, "", "");
	m_CountForGoback.toStr(ctx, buffer, "CountForGoback", "", true, "", "");
	m_Start.toStr(ctx, buffer, "Start", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
	m_File.toStr(ctx, buffer, "File", "", true, "", "");
	m_Key.toStr(ctx, buffer, "Key", "", true, "", "");
	m_SchemaOnly.toStr(ctx, buffer, "SchemaOnly", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_RoxieSelections.toStr(ctx, buffer, "RoxieSelections", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_DisableUppercaseTranslation.toStr(ctx, buffer, "DisableUppercaseTranslation", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_SelectedKey.toStr(ctx, buffer, "SelectedKey", "", true, "", "");
}


void CDFUSearchDataRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUSearchDataRequest::serializer(IEspContext* ctx, IConstDFUSearchDataRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUSearchDataRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field ClusterType
	{
		const char* s = src.getClusterType();
		if (s && *s)
		{
			buffer.append("<ClusterType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterType>");
		}
	}
	// field OpenLogicalName
	{
		const char* s = src.getOpenLogicalName();
		if (s && *s)
		{
			buffer.append("<OpenLogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</OpenLogicalName>");
		}
	}
	// field FilterBy
	{
		const char* s = src.getFilterBy();
		if (s && *s)
		{
			buffer.append("<FilterBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FilterBy>");
		}
	}
	// field ShowColumns
	{
		const char* s = src.getShowColumns();
		if (s && *s)
		{
			buffer.append("<ShowColumns>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowColumns>");
		}
	}
	// field ChooseFile
	{
		int n = src.getChooseFile();
		if (n)
			buffer.appendf("<ChooseFile>%d</ChooseFile>", n);
	}
	// field StartIndex
	{
		//*** default kind: TK_INT; type=int64, name=StartIndex
		buffer.append("<StartIndex>");
		buffer.append(src.getStartIndex());
		buffer.append("</StartIndex>");
	}
	// field EndIndex
	{
		//*** default kind: TK_INT; type=int64, name=EndIndex
		buffer.append("<EndIndex>");
		buffer.append(src.getEndIndex());
		buffer.append("</EndIndex>");
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field ParentName
	{
		const char* s = src.getParentName();
		if (s && *s)
		{
			buffer.append("<ParentName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ParentName>");
		}
	}
	// field StartForGoback
	{
		//*** default kind: TK_INT; type=int64, name=StartForGoback
		buffer.append("<StartForGoback>");
		buffer.append(src.getStartForGoback());
		buffer.append("</StartForGoback>");
	}
	// field CountForGoback
	{
		int n = src.getCountForGoback();
		if (n)
			buffer.appendf("<CountForGoback>%d</CountForGoback>", n);
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field File
	{
		const char* s = src.getFile();
		if (s && *s)
		{
			buffer.append("<File>");
			encodeUtf8XML(s,buffer);
			buffer.append("</File>");
		}
	}
	// field Key
	{
		const char* s = src.getKey();
		if (s && *s)
		{
			buffer.append("<Key>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Key>");
		}
	}
	// field SchemaOnly
	{
		bool b = src.getSchemaOnly();
		if (b)
			buffer.appendf("<SchemaOnly>1</SchemaOnly>");
	}
	// field RoxieSelections
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getRoxieSelections();
		if (b)
			buffer.appendf("<RoxieSelections>1</RoxieSelections>");
	}
	// field DisableUppercaseTranslation
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getDisableUppercaseTranslation();
		if (b)
			buffer.appendf("<DisableUppercaseTranslation>1</DisableUppercaseTranslation>");
	}
	// field SelectedKey
	if ((clientVer==-1.0 || clientVer>=1.19))
	{
		const char* s = src.getSelectedKey();
		if (s && *s)
		{
			buffer.append("<SelectedKey>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SelectedKey>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUSearchDataRequest>");
}

bool CDFUSearchDataRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(rpc_request, "ClusterType", basepath);
	hasValue |= m_OpenLogicalName.unmarshall(rpc_request, "OpenLogicalName", basepath);
	hasValue |= m_FilterBy.unmarshall(rpc_request, "FilterBy", basepath);
	hasValue |= m_ShowColumns.unmarshall(rpc_request, "ShowColumns", basepath);
	hasValue |= m_ChooseFile.unmarshall(rpc_request, "ChooseFile", basepath);
	hasValue |= m_StartIndex.unmarshall(rpc_request, "StartIndex", basepath);
	hasValue |= m_EndIndex.unmarshall(rpc_request, "EndIndex", basepath);
	hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
	hasValue |= m_ParentName.unmarshall(rpc_request, "ParentName", basepath);
	hasValue |= m_StartForGoback.unmarshall(rpc_request, "StartForGoback", basepath);
	hasValue |= m_CountForGoback.unmarshall(rpc_request, "CountForGoback", basepath);
	hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	hasValue |= m_File.unmarshall(rpc_request, "File", basepath);
	hasValue |= m_Key.unmarshall(rpc_request, "Key", basepath);
	hasValue |= m_SchemaOnly.unmarshall(rpc_request, "SchemaOnly", basepath);
	hasValue |= m_RoxieSelections.unmarshall(rpc_request, "RoxieSelections", basepath);
	hasValue |= m_DisableUppercaseTranslation.unmarshall(rpc_request, "DisableUppercaseTranslation", basepath);
	hasValue |= m_SelectedKey.unmarshall(rpc_request, "SelectedKey", basepath);
	return hasValue;
}

bool CDFUSearchDataRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_ClusterType.unmarshall(ctx, soapval, "ClusterType");
	hasValue |= m_OpenLogicalName.unmarshall(ctx, soapval, "OpenLogicalName");
	hasValue |= m_FilterBy.unmarshall(ctx, soapval, "FilterBy");
	hasValue |= m_ShowColumns.unmarshall(ctx, soapval, "ShowColumns");
	hasValue |= m_ChooseFile.unmarshall(ctx, soapval, "ChooseFile");
	hasValue |= m_StartIndex.unmarshall(ctx, soapval, "StartIndex");
	hasValue |= m_EndIndex.unmarshall(ctx, soapval, "EndIndex");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_ParentName.unmarshall(ctx, soapval, "ParentName");
	hasValue |= m_StartForGoback.unmarshall(ctx, soapval, "StartForGoback");
	hasValue |= m_CountForGoback.unmarshall(ctx, soapval, "CountForGoback");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_File.unmarshall(ctx, soapval, "File");
	hasValue |= m_Key.unmarshall(ctx, soapval, "Key");
	hasValue |= m_SchemaOnly.unmarshall(ctx, soapval, "SchemaOnly");
	hasValue |= m_RoxieSelections.unmarshall(ctx, soapval, "RoxieSelections");
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, soapval, "DisableUppercaseTranslation");
	hasValue |= m_SelectedKey.unmarshall(ctx, soapval, "SelectedKey");
	return hasValue;
}

bool CDFUSearchDataRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(ctx, params, attachments, "ClusterType", basepath);
	hasValue |= m_OpenLogicalName.unmarshall(ctx, params, attachments, "OpenLogicalName", basepath);
	hasValue |= m_FilterBy.unmarshall(ctx, params, attachments, "FilterBy", basepath);
	hasValue |= m_ShowColumns.unmarshall(ctx, params, attachments, "ShowColumns", basepath);
	hasValue |= m_ChooseFile.unmarshall(ctx, params, attachments, "ChooseFile", basepath);
	hasValue |= m_StartIndex.unmarshall(ctx, params, attachments, "StartIndex", basepath);
	hasValue |= m_EndIndex.unmarshall(ctx, params, attachments, "EndIndex", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_ParentName.unmarshall(ctx, params, attachments, "ParentName", basepath);
	hasValue |= m_StartForGoback.unmarshall(ctx, params, attachments, "StartForGoback", basepath);
	hasValue |= m_CountForGoback.unmarshall(ctx, params, attachments, "CountForGoback", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_File.unmarshall(ctx, params, attachments, "File", basepath);
	hasValue |= m_Key.unmarshall(ctx, params, attachments, "Key", basepath);
	hasValue |= m_SchemaOnly.unmarshall(ctx, params, attachments, "SchemaOnly", basepath);
	hasValue |= m_RoxieSelections.unmarshall(ctx, params, attachments, "RoxieSelections", basepath);
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, params, attachments, "DisableUppercaseTranslation", basepath);
	hasValue |= m_SelectedKey.unmarshall(ctx, params, attachments, "SelectedKey", basepath);
	return hasValue;
}

const char * CDFUSearchDataRequest::getCluster() { return m_Cluster.query();}
const char * CDFUSearchDataRequest::getClusterType() { return m_ClusterType.query();}
const char * CDFUSearchDataRequest::getOpenLogicalName() { return m_OpenLogicalName.query();}
const char * CDFUSearchDataRequest::getFilterBy() { return m_FilterBy.query();}
const char * CDFUSearchDataRequest::getShowColumns() { return m_ShowColumns.query();}
int CDFUSearchDataRequest::getChooseFile() { return m_ChooseFile;}
__int64 CDFUSearchDataRequest::getStartIndex() { return m_StartIndex;}
__int64 CDFUSearchDataRequest::getEndIndex() { return m_EndIndex;}
const char * CDFUSearchDataRequest::getLogicalName() { return m_LogicalName.query();}
const char * CDFUSearchDataRequest::getParentName() { return m_ParentName.query();}
__int64 CDFUSearchDataRequest::getStartForGoback() { return m_StartForGoback;}
int CDFUSearchDataRequest::getCountForGoback() { return m_CountForGoback;}
__int64 CDFUSearchDataRequest::getStart() { return m_Start;}
int CDFUSearchDataRequest::getCount() { return m_Count;}
const char * CDFUSearchDataRequest::getFile() { return m_File.query();}
const char * CDFUSearchDataRequest::getKey() { return m_Key.query();}
bool CDFUSearchDataRequest::getSchemaOnly() { return m_SchemaOnly;}
bool CDFUSearchDataRequest::getRoxieSelections() { return m_RoxieSelections;}
bool CDFUSearchDataRequest::getDisableUppercaseTranslation() { return m_DisableUppercaseTranslation;}
const char * CDFUSearchDataRequest::getSelectedKey() { return m_SelectedKey.query();}
void CDFUSearchDataRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUSearchDataRequest::setClusterType(const char * val){ m_ClusterType.set(val); }
void CDFUSearchDataRequest::setOpenLogicalName(const char * val){ m_OpenLogicalName.set(val); }
void CDFUSearchDataRequest::setFilterBy(const char * val){ m_FilterBy.set(val); }
void CDFUSearchDataRequest::setShowColumns(const char * val){ m_ShowColumns.set(val); }
void CDFUSearchDataRequest::setChooseFile(int val){ m_ChooseFile=val; }
void CDFUSearchDataRequest::setStartIndex(__int64 val){ m_StartIndex=val; }
void CDFUSearchDataRequest::setEndIndex(__int64 val){ m_EndIndex=val; }
void CDFUSearchDataRequest::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUSearchDataRequest::setParentName(const char * val){ m_ParentName.set(val); }
void CDFUSearchDataRequest::setStartForGoback(__int64 val){ m_StartForGoback=val; }
void CDFUSearchDataRequest::setCountForGoback(int val){ m_CountForGoback=val; }
void CDFUSearchDataRequest::setStart(__int64 val){ m_Start=val; }
void CDFUSearchDataRequest::setCount(int val){ m_Count=val; }
void CDFUSearchDataRequest::setFile(const char * val){ m_File.set(val); }
void CDFUSearchDataRequest::setKey(const char * val){ m_Key.set(val); }
void CDFUSearchDataRequest::setSchemaOnly(bool val){ m_SchemaOnly=val; }
void CDFUSearchDataRequest::setRoxieSelections(bool val){ m_RoxieSelections=val; }
void CDFUSearchDataRequest::setDisableUppercaseTranslation(bool val){ m_DisableUppercaseTranslation=val; }
void CDFUSearchDataRequest::setSelectedKey(const char * val){ m_SelectedKey.set(val); }
extern "C"  IEspDFUSearchDataRequest *createDFUSearchDataRequest(const char *serv){return ((IEspDFUSearchDataRequest *)new CDFUSearchDataRequest(serv));}
extern "C"  IClientDFUSearchDataRequest *createClientDFUSearchDataRequest(const char *serv){return ((IClientDFUSearchDataRequest *)new CDFUSearchDataRequest(serv));}

//=======================================================
// class CDFUSearchDataResponse Implementation
//=======================================================

CDFUSearchDataResponse::CDFUSearchDataResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_OpenLogicalName(nilRemove),m_LogicalName(nilRemove),m_ParentName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Name(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_File(nilRemove),m_Key(nilRemove),m_SchemaOnly(nilRemove),m_RoxieSelections(nilRemove),m_DisableUppercaseTranslation(nilRemove),m_AutoUppercaseTranslation(nilRemove),m_SelectedKey(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUSearchDataResponse::CDFUSearchDataResponse(const char *serviceName, const char *bc)
	: m_OpenLogicalName(nilRemove),m_LogicalName(nilRemove),m_ParentName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Name(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_File(nilRemove),m_Key(nilRemove),m_SchemaOnly(nilRemove),m_RoxieSelections(nilRemove),m_DisableUppercaseTranslation(nilRemove),m_AutoUppercaseTranslation(nilRemove),m_SelectedKey(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataResponse");
}

CDFUSearchDataResponse::CDFUSearchDataResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_OpenLogicalName(nilRemove),m_LogicalName(nilRemove),m_ParentName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Name(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_File(nilRemove),m_Key(nilRemove),m_SchemaOnly(nilRemove),m_RoxieSelections(nilRemove),m_DisableUppercaseTranslation(nilRemove),m_AutoUppercaseTranslation(nilRemove),m_SelectedKey(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUSearchDataResponse::CDFUSearchDataResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_OpenLogicalName(nilRemove),m_LogicalName(nilRemove),m_ParentName(nilRemove),m_StartIndex(nilRemove),m_EndIndex(nilRemove),m_DFUDataKeyedColumns1(nilRemove),m_DFUDataKeyedColumns2(nilRemove),m_DFUDataKeyedColumns3(nilRemove),m_DFUDataKeyedColumns4(nilRemove),m_DFUDataKeyedColumns5(nilRemove),m_DFUDataKeyedColumns6(nilRemove),m_DFUDataKeyedColumns7(nilRemove),m_DFUDataKeyedColumns8(nilRemove),m_DFUDataKeyedColumns9(nilRemove),m_DFUDataKeyedColumns10(nilRemove),m_DFUDataKeyedColumns11(nilRemove),m_DFUDataKeyedColumns12(nilRemove),m_DFUDataKeyedColumns13(nilRemove),m_DFUDataKeyedColumns14(nilRemove),m_DFUDataKeyedColumns15(nilRemove),m_DFUDataKeyedColumns16(nilRemove),m_DFUDataKeyedColumns17(nilRemove),m_DFUDataKeyedColumns18(nilRemove),m_DFUDataKeyedColumns19(nilRemove),m_DFUDataKeyedColumns20(nilRemove),m_DFUDataNonKeyedColumns1(nilRemove),m_DFUDataNonKeyedColumns2(nilRemove),m_DFUDataNonKeyedColumns3(nilRemove),m_DFUDataNonKeyedColumns4(nilRemove),m_DFUDataNonKeyedColumns5(nilRemove),m_DFUDataNonKeyedColumns6(nilRemove),m_DFUDataNonKeyedColumns7(nilRemove),m_DFUDataNonKeyedColumns8(nilRemove),m_DFUDataNonKeyedColumns9(nilRemove),m_DFUDataNonKeyedColumns10(nilRemove),m_DFUDataNonKeyedColumns11(nilRemove),m_DFUDataNonKeyedColumns12(nilRemove),m_DFUDataNonKeyedColumns13(nilRemove),m_DFUDataNonKeyedColumns14(nilRemove),m_DFUDataNonKeyedColumns15(nilRemove),m_DFUDataNonKeyedColumns16(nilRemove),m_DFUDataNonKeyedColumns17(nilRemove),m_DFUDataNonKeyedColumns18(nilRemove),m_DFUDataNonKeyedColumns19(nilRemove),m_DFUDataNonKeyedColumns20(nilRemove),m_RowCount(nilRemove),m_ShowColumns(nilRemove),m_ChooseFile(0, nilRemove,false),m_Name(nilRemove),m_FilterBy(nilRemove),m_FilterForGoBack(nilRemove),m_ColumnsHidden(nilRemove),m_ColumnCount(nilRemove),m_StartForGoback(nilRemove),m_CountForGoback(nilRemove),m_Start(nilRemove),m_Count(nilRemove),m_PageSize(nilRemove),m_Total(nilRemove),m_Result(nilRemove),m_MsgToDisplay(nilRemove),m_Cluster(nilRemove),m_ClusterType(nilRemove),m_File(nilRemove),m_Key(nilRemove),m_SchemaOnly(nilRemove),m_RoxieSelections(nilRemove),m_DisableUppercaseTranslation(nilRemove),m_AutoUppercaseTranslation(nilRemove),m_SelectedKey(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUSearchDataResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUSearchDataResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"OpenLogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ParentName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartIndex\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndIndex\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns1\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns2\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns3\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns4\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns5\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns6\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns7\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns8\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns9\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns10\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns11")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns11\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns12")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns12\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns13")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns13\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns14")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns14\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns15")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns15\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns16")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns16\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns17")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns17\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns18")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns18\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns19")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns19\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns20")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataKeyedColumns20\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns1\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns2\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns3\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns4\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns5\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns6\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns7\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns8\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns9\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns10\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns11")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns11\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns12")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns12\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns13")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns13\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns14")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns14\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns15")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns15\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns16")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns16\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns17")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns17\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns18")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns18\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns19")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns19\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns20")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DFUDataNonKeyedColumns20\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"RowCount\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowColumns\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ChooseFile\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FilterBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FilterForGoBack\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnsHidden\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ColumnHidden\" type=\"tns:DFUDataColumn\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnCount\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartForGoback\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CountForGoback\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Total\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MsgToDisplay\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"File\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Key\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SchemaOnly\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("DFUSearchDataResponse","RoxieSelections")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RoxieSelections\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","DisableUppercaseTranslation")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DisableUppercaseTranslation\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","AutoUppercaseTranslation")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AutoUppercaseTranslation\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUSearchDataResponse","SelectedKey")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SelectedKey\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUDataColumn::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUDataColumn") && added.getValue("ArrayOfDFUDataColumn")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUDataColumn\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUDataColumn\" type=\"tns:DFUDataColumn\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUDataColumn",1);
	}
	return schema;
}

void CDFUSearchDataResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUSearchDataResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns11",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns12",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns13",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns14",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns15",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns16",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns17",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns18",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns19",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataKeyedColumns20",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns11",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns12",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns13",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns14",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns15",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns16",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns17",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns18",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns19",1.15);
	info.addMinVersion("DFUSearchDataResponse","DFUDataNonKeyedColumns20",1.15);
	info.addMinVersion("DFUSearchDataResponse","RoxieSelections",1.17);
	info.addMinVersion("DFUSearchDataResponse","DisableUppercaseTranslation",1.17);
	info.addMinVersion("DFUSearchDataResponse","AutoUppercaseTranslation",1.17);
	info.addMinVersion("DFUSearchDataResponse","SelectedKey",1.19);
	if (!added.getValue("DFUDataColumn"))
	{
		added.setValue("DFUDataColumn",1);
		CDFUDataColumn::getMapInfo(info,added);
	}
}

StringBuffer &CDFUSearchDataResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OpenLogicalName");
	form.appendf("  <tr><td><b>OpenLogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ParentName");
	form.appendf("  <tr><td><b>ParentName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartIndex");
	form.appendf("  <tr><td><b>StartIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndIndex");
	form.appendf("  <tr><td><b>EndIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns1");
	form.appendf("<tr><td><b>DFUDataKeyedColumns1: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns2");
	form.appendf("<tr><td><b>DFUDataKeyedColumns2: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns3");
	form.appendf("<tr><td><b>DFUDataKeyedColumns3: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns4");
	form.appendf("<tr><td><b>DFUDataKeyedColumns4: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns5");
	form.appendf("<tr><td><b>DFUDataKeyedColumns5: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns6");
	form.appendf("<tr><td><b>DFUDataKeyedColumns6: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns7");
	form.appendf("<tr><td><b>DFUDataKeyedColumns7: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns8");
	form.appendf("<tr><td><b>DFUDataKeyedColumns8: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns9");
	form.appendf("<tr><td><b>DFUDataKeyedColumns9: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataKeyedColumns10");
	form.appendf("<tr><td><b>DFUDataKeyedColumns10: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns11")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns11");
		form.appendf("<tr><td><b>DFUDataKeyedColumns11: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns12")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns12");
		form.appendf("<tr><td><b>DFUDataKeyedColumns12: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns13")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns13");
		form.appendf("<tr><td><b>DFUDataKeyedColumns13: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns14")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns14");
		form.appendf("<tr><td><b>DFUDataKeyedColumns14: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns15")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns15");
		form.appendf("<tr><td><b>DFUDataKeyedColumns15: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns16")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns16");
		form.appendf("<tr><td><b>DFUDataKeyedColumns16: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns17")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns17");
		form.appendf("<tr><td><b>DFUDataKeyedColumns17: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns18")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns18");
		form.appendf("<tr><td><b>DFUDataKeyedColumns18: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns19")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns19");
		form.appendf("<tr><td><b>DFUDataKeyedColumns19: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataKeyedColumns20")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataKeyedColumns20");
		form.appendf("<tr><td><b>DFUDataKeyedColumns20: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns1");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns1: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns2");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns2: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns3");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns3: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns4");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns4: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns5");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns5: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns6");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns6: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns7");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns7: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns8");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns8: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns9");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns9: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DFUDataNonKeyedColumns10");
	form.appendf("<tr><td><b>DFUDataNonKeyedColumns10: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns11")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns11");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns11: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns12")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns12");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns12: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns13")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns13");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns13: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns14")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns14");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns14: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns15")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns15");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns15: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns16")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns16");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns16: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns17")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns17");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns17: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns18")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns18");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns18: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns19")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns19");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns19: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("DFUSearchDataResponse","DFUDataNonKeyedColumns20")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DFUDataNonKeyedColumns20");
		form.appendf("<tr><td><b>DFUDataNonKeyedColumns20: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RowCount");
	form.appendf("  <tr><td><b>RowCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowColumns");
	form.appendf("  <tr><td><b>ShowColumns: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ChooseFile");
	form.appendf("  <tr><td><b>ChooseFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FilterBy");
	form.appendf("  <tr><td><b>FilterBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FilterForGoBack");
	form.appendf("  <tr><td><b>FilterForGoBack: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ColumnsHidden");
	form.appendf("<tr><td><b>ColumnsHidden: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ColumnCount");
	form.appendf("  <tr><td><b>ColumnCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartForGoback");
	form.appendf("  <tr><td><b>StartForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("CountForGoback");
	form.appendf("  <tr><td><b>CountForGoback: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PageSize");
	form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Total");
	form.appendf("  <tr><td><b>Total: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MsgToDisplay");
	form.appendf("  <tr><td><b>MsgToDisplay: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterType");
	form.appendf("  <tr><td><b>ClusterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("File");
	form.appendf("  <tr><td><b>File: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Key");
	form.appendf("  <tr><td><b>Key: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SchemaOnly");
	
	form.appendf("  <tr><td><b>SchemaOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("DFUSearchDataResponse","RoxieSelections")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RoxieSelections");
		
	form.appendf("  <tr><td><b>RoxieSelections? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUSearchDataResponse","DisableUppercaseTranslation")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DisableUppercaseTranslation");
		
	form.appendf("  <tr><td><b>DisableUppercaseTranslation? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUSearchDataResponse","AutoUppercaseTranslation")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("AutoUppercaseTranslation");
		
	form.appendf("  <tr><td><b>AutoUppercaseTranslation? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUSearchDataResponse","SelectedKey")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SelectedKey");
		form.appendf("  <tr><td><b>SelectedKey: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUSearchDataResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUSearchDataResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_OpenLogicalName.marshall(rpc_resp, "OpenLogicalName", "", "", "");
		m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
		m_ParentName.marshall(rpc_resp, "ParentName", "", "", "");
		m_StartIndex.marshall(rpc_resp, "StartIndex", "", "", "");
		m_EndIndex.marshall(rpc_resp, "EndIndex", "", "", "");
		m_DFUDataKeyedColumns1.marshall(rpc_resp, "DFUDataKeyedColumns1", "DFUDataColumn");
		m_DFUDataKeyedColumns2.marshall(rpc_resp, "DFUDataKeyedColumns2", "DFUDataColumn");
		m_DFUDataKeyedColumns3.marshall(rpc_resp, "DFUDataKeyedColumns3", "DFUDataColumn");
		m_DFUDataKeyedColumns4.marshall(rpc_resp, "DFUDataKeyedColumns4", "DFUDataColumn");
		m_DFUDataKeyedColumns5.marshall(rpc_resp, "DFUDataKeyedColumns5", "DFUDataColumn");
		m_DFUDataKeyedColumns6.marshall(rpc_resp, "DFUDataKeyedColumns6", "DFUDataColumn");
		m_DFUDataKeyedColumns7.marshall(rpc_resp, "DFUDataKeyedColumns7", "DFUDataColumn");
		m_DFUDataKeyedColumns8.marshall(rpc_resp, "DFUDataKeyedColumns8", "DFUDataColumn");
		m_DFUDataKeyedColumns9.marshall(rpc_resp, "DFUDataKeyedColumns9", "DFUDataColumn");
		m_DFUDataKeyedColumns10.marshall(rpc_resp, "DFUDataKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns11.marshall(rpc_resp, "DFUDataKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns12.marshall(rpc_resp, "DFUDataKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns13.marshall(rpc_resp, "DFUDataKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns14.marshall(rpc_resp, "DFUDataKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns15.marshall(rpc_resp, "DFUDataKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns16.marshall(rpc_resp, "DFUDataKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns17.marshall(rpc_resp, "DFUDataKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns18.marshall(rpc_resp, "DFUDataKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns19.marshall(rpc_resp, "DFUDataKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns20.marshall(rpc_resp, "DFUDataKeyedColumns20", "DFUDataColumn");
		m_DFUDataNonKeyedColumns1.marshall(rpc_resp, "DFUDataNonKeyedColumns1", "DFUDataColumn");
		m_DFUDataNonKeyedColumns2.marshall(rpc_resp, "DFUDataNonKeyedColumns2", "DFUDataColumn");
		m_DFUDataNonKeyedColumns3.marshall(rpc_resp, "DFUDataNonKeyedColumns3", "DFUDataColumn");
		m_DFUDataNonKeyedColumns4.marshall(rpc_resp, "DFUDataNonKeyedColumns4", "DFUDataColumn");
		m_DFUDataNonKeyedColumns5.marshall(rpc_resp, "DFUDataNonKeyedColumns5", "DFUDataColumn");
		m_DFUDataNonKeyedColumns6.marshall(rpc_resp, "DFUDataNonKeyedColumns6", "DFUDataColumn");
		m_DFUDataNonKeyedColumns7.marshall(rpc_resp, "DFUDataNonKeyedColumns7", "DFUDataColumn");
		m_DFUDataNonKeyedColumns8.marshall(rpc_resp, "DFUDataNonKeyedColumns8", "DFUDataColumn");
		m_DFUDataNonKeyedColumns9.marshall(rpc_resp, "DFUDataNonKeyedColumns9", "DFUDataColumn");
		m_DFUDataNonKeyedColumns10.marshall(rpc_resp, "DFUDataNonKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns11.marshall(rpc_resp, "DFUDataNonKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns12.marshall(rpc_resp, "DFUDataNonKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns13.marshall(rpc_resp, "DFUDataNonKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns14.marshall(rpc_resp, "DFUDataNonKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns15.marshall(rpc_resp, "DFUDataNonKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns16.marshall(rpc_resp, "DFUDataNonKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns17.marshall(rpc_resp, "DFUDataNonKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns18.marshall(rpc_resp, "DFUDataNonKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns19.marshall(rpc_resp, "DFUDataNonKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns20.marshall(rpc_resp, "DFUDataNonKeyedColumns20", "DFUDataColumn");
		m_RowCount.marshall(rpc_resp, "RowCount", "", "", "");
		m_ShowColumns.marshall(rpc_resp, "ShowColumns", "", "", "");
		m_ChooseFile.marshall(rpc_resp, "ChooseFile", "", "", "");
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		m_FilterBy.marshall(rpc_resp, "FilterBy", "", "", "");
		m_FilterForGoBack.marshall(rpc_resp, "FilterForGoBack", "", "", "");
		m_ColumnsHidden.marshall(rpc_resp, "ColumnsHidden", "ColumnHidden");
		m_ColumnCount.marshall(rpc_resp, "ColumnCount", "", "", "");
		m_StartForGoback.marshall(rpc_resp, "StartForGoback", "", "", "");
		m_CountForGoback.marshall(rpc_resp, "CountForGoback", "", "", "");
		m_Start.marshall(rpc_resp, "Start", "", "", "");
		m_Count.marshall(rpc_resp, "Count", "", "", "");
		m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
		m_Total.marshall(rpc_resp, "Total", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
		m_MsgToDisplay.marshall(rpc_resp, "MsgToDisplay", "", "", "");
		m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
		m_ClusterType.marshall(rpc_resp, "ClusterType", "", "", "");
		m_File.marshall(rpc_resp, "File", "", "", "");
		m_Key.marshall(rpc_resp, "Key", "", "", "");
		m_SchemaOnly.marshall(rpc_resp, "SchemaOnly", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_RoxieSelections.marshall(rpc_resp, "RoxieSelections", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_DisableUppercaseTranslation.marshall(rpc_resp, "DisableUppercaseTranslation", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_AutoUppercaseTranslation.marshall(rpc_resp, "AutoUppercaseTranslation", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.19))
			m_SelectedKey.marshall(rpc_resp, "SelectedKey", "", "", "");
	}
}


void CDFUSearchDataResponse::copy(CDFUSearchDataResponse &from)
{
	m_OpenLogicalName.copy(from.m_OpenLogicalName);
	m_LogicalName.copy(from.m_LogicalName);
	m_ParentName.copy(from.m_ParentName);
	m_StartIndex.copy(from.m_StartIndex);
	m_EndIndex.copy(from.m_EndIndex);
	m_DFUDataKeyedColumns1.copy(from.m_DFUDataKeyedColumns1);
	m_DFUDataKeyedColumns2.copy(from.m_DFUDataKeyedColumns2);
	m_DFUDataKeyedColumns3.copy(from.m_DFUDataKeyedColumns3);
	m_DFUDataKeyedColumns4.copy(from.m_DFUDataKeyedColumns4);
	m_DFUDataKeyedColumns5.copy(from.m_DFUDataKeyedColumns5);
	m_DFUDataKeyedColumns6.copy(from.m_DFUDataKeyedColumns6);
	m_DFUDataKeyedColumns7.copy(from.m_DFUDataKeyedColumns7);
	m_DFUDataKeyedColumns8.copy(from.m_DFUDataKeyedColumns8);
	m_DFUDataKeyedColumns9.copy(from.m_DFUDataKeyedColumns9);
	m_DFUDataKeyedColumns10.copy(from.m_DFUDataKeyedColumns10);
	m_DFUDataKeyedColumns11.copy(from.m_DFUDataKeyedColumns11);
	m_DFUDataKeyedColumns12.copy(from.m_DFUDataKeyedColumns12);
	m_DFUDataKeyedColumns13.copy(from.m_DFUDataKeyedColumns13);
	m_DFUDataKeyedColumns14.copy(from.m_DFUDataKeyedColumns14);
	m_DFUDataKeyedColumns15.copy(from.m_DFUDataKeyedColumns15);
	m_DFUDataKeyedColumns16.copy(from.m_DFUDataKeyedColumns16);
	m_DFUDataKeyedColumns17.copy(from.m_DFUDataKeyedColumns17);
	m_DFUDataKeyedColumns18.copy(from.m_DFUDataKeyedColumns18);
	m_DFUDataKeyedColumns19.copy(from.m_DFUDataKeyedColumns19);
	m_DFUDataKeyedColumns20.copy(from.m_DFUDataKeyedColumns20);
	m_DFUDataNonKeyedColumns1.copy(from.m_DFUDataNonKeyedColumns1);
	m_DFUDataNonKeyedColumns2.copy(from.m_DFUDataNonKeyedColumns2);
	m_DFUDataNonKeyedColumns3.copy(from.m_DFUDataNonKeyedColumns3);
	m_DFUDataNonKeyedColumns4.copy(from.m_DFUDataNonKeyedColumns4);
	m_DFUDataNonKeyedColumns5.copy(from.m_DFUDataNonKeyedColumns5);
	m_DFUDataNonKeyedColumns6.copy(from.m_DFUDataNonKeyedColumns6);
	m_DFUDataNonKeyedColumns7.copy(from.m_DFUDataNonKeyedColumns7);
	m_DFUDataNonKeyedColumns8.copy(from.m_DFUDataNonKeyedColumns8);
	m_DFUDataNonKeyedColumns9.copy(from.m_DFUDataNonKeyedColumns9);
	m_DFUDataNonKeyedColumns10.copy(from.m_DFUDataNonKeyedColumns10);
	m_DFUDataNonKeyedColumns11.copy(from.m_DFUDataNonKeyedColumns11);
	m_DFUDataNonKeyedColumns12.copy(from.m_DFUDataNonKeyedColumns12);
	m_DFUDataNonKeyedColumns13.copy(from.m_DFUDataNonKeyedColumns13);
	m_DFUDataNonKeyedColumns14.copy(from.m_DFUDataNonKeyedColumns14);
	m_DFUDataNonKeyedColumns15.copy(from.m_DFUDataNonKeyedColumns15);
	m_DFUDataNonKeyedColumns16.copy(from.m_DFUDataNonKeyedColumns16);
	m_DFUDataNonKeyedColumns17.copy(from.m_DFUDataNonKeyedColumns17);
	m_DFUDataNonKeyedColumns18.copy(from.m_DFUDataNonKeyedColumns18);
	m_DFUDataNonKeyedColumns19.copy(from.m_DFUDataNonKeyedColumns19);
	m_DFUDataNonKeyedColumns20.copy(from.m_DFUDataNonKeyedColumns20);
	m_RowCount.copy(from.m_RowCount);
	m_ShowColumns.copy(from.m_ShowColumns);
	m_ChooseFile.copy(from.m_ChooseFile);
	m_Name.copy(from.m_Name);
	m_FilterBy.copy(from.m_FilterBy);
	m_FilterForGoBack.copy(from.m_FilterForGoBack);
	m_ColumnsHidden.copy(from.m_ColumnsHidden);
	m_ColumnCount.copy(from.m_ColumnCount);
	m_StartForGoback.copy(from.m_StartForGoback);
	m_CountForGoback.copy(from.m_CountForGoback);
	m_Start.copy(from.m_Start);
	m_Count.copy(from.m_Count);
	m_PageSize.copy(from.m_PageSize);
	m_Total.copy(from.m_Total);
	m_Result.copy(from.m_Result);
	m_MsgToDisplay.copy(from.m_MsgToDisplay);
	m_Cluster.copy(from.m_Cluster);
	m_ClusterType.copy(from.m_ClusterType);
	m_File.copy(from.m_File);
	m_Key.copy(from.m_Key);
	m_SchemaOnly.copy(from.m_SchemaOnly);
	m_RoxieSelections.copy(from.m_RoxieSelections);
	m_DisableUppercaseTranslation.copy(from.m_DisableUppercaseTranslation);
	m_AutoUppercaseTranslation.copy(from.m_AutoUppercaseTranslation);
	m_SelectedKey.copy(from.m_SelectedKey);
}


void CDFUSearchDataResponse::copy(IConstDFUSearchDataResponse &ifrom)
{
	setOpenLogicalName(ifrom.getOpenLogicalName());
	setLogicalName(ifrom.getLogicalName());
	setParentName(ifrom.getParentName());
	setStartIndex(ifrom.getStartIndex());
	setEndIndex(ifrom.getEndIndex());
	setDFUDataKeyedColumns1(ifrom.getDFUDataKeyedColumns1());
	setDFUDataKeyedColumns2(ifrom.getDFUDataKeyedColumns2());
	setDFUDataKeyedColumns3(ifrom.getDFUDataKeyedColumns3());
	setDFUDataKeyedColumns4(ifrom.getDFUDataKeyedColumns4());
	setDFUDataKeyedColumns5(ifrom.getDFUDataKeyedColumns5());
	setDFUDataKeyedColumns6(ifrom.getDFUDataKeyedColumns6());
	setDFUDataKeyedColumns7(ifrom.getDFUDataKeyedColumns7());
	setDFUDataKeyedColumns8(ifrom.getDFUDataKeyedColumns8());
	setDFUDataKeyedColumns9(ifrom.getDFUDataKeyedColumns9());
	setDFUDataKeyedColumns10(ifrom.getDFUDataKeyedColumns10());
	setDFUDataKeyedColumns11(ifrom.getDFUDataKeyedColumns11());
	setDFUDataKeyedColumns12(ifrom.getDFUDataKeyedColumns12());
	setDFUDataKeyedColumns13(ifrom.getDFUDataKeyedColumns13());
	setDFUDataKeyedColumns14(ifrom.getDFUDataKeyedColumns14());
	setDFUDataKeyedColumns15(ifrom.getDFUDataKeyedColumns15());
	setDFUDataKeyedColumns16(ifrom.getDFUDataKeyedColumns16());
	setDFUDataKeyedColumns17(ifrom.getDFUDataKeyedColumns17());
	setDFUDataKeyedColumns18(ifrom.getDFUDataKeyedColumns18());
	setDFUDataKeyedColumns19(ifrom.getDFUDataKeyedColumns19());
	setDFUDataKeyedColumns20(ifrom.getDFUDataKeyedColumns20());
	setDFUDataNonKeyedColumns1(ifrom.getDFUDataNonKeyedColumns1());
	setDFUDataNonKeyedColumns2(ifrom.getDFUDataNonKeyedColumns2());
	setDFUDataNonKeyedColumns3(ifrom.getDFUDataNonKeyedColumns3());
	setDFUDataNonKeyedColumns4(ifrom.getDFUDataNonKeyedColumns4());
	setDFUDataNonKeyedColumns5(ifrom.getDFUDataNonKeyedColumns5());
	setDFUDataNonKeyedColumns6(ifrom.getDFUDataNonKeyedColumns6());
	setDFUDataNonKeyedColumns7(ifrom.getDFUDataNonKeyedColumns7());
	setDFUDataNonKeyedColumns8(ifrom.getDFUDataNonKeyedColumns8());
	setDFUDataNonKeyedColumns9(ifrom.getDFUDataNonKeyedColumns9());
	setDFUDataNonKeyedColumns10(ifrom.getDFUDataNonKeyedColumns10());
	setDFUDataNonKeyedColumns11(ifrom.getDFUDataNonKeyedColumns11());
	setDFUDataNonKeyedColumns12(ifrom.getDFUDataNonKeyedColumns12());
	setDFUDataNonKeyedColumns13(ifrom.getDFUDataNonKeyedColumns13());
	setDFUDataNonKeyedColumns14(ifrom.getDFUDataNonKeyedColumns14());
	setDFUDataNonKeyedColumns15(ifrom.getDFUDataNonKeyedColumns15());
	setDFUDataNonKeyedColumns16(ifrom.getDFUDataNonKeyedColumns16());
	setDFUDataNonKeyedColumns17(ifrom.getDFUDataNonKeyedColumns17());
	setDFUDataNonKeyedColumns18(ifrom.getDFUDataNonKeyedColumns18());
	setDFUDataNonKeyedColumns19(ifrom.getDFUDataNonKeyedColumns19());
	setDFUDataNonKeyedColumns20(ifrom.getDFUDataNonKeyedColumns20());
	setRowCount(ifrom.getRowCount());
	setShowColumns(ifrom.getShowColumns());
	setChooseFile(ifrom.getChooseFile());
	setName(ifrom.getName());
	setFilterBy(ifrom.getFilterBy());
	setFilterForGoBack(ifrom.getFilterForGoBack());
	setColumnsHidden(ifrom.getColumnsHidden());
	setColumnCount(ifrom.getColumnCount());
	setStartForGoback(ifrom.getStartForGoback());
	setCountForGoback(ifrom.getCountForGoback());
	setStart(ifrom.getStart());
	setCount(ifrom.getCount());
	setPageSize(ifrom.getPageSize());
	setTotal(ifrom.getTotal());
	setResult(ifrom.getResult());
	setMsgToDisplay(ifrom.getMsgToDisplay());
	setCluster(ifrom.getCluster());
	setClusterType(ifrom.getClusterType());
	setFile(ifrom.getFile());
	setKey(ifrom.getKey());
	setSchemaOnly(ifrom.getSchemaOnly());
	setRoxieSelections(ifrom.getRoxieSelections());
	setDisableUppercaseTranslation(ifrom.getDisableUppercaseTranslation());
	setAutoUppercaseTranslation(ifrom.getAutoUppercaseTranslation());
	setSelectedKey(ifrom.getSelectedKey());
}


void CDFUSearchDataResponse::getAttributes(IProperties &attributes)
{
}


void CDFUSearchDataResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_OpenLogicalName.toStr(ctx, buffer, "OpenLogicalName", "", false, "", "");
		m_LogicalName.toStr(ctx, buffer, "LogicalName", "", false, "", "");
		m_ParentName.toStr(ctx, buffer, "ParentName", "", false, "", "");
		m_StartIndex.toStr(ctx, buffer, "StartIndex", "", false, "", "");
		m_EndIndex.toStr(ctx, buffer, "EndIndex", "", false, "", "");
		m_DFUDataKeyedColumns1.toStr(ctx, buffer, "DFUDataKeyedColumns1", "DFUDataColumn");
		m_DFUDataKeyedColumns2.toStr(ctx, buffer, "DFUDataKeyedColumns2", "DFUDataColumn");
		m_DFUDataKeyedColumns3.toStr(ctx, buffer, "DFUDataKeyedColumns3", "DFUDataColumn");
		m_DFUDataKeyedColumns4.toStr(ctx, buffer, "DFUDataKeyedColumns4", "DFUDataColumn");
		m_DFUDataKeyedColumns5.toStr(ctx, buffer, "DFUDataKeyedColumns5", "DFUDataColumn");
		m_DFUDataKeyedColumns6.toStr(ctx, buffer, "DFUDataKeyedColumns6", "DFUDataColumn");
		m_DFUDataKeyedColumns7.toStr(ctx, buffer, "DFUDataKeyedColumns7", "DFUDataColumn");
		m_DFUDataKeyedColumns8.toStr(ctx, buffer, "DFUDataKeyedColumns8", "DFUDataColumn");
		m_DFUDataKeyedColumns9.toStr(ctx, buffer, "DFUDataKeyedColumns9", "DFUDataColumn");
		m_DFUDataKeyedColumns10.toStr(ctx, buffer, "DFUDataKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns11.toStr(ctx, buffer, "DFUDataKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns12.toStr(ctx, buffer, "DFUDataKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns13.toStr(ctx, buffer, "DFUDataKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns14.toStr(ctx, buffer, "DFUDataKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns15.toStr(ctx, buffer, "DFUDataKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns16.toStr(ctx, buffer, "DFUDataKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns17.toStr(ctx, buffer, "DFUDataKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns18.toStr(ctx, buffer, "DFUDataKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns19.toStr(ctx, buffer, "DFUDataKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataKeyedColumns20.toStr(ctx, buffer, "DFUDataKeyedColumns20", "DFUDataColumn");
		m_DFUDataNonKeyedColumns1.toStr(ctx, buffer, "DFUDataNonKeyedColumns1", "DFUDataColumn");
		m_DFUDataNonKeyedColumns2.toStr(ctx, buffer, "DFUDataNonKeyedColumns2", "DFUDataColumn");
		m_DFUDataNonKeyedColumns3.toStr(ctx, buffer, "DFUDataNonKeyedColumns3", "DFUDataColumn");
		m_DFUDataNonKeyedColumns4.toStr(ctx, buffer, "DFUDataNonKeyedColumns4", "DFUDataColumn");
		m_DFUDataNonKeyedColumns5.toStr(ctx, buffer, "DFUDataNonKeyedColumns5", "DFUDataColumn");
		m_DFUDataNonKeyedColumns6.toStr(ctx, buffer, "DFUDataNonKeyedColumns6", "DFUDataColumn");
		m_DFUDataNonKeyedColumns7.toStr(ctx, buffer, "DFUDataNonKeyedColumns7", "DFUDataColumn");
		m_DFUDataNonKeyedColumns8.toStr(ctx, buffer, "DFUDataNonKeyedColumns8", "DFUDataColumn");
		m_DFUDataNonKeyedColumns9.toStr(ctx, buffer, "DFUDataNonKeyedColumns9", "DFUDataColumn");
		m_DFUDataNonKeyedColumns10.toStr(ctx, buffer, "DFUDataNonKeyedColumns10", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns11.toStr(ctx, buffer, "DFUDataNonKeyedColumns11", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns12.toStr(ctx, buffer, "DFUDataNonKeyedColumns12", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns13.toStr(ctx, buffer, "DFUDataNonKeyedColumns13", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns14.toStr(ctx, buffer, "DFUDataNonKeyedColumns14", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns15.toStr(ctx, buffer, "DFUDataNonKeyedColumns15", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns16.toStr(ctx, buffer, "DFUDataNonKeyedColumns16", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns17.toStr(ctx, buffer, "DFUDataNonKeyedColumns17", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns18.toStr(ctx, buffer, "DFUDataNonKeyedColumns18", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns19.toStr(ctx, buffer, "DFUDataNonKeyedColumns19", "DFUDataColumn");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_DFUDataNonKeyedColumns20.toStr(ctx, buffer, "DFUDataNonKeyedColumns20", "DFUDataColumn");
		m_RowCount.toStr(ctx, buffer, "RowCount", "", false, "", "");
		m_ShowColumns.toStr(ctx, buffer, "ShowColumns", "", false, "", "");
		m_ChooseFile.toStr(ctx, buffer, "ChooseFile", "", false, "", "");
		m_Name.toStr(ctx, buffer, "Name", "", false, "", "");
		m_FilterBy.toStr(ctx, buffer, "FilterBy", "", false, "", "");
		m_FilterForGoBack.toStr(ctx, buffer, "FilterForGoBack", "", false, "", "");
		m_ColumnsHidden.toStr(ctx, buffer, "ColumnsHidden", "ColumnHidden");
		m_ColumnCount.toStr(ctx, buffer, "ColumnCount", "", false, "", "");
		m_StartForGoback.toStr(ctx, buffer, "StartForGoback", "", false, "", "");
		m_CountForGoback.toStr(ctx, buffer, "CountForGoback", "", false, "", "");
		m_Start.toStr(ctx, buffer, "Start", "", false, "", "");
		m_Count.toStr(ctx, buffer, "Count", "", false, "", "");
		m_PageSize.toStr(ctx, buffer, "PageSize", "", false, "", "");
		m_Total.toStr(ctx, buffer, "Total", "", false, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", false, "", "");
		m_MsgToDisplay.toStr(ctx, buffer, "MsgToDisplay", "", false, "", "");
		m_Cluster.toStr(ctx, buffer, "Cluster", "", false, "", "");
		m_ClusterType.toStr(ctx, buffer, "ClusterType", "", false, "", "");
		m_File.toStr(ctx, buffer, "File", "", false, "", "");
		m_Key.toStr(ctx, buffer, "Key", "", false, "", "");
		m_SchemaOnly.toStr(ctx, buffer, "SchemaOnly", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_RoxieSelections.toStr(ctx, buffer, "RoxieSelections", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_DisableUppercaseTranslation.toStr(ctx, buffer, "DisableUppercaseTranslation", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.17))
			m_AutoUppercaseTranslation.toStr(ctx, buffer, "AutoUppercaseTranslation", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.19))
			m_SelectedKey.toStr(ctx, buffer, "SelectedKey", "", false, "", "");
	}
}


void CDFUSearchDataResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUSearchDataResponse::serializer(IEspContext* ctx, IConstDFUSearchDataResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUSearchDataResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field OpenLogicalName
	{
		const char* s = src.getOpenLogicalName();
		if (s && *s)
		{
			buffer.append("<OpenLogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</OpenLogicalName>");
		}
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field ParentName
	{
		const char* s = src.getParentName();
		if (s && *s)
		{
			buffer.append("<ParentName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ParentName>");
		}
	}
	// field StartIndex
	{
		//*** default kind: TK_INT; type=int64, name=StartIndex
		buffer.append("<StartIndex>");
		buffer.append(src.getStartIndex());
		buffer.append("</StartIndex>");
	}
	// field EndIndex
	{
		//*** default kind: TK_INT; type=int64, name=EndIndex
		buffer.append("<EndIndex>");
		buffer.append(src.getEndIndex());
		buffer.append("</EndIndex>");
	}
	// field DFUDataKeyedColumns1
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns1();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns1>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns1>");
	}
	// field DFUDataKeyedColumns2
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns2();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns2>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns2>");
	}
	// field DFUDataKeyedColumns3
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns3();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns3>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns3>");
	}
	// field DFUDataKeyedColumns4
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns4();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns4>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns4>");
	}
	// field DFUDataKeyedColumns5
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns5();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns5>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns5>");
	}
	// field DFUDataKeyedColumns6
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns6();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns6>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns6>");
	}
	// field DFUDataKeyedColumns7
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns7();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns7>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns7>");
	}
	// field DFUDataKeyedColumns8
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns8();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns8>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns8>");
	}
	// field DFUDataKeyedColumns9
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns9();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns9>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns9>");
	}
	// field DFUDataKeyedColumns10
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns10();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns10>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns10>");
	}
	// field DFUDataKeyedColumns11
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns11();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns11>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns11>");
	}
	// field DFUDataKeyedColumns12
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns12();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns12>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns12>");
	}
	// field DFUDataKeyedColumns13
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns13();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns13>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns13>");
	}
	// field DFUDataKeyedColumns14
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns14();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns14>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns14>");
	}
	// field DFUDataKeyedColumns15
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns15();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns15>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns15>");
	}
	// field DFUDataKeyedColumns16
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns16();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns16>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns16>");
	}
	// field DFUDataKeyedColumns17
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns17();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns17>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns17>");
	}
	// field DFUDataKeyedColumns18
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns18();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns18>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns18>");
	}
	// field DFUDataKeyedColumns19
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns19();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns19>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns19>");
	}
	// field DFUDataKeyedColumns20
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataKeyedColumns20();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataKeyedColumns20>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataKeyedColumns20>");
	}
	// field DFUDataNonKeyedColumns1
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns1();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns1>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns1>");
	}
	// field DFUDataNonKeyedColumns2
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns2();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns2>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns2>");
	}
	// field DFUDataNonKeyedColumns3
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns3();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns3>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns3>");
	}
	// field DFUDataNonKeyedColumns4
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns4();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns4>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns4>");
	}
	// field DFUDataNonKeyedColumns5
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns5();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns5>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns5>");
	}
	// field DFUDataNonKeyedColumns6
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns6();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns6>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns6>");
	}
	// field DFUDataNonKeyedColumns7
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns7();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns7>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns7>");
	}
	// field DFUDataNonKeyedColumns8
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns8();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns8>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns8>");
	}
	// field DFUDataNonKeyedColumns9
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns9();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns9>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns9>");
	}
	// field DFUDataNonKeyedColumns10
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns10();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns10>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns10>");
	}
	// field DFUDataNonKeyedColumns11
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns11();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns11>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns11>");
	}
	// field DFUDataNonKeyedColumns12
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns12();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns12>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns12>");
	}
	// field DFUDataNonKeyedColumns13
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns13();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns13>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns13>");
	}
	// field DFUDataNonKeyedColumns14
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns14();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns14>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns14>");
	}
	// field DFUDataNonKeyedColumns15
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns15();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns15>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns15>");
	}
	// field DFUDataNonKeyedColumns16
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns16();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns16>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns16>");
	}
	// field DFUDataNonKeyedColumns17
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns17();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns17>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns17>");
	}
	// field DFUDataNonKeyedColumns18
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns18();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns18>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns18>");
	}
	// field DFUDataNonKeyedColumns19
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns19();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns19>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns19>");
	}
	// field DFUDataNonKeyedColumns20
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDFUDataNonKeyedColumns20();
		int size = v.length();
		if (size>0)
			buffer.append("<DFUDataNonKeyedColumns20>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DFUDataNonKeyedColumns20>");
	}
	// field RowCount
	{
		//*** default kind: TK_INT; type=int64, name=RowCount
		buffer.append("<RowCount>");
		buffer.append(src.getRowCount());
		buffer.append("</RowCount>");
	}
	// field ShowColumns
	{
		const char* s = src.getShowColumns();
		if (s && *s)
		{
			buffer.append("<ShowColumns>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowColumns>");
		}
	}
	// field ChooseFile
	{
		int n = src.getChooseFile();
		if (n)
			buffer.appendf("<ChooseFile>%d</ChooseFile>", n);
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field FilterBy
	{
		const char* s = src.getFilterBy();
		if (s && *s)
		{
			buffer.append("<FilterBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FilterBy>");
		}
	}
	// field FilterForGoBack
	{
		const char* s = src.getFilterForGoBack();
		if (s && *s)
		{
			buffer.append("<FilterForGoBack>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FilterForGoBack>");
		}
	}
	// field ColumnsHidden
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getColumnsHidden();
		int size = v.length();
		if (size>0)
			buffer.append("<ColumnsHidden>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<ColumnHidden>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</ColumnHidden>");
		}
		if (size>0)
			buffer.append("</ColumnsHidden>");
	}
	// field ColumnCount
	{
		int n = src.getColumnCount();
		if (n)
			buffer.appendf("<ColumnCount>%d</ColumnCount>", n);
	}
	// field StartForGoback
	{
		//*** default kind: TK_INT; type=int64, name=StartForGoback
		buffer.append("<StartForGoback>");
		buffer.append(src.getStartForGoback());
		buffer.append("</StartForGoback>");
	}
	// field CountForGoback
	{
		int n = src.getCountForGoback();
		if (n)
			buffer.appendf("<CountForGoback>%d</CountForGoback>", n);
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Count
	{
		//*** default kind: TK_INT; type=int64, name=Count
		buffer.append("<Count>");
		buffer.append(src.getCount());
		buffer.append("</Count>");
	}
	// field PageSize
	{
		//*** default kind: TK_INT; type=int64, name=PageSize
		buffer.append("<PageSize>");
		buffer.append(src.getPageSize());
		buffer.append("</PageSize>");
	}
	// field Total
	{
		//*** default kind: TK_INT; type=int64, name=Total
		buffer.append("<Total>");
		buffer.append(src.getTotal());
		buffer.append("</Total>");
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	// field MsgToDisplay
	{
		const char* s = src.getMsgToDisplay();
		if (s && *s)
		{
			buffer.append("<MsgToDisplay>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MsgToDisplay>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field ClusterType
	{
		const char* s = src.getClusterType();
		if (s && *s)
		{
			buffer.append("<ClusterType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterType>");
		}
	}
	// field File
	{
		const char* s = src.getFile();
		if (s && *s)
		{
			buffer.append("<File>");
			encodeUtf8XML(s,buffer);
			buffer.append("</File>");
		}
	}
	// field Key
	{
		const char* s = src.getKey();
		if (s && *s)
		{
			buffer.append("<Key>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Key>");
		}
	}
	// field SchemaOnly
	{
		bool b = src.getSchemaOnly();
		if (b)
			buffer.appendf("<SchemaOnly>1</SchemaOnly>");
	}
	// field RoxieSelections
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getRoxieSelections();
		if (b)
			buffer.appendf("<RoxieSelections>1</RoxieSelections>");
	}
	// field DisableUppercaseTranslation
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getDisableUppercaseTranslation();
		if (b)
			buffer.appendf("<DisableUppercaseTranslation>1</DisableUppercaseTranslation>");
	}
	// field AutoUppercaseTranslation
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getAutoUppercaseTranslation();
		if (b)
			buffer.appendf("<AutoUppercaseTranslation>1</AutoUppercaseTranslation>");
	}
	// field SelectedKey
	if ((clientVer==-1.0 || clientVer>=1.19))
	{
		const char* s = src.getSelectedKey();
		if (s && *s)
		{
			buffer.append("<SelectedKey>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SelectedKey>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUSearchDataResponse>");
}

bool CDFUSearchDataResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_OpenLogicalName.unmarshall(rpc_request, "OpenLogicalName", basepath);
		hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
		hasValue |= m_ParentName.unmarshall(rpc_request, "ParentName", basepath);
		hasValue |= m_StartIndex.unmarshall(rpc_request, "StartIndex", basepath);
		hasValue |= m_EndIndex.unmarshall(rpc_request, "EndIndex", basepath);
		hasValue |= m_DFUDataKeyedColumns1.unmarshall(rpc_request, "DFUDataKeyedColumns1", basepath);
		hasValue |= m_DFUDataKeyedColumns2.unmarshall(rpc_request, "DFUDataKeyedColumns2", basepath);
		hasValue |= m_DFUDataKeyedColumns3.unmarshall(rpc_request, "DFUDataKeyedColumns3", basepath);
		hasValue |= m_DFUDataKeyedColumns4.unmarshall(rpc_request, "DFUDataKeyedColumns4", basepath);
		hasValue |= m_DFUDataKeyedColumns5.unmarshall(rpc_request, "DFUDataKeyedColumns5", basepath);
		hasValue |= m_DFUDataKeyedColumns6.unmarshall(rpc_request, "DFUDataKeyedColumns6", basepath);
		hasValue |= m_DFUDataKeyedColumns7.unmarshall(rpc_request, "DFUDataKeyedColumns7", basepath);
		hasValue |= m_DFUDataKeyedColumns8.unmarshall(rpc_request, "DFUDataKeyedColumns8", basepath);
		hasValue |= m_DFUDataKeyedColumns9.unmarshall(rpc_request, "DFUDataKeyedColumns9", basepath);
		hasValue |= m_DFUDataKeyedColumns10.unmarshall(rpc_request, "DFUDataKeyedColumns10", basepath);
		hasValue |= m_DFUDataKeyedColumns11.unmarshall(rpc_request, "DFUDataKeyedColumns11", basepath);
		hasValue |= m_DFUDataKeyedColumns12.unmarshall(rpc_request, "DFUDataKeyedColumns12", basepath);
		hasValue |= m_DFUDataKeyedColumns13.unmarshall(rpc_request, "DFUDataKeyedColumns13", basepath);
		hasValue |= m_DFUDataKeyedColumns14.unmarshall(rpc_request, "DFUDataKeyedColumns14", basepath);
		hasValue |= m_DFUDataKeyedColumns15.unmarshall(rpc_request, "DFUDataKeyedColumns15", basepath);
		hasValue |= m_DFUDataKeyedColumns16.unmarshall(rpc_request, "DFUDataKeyedColumns16", basepath);
		hasValue |= m_DFUDataKeyedColumns17.unmarshall(rpc_request, "DFUDataKeyedColumns17", basepath);
		hasValue |= m_DFUDataKeyedColumns18.unmarshall(rpc_request, "DFUDataKeyedColumns18", basepath);
		hasValue |= m_DFUDataKeyedColumns19.unmarshall(rpc_request, "DFUDataKeyedColumns19", basepath);
		hasValue |= m_DFUDataKeyedColumns20.unmarshall(rpc_request, "DFUDataKeyedColumns20", basepath);
		hasValue |= m_DFUDataNonKeyedColumns1.unmarshall(rpc_request, "DFUDataNonKeyedColumns1", basepath);
		hasValue |= m_DFUDataNonKeyedColumns2.unmarshall(rpc_request, "DFUDataNonKeyedColumns2", basepath);
		hasValue |= m_DFUDataNonKeyedColumns3.unmarshall(rpc_request, "DFUDataNonKeyedColumns3", basepath);
		hasValue |= m_DFUDataNonKeyedColumns4.unmarshall(rpc_request, "DFUDataNonKeyedColumns4", basepath);
		hasValue |= m_DFUDataNonKeyedColumns5.unmarshall(rpc_request, "DFUDataNonKeyedColumns5", basepath);
		hasValue |= m_DFUDataNonKeyedColumns6.unmarshall(rpc_request, "DFUDataNonKeyedColumns6", basepath);
		hasValue |= m_DFUDataNonKeyedColumns7.unmarshall(rpc_request, "DFUDataNonKeyedColumns7", basepath);
		hasValue |= m_DFUDataNonKeyedColumns8.unmarshall(rpc_request, "DFUDataNonKeyedColumns8", basepath);
		hasValue |= m_DFUDataNonKeyedColumns9.unmarshall(rpc_request, "DFUDataNonKeyedColumns9", basepath);
		hasValue |= m_DFUDataNonKeyedColumns10.unmarshall(rpc_request, "DFUDataNonKeyedColumns10", basepath);
		hasValue |= m_DFUDataNonKeyedColumns11.unmarshall(rpc_request, "DFUDataNonKeyedColumns11", basepath);
		hasValue |= m_DFUDataNonKeyedColumns12.unmarshall(rpc_request, "DFUDataNonKeyedColumns12", basepath);
		hasValue |= m_DFUDataNonKeyedColumns13.unmarshall(rpc_request, "DFUDataNonKeyedColumns13", basepath);
		hasValue |= m_DFUDataNonKeyedColumns14.unmarshall(rpc_request, "DFUDataNonKeyedColumns14", basepath);
		hasValue |= m_DFUDataNonKeyedColumns15.unmarshall(rpc_request, "DFUDataNonKeyedColumns15", basepath);
		hasValue |= m_DFUDataNonKeyedColumns16.unmarshall(rpc_request, "DFUDataNonKeyedColumns16", basepath);
		hasValue |= m_DFUDataNonKeyedColumns17.unmarshall(rpc_request, "DFUDataNonKeyedColumns17", basepath);
		hasValue |= m_DFUDataNonKeyedColumns18.unmarshall(rpc_request, "DFUDataNonKeyedColumns18", basepath);
		hasValue |= m_DFUDataNonKeyedColumns19.unmarshall(rpc_request, "DFUDataNonKeyedColumns19", basepath);
		hasValue |= m_DFUDataNonKeyedColumns20.unmarshall(rpc_request, "DFUDataNonKeyedColumns20", basepath);
		hasValue |= m_RowCount.unmarshall(rpc_request, "RowCount", basepath);
		hasValue |= m_ShowColumns.unmarshall(rpc_request, "ShowColumns", basepath);
		hasValue |= m_ChooseFile.unmarshall(rpc_request, "ChooseFile", basepath);
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_FilterBy.unmarshall(rpc_request, "FilterBy", basepath);
		hasValue |= m_FilterForGoBack.unmarshall(rpc_request, "FilterForGoBack", basepath);
		hasValue |= m_ColumnsHidden.unmarshall(rpc_request, "ColumnsHidden", basepath);
		hasValue |= m_ColumnCount.unmarshall(rpc_request, "ColumnCount", basepath);
		hasValue |= m_StartForGoback.unmarshall(rpc_request, "StartForGoback", basepath);
		hasValue |= m_CountForGoback.unmarshall(rpc_request, "CountForGoback", basepath);
		hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
		hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
		hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
		hasValue |= m_Total.unmarshall(rpc_request, "Total", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
		hasValue |= m_MsgToDisplay.unmarshall(rpc_request, "MsgToDisplay", basepath);
		hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
		hasValue |= m_ClusterType.unmarshall(rpc_request, "ClusterType", basepath);
		hasValue |= m_File.unmarshall(rpc_request, "File", basepath);
		hasValue |= m_Key.unmarshall(rpc_request, "Key", basepath);
		hasValue |= m_SchemaOnly.unmarshall(rpc_request, "SchemaOnly", basepath);
		hasValue |= m_RoxieSelections.unmarshall(rpc_request, "RoxieSelections", basepath);
		hasValue |= m_DisableUppercaseTranslation.unmarshall(rpc_request, "DisableUppercaseTranslation", basepath);
		hasValue |= m_AutoUppercaseTranslation.unmarshall(rpc_request, "AutoUppercaseTranslation", basepath);
		hasValue |= m_SelectedKey.unmarshall(rpc_request, "SelectedKey", basepath);
	}
	return hasValue;
}

bool CDFUSearchDataResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_OpenLogicalName.unmarshall(ctx, soapval, "OpenLogicalName");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_ParentName.unmarshall(ctx, soapval, "ParentName");
	hasValue |= m_StartIndex.unmarshall(ctx, soapval, "StartIndex");
	hasValue |= m_EndIndex.unmarshall(ctx, soapval, "EndIndex");
	hasValue |= m_DFUDataKeyedColumns1.unmarshall(ctx, soapval, "DFUDataKeyedColumns1");
	hasValue |= m_DFUDataKeyedColumns2.unmarshall(ctx, soapval, "DFUDataKeyedColumns2");
	hasValue |= m_DFUDataKeyedColumns3.unmarshall(ctx, soapval, "DFUDataKeyedColumns3");
	hasValue |= m_DFUDataKeyedColumns4.unmarshall(ctx, soapval, "DFUDataKeyedColumns4");
	hasValue |= m_DFUDataKeyedColumns5.unmarshall(ctx, soapval, "DFUDataKeyedColumns5");
	hasValue |= m_DFUDataKeyedColumns6.unmarshall(ctx, soapval, "DFUDataKeyedColumns6");
	hasValue |= m_DFUDataKeyedColumns7.unmarshall(ctx, soapval, "DFUDataKeyedColumns7");
	hasValue |= m_DFUDataKeyedColumns8.unmarshall(ctx, soapval, "DFUDataKeyedColumns8");
	hasValue |= m_DFUDataKeyedColumns9.unmarshall(ctx, soapval, "DFUDataKeyedColumns9");
	hasValue |= m_DFUDataKeyedColumns10.unmarshall(ctx, soapval, "DFUDataKeyedColumns10");
	hasValue |= m_DFUDataKeyedColumns11.unmarshall(ctx, soapval, "DFUDataKeyedColumns11");
	hasValue |= m_DFUDataKeyedColumns12.unmarshall(ctx, soapval, "DFUDataKeyedColumns12");
	hasValue |= m_DFUDataKeyedColumns13.unmarshall(ctx, soapval, "DFUDataKeyedColumns13");
	hasValue |= m_DFUDataKeyedColumns14.unmarshall(ctx, soapval, "DFUDataKeyedColumns14");
	hasValue |= m_DFUDataKeyedColumns15.unmarshall(ctx, soapval, "DFUDataKeyedColumns15");
	hasValue |= m_DFUDataKeyedColumns16.unmarshall(ctx, soapval, "DFUDataKeyedColumns16");
	hasValue |= m_DFUDataKeyedColumns17.unmarshall(ctx, soapval, "DFUDataKeyedColumns17");
	hasValue |= m_DFUDataKeyedColumns18.unmarshall(ctx, soapval, "DFUDataKeyedColumns18");
	hasValue |= m_DFUDataKeyedColumns19.unmarshall(ctx, soapval, "DFUDataKeyedColumns19");
	hasValue |= m_DFUDataKeyedColumns20.unmarshall(ctx, soapval, "DFUDataKeyedColumns20");
	hasValue |= m_DFUDataNonKeyedColumns1.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns1");
	hasValue |= m_DFUDataNonKeyedColumns2.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns2");
	hasValue |= m_DFUDataNonKeyedColumns3.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns3");
	hasValue |= m_DFUDataNonKeyedColumns4.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns4");
	hasValue |= m_DFUDataNonKeyedColumns5.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns5");
	hasValue |= m_DFUDataNonKeyedColumns6.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns6");
	hasValue |= m_DFUDataNonKeyedColumns7.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns7");
	hasValue |= m_DFUDataNonKeyedColumns8.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns8");
	hasValue |= m_DFUDataNonKeyedColumns9.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns9");
	hasValue |= m_DFUDataNonKeyedColumns10.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns10");
	hasValue |= m_DFUDataNonKeyedColumns11.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns11");
	hasValue |= m_DFUDataNonKeyedColumns12.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns12");
	hasValue |= m_DFUDataNonKeyedColumns13.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns13");
	hasValue |= m_DFUDataNonKeyedColumns14.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns14");
	hasValue |= m_DFUDataNonKeyedColumns15.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns15");
	hasValue |= m_DFUDataNonKeyedColumns16.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns16");
	hasValue |= m_DFUDataNonKeyedColumns17.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns17");
	hasValue |= m_DFUDataNonKeyedColumns18.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns18");
	hasValue |= m_DFUDataNonKeyedColumns19.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns19");
	hasValue |= m_DFUDataNonKeyedColumns20.unmarshall(ctx, soapval, "DFUDataNonKeyedColumns20");
	hasValue |= m_RowCount.unmarshall(ctx, soapval, "RowCount");
	hasValue |= m_ShowColumns.unmarshall(ctx, soapval, "ShowColumns");
	hasValue |= m_ChooseFile.unmarshall(ctx, soapval, "ChooseFile");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_FilterBy.unmarshall(ctx, soapval, "FilterBy");
	hasValue |= m_FilterForGoBack.unmarshall(ctx, soapval, "FilterForGoBack");
	hasValue |= m_ColumnsHidden.unmarshall(ctx, soapval, "ColumnsHidden");
	hasValue |= m_ColumnCount.unmarshall(ctx, soapval, "ColumnCount");
	hasValue |= m_StartForGoback.unmarshall(ctx, soapval, "StartForGoback");
	hasValue |= m_CountForGoback.unmarshall(ctx, soapval, "CountForGoback");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_Total.unmarshall(ctx, soapval, "Total");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	hasValue |= m_MsgToDisplay.unmarshall(ctx, soapval, "MsgToDisplay");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_ClusterType.unmarshall(ctx, soapval, "ClusterType");
	hasValue |= m_File.unmarshall(ctx, soapval, "File");
	hasValue |= m_Key.unmarshall(ctx, soapval, "Key");
	hasValue |= m_SchemaOnly.unmarshall(ctx, soapval, "SchemaOnly");
	hasValue |= m_RoxieSelections.unmarshall(ctx, soapval, "RoxieSelections");
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, soapval, "DisableUppercaseTranslation");
	hasValue |= m_AutoUppercaseTranslation.unmarshall(ctx, soapval, "AutoUppercaseTranslation");
	hasValue |= m_SelectedKey.unmarshall(ctx, soapval, "SelectedKey");
	return hasValue;
}

bool CDFUSearchDataResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_OpenLogicalName.unmarshall(ctx, params, attachments, "OpenLogicalName", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_ParentName.unmarshall(ctx, params, attachments, "ParentName", basepath);
	hasValue |= m_StartIndex.unmarshall(ctx, params, attachments, "StartIndex", basepath);
	hasValue |= m_EndIndex.unmarshall(ctx, params, attachments, "EndIndex", basepath);
	hasValue |= m_DFUDataKeyedColumns1.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns1", basepath);
	hasValue |= m_DFUDataKeyedColumns2.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns2", basepath);
	hasValue |= m_DFUDataKeyedColumns3.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns3", basepath);
	hasValue |= m_DFUDataKeyedColumns4.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns4", basepath);
	hasValue |= m_DFUDataKeyedColumns5.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns5", basepath);
	hasValue |= m_DFUDataKeyedColumns6.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns6", basepath);
	hasValue |= m_DFUDataKeyedColumns7.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns7", basepath);
	hasValue |= m_DFUDataKeyedColumns8.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns8", basepath);
	hasValue |= m_DFUDataKeyedColumns9.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns9", basepath);
	hasValue |= m_DFUDataKeyedColumns10.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns10", basepath);
	hasValue |= m_DFUDataKeyedColumns11.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns11", basepath);
	hasValue |= m_DFUDataKeyedColumns12.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns12", basepath);
	hasValue |= m_DFUDataKeyedColumns13.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns13", basepath);
	hasValue |= m_DFUDataKeyedColumns14.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns14", basepath);
	hasValue |= m_DFUDataKeyedColumns15.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns15", basepath);
	hasValue |= m_DFUDataKeyedColumns16.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns16", basepath);
	hasValue |= m_DFUDataKeyedColumns17.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns17", basepath);
	hasValue |= m_DFUDataKeyedColumns18.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns18", basepath);
	hasValue |= m_DFUDataKeyedColumns19.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns19", basepath);
	hasValue |= m_DFUDataKeyedColumns20.unmarshall(ctx, params, attachments, "DFUDataKeyedColumns20", basepath);
	hasValue |= m_DFUDataNonKeyedColumns1.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns1", basepath);
	hasValue |= m_DFUDataNonKeyedColumns2.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns2", basepath);
	hasValue |= m_DFUDataNonKeyedColumns3.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns3", basepath);
	hasValue |= m_DFUDataNonKeyedColumns4.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns4", basepath);
	hasValue |= m_DFUDataNonKeyedColumns5.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns5", basepath);
	hasValue |= m_DFUDataNonKeyedColumns6.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns6", basepath);
	hasValue |= m_DFUDataNonKeyedColumns7.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns7", basepath);
	hasValue |= m_DFUDataNonKeyedColumns8.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns8", basepath);
	hasValue |= m_DFUDataNonKeyedColumns9.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns9", basepath);
	hasValue |= m_DFUDataNonKeyedColumns10.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns10", basepath);
	hasValue |= m_DFUDataNonKeyedColumns11.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns11", basepath);
	hasValue |= m_DFUDataNonKeyedColumns12.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns12", basepath);
	hasValue |= m_DFUDataNonKeyedColumns13.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns13", basepath);
	hasValue |= m_DFUDataNonKeyedColumns14.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns14", basepath);
	hasValue |= m_DFUDataNonKeyedColumns15.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns15", basepath);
	hasValue |= m_DFUDataNonKeyedColumns16.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns16", basepath);
	hasValue |= m_DFUDataNonKeyedColumns17.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns17", basepath);
	hasValue |= m_DFUDataNonKeyedColumns18.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns18", basepath);
	hasValue |= m_DFUDataNonKeyedColumns19.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns19", basepath);
	hasValue |= m_DFUDataNonKeyedColumns20.unmarshall(ctx, params, attachments, "DFUDataNonKeyedColumns20", basepath);
	hasValue |= m_RowCount.unmarshall(ctx, params, attachments, "RowCount", basepath);
	hasValue |= m_ShowColumns.unmarshall(ctx, params, attachments, "ShowColumns", basepath);
	hasValue |= m_ChooseFile.unmarshall(ctx, params, attachments, "ChooseFile", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_FilterBy.unmarshall(ctx, params, attachments, "FilterBy", basepath);
	hasValue |= m_FilterForGoBack.unmarshall(ctx, params, attachments, "FilterForGoBack", basepath);
	hasValue |= m_ColumnsHidden.unmarshall(ctx, params, attachments, "ColumnsHidden", basepath);
	hasValue |= m_ColumnCount.unmarshall(ctx, params, attachments, "ColumnCount", basepath);
	hasValue |= m_StartForGoback.unmarshall(ctx, params, attachments, "StartForGoback", basepath);
	hasValue |= m_CountForGoback.unmarshall(ctx, params, attachments, "CountForGoback", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_Total.unmarshall(ctx, params, attachments, "Total", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	hasValue |= m_MsgToDisplay.unmarshall(ctx, params, attachments, "MsgToDisplay", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_ClusterType.unmarshall(ctx, params, attachments, "ClusterType", basepath);
	hasValue |= m_File.unmarshall(ctx, params, attachments, "File", basepath);
	hasValue |= m_Key.unmarshall(ctx, params, attachments, "Key", basepath);
	hasValue |= m_SchemaOnly.unmarshall(ctx, params, attachments, "SchemaOnly", basepath);
	hasValue |= m_RoxieSelections.unmarshall(ctx, params, attachments, "RoxieSelections", basepath);
	hasValue |= m_DisableUppercaseTranslation.unmarshall(ctx, params, attachments, "DisableUppercaseTranslation", basepath);
	hasValue |= m_AutoUppercaseTranslation.unmarshall(ctx, params, attachments, "AutoUppercaseTranslation", basepath);
	hasValue |= m_SelectedKey.unmarshall(ctx, params, attachments, "SelectedKey", basepath);
	return hasValue;
}

const char * CDFUSearchDataResponse::getOpenLogicalName() { return m_OpenLogicalName.query();}
const char * CDFUSearchDataResponse::getLogicalName() { return m_LogicalName.query();}
const char * CDFUSearchDataResponse::getParentName() { return m_ParentName.query();}
bool CDFUSearchDataResponse::getStartIndex_isNull(){return m_StartIndex.is_nil();}
__int64 CDFUSearchDataResponse::getStartIndex() { return m_StartIndex;}
bool CDFUSearchDataResponse::getEndIndex_isNull(){return m_EndIndex.is_nil();}
__int64 CDFUSearchDataResponse::getEndIndex() { return m_EndIndex;}
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns1() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns1; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns2() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns2; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns3() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns3; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns4() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns4; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns5() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns5; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns6() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns6; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns7() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns7; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns8() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns8; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns9() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns9; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns10() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns10; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns11() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns11; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns12() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns12; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns13() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns13; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns14() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns14; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns15() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns15; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns16() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns16; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns17() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns17; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns18() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns18; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns19() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns19; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataKeyedColumns20() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataKeyedColumns20; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns1() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns1; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns2() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns2; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns3() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns3; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns4() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns4; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns5() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns5; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns6() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns6; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns7() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns7; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns8() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns8; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns9() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns9; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns10() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns10; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns11() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns11; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns12() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns12; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns13() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns13; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns14() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns14; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns15() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns15; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns16() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns16; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns17() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns17; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns18() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns18; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns19() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns19; }
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getDFUDataNonKeyedColumns20() { return (IArrayOf<IConstDFUDataColumn> &) m_DFUDataNonKeyedColumns20; }
bool CDFUSearchDataResponse::getRowCount_isNull(){return m_RowCount.is_nil();}
__int64 CDFUSearchDataResponse::getRowCount() { return m_RowCount;}
const char * CDFUSearchDataResponse::getShowColumns() { return m_ShowColumns.query();}
bool CDFUSearchDataResponse::getChooseFile_isNull(){return m_ChooseFile.is_nil();}
int CDFUSearchDataResponse::getChooseFile() { return m_ChooseFile;}
const char * CDFUSearchDataResponse::getName() { return m_Name.query();}
const char * CDFUSearchDataResponse::getFilterBy() { return m_FilterBy.query();}
const char * CDFUSearchDataResponse::getFilterForGoBack() { return m_FilterForGoBack.query();}
IArrayOf<IConstDFUDataColumn> & CDFUSearchDataResponse::getColumnsHidden() { return (IArrayOf<IConstDFUDataColumn> &) m_ColumnsHidden; }
bool CDFUSearchDataResponse::getColumnCount_isNull(){return m_ColumnCount.is_nil();}
int CDFUSearchDataResponse::getColumnCount() { return m_ColumnCount;}
bool CDFUSearchDataResponse::getStartForGoback_isNull(){return m_StartForGoback.is_nil();}
__int64 CDFUSearchDataResponse::getStartForGoback() { return m_StartForGoback;}
bool CDFUSearchDataResponse::getCountForGoback_isNull(){return m_CountForGoback.is_nil();}
int CDFUSearchDataResponse::getCountForGoback() { return m_CountForGoback;}
bool CDFUSearchDataResponse::getStart_isNull(){return m_Start.is_nil();}
__int64 CDFUSearchDataResponse::getStart() { return m_Start;}
bool CDFUSearchDataResponse::getCount_isNull(){return m_Count.is_nil();}
__int64 CDFUSearchDataResponse::getCount() { return m_Count;}
bool CDFUSearchDataResponse::getPageSize_isNull(){return m_PageSize.is_nil();}
__int64 CDFUSearchDataResponse::getPageSize() { return m_PageSize;}
bool CDFUSearchDataResponse::getTotal_isNull(){return m_Total.is_nil();}
__int64 CDFUSearchDataResponse::getTotal() { return m_Total;}
const char * CDFUSearchDataResponse::getResult() { return m_Result.query();}
const char * CDFUSearchDataResponse::getMsgToDisplay() { return m_MsgToDisplay.query();}
const char * CDFUSearchDataResponse::getCluster() { return m_Cluster.query();}
const char * CDFUSearchDataResponse::getClusterType() { return m_ClusterType.query();}
const char * CDFUSearchDataResponse::getFile() { return m_File.query();}
const char * CDFUSearchDataResponse::getKey() { return m_Key.query();}
bool CDFUSearchDataResponse::getSchemaOnly_isNull(){return m_SchemaOnly.is_nil();}
bool CDFUSearchDataResponse::getSchemaOnly() { return m_SchemaOnly;}
bool CDFUSearchDataResponse::getRoxieSelections_isNull(){return m_RoxieSelections.is_nil();}
bool CDFUSearchDataResponse::getRoxieSelections() { return m_RoxieSelections;}
bool CDFUSearchDataResponse::getDisableUppercaseTranslation_isNull(){return m_DisableUppercaseTranslation.is_nil();}
bool CDFUSearchDataResponse::getDisableUppercaseTranslation() { return m_DisableUppercaseTranslation;}
bool CDFUSearchDataResponse::getAutoUppercaseTranslation_isNull(){return m_AutoUppercaseTranslation.is_nil();}
bool CDFUSearchDataResponse::getAutoUppercaseTranslation() { return m_AutoUppercaseTranslation;}
const char * CDFUSearchDataResponse::getSelectedKey() { return m_SelectedKey.query();}
void CDFUSearchDataResponse::setOpenLogicalName(const char * val){ m_OpenLogicalName.set(val); }
void CDFUSearchDataResponse::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CDFUSearchDataResponse::setParentName(const char * val){ m_ParentName.set(val); }
void CDFUSearchDataResponse::setStartIndex_null(){ m_StartIndex.Nil(); }void CDFUSearchDataResponse::setStartIndex(__int64 val){ m_StartIndex=val; }
void CDFUSearchDataResponse::setEndIndex_null(){ m_EndIndex.Nil(); }void CDFUSearchDataResponse::setEndIndex(__int64 val){ m_EndIndex=val; }
void CDFUSearchDataResponse::setDFUDataKeyedColumns1(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns1(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns2(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns2(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns3(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns3(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns4(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns4(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns5(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns5(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns6(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns6(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns7(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns7(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns8(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns8(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns9(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns9(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns10(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns10(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns11(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns11(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns12(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns12(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns13(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns13(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns14(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns14(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns15(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns15(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns16(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns16(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns17(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns17(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns18(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns18(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns19(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns19(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns20(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataKeyedColumns20(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns1(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns1(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns1->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns1.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns2(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns2(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns2->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns2.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns3(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns3(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns3->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns3.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns4(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns4(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns4->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns4.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns5(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns5(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns5->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns5.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns6(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns6(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns6->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns6.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns7(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns7(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns7->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns7.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns8(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns8(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns8->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns8.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns9(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns9(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns9->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns9.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns10(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns10(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns10->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns10.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns11(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns11(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns11->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns11.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns12(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns12(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns12->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns12.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns13(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns13(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns13->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns13.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns14(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns14(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns14->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns14.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns15(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns15(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns15->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns15.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns16(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns16(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns16->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns16.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns17(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns17(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns17->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns17.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns18(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns18(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns18->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns18.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns19(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns19(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns19->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns19.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns20(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setDFUDataNonKeyedColumns20(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DFUDataNonKeyedColumns20->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DFUDataNonKeyedColumns20.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setRowCount_null(){ m_RowCount.Nil(); }void CDFUSearchDataResponse::setRowCount(__int64 val){ m_RowCount=val; }
void CDFUSearchDataResponse::setShowColumns(const char * val){ m_ShowColumns.set(val); }
void CDFUSearchDataResponse::setChooseFile_null(){ m_ChooseFile.Nil(); }void CDFUSearchDataResponse::setChooseFile(int val){ m_ChooseFile=val; }
void CDFUSearchDataResponse::setName(const char * val){ m_Name.set(val); }
void CDFUSearchDataResponse::setFilterBy(const char * val){ m_FilterBy.set(val); }
void CDFUSearchDataResponse::setFilterForGoBack(const char * val){ m_FilterForGoBack.set(val); }
void CDFUSearchDataResponse::setColumnsHidden(IArrayOf<IEspDFUDataColumn> &val)
{
	m_ColumnsHidden->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_ColumnsHidden.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setColumnsHidden(IArrayOf<IConstDFUDataColumn> &val)
{
	m_ColumnsHidden->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_ColumnsHidden.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUSearchDataResponse::setColumnCount_null(){ m_ColumnCount.Nil(); }void CDFUSearchDataResponse::setColumnCount(int val){ m_ColumnCount=val; }
void CDFUSearchDataResponse::setStartForGoback_null(){ m_StartForGoback.Nil(); }void CDFUSearchDataResponse::setStartForGoback(__int64 val){ m_StartForGoback=val; }
void CDFUSearchDataResponse::setCountForGoback_null(){ m_CountForGoback.Nil(); }void CDFUSearchDataResponse::setCountForGoback(int val){ m_CountForGoback=val; }
void CDFUSearchDataResponse::setStart_null(){ m_Start.Nil(); }void CDFUSearchDataResponse::setStart(__int64 val){ m_Start=val; }
void CDFUSearchDataResponse::setCount_null(){ m_Count.Nil(); }void CDFUSearchDataResponse::setCount(__int64 val){ m_Count=val; }
void CDFUSearchDataResponse::setPageSize_null(){ m_PageSize.Nil(); }void CDFUSearchDataResponse::setPageSize(__int64 val){ m_PageSize=val; }
void CDFUSearchDataResponse::setTotal_null(){ m_Total.Nil(); }void CDFUSearchDataResponse::setTotal(__int64 val){ m_Total=val; }
void CDFUSearchDataResponse::setResult(const char * val){ m_Result.set(val); }
void CDFUSearchDataResponse::setMsgToDisplay(const char * val){ m_MsgToDisplay.set(val); }
void CDFUSearchDataResponse::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUSearchDataResponse::setClusterType(const char * val){ m_ClusterType.set(val); }
void CDFUSearchDataResponse::setFile(const char * val){ m_File.set(val); }
void CDFUSearchDataResponse::setKey(const char * val){ m_Key.set(val); }
void CDFUSearchDataResponse::setSchemaOnly_null(){ m_SchemaOnly.Nil(); }void CDFUSearchDataResponse::setSchemaOnly(bool val){ m_SchemaOnly=val; }
void CDFUSearchDataResponse::setRoxieSelections_null(){ m_RoxieSelections.Nil(); }void CDFUSearchDataResponse::setRoxieSelections(bool val){ m_RoxieSelections=val; }
void CDFUSearchDataResponse::setDisableUppercaseTranslation_null(){ m_DisableUppercaseTranslation.Nil(); }void CDFUSearchDataResponse::setDisableUppercaseTranslation(bool val){ m_DisableUppercaseTranslation=val; }
void CDFUSearchDataResponse::setAutoUppercaseTranslation_null(){ m_AutoUppercaseTranslation.Nil(); }void CDFUSearchDataResponse::setAutoUppercaseTranslation(bool val){ m_AutoUppercaseTranslation=val; }
void CDFUSearchDataResponse::setSelectedKey(const char * val){ m_SelectedKey.set(val); }
extern "C"  IEspDFUSearchDataResponse *createDFUSearchDataResponse(const char *serv){return ((IEspDFUSearchDataResponse *)new CDFUSearchDataResponse(serv));}
extern "C"  IClientDFUSearchDataResponse *createClientDFUSearchDataResponse(const char *serv){return ((IClientDFUSearchDataResponse *)new CDFUSearchDataResponse(serv));}

//=======================================================
// class CDFUGetFileMetaDataRequest Implementation
//=======================================================

CDFUGetFileMetaDataRequest::CDFUGetFileMetaDataRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_LogicalFileName(nilIgnore),m_ClusterName(nilIgnore),m_IncludeXmlSchema(0, nilIgnore,false),m_AddHeaderInXmlSchema(0, nilIgnore,false),m_IncludeXmlXPathSchema(0, nilIgnore,false),m_AddHeaderInXmlXPathSchema(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUGetFileMetaDataRequest::CDFUGetFileMetaDataRequest(const char *serviceName, const char *bc)
	: m_LogicalFileName(nilIgnore),m_ClusterName(nilIgnore),m_IncludeXmlSchema(0, nilIgnore,false),m_AddHeaderInXmlSchema(0, nilIgnore,false),m_IncludeXmlXPathSchema(0, nilIgnore,false),m_AddHeaderInXmlXPathSchema(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataRequest");
}

CDFUGetFileMetaDataRequest::CDFUGetFileMetaDataRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_LogicalFileName(nilIgnore),m_ClusterName(nilIgnore),m_IncludeXmlSchema(0, nilIgnore,false),m_AddHeaderInXmlSchema(0, nilIgnore,false),m_IncludeXmlXPathSchema(0, nilIgnore,false),m_AddHeaderInXmlXPathSchema(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUGetFileMetaDataRequest::CDFUGetFileMetaDataRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_LogicalFileName(nilIgnore),m_ClusterName(nilIgnore),m_IncludeXmlSchema(0, nilIgnore,false),m_AddHeaderInXmlSchema(0, nilIgnore,false),m_IncludeXmlXPathSchema(0, nilIgnore,false),m_AddHeaderInXmlXPathSchema(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUGetFileMetaDataRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalFileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeXmlSchema\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AddHeaderInXmlSchema\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeXmlXPathSchema\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AddHeaderInXmlXPathSchema\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUGetFileMetaDataRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUGetFileMetaDataRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUGetFileMetaDataRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalFileName");
	form.appendf("  <tr><td><b>LogicalFileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeXmlSchema");
	
	form.appendf("  <tr><td><b>IncludeXmlSchema? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AddHeaderInXmlSchema");
	
	form.appendf("  <tr><td><b>AddHeaderInXmlSchema? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeXmlXPathSchema");
	
	form.appendf("  <tr><td><b>IncludeXmlXPathSchema? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AddHeaderInXmlXPathSchema");
	
	form.appendf("  <tr><td><b>AddHeaderInXmlXPathSchema? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUGetFileMetaDataRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUGetFileMetaDataRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_LogicalFileName.marshall(rpc_resp, "LogicalFileName", "", "", "");
	m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	m_IncludeXmlSchema.marshall(rpc_resp, "IncludeXmlSchema", "", "", "");
	m_AddHeaderInXmlSchema.marshall(rpc_resp, "AddHeaderInXmlSchema", "", "", "");
	m_IncludeXmlXPathSchema.marshall(rpc_resp, "IncludeXmlXPathSchema", "", "", "");
	m_AddHeaderInXmlXPathSchema.marshall(rpc_resp, "AddHeaderInXmlXPathSchema", "", "", "");
}


void CDFUGetFileMetaDataRequest::copy(CDFUGetFileMetaDataRequest &from)
{
	m_LogicalFileName.copy(from.m_LogicalFileName);
	m_ClusterName.copy(from.m_ClusterName);
	m_IncludeXmlSchema.copy(from.m_IncludeXmlSchema);
	m_AddHeaderInXmlSchema.copy(from.m_AddHeaderInXmlSchema);
	m_IncludeXmlXPathSchema.copy(from.m_IncludeXmlXPathSchema);
	m_AddHeaderInXmlXPathSchema.copy(from.m_AddHeaderInXmlXPathSchema);
}


void CDFUGetFileMetaDataRequest::copy(IConstDFUGetFileMetaDataRequest &ifrom)
{
	setLogicalFileName(ifrom.getLogicalFileName());
	setClusterName(ifrom.getClusterName());
	setIncludeXmlSchema(ifrom.getIncludeXmlSchema());
	setAddHeaderInXmlSchema(ifrom.getAddHeaderInXmlSchema());
	setIncludeXmlXPathSchema(ifrom.getIncludeXmlXPathSchema());
	setAddHeaderInXmlXPathSchema(ifrom.getAddHeaderInXmlXPathSchema());
}


void CDFUGetFileMetaDataRequest::getAttributes(IProperties &attributes)
{
}


void CDFUGetFileMetaDataRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_LogicalFileName.toStr(ctx, buffer, "LogicalFileName", "", true, "", "");
	m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	m_IncludeXmlSchema.toStr(ctx, buffer, "IncludeXmlSchema", "", true, "", "");
	m_AddHeaderInXmlSchema.toStr(ctx, buffer, "AddHeaderInXmlSchema", "", true, "", "");
	m_IncludeXmlXPathSchema.toStr(ctx, buffer, "IncludeXmlXPathSchema", "", true, "", "");
	m_AddHeaderInXmlXPathSchema.toStr(ctx, buffer, "AddHeaderInXmlXPathSchema", "", true, "", "");
}


void CDFUGetFileMetaDataRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUGetFileMetaDataRequest::serializer(IEspContext* ctx, IConstDFUGetFileMetaDataRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUGetFileMetaDataRequest>");
	// field LogicalFileName
	{
		const char* s = src.getLogicalFileName();
		if (s && *s)
		{
			buffer.append("<LogicalFileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalFileName>");
		}
	}
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field IncludeXmlSchema
	{
		bool b = src.getIncludeXmlSchema();
		if (b)
			buffer.appendf("<IncludeXmlSchema>1</IncludeXmlSchema>");
	}
	// field AddHeaderInXmlSchema
	{
		bool b = src.getAddHeaderInXmlSchema();
		if (b)
			buffer.appendf("<AddHeaderInXmlSchema>1</AddHeaderInXmlSchema>");
	}
	// field IncludeXmlXPathSchema
	{
		bool b = src.getIncludeXmlXPathSchema();
		if (b)
			buffer.appendf("<IncludeXmlXPathSchema>1</IncludeXmlXPathSchema>");
	}
	// field AddHeaderInXmlXPathSchema
	{
		bool b = src.getAddHeaderInXmlXPathSchema();
		if (b)
			buffer.appendf("<AddHeaderInXmlXPathSchema>1</AddHeaderInXmlXPathSchema>");
	}
	if (keepRootTag)
		buffer.append("</DFUGetFileMetaDataRequest>");
}

bool CDFUGetFileMetaDataRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_LogicalFileName.unmarshall(rpc_request, "LogicalFileName", basepath);
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_IncludeXmlSchema.unmarshall(rpc_request, "IncludeXmlSchema", basepath);
	hasValue |= m_AddHeaderInXmlSchema.unmarshall(rpc_request, "AddHeaderInXmlSchema", basepath);
	hasValue |= m_IncludeXmlXPathSchema.unmarshall(rpc_request, "IncludeXmlXPathSchema", basepath);
	hasValue |= m_AddHeaderInXmlXPathSchema.unmarshall(rpc_request, "AddHeaderInXmlXPathSchema", basepath);
	return hasValue;
}

bool CDFUGetFileMetaDataRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_LogicalFileName.unmarshall(ctx, soapval, "LogicalFileName");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_IncludeXmlSchema.unmarshall(ctx, soapval, "IncludeXmlSchema");
	hasValue |= m_AddHeaderInXmlSchema.unmarshall(ctx, soapval, "AddHeaderInXmlSchema");
	hasValue |= m_IncludeXmlXPathSchema.unmarshall(ctx, soapval, "IncludeXmlXPathSchema");
	hasValue |= m_AddHeaderInXmlXPathSchema.unmarshall(ctx, soapval, "AddHeaderInXmlXPathSchema");
	return hasValue;
}

bool CDFUGetFileMetaDataRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_LogicalFileName.unmarshall(ctx, params, attachments, "LogicalFileName", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_IncludeXmlSchema.unmarshall(ctx, params, attachments, "IncludeXmlSchema", basepath);
	hasValue |= m_AddHeaderInXmlSchema.unmarshall(ctx, params, attachments, "AddHeaderInXmlSchema", basepath);
	hasValue |= m_IncludeXmlXPathSchema.unmarshall(ctx, params, attachments, "IncludeXmlXPathSchema", basepath);
	hasValue |= m_AddHeaderInXmlXPathSchema.unmarshall(ctx, params, attachments, "AddHeaderInXmlXPathSchema", basepath);
	return hasValue;
}

const char * CDFUGetFileMetaDataRequest::getLogicalFileName() { return m_LogicalFileName.query();}
const char * CDFUGetFileMetaDataRequest::getClusterName() { return m_ClusterName.query();}
bool CDFUGetFileMetaDataRequest::getIncludeXmlSchema() { return m_IncludeXmlSchema;}
bool CDFUGetFileMetaDataRequest::getAddHeaderInXmlSchema() { return m_AddHeaderInXmlSchema;}
bool CDFUGetFileMetaDataRequest::getIncludeXmlXPathSchema() { return m_IncludeXmlXPathSchema;}
bool CDFUGetFileMetaDataRequest::getAddHeaderInXmlXPathSchema() { return m_AddHeaderInXmlXPathSchema;}
void CDFUGetFileMetaDataRequest::setLogicalFileName(const char * val){ m_LogicalFileName.set(val); }
void CDFUGetFileMetaDataRequest::setClusterName(const char * val){ m_ClusterName.set(val); }
void CDFUGetFileMetaDataRequest::setIncludeXmlSchema(bool val){ m_IncludeXmlSchema=val; }
void CDFUGetFileMetaDataRequest::setAddHeaderInXmlSchema(bool val){ m_AddHeaderInXmlSchema=val; }
void CDFUGetFileMetaDataRequest::setIncludeXmlXPathSchema(bool val){ m_IncludeXmlXPathSchema=val; }
void CDFUGetFileMetaDataRequest::setAddHeaderInXmlXPathSchema(bool val){ m_AddHeaderInXmlXPathSchema=val; }
extern "C"  IEspDFUGetFileMetaDataRequest *createDFUGetFileMetaDataRequest(const char *serv){return ((IEspDFUGetFileMetaDataRequest *)new CDFUGetFileMetaDataRequest(serv));}
extern "C"  IClientDFUGetFileMetaDataRequest *createClientDFUGetFileMetaDataRequest(const char *serv){return ((IClientDFUGetFileMetaDataRequest *)new CDFUGetFileMetaDataRequest(serv));}

//=======================================================
// class CDFUGetFileMetaDataResponse Implementation
//=======================================================

CDFUGetFileMetaDataResponse::CDFUGetFileMetaDataResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_TotalColumnCount(nilRemove),m_KeyedColumnCount(nilRemove),m_DataColumns(nilRemove),m_XmlSchema(nilRemove),m_XmlXPathSchema(nilRemove),m_TotalResultRows(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUGetFileMetaDataResponse::CDFUGetFileMetaDataResponse(const char *serviceName, const char *bc)
	: m_TotalColumnCount(nilRemove),m_KeyedColumnCount(nilRemove),m_DataColumns(nilRemove),m_XmlSchema(nilRemove),m_XmlXPathSchema(nilRemove),m_TotalResultRows(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataResponse");
}

CDFUGetFileMetaDataResponse::CDFUGetFileMetaDataResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_TotalColumnCount(nilRemove),m_KeyedColumnCount(nilRemove),m_DataColumns(nilRemove),m_XmlSchema(nilRemove),m_XmlXPathSchema(nilRemove),m_TotalResultRows(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUGetFileMetaDataResponse::CDFUGetFileMetaDataResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_TotalColumnCount(nilRemove),m_KeyedColumnCount(nilRemove),m_DataColumns(nilRemove),m_XmlSchema(nilRemove),m_XmlXPathSchema(nilRemove),m_TotalResultRows(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUGetFileMetaDataResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUGetFileMetaDataResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"TotalColumnCount\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"KeyedColumnCount\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DataColumns\" type=\"tns:ArrayOfDFUDataColumn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"XmlSchema\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"XmlXPathSchema\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TotalResultRows\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUDataColumn::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUDataColumn") && added.getValue("ArrayOfDFUDataColumn")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUDataColumn\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUDataColumn\" type=\"tns:DFUDataColumn\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUDataColumn",1);
	}
	return schema;
}

void CDFUGetFileMetaDataResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUGetFileMetaDataResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUDataColumn"))
	{
		added.setValue("DFUDataColumn",1);
		CDFUDataColumn::getMapInfo(info,added);
	}
}

StringBuffer &CDFUGetFileMetaDataResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TotalColumnCount");
	form.appendf("  <tr><td><b>TotalColumnCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("KeyedColumnCount");
	form.appendf("  <tr><td><b>KeyedColumnCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DataColumns");
	form.appendf("<tr><td><b>DataColumns: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("XmlSchema");
	form.appendf("  <tr><td><b>XmlSchema: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("XmlXPathSchema");
	form.appendf("  <tr><td><b>XmlXPathSchema: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TotalResultRows");
	form.appendf("  <tr><td><b>TotalResultRows: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUGetFileMetaDataResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUGetFileMetaDataResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_TotalColumnCount.marshall(rpc_resp, "TotalColumnCount", "", "", "");
		m_KeyedColumnCount.marshall(rpc_resp, "KeyedColumnCount", "", "", "");
		m_DataColumns.marshall(rpc_resp, "DataColumns", "DFUDataColumn");
		m_XmlSchema.marshall(rpc_resp, "XmlSchema", "", "", "");
		m_XmlXPathSchema.marshall(rpc_resp, "XmlXPathSchema", "", "", "");
		m_TotalResultRows.marshall(rpc_resp, "TotalResultRows", "", "", "");
	}
}


void CDFUGetFileMetaDataResponse::copy(CDFUGetFileMetaDataResponse &from)
{
	m_TotalColumnCount.copy(from.m_TotalColumnCount);
	m_KeyedColumnCount.copy(from.m_KeyedColumnCount);
	m_DataColumns.copy(from.m_DataColumns);
	m_XmlSchema.copy(from.m_XmlSchema);
	m_XmlXPathSchema.copy(from.m_XmlXPathSchema);
	m_TotalResultRows.copy(from.m_TotalResultRows);
}


void CDFUGetFileMetaDataResponse::copy(IConstDFUGetFileMetaDataResponse &ifrom)
{
	setTotalColumnCount(ifrom.getTotalColumnCount());
	setKeyedColumnCount(ifrom.getKeyedColumnCount());
	setDataColumns(ifrom.getDataColumns());
	setXmlSchema(ifrom.getXmlSchema());
	setXmlXPathSchema(ifrom.getXmlXPathSchema());
	setTotalResultRows(ifrom.getTotalResultRows());
}


void CDFUGetFileMetaDataResponse::getAttributes(IProperties &attributes)
{
}


void CDFUGetFileMetaDataResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_TotalColumnCount.toStr(ctx, buffer, "TotalColumnCount", "", false, "", "");
		m_KeyedColumnCount.toStr(ctx, buffer, "KeyedColumnCount", "", false, "", "");
		m_DataColumns.toStr(ctx, buffer, "DataColumns", "DFUDataColumn");
		m_XmlSchema.toStr(ctx, buffer, "XmlSchema", "", false, "", "");
		m_XmlXPathSchema.toStr(ctx, buffer, "XmlXPathSchema", "", false, "", "");
		m_TotalResultRows.toStr(ctx, buffer, "TotalResultRows", "", false, "", "");
	}
}


void CDFUGetFileMetaDataResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUGetFileMetaDataResponse::serializer(IEspContext* ctx, IConstDFUGetFileMetaDataResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUGetFileMetaDataResponse>");
	// field TotalColumnCount
	{
		int n = src.getTotalColumnCount();
		if (n)
			buffer.appendf("<TotalColumnCount>%d</TotalColumnCount>", n);
	}
	// field KeyedColumnCount
	{
		int n = src.getKeyedColumnCount();
		if (n)
			buffer.appendf("<KeyedColumnCount>%d</KeyedColumnCount>", n);
	}
	// field DataColumns
	{
		IArrayOf<IConstDFUDataColumn>& v = src.getDataColumns();
		int size = v.length();
		if (size>0)
			buffer.append("<DataColumns>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUDataColumn::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DataColumns>");
	}
	// field XmlSchema
	{
		const char* s = src.getXmlSchema();
		if (s && *s)
		{
			buffer.append("<XmlSchema>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XmlSchema>");
		}
	}
	// field XmlXPathSchema
	{
		const char* s = src.getXmlXPathSchema();
		if (s && *s)
		{
			buffer.append("<XmlXPathSchema>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XmlXPathSchema>");
		}
	}
	// field TotalResultRows
	{
		//*** default kind: TK_INT; type=int64, name=TotalResultRows
		buffer.append("<TotalResultRows>");
		buffer.append(src.getTotalResultRows());
		buffer.append("</TotalResultRows>");
	}
	if (keepRootTag)
		buffer.append("</DFUGetFileMetaDataResponse>");
}

bool CDFUGetFileMetaDataResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_TotalColumnCount.unmarshall(rpc_request, "TotalColumnCount", basepath);
		hasValue |= m_KeyedColumnCount.unmarshall(rpc_request, "KeyedColumnCount", basepath);
		hasValue |= m_DataColumns.unmarshall(rpc_request, "DataColumns", basepath);
		hasValue |= m_XmlSchema.unmarshall(rpc_request, "XmlSchema", basepath);
		hasValue |= m_XmlXPathSchema.unmarshall(rpc_request, "XmlXPathSchema", basepath);
		hasValue |= m_TotalResultRows.unmarshall(rpc_request, "TotalResultRows", basepath);
	}
	return hasValue;
}

bool CDFUGetFileMetaDataResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_TotalColumnCount.unmarshall(ctx, soapval, "TotalColumnCount");
	hasValue |= m_KeyedColumnCount.unmarshall(ctx, soapval, "KeyedColumnCount");
	hasValue |= m_DataColumns.unmarshall(ctx, soapval, "DataColumns");
	hasValue |= m_XmlSchema.unmarshall(ctx, soapval, "XmlSchema");
	hasValue |= m_XmlXPathSchema.unmarshall(ctx, soapval, "XmlXPathSchema");
	hasValue |= m_TotalResultRows.unmarshall(ctx, soapval, "TotalResultRows");
	return hasValue;
}

bool CDFUGetFileMetaDataResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_TotalColumnCount.unmarshall(ctx, params, attachments, "TotalColumnCount", basepath);
	hasValue |= m_KeyedColumnCount.unmarshall(ctx, params, attachments, "KeyedColumnCount", basepath);
	hasValue |= m_DataColumns.unmarshall(ctx, params, attachments, "DataColumns", basepath);
	hasValue |= m_XmlSchema.unmarshall(ctx, params, attachments, "XmlSchema", basepath);
	hasValue |= m_XmlXPathSchema.unmarshall(ctx, params, attachments, "XmlXPathSchema", basepath);
	hasValue |= m_TotalResultRows.unmarshall(ctx, params, attachments, "TotalResultRows", basepath);
	return hasValue;
}

bool CDFUGetFileMetaDataResponse::getTotalColumnCount_isNull(){return m_TotalColumnCount.is_nil();}
int CDFUGetFileMetaDataResponse::getTotalColumnCount() { return m_TotalColumnCount;}
bool CDFUGetFileMetaDataResponse::getKeyedColumnCount_isNull(){return m_KeyedColumnCount.is_nil();}
int CDFUGetFileMetaDataResponse::getKeyedColumnCount() { return m_KeyedColumnCount;}
IArrayOf<IConstDFUDataColumn> & CDFUGetFileMetaDataResponse::getDataColumns() { return (IArrayOf<IConstDFUDataColumn> &) m_DataColumns; }
const char * CDFUGetFileMetaDataResponse::getXmlSchema() { return m_XmlSchema.query();}
const char * CDFUGetFileMetaDataResponse::getXmlXPathSchema() { return m_XmlXPathSchema.query();}
bool CDFUGetFileMetaDataResponse::getTotalResultRows_isNull(){return m_TotalResultRows.is_nil();}
__int64 CDFUGetFileMetaDataResponse::getTotalResultRows() { return m_TotalResultRows;}
void CDFUGetFileMetaDataResponse::setTotalColumnCount_null(){ m_TotalColumnCount.Nil(); }void CDFUGetFileMetaDataResponse::setTotalColumnCount(int val){ m_TotalColumnCount=val; }
void CDFUGetFileMetaDataResponse::setKeyedColumnCount_null(){ m_KeyedColumnCount.Nil(); }void CDFUGetFileMetaDataResponse::setKeyedColumnCount(int val){ m_KeyedColumnCount=val; }
void CDFUGetFileMetaDataResponse::setDataColumns(IArrayOf<IEspDFUDataColumn> &val)
{
	m_DataColumns->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DataColumns.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUDataColumn &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetFileMetaDataResponse::setDataColumns(IArrayOf<IConstDFUDataColumn> &val)
{
	m_DataColumns->kill();
	IArrayOf<IConstDFUDataColumn> &target = m_DataColumns.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUDataColumn &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUGetFileMetaDataResponse::setXmlSchema(const char * val){ m_XmlSchema.set(val); }
void CDFUGetFileMetaDataResponse::setXmlXPathSchema(const char * val){ m_XmlXPathSchema.set(val); }
void CDFUGetFileMetaDataResponse::setTotalResultRows_null(){ m_TotalResultRows.Nil(); }void CDFUGetFileMetaDataResponse::setTotalResultRows(__int64 val){ m_TotalResultRows=val; }
extern "C"  IEspDFUGetFileMetaDataResponse *createDFUGetFileMetaDataResponse(const char *serv){return ((IEspDFUGetFileMetaDataResponse *)new CDFUGetFileMetaDataResponse(serv));}
extern "C"  IClientDFUGetFileMetaDataResponse *createClientDFUGetFileMetaDataResponse(const char *serv){return ((IClientDFUGetFileMetaDataResponse *)new CDFUGetFileMetaDataResponse(serv));}

//=======================================================
// class CListHistoryRequest Implementation
//=======================================================

CListHistoryRequest::CListHistoryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListHistoryRequest::CListHistoryRequest(const char *serviceName, const char *bc)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryRequest");
}

CListHistoryRequest::CListHistoryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CListHistoryRequest::CListHistoryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListHistoryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CListHistoryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListHistoryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CListHistoryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListHistoryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListHistoryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
}


void CListHistoryRequest::copy(CListHistoryRequest &from)
{
	m_Name.copy(from.m_Name);
}


void CListHistoryRequest::copy(IConstListHistoryRequest &ifrom)
{
	setName(ifrom.getName());
}


void CListHistoryRequest::getAttributes(IProperties &attributes)
{
}


void CListHistoryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
}


void CListHistoryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListHistoryRequest::serializer(IEspContext* ctx, IConstListHistoryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListHistoryRequest>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	if (keepRootTag)
		buffer.append("</ListHistoryRequest>");
}

bool CListHistoryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	return hasValue;
}

bool CListHistoryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	return hasValue;
}

bool CListHistoryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	return hasValue;
}

const char * CListHistoryRequest::getName() { return m_Name.query();}
void CListHistoryRequest::setName(const char * val){ m_Name.set(val); }
extern "C"  IEspListHistoryRequest *createListHistoryRequest(const char *serv){return ((IEspListHistoryRequest *)new CListHistoryRequest(serv));}
extern "C"  IClientListHistoryRequest *createClientListHistoryRequest(const char *serv){return ((IClientListHistoryRequest *)new CListHistoryRequest(serv));}

//=======================================================
// class CHistory Implementation
//=======================================================

CHistory::CHistory(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Operation(nilIgnore),m_Timestamp(nilIgnore),m_IP(nilIgnore),m_Path(nilIgnore),m_Owner(nilIgnore),m_Workunit(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("History");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CHistory::CHistory(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Operation(nilIgnore),m_Timestamp(nilIgnore),m_IP(nilIgnore),m_Path(nilIgnore),m_Owner(nilIgnore),m_Workunit(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("History");
}

StringBuffer &CHistory::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Operation\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Timestamp\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IP\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Path\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunit\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CHistory::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CHistory::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CHistory::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Operation");
	form.appendf("  <tr><td><b>Operation: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Timestamp");
	form.appendf("  <tr><td><b>Timestamp: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IP");
	form.appendf("  <tr><td><b>IP: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Path");
	form.appendf("  <tr><td><b>Path: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunit");
	form.appendf("  <tr><td><b>Workunit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CHistory::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CHistory::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Operation.marshall(rpc_resp, "Operation", "", "", "");
	m_Timestamp.marshall(rpc_resp, "Timestamp", "", "", "");
	m_IP.marshall(rpc_resp, "IP", "", "", "");
	m_Path.marshall(rpc_resp, "Path", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_Workunit.marshall(rpc_resp, "Workunit", "", "", "");
}


void CHistory::copy(CHistory &from)
{
	m_Name.copy(from.m_Name);
	m_Operation.copy(from.m_Operation);
	m_Timestamp.copy(from.m_Timestamp);
	m_IP.copy(from.m_IP);
	m_Path.copy(from.m_Path);
	m_Owner.copy(from.m_Owner);
	m_Workunit.copy(from.m_Workunit);
}


void CHistory::copy(IConstHistory &ifrom)
{
	setName(ifrom.getName());
	setOperation(ifrom.getOperation());
	setTimestamp(ifrom.getTimestamp());
	setIP(ifrom.getIP());
	setPath(ifrom.getPath());
	setOwner(ifrom.getOwner());
	setWorkunit(ifrom.getWorkunit());
}


void CHistory::getAttributes(IProperties &attributes)
{
}


void CHistory::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Operation.toStr(ctx, buffer, "Operation", "", true, "", "");
	m_Timestamp.toStr(ctx, buffer, "Timestamp", "", true, "", "");
	m_IP.toStr(ctx, buffer, "IP", "", true, "", "");
	m_Path.toStr(ctx, buffer, "Path", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_Workunit.toStr(ctx, buffer, "Workunit", "", true, "", "");
}


void CHistory::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CHistory::serializer(IEspContext* ctx, IConstHistory &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<History>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Operation
	{
		const char* s = src.getOperation();
		if (s && *s)
		{
			buffer.append("<Operation>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Operation>");
		}
	}
	// field Timestamp
	{
		const char* s = src.getTimestamp();
		if (s && *s)
		{
			buffer.append("<Timestamp>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Timestamp>");
		}
	}
	// field IP
	{
		const char* s = src.getIP();
		if (s && *s)
		{
			buffer.append("<IP>");
			encodeUtf8XML(s,buffer);
			buffer.append("</IP>");
		}
	}
	// field Path
	{
		const char* s = src.getPath();
		if (s && *s)
		{
			buffer.append("<Path>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Path>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field Workunit
	{
		const char* s = src.getWorkunit();
		if (s && *s)
		{
			buffer.append("<Workunit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Workunit>");
		}
	}
	if (keepRootTag)
		buffer.append("</History>");
}

bool CHistory::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Operation.unmarshall(rpc_request, "Operation", basepath);
	hasValue |= m_Timestamp.unmarshall(rpc_request, "Timestamp", basepath);
	hasValue |= m_IP.unmarshall(rpc_request, "IP", basepath);
	hasValue |= m_Path.unmarshall(rpc_request, "Path", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_Workunit.unmarshall(rpc_request, "Workunit", basepath);
	return hasValue;
}

bool CHistory::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Operation.unmarshall(ctx, soapval, "Operation");
	hasValue |= m_Timestamp.unmarshall(ctx, soapval, "Timestamp");
	hasValue |= m_IP.unmarshall(ctx, soapval, "IP");
	hasValue |= m_Path.unmarshall(ctx, soapval, "Path");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_Workunit.unmarshall(ctx, soapval, "Workunit");
	return hasValue;
}

bool CHistory::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Operation.unmarshall(ctx, params, attachments, "Operation", basepath);
	hasValue |= m_Timestamp.unmarshall(ctx, params, attachments, "Timestamp", basepath);
	hasValue |= m_IP.unmarshall(ctx, params, attachments, "IP", basepath);
	hasValue |= m_Path.unmarshall(ctx, params, attachments, "Path", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_Workunit.unmarshall(ctx, params, attachments, "Workunit", basepath);
	return hasValue;
}

const char * CHistory::getName() { return m_Name.query();}
const char * CHistory::getOperation() { return m_Operation.query();}
const char * CHistory::getTimestamp() { return m_Timestamp.query();}
const char * CHistory::getIP() { return m_IP.query();}
const char * CHistory::getPath() { return m_Path.query();}
const char * CHistory::getOwner() { return m_Owner.query();}
const char * CHistory::getWorkunit() { return m_Workunit.query();}
void CHistory::setName(const char * val){ m_Name.set(val); }
void CHistory::setOperation(const char * val){ m_Operation.set(val); }
void CHistory::setTimestamp(const char * val){ m_Timestamp.set(val); }
void CHistory::setIP(const char * val){ m_IP.set(val); }
void CHistory::setPath(const char * val){ m_Path.set(val); }
void CHistory::setOwner(const char * val){ m_Owner.set(val); }
void CHistory::setWorkunit(const char * val){ m_Workunit.set(val); }
extern "C"  IEspHistory *createHistory(const char *serv, const char *msgname){return ((IEspHistory *)new CHistory(serv /*, msgname*/));}
extern "C"  IClientHistory *createClientHistory(const char *serv, const char *msgname){return ((IClientHistory *)new CHistory(serv /*, msgname*/));}

//=======================================================
// class CListHistoryResponse Implementation
//=======================================================

CListHistoryResponse::CListHistoryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListHistoryResponse::CListHistoryResponse(const char *serviceName, const char *bc)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryResponse");
}

CListHistoryResponse::CListHistoryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CListHistoryResponse::CListHistoryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListHistoryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListHistoryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!context.suppressed("ListHistoryResponse","xmlmap")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"xmlmap\" type=\"xsd:base64Binary\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"History\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Origin\" type=\"tns:History\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CHistory::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CListHistoryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListHistoryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("ListHistoryResponse","xmlmap",1.36);
	if (!added.getValue("History"))
	{
		added.setValue("History",1);
		CHistory::getMapInfo(info,added);
	}
}

StringBuffer &CListHistoryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("ListHistoryResponse","xmlmap")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("xmlmap");
		form.appendf("  <tr><td><b>xmlmap: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("History");
	form.appendf("<tr><td><b>History: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListHistoryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListHistoryResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		if ((clientVer==-1.0 || clientVer<1.36))
			m_xmlmap.marshall(rpc_resp, "xmlmap", "", "", "");
		m_History.marshall(rpc_resp, "History", "Origin");
	}
}


void CListHistoryResponse::copy(CListHistoryResponse &from)
{
	m_xmlmap.copy(from.m_xmlmap);
	m_History.copy(from.m_History);
}


void CListHistoryResponse::copy(IConstListHistoryResponse &ifrom)
{
	setXmlmap(ifrom.getXmlmap());
	setHistory(ifrom.getHistory());
}


void CListHistoryResponse::getAttributes(IProperties &attributes)
{
}


void CListHistoryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		if ((clientVer==-1.0 || clientVer<1.36))
			m_xmlmap.toStr(ctx, buffer, "xmlmap", "", true, "", "");
		m_History.toStr(ctx, buffer, "History", "Origin");
	}
}


void CListHistoryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListHistoryResponse::serializer(IEspContext* ctx, IConstListHistoryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListHistoryResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field xmlmap
	if ((clientVer==-1.0 || clientVer<1.36))
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getXmlmap().toByteArray(), src.getXmlmap().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<xmlmap>%s</xmlmap>",tmp.str());
	}
	// field History
	{
		IArrayOf<IConstHistory>& v = src.getHistory();
		int size = v.length();
		if (size>0)
			buffer.append("<History>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Origin>");
			CHistory::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Origin>");
		}
		if (size>0)
			buffer.append("</History>");
	}
	if (keepRootTag)
		buffer.append("</ListHistoryResponse>");
}

bool CListHistoryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_xmlmap.unmarshall(rpc_request, "xmlmap", basepath);
		hasValue |= m_History.unmarshall(rpc_request, "History", basepath);
	}
	return hasValue;
}

bool CListHistoryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_xmlmap.unmarshall(ctx, soapval, "xmlmap");
	hasValue |= m_History.unmarshall(ctx, soapval, "History");
	return hasValue;
}

bool CListHistoryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_xmlmap.unmarshall(ctx, params, attachments, "xmlmap", basepath);
	hasValue |= m_History.unmarshall(ctx, params, attachments, "History", basepath);
	return hasValue;
}

const MemoryBuffer & CListHistoryResponse::getXmlmap() { return m_xmlmap.getValue();}
IArrayOf<IConstHistory> & CListHistoryResponse::getHistory() { return (IArrayOf<IConstHistory> &) m_History; }
void CListHistoryResponse::setXmlmap(const MemoryBuffer & val){ m_xmlmap->clear().append(val); }
void CListHistoryResponse::setHistory(IArrayOf<IEspHistory> &val)
{
	m_History->kill();
	IArrayOf<IConstHistory> &target = m_History.getValue();
	ForEachItemIn(idx, val)
	{
		IEspHistory &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CListHistoryResponse::setHistory(IArrayOf<IConstHistory> &val)
{
	m_History->kill();
	IArrayOf<IConstHistory> &target = m_History.getValue();
	ForEachItemIn(idx, val)
	{
		IConstHistory &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspListHistoryResponse *createListHistoryResponse(const char *serv){return ((IEspListHistoryResponse *)new CListHistoryResponse(serv));}
extern "C"  IClientListHistoryResponse *createClientListHistoryResponse(const char *serv){return ((IClientListHistoryResponse *)new CListHistoryResponse(serv));}

//=======================================================
// class CEraseHistoryRequest Implementation
//=======================================================

CEraseHistoryRequest::CEraseHistoryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEraseHistoryRequest::CEraseHistoryRequest(const char *serviceName, const char *bc)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryRequest");
}

CEraseHistoryRequest::CEraseHistoryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CEraseHistoryRequest::CEraseHistoryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CEraseHistoryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CEraseHistoryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEraseHistoryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CEraseHistoryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEraseHistoryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEraseHistoryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
}


void CEraseHistoryRequest::copy(CEraseHistoryRequest &from)
{
	m_Name.copy(from.m_Name);
}


void CEraseHistoryRequest::copy(IConstEraseHistoryRequest &ifrom)
{
	setName(ifrom.getName());
}


void CEraseHistoryRequest::getAttributes(IProperties &attributes)
{
}


void CEraseHistoryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
}


void CEraseHistoryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEraseHistoryRequest::serializer(IEspContext* ctx, IConstEraseHistoryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EraseHistoryRequest>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	if (keepRootTag)
		buffer.append("</EraseHistoryRequest>");
}

bool CEraseHistoryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	return hasValue;
}

bool CEraseHistoryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	return hasValue;
}

bool CEraseHistoryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	return hasValue;
}

const char * CEraseHistoryRequest::getName() { return m_Name.query();}
void CEraseHistoryRequest::setName(const char * val){ m_Name.set(val); }
extern "C"  IEspEraseHistoryRequest *createEraseHistoryRequest(const char *serv){return ((IEspEraseHistoryRequest *)new CEraseHistoryRequest(serv));}
extern "C"  IClientEraseHistoryRequest *createClientEraseHistoryRequest(const char *serv){return ((IClientEraseHistoryRequest *)new CEraseHistoryRequest(serv));}

//=======================================================
// class CEraseHistoryResponse Implementation
//=======================================================

CEraseHistoryResponse::CEraseHistoryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEraseHistoryResponse::CEraseHistoryResponse(const char *serviceName, const char *bc)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryResponse");
}

CEraseHistoryResponse::CEraseHistoryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CEraseHistoryResponse::CEraseHistoryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_xmlmap(nilRemove),m_History(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EraseHistoryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CEraseHistoryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!context.suppressed("EraseHistoryResponse","xmlmap")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"xmlmap\" type=\"xsd:base64Binary\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"History\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Origin\" type=\"tns:History\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CHistory::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CEraseHistoryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEraseHistoryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("EraseHistoryResponse","xmlmap",1.36);
	if (!added.getValue("History"))
	{
		added.setValue("History",1);
		CHistory::getMapInfo(info,added);
	}
}

StringBuffer &CEraseHistoryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("EraseHistoryResponse","xmlmap")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("xmlmap");
		form.appendf("  <tr><td><b>xmlmap: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("History");
	form.appendf("<tr><td><b>History: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEraseHistoryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEraseHistoryResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		if ((clientVer==-1.0 || clientVer<1.36))
			m_xmlmap.marshall(rpc_resp, "xmlmap", "", "", "");
		m_History.marshall(rpc_resp, "History", "Origin");
	}
}


void CEraseHistoryResponse::copy(CEraseHistoryResponse &from)
{
	m_xmlmap.copy(from.m_xmlmap);
	m_History.copy(from.m_History);
}


void CEraseHistoryResponse::copy(IConstEraseHistoryResponse &ifrom)
{
	setXmlmap(ifrom.getXmlmap());
	setHistory(ifrom.getHistory());
}


void CEraseHistoryResponse::getAttributes(IProperties &attributes)
{
}


void CEraseHistoryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		if ((clientVer==-1.0 || clientVer<1.36))
			m_xmlmap.toStr(ctx, buffer, "xmlmap", "", true, "", "");
		m_History.toStr(ctx, buffer, "History", "Origin");
	}
}


void CEraseHistoryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEraseHistoryResponse::serializer(IEspContext* ctx, IConstEraseHistoryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EraseHistoryResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field xmlmap
	if ((clientVer==-1.0 || clientVer<1.36))
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getXmlmap().toByteArray(), src.getXmlmap().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<xmlmap>%s</xmlmap>",tmp.str());
	}
	// field History
	{
		IArrayOf<IConstHistory>& v = src.getHistory();
		int size = v.length();
		if (size>0)
			buffer.append("<History>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Origin>");
			CHistory::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Origin>");
		}
		if (size>0)
			buffer.append("</History>");
	}
	if (keepRootTag)
		buffer.append("</EraseHistoryResponse>");
}

bool CEraseHistoryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_xmlmap.unmarshall(rpc_request, "xmlmap", basepath);
		hasValue |= m_History.unmarshall(rpc_request, "History", basepath);
	}
	return hasValue;
}

bool CEraseHistoryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_xmlmap.unmarshall(ctx, soapval, "xmlmap");
	hasValue |= m_History.unmarshall(ctx, soapval, "History");
	return hasValue;
}

bool CEraseHistoryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_xmlmap.unmarshall(ctx, params, attachments, "xmlmap", basepath);
	hasValue |= m_History.unmarshall(ctx, params, attachments, "History", basepath);
	return hasValue;
}

const MemoryBuffer & CEraseHistoryResponse::getXmlmap() { return m_xmlmap.getValue();}
IArrayOf<IConstHistory> & CEraseHistoryResponse::getHistory() { return (IArrayOf<IConstHistory> &) m_History; }
void CEraseHistoryResponse::setXmlmap(const MemoryBuffer & val){ m_xmlmap->clear().append(val); }
void CEraseHistoryResponse::setHistory(IArrayOf<IEspHistory> &val)
{
	m_History->kill();
	IArrayOf<IConstHistory> &target = m_History.getValue();
	ForEachItemIn(idx, val)
	{
		IEspHistory &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CEraseHistoryResponse::setHistory(IArrayOf<IConstHistory> &val)
{
	m_History->kill();
	IArrayOf<IConstHistory> &target = m_History.getValue();
	ForEachItemIn(idx, val)
	{
		IConstHistory &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspEraseHistoryResponse *createEraseHistoryResponse(const char *serv){return ((IEspEraseHistoryResponse *)new CEraseHistoryResponse(serv));}
extern "C"  IClientEraseHistoryResponse *createClientEraseHistoryResponse(const char *serv){return ((IClientEraseHistoryResponse *)new CEraseHistoryResponse(serv));}

//=======================================================
// class CDFUFileAccessRequestBase Implementation
//=======================================================

CDFUFileAccessRequestBase::CDFUFileAccessRequestBase(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_JobId(nilIgnore),m_ExpirySeconds(60, nilIgnore,false),m_AccessRole(nilIgnore),m_AccessType(nilIgnore),m_ReturnJsonTypeInfo(0, nilIgnore,false),m_ReturnBinTypeInfo(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessRequestBase");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileAccessRequestBase::CDFUFileAccessRequestBase(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_JobId(nilIgnore),m_ExpirySeconds(60, nilIgnore,false),m_AccessRole(nilIgnore),m_AccessType(nilIgnore),m_ReturnJsonTypeInfo(0, nilIgnore,false),m_ReturnBinTypeInfo(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessRequestBase");
}

StringBuffer &CDFUFileAccessRequestBase::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"JobId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"60\" name=\"ExpirySeconds\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AccessRole\" type=\"tns:FileAccessRole\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AccessType\" type=\"tns:SecAccessType\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ReturnJsonTypeInfo\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ReturnBinTypeInfo\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXFileAccessRole::getXsdDefinition(context, request, schema, added);
		CXSecAccessType::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUFileAccessRequestBase::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileAccessRequestBase::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("FileAccessRole"))
	{
		added.setValue("FileAccessRole",1);
		CXFileAccessRole::getMapInfo(info,added);
	}
	if (!added.getValue("SecAccessType"))
	{
		added.setValue("SecAccessType",1);
		CXSecAccessType::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileAccessRequestBase::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobId");
	form.appendf("  <tr><td><b>JobId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ExpirySeconds");
	form.appendf("  <tr><td><b>ExpirySeconds: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"60\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AccessRole");
	form.appendf("  <tr><td><b>AccessRole: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AccessType");
	form.appendf("  <tr><td><b>AccessType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReturnJsonTypeInfo");
	
	form.appendf("  <tr><td><b>ReturnJsonTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReturnBinTypeInfo");
	
	form.appendf("  <tr><td><b>ReturnBinTypeInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileAccessRequestBase::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileAccessRequestBase::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_JobId.marshall(rpc_resp, "JobId", "", "", "");
	m_ExpirySeconds.marshall(rpc_resp, "ExpirySeconds", "", "", "");
	m_AccessRole.marshall(rpc_resp, "AccessRole", "", "", "");
	m_AccessType.marshall(rpc_resp, "AccessType", "", "", "");
	m_ReturnJsonTypeInfo.marshall(rpc_resp, "ReturnJsonTypeInfo", "", "", "");
	m_ReturnBinTypeInfo.marshall(rpc_resp, "ReturnBinTypeInfo", "", "", "");
}


void CDFUFileAccessRequestBase::copy(CDFUFileAccessRequestBase &from)
{
	m_Name.copy(from.m_Name);
	m_Cluster.copy(from.m_Cluster);
	m_JobId.copy(from.m_JobId);
	m_ExpirySeconds.copy(from.m_ExpirySeconds);
	m_AccessRole.copy(from.m_AccessRole);
	m_AccessType.copy(from.m_AccessType);
	m_ReturnJsonTypeInfo.copy(from.m_ReturnJsonTypeInfo);
	m_ReturnBinTypeInfo.copy(from.m_ReturnBinTypeInfo);
}


void CDFUFileAccessRequestBase::copy(IConstDFUFileAccessRequestBase &ifrom)
{
	setName(ifrom.getName());
	setCluster(ifrom.getCluster());
	setJobId(ifrom.getJobId());
	setExpirySeconds(ifrom.getExpirySeconds());
	setAccessRole(ifrom.getAccessRole());
	setAccessType(ifrom.getAccessType());
	setReturnJsonTypeInfo(ifrom.getReturnJsonTypeInfo());
	setReturnBinTypeInfo(ifrom.getReturnBinTypeInfo());
}


void CDFUFileAccessRequestBase::getAttributes(IProperties &attributes)
{
}


void CDFUFileAccessRequestBase::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_JobId.toStr(ctx, buffer, "JobId", "", true, "", "");
	m_ExpirySeconds.toStr(ctx, buffer, "ExpirySeconds", "", true, "", "");
	m_AccessRole.toStr(ctx, buffer, "AccessRole", "", true, "", "");
	m_AccessType.toStr(ctx, buffer, "AccessType", "", true, "", "");
	m_ReturnJsonTypeInfo.toStr(ctx, buffer, "ReturnJsonTypeInfo", "", true, "", "");
	m_ReturnBinTypeInfo.toStr(ctx, buffer, "ReturnBinTypeInfo", "", true, "", "");
}


void CDFUFileAccessRequestBase::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileAccessRequestBase::serializer(IEspContext* ctx, IConstDFUFileAccessRequestBase &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileAccessRequestBase>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field JobId
	{
		const char* s = src.getJobId();
		if (s && *s)
		{
			buffer.append("<JobId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobId>");
		}
	}
	// field ExpirySeconds
	{
		int n = src.getExpirySeconds();
		if (n)
			buffer.appendf("<ExpirySeconds>%d</ExpirySeconds>", n);
	}
	// field AccessRole
	{
		const char* s = src.getAccessRoleAsString();
		buffer.append("<AccessRole>");
		encodeUtf8XML(s,buffer);
		buffer.append("</AccessRole>");
	}
	// field AccessType
	{
		const char* s = src.getAccessTypeAsString();
		buffer.append("<AccessType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</AccessType>");
	}
	// field ReturnJsonTypeInfo
	{
		bool b = src.getReturnJsonTypeInfo();
		if (b)
			buffer.appendf("<ReturnJsonTypeInfo>1</ReturnJsonTypeInfo>");
	}
	// field ReturnBinTypeInfo
	{
		bool b = src.getReturnBinTypeInfo();
		if (b)
			buffer.appendf("<ReturnBinTypeInfo>1</ReturnBinTypeInfo>");
	}
	if (keepRootTag)
		buffer.append("</DFUFileAccessRequestBase>");
}

bool CDFUFileAccessRequestBase::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_JobId.unmarshall(rpc_request, "JobId", basepath);
	hasValue |= m_ExpirySeconds.unmarshall(rpc_request, "ExpirySeconds", basepath);
	hasValue |= m_AccessRole.unmarshall(rpc_request, "AccessRole", basepath);
	hasValue |= m_AccessType.unmarshall(rpc_request, "AccessType", basepath);
	hasValue |= m_ReturnJsonTypeInfo.unmarshall(rpc_request, "ReturnJsonTypeInfo", basepath);
	hasValue |= m_ReturnBinTypeInfo.unmarshall(rpc_request, "ReturnBinTypeInfo", basepath);
	return hasValue;
}

bool CDFUFileAccessRequestBase::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_JobId.unmarshall(ctx, soapval, "JobId");
	hasValue |= m_ExpirySeconds.unmarshall(ctx, soapval, "ExpirySeconds");
	hasValue |= m_AccessRole.unmarshall(ctx, soapval, "AccessRole");
	hasValue |= m_AccessType.unmarshall(ctx, soapval, "AccessType");
	hasValue |= m_ReturnJsonTypeInfo.unmarshall(ctx, soapval, "ReturnJsonTypeInfo");
	hasValue |= m_ReturnBinTypeInfo.unmarshall(ctx, soapval, "ReturnBinTypeInfo");
	return hasValue;
}

bool CDFUFileAccessRequestBase::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_JobId.unmarshall(ctx, params, attachments, "JobId", basepath);
	hasValue |= m_ExpirySeconds.unmarshall(ctx, params, attachments, "ExpirySeconds", basepath);
	hasValue |= m_AccessRole.unmarshall(ctx, params, attachments, "AccessRole", basepath);
	hasValue |= m_AccessType.unmarshall(ctx, params, attachments, "AccessType", basepath);
	hasValue |= m_ReturnJsonTypeInfo.unmarshall(ctx, params, attachments, "ReturnJsonTypeInfo", basepath);
	hasValue |= m_ReturnBinTypeInfo.unmarshall(ctx, params, attachments, "ReturnBinTypeInfo", basepath);
	return hasValue;
}

const char * CDFUFileAccessRequestBase::getName() { return m_Name.query();}
const char * CDFUFileAccessRequestBase::getCluster() { return m_Cluster.query();}
const char * CDFUFileAccessRequestBase::getJobId() { return m_JobId.query();}
int CDFUFileAccessRequestBase::getExpirySeconds() { return m_ExpirySeconds;}
CFileAccessRole CDFUFileAccessRequestBase::getAccessRole() { return m_AccessRole.getValue(); }
const char* CDFUFileAccessRequestBase::getAccessRoleAsString() {  return (const char*)m_AccessRole; }
CSecAccessType CDFUFileAccessRequestBase::getAccessType() { return m_AccessType.getValue(); }
const char* CDFUFileAccessRequestBase::getAccessTypeAsString() {  return (const char*)m_AccessType; }
bool CDFUFileAccessRequestBase::getReturnJsonTypeInfo() { return m_ReturnJsonTypeInfo;}
bool CDFUFileAccessRequestBase::getReturnBinTypeInfo() { return m_ReturnBinTypeInfo;}
void CDFUFileAccessRequestBase::setName(const char * val){ m_Name.set(val); }
void CDFUFileAccessRequestBase::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUFileAccessRequestBase::setJobId(const char * val){ m_JobId.set(val); }
void CDFUFileAccessRequestBase::setExpirySeconds(int val){ m_ExpirySeconds=val; }
void CDFUFileAccessRequestBase::setAccessRole(CFileAccessRole val) { m_AccessRole.setValue(val); }
void CDFUFileAccessRequestBase::setAccessRole(const char* val) { m_AccessRole.setValue(val); }
void CDFUFileAccessRequestBase::setAccessType(CSecAccessType val) { m_AccessType.setValue(val); }
void CDFUFileAccessRequestBase::setAccessType(const char* val) { m_AccessType.setValue(val); }
void CDFUFileAccessRequestBase::setReturnJsonTypeInfo(bool val){ m_ReturnJsonTypeInfo=val; }
void CDFUFileAccessRequestBase::setReturnBinTypeInfo(bool val){ m_ReturnBinTypeInfo=val; }
extern "C"  IEspDFUFileAccessRequestBase *createDFUFileAccessRequestBase(const char *serv, const char *msgname){return ((IEspDFUFileAccessRequestBase *)new CDFUFileAccessRequestBase(serv /*, msgname*/));}
extern "C"  IClientDFUFileAccessRequestBase *createClientDFUFileAccessRequestBase(const char *serv, const char *msgname){return ((IClientDFUFileAccessRequestBase *)new CDFUFileAccessRequestBase(serv /*, msgname*/));}

//=======================================================
// class CDFUFileAccessRequest Implementation
//=======================================================

CDFUFileAccessRequest::CDFUFileAccessRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_RequestBase(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileAccessRequest::CDFUFileAccessRequest(const char *serviceName, const char *bc)
	: m_RequestBase(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessRequest");
}

CDFUFileAccessRequest::CDFUFileAccessRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_RequestBase(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileAccessRequest::CDFUFileAccessRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_RequestBase(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileAccessRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"RequestBase\" type=\"tns:DFUFileAccessRequestBase\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUFileAccessRequestBase::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUFileAccessRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileAccessRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUFileAccessRequestBase"))
	{
		added.setValue("DFUFileAccessRequestBase",1);
		CDFUFileAccessRequestBase::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileAccessRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RequestBase");
	form.append("<tr>").append("<td><b>RequestBase: </b></td><td><hr/>");
	CDFUFileAccessRequestBase::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileAccessRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileAccessRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_RequestBase.marshall(rpc_resp, "RequestBase", "", "", "");
}


void CDFUFileAccessRequest::copy(CDFUFileAccessRequest &from)
{
	m_RequestBase.copy(from.m_RequestBase);
}


void CDFUFileAccessRequest::copy(IConstDFUFileAccessRequest &ifrom)
{
	setRequestBase(ifrom.getRequestBase());
}


void CDFUFileAccessRequest::getAttributes(IProperties &attributes)
{
}


void CDFUFileAccessRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_RequestBase.toStr(ctx, buffer, "RequestBase", "", false, "", "");
}


void CDFUFileAccessRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileAccessRequest::serializer(IEspContext* ctx, IConstDFUFileAccessRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileAccessRequest>");
	// field RequestBase
	{
		StringBuffer tmp;
		CDFUFileAccessRequestBase::serializer(ctx,src.getRequestBase(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<RequestBase>%s</RequestBase>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DFUFileAccessRequest>");
}

bool CDFUFileAccessRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_RequestBase.unmarshall(rpc_request, "RequestBase", basepath);
	return hasValue;
}

bool CDFUFileAccessRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_RequestBase.unmarshall(ctx, soapval, "RequestBase");
	return hasValue;
}

bool CDFUFileAccessRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_RequestBase.unmarshall(ctx, params, attachments, "RequestBase", basepath);
	return hasValue;
}

IConstDFUFileAccessRequestBase & CDFUFileAccessRequest::getRequestBase() { return (IConstDFUFileAccessRequestBase &) m_RequestBase.getValue();}
IEspDFUFileAccessRequestBase & CDFUFileAccessRequest::updateRequestBase(){ return (IEspDFUFileAccessRequestBase &) m_RequestBase.getValue(); }
void CDFUFileAccessRequest::setRequestBase(IConstDFUFileAccessRequestBase &ifrom){ m_RequestBase.copy(ifrom); }
extern "C"  IEspDFUFileAccessRequest *createDFUFileAccessRequest(const char *serv){return ((IEspDFUFileAccessRequest *)new CDFUFileAccessRequest(serv));}
extern "C"  IClientDFUFileAccessRequest *createClientDFUFileAccessRequest(const char *serv){return ((IClientDFUFileAccessRequest *)new CDFUFileAccessRequest(serv));}

//=======================================================
// class CDFUFileAccessV2Request Implementation
//=======================================================

CDFUFileAccessV2Request::CDFUFileAccessV2Request(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_RequestId(nilIgnore),m_ExpirySeconds(60, nilIgnore,false),m_ReturnTextResponse(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessV2Request");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileAccessV2Request::CDFUFileAccessV2Request(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_RequestId(nilIgnore),m_ExpirySeconds(60, nilIgnore,false),m_ReturnTextResponse(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessV2Request");
}

CDFUFileAccessV2Request::CDFUFileAccessV2Request(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_RequestId(nilIgnore),m_ExpirySeconds(60, nilIgnore,false),m_ReturnTextResponse(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessV2Request");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileAccessV2Request::CDFUFileAccessV2Request(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore),m_Cluster(nilIgnore),m_RequestId(nilIgnore),m_ExpirySeconds(60, nilIgnore,false),m_ReturnTextResponse(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessV2Request");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileAccessV2Request::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RequestId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"60\" name=\"ExpirySeconds\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ReturnTextResponse\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUFileAccessV2Request::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileAccessV2Request::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUFileAccessV2Request::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RequestId");
	form.appendf("  <tr><td><b>RequestId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ExpirySeconds");
	form.appendf("  <tr><td><b>ExpirySeconds: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"60\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReturnTextResponse");
	
	form.appendf("  <tr><td><b>ReturnTextResponse? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileAccessV2Request::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileAccessV2Request::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_RequestId.marshall(rpc_resp, "RequestId", "", "", "");
	m_ExpirySeconds.marshall(rpc_resp, "ExpirySeconds", "", "", "");
	m_ReturnTextResponse.marshall(rpc_resp, "ReturnTextResponse", "", "", "");
}


void CDFUFileAccessV2Request::copy(CDFUFileAccessV2Request &from)
{
	m_Name.copy(from.m_Name);
	m_Cluster.copy(from.m_Cluster);
	m_RequestId.copy(from.m_RequestId);
	m_ExpirySeconds.copy(from.m_ExpirySeconds);
	m_ReturnTextResponse.copy(from.m_ReturnTextResponse);
}


void CDFUFileAccessV2Request::copy(IConstDFUFileAccessV2Request &ifrom)
{
	setName(ifrom.getName());
	setCluster(ifrom.getCluster());
	setRequestId(ifrom.getRequestId());
	setExpirySeconds(ifrom.getExpirySeconds());
	setReturnTextResponse(ifrom.getReturnTextResponse());
}


void CDFUFileAccessV2Request::getAttributes(IProperties &attributes)
{
}


void CDFUFileAccessV2Request::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_RequestId.toStr(ctx, buffer, "RequestId", "", true, "", "");
	m_ExpirySeconds.toStr(ctx, buffer, "ExpirySeconds", "", true, "", "");
	m_ReturnTextResponse.toStr(ctx, buffer, "ReturnTextResponse", "", true, "", "");
}


void CDFUFileAccessV2Request::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileAccessV2Request::serializer(IEspContext* ctx, IConstDFUFileAccessV2Request &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileAccessV2Request>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field RequestId
	{
		const char* s = src.getRequestId();
		if (s && *s)
		{
			buffer.append("<RequestId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RequestId>");
		}
	}
	// field ExpirySeconds
	{
		int n = src.getExpirySeconds();
		if (n)
			buffer.appendf("<ExpirySeconds>%d</ExpirySeconds>", n);
	}
	// field ReturnTextResponse
	{
		bool b = src.getReturnTextResponse();
		if (b)
			buffer.appendf("<ReturnTextResponse>1</ReturnTextResponse>");
	}
	if (keepRootTag)
		buffer.append("</DFUFileAccessV2Request>");
}

bool CDFUFileAccessV2Request::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_RequestId.unmarshall(rpc_request, "RequestId", basepath);
	hasValue |= m_ExpirySeconds.unmarshall(rpc_request, "ExpirySeconds", basepath);
	hasValue |= m_ReturnTextResponse.unmarshall(rpc_request, "ReturnTextResponse", basepath);
	return hasValue;
}

bool CDFUFileAccessV2Request::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_RequestId.unmarshall(ctx, soapval, "RequestId");
	hasValue |= m_ExpirySeconds.unmarshall(ctx, soapval, "ExpirySeconds");
	hasValue |= m_ReturnTextResponse.unmarshall(ctx, soapval, "ReturnTextResponse");
	return hasValue;
}

bool CDFUFileAccessV2Request::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_RequestId.unmarshall(ctx, params, attachments, "RequestId", basepath);
	hasValue |= m_ExpirySeconds.unmarshall(ctx, params, attachments, "ExpirySeconds", basepath);
	hasValue |= m_ReturnTextResponse.unmarshall(ctx, params, attachments, "ReturnTextResponse", basepath);
	return hasValue;
}

const char * CDFUFileAccessV2Request::getName() { return m_Name.query();}
const char * CDFUFileAccessV2Request::getCluster() { return m_Cluster.query();}
const char * CDFUFileAccessV2Request::getRequestId() { return m_RequestId.query();}
int CDFUFileAccessV2Request::getExpirySeconds() { return m_ExpirySeconds;}
bool CDFUFileAccessV2Request::getReturnTextResponse() { return m_ReturnTextResponse;}
void CDFUFileAccessV2Request::setName(const char * val){ m_Name.set(val); }
void CDFUFileAccessV2Request::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUFileAccessV2Request::setRequestId(const char * val){ m_RequestId.set(val); }
void CDFUFileAccessV2Request::setExpirySeconds(int val){ m_ExpirySeconds=val; }
void CDFUFileAccessV2Request::setReturnTextResponse(bool val){ m_ReturnTextResponse=val; }
extern "C"  IEspDFUFileAccessV2Request *createDFUFileAccessV2Request(const char *serv){return ((IEspDFUFileAccessV2Request *)new CDFUFileAccessV2Request(serv));}
extern "C"  IClientDFUFileAccessV2Request *createClientDFUFileAccessV2Request(const char *serv){return ((IClientDFUFileAccessV2Request *)new CDFUFileAccessV2Request(serv));}

//=======================================================
// class CDFUPartLocation Implementation
//=======================================================

CDFUPartLocation::CDFUPartLocation(const char *serviceName, IRpcMessageBinding *init)
	: m_LocationIndex(nilIgnore),m_Host(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUPartLocation");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUPartLocation::CDFUPartLocation(const char *serviceName, const char *bc)
	: m_LocationIndex(nilIgnore),m_Host(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUPartLocation");
}

StringBuffer &CDFUPartLocation::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LocationIndex\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Host\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUPartLocation::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUPartLocation::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUPartLocation::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("LocationIndex");
	form.appendf("  <tr><td><b>LocationIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Host");
	form.appendf("  <tr><td><b>Host: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUPartLocation::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUPartLocation::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_LocationIndex.marshall(rpc_resp, "LocationIndex", "", "", "");
	m_Host.marshall(rpc_resp, "Host", "", "", "");
}


void CDFUPartLocation::copy(CDFUPartLocation &from)
{
	m_LocationIndex.copy(from.m_LocationIndex);
	m_Host.copy(from.m_Host);
}


void CDFUPartLocation::copy(IConstDFUPartLocation &ifrom)
{
	setLocationIndex(ifrom.getLocationIndex());
	setHost(ifrom.getHost());
}


void CDFUPartLocation::getAttributes(IProperties &attributes)
{
}


void CDFUPartLocation::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_LocationIndex.toStr(ctx, buffer, "LocationIndex", "", true, "", "");
	m_Host.toStr(ctx, buffer, "Host", "", true, "", "");
}


void CDFUPartLocation::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUPartLocation::serializer(IEspContext* ctx, IConstDFUPartLocation &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUPartLocation>");
	// field LocationIndex
	{
		int n = src.getLocationIndex();
		if (n)
			buffer.appendf("<LocationIndex>%d</LocationIndex>", n);
	}
	// field Host
	{
		const char* s = src.getHost();
		if (s && *s)
		{
			buffer.append("<Host>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Host>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUPartLocation>");
}

bool CDFUPartLocation::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_LocationIndex.unmarshall(rpc_request, "LocationIndex", basepath);
	hasValue |= m_Host.unmarshall(rpc_request, "Host", basepath);
	return hasValue;
}

bool CDFUPartLocation::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_LocationIndex.unmarshall(ctx, soapval, "LocationIndex");
	hasValue |= m_Host.unmarshall(ctx, soapval, "Host");
	return hasValue;
}

bool CDFUPartLocation::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_LocationIndex.unmarshall(ctx, params, attachments, "LocationIndex", basepath);
	hasValue |= m_Host.unmarshall(ctx, params, attachments, "Host", basepath);
	return hasValue;
}

int CDFUPartLocation::getLocationIndex() { return m_LocationIndex;}
const char * CDFUPartLocation::getHost() { return m_Host.query();}
void CDFUPartLocation::setLocationIndex(int val){ m_LocationIndex=val; }
void CDFUPartLocation::setHost(const char * val){ m_Host.set(val); }
extern "C"  IEspDFUPartLocation *createDFUPartLocation(const char *serv, const char *msgname){return ((IEspDFUPartLocation *)new CDFUPartLocation(serv /*, msgname*/));}
extern "C"  IClientDFUPartLocation *createClientDFUPartLocation(const char *serv, const char *msgname){return ((IClientDFUPartLocation *)new CDFUPartLocation(serv /*, msgname*/));}

//=======================================================
// class CDFUFileCopy Implementation
//=======================================================

CDFUFileCopy::CDFUFileCopy(const char *serviceName, IRpcMessageBinding *init)
	: m_CopyIndex(nilIgnore),m_LocationIndex(nilIgnore),m_Path(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCopy");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileCopy::CDFUFileCopy(const char *serviceName, const char *bc)
	: m_CopyIndex(nilIgnore),m_LocationIndex(nilIgnore),m_Path(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCopy");
}

StringBuffer &CDFUFileCopy::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"CopyIndex\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LocationIndex\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Path\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDFUFileCopy::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileCopy::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUFileCopy::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("CopyIndex");
	form.appendf("  <tr><td><b>CopyIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("LocationIndex");
	form.appendf("  <tr><td><b>LocationIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Path");
	form.appendf("  <tr><td><b>Path: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileCopy::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileCopy::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_CopyIndex.marshall(rpc_resp, "CopyIndex", "", "", "");
	m_LocationIndex.marshall(rpc_resp, "LocationIndex", "", "", "");
	m_Path.marshall(rpc_resp, "Path", "", "", "");
}


void CDFUFileCopy::copy(CDFUFileCopy &from)
{
	m_CopyIndex.copy(from.m_CopyIndex);
	m_LocationIndex.copy(from.m_LocationIndex);
	m_Path.copy(from.m_Path);
}


void CDFUFileCopy::copy(IConstDFUFileCopy &ifrom)
{
	setCopyIndex(ifrom.getCopyIndex());
	setLocationIndex(ifrom.getLocationIndex());
	setPath(ifrom.getPath());
}


void CDFUFileCopy::getAttributes(IProperties &attributes)
{
}


void CDFUFileCopy::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_CopyIndex.toStr(ctx, buffer, "CopyIndex", "", true, "", "");
	m_LocationIndex.toStr(ctx, buffer, "LocationIndex", "", true, "", "");
	m_Path.toStr(ctx, buffer, "Path", "", true, "", "");
}


void CDFUFileCopy::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileCopy::serializer(IEspContext* ctx, IConstDFUFileCopy &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileCopy>");
	// field CopyIndex
	{
		int n = src.getCopyIndex();
		if (n)
			buffer.appendf("<CopyIndex>%d</CopyIndex>", n);
	}
	// field LocationIndex
	{
		int n = src.getLocationIndex();
		if (n)
			buffer.appendf("<LocationIndex>%d</LocationIndex>", n);
	}
	// field Path
	{
		const char* s = src.getPath();
		if (s && *s)
		{
			buffer.append("<Path>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Path>");
		}
	}
	if (keepRootTag)
		buffer.append("</DFUFileCopy>");
}

bool CDFUFileCopy::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_CopyIndex.unmarshall(rpc_request, "CopyIndex", basepath);
	hasValue |= m_LocationIndex.unmarshall(rpc_request, "LocationIndex", basepath);
	hasValue |= m_Path.unmarshall(rpc_request, "Path", basepath);
	return hasValue;
}

bool CDFUFileCopy::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_CopyIndex.unmarshall(ctx, soapval, "CopyIndex");
	hasValue |= m_LocationIndex.unmarshall(ctx, soapval, "LocationIndex");
	hasValue |= m_Path.unmarshall(ctx, soapval, "Path");
	return hasValue;
}

bool CDFUFileCopy::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_CopyIndex.unmarshall(ctx, params, attachments, "CopyIndex", basepath);
	hasValue |= m_LocationIndex.unmarshall(ctx, params, attachments, "LocationIndex", basepath);
	hasValue |= m_Path.unmarshall(ctx, params, attachments, "Path", basepath);
	return hasValue;
}

int CDFUFileCopy::getCopyIndex() { return m_CopyIndex;}
int CDFUFileCopy::getLocationIndex() { return m_LocationIndex;}
const char * CDFUFileCopy::getPath() { return m_Path.query();}
void CDFUFileCopy::setCopyIndex(int val){ m_CopyIndex=val; }
void CDFUFileCopy::setLocationIndex(int val){ m_LocationIndex=val; }
void CDFUFileCopy::setPath(const char * val){ m_Path.set(val); }
extern "C"  IEspDFUFileCopy *createDFUFileCopy(const char *serv, const char *msgname){return ((IEspDFUFileCopy *)new CDFUFileCopy(serv /*, msgname*/));}
extern "C"  IClientDFUFileCopy *createClientDFUFileCopy(const char *serv, const char *msgname){return ((IClientDFUFileCopy *)new CDFUFileCopy(serv /*, msgname*/));}

//=======================================================
// class CDFUFilePart Implementation
//=======================================================

CDFUFilePart::CDFUFilePart(const char *serviceName, IRpcMessageBinding *init)
	: m_PartIndex(nilIgnore),m_Copies(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePart");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFilePart::CDFUFilePart(const char *serviceName, const char *bc)
	: m_PartIndex(nilIgnore),m_Copies(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePart");
}

StringBuffer &CDFUFilePart::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"PartIndex\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Copies\" type=\"tns:ArrayOfDFUFileCopy\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUFileCopy::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUFileCopy") && added.getValue("ArrayOfDFUFileCopy")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUFileCopy\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUFileCopy\" type=\"tns:DFUFileCopy\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUFileCopy",1);
	}
	return schema;
}

void CDFUFilePart::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFilePart::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUFileCopy"))
	{
		added.setValue("DFUFileCopy",1);
		CDFUFileCopy::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFilePart::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PartIndex");
	form.appendf("  <tr><td><b>PartIndex: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Copies");
	form.appendf("<tr><td><b>Copies: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFilePart::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFilePart::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_PartIndex.marshall(rpc_resp, "PartIndex", "", "", "");
	m_Copies.marshall(rpc_resp, "Copies", "DFUFileCopy");
}


void CDFUFilePart::copy(CDFUFilePart &from)
{
	m_PartIndex.copy(from.m_PartIndex);
	m_Copies.copy(from.m_Copies);
}


void CDFUFilePart::copy(IConstDFUFilePart &ifrom)
{
	setPartIndex(ifrom.getPartIndex());
	setCopies(ifrom.getCopies());
}


void CDFUFilePart::getAttributes(IProperties &attributes)
{
}


void CDFUFilePart::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_PartIndex.toStr(ctx, buffer, "PartIndex", "", true, "", "");
	m_Copies.toStr(ctx, buffer, "Copies", "DFUFileCopy");
}


void CDFUFilePart::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFilePart::serializer(IEspContext* ctx, IConstDFUFilePart &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFilePart>");
	// field PartIndex
	{
		int n = src.getPartIndex();
		if (n)
			buffer.appendf("<PartIndex>%d</PartIndex>", n);
	}
	// field Copies
	{
		IArrayOf<IConstDFUFileCopy>& v = src.getCopies();
		int size = v.length();
		if (size>0)
			buffer.append("<Copies>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUFileCopy::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Copies>");
	}
	if (keepRootTag)
		buffer.append("</DFUFilePart>");
}

bool CDFUFilePart::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_PartIndex.unmarshall(rpc_request, "PartIndex", basepath);
	hasValue |= m_Copies.unmarshall(rpc_request, "Copies", basepath);
	return hasValue;
}

bool CDFUFilePart::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_PartIndex.unmarshall(ctx, soapval, "PartIndex");
	hasValue |= m_Copies.unmarshall(ctx, soapval, "Copies");
	return hasValue;
}

bool CDFUFilePart::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_PartIndex.unmarshall(ctx, params, attachments, "PartIndex", basepath);
	hasValue |= m_Copies.unmarshall(ctx, params, attachments, "Copies", basepath);
	return hasValue;
}

int CDFUFilePart::getPartIndex() { return m_PartIndex;}
IArrayOf<IConstDFUFileCopy> & CDFUFilePart::getCopies() { return (IArrayOf<IConstDFUFileCopy> &) m_Copies; }
void CDFUFilePart::setPartIndex(int val){ m_PartIndex=val; }
void CDFUFilePart::setCopies(IArrayOf<IEspDFUFileCopy> &val)
{
	m_Copies->kill();
	IArrayOf<IConstDFUFileCopy> &target = m_Copies.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUFileCopy &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFilePart::setCopies(IArrayOf<IConstDFUFileCopy> &val)
{
	m_Copies->kill();
	IArrayOf<IConstDFUFileCopy> &target = m_Copies.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUFileCopy &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspDFUFilePart *createDFUFilePart(const char *serv, const char *msgname){return ((IEspDFUFilePart *)new CDFUFilePart(serv /*, msgname*/));}
extern "C"  IClientDFUFilePart *createClientDFUFilePart(const char *serv, const char *msgname){return ((IClientDFUFilePart *)new CDFUFilePart(serv /*, msgname*/));}

//=======================================================
// class CDFUFileAccessInfo Implementation
//=======================================================

CDFUFileAccessInfo::CDFUFileAccessInfo(const char *serviceName, IRpcMessageBinding *init)
	: m_MetaInfoBlob(nilIgnore),m_ExpiryTime(nilIgnore),m_NumParts(nilIgnore),m_FileLocations(nilIgnore),m_FileParts(nilIgnore),m_RecordTypeInfoBin(nilIgnore),m_RecordTypeInfoJson(nilIgnore),m_fileAccessPort(nilIgnore),m_fileAccessSSL(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessInfo");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileAccessInfo::CDFUFileAccessInfo(const char *serviceName, const char *bc)
	: m_MetaInfoBlob(nilIgnore),m_ExpiryTime(nilIgnore),m_NumParts(nilIgnore),m_FileLocations(nilIgnore),m_FileParts(nilIgnore),m_RecordTypeInfoBin(nilIgnore),m_RecordTypeInfoJson(nilIgnore),m_fileAccessPort(nilIgnore),m_fileAccessSSL(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessInfo");
}

StringBuffer &CDFUFileAccessInfo::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"MetaInfoBlob\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ExpiryTime\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumParts\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileLocations\" type=\"tns:ArrayOfDFUPartLocation\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileParts\" type=\"tns:ArrayOfDFUFilePart\"/>\n");
		if (!context.suppressed("DFUFileAccessInfo","RecordTypeInfoBin")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RecordTypeInfoBin\" type=\"xsd:base64Binary\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"RecordTypeInfoJson\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"fileAccessPort\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"fileAccessSSL\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUPartLocation::getXsdDefinition(context, request, schema, added);
		CDFUFilePart::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DFUFilePart") && added.getValue("ArrayOfDFUFilePart")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUFilePart\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUFilePart\" type=\"tns:DFUFilePart\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUFilePart",1);
	}
	if (added.getValue("DFUPartLocation") && added.getValue("ArrayOfDFUPartLocation")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDFUPartLocation\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DFUPartLocation\" type=\"tns:DFUPartLocation\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDFUPartLocation",1);
	}
	return schema;
}

void CDFUFileAccessInfo::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileAccessInfo::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("DFUFileAccessInfo","RecordTypeInfoBin",1.5);
	if (!added.getValue("DFUFilePart"))
	{
		added.setValue("DFUFilePart",1);
		CDFUFilePart::getMapInfo(info,added);
	}
	if (!added.getValue("DFUPartLocation"))
	{
		added.setValue("DFUPartLocation",1);
		CDFUPartLocation::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileAccessInfo::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MetaInfoBlob");
	form.appendf("  <tr><td><b>MetaInfoBlob: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExpiryTime");
	form.appendf("  <tr><td><b>ExpiryTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumParts");
	form.appendf("  <tr><td><b>NumParts: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileLocations");
	form.appendf("<tr><td><b>FileLocations: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileParts");
	form.appendf("<tr><td><b>FileParts: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("DFUFileAccessInfo","RecordTypeInfoBin")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RecordTypeInfoBin");
		form.appendf("  <tr><td><b>RecordTypeInfoBin: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RecordTypeInfoJson");
	form.appendf("  <tr><td><b>RecordTypeInfoJson: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("fileAccessPort");
	form.appendf("  <tr><td><b>fileAccessPort: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("fileAccessSSL");
	
	form.appendf("  <tr><td><b>fileAccessSSL? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileAccessInfo::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileAccessInfo::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_MetaInfoBlob.marshall(rpc_resp, "MetaInfoBlob", "", "", "");
	m_ExpiryTime.marshall(rpc_resp, "ExpiryTime", "", "", "");
	m_NumParts.marshall(rpc_resp, "NumParts", "", "", "");
	m_FileLocations.marshall(rpc_resp, "FileLocations", "DFUPartLocation");
	m_FileParts.marshall(rpc_resp, "FileParts", "DFUFilePart");
	if ((clientVer==-1.0 || clientVer<1.5))
		m_RecordTypeInfoBin.marshall(rpc_resp, "RecordTypeInfoBin", "", "", "");
	m_RecordTypeInfoJson.marshall(rpc_resp, "RecordTypeInfoJson", "", "", "");
	m_fileAccessPort.marshall(rpc_resp, "fileAccessPort", "", "", "");
	m_fileAccessSSL.marshall(rpc_resp, "fileAccessSSL", "", "", "");
}


void CDFUFileAccessInfo::copy(CDFUFileAccessInfo &from)
{
	m_MetaInfoBlob.copy(from.m_MetaInfoBlob);
	m_ExpiryTime.copy(from.m_ExpiryTime);
	m_NumParts.copy(from.m_NumParts);
	m_FileLocations.copy(from.m_FileLocations);
	m_FileParts.copy(from.m_FileParts);
	m_RecordTypeInfoBin.copy(from.m_RecordTypeInfoBin);
	m_RecordTypeInfoJson.copy(from.m_RecordTypeInfoJson);
	m_fileAccessPort.copy(from.m_fileAccessPort);
	m_fileAccessSSL.copy(from.m_fileAccessSSL);
}


void CDFUFileAccessInfo::copy(IConstDFUFileAccessInfo &ifrom)
{
	setMetaInfoBlob(ifrom.getMetaInfoBlob());
	setExpiryTime(ifrom.getExpiryTime());
	setNumParts(ifrom.getNumParts());
	setFileLocations(ifrom.getFileLocations());
	setFileParts(ifrom.getFileParts());
	setRecordTypeInfoBin(ifrom.getRecordTypeInfoBin());
	setRecordTypeInfoJson(ifrom.getRecordTypeInfoJson());
	setFileAccessPort(ifrom.getFileAccessPort());
	setFileAccessSSL(ifrom.getFileAccessSSL());
}


void CDFUFileAccessInfo::getAttributes(IProperties &attributes)
{
}


void CDFUFileAccessInfo::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_MetaInfoBlob.toStr(ctx, buffer, "MetaInfoBlob", "", true, "", "");
	m_ExpiryTime.toStr(ctx, buffer, "ExpiryTime", "", true, "", "");
	m_NumParts.toStr(ctx, buffer, "NumParts", "", true, "", "");
	m_FileLocations.toStr(ctx, buffer, "FileLocations", "DFUPartLocation");
	m_FileParts.toStr(ctx, buffer, "FileParts", "DFUFilePart");
	if ((clientVer==-1.0 || clientVer<1.5))
		m_RecordTypeInfoBin.toStr(ctx, buffer, "RecordTypeInfoBin", "", true, "", "");
	m_RecordTypeInfoJson.toStr(ctx, buffer, "RecordTypeInfoJson", "", true, "", "");
	m_fileAccessPort.toStr(ctx, buffer, "fileAccessPort", "", true, "", "");
	m_fileAccessSSL.toStr(ctx, buffer, "fileAccessSSL", "", true, "", "");
}


void CDFUFileAccessInfo::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileAccessInfo::serializer(IEspContext* ctx, IConstDFUFileAccessInfo &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileAccessInfo>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field MetaInfoBlob
	{
		const char* s = src.getMetaInfoBlob();
		if (s && *s)
		{
			buffer.append("<MetaInfoBlob>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MetaInfoBlob>");
		}
	}
	// field ExpiryTime
	{
		const char* s = src.getExpiryTime();
		if (s && *s)
		{
			buffer.append("<ExpiryTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ExpiryTime>");
		}
	}
	// field NumParts
	{
		int n = src.getNumParts();
		if (n)
			buffer.appendf("<NumParts>%d</NumParts>", n);
	}
	// field FileLocations
	{
		IArrayOf<IConstDFUPartLocation>& v = src.getFileLocations();
		int size = v.length();
		if (size>0)
			buffer.append("<FileLocations>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUPartLocation::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</FileLocations>");
	}
	// field FileParts
	{
		IArrayOf<IConstDFUFilePart>& v = src.getFileParts();
		int size = v.length();
		if (size>0)
			buffer.append("<FileParts>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDFUFilePart::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</FileParts>");
	}
	// field RecordTypeInfoBin
	if ((clientVer==-1.0 || clientVer<1.5))
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getRecordTypeInfoBin().toByteArray(), src.getRecordTypeInfoBin().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<RecordTypeInfoBin>%s</RecordTypeInfoBin>",tmp.str());
	}
	// field RecordTypeInfoJson
	{
		const char* s = src.getRecordTypeInfoJson();
		if (s && *s)
		{
			buffer.append("<RecordTypeInfoJson>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RecordTypeInfoJson>");
		}
	}
	// field fileAccessPort
	{
		int n = src.getFileAccessPort();
		if (n)
			buffer.appendf("<fileAccessPort>%d</fileAccessPort>", n);
	}
	// field fileAccessSSL
	{
		bool b = src.getFileAccessSSL();
		if (b)
			buffer.appendf("<fileAccessSSL>1</fileAccessSSL>");
	}
	if (keepRootTag)
		buffer.append("</DFUFileAccessInfo>");
}

bool CDFUFileAccessInfo::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_MetaInfoBlob.unmarshall(rpc_request, "MetaInfoBlob", basepath);
	hasValue |= m_ExpiryTime.unmarshall(rpc_request, "ExpiryTime", basepath);
	hasValue |= m_NumParts.unmarshall(rpc_request, "NumParts", basepath);
	hasValue |= m_FileLocations.unmarshall(rpc_request, "FileLocations", basepath);
	hasValue |= m_FileParts.unmarshall(rpc_request, "FileParts", basepath);
	hasValue |= m_RecordTypeInfoBin.unmarshall(rpc_request, "RecordTypeInfoBin", basepath);
	hasValue |= m_RecordTypeInfoJson.unmarshall(rpc_request, "RecordTypeInfoJson", basepath);
	hasValue |= m_fileAccessPort.unmarshall(rpc_request, "fileAccessPort", basepath);
	hasValue |= m_fileAccessSSL.unmarshall(rpc_request, "fileAccessSSL", basepath);
	return hasValue;
}

bool CDFUFileAccessInfo::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_MetaInfoBlob.unmarshall(ctx, soapval, "MetaInfoBlob");
	hasValue |= m_ExpiryTime.unmarshall(ctx, soapval, "ExpiryTime");
	hasValue |= m_NumParts.unmarshall(ctx, soapval, "NumParts");
	hasValue |= m_FileLocations.unmarshall(ctx, soapval, "FileLocations");
	hasValue |= m_FileParts.unmarshall(ctx, soapval, "FileParts");
	hasValue |= m_RecordTypeInfoBin.unmarshall(ctx, soapval, "RecordTypeInfoBin");
	hasValue |= m_RecordTypeInfoJson.unmarshall(ctx, soapval, "RecordTypeInfoJson");
	hasValue |= m_fileAccessPort.unmarshall(ctx, soapval, "fileAccessPort");
	hasValue |= m_fileAccessSSL.unmarshall(ctx, soapval, "fileAccessSSL");
	return hasValue;
}

bool CDFUFileAccessInfo::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_MetaInfoBlob.unmarshall(ctx, params, attachments, "MetaInfoBlob", basepath);
	hasValue |= m_ExpiryTime.unmarshall(ctx, params, attachments, "ExpiryTime", basepath);
	hasValue |= m_NumParts.unmarshall(ctx, params, attachments, "NumParts", basepath);
	hasValue |= m_FileLocations.unmarshall(ctx, params, attachments, "FileLocations", basepath);
	hasValue |= m_FileParts.unmarshall(ctx, params, attachments, "FileParts", basepath);
	hasValue |= m_RecordTypeInfoBin.unmarshall(ctx, params, attachments, "RecordTypeInfoBin", basepath);
	hasValue |= m_RecordTypeInfoJson.unmarshall(ctx, params, attachments, "RecordTypeInfoJson", basepath);
	hasValue |= m_fileAccessPort.unmarshall(ctx, params, attachments, "fileAccessPort", basepath);
	hasValue |= m_fileAccessSSL.unmarshall(ctx, params, attachments, "fileAccessSSL", basepath);
	return hasValue;
}

const char * CDFUFileAccessInfo::getMetaInfoBlob() { return m_MetaInfoBlob.query();}
const char * CDFUFileAccessInfo::getExpiryTime() { return m_ExpiryTime.query();}
int CDFUFileAccessInfo::getNumParts() { return m_NumParts;}
IArrayOf<IConstDFUPartLocation> & CDFUFileAccessInfo::getFileLocations() { return (IArrayOf<IConstDFUPartLocation> &) m_FileLocations; }
IArrayOf<IConstDFUFilePart> & CDFUFileAccessInfo::getFileParts() { return (IArrayOf<IConstDFUFilePart> &) m_FileParts; }
const MemoryBuffer & CDFUFileAccessInfo::getRecordTypeInfoBin() { return m_RecordTypeInfoBin.getValue();}
const char * CDFUFileAccessInfo::getRecordTypeInfoJson() { return m_RecordTypeInfoJson.query();}
int CDFUFileAccessInfo::getFileAccessPort() { return m_fileAccessPort;}
bool CDFUFileAccessInfo::getFileAccessSSL() { return m_fileAccessSSL;}
void CDFUFileAccessInfo::setMetaInfoBlob(const char * val){ m_MetaInfoBlob.set(val); }
void CDFUFileAccessInfo::setExpiryTime(const char * val){ m_ExpiryTime.set(val); }
void CDFUFileAccessInfo::setNumParts(int val){ m_NumParts=val; }
void CDFUFileAccessInfo::setFileLocations(IArrayOf<IEspDFUPartLocation> &val)
{
	m_FileLocations->kill();
	IArrayOf<IConstDFUPartLocation> &target = m_FileLocations.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUPartLocation &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileAccessInfo::setFileLocations(IArrayOf<IConstDFUPartLocation> &val)
{
	m_FileLocations->kill();
	IArrayOf<IConstDFUPartLocation> &target = m_FileLocations.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUPartLocation &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileAccessInfo::setFileParts(IArrayOf<IEspDFUFilePart> &val)
{
	m_FileParts->kill();
	IArrayOf<IConstDFUFilePart> &target = m_FileParts.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDFUFilePart &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileAccessInfo::setFileParts(IArrayOf<IConstDFUFilePart> &val)
{
	m_FileParts->kill();
	IArrayOf<IConstDFUFilePart> &target = m_FileParts.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDFUFilePart &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CDFUFileAccessInfo::setRecordTypeInfoBin(const MemoryBuffer & val){ m_RecordTypeInfoBin->clear().append(val); }
void CDFUFileAccessInfo::setRecordTypeInfoJson(const char * val){ m_RecordTypeInfoJson.set(val); }
void CDFUFileAccessInfo::setFileAccessPort(int val){ m_fileAccessPort=val; }
void CDFUFileAccessInfo::setFileAccessSSL(bool val){ m_fileAccessSSL=val; }
extern "C"  IEspDFUFileAccessInfo *createDFUFileAccessInfo(const char *serv, const char *msgname){return ((IEspDFUFileAccessInfo *)new CDFUFileAccessInfo(serv /*, msgname*/));}
extern "C"  IClientDFUFileAccessInfo *createClientDFUFileAccessInfo(const char *serv, const char *msgname){return ((IClientDFUFileAccessInfo *)new CDFUFileAccessInfo(serv /*, msgname*/));}

//=======================================================
// class CDFUFileAccessResponse Implementation
//=======================================================

CDFUFileAccessResponse::CDFUFileAccessResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_AccessInfo(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileAccessResponse::CDFUFileAccessResponse(const char *serviceName, const char *bc)
	: m_AccessInfo(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessResponse");
}

CDFUFileAccessResponse::CDFUFileAccessResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_AccessInfo(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileAccessResponse::CDFUFileAccessResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_AccessInfo(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileAccessResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileAccessResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"AccessInfo\" type=\"tns:DFUFileAccessInfo\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUFileAccessInfo::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUFileAccessResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileAccessResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUFileAccessInfo"))
	{
		added.setValue("DFUFileAccessInfo",1);
		CDFUFileAccessInfo::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileAccessResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AccessInfo");
	form.append("<tr>").append("<td><b>AccessInfo: </b></td><td><hr/>");
	CDFUFileAccessInfo::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileAccessResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileAccessResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_AccessInfo.marshall(rpc_resp, "AccessInfo", "", "", "");
	}
}


void CDFUFileAccessResponse::copy(CDFUFileAccessResponse &from)
{
	m_AccessInfo.copy(from.m_AccessInfo);
}


void CDFUFileAccessResponse::copy(IConstDFUFileAccessResponse &ifrom)
{
	setAccessInfo(ifrom.getAccessInfo());
}


void CDFUFileAccessResponse::getAttributes(IProperties &attributes)
{
}


void CDFUFileAccessResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_AccessInfo.toStr(ctx, buffer, "AccessInfo", "", false, "", "");
	}
}


void CDFUFileAccessResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileAccessResponse::serializer(IEspContext* ctx, IConstDFUFileAccessResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileAccessResponse>");
	// field AccessInfo
	{
		StringBuffer tmp;
		CDFUFileAccessInfo::serializer(ctx,src.getAccessInfo(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<AccessInfo>%s</AccessInfo>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DFUFileAccessResponse>");
}

bool CDFUFileAccessResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_AccessInfo.unmarshall(rpc_request, "AccessInfo", basepath);
	}
	return hasValue;
}

bool CDFUFileAccessResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_AccessInfo.unmarshall(ctx, soapval, "AccessInfo");
	return hasValue;
}

bool CDFUFileAccessResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_AccessInfo.unmarshall(ctx, params, attachments, "AccessInfo", basepath);
	return hasValue;
}

IConstDFUFileAccessInfo & CDFUFileAccessResponse::getAccessInfo() { return (IConstDFUFileAccessInfo &) m_AccessInfo.getValue();}
IEspDFUFileAccessInfo & CDFUFileAccessResponse::updateAccessInfo(){ return (IEspDFUFileAccessInfo &) m_AccessInfo.getValue(); }
void CDFUFileAccessResponse::setAccessInfo(IConstDFUFileAccessInfo &ifrom){ m_AccessInfo.copy(ifrom); }
extern "C"  IEspDFUFileAccessResponse *createDFUFileAccessResponse(const char *serv){return ((IEspDFUFileAccessResponse *)new CDFUFileAccessResponse(serv));}
extern "C"  IClientDFUFileAccessResponse *createClientDFUFileAccessResponse(const char *serv){return ((IClientDFUFileAccessResponse *)new CDFUFileAccessResponse(serv));}

//=======================================================
// class CDFUFileCreateRequest Implementation
//=======================================================

CDFUFileCreateRequest::CDFUFileCreateRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ECLRecordDefinition(nilRemove),m_PartLocations(nilRemove),m_RequestBase(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileCreateRequest::CDFUFileCreateRequest(const char *serviceName, const char *bc)
	: m_ECLRecordDefinition(nilRemove),m_PartLocations(nilRemove),m_RequestBase(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateRequest");
}

CDFUFileCreateRequest::CDFUFileCreateRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ECLRecordDefinition(nilRemove),m_PartLocations(nilRemove),m_RequestBase(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileCreateRequest::CDFUFileCreateRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ECLRecordDefinition(nilRemove),m_PartLocations(nilRemove),m_RequestBase(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileCreateRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECLRecordDefinition\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PartLocations\" type=\"tns:EspStringArray\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RequestBase\" type=\"tns:DFUFileAccessRequestBase\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUFileAccessRequestBase::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CDFUFileCreateRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileCreateRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUFileAccessRequestBase"))
	{
		added.setValue("DFUFileAccessRequestBase",1);
		CDFUFileAccessRequestBase::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileCreateRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECLRecordDefinition");
	form.appendf("  <tr><td><b>ECLRecordDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PartLocations");
	form.appendf("<tr><td><b>PartLocations: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RequestBase");
	form.append("<tr>").append("<td><b>RequestBase: </b></td><td><hr/>");
	CDFUFileAccessRequestBase::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileCreateRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileCreateRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ECLRecordDefinition.marshall(rpc_resp, "ECLRecordDefinition", "", "", "");
	m_PartLocations.marshall(rpc_resp, "PartLocations", "Item");
	m_RequestBase.marshall(rpc_resp, "RequestBase", "", "", "");
}


void CDFUFileCreateRequest::copy(CDFUFileCreateRequest &from)
{
	m_ECLRecordDefinition.copy(from.m_ECLRecordDefinition);
	m_PartLocations.copy(from.m_PartLocations);
	m_RequestBase.copy(from.m_RequestBase);
}


void CDFUFileCreateRequest::copy(IConstDFUFileCreateRequest &ifrom)
{
	setECLRecordDefinition(ifrom.getECLRecordDefinition());
	setPartLocations(ifrom.getPartLocations());
	setRequestBase(ifrom.getRequestBase());
}


void CDFUFileCreateRequest::getAttributes(IProperties &attributes)
{
}


void CDFUFileCreateRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ECLRecordDefinition.toStr(ctx, buffer, "ECLRecordDefinition", "", true, "", "");
	m_PartLocations.toStr(ctx, buffer, "PartLocations", "Item");
	m_RequestBase.toStr(ctx, buffer, "RequestBase", "", false, "", "");
}


void CDFUFileCreateRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileCreateRequest::serializer(IEspContext* ctx, IConstDFUFileCreateRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileCreateRequest>");
	// field ECLRecordDefinition
	{
		const char* s = src.getECLRecordDefinition();
		if (s && *s)
		{
			buffer.append("<ECLRecordDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECLRecordDefinition>");
		}
	}
	// field PartLocations
	{
		StringArray& v = src.getPartLocations();
		if (v.length()>0)
			buffer.append("<PartLocations>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</PartLocations>");
	}
	// field RequestBase
	{
		StringBuffer tmp;
		CDFUFileAccessRequestBase::serializer(ctx,src.getRequestBase(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<RequestBase>%s</RequestBase>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DFUFileCreateRequest>");
}

bool CDFUFileCreateRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ECLRecordDefinition.unmarshall(rpc_request, "ECLRecordDefinition", basepath);
	hasValue |= m_PartLocations.unmarshall(rpc_request, "PartLocations", basepath);
	hasValue |= m_RequestBase.unmarshall(rpc_request, "RequestBase", basepath);
	return hasValue;
}

bool CDFUFileCreateRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ECLRecordDefinition.unmarshall(ctx, soapval, "ECLRecordDefinition");
	hasValue |= m_PartLocations.unmarshall(ctx, soapval, "PartLocations");
	hasValue |= m_RequestBase.unmarshall(ctx, soapval, "RequestBase");
	return hasValue;
}

bool CDFUFileCreateRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ECLRecordDefinition.unmarshall(ctx, params, attachments, "ECLRecordDefinition", basepath);
	hasValue |= m_PartLocations.unmarshall(ctx, params, attachments, "PartLocations", basepath);
	hasValue |= m_RequestBase.unmarshall(ctx, params, attachments, "RequestBase", basepath);
	return hasValue;
}

const char * CDFUFileCreateRequest::getECLRecordDefinition() { return m_ECLRecordDefinition.query();}
StringArray & CDFUFileCreateRequest::getPartLocations() { return (StringArray &) m_PartLocations; }
IConstDFUFileAccessRequestBase & CDFUFileCreateRequest::getRequestBase() { return (IConstDFUFileAccessRequestBase &) m_RequestBase.getValue();}
void CDFUFileCreateRequest::setECLRecordDefinition(const char * val){ m_ECLRecordDefinition.set(val); }
void CDFUFileCreateRequest::setPartLocations(StringArray &val){ m_PartLocations->kill();  CloneArray(m_PartLocations.getValue(), val); }
IEspDFUFileAccessRequestBase & CDFUFileCreateRequest::updateRequestBase(){ return (IEspDFUFileAccessRequestBase &) m_RequestBase.getValue(); }
void CDFUFileCreateRequest::setRequestBase(IConstDFUFileAccessRequestBase &ifrom){ m_RequestBase.copy(ifrom); }
extern "C"  IEspDFUFileCreateRequest *createDFUFileCreateRequest(const char *serv){return ((IEspDFUFileCreateRequest *)new CDFUFileCreateRequest(serv));}
extern "C"  IClientDFUFileCreateRequest *createClientDFUFileCreateRequest(const char *serv){return ((IClientDFUFileCreateRequest *)new CDFUFileCreateRequest(serv));}

//=======================================================
// class CDFUFileCreateV2Request Implementation
//=======================================================

CDFUFileCreateV2Request::CDFUFileCreateV2Request(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Cluster(nilRemove),m_Type(nilRemove),m_ECLRecordDefinition(nilRemove),m_RequestId(nilRemove),m_ExpirySeconds(60, nilRemove,false),m_ReturnTextResponse(0, nilRemove,false),m_Compressed(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateV2Request");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileCreateV2Request::CDFUFileCreateV2Request(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Cluster(nilRemove),m_Type(nilRemove),m_ECLRecordDefinition(nilRemove),m_RequestId(nilRemove),m_ExpirySeconds(60, nilRemove,false),m_ReturnTextResponse(0, nilRemove,false),m_Compressed(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateV2Request");
}

CDFUFileCreateV2Request::CDFUFileCreateV2Request(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilRemove),m_Cluster(nilRemove),m_Type(nilRemove),m_ECLRecordDefinition(nilRemove),m_RequestId(nilRemove),m_ExpirySeconds(60, nilRemove,false),m_ReturnTextResponse(0, nilRemove,false),m_Compressed(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateV2Request");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileCreateV2Request::CDFUFileCreateV2Request(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilRemove),m_Cluster(nilRemove),m_Type(nilRemove),m_ECLRecordDefinition(nilRemove),m_RequestId(nilRemove),m_ExpirySeconds(60, nilRemove,false),m_ReturnTextResponse(0, nilRemove,false),m_Compressed(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateV2Request");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileCreateV2Request::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"tns:DFUFileType\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECLRecordDefinition\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RequestId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"60\" name=\"ExpirySeconds\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ReturnTextResponse\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Compressed\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXDFUFileType::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUFileCreateV2Request::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileCreateV2Request::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUFileType"))
	{
		added.setValue("DFUFileType",1);
		CXDFUFileType::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileCreateV2Request::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECLRecordDefinition");
	form.appendf("  <tr><td><b>ECLRecordDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RequestId");
	form.appendf("  <tr><td><b>RequestId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ExpirySeconds");
	form.appendf("  <tr><td><b>ExpirySeconds: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"60\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReturnTextResponse");
	
	form.appendf("  <tr><td><b>ReturnTextResponse? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Compressed");
	
	form.appendf("  <tr><td><b>Compressed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileCreateV2Request::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileCreateV2Request::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_ECLRecordDefinition.marshall(rpc_resp, "ECLRecordDefinition", "", "", "");
	m_RequestId.marshall(rpc_resp, "RequestId", "", "", "");
	m_ExpirySeconds.marshall(rpc_resp, "ExpirySeconds", "", "", "");
	m_ReturnTextResponse.marshall(rpc_resp, "ReturnTextResponse", "", "", "");
	m_Compressed.marshall(rpc_resp, "Compressed", "", "", "");
}


void CDFUFileCreateV2Request::copy(CDFUFileCreateV2Request &from)
{
	m_Name.copy(from.m_Name);
	m_Cluster.copy(from.m_Cluster);
	m_Type.copy(from.m_Type);
	m_ECLRecordDefinition.copy(from.m_ECLRecordDefinition);
	m_RequestId.copy(from.m_RequestId);
	m_ExpirySeconds.copy(from.m_ExpirySeconds);
	m_ReturnTextResponse.copy(from.m_ReturnTextResponse);
	m_Compressed.copy(from.m_Compressed);
}


void CDFUFileCreateV2Request::copy(IConstDFUFileCreateV2Request &ifrom)
{
	setName(ifrom.getName());
	setCluster(ifrom.getCluster());
	setType(ifrom.getType());
	setECLRecordDefinition(ifrom.getECLRecordDefinition());
	setRequestId(ifrom.getRequestId());
	setExpirySeconds(ifrom.getExpirySeconds());
	setReturnTextResponse(ifrom.getReturnTextResponse());
	setCompressed(ifrom.getCompressed());
}


void CDFUFileCreateV2Request::getAttributes(IProperties &attributes)
{
}


void CDFUFileCreateV2Request::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_ECLRecordDefinition.toStr(ctx, buffer, "ECLRecordDefinition", "", true, "", "");
	m_RequestId.toStr(ctx, buffer, "RequestId", "", true, "", "");
	m_ExpirySeconds.toStr(ctx, buffer, "ExpirySeconds", "", true, "", "");
	m_ReturnTextResponse.toStr(ctx, buffer, "ReturnTextResponse", "", true, "", "");
	m_Compressed.toStr(ctx, buffer, "Compressed", "", true, "", "");
}


void CDFUFileCreateV2Request::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileCreateV2Request::serializer(IEspContext* ctx, IConstDFUFileCreateV2Request &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileCreateV2Request>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Type
	{
		const char* s = src.getTypeAsString();
		buffer.append("<Type>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Type>");
	}
	// field ECLRecordDefinition
	{
		const char* s = src.getECLRecordDefinition();
		if (s && *s)
		{
			buffer.append("<ECLRecordDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECLRecordDefinition>");
		}
	}
	// field RequestId
	{
		const char* s = src.getRequestId();
		if (s && *s)
		{
			buffer.append("<RequestId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RequestId>");
		}
	}
	// field ExpirySeconds
	{
		int n = src.getExpirySeconds();
		if (n)
			buffer.appendf("<ExpirySeconds>%d</ExpirySeconds>", n);
	}
	// field ReturnTextResponse
	{
		bool b = src.getReturnTextResponse();
		if (b)
			buffer.appendf("<ReturnTextResponse>1</ReturnTextResponse>");
	}
	// field Compressed
	{
		bool b = src.getCompressed();
		if (b)
			buffer.appendf("<Compressed>1</Compressed>");
	}
	if (keepRootTag)
		buffer.append("</DFUFileCreateV2Request>");
}

bool CDFUFileCreateV2Request::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_ECLRecordDefinition.unmarshall(rpc_request, "ECLRecordDefinition", basepath);
	hasValue |= m_RequestId.unmarshall(rpc_request, "RequestId", basepath);
	hasValue |= m_ExpirySeconds.unmarshall(rpc_request, "ExpirySeconds", basepath);
	hasValue |= m_ReturnTextResponse.unmarshall(rpc_request, "ReturnTextResponse", basepath);
	hasValue |= m_Compressed.unmarshall(rpc_request, "Compressed", basepath);
	return hasValue;
}

bool CDFUFileCreateV2Request::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_ECLRecordDefinition.unmarshall(ctx, soapval, "ECLRecordDefinition");
	hasValue |= m_RequestId.unmarshall(ctx, soapval, "RequestId");
	hasValue |= m_ExpirySeconds.unmarshall(ctx, soapval, "ExpirySeconds");
	hasValue |= m_ReturnTextResponse.unmarshall(ctx, soapval, "ReturnTextResponse");
	hasValue |= m_Compressed.unmarshall(ctx, soapval, "Compressed");
	return hasValue;
}

bool CDFUFileCreateV2Request::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_ECLRecordDefinition.unmarshall(ctx, params, attachments, "ECLRecordDefinition", basepath);
	hasValue |= m_RequestId.unmarshall(ctx, params, attachments, "RequestId", basepath);
	hasValue |= m_ExpirySeconds.unmarshall(ctx, params, attachments, "ExpirySeconds", basepath);
	hasValue |= m_ReturnTextResponse.unmarshall(ctx, params, attachments, "ReturnTextResponse", basepath);
	hasValue |= m_Compressed.unmarshall(ctx, params, attachments, "Compressed", basepath);
	return hasValue;
}

const char * CDFUFileCreateV2Request::getName() { return m_Name.query();}
const char * CDFUFileCreateV2Request::getCluster() { return m_Cluster.query();}
CDFUFileType CDFUFileCreateV2Request::getType() { return m_Type.getValue(); }
const char* CDFUFileCreateV2Request::getTypeAsString() {  return (const char*)m_Type; }
const char * CDFUFileCreateV2Request::getECLRecordDefinition() { return m_ECLRecordDefinition.query();}
const char * CDFUFileCreateV2Request::getRequestId() { return m_RequestId.query();}
bool CDFUFileCreateV2Request::getExpirySeconds_isNull(){return m_ExpirySeconds.is_nil();}
int CDFUFileCreateV2Request::getExpirySeconds() { return m_ExpirySeconds;}
bool CDFUFileCreateV2Request::getReturnTextResponse_isNull(){return m_ReturnTextResponse.is_nil();}
bool CDFUFileCreateV2Request::getReturnTextResponse() { return m_ReturnTextResponse;}
bool CDFUFileCreateV2Request::getCompressed_isNull(){return m_Compressed.is_nil();}
bool CDFUFileCreateV2Request::getCompressed() { return m_Compressed;}
void CDFUFileCreateV2Request::setName(const char * val){ m_Name.set(val); }
void CDFUFileCreateV2Request::setCluster(const char * val){ m_Cluster.set(val); }
void CDFUFileCreateV2Request::setType(CDFUFileType val) { m_Type.setValue(val); }
void CDFUFileCreateV2Request::setType(const char* val) { m_Type.setValue(val); }
void CDFUFileCreateV2Request::setECLRecordDefinition(const char * val){ m_ECLRecordDefinition.set(val); }
void CDFUFileCreateV2Request::setRequestId(const char * val){ m_RequestId.set(val); }
void CDFUFileCreateV2Request::setExpirySeconds_null(){ m_ExpirySeconds.Nil(); }void CDFUFileCreateV2Request::setExpirySeconds(int val){ m_ExpirySeconds=val; }
void CDFUFileCreateV2Request::setReturnTextResponse_null(){ m_ReturnTextResponse.Nil(); }void CDFUFileCreateV2Request::setReturnTextResponse(bool val){ m_ReturnTextResponse=val; }
void CDFUFileCreateV2Request::setCompressed_null(){ m_Compressed.Nil(); }void CDFUFileCreateV2Request::setCompressed(bool val){ m_Compressed=val; }
extern "C"  IEspDFUFileCreateV2Request *createDFUFileCreateV2Request(const char *serv){return ((IEspDFUFileCreateV2Request *)new CDFUFileCreateV2Request(serv));}
extern "C"  IClientDFUFileCreateV2Request *createClientDFUFileCreateV2Request(const char *serv){return ((IClientDFUFileCreateV2Request *)new CDFUFileCreateV2Request(serv));}

//=======================================================
// class CDFUFileCreateResponse Implementation
//=======================================================

CDFUFileCreateResponse::CDFUFileCreateResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_FileId(nilRemove),m_Warning(nilRemove),m_AccessInfo(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFileCreateResponse::CDFUFileCreateResponse(const char *serviceName, const char *bc)
	: m_FileId(nilRemove),m_Warning(nilRemove),m_AccessInfo(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateResponse");
}

CDFUFileCreateResponse::CDFUFileCreateResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_FileId(nilRemove),m_Warning(nilRemove),m_AccessInfo(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFileCreateResponse::CDFUFileCreateResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_FileId(nilRemove),m_Warning(nilRemove),m_AccessInfo(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFileCreateResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFileCreateResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Warning\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AccessInfo\" type=\"tns:DFUFileAccessInfo\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDFUFileAccessInfo::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDFUFileCreateResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFileCreateResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DFUFileAccessInfo"))
	{
		added.setValue("DFUFileAccessInfo",1);
		CDFUFileAccessInfo::getMapInfo(info,added);
	}
}

StringBuffer &CDFUFileCreateResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileId");
	form.appendf("  <tr><td><b>FileId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Warning");
	form.appendf("  <tr><td><b>Warning: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AccessInfo");
	form.append("<tr>").append("<td><b>AccessInfo: </b></td><td><hr/>");
	CDFUFileAccessInfo::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFileCreateResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFileCreateResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_FileId.marshall(rpc_resp, "FileId", "", "", "");
		m_Warning.marshall(rpc_resp, "Warning", "", "", "");
		m_AccessInfo.marshall(rpc_resp, "AccessInfo", "", "", "");
	}
}


void CDFUFileCreateResponse::copy(CDFUFileCreateResponse &from)
{
	m_FileId.copy(from.m_FileId);
	m_Warning.copy(from.m_Warning);
	m_AccessInfo.copy(from.m_AccessInfo);
}


void CDFUFileCreateResponse::copy(IConstDFUFileCreateResponse &ifrom)
{
	setFileId(ifrom.getFileId());
	setWarning(ifrom.getWarning());
	setAccessInfo(ifrom.getAccessInfo());
}


void CDFUFileCreateResponse::getAttributes(IProperties &attributes)
{
}


void CDFUFileCreateResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_FileId.toStr(ctx, buffer, "FileId", "", true, "", "");
		m_Warning.toStr(ctx, buffer, "Warning", "", true, "", "");
		m_AccessInfo.toStr(ctx, buffer, "AccessInfo", "", false, "", "");
	}
}


void CDFUFileCreateResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFileCreateResponse::serializer(IEspContext* ctx, IConstDFUFileCreateResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFileCreateResponse>");
	// field FileId
	{
		const char* s = src.getFileId();
		if (s && *s)
		{
			buffer.append("<FileId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileId>");
		}
	}
	// field Warning
	{
		const char* s = src.getWarning();
		if (s && *s)
		{
			buffer.append("<Warning>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Warning>");
		}
	}
	// field AccessInfo
	{
		StringBuffer tmp;
		CDFUFileAccessInfo::serializer(ctx,src.getAccessInfo(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<AccessInfo>%s</AccessInfo>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DFUFileCreateResponse>");
}

bool CDFUFileCreateResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_FileId.unmarshall(rpc_request, "FileId", basepath);
		hasValue |= m_Warning.unmarshall(rpc_request, "Warning", basepath);
		hasValue |= m_AccessInfo.unmarshall(rpc_request, "AccessInfo", basepath);
	}
	return hasValue;
}

bool CDFUFileCreateResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FileId.unmarshall(ctx, soapval, "FileId");
	hasValue |= m_Warning.unmarshall(ctx, soapval, "Warning");
	hasValue |= m_AccessInfo.unmarshall(ctx, soapval, "AccessInfo");
	return hasValue;
}

bool CDFUFileCreateResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FileId.unmarshall(ctx, params, attachments, "FileId", basepath);
	hasValue |= m_Warning.unmarshall(ctx, params, attachments, "Warning", basepath);
	hasValue |= m_AccessInfo.unmarshall(ctx, params, attachments, "AccessInfo", basepath);
	return hasValue;
}

const char * CDFUFileCreateResponse::getFileId() { return m_FileId.query();}
const char * CDFUFileCreateResponse::getWarning() { return m_Warning.query();}
IConstDFUFileAccessInfo & CDFUFileCreateResponse::getAccessInfo() { return (IConstDFUFileAccessInfo &) m_AccessInfo.getValue();}
void CDFUFileCreateResponse::setFileId(const char * val){ m_FileId.set(val); }
void CDFUFileCreateResponse::setWarning(const char * val){ m_Warning.set(val); }
IEspDFUFileAccessInfo & CDFUFileCreateResponse::updateAccessInfo(){ return (IEspDFUFileAccessInfo &) m_AccessInfo.getValue(); }
void CDFUFileCreateResponse::setAccessInfo(IConstDFUFileAccessInfo &ifrom){ m_AccessInfo.copy(ifrom); }
extern "C"  IEspDFUFileCreateResponse *createDFUFileCreateResponse(const char *serv){return ((IEspDFUFileCreateResponse *)new CDFUFileCreateResponse(serv));}
extern "C"  IClientDFUFileCreateResponse *createClientDFUFileCreateResponse(const char *serv){return ((IClientDFUFileCreateResponse *)new CDFUFileCreateResponse(serv));}

//=======================================================
// class CDFUFilePublishRequest Implementation
//=======================================================

CDFUFilePublishRequest::CDFUFilePublishRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_FileId(nilRemove),m_Overwrite(nilRemove),m_FileDescriptorBlob(nilRemove),m_ECLRecordDefinition(nilRemove),m_RecordCount(nilRemove),m_FileSize(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFilePublishRequest::CDFUFilePublishRequest(const char *serviceName, const char *bc)
	: m_FileId(nilRemove),m_Overwrite(nilRemove),m_FileDescriptorBlob(nilRemove),m_ECLRecordDefinition(nilRemove),m_RecordCount(nilRemove),m_FileSize(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishRequest");
}

CDFUFilePublishRequest::CDFUFilePublishRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_FileId(nilRemove),m_Overwrite(nilRemove),m_FileDescriptorBlob(nilRemove),m_ECLRecordDefinition(nilRemove),m_RecordCount(nilRemove),m_FileSize(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFilePublishRequest::CDFUFilePublishRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_FileId(nilRemove),m_Overwrite(nilRemove),m_FileDescriptorBlob(nilRemove),m_ECLRecordDefinition(nilRemove),m_RecordCount(nilRemove),m_FileSize(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFilePublishRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileId\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("DFUFilePublishRequest","Overwrite")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("DFUFilePublishRequest","FileDescriptorBlob")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileDescriptorBlob\" type=\"xsd:base64Binary\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECLRecordDefinition\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RecordCount\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileSize\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUFilePublishRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFilePublishRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("DFUFilePublishRequest","Overwrite",1.5);
	info.addMinVersion("DFUFilePublishRequest","FileDescriptorBlob",1.5);
}

StringBuffer &CDFUFilePublishRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileId");
	form.appendf("  <tr><td><b>FileId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("DFUFilePublishRequest","Overwrite")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Overwrite");
		
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("DFUFilePublishRequest","FileDescriptorBlob")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileDescriptorBlob");
		form.appendf("  <tr><td><b>FileDescriptorBlob: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECLRecordDefinition");
	form.appendf("  <tr><td><b>ECLRecordDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RecordCount");
	form.appendf("  <tr><td><b>RecordCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileSize");
	form.appendf("  <tr><td><b>FileSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFilePublishRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFilePublishRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_FileId.marshall(rpc_resp, "FileId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_FileDescriptorBlob.marshall(rpc_resp, "FileDescriptorBlob", "", "", "");
	m_ECLRecordDefinition.marshall(rpc_resp, "ECLRecordDefinition", "", "", "");
	m_RecordCount.marshall(rpc_resp, "RecordCount", "", "", "");
	m_FileSize.marshall(rpc_resp, "FileSize", "", "", "");
}


void CDFUFilePublishRequest::copy(CDFUFilePublishRequest &from)
{
	m_FileId.copy(from.m_FileId);
	m_Overwrite.copy(from.m_Overwrite);
	m_FileDescriptorBlob.copy(from.m_FileDescriptorBlob);
	m_ECLRecordDefinition.copy(from.m_ECLRecordDefinition);
	m_RecordCount.copy(from.m_RecordCount);
	m_FileSize.copy(from.m_FileSize);
}


void CDFUFilePublishRequest::copy(IConstDFUFilePublishRequest &ifrom)
{
	setFileId(ifrom.getFileId());
	setOverwrite(ifrom.getOverwrite());
	setFileDescriptorBlob(ifrom.getFileDescriptorBlob());
	setECLRecordDefinition(ifrom.getECLRecordDefinition());
	setRecordCount(ifrom.getRecordCount());
	setFileSize(ifrom.getFileSize());
}


void CDFUFilePublishRequest::getAttributes(IProperties &attributes)
{
}


void CDFUFilePublishRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_FileId.toStr(ctx, buffer, "FileId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_FileDescriptorBlob.toStr(ctx, buffer, "FileDescriptorBlob", "", true, "", "");
	m_ECLRecordDefinition.toStr(ctx, buffer, "ECLRecordDefinition", "", true, "", "");
	m_RecordCount.toStr(ctx, buffer, "RecordCount", "", true, "", "");
	m_FileSize.toStr(ctx, buffer, "FileSize", "", true, "", "");
}


void CDFUFilePublishRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFilePublishRequest::serializer(IEspContext* ctx, IConstDFUFilePublishRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFilePublishRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field FileId
	{
		const char* s = src.getFileId();
		if (s && *s)
		{
			buffer.append("<FileId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileId>");
		}
	}
	// field Overwrite
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	// field FileDescriptorBlob
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getFileDescriptorBlob().toByteArray(), src.getFileDescriptorBlob().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<FileDescriptorBlob>%s</FileDescriptorBlob>",tmp.str());
	}
	// field ECLRecordDefinition
	{
		const char* s = src.getECLRecordDefinition();
		if (s && *s)
		{
			buffer.append("<ECLRecordDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECLRecordDefinition>");
		}
	}
	// field RecordCount
	{
		//*** default kind: TK_INT; type=int64, name=RecordCount
		buffer.append("<RecordCount>");
		buffer.append(src.getRecordCount());
		buffer.append("</RecordCount>");
	}
	// field FileSize
	{
		//*** default kind: TK_INT; type=int64, name=FileSize
		buffer.append("<FileSize>");
		buffer.append(src.getFileSize());
		buffer.append("</FileSize>");
	}
	if (keepRootTag)
		buffer.append("</DFUFilePublishRequest>");
}

bool CDFUFilePublishRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_FileId.unmarshall(rpc_request, "FileId", basepath);
	hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
	hasValue |= m_FileDescriptorBlob.unmarshall(rpc_request, "FileDescriptorBlob", basepath);
	hasValue |= m_ECLRecordDefinition.unmarshall(rpc_request, "ECLRecordDefinition", basepath);
	hasValue |= m_RecordCount.unmarshall(rpc_request, "RecordCount", basepath);
	hasValue |= m_FileSize.unmarshall(rpc_request, "FileSize", basepath);
	return hasValue;
}

bool CDFUFilePublishRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FileId.unmarshall(ctx, soapval, "FileId");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	hasValue |= m_FileDescriptorBlob.unmarshall(ctx, soapval, "FileDescriptorBlob");
	hasValue |= m_ECLRecordDefinition.unmarshall(ctx, soapval, "ECLRecordDefinition");
	hasValue |= m_RecordCount.unmarshall(ctx, soapval, "RecordCount");
	hasValue |= m_FileSize.unmarshall(ctx, soapval, "FileSize");
	return hasValue;
}

bool CDFUFilePublishRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FileId.unmarshall(ctx, params, attachments, "FileId", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	hasValue |= m_FileDescriptorBlob.unmarshall(ctx, params, attachments, "FileDescriptorBlob", basepath);
	hasValue |= m_ECLRecordDefinition.unmarshall(ctx, params, attachments, "ECLRecordDefinition", basepath);
	hasValue |= m_RecordCount.unmarshall(ctx, params, attachments, "RecordCount", basepath);
	hasValue |= m_FileSize.unmarshall(ctx, params, attachments, "FileSize", basepath);
	return hasValue;
}

const char * CDFUFilePublishRequest::getFileId() { return m_FileId.query();}
bool CDFUFilePublishRequest::getOverwrite_isNull(){return m_Overwrite.is_nil();}
bool CDFUFilePublishRequest::getOverwrite() { return m_Overwrite;}
const MemoryBuffer & CDFUFilePublishRequest::getFileDescriptorBlob() { return m_FileDescriptorBlob.getValue();}
const char * CDFUFilePublishRequest::getECLRecordDefinition() { return m_ECLRecordDefinition.query();}
bool CDFUFilePublishRequest::getRecordCount_isNull(){return m_RecordCount.is_nil();}
__int64 CDFUFilePublishRequest::getRecordCount() { return m_RecordCount;}
bool CDFUFilePublishRequest::getFileSize_isNull(){return m_FileSize.is_nil();}
__int64 CDFUFilePublishRequest::getFileSize() { return m_FileSize;}
void CDFUFilePublishRequest::setFileId(const char * val){ m_FileId.set(val); }
void CDFUFilePublishRequest::setOverwrite_null(){ m_Overwrite.Nil(); }void CDFUFilePublishRequest::setOverwrite(bool val){ m_Overwrite=val; }
void CDFUFilePublishRequest::setFileDescriptorBlob(const MemoryBuffer & val){ m_FileDescriptorBlob->clear().append(val); }
void CDFUFilePublishRequest::setECLRecordDefinition(const char * val){ m_ECLRecordDefinition.set(val); }
void CDFUFilePublishRequest::setRecordCount_null(){ m_RecordCount.Nil(); }void CDFUFilePublishRequest::setRecordCount(__int64 val){ m_RecordCount=val; }
void CDFUFilePublishRequest::setFileSize_null(){ m_FileSize.Nil(); }void CDFUFilePublishRequest::setFileSize(__int64 val){ m_FileSize=val; }
extern "C"  IEspDFUFilePublishRequest *createDFUFilePublishRequest(const char *serv){return ((IEspDFUFilePublishRequest *)new CDFUFilePublishRequest(serv));}
extern "C"  IClientDFUFilePublishRequest *createClientDFUFilePublishRequest(const char *serv){return ((IClientDFUFilePublishRequest *)new CDFUFilePublishRequest(serv));}

//=======================================================
// class CDFUFilePublishResponse Implementation
//=======================================================

CDFUFilePublishResponse::CDFUFilePublishResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDFUFilePublishResponse::CDFUFilePublishResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishResponse");
}

CDFUFilePublishResponse::CDFUFilePublishResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDFUFilePublishResponse::CDFUFilePublishResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DFUFilePublishResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDFUFilePublishResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDFUFilePublishResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDFUFilePublishResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDFUFilePublishResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDFUFilePublishResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDFUFilePublishResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CDFUFilePublishResponse::copy(CDFUFilePublishResponse &from)
{
}


void CDFUFilePublishResponse::copy(IConstDFUFilePublishResponse &ifrom)
{
}


void CDFUFilePublishResponse::getAttributes(IProperties &attributes)
{
}


void CDFUFilePublishResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CDFUFilePublishResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDFUFilePublishResponse::serializer(IEspContext* ctx, IConstDFUFilePublishResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DFUFilePublishResponse>");
	if (keepRootTag)
		buffer.append("</DFUFilePublishResponse>");
}

bool CDFUFilePublishResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CDFUFilePublishResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CDFUFilePublishResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspDFUFilePublishResponse *createDFUFilePublishResponse(const char *serv){return ((IEspDFUFilePublishResponse *)new CDFUFilePublishResponse(serv));}
extern "C"  IClientDFUFilePublishResponse *createClientDFUFilePublishResponse(const char *serv){return ((IClientDFUFilePublishResponse *)new CDFUFilePublishResponse(serv));}

//=======================================================
// class CWsDfuPingRequest Implementation
//=======================================================

CWsDfuPingRequest::CWsDfuPingRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsDfuPingRequest::CWsDfuPingRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingRequest");
}

CWsDfuPingRequest::CWsDfuPingRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsDfuPingRequest::CWsDfuPingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsDfuPingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsDfuPingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsDfuPingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsDfuPingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsDfuPingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsDfuPingRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWsDfuPingRequest::copy(CWsDfuPingRequest &from)
{
}


void CWsDfuPingRequest::copy(IConstWsDfuPingRequest &ifrom)
{
}


void CWsDfuPingRequest::getAttributes(IProperties &attributes)
{
}


void CWsDfuPingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWsDfuPingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsDfuPingRequest::serializer(IEspContext* ctx, IConstWsDfuPingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsDfuPingRequest>");
	if (keepRootTag)
		buffer.append("</WsDfuPingRequest>");
}

bool CWsDfuPingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWsDfuPingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsDfuPingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsDfuPingRequest *createWsDfuPingRequest(const char *serv){return ((IEspWsDfuPingRequest *)new CWsDfuPingRequest(serv));}
extern "C"  IClientWsDfuPingRequest *createClientWsDfuPingRequest(const char *serv){return ((IClientWsDfuPingRequest *)new CWsDfuPingRequest(serv));}

//=======================================================
// class CWsDfuPingResponse Implementation
//=======================================================

CWsDfuPingResponse::CWsDfuPingResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsDfuPingResponse::CWsDfuPingResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingResponse");
}

CWsDfuPingResponse::CWsDfuPingResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsDfuPingResponse::CWsDfuPingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsDfuPingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsDfuPingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsDfuPingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsDfuPingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsDfuPingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsDfuPingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsDfuPingResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWsDfuPingResponse::copy(CWsDfuPingResponse &from)
{
}


void CWsDfuPingResponse::copy(IConstWsDfuPingResponse &ifrom)
{
}


void CWsDfuPingResponse::getAttributes(IProperties &attributes)
{
}


void CWsDfuPingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWsDfuPingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsDfuPingResponse::serializer(IEspContext* ctx, IConstWsDfuPingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsDfuPingResponse>");
	if (keepRootTag)
		buffer.append("</WsDfuPingResponse>");
}

bool CWsDfuPingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWsDfuPingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsDfuPingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsDfuPingResponse *createWsDfuPingResponse(const char *serv){return ((IEspWsDfuPingResponse *)new CWsDfuPingResponse(serv));}
extern "C"  IClientWsDfuPingResponse *createClientWsDfuPingResponse(const char *serv){return ((IClientWsDfuPingResponse *)new CWsDfuPingResponse(serv));}

//=======================================================
// class CWsDfuSoapBinding Implementation
//=======================================================

CWsDfuSoapBinding::CWsDfuSoapBinding(http_soap_log_level level):CHttpSoapBinding(NULL, NULL, NULL, level)
{
	init_strings();
	setWsdlVersion(1.5);
}

CWsDfuSoapBinding::CWsDfuSoapBinding(IPropertyTree* cfg, const char *bindname, const char *procname, http_soap_log_level level):CHttpSoapBinding(cfg, bindname, procname, level)
{
	init_strings(); 
	setWsdlVersion(1.5);

}

void CWsDfuSoapBinding::init_strings()
{
}

int CWsDfuSoapBinding::processRequest(IRpcMessage* rpc_call, IRpcMessage* rpc_response)
{
	if(rpc_call == NULL || rpc_response == NULL)
		return -1;

	IEspContext *ctx=rpc_call->queryContext();
	DBGLOG("Client version: %g", ctx->getClientVersion());
	StringBuffer serviceName;
	double clientVer=(ctx) ? ctx->getClientVersion() : 0.0;
	qualifyServiceName(*ctx, ctx->queryServiceName(NULL), NULL, serviceName, NULL);
	CRpcCall* thecall = static_cast<CRpcCall *>(rpc_call);
	CRpcResponse* response = static_cast<CRpcResponse*>(rpc_response);
	CHttpRequest* httprequest = thecall->getHttpReq();
	CHttpResponse* httpresponse = response->getHttpResp();

	Owned<IEspWsDfu> iserv = (IEspWsDfu*)getService();
	if(iserv == NULL)
	{
		response->set_status(SOAP_SERVER_ERROR);
		response->set_err("Service not available");
		DBGLOG("Service not available");
		return -1;
	}
	if (thecall->get_name() == NULL)
	{
		response->set_status(SOAP_CLIENT_ERROR);
		response->set_err("No service method specified");
		ERRLOG("No service method specified");
		return -1;
	}

	IEspContext& context = *rpc_call->queryContext();

	if(!stricmp(thecall->get_name(), "Add")||!stricmp(thecall->get_name(), "AddRequest"))
	{
		Owned<CAddRequest> esp_request = new CAddRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CAddResponse> esp_response = new CAddResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "Add");
			iserv->onAdd(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "Add");
		response->set_name("AddResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "AddRemote")||!stricmp(thecall->get_name(), "AddRemoteRequest"))
	{
		Owned<CAddRemoteRequest> esp_request = new CAddRemoteRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CAddRemoteResponse> esp_response = new CAddRemoteResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "AddRemote");
			iserv->onAddRemote(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "AddRemote");
		response->set_name("AddRemoteResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "AddtoSuperfile")||!stricmp(thecall->get_name(), "AddtoSuperfileRequest"))
	{
		Owned<CAddtoSuperfileRequest> esp_request = new CAddtoSuperfileRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CAddtoSuperfileResponse> esp_response = new CAddtoSuperfileResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "AddtoSuperfile");
			iserv->onAddtoSuperfile(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "AddtoSuperfile");
		response->set_name("AddtoSuperfileResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUArrayAction")||!stricmp(thecall->get_name(), "DFUArrayActionRequest"))
	{
		Owned<CDFUArrayActionRequest> esp_request = new CDFUArrayActionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUArrayActionResponse> esp_response = new CDFUArrayActionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUArrayAction");
			iserv->onDFUArrayAction(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUArrayAction");
		response->set_name("DFUArrayActionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUBrowseData")||!stricmp(thecall->get_name(), "DFUBrowseDataRequest"))
	{
		Owned<CDFUBrowseDataRequest> esp_request = new CDFUBrowseDataRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUBrowseDataResponse> esp_response = new CDFUBrowseDataResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUBrowseData");
			iserv->onDFUBrowseData(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUBrowseData");
		response->set_name("DFUBrowseDataResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUDefFile")||!stricmp(thecall->get_name(), "DFUDefFileRequest"))
	{
		Owned<CDFUDefFileRequest> esp_request = new CDFUDefFileRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUDefFileResponse> esp_response = new CDFUDefFileResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUDefFile");
			iserv->onDFUDefFile(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUDefFile");
		response->set_name("DFUDefFileResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUFileAccess")||!stricmp(thecall->get_name(), "DFUFileAccessRequest"))
	{
		Owned<CDFUFileAccessRequest> esp_request = new CDFUFileAccessRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUFileAccessResponse> esp_response = new CDFUFileAccessResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.39)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileAccess");
			iserv->onDFUFileAccess(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUFileAccess");
		response->set_name("DFUFileAccessResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUFileAccessV2")||!stricmp(thecall->get_name(), "DFUFileAccessV2Request"))
	{
		Owned<CDFUFileAccessV2Request> esp_request = new CDFUFileAccessV2Request(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUFileAccessResponse> esp_response = new CDFUFileAccessResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.5)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileAccessV2");
			iserv->onDFUFileAccessV2(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUFileAccessV2");
		response->set_name("DFUFileAccessResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUFileCreate")||!stricmp(thecall->get_name(), "DFUFileCreateRequest"))
	{
		Owned<CDFUFileCreateRequest> esp_request = new CDFUFileCreateRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUFileCreateResponse> esp_response = new CDFUFileCreateResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Full);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.39)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileCreate");
			iserv->onDFUFileCreate(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUFileCreate");
		response->set_name("DFUFileCreateResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUFileCreateV2")||!stricmp(thecall->get_name(), "DFUFileCreateV2Request"))
	{
		Owned<CDFUFileCreateV2Request> esp_request = new CDFUFileCreateV2Request(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUFileCreateResponse> esp_response = new CDFUFileCreateResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Full);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.5)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileCreateV2");
			iserv->onDFUFileCreateV2(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUFileCreateV2");
		response->set_name("DFUFileCreateResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUFilePublish")||!stricmp(thecall->get_name(), "DFUFilePublishRequest"))
	{
		Owned<CDFUFilePublishRequest> esp_request = new CDFUFilePublishRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUFilePublishResponse> esp_response = new CDFUFilePublishResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Full);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.39)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFilePublish");
			iserv->onDFUFilePublish(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUFilePublish");
		response->set_name("DFUFilePublishResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUFileView")||!stricmp(thecall->get_name(), "DFUFileViewRequest"))
	{
		Owned<CDFUFileViewRequest> esp_request = new CDFUFileViewRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUFileViewResponse> esp_response = new CDFUFileViewResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileView");
			iserv->onDFUFileView(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUFileView");
		response->set_name("DFUFileViewResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUGetDataColumns")||!stricmp(thecall->get_name(), "DFUGetDataColumnsRequest"))
	{
		Owned<CDFUGetDataColumnsRequest> esp_request = new CDFUGetDataColumnsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUGetDataColumnsResponse> esp_response = new CDFUGetDataColumnsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUGetDataColumns");
			iserv->onDFUGetDataColumns(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUGetDataColumns");
		response->set_name("DFUGetDataColumnsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUGetFileMetaData")||!stricmp(thecall->get_name(), "DFUGetFileMetaDataRequest"))
	{
		Owned<CDFUGetFileMetaDataRequest> esp_request = new CDFUGetFileMetaDataRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUGetFileMetaDataResponse> esp_response = new CDFUGetFileMetaDataResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUGetFileMetaData");
			iserv->onDFUGetFileMetaData(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUGetFileMetaData");
		response->set_name("DFUGetFileMetaDataResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUInfo")||!stricmp(thecall->get_name(), "DFUInfoRequest"))
	{
		Owned<CDFUInfoRequest> esp_request = new CDFUInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUInfoResponse> esp_response = new CDFUInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUInfo");
			iserv->onDFUInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUInfo");
		response->set_name("DFUInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUQuery")||!stricmp(thecall->get_name(), "DFUQueryRequest"))
	{
		Owned<CDFUQueryRequest> esp_request = new CDFUQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUQueryResponse> esp_response = new CDFUQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUQuery");
			iserv->onDFUQuery(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUQuery");
		response->set_name("DFUQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFURecordTypeInfo")||!stricmp(thecall->get_name(), "DFURecordTypeInfoRequest"))
	{
		Owned<CDFURecordTypeInfoRequest> esp_request = new CDFURecordTypeInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFURecordTypeInfoResponse> esp_response = new CDFURecordTypeInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFURecordTypeInfo");
			iserv->onDFURecordTypeInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFURecordTypeInfo");
		response->set_name("DFURecordTypeInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUSearch")||!stricmp(thecall->get_name(), "DFUSearchRequest"))
	{
		Owned<CDFUSearchRequest> esp_request = new CDFUSearchRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUSearchResponse> esp_response = new CDFUSearchResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUSearch");
			iserv->onDFUSearch(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUSearch");
		response->set_name("DFUSearchResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUSearchData")||!stricmp(thecall->get_name(), "DFUSearchDataRequest"))
	{
		Owned<CDFUSearchDataRequest> esp_request = new CDFUSearchDataRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUSearchDataResponse> esp_response = new CDFUSearchDataResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUSearchData");
			iserv->onDFUSearchData(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUSearchData");
		response->set_name("DFUSearchDataResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DFUSpace")||!stricmp(thecall->get_name(), "DFUSpaceRequest"))
	{
		Owned<CDFUSpaceRequest> esp_request = new CDFUSpaceRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDFUSpaceResponse> esp_response = new CDFUSpaceResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUSpace");
			iserv->onDFUSpace(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "DFUSpace");
		response->set_name("DFUSpaceResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "EclRecordTypeInfo")||!stricmp(thecall->get_name(), "EclRecordTypeInfoRequest"))
	{
		Owned<CEclRecordTypeInfoRequest> esp_request = new CEclRecordTypeInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CEclRecordTypeInfoResponse> esp_response = new CEclRecordTypeInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "EclRecordTypeInfo");
			iserv->onEclRecordTypeInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "EclRecordTypeInfo");
		response->set_name("EclRecordTypeInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "EraseHistory")||!stricmp(thecall->get_name(), "EraseHistoryRequest"))
	{
		Owned<CEraseHistoryRequest> esp_request = new CEraseHistoryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CEraseHistoryResponse> esp_response = new CEraseHistoryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "EraseHistory");
			iserv->onEraseHistory(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "EraseHistory");
		response->set_name("EraseHistoryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "ListHistory")||!stricmp(thecall->get_name(), "ListHistoryRequest"))
	{
		Owned<CListHistoryRequest> esp_request = new CListHistoryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CListHistoryResponse> esp_response = new CListHistoryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "ListHistory");
			iserv->onListHistory(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "ListHistory");
		response->set_name("ListHistoryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "Ping")||!stricmp(thecall->get_name(), "WsDfuPingRequest"))
	{
		Owned<CWsDfuPingRequest> esp_request = new CWsDfuPingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWsDfuPingResponse> esp_response = new CWsDfuPingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "Ping");
			iserv->onPing(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "Ping");
		response->set_name("WsDfuPingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "Savexml")||!stricmp(thecall->get_name(), "SavexmlRequest"))
	{
		Owned<CSavexmlRequest> esp_request = new CSavexmlRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CSavexmlResponse> esp_response = new CSavexmlResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "Savexml");
			iserv->onSavexml(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "Savexml");
		response->set_name("SavexmlResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "SuperfileAction")||!stricmp(thecall->get_name(), "SuperfileActionRequest"))
	{
		Owned<CSuperfileActionRequest> esp_request = new CSuperfileActionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CSuperfileActionResponse> esp_response = new CSuperfileActionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "SuperfileAction");
			iserv->onSuperfileAction(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "SuperfileAction");
		response->set_name("SuperfileActionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "SuperfileList")||!stricmp(thecall->get_name(), "SuperfileListRequest"))
	{
		Owned<CSuperfileListRequest> esp_request = new CSuperfileListRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CSuperfileListResponse> esp_response = new CSuperfileListResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("DfuAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsDfu::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsDfu", "SuperfileList");
			iserv->onSuperfileList(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsDfu", "SuperfileList");
		response->set_name("SuperfileListResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	response->set_status(SOAP_CLIENT_ERROR);
	StringBuffer msg, svcName;
	msg.appendf("Method %s not available in service %s",thecall->get_name(),getServiceName(svcName).str());
	ERRLOG("%s", msg.str());
	response->set_err(msg);
	return -1;
}

int CWsDfuSoapBinding::getXsdDefinition(IEspContext &context, CHttpRequest* request, StringBuffer &content, const char *service, const char *method, bool mda)
{
	BoolHash added;
	if (context.getClientVersion()<=0)
		context.setClientVersion(1.5);

	DBGLOG("Client version: %g", context.getClientVersion());
	bool fullservice = (!Utils::strcasecmp(service, "WsDfu"));
	bool allMethods = (method==NULL || *method==0);
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Add"))) || Utils::strcasecmp(method, "Add")==0)
	{
		CAddRequest::getMapInfo(context.queryMapInfo());
		CAddResponse::getMapInfo(context.queryMapInfo());
		CAddRequest::getXsdDefinition(context, request, "AddRequest", content, added);
		CAddResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "AddRemote"))) || Utils::strcasecmp(method, "AddRemote")==0)
	{
		CAddRemoteRequest::getMapInfo(context.queryMapInfo());
		CAddRemoteResponse::getMapInfo(context.queryMapInfo());
		CAddRemoteRequest::getXsdDefinition(context, request, "AddRemoteRequest", content, added);
		CAddRemoteResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "AddtoSuperfile"))) || Utils::strcasecmp(method, "AddtoSuperfile")==0)
	{
		CAddtoSuperfileRequest::getMapInfo(context.queryMapInfo());
		CAddtoSuperfileResponse::getMapInfo(context.queryMapInfo());
		CAddtoSuperfileRequest::getXsdDefinition(context, request, "AddtoSuperfileRequest", content, added);
		CAddtoSuperfileResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUArrayAction"))) || Utils::strcasecmp(method, "DFUArrayAction")==0)
	{
		CDFUArrayActionRequest::getMapInfo(context.queryMapInfo());
		CDFUArrayActionResponse::getMapInfo(context.queryMapInfo());
		CDFUArrayActionRequest::getXsdDefinition(context, request, "DFUArrayActionRequest", content, added);
		CDFUArrayActionResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUBrowseData"))) || Utils::strcasecmp(method, "DFUBrowseData")==0)
	{
		CDFUBrowseDataRequest::getMapInfo(context.queryMapInfo());
		CDFUBrowseDataResponse::getMapInfo(context.queryMapInfo());
		CDFUBrowseDataRequest::getXsdDefinition(context, request, "DFUBrowseDataRequest", content, added);
		CDFUBrowseDataResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUDefFile"))) || Utils::strcasecmp(method, "DFUDefFile")==0)
	{
		CDFUDefFileRequest::getMapInfo(context.queryMapInfo());
		CDFUDefFileResponse::getMapInfo(context.queryMapInfo());
		CDFUDefFileRequest::getXsdDefinition(context, request, "DFUDefFileRequest", content, added);
		CDFUDefFileResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUFileAccess"))) || Utils::strcasecmp(method, "DFUFileAccess")==0)
	{
		if (context.getClientVersion()>=1.39) {
			CDFUFileAccessRequest::getMapInfo(context.queryMapInfo());
			CDFUFileAccessResponse::getMapInfo(context.queryMapInfo());
			CDFUFileAccessRequest::getXsdDefinition(context, request, "DFUFileAccessRequest", content, added);
			CDFUFileAccessResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUFileAccessV2"))) || Utils::strcasecmp(method, "DFUFileAccessV2")==0)
	{
		if (context.getClientVersion()>=1.5) {
			CDFUFileAccessV2Request::getMapInfo(context.queryMapInfo());
			CDFUFileAccessResponse::getMapInfo(context.queryMapInfo());
			CDFUFileAccessV2Request::getXsdDefinition(context, request, "DFUFileAccessV2Request", content, added);
			CDFUFileAccessResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUFileCreate"))) || Utils::strcasecmp(method, "DFUFileCreate")==0)
	{
		if (context.getClientVersion()>=1.39) {
			CDFUFileCreateRequest::getMapInfo(context.queryMapInfo());
			CDFUFileCreateResponse::getMapInfo(context.queryMapInfo());
			CDFUFileCreateRequest::getXsdDefinition(context, request, "DFUFileCreateRequest", content, added);
			CDFUFileCreateResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUFileCreateV2"))) || Utils::strcasecmp(method, "DFUFileCreateV2")==0)
	{
		if (context.getClientVersion()>=1.5) {
			CDFUFileCreateV2Request::getMapInfo(context.queryMapInfo());
			CDFUFileCreateResponse::getMapInfo(context.queryMapInfo());
			CDFUFileCreateV2Request::getXsdDefinition(context, request, "DFUFileCreateV2Request", content, added);
			CDFUFileCreateResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUFilePublish"))) || Utils::strcasecmp(method, "DFUFilePublish")==0)
	{
		if (context.getClientVersion()>=1.39) {
			CDFUFilePublishRequest::getMapInfo(context.queryMapInfo());
			CDFUFilePublishResponse::getMapInfo(context.queryMapInfo());
			CDFUFilePublishRequest::getXsdDefinition(context, request, "DFUFilePublishRequest", content, added);
			CDFUFilePublishResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUFileView"))) || Utils::strcasecmp(method, "DFUFileView")==0)
	{
		CDFUFileViewRequest::getMapInfo(context.queryMapInfo());
		CDFUFileViewResponse::getMapInfo(context.queryMapInfo());
		CDFUFileViewRequest::getXsdDefinition(context, request, "DFUFileViewRequest", content, added);
		CDFUFileViewResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUGetDataColumns"))) || Utils::strcasecmp(method, "DFUGetDataColumns")==0)
	{
		CDFUGetDataColumnsRequest::getMapInfo(context.queryMapInfo());
		CDFUGetDataColumnsResponse::getMapInfo(context.queryMapInfo());
		CDFUGetDataColumnsRequest::getXsdDefinition(context, request, "DFUGetDataColumnsRequest", content, added);
		CDFUGetDataColumnsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUGetFileMetaData"))) || Utils::strcasecmp(method, "DFUGetFileMetaData")==0)
	{
		CDFUGetFileMetaDataRequest::getMapInfo(context.queryMapInfo());
		CDFUGetFileMetaDataResponse::getMapInfo(context.queryMapInfo());
		CDFUGetFileMetaDataRequest::getXsdDefinition(context, request, "DFUGetFileMetaDataRequest", content, added);
		CDFUGetFileMetaDataResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUInfo"))) || Utils::strcasecmp(method, "DFUInfo")==0)
	{
		CDFUInfoRequest::getMapInfo(context.queryMapInfo());
		CDFUInfoResponse::getMapInfo(context.queryMapInfo());
		CDFUInfoRequest::getXsdDefinition(context, request, "DFUInfoRequest", content, added);
		CDFUInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUQuery"))) || Utils::strcasecmp(method, "DFUQuery")==0)
	{
		CDFUQueryRequest::getMapInfo(context.queryMapInfo());
		CDFUQueryResponse::getMapInfo(context.queryMapInfo());
		CDFUQueryRequest::getXsdDefinition(context, request, "DFUQueryRequest", content, added);
		CDFUQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFURecordTypeInfo"))) || Utils::strcasecmp(method, "DFURecordTypeInfo")==0)
	{
		CDFURecordTypeInfoRequest::getMapInfo(context.queryMapInfo());
		CDFURecordTypeInfoResponse::getMapInfo(context.queryMapInfo());
		CDFURecordTypeInfoRequest::getXsdDefinition(context, request, "DFURecordTypeInfoRequest", content, added);
		CDFURecordTypeInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUSearch"))) || Utils::strcasecmp(method, "DFUSearch")==0)
	{
		CDFUSearchRequest::getMapInfo(context.queryMapInfo());
		CDFUSearchResponse::getMapInfo(context.queryMapInfo());
		CDFUSearchRequest::getXsdDefinition(context, request, "DFUSearchRequest", content, added);
		CDFUSearchResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUSearchData"))) || Utils::strcasecmp(method, "DFUSearchData")==0)
	{
		CDFUSearchDataRequest::getMapInfo(context.queryMapInfo());
		CDFUSearchDataResponse::getMapInfo(context.queryMapInfo());
		CDFUSearchDataRequest::getXsdDefinition(context, request, "DFUSearchDataRequest", content, added);
		CDFUSearchDataResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DFUSpace"))) || Utils::strcasecmp(method, "DFUSpace")==0)
	{
		CDFUSpaceRequest::getMapInfo(context.queryMapInfo());
		CDFUSpaceResponse::getMapInfo(context.queryMapInfo());
		CDFUSpaceRequest::getXsdDefinition(context, request, "DFUSpaceRequest", content, added);
		CDFUSpaceResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "EclRecordTypeInfo"))) || Utils::strcasecmp(method, "EclRecordTypeInfo")==0)
	{
		CEclRecordTypeInfoRequest::getMapInfo(context.queryMapInfo());
		CEclRecordTypeInfoResponse::getMapInfo(context.queryMapInfo());
		CEclRecordTypeInfoRequest::getXsdDefinition(context, request, "EclRecordTypeInfoRequest", content, added);
		CEclRecordTypeInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "EraseHistory"))) || Utils::strcasecmp(method, "EraseHistory")==0)
	{
		CEraseHistoryRequest::getMapInfo(context.queryMapInfo());
		CEraseHistoryResponse::getMapInfo(context.queryMapInfo());
		CEraseHistoryRequest::getXsdDefinition(context, request, "EraseHistoryRequest", content, added);
		CEraseHistoryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "ListHistory"))) || Utils::strcasecmp(method, "ListHistory")==0)
	{
		CListHistoryRequest::getMapInfo(context.queryMapInfo());
		CListHistoryResponse::getMapInfo(context.queryMapInfo());
		CListHistoryRequest::getXsdDefinition(context, request, "ListHistoryRequest", content, added);
		CListHistoryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Ping"))) || Utils::strcasecmp(method, "Ping")==0)
	{
		CWsDfuPingRequest::getMapInfo(context.queryMapInfo());
		CWsDfuPingResponse::getMapInfo(context.queryMapInfo());
		CWsDfuPingRequest::getXsdDefinition(context, request, "WsDfuPingRequest", content, added);
		CWsDfuPingResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Savexml"))) || Utils::strcasecmp(method, "Savexml")==0)
	{
		CSavexmlRequest::getMapInfo(context.queryMapInfo());
		CSavexmlResponse::getMapInfo(context.queryMapInfo());
		CSavexmlRequest::getXsdDefinition(context, request, "SavexmlRequest", content, added);
		CSavexmlResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "SuperfileAction"))) || Utils::strcasecmp(method, "SuperfileAction")==0)
	{
		CSuperfileActionRequest::getMapInfo(context.queryMapInfo());
		CSuperfileActionResponse::getMapInfo(context.queryMapInfo());
		CSuperfileActionRequest::getXsdDefinition(context, request, "SuperfileActionRequest", content, added);
		CSuperfileActionResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "SuperfileList"))) || Utils::strcasecmp(method, "SuperfileList")==0)
	{
		CSuperfileListRequest::getMapInfo(context.queryMapInfo());
		CSuperfileListResponse::getMapInfo(context.queryMapInfo());
		CSuperfileListRequest::getXsdDefinition(context, request, "SuperfileListRequest", content, added);
		CSuperfileListResponse::getXsdDefinition(context, request, content, added);
	}
	return 0;
}

int CWsDfuSoapBinding::getMethodHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &page, bool bIncludeFormTag)
{
	DBGLOG("Client version: %g", context.getClientVersion());
	if (Utils::strcasecmp(method, "Add")==0)
	{
		CAddRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "AddRemote")==0)
	{
		CAddRemoteRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "AddtoSuperfile")==0)
	{
		CAddtoSuperfileRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUArrayAction")==0)
	{
		CDFUArrayActionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUBrowseData")==0)
	{
		CDFUBrowseDataRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUDefFile")==0)
	{
		CDFUDefFileRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUFileAccess")==0)
	{
		CDFUFileAccessRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUFileAccessV2")==0)
	{
		CDFUFileAccessV2Request::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUFileCreate")==0)
	{
		CDFUFileCreateRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUFileCreateV2")==0)
	{
		CDFUFileCreateV2Request::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUFilePublish")==0)
	{
		CDFUFilePublishRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUFileView")==0)
	{
		CDFUFileViewRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUGetDataColumns")==0)
	{
		CDFUGetDataColumnsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUGetFileMetaData")==0)
	{
		CDFUGetFileMetaDataRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUInfo")==0)
	{
		CDFUInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUQuery")==0)
	{
		CDFUQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFURecordTypeInfo")==0)
	{
		CDFURecordTypeInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUSearch")==0)
	{
		CDFUSearchRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUSearchData")==0)
	{
		CDFUSearchDataRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DFUSpace")==0)
	{
		CDFUSpaceRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "EclRecordTypeInfo")==0)
	{
		CEclRecordTypeInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "EraseHistory")==0)
	{
		CEraseHistoryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "ListHistory")==0)
	{
		CListHistoryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "Ping")==0)
	{
		CWsDfuPingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "Savexml")==0)
	{
		CSavexmlRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "SuperfileAction")==0)
	{
		CSuperfileActionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "SuperfileList")==0)
	{
		CSuperfileListRequest::getHtmlForm(context, request, serv, method, page);
	}
	return 0;
}

int CWsDfuSoapBinding::getQualifiedNames(IEspContext& ctx, MethodInfoArray & methods)
{
	double ver = ctx.getClientVersion();
	if (ver<=0)
		ver = getWsdlVersion();
	const char *servname=ctx.queryServiceName(NULL);
	bool fullservice = (!stricmp(servname, "esp")||!stricmp(servname, "WsDfu"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Add")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Add", "AddRequest", "AddResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "AddRemote")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("AddRemote", "AddRemoteRequest", "AddRemoteResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "AddtoSuperfile")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("AddtoSuperfile", "AddtoSuperfileRequest", "AddtoSuperfileResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUArrayAction")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUArrayAction", "DFUArrayActionRequest", "DFUArrayActionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUBrowseData")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUBrowseData", "DFUBrowseDataRequest", "DFUBrowseDataResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUDefFile")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUDefFile", "DFUDefFileRequest", "DFUDefFileResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUFileAccess")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.39, -1))
		methods.append(*new CMethodInfo("DFUFileAccess", "DFUFileAccessRequest", "DFUFileAccessResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUFileAccessV2")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.5, -1))
		methods.append(*new CMethodInfo("DFUFileAccessV2", "DFUFileAccessV2Request", "DFUFileAccessResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUFileCreate")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.39, -1))
		methods.append(*new CMethodInfo("DFUFileCreate", "DFUFileCreateRequest", "DFUFileCreateResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUFileCreateV2")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.5, -1))
		methods.append(*new CMethodInfo("DFUFileCreateV2", "DFUFileCreateV2Request", "DFUFileCreateResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUFilePublish")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.39, -1))
		methods.append(*new CMethodInfo("DFUFilePublish", "DFUFilePublishRequest", "DFUFilePublishResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUFileView")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUFileView", "DFUFileViewRequest", "DFUFileViewResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUGetDataColumns")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUGetDataColumns", "DFUGetDataColumnsRequest", "DFUGetDataColumnsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUGetFileMetaData")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUGetFileMetaData", "DFUGetFileMetaDataRequest", "DFUGetFileMetaDataResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUInfo", "DFUInfoRequest", "DFUInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUQuery")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUQuery", "DFUQueryRequest", "DFUQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFURecordTypeInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFURecordTypeInfo", "DFURecordTypeInfoRequest", "DFURecordTypeInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUSearch")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUSearch", "DFUSearchRequest", "DFUSearchResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUSearchData")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUSearchData", "DFUSearchDataRequest", "DFUSearchDataResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DFUSpace")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DFUSpace", "DFUSpaceRequest", "DFUSpaceResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "EclRecordTypeInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("EclRecordTypeInfo", "EclRecordTypeInfoRequest", "EclRecordTypeInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "EraseHistory")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("EraseHistory", "EraseHistoryRequest", "EraseHistoryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "ListHistory")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("ListHistory", "ListHistoryRequest", "ListHistoryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Ping")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Ping", "WsDfuPingRequest", "WsDfuPingResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Savexml")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Savexml", "SavexmlRequest", "SavexmlResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "SuperfileAction")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("SuperfileAction", "SuperfileActionRequest", "SuperfileActionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "SuperfileList")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("SuperfileList", "SuperfileListRequest", "SuperfileListResponse"));
	return methods.ordinality();
}

StringBuffer & CWsDfuSoapBinding::getServiceName(StringBuffer &resp)
{
	resp.append("WsDfu");
	return resp;
}

bool CWsDfuSoapBinding::isValidServiceName(IEspContext &context, const char *name)
{
	if (!Utils::strcasecmp(name, "WsDfu"))
		return true;
	else
		return (hasSubService(context, name));
}

bool CWsDfuSoapBinding::qualifyMethodName(IEspContext &context, const char *methname, StringBuffer *methQName)
{
	if (!methname || !*methname)
	{
		if (methQName!=NULL)
			methQName->clear();
		return true;
	}
	if (Utils::strcasecmp(methname, "Add")==0)
	{
		if (methQName!=NULL)
			methQName->set("Add");
		return true;
	}
	if (Utils::strcasecmp(methname, "AddRemote")==0)
	{
		if (methQName!=NULL)
			methQName->set("AddRemote");
		return true;
	}
	if (Utils::strcasecmp(methname, "AddtoSuperfile")==0)
	{
		if (methQName!=NULL)
			methQName->set("AddtoSuperfile");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUArrayAction")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUArrayAction");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUBrowseData")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUBrowseData");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUDefFile")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUDefFile");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUFileAccess")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUFileAccess");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUFileAccessV2")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUFileAccessV2");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUFileCreate")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUFileCreate");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUFileCreateV2")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUFileCreateV2");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUFilePublish")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUFilePublish");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUFileView")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUFileView");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUGetDataColumns")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUGetDataColumns");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUGetFileMetaData")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUGetFileMetaData");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUQuery")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUQuery");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFURecordTypeInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFURecordTypeInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUSearch")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUSearch");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUSearchData")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUSearchData");
		return true;
	}
	if (Utils::strcasecmp(methname, "DFUSpace")==0)
	{
		if (methQName!=NULL)
			methQName->set("DFUSpace");
		return true;
	}
	if (Utils::strcasecmp(methname, "EclRecordTypeInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("EclRecordTypeInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "EraseHistory")==0)
	{
		if (methQName!=NULL)
			methQName->set("EraseHistory");
		return true;
	}
	if (Utils::strcasecmp(methname, "ListHistory")==0)
	{
		if (methQName!=NULL)
			methQName->set("ListHistory");
		return true;
	}
	if (Utils::strcasecmp(methname, "Ping")==0)
	{
		if (methQName!=NULL)
			methQName->set("Ping");
		return true;
	}
	if (Utils::strcasecmp(methname, "Savexml")==0)
	{
		if (methQName!=NULL)
			methQName->set("Savexml");
		return true;
	}
	if (Utils::strcasecmp(methname, "SuperfileAction")==0)
	{
		if (methQName!=NULL)
			methQName->set("SuperfileAction");
		return true;
	}
	if (Utils::strcasecmp(methname, "SuperfileList")==0)
	{
		if (methQName!=NULL)
			methQName->set("SuperfileList");
		return true;
	}
	return false;
}

bool CWsDfuSoapBinding::qualifyServiceName(IEspContext &context, const char *servname, const char *methname, StringBuffer &servQName, StringBuffer *methQName)
{
	servQName.clear();
	if (!Utils::strcasecmp(servname, "WsDfu"))
	{
		servQName.append("WsDfu");
		return qualifyMethodName(context, methname, methQName);
	}
	return qualifySubServiceName(context, servname, methname, servQName, methQName);
}

int CWsDfuSoapBinding::onGetFile(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	StringBuffer mimetype;
	MemoryBuffer content;

	StringBuffer filepath;
	getBaseFilePath(filepath);
	if (strchr("\\/", filepath.charAt(filepath.length()-1))==NULL)
		filepath.append("/");
	filepath.append(pathex);
	response->httpContentFromFile(filepath.str());
	response->send();
	return 0;
}

int CWsDfuSoapBinding::onGetForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	return onGetNotFound(context, request, response, service);
}
int CWsDfuSoapBinding::onGetXForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	return EspHttpBinding::onGetXForm(context, request, response, service, method);
}

int CWsDfuSoapBinding::onGetService(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	return onGetQuery(context, request, response, service, method);
}

 IRpcRequestBinding *CWsDfuSoapBinding::createReqBinding(IEspContext &context, IHttpMessage *ireq, const char *service, const char *method)
{
	CHttpRequest *request=static_cast<CHttpRequest*>(ireq);
	IProperties *props = (request) ? request->queryParameters() : NULL;

	if (!stricmp(method, "Add") || !stricmp(method, "AddRequest"))
		return new CAddRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "AddRemote") || !stricmp(method, "AddRemoteRequest"))
		return new CAddRemoteRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "AddtoSuperfile") || !stricmp(method, "AddtoSuperfileRequest"))
		return new CAddtoSuperfileRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUArrayAction") || !stricmp(method, "DFUArrayActionRequest"))
		return new CDFUArrayActionRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUBrowseData") || !stricmp(method, "DFUBrowseDataRequest"))
		return new CDFUBrowseDataRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUDefFile") || !stricmp(method, "DFUDefFileRequest"))
		return new CDFUDefFileRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUFileAccess") || !stricmp(method, "DFUFileAccessRequest"))
		return new CDFUFileAccessRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUFileAccessV2") || !stricmp(method, "DFUFileAccessV2Request"))
		return new CDFUFileAccessV2Request(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUFileCreate") || !stricmp(method, "DFUFileCreateRequest"))
		return new CDFUFileCreateRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUFileCreateV2") || !stricmp(method, "DFUFileCreateV2Request"))
		return new CDFUFileCreateV2Request(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUFilePublish") || !stricmp(method, "DFUFilePublishRequest"))
		return new CDFUFilePublishRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUFileView") || !stricmp(method, "DFUFileViewRequest"))
		return new CDFUFileViewRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUGetDataColumns") || !stricmp(method, "DFUGetDataColumnsRequest"))
		return new CDFUGetDataColumnsRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUGetFileMetaData") || !stricmp(method, "DFUGetFileMetaDataRequest"))
		return new CDFUGetFileMetaDataRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUInfo") || !stricmp(method, "DFUInfoRequest"))
		return new CDFUInfoRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUQuery") || !stricmp(method, "DFUQueryRequest"))
		return new CDFUQueryRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFURecordTypeInfo") || !stricmp(method, "DFURecordTypeInfoRequest"))
		return new CDFURecordTypeInfoRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUSearch") || !stricmp(method, "DFUSearchRequest"))
		return new CDFUSearchRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUSearchData") || !stricmp(method, "DFUSearchDataRequest"))
		return new CDFUSearchDataRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "DFUSpace") || !stricmp(method, "DFUSpaceRequest"))
		return new CDFUSpaceRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "EclRecordTypeInfo") || !stricmp(method, "EclRecordTypeInfoRequest"))
		return new CEclRecordTypeInfoRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "EraseHistory") || !stricmp(method, "EraseHistoryRequest"))
		return new CEraseHistoryRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "ListHistory") || !stricmp(method, "ListHistoryRequest"))
		return new CListHistoryRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "Ping") || !stricmp(method, "WsDfuPingRequest"))
		return new CWsDfuPingRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "Savexml") || !stricmp(method, "SavexmlRequest"))
		return new CSavexmlRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "SuperfileAction") || !stricmp(method, "SuperfileActionRequest"))
		return new CSuperfileActionRequest(&context, "WsDfu", props, NULL);
	if (!stricmp(method, "SuperfileList") || !stricmp(method, "SuperfileListRequest"))
		return new CSuperfileListRequest(&context, "WsDfu", props, NULL);
	return NULL;
}

int CWsDfuSoapBinding::onGetInstantQuery(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if (context.getClientVersion()<=0)
		context.setClientVersion(1.5);

	if(request == NULL || response == NULL)
		return -1;
	StringBuffer respStr;
	Owned<IEspWsDfu> iserv = (IEspWsDfu*)getService();
	if(iserv == NULL)
	{
		respStr.append("Service not available");
		response->setContent(respStr.str());
		response->setContentType("text/html");
		response->send();
	}
	else
	{
		Owned<CSoapResponseBinding> esp_response;
		StringBuffer source;
		IEspContext& context = *request->queryContext();
		if(!stricmp(method, "Add")||!stricmp(method, "AddRequest"))
		{
			Owned<CAddRequest> esp_request = new CAddRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CAddResponse* resp = new CAddResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Write);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "Add");
				iserv->onAdd(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "Add", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "AddRemote")||!stricmp(method, "AddRemoteRequest"))
		{
			Owned<CAddRemoteRequest> esp_request = new CAddRemoteRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CAddRemoteResponse* resp = new CAddRemoteResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Write);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "AddRemote");
				iserv->onAddRemote(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "AddRemote", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "AddtoSuperfile")||!stricmp(method, "AddtoSuperfileRequest"))
		{
			Owned<CAddtoSuperfileRequest> esp_request = new CAddtoSuperfileRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CAddtoSuperfileResponse> esp_response = new CAddtoSuperfileResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onAddtoSuperfile(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "AddtoSuperfile", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/addto_superfile.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUArrayAction")||!stricmp(method, "DFUArrayActionRequest"))
		{
			Owned<CDFUArrayActionRequest> esp_request = new CDFUArrayActionRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUArrayActionResponse> esp_response = new CDFUArrayActionResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUArrayAction(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUArrayAction", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/action.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUBrowseData")||!stricmp(method, "DFUBrowseDataRequest"))
		{
			Owned<CDFUBrowseDataRequest> esp_request = new CDFUBrowseDataRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUBrowseDataResponse> esp_response = new CDFUBrowseDataResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUBrowseData(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUBrowseData", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_viewdata.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUDefFile")||!stricmp(method, "DFUDefFileRequest"))
		{
			Owned<CDFUDefFileRequest> esp_request = new CDFUDefFileRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUDefFileResponse* resp = new CDFUDefFileResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUDefFile");
				iserv->onDFUDefFile(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUDefFile", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUFileAccess")||!stricmp(method, "DFUFileAccessRequest"))
		{
			Owned<CDFUFileAccessRequest> esp_request = new CDFUFileAccessRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUFileAccessResponse* resp = new CDFUFileAccessResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Read);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileAccess");
				iserv->onDFUFileAccess(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUFileAccess", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUFileAccessV2")||!stricmp(method, "DFUFileAccessV2Request"))
		{
			Owned<CDFUFileAccessV2Request> esp_request = new CDFUFileAccessV2Request(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUFileAccessResponse* resp = new CDFUFileAccessResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Read);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileAccessV2");
				iserv->onDFUFileAccessV2(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUFileAccessV2", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUFileCreate")||!stricmp(method, "DFUFileCreateRequest"))
		{
			Owned<CDFUFileCreateRequest> esp_request = new CDFUFileCreateRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUFileCreateResponse* resp = new CDFUFileCreateResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Full);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileCreate");
				iserv->onDFUFileCreate(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUFileCreate", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUFileCreateV2")||!stricmp(method, "DFUFileCreateV2Request"))
		{
			Owned<CDFUFileCreateV2Request> esp_request = new CDFUFileCreateV2Request(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUFileCreateResponse* resp = new CDFUFileCreateResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Full);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFileCreateV2");
				iserv->onDFUFileCreateV2(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUFileCreateV2", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUFilePublish")||!stricmp(method, "DFUFilePublishRequest"))
		{
			Owned<CDFUFilePublishRequest> esp_request = new CDFUFilePublishRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUFilePublishResponse* resp = new CDFUFilePublishResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Full);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUFilePublish");
				iserv->onDFUFilePublish(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUFilePublish", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUFileView")||!stricmp(method, "DFUFileViewRequest"))
		{
			Owned<CDFUFileViewRequest> esp_request = new CDFUFileViewRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUFileViewResponse> esp_response = new CDFUFileViewResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUFileView(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUFileView", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_fileview.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUGetDataColumns")||!stricmp(method, "DFUGetDataColumnsRequest"))
		{
			Owned<CDFUGetDataColumnsRequest> esp_request = new CDFUGetDataColumnsRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUGetDataColumnsResponse> esp_response = new CDFUGetDataColumnsResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUGetDataColumns(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUGetDataColumns", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_getdatacolumns.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUGetFileMetaData")||!stricmp(method, "DFUGetFileMetaDataRequest"))
		{
			Owned<CDFUGetFileMetaDataRequest> esp_request = new CDFUGetFileMetaDataRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFUGetFileMetaDataResponse* resp = new CDFUGetFileMetaDataResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Read);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFUGetFileMetaData");
				iserv->onDFUGetFileMetaData(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUGetFileMetaData", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUInfo")||!stricmp(method, "DFUInfoRequest"))
		{
			Owned<CDFUInfoRequest> esp_request = new CDFUInfoRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUInfoResponse> esp_response = new CDFUInfoResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUInfo(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_file.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUQuery")||!stricmp(method, "DFUQueryRequest"))
		{
			Owned<CDFUQueryRequest> esp_request = new CDFUQueryRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUQueryResponse> esp_response = new CDFUQueryResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUQuery(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUQuery", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFURecordTypeInfo")||!stricmp(method, "DFURecordTypeInfoRequest"))
		{
			Owned<CDFURecordTypeInfoRequest> esp_request = new CDFURecordTypeInfoRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDFURecordTypeInfoResponse* resp = new CDFURecordTypeInfoResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "DFURecordTypeInfo");
				iserv->onDFURecordTypeInfo(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFURecordTypeInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DFUSearch")||!stricmp(method, "DFUSearchRequest"))
		{
			Owned<CDFUSearchRequest> esp_request = new CDFUSearchRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUSearchResponse> esp_response = new CDFUSearchResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUSearch(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUSearch", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_search.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUSearchData")||!stricmp(method, "DFUSearchDataRequest"))
		{
			Owned<CDFUSearchDataRequest> esp_request = new CDFUSearchDataRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUSearchDataResponse> esp_response = new CDFUSearchDataResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUSearchData(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUSearchData", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_searchdata.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "DFUSpace")||!stricmp(method, "DFUSpaceRequest"))
		{
			Owned<CDFUSpaceRequest> esp_request = new CDFUSpaceRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CDFUSpaceResponse> esp_response = new CDFUSpaceResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onDFUSpace(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "DFUSpace", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_file_space.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "EclRecordTypeInfo")||!stricmp(method, "EclRecordTypeInfoRequest"))
		{
			Owned<CEclRecordTypeInfoRequest> esp_request = new CEclRecordTypeInfoRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CEclRecordTypeInfoResponse* resp = new CEclRecordTypeInfoResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "EclRecordTypeInfo");
				iserv->onEclRecordTypeInfo(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "EclRecordTypeInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "EraseHistory")||!stricmp(method, "EraseHistoryRequest"))
		{
			Owned<CEraseHistoryRequest> esp_request = new CEraseHistoryRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CEraseHistoryResponse* resp = new CEraseHistoryResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "EraseHistory");
				iserv->onEraseHistory(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "EraseHistory", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "ListHistory")||!stricmp(method, "ListHistoryRequest"))
		{
			Owned<CListHistoryRequest> esp_request = new CListHistoryRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CListHistoryResponse* resp = new CListHistoryResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "ListHistory");
				iserv->onListHistory(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "ListHistory", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "Ping")||!stricmp(method, "WsDfuPingRequest"))
		{
			Owned<CWsDfuPingRequest> esp_request = new CWsDfuPingRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWsDfuPingResponse* resp = new CWsDfuPingResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "Ping");
				iserv->onPing(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "Ping", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "Savexml")||!stricmp(method, "SavexmlRequest"))
		{
			Owned<CSavexmlRequest> esp_request = new CSavexmlRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CSavexmlResponse* resp = new CSavexmlResponse("WsDfu");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("DfuAccess", SecAccess_Read);
			source.setf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsDfu", "Savexml");
				iserv->onSavexml(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "Savexml", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "SuperfileAction")||!stricmp(method, "SuperfileActionRequest"))
		{
			Owned<CSuperfileActionRequest> esp_request = new CSuperfileActionRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CSuperfileActionResponse> esp_response = new CSuperfileActionResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onSuperfileAction(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "SuperfileAction", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_superresult.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "SuperfileList")||!stricmp(method, "SuperfileListRequest"))
		{
			Owned<CSuperfileListRequest> esp_request = new CSuperfileListRequest(&context, "WsDfu", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CSuperfileListResponse> esp_response = new CSuperfileListResponse("WsDfu");
			StringBuffer source;
			source.appendf("WsDfu::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onSuperfileList(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsDfu", "SuperfileList", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/dfu_superedit.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}

		if (esp_response.get())
		{
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
				response->redirect(*request, esp_response->getRedirectUrl());
			else
			{
				MemoryBuffer content;
				StringBuffer mimetype;
				esp_response->appendContent(&context,content, mimetype);
				onBeforeSendResponse(context,request,content,service,method);
				response->setContent(content.length(), content.toByteArray());
				response->setContentType(mimetype.str());
				response->send();
			}
			return 0;
		}
	}
	return onGetNotFound(context, request,  response, service);
}





//=======================================================
// client util methods
//=======================================================

//------ method Add ---------

IClientAddRequest * CClientWsDfu::createAddRequest()
{
	CAddRequest* request = new CAddRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientAddResponse * CClientWsDfu::Add(IClientAddRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CAddRequest* esprequest = static_cast<CAddRequest*>(request);
	CAddResponse* espresponse = new CAddResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_Add(IClientAddRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CAddRequest* esprequest = static_cast<CAddRequest*>(request);
	esprequest->setMethod("Add");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientAddResponse *CClientWsDfu::AddFn(const char * dstname_, const MemoryBuffer & xmlmap_)
{
	Owned<IClientAddRequest> req =  createAddRequest();
	req->setDstname(dstname_);
	req->setXmlmap(xmlmap_);
	return Add(req.get());
}

//------ method AddRemote ---------

IClientAddRemoteRequest * CClientWsDfu::createAddRemoteRequest()
{
	CAddRemoteRequest* request = new CAddRemoteRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientAddRemoteResponse * CClientWsDfu::AddRemote(IClientAddRemoteRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CAddRemoteRequest* esprequest = static_cast<CAddRemoteRequest*>(request);
	CAddRemoteResponse* espresponse = new CAddRemoteResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_AddRemote(IClientAddRemoteRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CAddRemoteRequest* esprequest = static_cast<CAddRemoteRequest*>(request);
	esprequest->setMethod("AddRemote");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientAddRemoteResponse *CClientWsDfu::AddRemoteFn(const char * dstname_, const char * srcname_, const char * srcdali_, const char * srcusername_, const char * srcpassword_)
{
	Owned<IClientAddRemoteRequest> req =  createAddRemoteRequest();
	req->setDstname(dstname_);
	req->setSrcname(srcname_);
	req->setSrcdali(srcdali_);
	req->setSrcusername(srcusername_);
	req->setSrcpassword(srcpassword_);
	return AddRemote(req.get());
}

//------ method AddtoSuperfile ---------

IClientAddtoSuperfileRequest * CClientWsDfu::createAddtoSuperfileRequest()
{
	CAddtoSuperfileRequest* request = new CAddtoSuperfileRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientAddtoSuperfileResponse * CClientWsDfu::AddtoSuperfile(IClientAddtoSuperfileRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CAddtoSuperfileRequest* esprequest = static_cast<CAddtoSuperfileRequest*>(request);
	CAddtoSuperfileResponse* espresponse = new CAddtoSuperfileResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_AddtoSuperfile(IClientAddtoSuperfileRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CAddtoSuperfileRequest* esprequest = static_cast<CAddtoSuperfileRequest*>(request);
	esprequest->setMethod("AddtoSuperfile");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientAddtoSuperfileResponse *CClientWsDfu::AddtoSuperfileFn(const char * Superfile_, const char * Subfiles_, StringArray &names_, bool ExistingFile_, const char * BackToPage_)
{
	Owned<IClientAddtoSuperfileRequest> req =  createAddtoSuperfileRequest();
	req->setSuperfile(Superfile_);
	req->setSubfiles(Subfiles_);
	req->setNames(names_);
	req->setExistingFile(ExistingFile_);
	req->setBackToPage(BackToPage_);
	return AddtoSuperfile(req.get());
}

//------ method DFUArrayAction ---------

IClientDFUArrayActionRequest * CClientWsDfu::createDFUArrayActionRequest()
{
	CDFUArrayActionRequest* request = new CDFUArrayActionRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUArrayActionResponse * CClientWsDfu::DFUArrayAction(IClientDFUArrayActionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUArrayActionRequest* esprequest = static_cast<CDFUArrayActionRequest*>(request);
	CDFUArrayActionResponse* espresponse = new CDFUArrayActionResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUArrayAction(IClientDFUArrayActionRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUArrayActionRequest* esprequest = static_cast<CDFUArrayActionRequest*>(request);
	esprequest->setMethod("DFUArrayAction");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUArrayActionResponse *CClientWsDfu::DFUArrayActionFn(CDFUArrayActions Type_, bool NoDelete_, const char * BackToPage_, StringArray &LogicalFiles_, bool removeFromSuperfiles_, bool removeRecursively_)
{
	Owned<IClientDFUArrayActionRequest> req =  createDFUArrayActionRequest();
	req->setType(Type_);
	req->setNoDelete(NoDelete_);
	req->setBackToPage(BackToPage_);
	req->setLogicalFiles(LogicalFiles_);
	req->setRemoveFromSuperfiles(removeFromSuperfiles_);
	req->setRemoveRecursively(removeRecursively_);
	return DFUArrayAction(req.get());
}

//------ method DFUBrowseData ---------

IClientDFUBrowseDataRequest * CClientWsDfu::createDFUBrowseDataRequest()
{
	CDFUBrowseDataRequest* request = new CDFUBrowseDataRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUBrowseDataResponse * CClientWsDfu::DFUBrowseData(IClientDFUBrowseDataRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUBrowseDataRequest* esprequest = static_cast<CDFUBrowseDataRequest*>(request);
	CDFUBrowseDataResponse* espresponse = new CDFUBrowseDataResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUBrowseData(IClientDFUBrowseDataRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUBrowseDataRequest* esprequest = static_cast<CDFUBrowseDataRequest*>(request);
	esprequest->setMethod("DFUBrowseData");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUBrowseDataResponse *CClientWsDfu::DFUBrowseDataFn(const char * LogicalName_, const char * FilterBy_, const char * ShowColumns_, bool SchemaOnly_, __int64 StartForGoback_, int CountForGoback_, int ChooseFile_, const char * Cluster_, const char * ClusterType_, const char * ParentName_, __int64 Start_, int Count_, bool DisableUppercaseTranslation_)
{
	Owned<IClientDFUBrowseDataRequest> req =  createDFUBrowseDataRequest();
	req->setLogicalName(LogicalName_);
	req->setFilterBy(FilterBy_);
	req->setShowColumns(ShowColumns_);
	req->setSchemaOnly(SchemaOnly_);
	req->setStartForGoback(StartForGoback_);
	req->setCountForGoback(CountForGoback_);
	req->setChooseFile(ChooseFile_);
	req->setCluster(Cluster_);
	req->setClusterType(ClusterType_);
	req->setParentName(ParentName_);
	req->setStart(Start_);
	req->setCount(Count_);
	req->setDisableUppercaseTranslation(DisableUppercaseTranslation_);
	return DFUBrowseData(req.get());
}

//------ method DFUDefFile ---------

IClientDFUDefFileRequest * CClientWsDfu::createDFUDefFileRequest()
{
	CDFUDefFileRequest* request = new CDFUDefFileRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUDefFileResponse * CClientWsDfu::DFUDefFile(IClientDFUDefFileRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUDefFileRequest* esprequest = static_cast<CDFUDefFileRequest*>(request);
	CDFUDefFileResponse* espresponse = new CDFUDefFileResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUDefFile(IClientDFUDefFileRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUDefFileRequest* esprequest = static_cast<CDFUDefFileRequest*>(request);
	esprequest->setMethod("DFUDefFile");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUDefFileResponse *CClientWsDfu::DFUDefFileFn(const char * Name_, CDFUDefFileFormat Format_)
{
	Owned<IClientDFUDefFileRequest> req =  createDFUDefFileRequest();
	req->setName(Name_);
	req->setFormat(Format_);
	return DFUDefFile(req.get());
}

//------ method DFUFileAccess ---------

IClientDFUFileAccessRequest * CClientWsDfu::createDFUFileAccessRequest()
{
	CDFUFileAccessRequest* request = new CDFUFileAccessRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUFileAccessResponse * CClientWsDfu::DFUFileAccess(IClientDFUFileAccessRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileAccessRequest* esprequest = static_cast<CDFUFileAccessRequest*>(request);
	CDFUFileAccessResponse* espresponse = new CDFUFileAccessResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUFileAccess(IClientDFUFileAccessRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileAccessRequest* esprequest = static_cast<CDFUFileAccessRequest*>(request);
	esprequest->setMethod("DFUFileAccess");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUFileAccessResponse *CClientWsDfu::DFUFileAccessFn(IConstDFUFileAccessRequestBase &RequestBase_)
{
	Owned<IClientDFUFileAccessRequest> req =  createDFUFileAccessRequest();
	req->setRequestBase(RequestBase_);
	return DFUFileAccess(req.get());
}

//------ method DFUFileAccessV2 ---------

IClientDFUFileAccessV2Request * CClientWsDfu::createDFUFileAccessV2Request()
{
	CDFUFileAccessV2Request* request = new CDFUFileAccessV2Request("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUFileAccessResponse * CClientWsDfu::DFUFileAccessV2(IClientDFUFileAccessV2Request *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileAccessV2Request* esprequest = static_cast<CDFUFileAccessV2Request*>(request);
	CDFUFileAccessResponse* espresponse = new CDFUFileAccessResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUFileAccessV2(IClientDFUFileAccessV2Request *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileAccessV2Request* esprequest = static_cast<CDFUFileAccessV2Request*>(request);
	esprequest->setMethod("DFUFileAccessV2");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUFileAccessResponse *CClientWsDfu::DFUFileAccessV2Fn(const char * Name_, const char * Cluster_, const char * RequestId_, int ExpirySeconds_, bool ReturnTextResponse_)
{
	Owned<IClientDFUFileAccessV2Request> req =  createDFUFileAccessV2Request();
	req->setName(Name_);
	req->setCluster(Cluster_);
	req->setRequestId(RequestId_);
	req->setExpirySeconds(ExpirySeconds_);
	req->setReturnTextResponse(ReturnTextResponse_);
	return DFUFileAccessV2(req.get());
}

//------ method DFUFileCreate ---------

IClientDFUFileCreateRequest * CClientWsDfu::createDFUFileCreateRequest()
{
	CDFUFileCreateRequest* request = new CDFUFileCreateRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUFileCreateResponse * CClientWsDfu::DFUFileCreate(IClientDFUFileCreateRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileCreateRequest* esprequest = static_cast<CDFUFileCreateRequest*>(request);
	CDFUFileCreateResponse* espresponse = new CDFUFileCreateResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUFileCreate(IClientDFUFileCreateRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileCreateRequest* esprequest = static_cast<CDFUFileCreateRequest*>(request);
	esprequest->setMethod("DFUFileCreate");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUFileCreateResponse *CClientWsDfu::DFUFileCreateFn(const char * ECLRecordDefinition_, StringArray &PartLocations_, IConstDFUFileAccessRequestBase &RequestBase_)
{
	Owned<IClientDFUFileCreateRequest> req =  createDFUFileCreateRequest();
	req->setECLRecordDefinition(ECLRecordDefinition_);
	req->setPartLocations(PartLocations_);
	req->setRequestBase(RequestBase_);
	return DFUFileCreate(req.get());
}

//------ method DFUFileCreateV2 ---------

IClientDFUFileCreateV2Request * CClientWsDfu::createDFUFileCreateV2Request()
{
	CDFUFileCreateV2Request* request = new CDFUFileCreateV2Request("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUFileCreateResponse * CClientWsDfu::DFUFileCreateV2(IClientDFUFileCreateV2Request *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileCreateV2Request* esprequest = static_cast<CDFUFileCreateV2Request*>(request);
	CDFUFileCreateResponse* espresponse = new CDFUFileCreateResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUFileCreateV2(IClientDFUFileCreateV2Request *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileCreateV2Request* esprequest = static_cast<CDFUFileCreateV2Request*>(request);
	esprequest->setMethod("DFUFileCreateV2");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUFileCreateResponse *CClientWsDfu::DFUFileCreateV2Fn(const char * Name_, const char * Cluster_, CDFUFileType Type_, const char * ECLRecordDefinition_, const char * RequestId_, int ExpirySeconds_, bool ReturnTextResponse_, bool Compressed_)
{
	Owned<IClientDFUFileCreateV2Request> req =  createDFUFileCreateV2Request();
	req->setName(Name_);
	req->setCluster(Cluster_);
	req->setType(Type_);
	req->setECLRecordDefinition(ECLRecordDefinition_);
	req->setRequestId(RequestId_);
	req->setExpirySeconds(ExpirySeconds_);
	req->setReturnTextResponse(ReturnTextResponse_);
	req->setCompressed(Compressed_);
	return DFUFileCreateV2(req.get());
}

//------ method DFUFilePublish ---------

IClientDFUFilePublishRequest * CClientWsDfu::createDFUFilePublishRequest()
{
	CDFUFilePublishRequest* request = new CDFUFilePublishRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUFilePublishResponse * CClientWsDfu::DFUFilePublish(IClientDFUFilePublishRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFilePublishRequest* esprequest = static_cast<CDFUFilePublishRequest*>(request);
	CDFUFilePublishResponse* espresponse = new CDFUFilePublishResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUFilePublish(IClientDFUFilePublishRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFilePublishRequest* esprequest = static_cast<CDFUFilePublishRequest*>(request);
	esprequest->setMethod("DFUFilePublish");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUFilePublishResponse *CClientWsDfu::DFUFilePublishFn(const char * FileId_, bool Overwrite_, const MemoryBuffer & FileDescriptorBlob_, const char * ECLRecordDefinition_, __int64 RecordCount_, __int64 FileSize_)
{
	Owned<IClientDFUFilePublishRequest> req =  createDFUFilePublishRequest();
	req->setFileId(FileId_);
	req->setOverwrite(Overwrite_);
	req->setFileDescriptorBlob(FileDescriptorBlob_);
	req->setECLRecordDefinition(ECLRecordDefinition_);
	req->setRecordCount(RecordCount_);
	req->setFileSize(FileSize_);
	return DFUFilePublish(req.get());
}

//------ method DFUFileView ---------

IClientDFUFileViewRequest * CClientWsDfu::createDFUFileViewRequest()
{
	CDFUFileViewRequest* request = new CDFUFileViewRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUFileViewResponse * CClientWsDfu::DFUFileView(IClientDFUFileViewRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileViewRequest* esprequest = static_cast<CDFUFileViewRequest*>(request);
	CDFUFileViewResponse* espresponse = new CDFUFileViewResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUFileView(IClientDFUFileViewRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUFileViewRequest* esprequest = static_cast<CDFUFileViewRequest*>(request);
	esprequest->setMethod("DFUFileView");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUFileViewResponse *CClientWsDfu::DFUFileViewFn(const char * Scope_, bool IncludeSuperOwner_)
{
	Owned<IClientDFUFileViewRequest> req =  createDFUFileViewRequest();
	req->setScope(Scope_);
	req->setIncludeSuperOwner(IncludeSuperOwner_);
	return DFUFileView(req.get());
}

//------ method DFUGetDataColumns ---------

IClientDFUGetDataColumnsRequest * CClientWsDfu::createDFUGetDataColumnsRequest()
{
	CDFUGetDataColumnsRequest* request = new CDFUGetDataColumnsRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUGetDataColumnsResponse * CClientWsDfu::DFUGetDataColumns(IClientDFUGetDataColumnsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUGetDataColumnsRequest* esprequest = static_cast<CDFUGetDataColumnsRequest*>(request);
	CDFUGetDataColumnsResponse* espresponse = new CDFUGetDataColumnsResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUGetDataColumns(IClientDFUGetDataColumnsRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUGetDataColumnsRequest* esprequest = static_cast<CDFUGetDataColumnsRequest*>(request);
	esprequest->setMethod("DFUGetDataColumns");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUGetDataColumnsResponse *CClientWsDfu::DFUGetDataColumnsFn(const char * OpenLogicalName_, const char * LogicalName_, const char * FilterBy_, const char * ShowColumns_, int ChooseFile_, const char * Cluster_, const char * ClusterType_, __int64 StartIndex_, __int64 EndIndex_)
{
	Owned<IClientDFUGetDataColumnsRequest> req =  createDFUGetDataColumnsRequest();
	req->setOpenLogicalName(OpenLogicalName_);
	req->setLogicalName(LogicalName_);
	req->setFilterBy(FilterBy_);
	req->setShowColumns(ShowColumns_);
	req->setChooseFile(ChooseFile_);
	req->setCluster(Cluster_);
	req->setClusterType(ClusterType_);
	req->setStartIndex(StartIndex_);
	req->setEndIndex(EndIndex_);
	return DFUGetDataColumns(req.get());
}

//------ method DFUGetFileMetaData ---------

IClientDFUGetFileMetaDataRequest * CClientWsDfu::createDFUGetFileMetaDataRequest()
{
	CDFUGetFileMetaDataRequest* request = new CDFUGetFileMetaDataRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUGetFileMetaDataResponse * CClientWsDfu::DFUGetFileMetaData(IClientDFUGetFileMetaDataRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUGetFileMetaDataRequest* esprequest = static_cast<CDFUGetFileMetaDataRequest*>(request);
	CDFUGetFileMetaDataResponse* espresponse = new CDFUGetFileMetaDataResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUGetFileMetaData(IClientDFUGetFileMetaDataRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUGetFileMetaDataRequest* esprequest = static_cast<CDFUGetFileMetaDataRequest*>(request);
	esprequest->setMethod("DFUGetFileMetaData");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUGetFileMetaDataResponse *CClientWsDfu::DFUGetFileMetaDataFn(const char * LogicalFileName_, const char * ClusterName_, bool IncludeXmlSchema_, bool AddHeaderInXmlSchema_, bool IncludeXmlXPathSchema_, bool AddHeaderInXmlXPathSchema_)
{
	Owned<IClientDFUGetFileMetaDataRequest> req =  createDFUGetFileMetaDataRequest();
	req->setLogicalFileName(LogicalFileName_);
	req->setClusterName(ClusterName_);
	req->setIncludeXmlSchema(IncludeXmlSchema_);
	req->setAddHeaderInXmlSchema(AddHeaderInXmlSchema_);
	req->setIncludeXmlXPathSchema(IncludeXmlXPathSchema_);
	req->setAddHeaderInXmlXPathSchema(AddHeaderInXmlXPathSchema_);
	return DFUGetFileMetaData(req.get());
}

//------ method DFUInfo ---------

IClientDFUInfoRequest * CClientWsDfu::createDFUInfoRequest()
{
	CDFUInfoRequest* request = new CDFUInfoRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUInfoResponse * CClientWsDfu::DFUInfo(IClientDFUInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUInfoRequest* esprequest = static_cast<CDFUInfoRequest*>(request);
	CDFUInfoResponse* espresponse = new CDFUInfoResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUInfo(IClientDFUInfoRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUInfoRequest* esprequest = static_cast<CDFUInfoRequest*>(request);
	esprequest->setMethod("DFUInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUInfoResponse *CClientWsDfu::DFUInfoFn(const char * Name_, const char * Cluster_, bool UpdateDescription_, const char * QuerySet_, const char * Query_, const char * FileName_, const char * FileDesc_, bool IncludeJsonTypeInfo_, bool IncludeBinTypeInfo_, CDFUChangeProtection Protect_)
{
	Owned<IClientDFUInfoRequest> req =  createDFUInfoRequest();
	req->setName(Name_);
	req->setCluster(Cluster_);
	req->setUpdateDescription(UpdateDescription_);
	req->setQuerySet(QuerySet_);
	req->setQuery(Query_);
	req->setFileName(FileName_);
	req->setFileDesc(FileDesc_);
	req->setIncludeJsonTypeInfo(IncludeJsonTypeInfo_);
	req->setIncludeBinTypeInfo(IncludeBinTypeInfo_);
	req->setProtect(Protect_);
	return DFUInfo(req.get());
}

//------ method DFUQuery ---------

IClientDFUQueryRequest * CClientWsDfu::createDFUQueryRequest()
{
	CDFUQueryRequest* request = new CDFUQueryRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUQueryResponse * CClientWsDfu::DFUQuery(IClientDFUQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUQueryRequest* esprequest = static_cast<CDFUQueryRequest*>(request);
	CDFUQueryResponse* espresponse = new CDFUQueryResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUQuery(IClientDFUQueryRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUQueryRequest* esprequest = static_cast<CDFUQueryRequest*>(request);
	esprequest->setMethod("DFUQuery");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUQueryResponse *CClientWsDfu::DFUQueryFn(const char * Prefix_, const char * ClusterName_, const char * NodeGroup_, const char * ContentType_, const char * LogicalName_, const char * Owner_, const char * StartDate_, const char * EndDate_, const char * FileType_, __int64 FileSizeFrom_, __int64 FileSizeTo_, int FirstN_, const char * FirstNType_, int PageSize_, int PageStartFrom_, const char * Sortby_, bool Descending_, bool OneLevelDirFileReturn_, __int64 CacheHint_, int MaxNumberOfFiles_, bool IncludeSuperOwner_)
{
	Owned<IClientDFUQueryRequest> req =  createDFUQueryRequest();
	req->setPrefix(Prefix_);
	req->setClusterName(ClusterName_);
	req->setNodeGroup(NodeGroup_);
	req->setContentType(ContentType_);
	req->setLogicalName(LogicalName_);
	req->setOwner(Owner_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setFileType(FileType_);
	req->setFileSizeFrom(FileSizeFrom_);
	req->setFileSizeTo(FileSizeTo_);
	req->setFirstN(FirstN_);
	req->setFirstNType(FirstNType_);
	req->setPageSize(PageSize_);
	req->setPageStartFrom(PageStartFrom_);
	req->setSortby(Sortby_);
	req->setDescending(Descending_);
	req->setOneLevelDirFileReturn(OneLevelDirFileReturn_);
	req->setCacheHint(CacheHint_);
	req->setMaxNumberOfFiles(MaxNumberOfFiles_);
	req->setIncludeSuperOwner(IncludeSuperOwner_);
	return DFUQuery(req.get());
}

//------ method DFURecordTypeInfo ---------

IClientDFURecordTypeInfoRequest * CClientWsDfu::createDFURecordTypeInfoRequest()
{
	CDFURecordTypeInfoRequest* request = new CDFURecordTypeInfoRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFURecordTypeInfoResponse * CClientWsDfu::DFURecordTypeInfo(IClientDFURecordTypeInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFURecordTypeInfoRequest* esprequest = static_cast<CDFURecordTypeInfoRequest*>(request);
	CDFURecordTypeInfoResponse* espresponse = new CDFURecordTypeInfoResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFURecordTypeInfo(IClientDFURecordTypeInfoRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFURecordTypeInfoRequest* esprequest = static_cast<CDFURecordTypeInfoRequest*>(request);
	esprequest->setMethod("DFURecordTypeInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFURecordTypeInfoResponse *CClientWsDfu::DFURecordTypeInfoFn(const char * Name_, bool IncludeJsonTypeInfo_, bool IncludeBinTypeInfo_)
{
	Owned<IClientDFURecordTypeInfoRequest> req =  createDFURecordTypeInfoRequest();
	req->setName(Name_);
	req->setIncludeJsonTypeInfo(IncludeJsonTypeInfo_);
	req->setIncludeBinTypeInfo(IncludeBinTypeInfo_);
	return DFURecordTypeInfo(req.get());
}

//------ method DFUSearch ---------

IClientDFUSearchRequest * CClientWsDfu::createDFUSearchRequest()
{
	CDFUSearchRequest* request = new CDFUSearchRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUSearchResponse * CClientWsDfu::DFUSearch(IClientDFUSearchRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUSearchRequest* esprequest = static_cast<CDFUSearchRequest*>(request);
	CDFUSearchResponse* espresponse = new CDFUSearchResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUSearch(IClientDFUSearchRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUSearchRequest* esprequest = static_cast<CDFUSearchRequest*>(request);
	esprequest->setMethod("DFUSearch");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUSearchResponse *CClientWsDfu::DFUSearchFn(const char * ShowExample_)
{
	Owned<IClientDFUSearchRequest> req =  createDFUSearchRequest();
	req->setShowExample(ShowExample_);
	return DFUSearch(req.get());
}

//------ method DFUSearchData ---------

IClientDFUSearchDataRequest * CClientWsDfu::createDFUSearchDataRequest()
{
	CDFUSearchDataRequest* request = new CDFUSearchDataRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUSearchDataResponse * CClientWsDfu::DFUSearchData(IClientDFUSearchDataRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUSearchDataRequest* esprequest = static_cast<CDFUSearchDataRequest*>(request);
	CDFUSearchDataResponse* espresponse = new CDFUSearchDataResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUSearchData(IClientDFUSearchDataRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUSearchDataRequest* esprequest = static_cast<CDFUSearchDataRequest*>(request);
	esprequest->setMethod("DFUSearchData");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUSearchDataResponse *CClientWsDfu::DFUSearchDataFn(const char * Cluster_, const char * ClusterType_, const char * OpenLogicalName_, const char * FilterBy_, const char * ShowColumns_, int ChooseFile_, __int64 StartIndex_, __int64 EndIndex_, const char * LogicalName_, const char * ParentName_, __int64 StartForGoback_, int CountForGoback_, __int64 Start_, int Count_, const char * File_, const char * Key_, bool SchemaOnly_, bool RoxieSelections_, bool DisableUppercaseTranslation_, const char * SelectedKey_)
{
	Owned<IClientDFUSearchDataRequest> req =  createDFUSearchDataRequest();
	req->setCluster(Cluster_);
	req->setClusterType(ClusterType_);
	req->setOpenLogicalName(OpenLogicalName_);
	req->setFilterBy(FilterBy_);
	req->setShowColumns(ShowColumns_);
	req->setChooseFile(ChooseFile_);
	req->setStartIndex(StartIndex_);
	req->setEndIndex(EndIndex_);
	req->setLogicalName(LogicalName_);
	req->setParentName(ParentName_);
	req->setStartForGoback(StartForGoback_);
	req->setCountForGoback(CountForGoback_);
	req->setStart(Start_);
	req->setCount(Count_);
	req->setFile(File_);
	req->setKey(Key_);
	req->setSchemaOnly(SchemaOnly_);
	req->setRoxieSelections(RoxieSelections_);
	req->setDisableUppercaseTranslation(DisableUppercaseTranslation_);
	req->setSelectedKey(SelectedKey_);
	return DFUSearchData(req.get());
}

//------ method DFUSpace ---------

IClientDFUSpaceRequest * CClientWsDfu::createDFUSpaceRequest()
{
	CDFUSpaceRequest* request = new CDFUSpaceRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDFUSpaceResponse * CClientWsDfu::DFUSpace(IClientDFUSpaceRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUSpaceRequest* esprequest = static_cast<CDFUSpaceRequest*>(request);
	CDFUSpaceResponse* espresponse = new CDFUSpaceResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_DFUSpace(IClientDFUSpaceRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDFUSpaceRequest* esprequest = static_cast<CDFUSpaceRequest*>(request);
	esprequest->setMethod("DFUSpace");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDFUSpaceResponse *CClientWsDfu::DFUSpaceFn(const char * CountBy_, const char * ScopeUnder_, const char * OwnerUnder_, const char * Interval_, const char * StartDate_, const char * EndDate_)
{
	Owned<IClientDFUSpaceRequest> req =  createDFUSpaceRequest();
	req->setCountBy(CountBy_);
	req->setScopeUnder(ScopeUnder_);
	req->setOwnerUnder(OwnerUnder_);
	req->setInterval(Interval_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	return DFUSpace(req.get());
}

//------ method EclRecordTypeInfo ---------

IClientEclRecordTypeInfoRequest * CClientWsDfu::createEclRecordTypeInfoRequest()
{
	CEclRecordTypeInfoRequest* request = new CEclRecordTypeInfoRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientEclRecordTypeInfoResponse * CClientWsDfu::EclRecordTypeInfo(IClientEclRecordTypeInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CEclRecordTypeInfoRequest* esprequest = static_cast<CEclRecordTypeInfoRequest*>(request);
	CEclRecordTypeInfoResponse* espresponse = new CEclRecordTypeInfoResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_EclRecordTypeInfo(IClientEclRecordTypeInfoRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CEclRecordTypeInfoRequest* esprequest = static_cast<CEclRecordTypeInfoRequest*>(request);
	esprequest->setMethod("EclRecordTypeInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientEclRecordTypeInfoResponse *CClientWsDfu::EclRecordTypeInfoFn(const char * Ecl_, bool IncludeJsonTypeInfo_, bool IncludeBinTypeInfo_)
{
	Owned<IClientEclRecordTypeInfoRequest> req =  createEclRecordTypeInfoRequest();
	req->setEcl(Ecl_);
	req->setIncludeJsonTypeInfo(IncludeJsonTypeInfo_);
	req->setIncludeBinTypeInfo(IncludeBinTypeInfo_);
	return EclRecordTypeInfo(req.get());
}

//------ method EraseHistory ---------

IClientEraseHistoryRequest * CClientWsDfu::createEraseHistoryRequest()
{
	CEraseHistoryRequest* request = new CEraseHistoryRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientEraseHistoryResponse * CClientWsDfu::EraseHistory(IClientEraseHistoryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CEraseHistoryRequest* esprequest = static_cast<CEraseHistoryRequest*>(request);
	CEraseHistoryResponse* espresponse = new CEraseHistoryResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_EraseHistory(IClientEraseHistoryRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CEraseHistoryRequest* esprequest = static_cast<CEraseHistoryRequest*>(request);
	esprequest->setMethod("EraseHistory");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientEraseHistoryResponse *CClientWsDfu::EraseHistoryFn(const char * Name_)
{
	Owned<IClientEraseHistoryRequest> req =  createEraseHistoryRequest();
	req->setName(Name_);
	return EraseHistory(req.get());
}

//------ method ListHistory ---------

IClientListHistoryRequest * CClientWsDfu::createListHistoryRequest()
{
	CListHistoryRequest* request = new CListHistoryRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientListHistoryResponse * CClientWsDfu::ListHistory(IClientListHistoryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListHistoryRequest* esprequest = static_cast<CListHistoryRequest*>(request);
	CListHistoryResponse* espresponse = new CListHistoryResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_ListHistory(IClientListHistoryRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListHistoryRequest* esprequest = static_cast<CListHistoryRequest*>(request);
	esprequest->setMethod("ListHistory");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientListHistoryResponse *CClientWsDfu::ListHistoryFn(const char * Name_)
{
	Owned<IClientListHistoryRequest> req =  createListHistoryRequest();
	req->setName(Name_);
	return ListHistory(req.get());
}

//------ method Ping ---------

IClientWsDfuPingRequest * CClientWsDfu::createPingRequest()
{
	CWsDfuPingRequest* request = new CWsDfuPingRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientWsDfuPingResponse * CClientWsDfu::Ping(IClientWsDfuPingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsDfuPingRequest* esprequest = static_cast<CWsDfuPingRequest*>(request);
	CWsDfuPingResponse* espresponse = new CWsDfuPingResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_Ping(IClientWsDfuPingRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsDfuPingRequest* esprequest = static_cast<CWsDfuPingRequest*>(request);
	esprequest->setMethod("Ping");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWsDfuPingResponse *CClientWsDfu::PingFn()
{
	Owned<IClientWsDfuPingRequest> req =  createPingRequest();
	return Ping(req.get());
}

//------ method Savexml ---------

IClientSavexmlRequest * CClientWsDfu::createSavexmlRequest()
{
	CSavexmlRequest* request = new CSavexmlRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientSavexmlResponse * CClientWsDfu::Savexml(IClientSavexmlRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CSavexmlRequest* esprequest = static_cast<CSavexmlRequest*>(request);
	CSavexmlResponse* espresponse = new CSavexmlResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_Savexml(IClientSavexmlRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CSavexmlRequest* esprequest = static_cast<CSavexmlRequest*>(request);
	esprequest->setMethod("Savexml");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientSavexmlResponse *CClientWsDfu::SavexmlFn(const char * name_)
{
	Owned<IClientSavexmlRequest> req =  createSavexmlRequest();
	req->setName(name_);
	return Savexml(req.get());
}

//------ method SuperfileAction ---------

IClientSuperfileActionRequest * CClientWsDfu::createSuperfileActionRequest()
{
	CSuperfileActionRequest* request = new CSuperfileActionRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientSuperfileActionResponse * CClientWsDfu::SuperfileAction(IClientSuperfileActionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CSuperfileActionRequest* esprequest = static_cast<CSuperfileActionRequest*>(request);
	CSuperfileActionResponse* espresponse = new CSuperfileActionResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_SuperfileAction(IClientSuperfileActionRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CSuperfileActionRequest* esprequest = static_cast<CSuperfileActionRequest*>(request);
	esprequest->setMethod("SuperfileAction");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientSuperfileActionResponse *CClientWsDfu::SuperfileActionFn(const char * action_, const char * superfile_, StringArray &subfiles_, const char * before_, bool delete_, bool removeSuperfile_)
{
	Owned<IClientSuperfileActionRequest> req =  createSuperfileActionRequest();
	req->setAction(action_);
	req->setSuperfile(superfile_);
	req->setSubfiles(subfiles_);
	req->setBefore(before_);
	req->setDelete(delete_);
	req->setRemoveSuperfile(removeSuperfile_);
	return SuperfileAction(req.get());
}

//------ method SuperfileList ---------

IClientSuperfileListRequest * CClientWsDfu::createSuperfileListRequest()
{
	CSuperfileListRequest* request = new CSuperfileListRequest("WsDfu");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientSuperfileListResponse * CClientWsDfu::SuperfileList(IClientSuperfileListRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CSuperfileListRequest* esprequest = static_cast<CSuperfileListRequest*>(request);
	CSuperfileListResponse* espresponse = new CSuperfileListResponse("WsDfu");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsDfu::async_SuperfileList(IClientSuperfileListRequest *request, IClientWsDfuEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CSuperfileListRequest* esprequest = static_cast<CSuperfileListRequest*>(request);
	esprequest->setMethod("SuperfileList");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsDfu::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientSuperfileListResponse *CClientWsDfu::SuperfileListFn(const char * superfile_)
{
	Owned<IClientSuperfileListRequest> req =  createSuperfileListRequest();
	req->setSuperfile(superfile_);
	return SuperfileList(req.get());
}

int CClientWsDfu::transferThunkEvent(void *data)
{
	IRpcResponseBinding *response = (IRpcResponseBinding *)data;
	if (response!=NULL)
	{
		IClientWsDfuEvents *eventSink = (IClientWsDfuEvents *)response->getEventSink();
		response->lock();

		if (stricmp(response->getMethod(), "Add")==0)
		{
			IClientAddResponse* icresp = dynamic_cast<IClientAddResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onAddComplete(icresp, response->queryState());
				else
					eventSink->onAddError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "AddRemote")==0)
		{
			IClientAddRemoteResponse* icresp = dynamic_cast<IClientAddRemoteResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onAddRemoteComplete(icresp, response->queryState());
				else
					eventSink->onAddRemoteError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "AddtoSuperfile")==0)
		{
			IClientAddtoSuperfileResponse* icresp = dynamic_cast<IClientAddtoSuperfileResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onAddtoSuperfileComplete(icresp, response->queryState());
				else
					eventSink->onAddtoSuperfileError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUArrayAction")==0)
		{
			IClientDFUArrayActionResponse* icresp = dynamic_cast<IClientDFUArrayActionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUArrayActionComplete(icresp, response->queryState());
				else
					eventSink->onDFUArrayActionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUBrowseData")==0)
		{
			IClientDFUBrowseDataResponse* icresp = dynamic_cast<IClientDFUBrowseDataResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUBrowseDataComplete(icresp, response->queryState());
				else
					eventSink->onDFUBrowseDataError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUDefFile")==0)
		{
			IClientDFUDefFileResponse* icresp = dynamic_cast<IClientDFUDefFileResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUDefFileComplete(icresp, response->queryState());
				else
					eventSink->onDFUDefFileError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUFileAccess")==0)
		{
			IClientDFUFileAccessResponse* icresp = dynamic_cast<IClientDFUFileAccessResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUFileAccessComplete(icresp, response->queryState());
				else
					eventSink->onDFUFileAccessError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUFileAccessV2")==0)
		{
			IClientDFUFileAccessResponse* icresp = dynamic_cast<IClientDFUFileAccessResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUFileAccessV2Complete(icresp, response->queryState());
				else
					eventSink->onDFUFileAccessV2Error(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUFileCreate")==0)
		{
			IClientDFUFileCreateResponse* icresp = dynamic_cast<IClientDFUFileCreateResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUFileCreateComplete(icresp, response->queryState());
				else
					eventSink->onDFUFileCreateError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUFileCreateV2")==0)
		{
			IClientDFUFileCreateResponse* icresp = dynamic_cast<IClientDFUFileCreateResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUFileCreateV2Complete(icresp, response->queryState());
				else
					eventSink->onDFUFileCreateV2Error(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUFilePublish")==0)
		{
			IClientDFUFilePublishResponse* icresp = dynamic_cast<IClientDFUFilePublishResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUFilePublishComplete(icresp, response->queryState());
				else
					eventSink->onDFUFilePublishError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUFileView")==0)
		{
			IClientDFUFileViewResponse* icresp = dynamic_cast<IClientDFUFileViewResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUFileViewComplete(icresp, response->queryState());
				else
					eventSink->onDFUFileViewError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUGetDataColumns")==0)
		{
			IClientDFUGetDataColumnsResponse* icresp = dynamic_cast<IClientDFUGetDataColumnsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUGetDataColumnsComplete(icresp, response->queryState());
				else
					eventSink->onDFUGetDataColumnsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUGetFileMetaData")==0)
		{
			IClientDFUGetFileMetaDataResponse* icresp = dynamic_cast<IClientDFUGetFileMetaDataResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUGetFileMetaDataComplete(icresp, response->queryState());
				else
					eventSink->onDFUGetFileMetaDataError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUInfo")==0)
		{
			IClientDFUInfoResponse* icresp = dynamic_cast<IClientDFUInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUInfoComplete(icresp, response->queryState());
				else
					eventSink->onDFUInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUQuery")==0)
		{
			IClientDFUQueryResponse* icresp = dynamic_cast<IClientDFUQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUQueryComplete(icresp, response->queryState());
				else
					eventSink->onDFUQueryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFURecordTypeInfo")==0)
		{
			IClientDFURecordTypeInfoResponse* icresp = dynamic_cast<IClientDFURecordTypeInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFURecordTypeInfoComplete(icresp, response->queryState());
				else
					eventSink->onDFURecordTypeInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUSearch")==0)
		{
			IClientDFUSearchResponse* icresp = dynamic_cast<IClientDFUSearchResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUSearchComplete(icresp, response->queryState());
				else
					eventSink->onDFUSearchError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUSearchData")==0)
		{
			IClientDFUSearchDataResponse* icresp = dynamic_cast<IClientDFUSearchDataResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUSearchDataComplete(icresp, response->queryState());
				else
					eventSink->onDFUSearchDataError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DFUSpace")==0)
		{
			IClientDFUSpaceResponse* icresp = dynamic_cast<IClientDFUSpaceResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDFUSpaceComplete(icresp, response->queryState());
				else
					eventSink->onDFUSpaceError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "EclRecordTypeInfo")==0)
		{
			IClientEclRecordTypeInfoResponse* icresp = dynamic_cast<IClientEclRecordTypeInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onEclRecordTypeInfoComplete(icresp, response->queryState());
				else
					eventSink->onEclRecordTypeInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "EraseHistory")==0)
		{
			IClientEraseHistoryResponse* icresp = dynamic_cast<IClientEraseHistoryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onEraseHistoryComplete(icresp, response->queryState());
				else
					eventSink->onEraseHistoryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "ListHistory")==0)
		{
			IClientListHistoryResponse* icresp = dynamic_cast<IClientListHistoryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onListHistoryComplete(icresp, response->queryState());
				else
					eventSink->onListHistoryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "Ping")==0)
		{
			IClientWsDfuPingResponse* icresp = dynamic_cast<IClientWsDfuPingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onPingComplete(icresp, response->queryState());
				else
					eventSink->onPingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "Savexml")==0)
		{
			IClientSavexmlResponse* icresp = dynamic_cast<IClientSavexmlResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onSavexmlComplete(icresp, response->queryState());
				else
					eventSink->onSavexmlError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "SuperfileAction")==0)
		{
			IClientSuperfileActionResponse* icresp = dynamic_cast<IClientSuperfileActionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onSuperfileActionComplete(icresp, response->queryState());
				else
					eventSink->onSuperfileActionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "SuperfileList")==0)
		{
			IClientSuperfileListResponse* icresp = dynamic_cast<IClientSuperfileListResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onSuperfileListComplete(icresp, response->queryState());
				else
					eventSink->onSuperfileListError(icresp,response->queryState());
			}
		}
		response->unlock();
	}
	return 0;
}

static IRpcResponseBinding* createWsDfuResponseObject(IRpcRequestBinding *request)
{
	const char* method = request->getMethod();
	if (stricmp(method, "Add")==0)
		return new CAddResponse("WsDfu", request);
	if (stricmp(method, "AddRemote")==0)
		return new CAddRemoteResponse("WsDfu", request);
	if (stricmp(method, "AddtoSuperfile")==0)
		return new CAddtoSuperfileResponse("WsDfu", request);
	if (stricmp(method, "DFUArrayAction")==0)
		return new CDFUArrayActionResponse("WsDfu", request);
	if (stricmp(method, "DFUBrowseData")==0)
		return new CDFUBrowseDataResponse("WsDfu", request);
	if (stricmp(method, "DFUDefFile")==0)
		return new CDFUDefFileResponse("WsDfu", request);
	if (stricmp(method, "DFUFileAccess")==0)
		return new CDFUFileAccessResponse("WsDfu", request);
	if (stricmp(method, "DFUFileAccessV2")==0)
		return new CDFUFileAccessResponse("WsDfu", request);
	if (stricmp(method, "DFUFileCreate")==0)
		return new CDFUFileCreateResponse("WsDfu", request);
	if (stricmp(method, "DFUFileCreateV2")==0)
		return new CDFUFileCreateResponse("WsDfu", request);
	if (stricmp(method, "DFUFilePublish")==0)
		return new CDFUFilePublishResponse("WsDfu", request);
	if (stricmp(method, "DFUFileView")==0)
		return new CDFUFileViewResponse("WsDfu", request);
	if (stricmp(method, "DFUGetDataColumns")==0)
		return new CDFUGetDataColumnsResponse("WsDfu", request);
	if (stricmp(method, "DFUGetFileMetaData")==0)
		return new CDFUGetFileMetaDataResponse("WsDfu", request);
	if (stricmp(method, "DFUInfo")==0)
		return new CDFUInfoResponse("WsDfu", request);
	if (stricmp(method, "DFUQuery")==0)
		return new CDFUQueryResponse("WsDfu", request);
	if (stricmp(method, "DFURecordTypeInfo")==0)
		return new CDFURecordTypeInfoResponse("WsDfu", request);
	if (stricmp(method, "DFUSearch")==0)
		return new CDFUSearchResponse("WsDfu", request);
	if (stricmp(method, "DFUSearchData")==0)
		return new CDFUSearchDataResponse("WsDfu", request);
	if (stricmp(method, "DFUSpace")==0)
		return new CDFUSpaceResponse("WsDfu", request);
	if (stricmp(method, "EclRecordTypeInfo")==0)
		return new CEclRecordTypeInfoResponse("WsDfu", request);
	if (stricmp(method, "EraseHistory")==0)
		return new CEraseHistoryResponse("WsDfu", request);
	if (stricmp(method, "ListHistory")==0)
		return new CListHistoryResponse("WsDfu", request);
	if (stricmp(method, "Ping")==0)
		return new CWsDfuPingResponse("WsDfu", request);
	if (stricmp(method, "Savexml")==0)
		return new CSavexmlResponse("WsDfu", request);
	if (stricmp(method, "SuperfileAction")==0)
		return new CSuperfileActionResponse("WsDfu", request);
	if (stricmp(method, "SuperfileList")==0)
		return new CSuperfileListResponse("WsDfu", request);
	return NULL;
}

#ifdef _WIN32
void CClientWsDfu::espWorkerThread(void* data)
#else
void *CClientWsDfu::espWorkerThread(void *data)
#endif
{
	IRpcRequestBinding *request = (IRpcRequestBinding *) data;

	if (request != NULL)
	{
		request->lock();
		IRpcResponseBinding *response=createWsDfuResponseObject(request);
		if (response!=NULL)
		{
			try{
				request->post(*response);
			}
			catch(IException* ex){
				StringBuffer errorStr;
				ex->errorMessage(errorStr);
				ERRLOG("CClientWsDfu::espWorkerThread(%s)--Exception caught while posting async request: %s", request->getMethod(), errorStr.str());
				ex->Release();
			}
			catch(...){
				ERRLOG("Unknown exception caught while posting async request");
			}
		}
#ifdef USE_CLIENT_THREAD
		ThunkToClientThread(request->getThunkHandle(), transferThunkEvent, (void *)response);
#else
		transferThunkEvent((void *)response);
#endif
		request->unlock();
		if(request->queryState()!=NULL)
			request->queryState()->Release();

		if(response!=NULL)
			response->Release();

		request->Release();
	}
#if defined(_WIN32)
#else
	return (void *) 0 ;
#endif
}



extern "C" IClientWsDfu * createWsDfuClient() {  return new CClientWsDfu(); }


#endif //ws_dfu_ESPGEN_INCLUDED
