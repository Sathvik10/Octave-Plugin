// *** Source file generated by HIDL Version 1.3 from esp.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#include "esp.hpp"

// clarion interface stub for IEspStringIntMap 
class SCMCLWSTUB_IEspStringIntMap: public SCMStubBase, implements IEspStringIntMap // interface
	IEspStringIntMap &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspStringIntMap(IEspStringIntMap *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspStringIntMap() { _o.Release(); } 
	int _stdcall queryValue(const char * key)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspStringIntMap_queryValue;
		SCMCLW_INTRO_IEspStringIntMap_queryValue;
#endif
		int _return;
		_return = _o.queryValue(key);
#ifdef SCMCLW_OUTRO_IEspStringIntMap_queryValue;
		SCMCLW_OUTRO_IEspStringIntMap_queryValue;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setValue(const char * key, int value)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspStringIntMap_setValue;
		SCMCLW_INTRO_IEspStringIntMap_setValue;
#endif
		_o.setValue(key, value);
#ifdef SCMCLW_OUTRO_IEspStringIntMap_setValue;
		SCMCLW_OUTRO_IEspStringIntMap_setValue;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IHttpMessage 
class SCMCLWSTUB_IHttpMessage: public SCMStubBase, implements IHttpMessage // interface
	IHttpMessage &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IHttpMessage(IHttpMessage *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IHttpMessage() { _o.Release(); } 
	int _stdcall receive(IMultiException * me)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IHttpMessage_receive;
		SCMCLW_INTRO_IHttpMessage_receive;
#endif
		int _return;
		_return = _o.receive(me);
#ifdef SCMCLW_OUTRO_IHttpMessage_receive;
		SCMCLW_OUTRO_IHttpMessage_receive;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall receive(bool alwaysReadContent, IMultiException * me)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IHttpMessage_receive;
		SCMCLW_INTRO_IHttpMessage_receive;
#endif
		int _return;
		_return = _o.receive(alwaysReadContent, me);
#ifdef SCMCLW_OUTRO_IHttpMessage_receive;
		SCMCLW_OUTRO_IHttpMessage_receive;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall send()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IHttpMessage_send;
		SCMCLW_INTRO_IHttpMessage_send;
#endif
		int _return;
		_return = _o.send();
#ifdef SCMCLW_OUTRO_IHttpMessage_send;
		SCMCLW_OUTRO_IHttpMessage_send;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	StringBuffer & _stdcall getContent(StringBuffer & buf)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IHttpMessage_getContent;
		SCMCLW_INTRO_IHttpMessage_getContent;
#endif
		StringBuffer & _return;
		_return = _o.getContent(buf);
#ifdef SCMCLW_OUTRO_IHttpMessage_getContent;
		SCMCLW_OUTRO_IHttpMessage_getContent;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspPlugin 
class SCMCLWSTUB_IEspPlugin: public SCMStubBase, implements IEspPlugin // interface
	IEspPlugin &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspPlugin(IEspPlugin *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspPlugin() { _o.Release(); } 
	bool _stdcall isLoaded()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspPlugin_isLoaded;
		SCMCLW_INTRO_IEspPlugin_isLoaded;
#endif
		bool _return;
		_return = _o.isLoaded();
#ifdef SCMCLW_OUTRO_IEspPlugin_isLoaded;
		SCMCLW_OUTRO_IEspPlugin_isLoaded;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall load()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspPlugin_load;
		SCMCLW_INTRO_IEspPlugin_load;
#endif
		bool _return;
		_return = _o.load();
#ifdef SCMCLW_OUTRO_IEspPlugin_load;
		SCMCLW_OUTRO_IEspPlugin_load;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall unload()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspPlugin_unload;
		SCMCLW_INTRO_IEspPlugin_unload;
#endif
		_o.unload();
#ifdef SCMCLW_OUTRO_IEspPlugin_unload;
		SCMCLW_OUTRO_IEspPlugin_unload;
#endif
		SCMCLW_OUTRO;
	}
	void * _stdcall getProcAddress(const char * name)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspPlugin_getProcAddress;
		SCMCLW_INTRO_IEspPlugin_getProcAddress;
#endif
		void * _return;
		_return = _o.getProcAddress(name);
#ifdef SCMCLW_OUTRO_IEspPlugin_getProcAddress;
		SCMCLW_OUTRO_IEspPlugin_getProcAddress;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspPlugin_getName;
		SCMCLW_INTRO_IEspPlugin_getName;
#endif
		char * _return;
		_return = _o.getName();
#ifdef SCMCLW_OUTRO_IEspPlugin_getName;
		SCMCLW_OUTRO_IEspPlugin_getName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspProtocol 
class SCMCLWSTUB_IEspProtocol: public SCMStubBase, implements IEspProtocol // interface
	IEspProtocol &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspProtocol(IEspProtocol *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspProtocol() { _o.Release(); } 
	const char * _stdcall getProtocolName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocol_getProtocolName;
		SCMCLW_INTRO_IEspProtocol_getProtocolName;
#endif
		char * _return;
		_return = _o.getProtocolName();
#ifdef SCMCLW_OUTRO_IEspProtocol_getProtocolName;
		SCMCLW_OUTRO_IEspProtocol_getProtocolName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall addBindingMap(ISocket * sock, IEspRpcBinding * binding, bool isdefault)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocol_addBindingMap;
		SCMCLW_INTRO_IEspProtocol_addBindingMap;
#endif
		_o.addBindingMap(sock, binding, isdefault);
#ifdef SCMCLW_OUTRO_IEspProtocol_addBindingMap;
		SCMCLW_OUTRO_IEspProtocol_addBindingMap;
#endif
		SCMCLW_OUTRO;
	}
	int _stdcall removeBindingMap(int port, IEspRpcBinding * binding)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocol_removeBindingMap;
		SCMCLW_INTRO_IEspProtocol_removeBindingMap;
#endif
		int _return;
		_return = _o.removeBindingMap(port, binding);
#ifdef SCMCLW_OUTRO_IEspProtocol_removeBindingMap;
		SCMCLW_OUTRO_IEspProtocol_removeBindingMap;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall clearBindingMap()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocol_clearBindingMap;
		SCMCLW_INTRO_IEspProtocol_clearBindingMap;
#endif
		_o.clearBindingMap();
#ifdef SCMCLW_OUTRO_IEspProtocol_clearBindingMap;
		SCMCLW_OUTRO_IEspProtocol_clearBindingMap;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall init(IPropertyTree * cfg, const char * process, const char * protocol)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocol_init;
		SCMCLW_INTRO_IEspProtocol_init;
#endif
		_o.init(cfg, process, protocol);
#ifdef SCMCLW_OUTRO_IEspProtocol_init;
		SCMCLW_OUTRO_IEspProtocol_init;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setContainer(IEspContainer * container)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocol_setContainer;
		SCMCLW_INTRO_IEspProtocol_setContainer;
#endif
		_o.setContainer(container);
#ifdef SCMCLW_OUTRO_IEspProtocol_setContainer;
		SCMCLW_OUTRO_IEspProtocol_setContainer;
#endif
		SCMCLW_OUTRO;
	}
	int _stdcall countBindings(int port)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocol_countBindings;
		SCMCLW_INTRO_IEspProtocol_countBindings;
#endif
		int _return;
		_return = _o.countBindings(port);
#ifdef SCMCLW_OUTRO_IEspProtocol_countBindings;
		SCMCLW_OUTRO_IEspProtocol_countBindings;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspStruct 
class SCMCLWSTUB_IEspStruct: public SCMStubBase, implements IEspStruct // interface
	IEspStruct &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspStruct(IEspStruct *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspStruct() { _o.Release(); } 
};
// clarion interface stub for IEspRequest 
class SCMCLWSTUB_IEspRequest: public SCMStubBase, implements IEspRequest // interface
	IEspRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspRequest(IEspRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspRequest() { _o.Release(); } 
};
// clarion interface stub for IEspClientRpcSettings 
class SCMCLWSTUB_IEspClientRpcSettings: public SCMStubBase, implements IEspClientRpcSettings // interface
	IEspClientRpcSettings &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspClientRpcSettings(IEspClientRpcSettings *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspClientRpcSettings() { _o.Release(); } 
	void _stdcall setConnectTimeOutMs(unsigned val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspClientRpcSettings_setConnectTimeOutMs;
		SCMCLW_INTRO_IEspClientRpcSettings_setConnectTimeOutMs;
#endif
		_o.setConnectTimeOutMs(val);
#ifdef SCMCLW_OUTRO_IEspClientRpcSettings_setConnectTimeOutMs;
		SCMCLW_OUTRO_IEspClientRpcSettings_setConnectTimeOutMs;
#endif
		SCMCLW_OUTRO;
	}
	unsigned _stdcall getConnectTimeOutMs()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspClientRpcSettings_getConnectTimeOutMs;
		SCMCLW_INTRO_IEspClientRpcSettings_getConnectTimeOutMs;
#endif
		unsigned _return;
		_return = _o.getConnectTimeOutMs();
#ifdef SCMCLW_OUTRO_IEspClientRpcSettings_getConnectTimeOutMs;
		SCMCLW_OUTRO_IEspClientRpcSettings_getConnectTimeOutMs;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setReadTimeOutSecs(unsigned val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspClientRpcSettings_setReadTimeOutSecs;
		SCMCLW_INTRO_IEspClientRpcSettings_setReadTimeOutSecs;
#endif
		_o.setReadTimeOutSecs(val);
#ifdef SCMCLW_OUTRO_IEspClientRpcSettings_setReadTimeOutSecs;
		SCMCLW_OUTRO_IEspClientRpcSettings_setReadTimeOutSecs;
#endif
		SCMCLW_OUTRO;
	}
	unsigned _stdcall getReadTimeOutSecs()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspClientRpcSettings_getReadTimeOutSecs;
		SCMCLW_INTRO_IEspClientRpcSettings_getReadTimeOutSecs;
#endif
		unsigned _return;
		_return = _o.getReadTimeOutSecs();
#ifdef SCMCLW_OUTRO_IEspClientRpcSettings_getReadTimeOutSecs;
		SCMCLW_OUTRO_IEspClientRpcSettings_getReadTimeOutSecs;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspResponse 
class SCMCLWSTUB_IEspResponse: public SCMStubBase, implements IEspResponse // interface
	IEspResponse &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspResponse(IEspResponse *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspResponse() { _o.Release(); } 
	void _stdcall setRedirectUrl(const char * url)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspResponse_setRedirectUrl;
		SCMCLW_INTRO_IEspResponse_setRedirectUrl;
#endif
		_o.setRedirectUrl(url);
#ifdef SCMCLW_OUTRO_IEspResponse_setRedirectUrl;
		SCMCLW_OUTRO_IEspResponse_setRedirectUrl;
#endif
		SCMCLW_OUTRO;
	}
	const IMultiException & _stdcall getExceptions()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspResponse_getExceptions;
		SCMCLW_INTRO_IEspResponse_getExceptions;
#endif
		IMultiException & _return;
		_return = _o.getExceptions();
#ifdef SCMCLW_OUTRO_IEspResponse_getExceptions;
		SCMCLW_OUTRO_IEspResponse_getExceptions;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall noteException(IException & e)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspResponse_noteException;
		SCMCLW_INTRO_IEspResponse_noteException;
#endif
		_o.noteException(e);
#ifdef SCMCLW_OUTRO_IEspResponse_noteException;
		SCMCLW_OUTRO_IEspResponse_noteException;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IEspService 
class SCMCLWSTUB_IEspService: public SCMStubBase, implements IEspService // interface
	IEspService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspService(IEspService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspService() { _o.Release(); } 
	const char * _stdcall getServiceType()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspService_getServiceType;
		SCMCLW_INTRO_IEspService_getServiceType;
#endif
		char * _return;
		_return = _o.getServiceType();
#ifdef SCMCLW_OUTRO_IEspService_getServiceType;
		SCMCLW_OUTRO_IEspService_getServiceType;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall init(const char * name, const char * type, IPropertyTree * cfg, const char * process)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspService_init;
		SCMCLW_INTRO_IEspService_init;
#endif
		bool _return;
		_return = _o.init(name, type, cfg, process);
#ifdef SCMCLW_OUTRO_IEspService_init;
		SCMCLW_OUTRO_IEspService_init;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setContainer(IEspContainer * container)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspService_setContainer;
		SCMCLW_INTRO_IEspService_setContainer;
#endif
		_o.setContainer(container);
#ifdef SCMCLW_OUTRO_IEspService_setContainer;
		SCMCLW_OUTRO_IEspService_setContainer;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall subscribeServiceToDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspService_subscribeServiceToDali;
		SCMCLW_INTRO_IEspService_subscribeServiceToDali;
#endif
		bool _return;
		_return = _o.subscribeServiceToDali();
#ifdef SCMCLW_OUTRO_IEspService_subscribeServiceToDali;
		SCMCLW_OUTRO_IEspService_subscribeServiceToDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall unsubscribeServiceFromDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspService_unsubscribeServiceFromDali;
		SCMCLW_INTRO_IEspService_unsubscribeServiceFromDali;
#endif
		bool _return;
		_return = _o.unsubscribeServiceFromDali();
#ifdef SCMCLW_OUTRO_IEspService_unsubscribeServiceFromDali;
		SCMCLW_OUTRO_IEspService_unsubscribeServiceFromDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall detachServiceFromDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspService_detachServiceFromDali;
		SCMCLW_INTRO_IEspService_detachServiceFromDali;
#endif
		bool _return;
		_return = _o.detachServiceFromDali();
#ifdef SCMCLW_OUTRO_IEspService_detachServiceFromDali;
		SCMCLW_OUTRO_IEspService_detachServiceFromDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall attachServiceToDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspService_attachServiceToDali;
		SCMCLW_INTRO_IEspService_attachServiceToDali;
#endif
		bool _return;
		_return = _o.attachServiceToDali();
#ifdef SCMCLW_OUTRO_IEspService_attachServiceToDali;
		SCMCLW_OUTRO_IEspService_attachServiceToDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspServiceRequest 
class SCMCLWSTUB_IEspServiceRequest: public SCMStubBase, implements IEspServiceRequest // interface
	IEspServiceRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspServiceRequest(IEspServiceRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspServiceRequest() { _o.Release(); } 
	unsigned long _stdcall getClientIP()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceRequest_getClientIP;
		SCMCLW_INTRO_IEspServiceRequest_getClientIP;
#endif
		unsigned long _return;
		_return = _o.getClientIP();
#ifdef SCMCLW_OUTRO_IEspServiceRequest_getClientIP;
		SCMCLW_OUTRO_IEspServiceRequest_getClientIP;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getUserName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceRequest_getUserName;
		SCMCLW_INTRO_IEspServiceRequest_getUserName;
#endif
		char * _return;
		_return = _o.getUserName();
#ifdef SCMCLW_OUTRO_IEspServiceRequest_getUserName;
		SCMCLW_OUTRO_IEspServiceRequest_getUserName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getPasswordHash()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceRequest_getPasswordHash;
		SCMCLW_INTRO_IEspServiceRequest_getPasswordHash;
#endif
		char * _return;
		_return = _o.getPasswordHash();
#ifdef SCMCLW_OUTRO_IEspServiceRequest_getPasswordHash;
		SCMCLW_OUTRO_IEspServiceRequest_getPasswordHash;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspServiceResponse 
class SCMCLWSTUB_IEspServiceResponse: public SCMStubBase, implements IEspServiceResponse // interface
	IEspServiceResponse &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspServiceResponse(IEspServiceResponse *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspServiceResponse() { _o.Release(); } 
};
// clarion interface stub for IEspRpcBinding 
class SCMCLWSTUB_IEspRpcBinding: public SCMStubBase, implements IEspRpcBinding // interface
	IEspRpcBinding &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspRpcBinding(IEspRpcBinding *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspRpcBinding() { _o.Release(); } 
	const char * _stdcall getRpcType()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_getRpcType;
		SCMCLW_INTRO_IEspRpcBinding_getRpcType;
#endif
		char * _return;
		_return = _o.getRpcType();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_getRpcType;
		SCMCLW_OUTRO_IEspRpcBinding_getRpcType;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getTransportType()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_getTransportType;
		SCMCLW_INTRO_IEspRpcBinding_getTransportType;
#endif
		char * _return;
		_return = _o.getTransportType();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_getTransportType;
		SCMCLW_OUTRO_IEspRpcBinding_getTransportType;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall addService(const char * name, const char * host, unsigned short port, IEspService & service)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_addService;
		SCMCLW_INTRO_IEspRpcBinding_addService;
#endif
		_o.addService(name, host, port, service);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_addService;
		SCMCLW_OUTRO_IEspRpcBinding_addService;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall addProtocol(const char * name, IEspProtocol & prot)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_addProtocol;
		SCMCLW_INTRO_IEspRpcBinding_addProtocol;
#endif
		_o.addProtocol(name, prot);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_addProtocol;
		SCMCLW_OUTRO_IEspRpcBinding_addProtocol;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall getNavigationData(IEspContext & context, IPropertyTree & data)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_getNavigationData;
		SCMCLW_INTRO_IEspRpcBinding_getNavigationData;
#endif
		_o.getNavigationData(context, data);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_getNavigationData;
		SCMCLW_OUTRO_IEspRpcBinding_getNavigationData;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall getDynNavData(IEspContext & context, IProperties * params, IPropertyTree & data)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_getDynNavData;
		SCMCLW_INTRO_IEspRpcBinding_getDynNavData;
#endif
		_o.getDynNavData(context, params, data);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_getDynNavData;
		SCMCLW_OUTRO_IEspRpcBinding_getDynNavData;
#endif
		SCMCLW_OUTRO;
	}
	int _stdcall onGetNavEvent(IEspContext & context, IHttpMessage * req, IHttpMessage * resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_onGetNavEvent;
		SCMCLW_INTRO_IEspRpcBinding_onGetNavEvent;
#endif
		int _return;
		_return = _o.onGetNavEvent(context, req, resp);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_onGetNavEvent;
		SCMCLW_OUTRO_IEspRpcBinding_onGetNavEvent;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	ISocketSelectNotify * _stdcall queryListener()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_queryListener;
		SCMCLW_INTRO_IEspRpcBinding_queryListener;
#endif
		ISocketSelectNotify * _return;
		_return = _o.queryListener();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_queryListener;
		SCMCLW_OUTRO_IEspRpcBinding_queryListener;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall isValidServiceName(IEspContext & context, const char * name)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_isValidServiceName;
		SCMCLW_INTRO_IEspRpcBinding_isValidServiceName;
#endif
		bool _return;
		_return = _o.isValidServiceName(context, name);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_isValidServiceName;
		SCMCLW_OUTRO_IEspRpcBinding_isValidServiceName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall qualifyServiceName(IEspContext & context, const char * servname, const char * methname, StringBuffer & servQName, StringBuffer * methQName)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_qualifyServiceName;
		SCMCLW_INTRO_IEspRpcBinding_qualifyServiceName;
#endif
		bool _return;
		_return = _o.qualifyServiceName(context, servname, methname, servQName, methQName);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_qualifyServiceName;
		SCMCLW_OUTRO_IEspRpcBinding_qualifyServiceName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall run()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_run;
		SCMCLW_INTRO_IEspRpcBinding_run;
#endif
		int _return;
		_return = _o.run();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_run;
		SCMCLW_OUTRO_IEspRpcBinding_run;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall stop()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_stop;
		SCMCLW_INTRO_IEspRpcBinding_stop;
#endif
		int _return;
		_return = _o.stop();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_stop;
		SCMCLW_OUTRO_IEspRpcBinding_stop;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setContainer(IEspContainer * ic)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_setContainer;
		SCMCLW_INTRO_IEspRpcBinding_setContainer;
#endif
		_o.setContainer(ic);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_setContainer;
		SCMCLW_OUTRO_IEspRpcBinding_setContainer;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setXslProcessor(IInterface * xslp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_setXslProcessor;
		SCMCLW_INTRO_IEspRpcBinding_setXslProcessor;
#endif
		_o.setXslProcessor(xslp);
#ifdef SCMCLW_OUTRO_IEspRpcBinding_setXslProcessor;
		SCMCLW_OUTRO_IEspRpcBinding_setXslProcessor;
#endif
		SCMCLW_OUTRO;
	}
	IEspContainer * _stdcall queryContainer()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_queryContainer;
		SCMCLW_INTRO_IEspRpcBinding_queryContainer;
#endif
		IEspContainer * _return;
		_return = _o.queryContainer();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_queryContainer;
		SCMCLW_OUTRO_IEspRpcBinding_queryContainer;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	unsigned _stdcall getCacheMethodCount()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_getCacheMethodCount;
		SCMCLW_INTRO_IEspRpcBinding_getCacheMethodCount;
#endif
		unsigned _return;
		_return = _o.getCacheMethodCount();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_getCacheMethodCount;
		SCMCLW_OUTRO_IEspRpcBinding_getCacheMethodCount;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall subscribeBindingToDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_subscribeBindingToDali;
		SCMCLW_INTRO_IEspRpcBinding_subscribeBindingToDali;
#endif
		bool _return;
		_return = _o.subscribeBindingToDali();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_subscribeBindingToDali;
		SCMCLW_OUTRO_IEspRpcBinding_subscribeBindingToDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall unsubscribeBindingFromDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_unsubscribeBindingFromDali;
		SCMCLW_INTRO_IEspRpcBinding_unsubscribeBindingFromDali;
#endif
		bool _return;
		_return = _o.unsubscribeBindingFromDali();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_unsubscribeBindingFromDali;
		SCMCLW_OUTRO_IEspRpcBinding_unsubscribeBindingFromDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall detachBindingFromDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_detachBindingFromDali;
		SCMCLW_INTRO_IEspRpcBinding_detachBindingFromDali;
#endif
		bool _return;
		_return = _o.detachBindingFromDali();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_detachBindingFromDali;
		SCMCLW_OUTRO_IEspRpcBinding_detachBindingFromDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall attachBindingToDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_attachBindingToDali;
		SCMCLW_INTRO_IEspRpcBinding_attachBindingToDali;
#endif
		bool _return;
		_return = _o.attachBindingToDali();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_attachBindingToDali;
		SCMCLW_OUTRO_IEspRpcBinding_attachBindingToDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall canDetachFromDali()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspRpcBinding_canDetachFromDali;
		SCMCLW_INTRO_IEspRpcBinding_canDetachFromDali;
#endif
		bool _return;
		_return = _o.canDetachFromDali();
#ifdef SCMCLW_OUTRO_IEspRpcBinding_canDetachFromDali;
		SCMCLW_OUTRO_IEspRpcBinding_canDetachFromDali;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspUriMap 
class SCMCLWSTUB_IEspUriMap: public SCMStubBase, implements IEspUriMap // interface
	IEspUriMap &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspUriMap(IEspUriMap *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspUriMap() { _o.Release(); } 
	void _stdcall addBinding(const char * name, const char * host, unsigned short port, IEspService & service)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspUriMap_addBinding;
		SCMCLW_INTRO_IEspUriMap_addBinding;
#endif
		_o.addBinding(name, host, port, service);
#ifdef SCMCLW_OUTRO_IEspUriMap_addBinding;
		SCMCLW_OUTRO_IEspUriMap_addBinding;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall addProtocol(const char * name, IEspProtocol & prot)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspUriMap_addProtocol;
		SCMCLW_INTRO_IEspUriMap_addProtocol;
#endif
		_o.addProtocol(name, prot);
#ifdef SCMCLW_OUTRO_IEspUriMap_addProtocol;
		SCMCLW_OUTRO_IEspUriMap_addProtocol;
#endif
		SCMCLW_OUTRO;
	}
	ISocketSelectNotify * _stdcall getListener()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspUriMap_getListener;
		SCMCLW_INTRO_IEspUriMap_getListener;
#endif
		ISocketSelectNotify * _return;
		_return = _o.getListener();
#ifdef SCMCLW_OUTRO_IEspUriMap_getListener;
		SCMCLW_OUTRO_IEspUriMap_getListener;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall run()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspUriMap_run;
		SCMCLW_INTRO_IEspUriMap_run;
#endif
		int _return;
		_return = _o.run();
#ifdef SCMCLW_OUTRO_IEspUriMap_run;
		SCMCLW_OUTRO_IEspUriMap_run;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall stop()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspUriMap_stop;
		SCMCLW_INTRO_IEspUriMap_stop;
#endif
		int _return;
		_return = _o.stop();
#ifdef SCMCLW_OUTRO_IEspUriMap_stop;
		SCMCLW_OUTRO_IEspUriMap_stop;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspServer 
class SCMCLWSTUB_IEspServer: public SCMStubBase, implements IEspServer // interface
	IEspServer &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspServer(IEspServer *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspServer() { _o.Release(); } 
	void _stdcall addProtocol(IEspProtocol & prot)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_addProtocol;
		SCMCLW_INTRO_IEspServer_addProtocol;
#endif
		_o.addProtocol(prot);
#ifdef SCMCLW_OUTRO_IEspServer_addProtocol;
		SCMCLW_OUTRO_IEspServer_addProtocol;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall addBinding(const char * name, const char * host, unsigned short port, IEspProtocol & prot, IEspRpcBinding & bind, bool isdefault, IPropertyTree * cfgtree)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_addBinding;
		SCMCLW_INTRO_IEspServer_addBinding;
#endif
		_o.addBinding(name, host, port, prot, bind, isdefault, cfgtree);
#ifdef SCMCLW_OUTRO_IEspServer_addBinding;
		SCMCLW_OUTRO_IEspServer_addBinding;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall removeBinding(unsigned short port, IEspRpcBinding & bind)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_removeBinding;
		SCMCLW_INTRO_IEspServer_removeBinding;
#endif
		_o.removeBinding(port, bind);
#ifdef SCMCLW_OUTRO_IEspServer_removeBinding;
		SCMCLW_OUTRO_IEspServer_removeBinding;
#endif
		SCMCLW_OUTRO;
	}
	IEspProtocol * _stdcall queryProtocol(const char * name)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_queryProtocol;
		SCMCLW_INTRO_IEspServer_queryProtocol;
#endif
		IEspProtocol * _return;
		_return = _o.queryProtocol(name);
#ifdef SCMCLW_OUTRO_IEspServer_queryProtocol;
		SCMCLW_OUTRO_IEspServer_queryProtocol;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	IEspRpcBinding * _stdcall queryBinding(const char * name)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_queryBinding;
		SCMCLW_INTRO_IEspServer_queryBinding;
#endif
		IEspRpcBinding * _return;
		_return = _o.queryBinding(name);
#ifdef SCMCLW_OUTRO_IEspServer_queryBinding;
		SCMCLW_OUTRO_IEspServer_queryBinding;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getProcName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_getProcName;
		SCMCLW_INTRO_IEspServer_getProcName;
#endif
		char * _return;
		_return = _o.getProcName();
#ifdef SCMCLW_OUTRO_IEspServer_getProcName;
		SCMCLW_OUTRO_IEspServer_getProcName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	IPropertyTree * _stdcall queryProcConfig()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_queryProcConfig;
		SCMCLW_INTRO_IEspServer_queryProcConfig;
#endif
		IPropertyTree * _return;
		_return = _o.queryProcConfig();
#ifdef SCMCLW_OUTRO_IEspServer_queryProcConfig;
		SCMCLW_OUTRO_IEspServer_queryProcConfig;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall addCacheClient(const char * id, const char * initString)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServer_addCacheClient;
		SCMCLW_INTRO_IEspServer_addCacheClient;
#endif
		bool _return;
		_return = _o.addCacheClient(id, initString);
#ifdef SCMCLW_OUTRO_IEspServer_addCacheClient;
		SCMCLW_OUTRO_IEspServer_addCacheClient;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspServiceCfg 
class SCMCLWSTUB_IEspServiceCfg: public SCMStubBase, implements IEspServiceCfg // interface
	IEspServiceCfg &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspServiceCfg(IEspServiceCfg *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspServiceCfg() { _o.Release(); } 
	void _stdcall init(IPropertyTree & env, const char * proc, const char * service)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceCfg_init;
		SCMCLW_INTRO_IEspServiceCfg_init;
#endif
		_o.init(env, proc, service);
#ifdef SCMCLW_OUTRO_IEspServiceCfg_init;
		SCMCLW_OUTRO_IEspServiceCfg_init;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall refresh()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceCfg_refresh;
		SCMCLW_INTRO_IEspServiceCfg_refresh;
#endif
		bool _return;
		_return = _o.refresh();
#ifdef SCMCLW_OUTRO_IEspServiceCfg_refresh;
		SCMCLW_OUTRO_IEspServiceCfg_refresh;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspBindingCfg 
class SCMCLWSTUB_IEspBindingCfg: public SCMStubBase, implements IEspBindingCfg // interface
	IEspBindingCfg &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspBindingCfg(IEspBindingCfg *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspBindingCfg() { _o.Release(); } 
	void _stdcall init(IPropertyTree & env, const char * proc, const char * service, const char * binding)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspBindingCfg_init;
		SCMCLW_INTRO_IEspBindingCfg_init;
#endif
		_o.init(env, proc, service, binding);
#ifdef SCMCLW_OUTRO_IEspBindingCfg_init;
		SCMCLW_OUTRO_IEspBindingCfg_init;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall refresh()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspBindingCfg_refresh;
		SCMCLW_INTRO_IEspBindingCfg_refresh;
#endif
		bool _return;
		_return = _o.refresh();
#ifdef SCMCLW_OUTRO_IEspBindingCfg_refresh;
		SCMCLW_OUTRO_IEspBindingCfg_refresh;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspProtocolCfg 
class SCMCLWSTUB_IEspProtocolCfg: public SCMStubBase, implements IEspProtocolCfg // interface
	IEspProtocolCfg &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspProtocolCfg(IEspProtocolCfg *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspProtocolCfg() { _o.Release(); } 
	void _stdcall init(IPropertyTree & env, const char * proc, const char * service, const char * binding)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocolCfg_init;
		SCMCLW_INTRO_IEspProtocolCfg_init;
#endif
		_o.init(env, proc, service, binding);
#ifdef SCMCLW_OUTRO_IEspProtocolCfg_init;
		SCMCLW_OUTRO_IEspProtocolCfg_init;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall refresh()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspProtocolCfg_refresh;
		SCMCLW_INTRO_IEspProtocolCfg_refresh;
#endif
		bool _return;
		_return = _o.refresh();
#ifdef SCMCLW_OUTRO_IEspProtocolCfg_refresh;
		SCMCLW_OUTRO_IEspProtocolCfg_refresh;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspServiceEntry 
class SCMCLWSTUB_IEspServiceEntry: public SCMStubBase, implements IEspServiceEntry // interface
	IEspServiceEntry &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspServiceEntry(IEspServiceEntry *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspServiceEntry() { _o.Release(); } 
	void _stdcall addRpcBinding(IEspRpcBinding & binding, const char * host, unsigned short port)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceEntry_addRpcBinding;
		SCMCLW_INTRO_IEspServiceEntry_addRpcBinding;
#endif
		_o.addRpcBinding(binding, host, port);
#ifdef SCMCLW_OUTRO_IEspServiceEntry_addRpcBinding;
		SCMCLW_OUTRO_IEspServiceEntry_addRpcBinding;
#endif
		SCMCLW_OUTRO;
	}
	int _stdcall run()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceEntry_run;
		SCMCLW_INTRO_IEspServiceEntry_run;
#endif
		int _return;
		_return = _o.run();
#ifdef SCMCLW_OUTRO_IEspServiceEntry_run;
		SCMCLW_OUTRO_IEspServiceEntry_run;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall stop()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspServiceEntry_stop;
		SCMCLW_INTRO_IEspServiceEntry_stop;
#endif
		int _return;
		_return = _o.stop();
#ifdef SCMCLW_OUTRO_IEspServiceEntry_stop;
		SCMCLW_OUTRO_IEspServiceEntry_stop;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspQuickMonRequest 
class SCMCLWSTUB_IEspQuickMonRequest: public SCMStubBase, implements IEspQuickMonRequest // interface
	IEspQuickMonRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspQuickMonRequest(IEspQuickMonRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspQuickMonRequest() { _o.Release(); } 
	void _stdcall tbd()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspQuickMonRequest_tbd;
		SCMCLW_INTRO_IEspQuickMonRequest_tbd;
#endif
		_o.tbd();
#ifdef SCMCLW_OUTRO_IEspQuickMonRequest_tbd;
		SCMCLW_OUTRO_IEspQuickMonRequest_tbd;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IEspQuickMonResponse 
class SCMCLWSTUB_IEspQuickMonResponse: public SCMStubBase, implements IEspQuickMonResponse // interface
	IEspQuickMonResponse &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspQuickMonResponse(IEspQuickMonResponse *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspQuickMonResponse() { _o.Release(); } 
	void _stdcall setStatus(QuickMonStatus status, const char * descr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspQuickMonResponse_setStatus;
		SCMCLW_INTRO_IEspQuickMonResponse_setStatus;
#endif
		_o.setStatus(status, descr);
#ifdef SCMCLW_OUTRO_IEspQuickMonResponse_setStatus;
		SCMCLW_OUTRO_IEspQuickMonResponse_setStatus;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IEspQuickMonService 
class SCMCLWSTUB_IEspQuickMonService: public SCMStubBase, implements IEspQuickMonService // interface
	IEspQuickMonService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspQuickMonService(IEspQuickMonService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspQuickMonService() { _o.Release(); } 
	bool _stdcall onGetStatus(IEspQuickMonRequest & request, IEspQuickMonResponse & results)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspQuickMonService_onGetStatus;
		SCMCLW_INTRO_IEspQuickMonService_onGetStatus;
#endif
		bool _return;
		_return = _o.onGetStatus(request, results);
#ifdef SCMCLW_OUTRO_IEspQuickMonService_onGetStatus;
		SCMCLW_OUTRO_IEspQuickMonService_onGetStatus;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspSimpleDataRequest 
class SCMCLWSTUB_IEspSimpleDataRequest: public SCMStubBase, implements IEspSimpleDataRequest // interface
	IEspSimpleDataRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspSimpleDataRequest(IEspSimpleDataRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspSimpleDataRequest() { _o.Release(); } 
	const char * _stdcall getPath()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getPath;
		SCMCLW_INTRO_IEspSimpleDataRequest_getPath;
#endif
		char * _return;
		_return = _o.getPath();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getPath;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getPath;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getService()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getService;
		SCMCLW_INTRO_IEspSimpleDataRequest_getService;
#endif
		char * _return;
		_return = _o.getService();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getService;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getService;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getScrubbedXML()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getScrubbedXML;
		SCMCLW_INTRO_IEspSimpleDataRequest_getScrubbedXML;
#endif
		char * _return;
		_return = _o.getScrubbedXML();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getScrubbedXML;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getScrubbedXML;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getSaveWorkunit()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getSaveWorkunit;
		SCMCLW_INTRO_IEspSimpleDataRequest_getSaveWorkunit;
#endif
		bool _return;
		_return = _o.getSaveWorkunit();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getSaveWorkunit;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getSaveWorkunit;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getLimitResults()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getLimitResults;
		SCMCLW_INTRO_IEspSimpleDataRequest_getLimitResults;
#endif
		bool _return;
		_return = _o.getLimitResults();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getLimitResults;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getLimitResults;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getIncludeGraph()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getIncludeGraph;
		SCMCLW_INTRO_IEspSimpleDataRequest_getIncludeGraph;
#endif
		bool _return;
		_return = _o.getIncludeGraph();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getIncludeGraph;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getIncludeGraph;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getIncludeResultSchemas()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getIncludeResultSchemas;
		SCMCLW_INTRO_IEspSimpleDataRequest_getIncludeResultSchemas;
#endif
		bool _return;
		_return = _o.getIncludeResultSchemas();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getIncludeResultSchemas;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getIncludeResultSchemas;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getEncodeDataset()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getEncodeDataset;
		SCMCLW_INTRO_IEspSimpleDataRequest_getEncodeDataset;
#endif
		bool _return;
		_return = _o.getEncodeDataset();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getEncodeDataset;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getEncodeDataset;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	MapStrToBuf * _stdcall getDataAttachments()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getDataAttachments;
		SCMCLW_INTRO_IEspSimpleDataRequest_getDataAttachments;
#endif
		MapStrToBuf * _return;
		_return = _o.getDataAttachments();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getDataAttachments;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getDataAttachments;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall getClusterName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getClusterName;
		SCMCLW_INTRO_IEspSimpleDataRequest_getClusterName;
#endif
		char * _return;
		_return = _o.getClusterName();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getClusterName;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getClusterName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall getWuTimeout()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getWuTimeout;
		SCMCLW_INTRO_IEspSimpleDataRequest_getWuTimeout;
#endif
		int _return;
		_return = _o.getWuTimeout();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getWuTimeout;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getWuTimeout;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getNoWuAbort()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getNoWuAbort;
		SCMCLW_INTRO_IEspSimpleDataRequest_getNoWuAbort;
#endif
		bool _return;
		_return = _o.getNoWuAbort();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getNoWuAbort;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getNoWuAbort;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getAsync()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getAsync;
		SCMCLW_INTRO_IEspSimpleDataRequest_getAsync;
#endif
		bool _return;
		_return = _o.getAsync();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getAsync;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getAsync;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getTrimXml()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getTrimXml;
		SCMCLW_INTRO_IEspSimpleDataRequest_getTrimXml;
#endif
		bool _return;
		_return = _o.getTrimXml();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getTrimXml;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getTrimXml;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getRawXml()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRequest_getRawXml;
		SCMCLW_INTRO_IEspSimpleDataRequest_getRawXml;
#endif
		bool _return;
		_return = _o.getRawXml();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRequest_getRawXml;
		SCMCLW_OUTRO_IEspSimpleDataRequest_getRawXml;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspSimpleDataResponse 
class SCMCLWSTUB_IEspSimpleDataResponse: public SCMStubBase, implements IEspSimpleDataResponse // interface
	IEspSimpleDataResponse &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspSimpleDataResponse(IEspSimpleDataResponse *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspSimpleDataResponse() { _o.Release(); } 
	StringBuffer & _stdcall updateResultsXML()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataResponse_updateResultsXML;
		SCMCLW_INTRO_IEspSimpleDataResponse_updateResultsXML;
#endif
		StringBuffer & _return;
		_return = _o.updateResultsXML();
#ifdef SCMCLW_OUTRO_IEspSimpleDataResponse_updateResultsXML;
		SCMCLW_OUTRO_IEspSimpleDataResponse_updateResultsXML;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setWorkunitId(const char * wuid)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataResponse_setWorkunitId;
		SCMCLW_INTRO_IEspSimpleDataResponse_setWorkunitId;
#endif
		_o.setWorkunitId(wuid);
#ifdef SCMCLW_OUTRO_IEspSimpleDataResponse_setWorkunitId;
		SCMCLW_OUTRO_IEspSimpleDataResponse_setWorkunitId;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setMessageXML(const char * xml)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataResponse_setMessageXML;
		SCMCLW_INTRO_IEspSimpleDataResponse_setMessageXML;
#endif
		_o.setMessageXML(xml);
#ifdef SCMCLW_OUTRO_IEspSimpleDataResponse_setMessageXML;
		SCMCLW_OUTRO_IEspSimpleDataResponse_setMessageXML;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setResultsXML(const char * xml)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataResponse_setResultsXML;
		SCMCLW_INTRO_IEspSimpleDataResponse_setResultsXML;
#endif
		_o.setResultsXML(xml);
#ifdef SCMCLW_OUTRO_IEspSimpleDataResponse_setResultsXML;
		SCMCLW_OUTRO_IEspSimpleDataResponse_setResultsXML;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setEclWatchAddress(const char * addr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataResponse_setEclWatchAddress;
		SCMCLW_INTRO_IEspSimpleDataResponse_setEclWatchAddress;
#endif
		_o.setEclWatchAddress(addr);
#ifdef SCMCLW_OUTRO_IEspSimpleDataResponse_setEclWatchAddress;
		SCMCLW_OUTRO_IEspSimpleDataResponse_setEclWatchAddress;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setAsync(bool isasync)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataResponse_setAsync;
		SCMCLW_INTRO_IEspSimpleDataResponse_setAsync;
#endif
		_o.setAsync(isasync);
#ifdef SCMCLW_OUTRO_IEspSimpleDataResponse_setAsync;
		SCMCLW_OUTRO_IEspSimpleDataResponse_setAsync;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall addGraphXGMML(const char * xgmml, const char * graphname)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataResponse_addGraphXGMML;
		SCMCLW_INTRO_IEspSimpleDataResponse_addGraphXGMML;
#endif
		_o.addGraphXGMML(xgmml, graphname);
#ifdef SCMCLW_OUTRO_IEspSimpleDataResponse_addGraphXGMML;
		SCMCLW_OUTRO_IEspSimpleDataResponse_addGraphXGMML;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IEspSimpleDataRefResponse 
class SCMCLWSTUB_IEspSimpleDataRefResponse: public SCMStubBase, implements IEspSimpleDataRefResponse // interface
	IEspSimpleDataRefResponse &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspSimpleDataRefResponse(IEspSimpleDataRefResponse *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspSimpleDataRefResponse() { _o.Release(); } 
	void _stdcall setMessageXML(const char * xml)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRefResponse_setMessageXML;
		SCMCLW_INTRO_IEspSimpleDataRefResponse_setMessageXML;
#endif
		_o.setMessageXML(xml);
#ifdef SCMCLW_OUTRO_IEspSimpleDataRefResponse_setMessageXML;
		SCMCLW_OUTRO_IEspSimpleDataRefResponse_setMessageXML;
#endif
		SCMCLW_OUTRO;
	}
	void _stdcall setResultsPath(const char * path)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRefResponse_setResultsPath;
		SCMCLW_INTRO_IEspSimpleDataRefResponse_setResultsPath;
#endif
		_o.setResultsPath(path);
#ifdef SCMCLW_OUTRO_IEspSimpleDataRefResponse_setResultsPath;
		SCMCLW_OUTRO_IEspSimpleDataRefResponse_setResultsPath;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IEspSimpleDataRetrievalRequest 
class SCMCLWSTUB_IEspSimpleDataRetrievalRequest: public SCMStubBase, implements IEspSimpleDataRetrievalRequest // interface
	IEspSimpleDataRetrievalRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspSimpleDataRetrievalRequest(IEspSimpleDataRetrievalRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspSimpleDataRetrievalRequest() { _o.Release(); } 
	const char * _stdcall getResultsPath()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRetrievalRequest_getResultsPath;
		SCMCLW_INTRO_IEspSimpleDataRetrievalRequest_getResultsPath;
#endif
		char * _return;
		_return = _o.getResultsPath();
#ifdef SCMCLW_OUTRO_IEspSimpleDataRetrievalRequest_getResultsPath;
		SCMCLW_OUTRO_IEspSimpleDataRetrievalRequest_getResultsPath;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspSimpleDataService 
class SCMCLWSTUB_IEspSimpleDataService: public SCMStubBase, implements IEspSimpleDataService // interface
	IEspSimpleDataService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspSimpleDataService(IEspSimpleDataService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspSimpleDataService() { _o.Release(); } 
	bool _stdcall getUseModName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataService_getUseModName;
		SCMCLW_INTRO_IEspSimpleDataService_getUseModName;
#endif
		bool _return;
		_return = _o.getUseModName();
#ifdef SCMCLW_OUTRO_IEspSimpleDataService_getUseModName;
		SCMCLW_OUTRO_IEspSimpleDataService_getUseModName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getUseModInWsdl()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataService_getUseModInWsdl;
		SCMCLW_INTRO_IEspSimpleDataService_getUseModInWsdl;
#endif
		bool _return;
		_return = _o.getUseModInWsdl();
#ifdef SCMCLW_OUTRO_IEspSimpleDataService_getUseModInWsdl;
		SCMCLW_OUTRO_IEspSimpleDataService_getUseModInWsdl;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall encodeResultsXml()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataService_encodeResultsXml;
		SCMCLW_INTRO_IEspSimpleDataService_encodeResultsXml;
#endif
		bool _return;
		_return = _o.encodeResultsXml();
#ifdef SCMCLW_OUTRO_IEspSimpleDataService_encodeResultsXml;
		SCMCLW_OUTRO_IEspSimpleDataService_encodeResultsXml;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall onSimpleDataRequest(IEspContext & context, IPropertyTree * partsTree, IEspSimpleDataRequest & req, IEspSimpleDataResponse & resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataService_onSimpleDataRequest;
		SCMCLW_INTRO_IEspSimpleDataService_onSimpleDataRequest;
#endif
		int _return;
		_return = _o.onSimpleDataRequest(context, partsTree, req, resp);
#ifdef SCMCLW_OUTRO_IEspSimpleDataService_onSimpleDataRequest;
		SCMCLW_OUTRO_IEspSimpleDataService_onSimpleDataRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspSimpleDataRetrievalService 
class SCMCLWSTUB_IEspSimpleDataRetrievalService: public SCMStubBase, implements IEspSimpleDataRetrievalService // interface
	IEspSimpleDataRetrievalService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspSimpleDataRetrievalService(IEspSimpleDataRetrievalService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspSimpleDataRetrievalService() { _o.Release(); } 
	int _stdcall onSimpleDataByRefRequest(IEspContext & context, IEspSimpleDataRequest & req, IEspSimpleDataRefResponse & resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRetrievalService_onSimpleDataByRefRequest;
		SCMCLW_INTRO_IEspSimpleDataRetrievalService_onSimpleDataByRefRequest;
#endif
		int _return;
		_return = _o.onSimpleDataByRefRequest(context, req, resp);
#ifdef SCMCLW_OUTRO_IEspSimpleDataRetrievalService_onSimpleDataByRefRequest;
		SCMCLW_OUTRO_IEspSimpleDataRetrievalService_onSimpleDataByRefRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall onSimpleDataRetrieval(IEspContext & context, IEspSimpleDataRetrievalRequest & req, IEspSimpleDataResponse & resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspSimpleDataRetrievalService_onSimpleDataRetrieval;
		SCMCLW_INTRO_IEspSimpleDataRetrievalService_onSimpleDataRetrieval;
#endif
		int _return;
		_return = _o.onSimpleDataRetrieval(context, req, resp);
#ifdef SCMCLW_OUTRO_IEspSimpleDataRetrievalService_onSimpleDataRetrieval;
		SCMCLW_OUTRO_IEspSimpleDataRetrievalService_onSimpleDataRetrieval;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspWebService 
class SCMCLWSTUB_IEspWebService: public SCMStubBase, implements IEspWebService // interface
	IEspWebService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspWebService(IEspWebService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspWebService() { _o.Release(); } 
	bool _stdcall isValidWsName(IEspContext & context, const char * servname)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_isValidWsName;
		SCMCLW_INTRO_IEspWebService_isValidWsName;
#endif
		bool _return;
		_return = _o.isValidWsName(context, servname);
#ifdef SCMCLW_OUTRO_IEspWebService_isValidWsName;
		SCMCLW_OUTRO_IEspWebService_isValidWsName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall qualifyWsName(IEspContext & context, const char * servname, const char * methname, StringBuffer & servQName, StringBuffer * methQName)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_qualifyWsName;
		SCMCLW_INTRO_IEspWebService_qualifyWsName;
#endif
		bool _return;
		_return = _o.qualifyWsName(context, servname, methname, servQName, methQName);
#ifdef SCMCLW_OUTRO_IEspWebService_qualifyWsName;
		SCMCLW_OUTRO_IEspWebService_qualifyWsName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall fixCase(IEspContext & context, StringBuffer & service, StringBuffer & method)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_fixCase;
		SCMCLW_INTRO_IEspWebService_fixCase;
#endif
		bool _return;
		_return = _o.fixCase(context, service, method);
#ifdef SCMCLW_OUTRO_IEspWebService_fixCase;
		SCMCLW_OUTRO_IEspWebService_fixCase;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getWsModules(IEspContext & context, StringArray & wsModules, StringBuffer & mode)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_getWsModules;
		SCMCLW_INTRO_IEspWebService_getWsModules;
#endif
		bool _return;
		_return = _o.getWsModules(context, wsModules, mode);
#ifdef SCMCLW_OUTRO_IEspWebService_getWsModules;
		SCMCLW_OUTRO_IEspWebService_getWsModules;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getWsQueries(IEspContext & context, const char * path, bool aliasOnly, IPropertyTree * wsQueryInfo)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_getWsQueries;
		SCMCLW_INTRO_IEspWebService_getWsQueries;
#endif
		bool _return;
		_return = _o.getWsQueries(context, path, aliasOnly, wsQueryInfo);
#ifdef SCMCLW_OUTRO_IEspWebService_getWsQueries;
		SCMCLW_OUTRO_IEspWebService_getWsQueries;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getWSDL(IEspContext & context, const char * path, const char * method, StringBuffer & wsdlMsg)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_getWSDL;
		SCMCLW_INTRO_IEspWebService_getWSDL;
#endif
		bool _return;
		_return = _o.getWSDL(context, path, method, wsdlMsg);
#ifdef SCMCLW_OUTRO_IEspWebService_getWSDL;
		SCMCLW_OUTRO_IEspWebService_getWSDL;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getWSDL_Message(IEspContext & context, const char * path, const char * method, StringBuffer & wsdlMsg)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_getWSDL_Message;
		SCMCLW_INTRO_IEspWebService_getWSDL_Message;
#endif
		bool _return;
		_return = _o.getWSDL_Message(context, path, method, wsdlMsg);
#ifdef SCMCLW_OUTRO_IEspWebService_getWSDL_Message;
		SCMCLW_OUTRO_IEspWebService_getWSDL_Message;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getWSDL_Schema(IEspContext & context, const char * path, const char * method, StringBuffer & wsdlSchema)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_getWSDL_Schema;
		SCMCLW_INTRO_IEspWebService_getWSDL_Schema;
#endif
		bool _return;
		_return = _o.getWSDL_Schema(context, path, method, wsdlSchema);
#ifdef SCMCLW_OUTRO_IEspWebService_getWSDL_Schema;
		SCMCLW_OUTRO_IEspWebService_getWSDL_Schema;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getResults_Schema(IEspContext & context, const char * path, const char * method, StringBuffer & dataSchema)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_getResults_Schema;
		SCMCLW_INTRO_IEspWebService_getResults_Schema;
#endif
		bool _return;
		_return = _o.getResults_Schema(context, path, method, dataSchema);
#ifdef SCMCLW_OUTRO_IEspWebService_getResults_Schema;
		SCMCLW_OUTRO_IEspWebService_getResults_Schema;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall translateXsdType(const char * (null))
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_translateXsdType;
		SCMCLW_INTRO_IEspWebService_translateXsdType;
#endif
		char * _return;
		_return = _o.translateXsdType((null));
#ifdef SCMCLW_OUTRO_IEspWebService_translateXsdType;
		SCMCLW_OUTRO_IEspWebService_translateXsdType;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getResultXsd(IEspContext & context, const char * service, const char * method, const char * resultName, StringBuffer & dataSchema)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspWebService_getResultXsd;
		SCMCLW_INTRO_IEspWebService_getResultXsd;
#endif
		bool _return;
		_return = _o.getResultXsd(context, service, method, resultName, dataSchema);
#ifdef SCMCLW_OUTRO_IEspWebService_getResultXsd;
		SCMCLW_OUTRO_IEspWebService_getResultXsd;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspHtmlForm 
class SCMCLWSTUB_IEspHtmlForm: public SCMStubBase, implements IEspHtmlForm // interface
	IEspHtmlForm &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspHtmlForm(IEspHtmlForm *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspHtmlForm() { _o.Release(); } 
	bool _stdcall getHtmlForm(IEspContext & context, const char * path, const char * method, StringBuffer & formStr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_getHtmlForm;
		SCMCLW_INTRO_IEspHtmlForm_getHtmlForm;
#endif
		bool _return;
		_return = _o.getHtmlForm(context, path, method, formStr);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_getHtmlForm;
		SCMCLW_OUTRO_IEspHtmlForm_getHtmlForm;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getMetaBlock(IEspContext & context, const char * name, const char * service, const char * method, StringBuffer & blockStr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_getMetaBlock;
		SCMCLW_INTRO_IEspHtmlForm_getMetaBlock;
#endif
		bool _return;
		_return = _o.getMetaBlock(context, name, service, method, blockStr);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_getMetaBlock;
		SCMCLW_OUTRO_IEspHtmlForm_getMetaBlock;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getParametersXml(IEspContext & context, const char * path, const char * method, StringBuffer & formStr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_getParametersXml;
		SCMCLW_INTRO_IEspHtmlForm_getParametersXml;
#endif
		bool _return;
		_return = _o.getParametersXml(context, path, method, formStr);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_getParametersXml;
		SCMCLW_OUTRO_IEspHtmlForm_getParametersXml;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getDescriptiveXml(IEspContext & context, const char * path, const char * method, StringBuffer & xmlStr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_getDescriptiveXml;
		SCMCLW_INTRO_IEspHtmlForm_getDescriptiveXml;
#endif
		bool _return;
		_return = _o.getDescriptiveXml(context, path, method, xmlStr);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_getDescriptiveXml;
		SCMCLW_OUTRO_IEspHtmlForm_getDescriptiveXml;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getHtmlResults_Xslt(IEspContext & context, const char * path, const char * method, StringBuffer & xsltStr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_getHtmlResults_Xslt;
		SCMCLW_INTRO_IEspHtmlForm_getHtmlResults_Xslt;
#endif
		bool _return;
		_return = _o.getHtmlResults_Xslt(context, path, method, xsltStr);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_getHtmlResults_Xslt;
		SCMCLW_OUTRO_IEspHtmlForm_getHtmlResults_Xslt;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall applyXslAttribute(IEspContext & context, const char * path, const char * method, const char * sectionName, const char * input, const char * fullPath, StringBuffer & ret, bool nodefault)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_applyXslAttribute;
		SCMCLW_INTRO_IEspHtmlForm_applyXslAttribute;
#endif
		bool _return;
		_return = _o.applyXslAttribute(context, path, method, sectionName, input, fullPath, ret, nodefault);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_applyXslAttribute;
		SCMCLW_OUTRO_IEspHtmlForm_applyXslAttribute;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getOTX(IEspContext & context, const char * path, const char * method, StringBuffer & xmlStr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_getOTX;
		SCMCLW_INTRO_IEspHtmlForm_getOTX;
#endif
		bool _return;
		_return = _o.getOTX(context, path, method, xmlStr);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_getOTX;
		SCMCLW_OUTRO_IEspHtmlForm_getOTX;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall getCacheInfo(IEspContext & context, const char * name, StringBuffer & blockStr)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspHtmlForm_getCacheInfo;
		SCMCLW_INTRO_IEspHtmlForm_getCacheInfo;
#endif
		bool _return;
		_return = _o.getCacheInfo(context, name, blockStr);
#ifdef SCMCLW_OUTRO_IEspHtmlForm_getCacheInfo;
		SCMCLW_OUTRO_IEspHtmlForm_getCacheInfo;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspFileService 
class SCMCLWSTUB_IEspFileService: public SCMStubBase, implements IEspFileService // interface
	IEspFileService &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspFileService(IEspFileService *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspFileService() { _o.Release(); } 
	bool _stdcall getFile(IEspContext & context, const char * path, MemoryBuffer & data)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspFileService_getFile;
		SCMCLW_INTRO_IEspFileService_getFile;
#endif
		bool _return;
		_return = _o.getFile(context, path, data);
#ifdef SCMCLW_OUTRO_IEspFileService_getFile;
		SCMCLW_OUTRO_IEspFileService_getFile;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall putFile(IEspContext & context, const char * path, int, void * data, unsigned len)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspFileService_putFile;
		SCMCLW_INTRO_IEspFileService_putFile;
#endif
		bool _return;
		_return = _o.putFile(context, path, data, len);
#ifdef SCMCLW_OUTRO_IEspFileService_putFile;
		SCMCLW_OUTRO_IEspFileService_putFile;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspNgParameter 
class SCMCLWSTUB_IEspNgParameter: public SCMStubBase, implements IEspNgParameter // interface
	IEspNgParameter &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspNgParameter(IEspNgParameter *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspNgParameter() { _o.Release(); } 
	const char * _stdcall queryName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameter_queryName;
		SCMCLW_INTRO_IEspNgParameter_queryName;
#endif
		char * _return;
		_return = _o.queryName();
#ifdef SCMCLW_OUTRO_IEspNgParameter_queryName;
		SCMCLW_OUTRO_IEspNgParameter_queryName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	const char * _stdcall queryValue()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameter_queryValue;
		SCMCLW_INTRO_IEspNgParameter_queryValue;
#endif
		char * _return;
		_return = _o.queryValue();
#ifdef SCMCLW_OUTRO_IEspNgParameter_queryValue;
		SCMCLW_OUTRO_IEspNgParameter_queryValue;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setValue(const char * val)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameter_setValue;
		SCMCLW_INTRO_IEspNgParameter_setValue;
#endif
		_o.setValue(val);
#ifdef SCMCLW_OUTRO_IEspNgParameter_setValue;
		SCMCLW_OUTRO_IEspNgParameter_setValue;
#endif
		SCMCLW_OUTRO;
	}
	unsigned _stdcall getMaxLength()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameter_getMaxLength;
		SCMCLW_INTRO_IEspNgParameter_getMaxLength;
#endif
		unsigned _return;
		_return = _o.getMaxLength();
#ifdef SCMCLW_OUTRO_IEspNgParameter_getMaxLength;
		SCMCLW_OUTRO_IEspNgParameter_getMaxLength;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall isNull()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameter_isNull;
		SCMCLW_INTRO_IEspNgParameter_isNull;
#endif
		bool _return;
		_return = _o.isNull();
#ifdef SCMCLW_OUTRO_IEspNgParameter_isNull;
		SCMCLW_OUTRO_IEspNgParameter_isNull;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall setNull()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameter_setNull;
		SCMCLW_INTRO_IEspNgParameter_setNull;
#endif
		_o.setNull();
#ifdef SCMCLW_OUTRO_IEspNgParameter_setNull;
		SCMCLW_OUTRO_IEspNgParameter_setNull;
#endif
		SCMCLW_OUTRO;
	}
};
// clarion interface stub for IEspNgParameterIterator 
class SCMCLWSTUB_IEspNgParameterIterator: public SCMStubBase, implements IEspNgParameterIterator // interface
	IEspNgParameterIterator &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspNgParameterIterator(IEspNgParameterIterator *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspNgParameterIterator() { _o.Release(); } 
	bool _stdcall first()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameterIterator_first;
		SCMCLW_INTRO_IEspNgParameterIterator_first;
#endif
		bool _return;
		_return = _o.first();
#ifdef SCMCLW_OUTRO_IEspNgParameterIterator_first;
		SCMCLW_OUTRO_IEspNgParameterIterator_first;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall next()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameterIterator_next;
		SCMCLW_INTRO_IEspNgParameterIterator_next;
#endif
		bool _return;
		_return = _o.next();
#ifdef SCMCLW_OUTRO_IEspNgParameterIterator_next;
		SCMCLW_OUTRO_IEspNgParameterIterator_next;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	bool _stdcall isValid()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameterIterator_isValid;
		SCMCLW_INTRO_IEspNgParameterIterator_isValid;
#endif
		bool _return;
		_return = _o.isValid();
#ifdef SCMCLW_OUTRO_IEspNgParameterIterator_isValid;
		SCMCLW_OUTRO_IEspNgParameterIterator_isValid;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	IEspNgParameter * _stdcall query()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgParameterIterator_query;
		SCMCLW_INTRO_IEspNgParameterIterator_query;
#endif
		IEspNgParameter * _return;
		_return = _o.query();
#ifdef SCMCLW_OUTRO_IEspNgParameterIterator_query;
		SCMCLW_OUTRO_IEspNgParameterIterator_query;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspNgComplexType 
class SCMCLWSTUB_IEspNgComplexType: public SCMStubBase, implements IEspNgComplexType // interface
	IEspNgComplexType &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspNgComplexType(IEspNgComplexType *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspNgComplexType() { _o.Release(); } 
	const char * _stdcall queryName()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgComplexType_queryName;
		SCMCLW_INTRO_IEspNgComplexType_queryName;
#endif
		char * _return;
		_return = _o.queryName();
#ifdef SCMCLW_OUTRO_IEspNgComplexType_queryName;
		SCMCLW_OUTRO_IEspNgComplexType_queryName;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	IEspNgParameterIterator * _stdcall getParameterIterator()
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgComplexType_getParameterIterator;
		SCMCLW_INTRO_IEspNgComplexType_getParameterIterator;
#endif
		IEspNgParameterIterator * _return;
		_return = _o.getParameterIterator();
#ifdef SCMCLW_OUTRO_IEspNgComplexType_getParameterIterator;
		SCMCLW_OUTRO_IEspNgComplexType_getParameterIterator;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
// clarion interface stub for IEspNgRequest 
class SCMCLWSTUB_IEspNgRequest: public SCMStubBase, implements IEspNgRequest // interface
	IEspNgRequest &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspNgRequest(IEspNgRequest *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspNgRequest() { _o.Release(); } 
};
// clarion interface stub for IEspNgResponse 
class SCMCLWSTUB_IEspNgResponse: public SCMStubBase, implements IEspNgResponse // interface
	IEspNgResponse &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspNgResponse(IEspNgResponse *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspNgResponse() { _o.Release(); } 
};
// clarion interface stub for IEspNgServiceBinding 
class SCMCLWSTUB_IEspNgServiceBinding: public SCMStubBase, implements IEspNgServiceBinding // interface
	IEspNgServiceBinding &_o;
public:
	IMPLEMENT_SCMSTUBBASE
	SCMCLW_IEspNgServiceBinding(IEspNgServiceBinding *_if) : SCMStubBase(_if), _o(*LINK(_if)) { } 
	~SCMCLW_IEspNgServiceBinding() { _o.Release(); } 
	IEspNgRequest * _stdcall createRequest(const char * type_name)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgServiceBinding_createRequest;
		SCMCLW_INTRO_IEspNgServiceBinding_createRequest;
#endif
		IEspNgRequest * _return;
		_return = _o.createRequest(type_name);
#ifdef SCMCLW_OUTRO_IEspNgServiceBinding_createRequest;
		SCMCLW_OUTRO_IEspNgServiceBinding_createRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	IEspNgResponse * _stdcall createResponse(const char * type_name)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgServiceBinding_createResponse;
		SCMCLW_INTRO_IEspNgServiceBinding_createResponse;
#endif
		IEspNgResponse * _return;
		_return = _o.createResponse(type_name);
#ifdef SCMCLW_OUTRO_IEspNgServiceBinding_createResponse;
		SCMCLW_OUTRO_IEspNgServiceBinding_createResponse;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	int _stdcall processRequest(IEspContext & context, const char * method_name, IEspNgRequest * req, IEspNgResponse * resp)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgServiceBinding_processRequest;
		SCMCLW_INTRO_IEspNgServiceBinding_processRequest;
#endif
		int _return;
		_return = _o.processRequest(context, method_name, req, resp);
#ifdef SCMCLW_OUTRO_IEspNgServiceBinding_processRequest;
		SCMCLW_OUTRO_IEspNgServiceBinding_processRequest;
#endif
		SCMCLW_OUTRO;
		return _return;	}
	void _stdcall populateContext(IEspContext & ctx)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgServiceBinding_populateContext;
		SCMCLW_INTRO_IEspNgServiceBinding_populateContext;
#endif
		_o.populateContext(ctx);
#ifdef SCMCLW_OUTRO_IEspNgServiceBinding_populateContext;
		SCMCLW_OUTRO_IEspNgServiceBinding_populateContext;
#endif
		SCMCLW_OUTRO;
	}
	bool _stdcall basicAuth(IEspContext * ctx)
	{
		SCMCLW_INTRO;
#ifdef SCMCLW_INTRO_IEspNgServiceBinding_basicAuth;
		SCMCLW_INTRO_IEspNgServiceBinding_basicAuth;
#endif
		bool _return;
		_return = _o.basicAuth(ctx);
#ifdef SCMCLW_OUTRO_IEspNgServiceBinding_basicAuth;
		SCMCLW_OUTRO_IEspNgServiceBinding_basicAuth;
#endif
		SCMCLW_OUTRO;
		return _return;	}
};
//end
