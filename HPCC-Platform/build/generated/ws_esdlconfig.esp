// *** Source file generated by HIDL Version 1.3 from ws_esdlconfig.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_esdlconfig_ESPGEN_INCLUDED
#define ws_esdlconfig_ESPGEN_INCLUDED

#include "ws_esdlconfig_esp.ipp"

#ifdef _WIN32
#include "edwin.h"
#include <process.h>
#endif



//=======================================================
// class CEchoRequest Implementation
//=======================================================

CEchoRequest::CEchoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Request(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEchoRequest::CEchoRequest(const char *serviceName, const char *bc)
	: m_Request(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoRequest");
}

CEchoRequest::CEchoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Request(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CEchoRequest::CEchoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Request(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CEchoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Request\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CEchoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEchoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CEchoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Request");
	form.appendf("  <tr><td><b>Request: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEchoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEchoRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Request.marshall(rpc_resp, "Request", "", "", "");
}


void CEchoRequest::copy(CEchoRequest &from)
{
	m_Request.copy(from.m_Request);
}


void CEchoRequest::copy(IConstEchoRequest &ifrom)
{
	setRequest(ifrom.getRequest());
}


void CEchoRequest::getAttributes(IProperties &attributes)
{
}


void CEchoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Request.toStr(ctx, buffer, "Request", "", true, "", "");
}


void CEchoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEchoRequest::serializer(IEspContext* ctx, IConstEchoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EchoRequest>");
	// field Request
	{
		const char* s = src.getRequest();
		if (s && *s)
		{
			buffer.append("<Request>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Request>");
		}
	}
	if (keepRootTag)
		buffer.append("</EchoRequest>");
}

bool CEchoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Request.unmarshall(rpc_request, "Request", basepath);
	return hasValue;
}

bool CEchoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Request.unmarshall(ctx, soapval, "Request");
	return hasValue;
}

bool CEchoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Request.unmarshall(ctx, params, attachments, "Request", basepath);
	return hasValue;
}

const char * CEchoRequest::getRequest() { return m_Request.query();}
void CEchoRequest::setRequest(const char * val){ m_Request.set(val); }
extern "C"  IEspEchoRequest *createEchoRequest(const char *serv){return ((IEspEchoRequest *)new CEchoRequest(serv));}
extern "C"  IClientEchoRequest *createClientEchoRequest(const char *serv){return ((IClientEchoRequest *)new CEchoRequest(serv));}

//=======================================================
// class CEchoResponse Implementation
//=======================================================

CEchoResponse::CEchoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Response(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEchoResponse::CEchoResponse(const char *serviceName, const char *bc)
	: m_Response(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoResponse");
}

CEchoResponse::CEchoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Response(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CEchoResponse::CEchoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Response(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EchoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CEchoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Response\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CEchoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEchoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CEchoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Response");
	form.appendf("  <tr><td><b>Response: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEchoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEchoResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Response.marshall(rpc_resp, "Response", "", "", "");
	}
}


void CEchoResponse::copy(CEchoResponse &from)
{
	m_Response.copy(from.m_Response);
}


void CEchoResponse::copy(IConstEchoResponse &ifrom)
{
	setResponse(ifrom.getResponse());
}


void CEchoResponse::getAttributes(IProperties &attributes)
{
}


void CEchoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Response.toStr(ctx, buffer, "Response", "", true, "", "");
	}
}


void CEchoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEchoResponse::serializer(IEspContext* ctx, IConstEchoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EchoResponse>");
	// field Response
	{
		const char* s = src.getResponse();
		if (s && *s)
		{
			buffer.append("<Response>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Response>");
		}
	}
	if (keepRootTag)
		buffer.append("</EchoResponse>");
}

bool CEchoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Response.unmarshall(rpc_request, "Response", basepath);
	}
	return hasValue;
}

bool CEchoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Response.unmarshall(ctx, soapval, "Response");
	return hasValue;
}

bool CEchoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Response.unmarshall(ctx, params, attachments, "Response", basepath);
	return hasValue;
}

const char * CEchoResponse::getResponse() { return m_Response.query();}
void CEchoResponse::setResponse(const char * val){ m_Response.set(val); }
extern "C"  IEspEchoResponse *createEchoResponse(const char *serv){return ((IEspEchoResponse *)new CEchoResponse(serv));}
extern "C"  IClientEchoResponse *createClientEchoResponse(const char *serv){return ((IClientEchoResponse *)new CEchoResponse(serv));}

//=======================================================
// class CBaseESDLStatus Implementation
//=======================================================

CBaseESDLStatus::CBaseESDLStatus(const char *serviceName, IRpcMessageBinding *init)
	: m_Code(nilIgnore),m_Description(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("BaseESDLStatus");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CBaseESDLStatus::CBaseESDLStatus(const char *serviceName, const char *bc)
	: m_Code(nilIgnore),m_Description(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("BaseESDLStatus");
}

StringBuffer &CBaseESDLStatus::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Code\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CBaseESDLStatus::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CBaseESDLStatus::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CBaseESDLStatus::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Code");
	form.appendf("  <tr><td><b>Code: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CBaseESDLStatus::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CBaseESDLStatus::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Code.marshall(rpc_resp, "Code", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
}


void CBaseESDLStatus::copy(CBaseESDLStatus &from)
{
	m_Code.copy(from.m_Code);
	m_Description.copy(from.m_Description);
}


void CBaseESDLStatus::copy(IConstBaseESDLStatus &ifrom)
{
	setCode(ifrom.getCode());
	setDescription(ifrom.getDescription());
}


void CBaseESDLStatus::getAttributes(IProperties &attributes)
{
}


void CBaseESDLStatus::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Code.toStr(ctx, buffer, "Code", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
}


void CBaseESDLStatus::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CBaseESDLStatus::serializer(IEspContext* ctx, IConstBaseESDLStatus &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<BaseESDLStatus>");
	// field Code
	{
		int n = src.getCode();
		if (n)
			buffer.appendf("<Code>%d</Code>", n);
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	if (keepRootTag)
		buffer.append("</BaseESDLStatus>");
}

bool CBaseESDLStatus::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Code.unmarshall(rpc_request, "Code", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	return hasValue;
}

bool CBaseESDLStatus::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Code.unmarshall(ctx, soapval, "Code");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	return hasValue;
}

bool CBaseESDLStatus::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Code.unmarshall(ctx, params, attachments, "Code", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	return hasValue;
}

int CBaseESDLStatus::getCode() { return m_Code;}
const char * CBaseESDLStatus::getDescription() { return m_Description.query();}
void CBaseESDLStatus::setCode(int val){ m_Code=val; }
void CBaseESDLStatus::setDescription(const char * val){ m_Description.set(val); }
extern "C"  IEspBaseESDLStatus *createBaseESDLStatus(const char *serv, const char *msgname){return ((IEspBaseESDLStatus *)new CBaseESDLStatus(serv /*, msgname*/));}
extern "C"  IClientBaseESDLStatus *createClientBaseESDLStatus(const char *serv, const char *msgname){return ((IClientBaseESDLStatus *)new CBaseESDLStatus(serv /*, msgname*/));}

//=======================================================
// class CMethodConfig Implementation
//=======================================================

CMethodConfig::CMethodConfig(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Attributes(nilIgnore),m_Elements(nilIgnore),m_XML(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("MethodConfig");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CMethodConfig::CMethodConfig(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Attributes(nilIgnore),m_Elements(nilIgnore),m_XML(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("MethodConfig");
}

StringBuffer &CMethodConfig::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Attributes\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Attribute\" type=\"tns:NamedValue\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Elements\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"XML\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CNamedValue::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CMethodConfig::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CMethodConfig::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("NamedValue"))
	{
		added.setValue("NamedValue",1);
		CNamedValue::getMapInfo(info,added);
	}
}

StringBuffer &CMethodConfig::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Attributes");
	form.appendf("<tr><td><b>Attributes: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Elements");
	form.appendf("  <tr><td><b>Elements: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("XML");
	form.appendf("  <tr><td><b>XML: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CMethodConfig::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CMethodConfig::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Attributes.marshall(rpc_resp, "Attributes", "Attribute");
	m_Elements.marshall(rpc_resp, "Elements", "", "", "");
	m_XML.marshall(rpc_resp, "XML", "", "", "");
}


void CMethodConfig::copy(CMethodConfig &from)
{
	m_Name.copy(from.m_Name);
	m_Attributes.copy(from.m_Attributes);
	m_Elements.copy(from.m_Elements);
	m_XML.copy(from.m_XML);
}


void CMethodConfig::copy(IConstMethodConfig &ifrom)
{
	setName(ifrom.getName());
	setAttributes(ifrom.getAttributes());
	setElements(ifrom.getElements());
	setXML(ifrom.getXML());
}


void CMethodConfig::getAttributes(IProperties &attributes)
{
}


void CMethodConfig::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Attributes.toStr(ctx, buffer, "Attributes", "Attribute");
	m_Elements.toStr(ctx, buffer, "Elements", "", true, "", "");
	m_XML.toStr(ctx, buffer, "XML", "", true, "", "");
}


void CMethodConfig::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CMethodConfig::serializer(IEspContext* ctx, IConstMethodConfig &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<MethodConfig>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Attributes
	{
		IArrayOf<IConstNamedValue>& v = src.getAttributes();
		int size = v.length();
		if (size>0)
			buffer.append("<Attributes>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Attribute>");
			CNamedValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Attribute>");
		}
		if (size>0)
			buffer.append("</Attributes>");
	}
	// field Elements
	{
		const char* s = src.getElements();
		if (s && *s)
		{
			buffer.append("<Elements>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Elements>");
		}
	}
	// field XML
	{
		const char* s = src.getXML();
		if (s && *s)
		{
			buffer.append("<XML>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XML>");
		}
	}
	if (keepRootTag)
		buffer.append("</MethodConfig>");
}

bool CMethodConfig::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Attributes.unmarshall(rpc_request, "Attributes", basepath);
	hasValue |= m_Elements.unmarshall(rpc_request, "Elements", basepath);
	hasValue |= m_XML.unmarshall(rpc_request, "XML", basepath);
	return hasValue;
}

bool CMethodConfig::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Attributes.unmarshall(ctx, soapval, "Attributes");
	hasValue |= m_Elements.unmarshall(ctx, soapval, "Elements");
	hasValue |= m_XML.unmarshall(ctx, soapval, "XML");
	return hasValue;
}

bool CMethodConfig::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Attributes.unmarshall(ctx, params, attachments, "Attributes", basepath);
	hasValue |= m_Elements.unmarshall(ctx, params, attachments, "Elements", basepath);
	hasValue |= m_XML.unmarshall(ctx, params, attachments, "XML", basepath);
	return hasValue;
}

const char * CMethodConfig::getName() { return m_Name.query();}
IArrayOf<IConstNamedValue> & CMethodConfig::getAttributes() { return (IArrayOf<IConstNamedValue> &) m_Attributes; }
const char * CMethodConfig::getElements() { return m_Elements.query();}
const char * CMethodConfig::getXML() { return m_XML.query();}
void CMethodConfig::setName(const char * val){ m_Name.set(val); }
void CMethodConfig::setAttributes(IArrayOf<IEspNamedValue> &val)
{
	m_Attributes->kill();
	IArrayOf<IConstNamedValue> &target = m_Attributes.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNamedValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CMethodConfig::setAttributes(IArrayOf<IConstNamedValue> &val)
{
	m_Attributes->kill();
	IArrayOf<IConstNamedValue> &target = m_Attributes.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNamedValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CMethodConfig::setElements(const char * val){ m_Elements.set(val); }
void CMethodConfig::setXML(const char * val){ m_XML.set(val); }
extern "C"  IEspMethodConfig *createMethodConfig(const char *serv, const char *msgname){return ((IEspMethodConfig *)new CMethodConfig(serv /*, msgname*/));}
extern "C"  IClientMethodConfig *createClientMethodConfig(const char *serv, const char *msgname){return ((IClientMethodConfig *)new CMethodConfig(serv /*, msgname*/));}

//=======================================================
// class CESDLConfiguration Implementation
//=======================================================

CESDLConfiguration::CESDLConfiguration(const char *serviceName, IRpcMessageBinding *init)
	: m_Methods(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLConfiguration");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CESDLConfiguration::CESDLConfiguration(const char *serviceName, const char *bc)
	: m_Methods(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLConfiguration");
}

StringBuffer &CESDLConfiguration::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Methods\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Method\" type=\"tns:MethodConfig\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CMethodConfig::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CESDLConfiguration::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CESDLConfiguration::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("MethodConfig"))
	{
		added.setValue("MethodConfig",1);
		CMethodConfig::getMapInfo(info,added);
	}
}

StringBuffer &CESDLConfiguration::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Methods");
	form.appendf("<tr><td><b>Methods: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CESDLConfiguration::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CESDLConfiguration::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Methods.marshall(rpc_resp, "Methods", "Method");
}


void CESDLConfiguration::copy(CESDLConfiguration &from)
{
	m_Methods.copy(from.m_Methods);
}


void CESDLConfiguration::copy(IConstESDLConfiguration &ifrom)
{
	setMethods(ifrom.getMethods());
}


void CESDLConfiguration::getAttributes(IProperties &attributes)
{
}


void CESDLConfiguration::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Methods.toStr(ctx, buffer, "Methods", "Method");
}


void CESDLConfiguration::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CESDLConfiguration::serializer(IEspContext* ctx, IConstESDLConfiguration &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ESDLConfiguration>");
	// field Methods
	{
		IArrayOf<IConstMethodConfig>& v = src.getMethods();
		int size = v.length();
		if (size>0)
			buffer.append("<Methods>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Method>");
			CMethodConfig::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Method>");
		}
		if (size>0)
			buffer.append("</Methods>");
	}
	if (keepRootTag)
		buffer.append("</ESDLConfiguration>");
}

bool CESDLConfiguration::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Methods.unmarshall(rpc_request, "Methods", basepath);
	return hasValue;
}

bool CESDLConfiguration::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Methods.unmarshall(ctx, soapval, "Methods");
	return hasValue;
}

bool CESDLConfiguration::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Methods.unmarshall(ctx, params, attachments, "Methods", basepath);
	return hasValue;
}

IArrayOf<IConstMethodConfig> & CESDLConfiguration::getMethods() { return (IArrayOf<IConstMethodConfig> &) m_Methods; }
void CESDLConfiguration::setMethods(IArrayOf<IEspMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IEspMethodConfig &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CESDLConfiguration::setMethods(IArrayOf<IConstMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IConstMethodConfig &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspESDLConfiguration *createESDLConfiguration(const char *serv, const char *msgname){return ((IEspESDLConfiguration *)new CESDLConfiguration(serv /*, msgname*/));}
extern "C"  IClientESDLConfiguration *createClientESDLConfiguration(const char *serv, const char *msgname){return ((IClientESDLConfiguration *)new CESDLConfiguration(serv /*, msgname*/));}

//=======================================================
// class CPublishHistory Implementation
//=======================================================

CPublishHistory::CPublishHistory(const char *serviceName, IRpcMessageBinding *init)
	: m_PublishBy(nilIgnore),m_CreatedTime(nilIgnore),m_LastEditBy(nilIgnore),m_LastEditTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishHistory");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CPublishHistory::CPublishHistory(const char *serviceName, const char *bc)
	: m_PublishBy(nilIgnore),m_CreatedTime(nilIgnore),m_LastEditBy(nilIgnore),m_LastEditTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishHistory");
}

StringBuffer &CPublishHistory::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"PublishBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CreatedTime\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LastEditBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LastEditTime\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CPublishHistory::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CPublishHistory::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CPublishHistory::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PublishBy");
	form.appendf("  <tr><td><b>PublishBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CreatedTime");
	form.appendf("  <tr><td><b>CreatedTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LastEditBy");
	form.appendf("  <tr><td><b>LastEditBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LastEditTime");
	form.appendf("  <tr><td><b>LastEditTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CPublishHistory::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CPublishHistory::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_PublishBy.marshall(rpc_resp, "PublishBy", "", "", "");
	m_CreatedTime.marshall(rpc_resp, "CreatedTime", "", "", "");
	m_LastEditBy.marshall(rpc_resp, "LastEditBy", "", "", "");
	m_LastEditTime.marshall(rpc_resp, "LastEditTime", "", "", "");
}


void CPublishHistory::copy(CPublishHistory &from)
{
	m_PublishBy.copy(from.m_PublishBy);
	m_CreatedTime.copy(from.m_CreatedTime);
	m_LastEditBy.copy(from.m_LastEditBy);
	m_LastEditTime.copy(from.m_LastEditTime);
}


void CPublishHistory::copy(IConstPublishHistory &ifrom)
{
	setPublishBy(ifrom.getPublishBy());
	setCreatedTime(ifrom.getCreatedTime());
	setLastEditBy(ifrom.getLastEditBy());
	setLastEditTime(ifrom.getLastEditTime());
}


void CPublishHistory::getAttributes(IProperties &attributes)
{
}


void CPublishHistory::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_PublishBy.toStr(ctx, buffer, "PublishBy", "", true, "", "");
	m_CreatedTime.toStr(ctx, buffer, "CreatedTime", "", true, "", "");
	m_LastEditBy.toStr(ctx, buffer, "LastEditBy", "", true, "", "");
	m_LastEditTime.toStr(ctx, buffer, "LastEditTime", "", true, "", "");
}


void CPublishHistory::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CPublishHistory::serializer(IEspContext* ctx, IConstPublishHistory &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<PublishHistory>");
	// field PublishBy
	{
		const char* s = src.getPublishBy();
		if (s && *s)
		{
			buffer.append("<PublishBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PublishBy>");
		}
	}
	// field CreatedTime
	{
		const char* s = src.getCreatedTime();
		if (s && *s)
		{
			buffer.append("<CreatedTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CreatedTime>");
		}
	}
	// field LastEditBy
	{
		const char* s = src.getLastEditBy();
		if (s && *s)
		{
			buffer.append("<LastEditBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LastEditBy>");
		}
	}
	// field LastEditTime
	{
		const char* s = src.getLastEditTime();
		if (s && *s)
		{
			buffer.append("<LastEditTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LastEditTime>");
		}
	}
	if (keepRootTag)
		buffer.append("</PublishHistory>");
}

bool CPublishHistory::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_PublishBy.unmarshall(rpc_request, "PublishBy", basepath);
	hasValue |= m_CreatedTime.unmarshall(rpc_request, "CreatedTime", basepath);
	hasValue |= m_LastEditBy.unmarshall(rpc_request, "LastEditBy", basepath);
	hasValue |= m_LastEditTime.unmarshall(rpc_request, "LastEditTime", basepath);
	return hasValue;
}

bool CPublishHistory::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_PublishBy.unmarshall(ctx, soapval, "PublishBy");
	hasValue |= m_CreatedTime.unmarshall(ctx, soapval, "CreatedTime");
	hasValue |= m_LastEditBy.unmarshall(ctx, soapval, "LastEditBy");
	hasValue |= m_LastEditTime.unmarshall(ctx, soapval, "LastEditTime");
	return hasValue;
}

bool CPublishHistory::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_PublishBy.unmarshall(ctx, params, attachments, "PublishBy", basepath);
	hasValue |= m_CreatedTime.unmarshall(ctx, params, attachments, "CreatedTime", basepath);
	hasValue |= m_LastEditBy.unmarshall(ctx, params, attachments, "LastEditBy", basepath);
	hasValue |= m_LastEditTime.unmarshall(ctx, params, attachments, "LastEditTime", basepath);
	return hasValue;
}

const char * CPublishHistory::getPublishBy() { return m_PublishBy.query();}
const char * CPublishHistory::getCreatedTime() { return m_CreatedTime.query();}
const char * CPublishHistory::getLastEditBy() { return m_LastEditBy.query();}
const char * CPublishHistory::getLastEditTime() { return m_LastEditTime.query();}
void CPublishHistory::setPublishBy(const char * val){ m_PublishBy.set(val); }
void CPublishHistory::setCreatedTime(const char * val){ m_CreatedTime.set(val); }
void CPublishHistory::setLastEditBy(const char * val){ m_LastEditBy.set(val); }
void CPublishHistory::setLastEditTime(const char * val){ m_LastEditTime.set(val); }
extern "C"  IEspPublishHistory *createPublishHistory(const char *serv, const char *msgname){return ((IEspPublishHistory *)new CPublishHistory(serv /*, msgname*/));}
extern "C"  IClientPublishHistory *createClientPublishHistory(const char *serv, const char *msgname){return ((IClientPublishHistory *)new CPublishHistory(serv /*, msgname*/));}

//=======================================================
// class CESDLBinding Implementation
//=======================================================

CESDLBinding::CESDLBinding(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilIgnore),m_EspProcess(nilIgnore),m_Port(nilIgnore),m_EspBinding(nilIgnore),m_History(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLBinding");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CESDLBinding::CESDLBinding(const char *serviceName, const char *bc)
	: m_Id(nilIgnore),m_EspProcess(nilIgnore),m_Port(nilIgnore),m_EspBinding(nilIgnore),m_History(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLBinding");
}

StringBuffer &CESDLBinding::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcess\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ESDLBinding","Port")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Port\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ESDLBinding","EspBinding")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspBinding\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ESDLBinding","History")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"History\" type=\"tns:PublishHistory\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("ESDLBinding","History"))
			CPublishHistory::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CESDLBinding::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CESDLBinding::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ESDLBinding","Port",1.4);
	info.addMaxVersion("ESDLBinding","EspBinding",1.3);
	info.addMinVersion("ESDLBinding","History",1.4);
	if (!added.getValue("PublishHistory"))
	{
		added.setValue("PublishHistory",1);
		CPublishHistory::getMapInfo(info,added);
	}
}

StringBuffer &CESDLBinding::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspProcess");
	form.appendf("  <tr><td><b>EspProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ESDLBinding","Port")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("Port");
		form.appendf("  <tr><td><b>Port: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ESDLBinding","EspBinding")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspBinding");
		form.appendf("  <tr><td><b>EspBinding: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ESDLBinding","History")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("History");
		form.append("<tr>").append("<td><b>History: </b></td><td><hr/>");
		CPublishHistory::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CESDLBinding::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CESDLBinding::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_EspProcess.marshall(rpc_resp, "EspProcess", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_Port.marshall(rpc_resp, "Port", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspBinding.marshall(rpc_resp, "EspBinding", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_History.marshall(rpc_resp, "History", "", "", "");
}


void CESDLBinding::copy(CESDLBinding &from)
{
	m_Id.copy(from.m_Id);
	m_EspProcess.copy(from.m_EspProcess);
	m_Port.copy(from.m_Port);
	m_EspBinding.copy(from.m_EspBinding);
	m_History.copy(from.m_History);
}


void CESDLBinding::copy(IConstESDLBinding &ifrom)
{
	setId(ifrom.getId());
	setEspProcess(ifrom.getEspProcess());
	setPort(ifrom.getPort());
	setEspBinding(ifrom.getEspBinding());
	setHistory(ifrom.getHistory());
}


void CESDLBinding::getAttributes(IProperties &attributes)
{
}


void CESDLBinding::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_EspProcess.toStr(ctx, buffer, "EspProcess", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_Port.toStr(ctx, buffer, "Port", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspBinding.toStr(ctx, buffer, "EspBinding", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_History.toStr(ctx, buffer, "History", "", false, "", "");
}


void CESDLBinding::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CESDLBinding::serializer(IEspContext* ctx, IConstESDLBinding &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ESDLBinding>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field EspProcess
	{
		const char* s = src.getEspProcess();
		if (s && *s)
		{
			buffer.append("<EspProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcess>");
		}
	}
	// field Port
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		int n = src.getPort();
		if (n)
			buffer.appendf("<Port>%d</Port>", n);
	}
	// field EspBinding
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspBinding();
		if (s && *s)
		{
			buffer.append("<EspBinding>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspBinding>");
		}
	}
	// field History
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		StringBuffer tmp;
		CPublishHistory::serializer(ctx,src.getHistory(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<History>%s</History>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</ESDLBinding>");
}

bool CESDLBinding::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_EspProcess.unmarshall(rpc_request, "EspProcess", basepath);
	hasValue |= m_Port.unmarshall(rpc_request, "Port", basepath);
	hasValue |= m_EspBinding.unmarshall(rpc_request, "EspBinding", basepath);
	hasValue |= m_History.unmarshall(rpc_request, "History", basepath);
	return hasValue;
}

bool CESDLBinding::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_EspProcess.unmarshall(ctx, soapval, "EspProcess");
	hasValue |= m_Port.unmarshall(ctx, soapval, "Port");
	hasValue |= m_EspBinding.unmarshall(ctx, soapval, "EspBinding");
	hasValue |= m_History.unmarshall(ctx, soapval, "History");
	return hasValue;
}

bool CESDLBinding::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_EspProcess.unmarshall(ctx, params, attachments, "EspProcess", basepath);
	hasValue |= m_Port.unmarshall(ctx, params, attachments, "Port", basepath);
	hasValue |= m_EspBinding.unmarshall(ctx, params, attachments, "EspBinding", basepath);
	hasValue |= m_History.unmarshall(ctx, params, attachments, "History", basepath);
	return hasValue;
}

const char * CESDLBinding::getId() { return m_Id.query();}
const char * CESDLBinding::getEspProcess() { return m_EspProcess.query();}
int CESDLBinding::getPort() { return m_Port;}
const char * CESDLBinding::getEspBinding() { return m_EspBinding.query();}
IConstPublishHistory & CESDLBinding::getHistory() { return (IConstPublishHistory &) m_History.getValue();}
void CESDLBinding::setId(const char * val){ m_Id.set(val); }
void CESDLBinding::setEspProcess(const char * val){ m_EspProcess.set(val); }
void CESDLBinding::setPort(int val){ m_Port=val; }
void CESDLBinding::setEspBinding(const char * val){ m_EspBinding.set(val); }
IEspPublishHistory & CESDLBinding::updateHistory(){ return (IEspPublishHistory &) m_History.getValue(); }
void CESDLBinding::setHistory(IConstPublishHistory &ifrom){ m_History.copy(ifrom); }
extern "C"  IEspESDLBinding *createESDLBinding(const char *serv, const char *msgname){return ((IEspESDLBinding *)new CESDLBinding(serv /*, msgname*/));}
extern "C"  IClientESDLBinding *createClientESDLBinding(const char *serv, const char *msgname){return ((IClientESDLBinding *)new CESDLBinding(serv /*, msgname*/));}

//=======================================================
// class CESDLService Implementation
//=======================================================

CESDLService::CESDLService(const char *serviceName, IRpcMessageBinding *init)
	: m_Methods(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLService");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CESDLService::CESDLService(const char *serviceName, const char *bc)
	: m_Methods(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLService");
}

StringBuffer &CESDLService::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Methods\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Method\" type=\"tns:MethodConfig\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CMethodConfig::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CESDLService::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CESDLService::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("MethodConfig"))
	{
		added.setValue("MethodConfig",1);
		CMethodConfig::getMapInfo(info,added);
	}
}

StringBuffer &CESDLService::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Methods");
	form.appendf("<tr><td><b>Methods: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CESDLService::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CESDLService::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Methods.marshall(rpc_resp, "Methods", "Method");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
}


void CESDLService::copy(CESDLService &from)
{
	m_Methods.copy(from.m_Methods);
	m_Name.copy(from.m_Name);
}


void CESDLService::copy(IConstESDLService &ifrom)
{
	setMethods(ifrom.getMethods());
	setName(ifrom.getName());
}


void CESDLService::getAttributes(IProperties &attributes)
{
}


void CESDLService::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Methods.toStr(ctx, buffer, "Methods", "Method");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
}


void CESDLService::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CESDLService::serializer(IEspContext* ctx, IConstESDLService &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ESDLService>");
	// field Methods
	{
		IArrayOf<IConstMethodConfig>& v = src.getMethods();
		int size = v.length();
		if (size>0)
			buffer.append("<Methods>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Method>");
			CMethodConfig::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Method>");
		}
		if (size>0)
			buffer.append("</Methods>");
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	if (keepRootTag)
		buffer.append("</ESDLService>");
}

bool CESDLService::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Methods.unmarshall(rpc_request, "Methods", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	return hasValue;
}

bool CESDLService::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Methods.unmarshall(ctx, soapval, "Methods");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	return hasValue;
}

bool CESDLService::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Methods.unmarshall(ctx, params, attachments, "Methods", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	return hasValue;
}

IArrayOf<IConstMethodConfig> & CESDLService::getMethods() { return (IArrayOf<IConstMethodConfig> &) m_Methods; }
const char * CESDLService::getName() { return m_Name.query();}
void CESDLService::setMethods(IArrayOf<IEspMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IEspMethodConfig &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CESDLService::setMethods(IArrayOf<IConstMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IConstMethodConfig &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CESDLService::setName(const char * val){ m_Name.set(val); }
extern "C"  IEspESDLService *createESDLService(const char *serv, const char *msgname){return ((IEspESDLService *)new CESDLService(serv /*, msgname*/));}
extern "C"  IClientESDLService *createClientESDLService(const char *serv, const char *msgname){return ((IClientESDLService *)new CESDLService(serv /*, msgname*/));}

//=======================================================
// class CESDLDefinition Implementation
//=======================================================

CESDLDefinition::CESDLDefinition(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Seq(nilIgnore),m_Id(nilIgnore),m_Interface(nilIgnore),m_ESDLServices(nilIgnore),m_Services(nilIgnore),m_History(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLDefinition");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CESDLDefinition::CESDLDefinition(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Seq(nilIgnore),m_Id(nilIgnore),m_Interface(nilIgnore),m_ESDLServices(nilIgnore),m_Services(nilIgnore),m_History(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLDefinition");
}

StringBuffer &CESDLDefinition::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Seq\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ESDLDefinition","Interface")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Interface\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ESDLDefinition","ESDLServices")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLServices\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"Name\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("ESDLDefinition","Services")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Services\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Service\" type=\"tns:ESDLService\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!context.suppressed("ESDLDefinition","History")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"History\" type=\"tns:PublishHistory\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("ESDLDefinition","Services"))
			CESDLService::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ESDLDefinition","History"))
			CPublishHistory::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CESDLDefinition::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CESDLDefinition::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ESDLDefinition","Interface",1.1);
	info.addMinVersion("ESDLDefinition","ESDLServices",1.2);
	info.addMaxVersion("ESDLDefinition","ESDLServices",1.3);
	info.addMinVersion("ESDLDefinition","Services",1.4);
	info.addMinVersion("ESDLDefinition","History",1.4);
	if (!added.getValue("ESDLService"))
	{
		added.setValue("ESDLService",1);
		CESDLService::getMapInfo(info,added);
	}
	if (!added.getValue("PublishHistory"))
	{
		added.setValue("PublishHistory",1);
		CPublishHistory::getMapInfo(info,added);
	}
}

StringBuffer &CESDLDefinition::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Seq");
	form.appendf("  <tr><td><b>Seq: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ESDLDefinition","Interface")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Interface");
		form.appendf("  <tr><td><b>Interface: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ESDLDefinition","ESDLServices")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ESDLServices");
		form.appendf("<tr><td><b>ESDLServices: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("ESDLDefinition","Services")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Services");
		form.appendf("<tr><td><b>Services: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("ESDLDefinition","History")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("History");
		form.append("<tr>").append("<td><b>History: </b></td><td><hr/>");
		CPublishHistory::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CESDLDefinition::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CESDLDefinition::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Seq.marshall(rpc_resp, "Seq", "", "", "");
	m_Id.marshall(rpc_resp, "Id", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_Interface.marshall(rpc_resp, "Interface", "", "", "");
	if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
		m_ESDLServices.marshall(rpc_resp, "ESDLServices", "Name");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_Services.marshall(rpc_resp, "Services", "Service");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_History.marshall(rpc_resp, "History", "", "", "");
}


void CESDLDefinition::copy(CESDLDefinition &from)
{
	m_Name.copy(from.m_Name);
	m_Seq.copy(from.m_Seq);
	m_Id.copy(from.m_Id);
	m_Interface.copy(from.m_Interface);
	m_ESDLServices.copy(from.m_ESDLServices);
	m_Services.copy(from.m_Services);
	m_History.copy(from.m_History);
}


void CESDLDefinition::copy(IConstESDLDefinition &ifrom)
{
	setName(ifrom.getName());
	setSeq(ifrom.getSeq());
	setId(ifrom.getId());
	setInterface(ifrom.getInterface());
	setESDLServices(ifrom.getESDLServices());
	setServices(ifrom.getServices());
	setHistory(ifrom.getHistory());
}


void CESDLDefinition::getAttributes(IProperties &attributes)
{
}


void CESDLDefinition::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Seq.toStr(ctx, buffer, "Seq", "", true, "", "");
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_Interface.toStr(ctx, buffer, "Interface", "", true, "", "");
	if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
		m_ESDLServices.toStr(ctx, buffer, "ESDLServices", "Name");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_Services.toStr(ctx, buffer, "Services", "Service");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_History.toStr(ctx, buffer, "History", "", false, "", "");
}


void CESDLDefinition::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CESDLDefinition::serializer(IEspContext* ctx, IConstESDLDefinition &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ESDLDefinition>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Seq
	{
		int n = src.getSeq();
		if (n)
			buffer.appendf("<Seq>%d</Seq>", n);
	}
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field Interface
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		const char* s = src.getInterface();
		if (s && *s)
		{
			buffer.append("<Interface>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Interface>");
		}
	}
	// field ESDLServices
	if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
	{
		StringArray& v = src.getESDLServices();
		if (v.length()>0)
			buffer.append("<ESDLServices>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Name>%s</Name>",v.item(i));
		if (v.length()>0)
			buffer.append("</ESDLServices>");
	}
	// field Services
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		IArrayOf<IConstESDLService>& v = src.getServices();
		int size = v.length();
		if (size>0)
			buffer.append("<Services>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Service>");
			CESDLService::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Service>");
		}
		if (size>0)
			buffer.append("</Services>");
	}
	// field History
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		StringBuffer tmp;
		CPublishHistory::serializer(ctx,src.getHistory(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<History>%s</History>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</ESDLDefinition>");
}

bool CESDLDefinition::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Seq.unmarshall(rpc_request, "Seq", basepath);
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_Interface.unmarshall(rpc_request, "Interface", basepath);
	hasValue |= m_ESDLServices.unmarshall(rpc_request, "ESDLServices", basepath);
	hasValue |= m_Services.unmarshall(rpc_request, "Services", basepath);
	hasValue |= m_History.unmarshall(rpc_request, "History", basepath);
	return hasValue;
}

bool CESDLDefinition::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Seq.unmarshall(ctx, soapval, "Seq");
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_Interface.unmarshall(ctx, soapval, "Interface");
	hasValue |= m_ESDLServices.unmarshall(ctx, soapval, "ESDLServices");
	hasValue |= m_Services.unmarshall(ctx, soapval, "Services");
	hasValue |= m_History.unmarshall(ctx, soapval, "History");
	return hasValue;
}

bool CESDLDefinition::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Seq.unmarshall(ctx, params, attachments, "Seq", basepath);
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_Interface.unmarshall(ctx, params, attachments, "Interface", basepath);
	hasValue |= m_ESDLServices.unmarshall(ctx, params, attachments, "ESDLServices", basepath);
	hasValue |= m_Services.unmarshall(ctx, params, attachments, "Services", basepath);
	hasValue |= m_History.unmarshall(ctx, params, attachments, "History", basepath);
	return hasValue;
}

const char * CESDLDefinition::getName() { return m_Name.query();}
int CESDLDefinition::getSeq() { return m_Seq;}
const char * CESDLDefinition::getId() { return m_Id.query();}
const char * CESDLDefinition::getInterface() { return m_Interface.query();}
StringArray & CESDLDefinition::getESDLServices() { return (StringArray &) m_ESDLServices; }
IArrayOf<IConstESDLService> & CESDLDefinition::getServices() { return (IArrayOf<IConstESDLService> &) m_Services; }
IConstPublishHistory & CESDLDefinition::getHistory() { return (IConstPublishHistory &) m_History.getValue();}
void CESDLDefinition::setName(const char * val){ m_Name.set(val); }
void CESDLDefinition::setSeq(int val){ m_Seq=val; }
void CESDLDefinition::setId(const char * val){ m_Id.set(val); }
void CESDLDefinition::setInterface(const char * val){ m_Interface.set(val); }
void CESDLDefinition::setESDLServices(StringArray &val){ m_ESDLServices->kill();  CloneArray(m_ESDLServices.getValue(), val); }
void CESDLDefinition::setServices(IArrayOf<IEspESDLService> &val)
{
	m_Services->kill();
	IArrayOf<IConstESDLService> &target = m_Services.getValue();
	ForEachItemIn(idx, val)
	{
		IEspESDLService &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CESDLDefinition::setServices(IArrayOf<IConstESDLService> &val)
{
	m_Services->kill();
	IArrayOf<IConstESDLService> &target = m_Services.getValue();
	ForEachItemIn(idx, val)
	{
		IConstESDLService &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
IEspPublishHistory & CESDLDefinition::updateHistory(){ return (IEspPublishHistory &) m_History.getValue(); }
void CESDLDefinition::setHistory(IConstPublishHistory &ifrom){ m_History.copy(ifrom); }
extern "C"  IEspESDLDefinition *createESDLDefinition(const char *serv, const char *msgname){return ((IEspESDLDefinition *)new CESDLDefinition(serv /*, msgname*/));}
extern "C"  IClientESDLDefinition *createClientESDLDefinition(const char *serv, const char *msgname){return ((IClientESDLDefinition *)new CESDLDefinition(serv /*, msgname*/));}

//=======================================================
// class CESDLBindingContents Implementation
//=======================================================

CESDLBindingContents::CESDLBindingContents(const char *serviceName, IRpcMessageBinding *init)
	: m_Definition(serviceName, nilIgnore),m_Configuration(serviceName, nilIgnore),m_History(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLBindingContents");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CESDLBindingContents::CESDLBindingContents(const char *serviceName, const char *bc)
	: m_Definition(serviceName, nilIgnore),m_Configuration(serviceName, nilIgnore),m_History(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESDLBindingContents");
}

StringBuffer &CESDLBindingContents::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Definition\" type=\"tns:ESDLDefinition\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Configuration\" type=\"tns:ESDLConfiguration\"/>\n");
		if (!context.suppressed("ESDLBindingContents","History")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"History\" type=\"tns:PublishHistory\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CESDLDefinition::getXsdDefinition(context, request, schema, added);
		CESDLConfiguration::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ESDLBindingContents","History"))
			CPublishHistory::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CESDLBindingContents::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CESDLBindingContents::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ESDLBindingContents","History",1.4);
	if (!added.getValue("ESDLConfiguration"))
	{
		added.setValue("ESDLConfiguration",1);
		CESDLConfiguration::getMapInfo(info,added);
	}
	if (!added.getValue("ESDLDefinition"))
	{
		added.setValue("ESDLDefinition",1);
		CESDLDefinition::getMapInfo(info,added);
	}
	if (!added.getValue("PublishHistory"))
	{
		added.setValue("PublishHistory",1);
		CPublishHistory::getMapInfo(info,added);
	}
}

StringBuffer &CESDLBindingContents::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Definition");
	form.append("<tr>").append("<td><b>Definition: </b></td><td><hr/>");
	CESDLDefinition::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Configuration");
	form.append("<tr>").append("<td><b>Configuration: </b></td><td><hr/>");
	CESDLConfiguration::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (!context.suppressed("ESDLBindingContents","History")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("History");
		form.append("<tr>").append("<td><b>History: </b></td><td><hr/>");
		CPublishHistory::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CESDLBindingContents::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CESDLBindingContents::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Definition.marshall(rpc_resp, "Definition", "", "", "");
	m_Configuration.marshall(rpc_resp, "Configuration", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_History.marshall(rpc_resp, "History", "", "", "");
}


void CESDLBindingContents::copy(CESDLBindingContents &from)
{
	m_Definition.copy(from.m_Definition);
	m_Configuration.copy(from.m_Configuration);
	m_History.copy(from.m_History);
}


void CESDLBindingContents::copy(IConstESDLBindingContents &ifrom)
{
	setDefinition(ifrom.getDefinition());
	setConfiguration(ifrom.getConfiguration());
	setHistory(ifrom.getHistory());
}


void CESDLBindingContents::getAttributes(IProperties &attributes)
{
}


void CESDLBindingContents::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Definition.toStr(ctx, buffer, "Definition", "", false, "", "");
	m_Configuration.toStr(ctx, buffer, "Configuration", "", false, "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_History.toStr(ctx, buffer, "History", "", false, "", "");
}


void CESDLBindingContents::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CESDLBindingContents::serializer(IEspContext* ctx, IConstESDLBindingContents &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ESDLBindingContents>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Definition
	{
		StringBuffer tmp;
		CESDLDefinition::serializer(ctx,src.getDefinition(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Definition>%s</Definition>",tmp.str());
	}
	// field Configuration
	{
		StringBuffer tmp;
		CESDLConfiguration::serializer(ctx,src.getConfiguration(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Configuration>%s</Configuration>",tmp.str());
	}
	// field History
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		StringBuffer tmp;
		CPublishHistory::serializer(ctx,src.getHistory(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<History>%s</History>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</ESDLBindingContents>");
}

bool CESDLBindingContents::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Definition.unmarshall(rpc_request, "Definition", basepath);
	hasValue |= m_Configuration.unmarshall(rpc_request, "Configuration", basepath);
	hasValue |= m_History.unmarshall(rpc_request, "History", basepath);
	return hasValue;
}

bool CESDLBindingContents::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Definition.unmarshall(ctx, soapval, "Definition");
	hasValue |= m_Configuration.unmarshall(ctx, soapval, "Configuration");
	hasValue |= m_History.unmarshall(ctx, soapval, "History");
	return hasValue;
}

bool CESDLBindingContents::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Definition.unmarshall(ctx, params, attachments, "Definition", basepath);
	hasValue |= m_Configuration.unmarshall(ctx, params, attachments, "Configuration", basepath);
	hasValue |= m_History.unmarshall(ctx, params, attachments, "History", basepath);
	return hasValue;
}

IConstESDLDefinition & CESDLBindingContents::getDefinition() { return (IConstESDLDefinition &) m_Definition.getValue();}
IConstESDLConfiguration & CESDLBindingContents::getConfiguration() { return (IConstESDLConfiguration &) m_Configuration.getValue();}
IConstPublishHistory & CESDLBindingContents::getHistory() { return (IConstPublishHistory &) m_History.getValue();}
IEspESDLDefinition & CESDLBindingContents::updateDefinition(){ return (IEspESDLDefinition &) m_Definition.getValue(); }
void CESDLBindingContents::setDefinition(IConstESDLDefinition &ifrom){ m_Definition.copy(ifrom); }
IEspESDLConfiguration & CESDLBindingContents::updateConfiguration(){ return (IEspESDLConfiguration &) m_Configuration.getValue(); }
void CESDLBindingContents::setConfiguration(IConstESDLConfiguration &ifrom){ m_Configuration.copy(ifrom); }
IEspPublishHistory & CESDLBindingContents::updateHistory(){ return (IEspPublishHistory &) m_History.getValue(); }
void CESDLBindingContents::setHistory(IConstPublishHistory &ifrom){ m_History.copy(ifrom); }
extern "C"  IEspESDLBindingContents *createESDLBindingContents(const char *serv, const char *msgname){return ((IEspESDLBindingContents *)new CESDLBindingContents(serv /*, msgname*/));}
extern "C"  IClientESDLBindingContents *createClientESDLBindingContents(const char *serv, const char *msgname){return ((IClientESDLBindingContents *)new CESDLBindingContents(serv /*, msgname*/));}

//=======================================================
// class CGetESDLDefinitionRequest Implementation
//=======================================================

CGetESDLDefinitionRequest::CGetESDLDefinitionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilRemove),m_Name(nilRemove),m_Seq(nilRemove),m_ServiceName(nilRemove),m_ReportMethodsAvailable(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CGetESDLDefinitionRequest::CGetESDLDefinitionRequest(const char *serviceName, const char *bc)
	: m_Id(nilRemove),m_Name(nilRemove),m_Seq(nilRemove),m_ServiceName(nilRemove),m_ReportMethodsAvailable(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionRequest");
}

CGetESDLDefinitionRequest::CGetESDLDefinitionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Id(nilRemove),m_Name(nilRemove),m_Seq(nilRemove),m_ServiceName(nilRemove),m_ReportMethodsAvailable(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CGetESDLDefinitionRequest::CGetESDLDefinitionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Id(nilRemove),m_Name(nilRemove),m_Seq(nilRemove),m_ServiceName(nilRemove),m_ReportMethodsAvailable(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CGetESDLDefinitionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("GetESDLDefinitionRequest","Name")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("GetESDLDefinitionRequest","Seq")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Seq\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("GetESDLDefinitionRequest","ReportMethodsAvailable")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ReportMethodsAvailable\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CGetESDLDefinitionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CGetESDLDefinitionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("GetESDLDefinitionRequest","Name",1.3);
	info.addMinVersion("GetESDLDefinitionRequest","Seq",1.3);
	info.addMinVersion("GetESDLDefinitionRequest","ReportMethodsAvailable",1.2);
}

StringBuffer &CGetESDLDefinitionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("GetESDLDefinitionRequest","Name")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Name");
		form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("GetESDLDefinitionRequest","Seq")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("Seq");
		form.appendf("  <tr><td><b>Seq: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ServiceName");
	form.appendf("  <tr><td><b>ServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("GetESDLDefinitionRequest","ReportMethodsAvailable")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ReportMethodsAvailable");
		
	form.appendf("  <tr><td><b>ReportMethodsAvailable? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CGetESDLDefinitionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CGetESDLDefinitionRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_Name.marshall(rpc_resp, "Name", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_Seq.marshall(rpc_resp, "Seq", "", "", "");
	m_ServiceName.marshall(rpc_resp, "ServiceName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_ReportMethodsAvailable.marshall(rpc_resp, "ReportMethodsAvailable", "", "", "");
}


void CGetESDLDefinitionRequest::copy(CGetESDLDefinitionRequest &from)
{
	m_Id.copy(from.m_Id);
	m_Name.copy(from.m_Name);
	m_Seq.copy(from.m_Seq);
	m_ServiceName.copy(from.m_ServiceName);
	m_ReportMethodsAvailable.copy(from.m_ReportMethodsAvailable);
}


void CGetESDLDefinitionRequest::copy(IConstGetESDLDefinitionRequest &ifrom)
{
	setId(ifrom.getId());
	setName(ifrom.getName());
	setSeq(ifrom.getSeq());
	setServiceName(ifrom.getServiceName());
	setReportMethodsAvailable(ifrom.getReportMethodsAvailable());
}


void CGetESDLDefinitionRequest::getAttributes(IProperties &attributes)
{
}


void CGetESDLDefinitionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_Seq.toStr(ctx, buffer, "Seq", "", true, "", "");
	m_ServiceName.toStr(ctx, buffer, "ServiceName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_ReportMethodsAvailable.toStr(ctx, buffer, "ReportMethodsAvailable", "", true, "", "");
}


void CGetESDLDefinitionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CGetESDLDefinitionRequest::serializer(IEspContext* ctx, IConstGetESDLDefinitionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<GetESDLDefinitionRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field Name
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Seq
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		int n = src.getSeq();
		if (n)
			buffer.appendf("<Seq>%d</Seq>", n);
	}
	// field ServiceName
	{
		const char* s = src.getServiceName();
		if (s && *s)
		{
			buffer.append("<ServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ServiceName>");
		}
	}
	// field ReportMethodsAvailable
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		bool b = src.getReportMethodsAvailable();
		if (b)
			buffer.appendf("<ReportMethodsAvailable>1</ReportMethodsAvailable>");
	}
	if (keepRootTag)
		buffer.append("</GetESDLDefinitionRequest>");
}

bool CGetESDLDefinitionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Seq.unmarshall(rpc_request, "Seq", basepath);
	hasValue |= m_ServiceName.unmarshall(rpc_request, "ServiceName", basepath);
	hasValue |= m_ReportMethodsAvailable.unmarshall(rpc_request, "ReportMethodsAvailable", basepath);
	return hasValue;
}

bool CGetESDLDefinitionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Seq.unmarshall(ctx, soapval, "Seq");
	hasValue |= m_ServiceName.unmarshall(ctx, soapval, "ServiceName");
	hasValue |= m_ReportMethodsAvailable.unmarshall(ctx, soapval, "ReportMethodsAvailable");
	return hasValue;
}

bool CGetESDLDefinitionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Seq.unmarshall(ctx, params, attachments, "Seq", basepath);
	hasValue |= m_ServiceName.unmarshall(ctx, params, attachments, "ServiceName", basepath);
	hasValue |= m_ReportMethodsAvailable.unmarshall(ctx, params, attachments, "ReportMethodsAvailable", basepath);
	return hasValue;
}

const char * CGetESDLDefinitionRequest::getId() { return m_Id.query();}
const char * CGetESDLDefinitionRequest::getName() { return m_Name.query();}
bool CGetESDLDefinitionRequest::getSeq_isNull(){return m_Seq.is_nil();}
int CGetESDLDefinitionRequest::getSeq() { return m_Seq;}
const char * CGetESDLDefinitionRequest::getServiceName() { return m_ServiceName.query();}
bool CGetESDLDefinitionRequest::getReportMethodsAvailable_isNull(){return m_ReportMethodsAvailable.is_nil();}
bool CGetESDLDefinitionRequest::getReportMethodsAvailable() { return m_ReportMethodsAvailable;}
void CGetESDLDefinitionRequest::setId(const char * val){ m_Id.set(val); }
void CGetESDLDefinitionRequest::setName(const char * val){ m_Name.set(val); }
void CGetESDLDefinitionRequest::setSeq_null(){ m_Seq.Nil(); }void CGetESDLDefinitionRequest::setSeq(int val){ m_Seq=val; }
void CGetESDLDefinitionRequest::setServiceName(const char * val){ m_ServiceName.set(val); }
void CGetESDLDefinitionRequest::setReportMethodsAvailable_null(){ m_ReportMethodsAvailable.Nil(); }void CGetESDLDefinitionRequest::setReportMethodsAvailable(bool val){ m_ReportMethodsAvailable=val; }
extern "C"  IEspGetESDLDefinitionRequest *createGetESDLDefinitionRequest(const char *serv){return ((IEspGetESDLDefinitionRequest *)new CGetESDLDefinitionRequest(serv));}
extern "C"  IClientGetESDLDefinitionRequest *createClientGetESDLDefinitionRequest(const char *serv){return ((IClientGetESDLDefinitionRequest *)new CGetESDLDefinitionRequest(serv));}

//=======================================================
// class CGetESDLDefinitionResponse Implementation
//=======================================================

CGetESDLDefinitionResponse::CGetESDLDefinitionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_status(serviceName, nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CGetESDLDefinitionResponse::CGetESDLDefinitionResponse(const char *serviceName, const char *bc)
	: m_Id(nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_status(serviceName, nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionResponse");
}

CGetESDLDefinitionResponse::CGetESDLDefinitionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Id(nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_status(serviceName, nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CGetESDLDefinitionResponse::CGetESDLDefinitionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Id(nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_status(serviceName, nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLDefinitionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CGetESDLDefinitionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!context.suppressed("GetESDLDefinitionResponse","Id")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("GetESDLDefinitionResponse","ESDLServices")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLServices\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"Name\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("GetESDLDefinitionResponse","XMLDefinition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"XMLDefinition\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"status\" type=\"tns:BaseESDLStatus\"/>\n");
		if (!context.suppressed("GetESDLDefinitionResponse","Methods")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Methods\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Method\" type=\"tns:MethodConfig\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!context.suppressed("GetESDLDefinitionResponse","Definition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Definition\" type=\"tns:ESDLDefinition\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CBaseESDLStatus::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("GetESDLDefinitionResponse","Methods"))
			CMethodConfig::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("GetESDLDefinitionResponse","Definition"))
			CESDLDefinition::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CGetESDLDefinitionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CGetESDLDefinitionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMaxVersion("GetESDLDefinitionResponse","Id",1.3);
	info.addMinVersion("GetESDLDefinitionResponse","ESDLServices",1.2);
	info.addMaxVersion("GetESDLDefinitionResponse","ESDLServices",1.3);
	info.addMaxVersion("GetESDLDefinitionResponse","XMLDefinition",1.3);
	info.addMaxVersion("GetESDLDefinitionResponse","Methods",1.3);
	info.addMinVersion("GetESDLDefinitionResponse","Definition",1.4);
	if (!added.getValue("BaseESDLStatus"))
	{
		added.setValue("BaseESDLStatus",1);
		CBaseESDLStatus::getMapInfo(info,added);
	}
	if (!added.getValue("ESDLDefinition"))
	{
		added.setValue("ESDLDefinition",1);
		CESDLDefinition::getMapInfo(info,added);
	}
	if (!added.getValue("MethodConfig"))
	{
		added.setValue("MethodConfig",1);
		CMethodConfig::getMapInfo(info,added);
	}
}

StringBuffer &CGetESDLDefinitionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("GetESDLDefinitionResponse","Id")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Id");
		form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("GetESDLDefinitionResponse","ESDLServices")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ESDLServices");
		form.appendf("<tr><td><b>ESDLServices: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("GetESDLDefinitionResponse","XMLDefinition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("XMLDefinition");
		form.appendf("  <tr><td><b>XMLDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("status");
	form.append("<tr>").append("<td><b>status: </b></td><td><hr/>");
	CBaseESDLStatus::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (!context.suppressed("GetESDLDefinitionResponse","Methods")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Methods");
		form.appendf("<tr><td><b>Methods: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("GetESDLDefinitionResponse","Definition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Definition");
		form.append("<tr>").append("<td><b>Definition: </b></td><td><hr/>");
		CESDLDefinition::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CGetESDLDefinitionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CGetESDLDefinitionResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_Id.marshall(rpc_resp, "Id", "", "", "");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_ESDLServices.marshall(rpc_resp, "ESDLServices", "Name");
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_XMLDefinition.marshall(rpc_resp, "XMLDefinition", "", "", "");
		m_status.marshall(rpc_resp, "status", "", "", "");
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_Methods.marshall(rpc_resp, "Methods", "Method");
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_Definition.marshall(rpc_resp, "Definition", "", "", "");
	}
}


void CGetESDLDefinitionResponse::copy(CGetESDLDefinitionResponse &from)
{
	m_Id.copy(from.m_Id);
	m_ESDLServices.copy(from.m_ESDLServices);
	m_XMLDefinition.copy(from.m_XMLDefinition);
	m_status.copy(from.m_status);
	m_Methods.copy(from.m_Methods);
	m_Definition.copy(from.m_Definition);
}


void CGetESDLDefinitionResponse::copy(IConstGetESDLDefinitionResponse &ifrom)
{
	setId(ifrom.getId());
	setESDLServices(ifrom.getESDLServices());
	setXMLDefinition(ifrom.getXMLDefinition());
	setStatus(ifrom.getStatus());
	setMethods(ifrom.getMethods());
	setDefinition(ifrom.getDefinition());
}


void CGetESDLDefinitionResponse::getAttributes(IProperties &attributes)
{
}


void CGetESDLDefinitionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_ESDLServices.toStr(ctx, buffer, "ESDLServices", "Name");
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_XMLDefinition.toStr(ctx, buffer, "XMLDefinition", "", true, "", "");
		m_status.toStr(ctx, buffer, "status", "", false, "", "");
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_Methods.toStr(ctx, buffer, "Methods", "Method");
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_Definition.toStr(ctx, buffer, "Definition", "", false, "", "");
	}
}


void CGetESDLDefinitionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CGetESDLDefinitionResponse::serializer(IEspContext* ctx, IConstGetESDLDefinitionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<GetESDLDefinitionResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Id
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field ESDLServices
	if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
	{
		StringArray& v = src.getESDLServices();
		if (v.length()>0)
			buffer.append("<ESDLServices>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Name>%s</Name>",v.item(i));
		if (v.length()>0)
			buffer.append("</ESDLServices>");
	}
	// field XMLDefinition
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getXMLDefinition();
		if (s && *s)
		{
			buffer.append("<XMLDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XMLDefinition>");
		}
	}
	// field status
	{
		StringBuffer tmp;
		CBaseESDLStatus::serializer(ctx,src.getStatus(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<status>%s</status>",tmp.str());
	}
	// field Methods
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		IArrayOf<IConstMethodConfig>& v = src.getMethods();
		int size = v.length();
		if (size>0)
			buffer.append("<Methods>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Method>");
			CMethodConfig::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Method>");
		}
		if (size>0)
			buffer.append("</Methods>");
	}
	// field Definition
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		StringBuffer tmp;
		CESDLDefinition::serializer(ctx,src.getDefinition(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Definition>%s</Definition>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</GetESDLDefinitionResponse>");
}

bool CGetESDLDefinitionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
		hasValue |= m_ESDLServices.unmarshall(rpc_request, "ESDLServices", basepath);
		hasValue |= m_XMLDefinition.unmarshall(rpc_request, "XMLDefinition", basepath);
		hasValue |= m_status.unmarshall(rpc_request, "status", basepath);
		hasValue |= m_Methods.unmarshall(rpc_request, "Methods", basepath);
		hasValue |= m_Definition.unmarshall(rpc_request, "Definition", basepath);
	}
	return hasValue;
}

bool CGetESDLDefinitionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_ESDLServices.unmarshall(ctx, soapval, "ESDLServices");
	hasValue |= m_XMLDefinition.unmarshall(ctx, soapval, "XMLDefinition");
	hasValue |= m_status.unmarshall(ctx, soapval, "status");
	hasValue |= m_Methods.unmarshall(ctx, soapval, "Methods");
	hasValue |= m_Definition.unmarshall(ctx, soapval, "Definition");
	return hasValue;
}

bool CGetESDLDefinitionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_ESDLServices.unmarshall(ctx, params, attachments, "ESDLServices", basepath);
	hasValue |= m_XMLDefinition.unmarshall(ctx, params, attachments, "XMLDefinition", basepath);
	hasValue |= m_status.unmarshall(ctx, params, attachments, "status", basepath);
	hasValue |= m_Methods.unmarshall(ctx, params, attachments, "Methods", basepath);
	hasValue |= m_Definition.unmarshall(ctx, params, attachments, "Definition", basepath);
	return hasValue;
}

const char * CGetESDLDefinitionResponse::getId() { return m_Id.query();}
StringArray & CGetESDLDefinitionResponse::getESDLServices() { return (StringArray &) m_ESDLServices; }
const char * CGetESDLDefinitionResponse::getXMLDefinition() { return m_XMLDefinition.query();}
IConstBaseESDLStatus & CGetESDLDefinitionResponse::getStatus() { return (IConstBaseESDLStatus &) m_status.getValue();}
IArrayOf<IConstMethodConfig> & CGetESDLDefinitionResponse::getMethods() { return (IArrayOf<IConstMethodConfig> &) m_Methods; }
IConstESDLDefinition & CGetESDLDefinitionResponse::getDefinition() { return (IConstESDLDefinition &) m_Definition.getValue();}
void CGetESDLDefinitionResponse::setId(const char * val){ m_Id.set(val); }
void CGetESDLDefinitionResponse::setESDLServices(StringArray &val){ m_ESDLServices->kill();  CloneArray(m_ESDLServices.getValue(), val); }
void CGetESDLDefinitionResponse::setXMLDefinition(const char * val){ m_XMLDefinition.set(val); }
IEspBaseESDLStatus & CGetESDLDefinitionResponse::updateStatus(){ return (IEspBaseESDLStatus &) m_status.getValue(); }
void CGetESDLDefinitionResponse::setStatus(IConstBaseESDLStatus &ifrom){ m_status.copy(ifrom); }
void CGetESDLDefinitionResponse::setMethods(IArrayOf<IEspMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IEspMethodConfig &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CGetESDLDefinitionResponse::setMethods(IArrayOf<IConstMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IConstMethodConfig &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
IEspESDLDefinition & CGetESDLDefinitionResponse::updateDefinition(){ return (IEspESDLDefinition &) m_Definition.getValue(); }
void CGetESDLDefinitionResponse::setDefinition(IConstESDLDefinition &ifrom){ m_Definition.copy(ifrom); }
extern "C"  IEspGetESDLDefinitionResponse *createGetESDLDefinitionResponse(const char *serv){return ((IEspGetESDLDefinitionResponse *)new CGetESDLDefinitionResponse(serv));}
extern "C"  IClientGetESDLDefinitionResponse *createClientGetESDLDefinitionResponse(const char *serv){return ((IClientGetESDLDefinitionResponse *)new CGetESDLDefinitionResponse(serv));}

//=======================================================
// class CPublishESDLDefinitionRequest Implementation
//=======================================================

CPublishESDLDefinitionRequest::CPublishESDLDefinitionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ServiceName(nilIgnore),m_XMLDefinition(nilIgnore),m_DeletePrevious(nilIgnore),m_EchoDefinition(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CPublishESDLDefinitionRequest::CPublishESDLDefinitionRequest(const char *serviceName, const char *bc)
	: m_ServiceName(nilIgnore),m_XMLDefinition(nilIgnore),m_DeletePrevious(nilIgnore),m_EchoDefinition(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionRequest");
}

CPublishESDLDefinitionRequest::CPublishESDLDefinitionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ServiceName(nilIgnore),m_XMLDefinition(nilIgnore),m_DeletePrevious(nilIgnore),m_EchoDefinition(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CPublishESDLDefinitionRequest::CPublishESDLDefinitionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ServiceName(nilIgnore),m_XMLDefinition(nilIgnore),m_DeletePrevious(nilIgnore),m_EchoDefinition(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CPublishESDLDefinitionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"XMLDefinition\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DeletePrevious\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("PublishESDLDefinitionRequest","EchoDefinition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EchoDefinition\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CPublishESDLDefinitionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CPublishESDLDefinitionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("PublishESDLDefinitionRequest","EchoDefinition",1.2);
}

StringBuffer &CPublishESDLDefinitionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ServiceName");
	form.appendf("  <tr><td><b>ServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("XMLDefinition");
	form.appendf("  <tr><td><b>XMLDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DeletePrevious");
	
	form.appendf("  <tr><td><b>DeletePrevious? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("PublishESDLDefinitionRequest","EchoDefinition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EchoDefinition");
		
	form.appendf("  <tr><td><b>EchoDefinition? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CPublishESDLDefinitionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CPublishESDLDefinitionRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ServiceName.marshall(rpc_resp, "ServiceName", "", "", "");
	m_XMLDefinition.marshall(rpc_resp, "XMLDefinition", "", "", "");
	m_DeletePrevious.marshall(rpc_resp, "DeletePrevious", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_EchoDefinition.marshall(rpc_resp, "EchoDefinition", "", "", "");
}


void CPublishESDLDefinitionRequest::copy(CPublishESDLDefinitionRequest &from)
{
	m_ServiceName.copy(from.m_ServiceName);
	m_XMLDefinition.copy(from.m_XMLDefinition);
	m_DeletePrevious.copy(from.m_DeletePrevious);
	m_EchoDefinition.copy(from.m_EchoDefinition);
}


void CPublishESDLDefinitionRequest::copy(IConstPublishESDLDefinitionRequest &ifrom)
{
	setServiceName(ifrom.getServiceName());
	setXMLDefinition(ifrom.getXMLDefinition());
	setDeletePrevious(ifrom.getDeletePrevious());
	setEchoDefinition(ifrom.getEchoDefinition());
}


void CPublishESDLDefinitionRequest::getAttributes(IProperties &attributes)
{
}


void CPublishESDLDefinitionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_ServiceName.toStr(ctx, buffer, "ServiceName", "", true, "", "");
	m_XMLDefinition.toStr(ctx, buffer, "XMLDefinition", "", true, "", "");
	m_DeletePrevious.toStr(ctx, buffer, "DeletePrevious", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_EchoDefinition.toStr(ctx, buffer, "EchoDefinition", "", true, "", "");
}


void CPublishESDLDefinitionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CPublishESDLDefinitionRequest::serializer(IEspContext* ctx, IConstPublishESDLDefinitionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<PublishESDLDefinitionRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field ServiceName
	{
		const char* s = src.getServiceName();
		if (s && *s)
		{
			buffer.append("<ServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ServiceName>");
		}
	}
	// field XMLDefinition
	{
		const char* s = src.getXMLDefinition();
		if (s && *s)
		{
			buffer.append("<XMLDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XMLDefinition>");
		}
	}
	// field DeletePrevious
	{
		bool b = src.getDeletePrevious();
		if (b)
			buffer.appendf("<DeletePrevious>1</DeletePrevious>");
	}
	// field EchoDefinition
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		bool b = src.getEchoDefinition();
		if (b)
			buffer.appendf("<EchoDefinition>1</EchoDefinition>");
	}
	if (keepRootTag)
		buffer.append("</PublishESDLDefinitionRequest>");
}

bool CPublishESDLDefinitionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ServiceName.unmarshall(rpc_request, "ServiceName", basepath);
	hasValue |= m_XMLDefinition.unmarshall(rpc_request, "XMLDefinition", basepath);
	hasValue |= m_DeletePrevious.unmarshall(rpc_request, "DeletePrevious", basepath);
	hasValue |= m_EchoDefinition.unmarshall(rpc_request, "EchoDefinition", basepath);
	return hasValue;
}

bool CPublishESDLDefinitionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ServiceName.unmarshall(ctx, soapval, "ServiceName");
	hasValue |= m_XMLDefinition.unmarshall(ctx, soapval, "XMLDefinition");
	hasValue |= m_DeletePrevious.unmarshall(ctx, soapval, "DeletePrevious");
	hasValue |= m_EchoDefinition.unmarshall(ctx, soapval, "EchoDefinition");
	return hasValue;
}

bool CPublishESDLDefinitionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ServiceName.unmarshall(ctx, params, attachments, "ServiceName", basepath);
	hasValue |= m_XMLDefinition.unmarshall(ctx, params, attachments, "XMLDefinition", basepath);
	hasValue |= m_DeletePrevious.unmarshall(ctx, params, attachments, "DeletePrevious", basepath);
	hasValue |= m_EchoDefinition.unmarshall(ctx, params, attachments, "EchoDefinition", basepath);
	return hasValue;
}

const char * CPublishESDLDefinitionRequest::getServiceName() { return m_ServiceName.query();}
const char * CPublishESDLDefinitionRequest::getXMLDefinition() { return m_XMLDefinition.query();}
bool CPublishESDLDefinitionRequest::getDeletePrevious() { return m_DeletePrevious;}
bool CPublishESDLDefinitionRequest::getEchoDefinition() { return m_EchoDefinition;}
void CPublishESDLDefinitionRequest::setServiceName(const char * val){ m_ServiceName.set(val); }
void CPublishESDLDefinitionRequest::setXMLDefinition(const char * val){ m_XMLDefinition.set(val); }
void CPublishESDLDefinitionRequest::setDeletePrevious(bool val){ m_DeletePrevious=val; }
void CPublishESDLDefinitionRequest::setEchoDefinition(bool val){ m_EchoDefinition=val; }
extern "C"  IEspPublishESDLDefinitionRequest *createPublishESDLDefinitionRequest(const char *serv){return ((IEspPublishESDLDefinitionRequest *)new CPublishESDLDefinitionRequest(serv));}
extern "C"  IClientPublishESDLDefinitionRequest *createClientPublishESDLDefinitionRequest(const char *serv){return ((IClientPublishESDLDefinitionRequest *)new CPublishESDLDefinitionRequest(serv));}

//=======================================================
// class CPublishESDLDefinitionResponse Implementation
//=======================================================

CPublishESDLDefinitionResponse::CPublishESDLDefinitionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ServiceName(nilRemove),m_EsdlVersion(nilRemove),m_DeletePrevious(nilRemove),m_status(serviceName, nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CPublishESDLDefinitionResponse::CPublishESDLDefinitionResponse(const char *serviceName, const char *bc)
	: m_ServiceName(nilRemove),m_EsdlVersion(nilRemove),m_DeletePrevious(nilRemove),m_status(serviceName, nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionResponse");
}

CPublishESDLDefinitionResponse::CPublishESDLDefinitionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ServiceName(nilRemove),m_EsdlVersion(nilRemove),m_DeletePrevious(nilRemove),m_status(serviceName, nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CPublishESDLDefinitionResponse::CPublishESDLDefinitionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ServiceName(nilRemove),m_EsdlVersion(nilRemove),m_DeletePrevious(nilRemove),m_status(serviceName, nilRemove),m_ESDLServices(nilRemove),m_XMLDefinition(nilRemove),m_Methods(nilRemove),m_Definition(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLDefinitionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CPublishESDLDefinitionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlVersion\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DeletePrevious\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"status\" type=\"tns:BaseESDLStatus\"/>\n");
		if (!context.suppressed("PublishESDLDefinitionResponse","ESDLServices")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLServices\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"Name\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("PublishESDLDefinitionResponse","XMLDefinition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"XMLDefinition\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("PublishESDLDefinitionResponse","Methods")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Methods\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Method\" type=\"tns:MethodConfig\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!context.suppressed("PublishESDLDefinitionResponse","Definition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Definition\" type=\"tns:ESDLDefinition\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CBaseESDLStatus::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("PublishESDLDefinitionResponse","Methods"))
			CMethodConfig::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("PublishESDLDefinitionResponse","Definition"))
			CESDLDefinition::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CPublishESDLDefinitionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CPublishESDLDefinitionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("PublishESDLDefinitionResponse","ESDLServices",1.2);
	info.addMaxVersion("PublishESDLDefinitionResponse","ESDLServices",1.3);
	info.addMinVersion("PublishESDLDefinitionResponse","XMLDefinition",1.2);
	info.addMaxVersion("PublishESDLDefinitionResponse","XMLDefinition",1.3);
	info.addMinVersion("PublishESDLDefinitionResponse","Methods",1.2);
	info.addMaxVersion("PublishESDLDefinitionResponse","Methods",1.3);
	info.addMinVersion("PublishESDLDefinitionResponse","Definition",1.4);
	if (!added.getValue("BaseESDLStatus"))
	{
		added.setValue("BaseESDLStatus",1);
		CBaseESDLStatus::getMapInfo(info,added);
	}
	if (!added.getValue("ESDLDefinition"))
	{
		added.setValue("ESDLDefinition",1);
		CESDLDefinition::getMapInfo(info,added);
	}
	if (!added.getValue("MethodConfig"))
	{
		added.setValue("MethodConfig",1);
		CMethodConfig::getMapInfo(info,added);
	}
}

StringBuffer &CPublishESDLDefinitionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ServiceName");
	form.appendf("  <tr><td><b>ServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("EsdlVersion");
	form.appendf("  <tr><td><b>EsdlVersion: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DeletePrevious");
	
	form.appendf("  <tr><td><b>DeletePrevious? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("status");
	form.append("<tr>").append("<td><b>status: </b></td><td><hr/>");
	CBaseESDLStatus::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (!context.suppressed("PublishESDLDefinitionResponse","ESDLServices")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ESDLServices");
		form.appendf("<tr><td><b>ESDLServices: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("PublishESDLDefinitionResponse","XMLDefinition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("XMLDefinition");
		form.appendf("  <tr><td><b>XMLDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("PublishESDLDefinitionResponse","Methods")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Methods");
		form.appendf("<tr><td><b>Methods: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("PublishESDLDefinitionResponse","Definition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Definition");
		form.append("<tr>").append("<td><b>Definition: </b></td><td><hr/>");
		CESDLDefinition::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CPublishESDLDefinitionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CPublishESDLDefinitionResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ServiceName.marshall(rpc_resp, "ServiceName", "", "", "");
		m_EsdlVersion.marshall(rpc_resp, "EsdlVersion", "", "", "");
		m_DeletePrevious.marshall(rpc_resp, "DeletePrevious", "", "", "");
		m_status.marshall(rpc_resp, "status", "", "", "");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_ESDLServices.marshall(rpc_resp, "ESDLServices", "Name");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_XMLDefinition.marshall(rpc_resp, "XMLDefinition", "", "", "");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_Methods.marshall(rpc_resp, "Methods", "Method");
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_Definition.marshall(rpc_resp, "Definition", "", "", "");
	}
}


void CPublishESDLDefinitionResponse::copy(CPublishESDLDefinitionResponse &from)
{
	m_ServiceName.copy(from.m_ServiceName);
	m_EsdlVersion.copy(from.m_EsdlVersion);
	m_DeletePrevious.copy(from.m_DeletePrevious);
	m_status.copy(from.m_status);
	m_ESDLServices.copy(from.m_ESDLServices);
	m_XMLDefinition.copy(from.m_XMLDefinition);
	m_Methods.copy(from.m_Methods);
	m_Definition.copy(from.m_Definition);
}


void CPublishESDLDefinitionResponse::copy(IConstPublishESDLDefinitionResponse &ifrom)
{
	setServiceName(ifrom.getServiceName());
	setEsdlVersion(ifrom.getEsdlVersion());
	setDeletePrevious(ifrom.getDeletePrevious());
	setStatus(ifrom.getStatus());
	setESDLServices(ifrom.getESDLServices());
	setXMLDefinition(ifrom.getXMLDefinition());
	setMethods(ifrom.getMethods());
	setDefinition(ifrom.getDefinition());
}


void CPublishESDLDefinitionResponse::getAttributes(IProperties &attributes)
{
}


void CPublishESDLDefinitionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_ServiceName.toStr(ctx, buffer, "ServiceName", "", true, "", "");
		m_EsdlVersion.toStr(ctx, buffer, "EsdlVersion", "", true, "", "");
		m_DeletePrevious.toStr(ctx, buffer, "DeletePrevious", "", true, "", "");
		m_status.toStr(ctx, buffer, "status", "", false, "", "");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_ESDLServices.toStr(ctx, buffer, "ESDLServices", "Name");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_XMLDefinition.toStr(ctx, buffer, "XMLDefinition", "", true, "", "");
		if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
			m_Methods.toStr(ctx, buffer, "Methods", "Method");
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_Definition.toStr(ctx, buffer, "Definition", "", false, "", "");
	}
}


void CPublishESDLDefinitionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CPublishESDLDefinitionResponse::serializer(IEspContext* ctx, IConstPublishESDLDefinitionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<PublishESDLDefinitionResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field ServiceName
	{
		const char* s = src.getServiceName();
		if (s && *s)
		{
			buffer.append("<ServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ServiceName>");
		}
	}
	// field EsdlVersion
	{
		int n = src.getEsdlVersion();
		if (n)
			buffer.appendf("<EsdlVersion>%d</EsdlVersion>", n);
	}
	// field DeletePrevious
	{
		bool b = src.getDeletePrevious();
		if (b)
			buffer.appendf("<DeletePrevious>1</DeletePrevious>");
	}
	// field status
	{
		StringBuffer tmp;
		CBaseESDLStatus::serializer(ctx,src.getStatus(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<status>%s</status>",tmp.str());
	}
	// field ESDLServices
	if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
	{
		StringArray& v = src.getESDLServices();
		if (v.length()>0)
			buffer.append("<ESDLServices>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Name>%s</Name>",v.item(i));
		if (v.length()>0)
			buffer.append("</ESDLServices>");
	}
	// field XMLDefinition
	if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
	{
		const char* s = src.getXMLDefinition();
		if (s && *s)
		{
			buffer.append("<XMLDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XMLDefinition>");
		}
	}
	// field Methods
	if ((clientVer==-1.0 || (clientVer>=1.2 && clientVer<=1.3)))
	{
		IArrayOf<IConstMethodConfig>& v = src.getMethods();
		int size = v.length();
		if (size>0)
			buffer.append("<Methods>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Method>");
			CMethodConfig::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Method>");
		}
		if (size>0)
			buffer.append("</Methods>");
	}
	// field Definition
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		StringBuffer tmp;
		CESDLDefinition::serializer(ctx,src.getDefinition(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Definition>%s</Definition>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</PublishESDLDefinitionResponse>");
}

bool CPublishESDLDefinitionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ServiceName.unmarshall(rpc_request, "ServiceName", basepath);
		hasValue |= m_EsdlVersion.unmarshall(rpc_request, "EsdlVersion", basepath);
		hasValue |= m_DeletePrevious.unmarshall(rpc_request, "DeletePrevious", basepath);
		hasValue |= m_status.unmarshall(rpc_request, "status", basepath);
		hasValue |= m_ESDLServices.unmarshall(rpc_request, "ESDLServices", basepath);
		hasValue |= m_XMLDefinition.unmarshall(rpc_request, "XMLDefinition", basepath);
		hasValue |= m_Methods.unmarshall(rpc_request, "Methods", basepath);
		hasValue |= m_Definition.unmarshall(rpc_request, "Definition", basepath);
	}
	return hasValue;
}

bool CPublishESDLDefinitionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ServiceName.unmarshall(ctx, soapval, "ServiceName");
	hasValue |= m_EsdlVersion.unmarshall(ctx, soapval, "EsdlVersion");
	hasValue |= m_DeletePrevious.unmarshall(ctx, soapval, "DeletePrevious");
	hasValue |= m_status.unmarshall(ctx, soapval, "status");
	hasValue |= m_ESDLServices.unmarshall(ctx, soapval, "ESDLServices");
	hasValue |= m_XMLDefinition.unmarshall(ctx, soapval, "XMLDefinition");
	hasValue |= m_Methods.unmarshall(ctx, soapval, "Methods");
	hasValue |= m_Definition.unmarshall(ctx, soapval, "Definition");
	return hasValue;
}

bool CPublishESDLDefinitionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ServiceName.unmarshall(ctx, params, attachments, "ServiceName", basepath);
	hasValue |= m_EsdlVersion.unmarshall(ctx, params, attachments, "EsdlVersion", basepath);
	hasValue |= m_DeletePrevious.unmarshall(ctx, params, attachments, "DeletePrevious", basepath);
	hasValue |= m_status.unmarshall(ctx, params, attachments, "status", basepath);
	hasValue |= m_ESDLServices.unmarshall(ctx, params, attachments, "ESDLServices", basepath);
	hasValue |= m_XMLDefinition.unmarshall(ctx, params, attachments, "XMLDefinition", basepath);
	hasValue |= m_Methods.unmarshall(ctx, params, attachments, "Methods", basepath);
	hasValue |= m_Definition.unmarshall(ctx, params, attachments, "Definition", basepath);
	return hasValue;
}

const char * CPublishESDLDefinitionResponse::getServiceName() { return m_ServiceName.query();}
bool CPublishESDLDefinitionResponse::getEsdlVersion_isNull(){return m_EsdlVersion.is_nil();}
int CPublishESDLDefinitionResponse::getEsdlVersion() { return m_EsdlVersion;}
bool CPublishESDLDefinitionResponse::getDeletePrevious_isNull(){return m_DeletePrevious.is_nil();}
bool CPublishESDLDefinitionResponse::getDeletePrevious() { return m_DeletePrevious;}
IConstBaseESDLStatus & CPublishESDLDefinitionResponse::getStatus() { return (IConstBaseESDLStatus &) m_status.getValue();}
StringArray & CPublishESDLDefinitionResponse::getESDLServices() { return (StringArray &) m_ESDLServices; }
const char * CPublishESDLDefinitionResponse::getXMLDefinition() { return m_XMLDefinition.query();}
IArrayOf<IConstMethodConfig> & CPublishESDLDefinitionResponse::getMethods() { return (IArrayOf<IConstMethodConfig> &) m_Methods; }
IConstESDLDefinition & CPublishESDLDefinitionResponse::getDefinition() { return (IConstESDLDefinition &) m_Definition.getValue();}
void CPublishESDLDefinitionResponse::setServiceName(const char * val){ m_ServiceName.set(val); }
void CPublishESDLDefinitionResponse::setEsdlVersion_null(){ m_EsdlVersion.Nil(); }void CPublishESDLDefinitionResponse::setEsdlVersion(int val){ m_EsdlVersion=val; }
void CPublishESDLDefinitionResponse::setDeletePrevious_null(){ m_DeletePrevious.Nil(); }void CPublishESDLDefinitionResponse::setDeletePrevious(bool val){ m_DeletePrevious=val; }
IEspBaseESDLStatus & CPublishESDLDefinitionResponse::updateStatus(){ return (IEspBaseESDLStatus &) m_status.getValue(); }
void CPublishESDLDefinitionResponse::setStatus(IConstBaseESDLStatus &ifrom){ m_status.copy(ifrom); }
void CPublishESDLDefinitionResponse::setESDLServices(StringArray &val){ m_ESDLServices->kill();  CloneArray(m_ESDLServices.getValue(), val); }
void CPublishESDLDefinitionResponse::setXMLDefinition(const char * val){ m_XMLDefinition.set(val); }
void CPublishESDLDefinitionResponse::setMethods(IArrayOf<IEspMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IEspMethodConfig &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CPublishESDLDefinitionResponse::setMethods(IArrayOf<IConstMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IConstMethodConfig &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
IEspESDLDefinition & CPublishESDLDefinitionResponse::updateDefinition(){ return (IEspESDLDefinition &) m_Definition.getValue(); }
void CPublishESDLDefinitionResponse::setDefinition(IConstESDLDefinition &ifrom){ m_Definition.copy(ifrom); }
extern "C"  IEspPublishESDLDefinitionResponse *createPublishESDLDefinitionResponse(const char *serv){return ((IEspPublishESDLDefinitionResponse *)new CPublishESDLDefinitionResponse(serv));}
extern "C"  IClientPublishESDLDefinitionResponse *createClientPublishESDLDefinitionResponse(const char *serv){return ((IClientPublishESDLDefinitionResponse *)new CPublishESDLDefinitionResponse(serv));}

//=======================================================
// class CPublishESDLBindingRequest Implementation
//=======================================================

CPublishESDLBindingRequest::CPublishESDLBindingRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_EspServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_Methods(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CPublishESDLBindingRequest::CPublishESDLBindingRequest(const char *serviceName, const char *bc)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_EspServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_Methods(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingRequest");
}

CPublishESDLBindingRequest::CPublishESDLBindingRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_EspServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_Methods(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CPublishESDLBindingRequest::CPublishESDLBindingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_EspServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_Methods(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CPublishESDLBindingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspBindingName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspPort\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlDefinitionID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlServiceName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("PublishESDLBindingRequest","EspServiceName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspServiceName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Config\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("PublishESDLBindingRequest","Methods")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Methods\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Method\" type=\"tns:MethodConfig\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!context.suppressed("PublishESDLBindingRequest","EchoBinding")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EchoBinding\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("PublishESDLBindingRequest","Methods"))
			CMethodConfig::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CPublishESDLBindingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CPublishESDLBindingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMaxVersion("PublishESDLBindingRequest","EspServiceName",1.3);
	info.addMinVersion("PublishESDLBindingRequest","Methods",1.2);
	info.addMinVersion("PublishESDLBindingRequest","EchoBinding",1.2);
	if (!added.getValue("MethodConfig"))
	{
		added.setValue("MethodConfig",1);
		CMethodConfig::getMapInfo(info,added);
	}
}

StringBuffer &CPublishESDLBindingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspProcName");
	form.appendf("  <tr><td><b>EspProcName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspBindingName");
	form.appendf("  <tr><td><b>EspBindingName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspPort");
	form.appendf("  <tr><td><b>EspPort: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EsdlDefinitionID");
	form.appendf("  <tr><td><b>EsdlDefinitionID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EsdlServiceName");
	form.appendf("  <tr><td><b>EsdlServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("PublishESDLBindingRequest","EspServiceName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspServiceName");
		form.appendf("  <tr><td><b>EspServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Overwrite");
	
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Config");
	form.appendf("  <tr><td><b>Config: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("PublishESDLBindingRequest","Methods")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Methods");
		form.appendf("<tr><td><b>Methods: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("PublishESDLBindingRequest","EchoBinding")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EchoBinding");
		
	form.appendf("  <tr><td><b>EchoBinding? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CPublishESDLBindingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CPublishESDLBindingRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_EspProcName.marshall(rpc_resp, "EspProcName", "", "", "");
	m_EspBindingName.marshall(rpc_resp, "EspBindingName", "", "", "");
	m_EspPort.marshall(rpc_resp, "EspPort", "", "", "");
	m_EsdlDefinitionID.marshall(rpc_resp, "EsdlDefinitionID", "", "", "");
	m_EsdlServiceName.marshall(rpc_resp, "EsdlServiceName", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspServiceName.marshall(rpc_resp, "EspServiceName", "", "", "");
	m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
	m_Config.marshall(rpc_resp, "Config", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_Methods.marshall(rpc_resp, "Methods", "Method");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_EchoBinding.marshall(rpc_resp, "EchoBinding", "", "", "");
}


void CPublishESDLBindingRequest::copy(CPublishESDLBindingRequest &from)
{
	m_EspProcName.copy(from.m_EspProcName);
	m_EspBindingName.copy(from.m_EspBindingName);
	m_EspPort.copy(from.m_EspPort);
	m_EsdlDefinitionID.copy(from.m_EsdlDefinitionID);
	m_EsdlServiceName.copy(from.m_EsdlServiceName);
	m_EspServiceName.copy(from.m_EspServiceName);
	m_Overwrite.copy(from.m_Overwrite);
	m_Config.copy(from.m_Config);
	m_Methods.copy(from.m_Methods);
	m_EchoBinding.copy(from.m_EchoBinding);
}


void CPublishESDLBindingRequest::copy(IConstPublishESDLBindingRequest &ifrom)
{
	setEspProcName(ifrom.getEspProcName());
	setEspBindingName(ifrom.getEspBindingName());
	setEspPort(ifrom.getEspPort());
	setEsdlDefinitionID(ifrom.getEsdlDefinitionID());
	setEsdlServiceName(ifrom.getEsdlServiceName());
	setEspServiceName(ifrom.getEspServiceName());
	setOverwrite(ifrom.getOverwrite());
	setConfig(ifrom.getConfig());
	setMethods(ifrom.getMethods());
	setEchoBinding(ifrom.getEchoBinding());
}


void CPublishESDLBindingRequest::getAttributes(IProperties &attributes)
{
}


void CPublishESDLBindingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_EspProcName.toStr(ctx, buffer, "EspProcName", "", true, "", "");
	m_EspBindingName.toStr(ctx, buffer, "EspBindingName", "", true, "", "");
	m_EspPort.toStr(ctx, buffer, "EspPort", "", true, "", "");
	m_EsdlDefinitionID.toStr(ctx, buffer, "EsdlDefinitionID", "", true, "", "");
	m_EsdlServiceName.toStr(ctx, buffer, "EsdlServiceName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspServiceName.toStr(ctx, buffer, "EspServiceName", "", true, "", "");
	m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
	m_Config.toStr(ctx, buffer, "Config", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_Methods.toStr(ctx, buffer, "Methods", "Method");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_EchoBinding.toStr(ctx, buffer, "EchoBinding", "", true, "", "");
}


void CPublishESDLBindingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CPublishESDLBindingRequest::serializer(IEspContext* ctx, IConstPublishESDLBindingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<PublishESDLBindingRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field EspProcName
	{
		const char* s = src.getEspProcName();
		if (s && *s)
		{
			buffer.append("<EspProcName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcName>");
		}
	}
	// field EspBindingName
	{
		const char* s = src.getEspBindingName();
		if (s && *s)
		{
			buffer.append("<EspBindingName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspBindingName>");
		}
	}
	// field EspPort
	{
		const char* s = src.getEspPort();
		if (s && *s)
		{
			buffer.append("<EspPort>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspPort>");
		}
	}
	// field EsdlDefinitionID
	{
		const char* s = src.getEsdlDefinitionID();
		if (s && *s)
		{
			buffer.append("<EsdlDefinitionID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlDefinitionID>");
		}
	}
	// field EsdlServiceName
	{
		const char* s = src.getEsdlServiceName();
		if (s && *s)
		{
			buffer.append("<EsdlServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlServiceName>");
		}
	}
	// field EspServiceName
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspServiceName();
		if (s && *s)
		{
			buffer.append("<EspServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspServiceName>");
		}
	}
	// field Overwrite
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	// field Config
	{
		const char* s = src.getConfig();
		if (s && *s)
		{
			buffer.append("<Config>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Config>");
		}
	}
	// field Methods
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		IArrayOf<IConstMethodConfig>& v = src.getMethods();
		int size = v.length();
		if (size>0)
			buffer.append("<Methods>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Method>");
			CMethodConfig::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Method>");
		}
		if (size>0)
			buffer.append("</Methods>");
	}
	// field EchoBinding
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		bool b = src.getEchoBinding();
		if (b)
			buffer.appendf("<EchoBinding>1</EchoBinding>");
	}
	if (keepRootTag)
		buffer.append("</PublishESDLBindingRequest>");
}

bool CPublishESDLBindingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_EspProcName.unmarshall(rpc_request, "EspProcName", basepath);
	hasValue |= m_EspBindingName.unmarshall(rpc_request, "EspBindingName", basepath);
	hasValue |= m_EspPort.unmarshall(rpc_request, "EspPort", basepath);
	hasValue |= m_EsdlDefinitionID.unmarshall(rpc_request, "EsdlDefinitionID", basepath);
	hasValue |= m_EsdlServiceName.unmarshall(rpc_request, "EsdlServiceName", basepath);
	hasValue |= m_EspServiceName.unmarshall(rpc_request, "EspServiceName", basepath);
	hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
	hasValue |= m_Config.unmarshall(rpc_request, "Config", basepath);
	hasValue |= m_Methods.unmarshall(rpc_request, "Methods", basepath);
	hasValue |= m_EchoBinding.unmarshall(rpc_request, "EchoBinding", basepath);
	return hasValue;
}

bool CPublishESDLBindingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EspProcName.unmarshall(ctx, soapval, "EspProcName");
	hasValue |= m_EspBindingName.unmarshall(ctx, soapval, "EspBindingName");
	hasValue |= m_EspPort.unmarshall(ctx, soapval, "EspPort");
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, soapval, "EsdlDefinitionID");
	hasValue |= m_EsdlServiceName.unmarshall(ctx, soapval, "EsdlServiceName");
	hasValue |= m_EspServiceName.unmarshall(ctx, soapval, "EspServiceName");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	hasValue |= m_Config.unmarshall(ctx, soapval, "Config");
	hasValue |= m_Methods.unmarshall(ctx, soapval, "Methods");
	hasValue |= m_EchoBinding.unmarshall(ctx, soapval, "EchoBinding");
	return hasValue;
}

bool CPublishESDLBindingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EspProcName.unmarshall(ctx, params, attachments, "EspProcName", basepath);
	hasValue |= m_EspBindingName.unmarshall(ctx, params, attachments, "EspBindingName", basepath);
	hasValue |= m_EspPort.unmarshall(ctx, params, attachments, "EspPort", basepath);
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, params, attachments, "EsdlDefinitionID", basepath);
	hasValue |= m_EsdlServiceName.unmarshall(ctx, params, attachments, "EsdlServiceName", basepath);
	hasValue |= m_EspServiceName.unmarshall(ctx, params, attachments, "EspServiceName", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	hasValue |= m_Config.unmarshall(ctx, params, attachments, "Config", basepath);
	hasValue |= m_Methods.unmarshall(ctx, params, attachments, "Methods", basepath);
	hasValue |= m_EchoBinding.unmarshall(ctx, params, attachments, "EchoBinding", basepath);
	return hasValue;
}

const char * CPublishESDLBindingRequest::getEspProcName() { return m_EspProcName.query();}
const char * CPublishESDLBindingRequest::getEspBindingName() { return m_EspBindingName.query();}
const char * CPublishESDLBindingRequest::getEspPort() { return m_EspPort.query();}
const char * CPublishESDLBindingRequest::getEsdlDefinitionID() { return m_EsdlDefinitionID.query();}
const char * CPublishESDLBindingRequest::getEsdlServiceName() { return m_EsdlServiceName.query();}
const char * CPublishESDLBindingRequest::getEspServiceName() { return m_EspServiceName.query();}
bool CPublishESDLBindingRequest::getOverwrite_isNull(){return m_Overwrite.is_nil();}
bool CPublishESDLBindingRequest::getOverwrite() { return m_Overwrite;}
const char * CPublishESDLBindingRequest::getConfig() { return m_Config.query();}
IArrayOf<IConstMethodConfig> & CPublishESDLBindingRequest::getMethods() { return (IArrayOf<IConstMethodConfig> &) m_Methods; }
bool CPublishESDLBindingRequest::getEchoBinding_isNull(){return m_EchoBinding.is_nil();}
bool CPublishESDLBindingRequest::getEchoBinding() { return m_EchoBinding;}
void CPublishESDLBindingRequest::setEspProcName(const char * val){ m_EspProcName.set(val); }
void CPublishESDLBindingRequest::setEspBindingName(const char * val){ m_EspBindingName.set(val); }
void CPublishESDLBindingRequest::setEspPort(const char * val){ m_EspPort.set(val); }
void CPublishESDLBindingRequest::setEsdlDefinitionID(const char * val){ m_EsdlDefinitionID.set(val); }
void CPublishESDLBindingRequest::setEsdlServiceName(const char * val){ m_EsdlServiceName.set(val); }
void CPublishESDLBindingRequest::setEspServiceName(const char * val){ m_EspServiceName.set(val); }
void CPublishESDLBindingRequest::setOverwrite_null(){ m_Overwrite.Nil(); }void CPublishESDLBindingRequest::setOverwrite(bool val){ m_Overwrite=val; }
void CPublishESDLBindingRequest::setConfig(const char * val){ m_Config.set(val); }
void CPublishESDLBindingRequest::setMethods(IArrayOf<IEspMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IEspMethodConfig &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CPublishESDLBindingRequest::setMethods(IArrayOf<IConstMethodConfig> &val)
{
	m_Methods->kill();
	IArrayOf<IConstMethodConfig> &target = m_Methods.getValue();
	ForEachItemIn(idx, val)
	{
		IConstMethodConfig &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CPublishESDLBindingRequest::setEchoBinding_null(){ m_EchoBinding.Nil(); }void CPublishESDLBindingRequest::setEchoBinding(bool val){ m_EchoBinding=val; }
extern "C"  IEspPublishESDLBindingRequest *createPublishESDLBindingRequest(const char *serv){return ((IEspPublishESDLBindingRequest *)new CPublishESDLBindingRequest(serv));}
extern "C"  IClientPublishESDLBindingRequest *createClientPublishESDLBindingRequest(const char *serv){return ((IClientPublishESDLBindingRequest *)new CPublishESDLBindingRequest(serv));}

//=======================================================
// class CPublishESDLBindingResponse Implementation
//=======================================================

CPublishESDLBindingResponse::CPublishESDLBindingResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_EsdlDefinitionID(nilIgnore),m_Overwrite(nilIgnore),m_EspProcName(nilIgnore),m_EspPort(nilIgnore),m_status(serviceName, nilIgnore),m_ESDLBinding(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CPublishESDLBindingResponse::CPublishESDLBindingResponse(const char *serviceName, const char *bc)
	: m_EsdlDefinitionID(nilIgnore),m_Overwrite(nilIgnore),m_EspProcName(nilIgnore),m_EspPort(nilIgnore),m_status(serviceName, nilIgnore),m_ESDLBinding(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingResponse");
}

CPublishESDLBindingResponse::CPublishESDLBindingResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EsdlDefinitionID(nilIgnore),m_Overwrite(nilIgnore),m_EspProcName(nilIgnore),m_EspPort(nilIgnore),m_status(serviceName, nilIgnore),m_ESDLBinding(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CPublishESDLBindingResponse::CPublishESDLBindingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EsdlDefinitionID(nilIgnore),m_Overwrite(nilIgnore),m_EspProcName(nilIgnore),m_EspPort(nilIgnore),m_status(serviceName, nilIgnore),m_ESDLBinding(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("PublishESDLBindingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CPublishESDLBindingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlDefinitionID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspPort\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"status\" type=\"tns:BaseESDLStatus\"/>\n");
		if (!context.suppressed("PublishESDLBindingResponse","ESDLBinding")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLBinding\" type=\"tns:ESDLBindingContents\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CBaseESDLStatus::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("PublishESDLBindingResponse","ESDLBinding"))
			CESDLBindingContents::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CPublishESDLBindingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CPublishESDLBindingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("PublishESDLBindingResponse","ESDLBinding",1.2);
	if (!added.getValue("BaseESDLStatus"))
	{
		added.setValue("BaseESDLStatus",1);
		CBaseESDLStatus::getMapInfo(info,added);
	}
	if (!added.getValue("ESDLBindingContents"))
	{
		added.setValue("ESDLBindingContents",1);
		CESDLBindingContents::getMapInfo(info,added);
	}
}

StringBuffer &CPublishESDLBindingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EsdlDefinitionID");
	form.appendf("  <tr><td><b>EsdlDefinitionID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Overwrite");
	
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspProcName");
	form.appendf("  <tr><td><b>EspProcName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspPort");
	form.appendf("  <tr><td><b>EspPort: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("status");
	form.append("<tr>").append("<td><b>status: </b></td><td><hr/>");
	CBaseESDLStatus::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (!context.suppressed("PublishESDLBindingResponse","ESDLBinding")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ESDLBinding");
		form.append("<tr>").append("<td><b>ESDLBinding: </b></td><td><hr/>");
		CESDLBindingContents::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CPublishESDLBindingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CPublishESDLBindingResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_EsdlDefinitionID.marshall(rpc_resp, "EsdlDefinitionID", "", "", "");
		m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
		m_EspProcName.marshall(rpc_resp, "EspProcName", "", "", "");
		m_EspPort.marshall(rpc_resp, "EspPort", "", "", "");
		m_status.marshall(rpc_resp, "status", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_ESDLBinding.marshall(rpc_resp, "ESDLBinding", "", "", "");
	}
}


void CPublishESDLBindingResponse::copy(CPublishESDLBindingResponse &from)
{
	m_EsdlDefinitionID.copy(from.m_EsdlDefinitionID);
	m_Overwrite.copy(from.m_Overwrite);
	m_EspProcName.copy(from.m_EspProcName);
	m_EspPort.copy(from.m_EspPort);
	m_status.copy(from.m_status);
	m_ESDLBinding.copy(from.m_ESDLBinding);
}


void CPublishESDLBindingResponse::copy(IConstPublishESDLBindingResponse &ifrom)
{
	setEsdlDefinitionID(ifrom.getEsdlDefinitionID());
	setOverwrite(ifrom.getOverwrite());
	setEspProcName(ifrom.getEspProcName());
	setEspPort(ifrom.getEspPort());
	setStatus(ifrom.getStatus());
	setESDLBinding(ifrom.getESDLBinding());
}


void CPublishESDLBindingResponse::getAttributes(IProperties &attributes)
{
}


void CPublishESDLBindingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_EsdlDefinitionID.toStr(ctx, buffer, "EsdlDefinitionID", "", true, "", "");
		m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
		m_EspProcName.toStr(ctx, buffer, "EspProcName", "", true, "", "");
		m_EspPort.toStr(ctx, buffer, "EspPort", "", true, "", "");
		m_status.toStr(ctx, buffer, "status", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_ESDLBinding.toStr(ctx, buffer, "ESDLBinding", "", false, "", "");
	}
}


void CPublishESDLBindingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CPublishESDLBindingResponse::serializer(IEspContext* ctx, IConstPublishESDLBindingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<PublishESDLBindingResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field EsdlDefinitionID
	{
		const char* s = src.getEsdlDefinitionID();
		if (s && *s)
		{
			buffer.append("<EsdlDefinitionID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlDefinitionID>");
		}
	}
	// field Overwrite
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	// field EspProcName
	{
		const char* s = src.getEspProcName();
		if (s && *s)
		{
			buffer.append("<EspProcName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcName>");
		}
	}
	// field EspPort
	{
		const char* s = src.getEspPort();
		if (s && *s)
		{
			buffer.append("<EspPort>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspPort>");
		}
	}
	// field status
	{
		StringBuffer tmp;
		CBaseESDLStatus::serializer(ctx,src.getStatus(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<status>%s</status>",tmp.str());
	}
	// field ESDLBinding
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		StringBuffer tmp;
		CESDLBindingContents::serializer(ctx,src.getESDLBinding(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ESDLBinding>%s</ESDLBinding>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</PublishESDLBindingResponse>");
}

bool CPublishESDLBindingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_EsdlDefinitionID.unmarshall(rpc_request, "EsdlDefinitionID", basepath);
		hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
		hasValue |= m_EspProcName.unmarshall(rpc_request, "EspProcName", basepath);
		hasValue |= m_EspPort.unmarshall(rpc_request, "EspPort", basepath);
		hasValue |= m_status.unmarshall(rpc_request, "status", basepath);
		hasValue |= m_ESDLBinding.unmarshall(rpc_request, "ESDLBinding", basepath);
	}
	return hasValue;
}

bool CPublishESDLBindingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, soapval, "EsdlDefinitionID");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	hasValue |= m_EspProcName.unmarshall(ctx, soapval, "EspProcName");
	hasValue |= m_EspPort.unmarshall(ctx, soapval, "EspPort");
	hasValue |= m_status.unmarshall(ctx, soapval, "status");
	hasValue |= m_ESDLBinding.unmarshall(ctx, soapval, "ESDLBinding");
	return hasValue;
}

bool CPublishESDLBindingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, params, attachments, "EsdlDefinitionID", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	hasValue |= m_EspProcName.unmarshall(ctx, params, attachments, "EspProcName", basepath);
	hasValue |= m_EspPort.unmarshall(ctx, params, attachments, "EspPort", basepath);
	hasValue |= m_status.unmarshall(ctx, params, attachments, "status", basepath);
	hasValue |= m_ESDLBinding.unmarshall(ctx, params, attachments, "ESDLBinding", basepath);
	return hasValue;
}

const char * CPublishESDLBindingResponse::getEsdlDefinitionID() { return m_EsdlDefinitionID.query();}
bool CPublishESDLBindingResponse::getOverwrite() { return m_Overwrite;}
const char * CPublishESDLBindingResponse::getEspProcName() { return m_EspProcName.query();}
const char * CPublishESDLBindingResponse::getEspPort() { return m_EspPort.query();}
IConstBaseESDLStatus & CPublishESDLBindingResponse::getStatus() { return (IConstBaseESDLStatus &) m_status.getValue();}
IConstESDLBindingContents & CPublishESDLBindingResponse::getESDLBinding() { return (IConstESDLBindingContents &) m_ESDLBinding.getValue();}
void CPublishESDLBindingResponse::setEsdlDefinitionID(const char * val){ m_EsdlDefinitionID.set(val); }
void CPublishESDLBindingResponse::setOverwrite(bool val){ m_Overwrite=val; }
void CPublishESDLBindingResponse::setEspProcName(const char * val){ m_EspProcName.set(val); }
void CPublishESDLBindingResponse::setEspPort(const char * val){ m_EspPort.set(val); }
IEspBaseESDLStatus & CPublishESDLBindingResponse::updateStatus(){ return (IEspBaseESDLStatus &) m_status.getValue(); }
void CPublishESDLBindingResponse::setStatus(IConstBaseESDLStatus &ifrom){ m_status.copy(ifrom); }
IEspESDLBindingContents & CPublishESDLBindingResponse::updateESDLBinding(){ return (IEspESDLBindingContents &) m_ESDLBinding.getValue(); }
void CPublishESDLBindingResponse::setESDLBinding(IConstESDLBindingContents &ifrom){ m_ESDLBinding.copy(ifrom); }
extern "C"  IEspPublishESDLBindingResponse *createPublishESDLBindingResponse(const char *serv){return ((IEspPublishESDLBindingResponse *)new CPublishESDLBindingResponse(serv));}
extern "C"  IClientPublishESDLBindingResponse *createClientPublishESDLBindingResponse(const char *serv){return ((IClientPublishESDLBindingResponse *)new CPublishESDLBindingResponse(serv));}

//=======================================================
// class CListDESDLEspBindingsReq Implementation
//=======================================================

CListDESDLEspBindingsReq::CListDESDLEspBindingsReq(const char *serviceName, IRpcMessageBinding *init)
	: m_IncludeESDLBindingInfo(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsReq");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListDESDLEspBindingsReq::CListDESDLEspBindingsReq(const char *serviceName, const char *bc)
	: m_IncludeESDLBindingInfo(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsReq");
}

CListDESDLEspBindingsReq::CListDESDLEspBindingsReq(const char *serviceName, IRpcMessage* rpcmsg)
	: m_IncludeESDLBindingInfo(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsReq");
	unserialize(*rpcmsg,NULL,NULL);
}

CListDESDLEspBindingsReq::CListDESDLEspBindingsReq(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_IncludeESDLBindingInfo(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsReq");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListDESDLEspBindingsReq::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"IncludeESDLBindingInfo\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CListDESDLEspBindingsReq::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListDESDLEspBindingsReq::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CListDESDLEspBindingsReq::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeESDLBindingInfo");
	
	form.appendf("  <tr><td><b>IncludeESDLBindingInfo? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListDESDLEspBindingsReq::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListDESDLEspBindingsReq::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_IncludeESDLBindingInfo.marshall(rpc_resp, "IncludeESDLBindingInfo", "", "", "");
}


void CListDESDLEspBindingsReq::copy(CListDESDLEspBindingsReq &from)
{
	m_IncludeESDLBindingInfo.copy(from.m_IncludeESDLBindingInfo);
}


void CListDESDLEspBindingsReq::copy(IConstListDESDLEspBindingsReq &ifrom)
{
	setIncludeESDLBindingInfo(ifrom.getIncludeESDLBindingInfo());
}


void CListDESDLEspBindingsReq::getAttributes(IProperties &attributes)
{
}


void CListDESDLEspBindingsReq::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_IncludeESDLBindingInfo.toStr(ctx, buffer, "IncludeESDLBindingInfo", "", true, "", "");
}


void CListDESDLEspBindingsReq::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListDESDLEspBindingsReq::serializer(IEspContext* ctx, IConstListDESDLEspBindingsReq &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListDESDLEspBindingsReq>");
	// field IncludeESDLBindingInfo
	{
		bool b = src.getIncludeESDLBindingInfo();
		if (b)
			buffer.appendf("<IncludeESDLBindingInfo>1</IncludeESDLBindingInfo>");
	}
	if (keepRootTag)
		buffer.append("</ListDESDLEspBindingsReq>");
}

bool CListDESDLEspBindingsReq::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_IncludeESDLBindingInfo.unmarshall(rpc_request, "IncludeESDLBindingInfo", basepath);
	return hasValue;
}

bool CListDESDLEspBindingsReq::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_IncludeESDLBindingInfo.unmarshall(ctx, soapval, "IncludeESDLBindingInfo");
	return hasValue;
}

bool CListDESDLEspBindingsReq::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_IncludeESDLBindingInfo.unmarshall(ctx, params, attachments, "IncludeESDLBindingInfo", basepath);
	return hasValue;
}

bool CListDESDLEspBindingsReq::getIncludeESDLBindingInfo_isNull(){return m_IncludeESDLBindingInfo.is_nil();}
bool CListDESDLEspBindingsReq::getIncludeESDLBindingInfo() { return m_IncludeESDLBindingInfo;}
void CListDESDLEspBindingsReq::setIncludeESDLBindingInfo_null(){ m_IncludeESDLBindingInfo.Nil(); }void CListDESDLEspBindingsReq::setIncludeESDLBindingInfo(bool val){ m_IncludeESDLBindingInfo=val; }
extern "C"  IEspListDESDLEspBindingsReq *createListDESDLEspBindingsReq(const char *serv){return ((IEspListDESDLEspBindingsReq *)new CListDESDLEspBindingsReq(serv));}
extern "C"  IClientListDESDLEspBindingsReq *createClientListDESDLEspBindingsReq(const char *serv){return ((IClientListDESDLEspBindingsReq *)new CListDESDLEspBindingsReq(serv));}

//=======================================================
// class CTpBindingEx Implementation
//=======================================================

CTpBindingEx::CTpBindingEx(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Service(nilRemove),m_ServiceType(nilRemove),m_BindingType(nilRemove),m_ServiceBuildSet(nilRemove),m_Port(nilRemove),m_Protocol(nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("TpBindingEx");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CTpBindingEx::CTpBindingEx(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Service(nilRemove),m_ServiceType(nilRemove),m_BindingType(nilRemove),m_ServiceBuildSet(nilRemove),m_Port(nilRemove),m_Protocol(nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("TpBindingEx");
}

StringBuffer &CTpBindingEx::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Service\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BindingType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceBuildSet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Port\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Protocol\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLBinding\" type=\"tns:ESDLBindingContents\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CESDLBindingContents::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CTpBindingEx::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CTpBindingEx::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ESDLBindingContents"))
	{
		added.setValue("ESDLBindingContents",1);
		CESDLBindingContents::getMapInfo(info,added);
	}
}

StringBuffer &CTpBindingEx::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Service");
	form.appendf("  <tr><td><b>Service: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ServiceType");
	form.appendf("  <tr><td><b>ServiceType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BindingType");
	form.appendf("  <tr><td><b>BindingType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ServiceBuildSet");
	form.appendf("  <tr><td><b>ServiceBuildSet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Port");
	form.appendf("  <tr><td><b>Port: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Protocol");
	form.appendf("  <tr><td><b>Protocol: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ESDLBinding");
	form.append("<tr>").append("<td><b>ESDLBinding: </b></td><td><hr/>");
	CESDLBindingContents::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CTpBindingEx::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CTpBindingEx::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Service.marshall(rpc_resp, "Service", "", "", "");
	m_ServiceType.marshall(rpc_resp, "ServiceType", "", "", "");
	m_BindingType.marshall(rpc_resp, "BindingType", "", "", "");
	m_ServiceBuildSet.marshall(rpc_resp, "ServiceBuildSet", "", "", "");
	m_Port.marshall(rpc_resp, "Port", "", "", "");
	m_Protocol.marshall(rpc_resp, "Protocol", "", "", "");
	m_ESDLBinding.marshall(rpc_resp, "ESDLBinding", "", "", "");
}


void CTpBindingEx::copy(CTpBindingEx &from)
{
	m_Name.copy(from.m_Name);
	m_Service.copy(from.m_Service);
	m_ServiceType.copy(from.m_ServiceType);
	m_BindingType.copy(from.m_BindingType);
	m_ServiceBuildSet.copy(from.m_ServiceBuildSet);
	m_Port.copy(from.m_Port);
	m_Protocol.copy(from.m_Protocol);
	m_ESDLBinding.copy(from.m_ESDLBinding);
}


void CTpBindingEx::copy(IConstTpBindingEx &ifrom)
{
	setName(ifrom.getName());
	setService(ifrom.getService());
	setServiceType(ifrom.getServiceType());
	setBindingType(ifrom.getBindingType());
	setServiceBuildSet(ifrom.getServiceBuildSet());
	setPort(ifrom.getPort());
	setProtocol(ifrom.getProtocol());
	setESDLBinding(ifrom.getESDLBinding());
}


void CTpBindingEx::getAttributes(IProperties &attributes)
{
}


void CTpBindingEx::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Service.toStr(ctx, buffer, "Service", "", true, "", "");
	m_ServiceType.toStr(ctx, buffer, "ServiceType", "", true, "", "");
	m_BindingType.toStr(ctx, buffer, "BindingType", "", true, "", "");
	m_ServiceBuildSet.toStr(ctx, buffer, "ServiceBuildSet", "", true, "", "");
	m_Port.toStr(ctx, buffer, "Port", "", true, "", "");
	m_Protocol.toStr(ctx, buffer, "Protocol", "", true, "", "");
	m_ESDLBinding.toStr(ctx, buffer, "ESDLBinding", "", false, "", "");
}


void CTpBindingEx::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CTpBindingEx::serializer(IEspContext* ctx, IConstTpBindingEx &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<TpBindingEx>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Service
	{
		const char* s = src.getService();
		if (s && *s)
		{
			buffer.append("<Service>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Service>");
		}
	}
	// field ServiceType
	{
		const char* s = src.getServiceType();
		if (s && *s)
		{
			buffer.append("<ServiceType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ServiceType>");
		}
	}
	// field BindingType
	{
		const char* s = src.getBindingType();
		if (s && *s)
		{
			buffer.append("<BindingType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BindingType>");
		}
	}
	// field ServiceBuildSet
	{
		const char* s = src.getServiceBuildSet();
		if (s && *s)
		{
			buffer.append("<ServiceBuildSet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ServiceBuildSet>");
		}
	}
	// field Port
	{
		const char* s = src.getPort();
		if (s && *s)
		{
			buffer.append("<Port>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Port>");
		}
	}
	// field Protocol
	{
		const char* s = src.getProtocol();
		if (s && *s)
		{
			buffer.append("<Protocol>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Protocol>");
		}
	}
	// field ESDLBinding
	{
		StringBuffer tmp;
		CESDLBindingContents::serializer(ctx,src.getESDLBinding(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ESDLBinding>%s</ESDLBinding>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</TpBindingEx>");
}

bool CTpBindingEx::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Service.unmarshall(rpc_request, "Service", basepath);
	hasValue |= m_ServiceType.unmarshall(rpc_request, "ServiceType", basepath);
	hasValue |= m_BindingType.unmarshall(rpc_request, "BindingType", basepath);
	hasValue |= m_ServiceBuildSet.unmarshall(rpc_request, "ServiceBuildSet", basepath);
	hasValue |= m_Port.unmarshall(rpc_request, "Port", basepath);
	hasValue |= m_Protocol.unmarshall(rpc_request, "Protocol", basepath);
	hasValue |= m_ESDLBinding.unmarshall(rpc_request, "ESDLBinding", basepath);
	return hasValue;
}

bool CTpBindingEx::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Service.unmarshall(ctx, soapval, "Service");
	hasValue |= m_ServiceType.unmarshall(ctx, soapval, "ServiceType");
	hasValue |= m_BindingType.unmarshall(ctx, soapval, "BindingType");
	hasValue |= m_ServiceBuildSet.unmarshall(ctx, soapval, "ServiceBuildSet");
	hasValue |= m_Port.unmarshall(ctx, soapval, "Port");
	hasValue |= m_Protocol.unmarshall(ctx, soapval, "Protocol");
	hasValue |= m_ESDLBinding.unmarshall(ctx, soapval, "ESDLBinding");
	return hasValue;
}

bool CTpBindingEx::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Service.unmarshall(ctx, params, attachments, "Service", basepath);
	hasValue |= m_ServiceType.unmarshall(ctx, params, attachments, "ServiceType", basepath);
	hasValue |= m_BindingType.unmarshall(ctx, params, attachments, "BindingType", basepath);
	hasValue |= m_ServiceBuildSet.unmarshall(ctx, params, attachments, "ServiceBuildSet", basepath);
	hasValue |= m_Port.unmarshall(ctx, params, attachments, "Port", basepath);
	hasValue |= m_Protocol.unmarshall(ctx, params, attachments, "Protocol", basepath);
	hasValue |= m_ESDLBinding.unmarshall(ctx, params, attachments, "ESDLBinding", basepath);
	return hasValue;
}

const char * CTpBindingEx::getName() { return m_Name.query();}
const char * CTpBindingEx::getService() { return m_Service.query();}
const char * CTpBindingEx::getServiceType() { return m_ServiceType.query();}
const char * CTpBindingEx::getBindingType() { return m_BindingType.query();}
const char * CTpBindingEx::getServiceBuildSet() { return m_ServiceBuildSet.query();}
const char * CTpBindingEx::getPort() { return m_Port.query();}
const char * CTpBindingEx::getProtocol() { return m_Protocol.query();}
IConstESDLBindingContents & CTpBindingEx::getESDLBinding() { return (IConstESDLBindingContents &) m_ESDLBinding.getValue();}
void CTpBindingEx::setName(const char * val){ m_Name.set(val); }
void CTpBindingEx::setService(const char * val){ m_Service.set(val); }
void CTpBindingEx::setServiceType(const char * val){ m_ServiceType.set(val); }
void CTpBindingEx::setBindingType(const char * val){ m_BindingType.set(val); }
void CTpBindingEx::setServiceBuildSet(const char * val){ m_ServiceBuildSet.set(val); }
void CTpBindingEx::setPort(const char * val){ m_Port.set(val); }
void CTpBindingEx::setProtocol(const char * val){ m_Protocol.set(val); }
IEspESDLBindingContents & CTpBindingEx::updateESDLBinding(){ return (IEspESDLBindingContents &) m_ESDLBinding.getValue(); }
void CTpBindingEx::setESDLBinding(IConstESDLBindingContents &ifrom){ m_ESDLBinding.copy(ifrom); }
extern "C"  IEspTpBindingEx *createTpBindingEx(const char *serv, const char *msgname){return ((IEspTpBindingEx *)new CTpBindingEx(serv /*, msgname*/));}
extern "C"  IClientTpBindingEx *createClientTpBindingEx(const char *serv, const char *msgname){return ((IClientTpBindingEx *)new CTpBindingEx(serv /*, msgname*/));}

//=======================================================
// class CESPServerEx Implementation
//=======================================================

CESPServerEx::CESPServerEx(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Description(nilIgnore),m_Build(nilIgnore),m_Type(nilIgnore),m_Path(nilIgnore),m_LogDirectory(nilIgnore),m_TpBindingEx(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESPServerEx");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CESPServerEx::CESPServerEx(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Description(nilIgnore),m_Build(nilIgnore),m_Type(nilIgnore),m_Path(nilIgnore),m_LogDirectory(nilIgnore),m_TpBindingEx(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ESPServerEx");
}

StringBuffer &CESPServerEx::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Build\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Path\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogDirectory\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TpBindingEx\" type=\"tns:ArrayOfTpBindingEx\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CTpBindingEx::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("TpBindingEx") && added.getValue("ArrayOfTpBindingEx")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfTpBindingEx\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TpBindingEx\" type=\"tns:TpBindingEx\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfTpBindingEx",1);
	}
	return schema;
}

void CESPServerEx::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CESPServerEx::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("TpBindingEx"))
	{
		added.setValue("TpBindingEx",1);
		CTpBindingEx::getMapInfo(info,added);
	}
}

StringBuffer &CESPServerEx::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Build");
	form.appendf("  <tr><td><b>Build: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Path");
	form.appendf("  <tr><td><b>Path: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogDirectory");
	form.appendf("  <tr><td><b>LogDirectory: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TpBindingEx");
	form.appendf("<tr><td><b>TpBindingEx: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CESPServerEx::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CESPServerEx::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
	m_Build.marshall(rpc_resp, "Build", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Path.marshall(rpc_resp, "Path", "", "", "");
	m_LogDirectory.marshall(rpc_resp, "LogDirectory", "", "", "");
	m_TpBindingEx.marshall(rpc_resp, "TpBindingEx", "TpBindingEx");
}


void CESPServerEx::copy(CESPServerEx &from)
{
	m_Name.copy(from.m_Name);
	m_Description.copy(from.m_Description);
	m_Build.copy(from.m_Build);
	m_Type.copy(from.m_Type);
	m_Path.copy(from.m_Path);
	m_LogDirectory.copy(from.m_LogDirectory);
	m_TpBindingEx.copy(from.m_TpBindingEx);
}


void CESPServerEx::copy(IConstESPServerEx &ifrom)
{
	setName(ifrom.getName());
	setDescription(ifrom.getDescription());
	setBuild(ifrom.getBuild());
	setType(ifrom.getType());
	setPath(ifrom.getPath());
	setLogDirectory(ifrom.getLogDirectory());
	setTpBindingEx(ifrom.getTpBindingEx());
}


void CESPServerEx::getAttributes(IProperties &attributes)
{
}


void CESPServerEx::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	m_Build.toStr(ctx, buffer, "Build", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Path.toStr(ctx, buffer, "Path", "", true, "", "");
	m_LogDirectory.toStr(ctx, buffer, "LogDirectory", "", true, "", "");
	m_TpBindingEx.toStr(ctx, buffer, "TpBindingEx", "TpBindingEx");
}


void CESPServerEx::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CESPServerEx::serializer(IEspContext* ctx, IConstESPServerEx &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ESPServerEx>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field Build
	{
		const char* s = src.getBuild();
		if (s && *s)
		{
			buffer.append("<Build>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Build>");
		}
	}
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Path
	{
		const char* s = src.getPath();
		if (s && *s)
		{
			buffer.append("<Path>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Path>");
		}
	}
	// field LogDirectory
	{
		const char* s = src.getLogDirectory();
		if (s && *s)
		{
			buffer.append("<LogDirectory>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogDirectory>");
		}
	}
	// field TpBindingEx
	{
		IArrayOf<IConstTpBindingEx>& v = src.getTpBindingEx();
		int size = v.length();
		if (size>0)
			buffer.append("<TpBindingEx>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CTpBindingEx::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</TpBindingEx>");
	}
	if (keepRootTag)
		buffer.append("</ESPServerEx>");
}

bool CESPServerEx::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_Build.unmarshall(rpc_request, "Build", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Path.unmarshall(rpc_request, "Path", basepath);
	hasValue |= m_LogDirectory.unmarshall(rpc_request, "LogDirectory", basepath);
	hasValue |= m_TpBindingEx.unmarshall(rpc_request, "TpBindingEx", basepath);
	return hasValue;
}

bool CESPServerEx::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_Build.unmarshall(ctx, soapval, "Build");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Path.unmarshall(ctx, soapval, "Path");
	hasValue |= m_LogDirectory.unmarshall(ctx, soapval, "LogDirectory");
	hasValue |= m_TpBindingEx.unmarshall(ctx, soapval, "TpBindingEx");
	return hasValue;
}

bool CESPServerEx::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_Build.unmarshall(ctx, params, attachments, "Build", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Path.unmarshall(ctx, params, attachments, "Path", basepath);
	hasValue |= m_LogDirectory.unmarshall(ctx, params, attachments, "LogDirectory", basepath);
	hasValue |= m_TpBindingEx.unmarshall(ctx, params, attachments, "TpBindingEx", basepath);
	return hasValue;
}

const char * CESPServerEx::getName() { return m_Name.query();}
const char * CESPServerEx::getDescription() { return m_Description.query();}
const char * CESPServerEx::getBuild() { return m_Build.query();}
const char * CESPServerEx::getType() { return m_Type.query();}
const char * CESPServerEx::getPath() { return m_Path.query();}
const char * CESPServerEx::getLogDirectory() { return m_LogDirectory.query();}
IArrayOf<IConstTpBindingEx> & CESPServerEx::getTpBindingEx() { return (IArrayOf<IConstTpBindingEx> &) m_TpBindingEx; }
void CESPServerEx::setName(const char * val){ m_Name.set(val); }
void CESPServerEx::setDescription(const char * val){ m_Description.set(val); }
void CESPServerEx::setBuild(const char * val){ m_Build.set(val); }
void CESPServerEx::setType(const char * val){ m_Type.set(val); }
void CESPServerEx::setPath(const char * val){ m_Path.set(val); }
void CESPServerEx::setLogDirectory(const char * val){ m_LogDirectory.set(val); }
void CESPServerEx::setTpBindingEx(IArrayOf<IEspTpBindingEx> &val)
{
	m_TpBindingEx->kill();
	IArrayOf<IConstTpBindingEx> &target = m_TpBindingEx.getValue();
	ForEachItemIn(idx, val)
	{
		IEspTpBindingEx &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CESPServerEx::setTpBindingEx(IArrayOf<IConstTpBindingEx> &val)
{
	m_TpBindingEx->kill();
	IArrayOf<IConstTpBindingEx> &target = m_TpBindingEx.getValue();
	ForEachItemIn(idx, val)
	{
		IConstTpBindingEx &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspESPServerEx *createESPServerEx(const char *serv, const char *msgname){return ((IEspESPServerEx *)new CESPServerEx(serv /*, msgname*/));}
extern "C"  IClientESPServerEx *createClientESPServerEx(const char *serv, const char *msgname){return ((IClientESPServerEx *)new CESPServerEx(serv /*, msgname*/));}

//=======================================================
// class CListDESDLEspBindingsResp Implementation
//=======================================================

CListDESDLEspBindingsResp::CListDESDLEspBindingsResp(const char *serviceName, IRpcMessageBinding *init)
	: m_ESPServers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsResp");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListDESDLEspBindingsResp::CListDESDLEspBindingsResp(const char *serviceName, const char *bc)
	: m_ESPServers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsResp");
}

CListDESDLEspBindingsResp::CListDESDLEspBindingsResp(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ESPServers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsResp");
	unserialize(*rpcmsg,NULL,NULL);
}

CListDESDLEspBindingsResp::CListDESDLEspBindingsResp(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ESPServers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListDESDLEspBindingsResp");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListDESDLEspBindingsResp::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ESPServers\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ESPServer\" type=\"tns:ESPServerEx\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CESPServerEx::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CListDESDLEspBindingsResp::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListDESDLEspBindingsResp::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ESPServerEx"))
	{
		added.setValue("ESPServerEx",1);
		CESPServerEx::getMapInfo(info,added);
	}
}

StringBuffer &CListDESDLEspBindingsResp::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ESPServers");
	form.appendf("<tr><td><b>ESPServers: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListDESDLEspBindingsResp::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListDESDLEspBindingsResp::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ESPServers.marshall(rpc_resp, "ESPServers", "ESPServer");
	}
}


void CListDESDLEspBindingsResp::copy(CListDESDLEspBindingsResp &from)
{
	m_ESPServers.copy(from.m_ESPServers);
}


void CListDESDLEspBindingsResp::copy(IConstListDESDLEspBindingsResp &ifrom)
{
	setESPServers(ifrom.getESPServers());
}


void CListDESDLEspBindingsResp::getAttributes(IProperties &attributes)
{
}


void CListDESDLEspBindingsResp::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ESPServers.toStr(ctx, buffer, "ESPServers", "ESPServer");
	}
}


void CListDESDLEspBindingsResp::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListDESDLEspBindingsResp::serializer(IEspContext* ctx, IConstListDESDLEspBindingsResp &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListDESDLEspBindingsResp>");
	// field ESPServers
	{
		IArrayOf<IConstESPServerEx>& v = src.getESPServers();
		int size = v.length();
		if (size>0)
			buffer.append("<ESPServers>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<ESPServer>");
			CESPServerEx::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</ESPServer>");
		}
		if (size>0)
			buffer.append("</ESPServers>");
	}
	if (keepRootTag)
		buffer.append("</ListDESDLEspBindingsResp>");
}

bool CListDESDLEspBindingsResp::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ESPServers.unmarshall(rpc_request, "ESPServers", basepath);
	}
	return hasValue;
}

bool CListDESDLEspBindingsResp::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ESPServers.unmarshall(ctx, soapval, "ESPServers");
	return hasValue;
}

bool CListDESDLEspBindingsResp::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ESPServers.unmarshall(ctx, params, attachments, "ESPServers", basepath);
	return hasValue;
}

IArrayOf<IConstESPServerEx> & CListDESDLEspBindingsResp::getESPServers() { return (IArrayOf<IConstESPServerEx> &) m_ESPServers; }
void CListDESDLEspBindingsResp::setESPServers(IArrayOf<IEspESPServerEx> &val)
{
	m_ESPServers->kill();
	IArrayOf<IConstESPServerEx> &target = m_ESPServers.getValue();
	ForEachItemIn(idx, val)
	{
		IEspESPServerEx &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CListDESDLEspBindingsResp::setESPServers(IArrayOf<IConstESPServerEx> &val)
{
	m_ESPServers->kill();
	IArrayOf<IConstESPServerEx> &target = m_ESPServers.getValue();
	ForEachItemIn(idx, val)
	{
		IConstESPServerEx &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspListDESDLEspBindingsResp *createListDESDLEspBindingsResp(const char *serv){return ((IEspListDESDLEspBindingsResp *)new CListDESDLEspBindingsResp(serv));}
extern "C"  IClientListDESDLEspBindingsResp *createClientListDESDLEspBindingsResp(const char *serv){return ((IClientListDESDLEspBindingsResp *)new CListDESDLEspBindingsResp(serv));}

//=======================================================
// class CConfigureESDLBindingMethodRequest Implementation
//=======================================================

CConfigureESDLBindingMethodRequest::CConfigureESDLBindingMethodRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_EsdlBindingId(nilRemove),m_MethodName(nilRemove),m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_MethodStructure(serviceName, nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CConfigureESDLBindingMethodRequest::CConfigureESDLBindingMethodRequest(const char *serviceName, const char *bc)
	: m_EsdlBindingId(nilRemove),m_MethodName(nilRemove),m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_MethodStructure(serviceName, nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodRequest");
}

CConfigureESDLBindingMethodRequest::CConfigureESDLBindingMethodRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EsdlBindingId(nilRemove),m_MethodName(nilRemove),m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_MethodStructure(serviceName, nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CConfigureESDLBindingMethodRequest::CConfigureESDLBindingMethodRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EsdlBindingId(nilRemove),m_MethodName(nilRemove),m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EspPort(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_Overwrite(nilRemove),m_Config(nilRemove),m_MethodStructure(serviceName, nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CConfigureESDLBindingMethodRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","EsdlBindingId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlBindingId\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","MethodName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MethodName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","EspProcName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","EspBindingName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspBindingName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","EspPort")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspPort\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","EsdlDefinitionID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlDefinitionID\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","EsdlServiceName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlServiceName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Config\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","MethodStructure")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MethodStructure\" type=\"tns:MethodConfig\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","EchoBinding")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EchoBinding\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("ConfigureESDLBindingMethodRequest","MethodStructure"))
			CMethodConfig::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CConfigureESDLBindingMethodRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CConfigureESDLBindingMethodRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ConfigureESDLBindingMethodRequest","EsdlBindingId",1.4);
	info.addMinVersion("ConfigureESDLBindingMethodRequest","MethodName",1.4);
	info.addMaxVersion("ConfigureESDLBindingMethodRequest","EspProcName",1.3);
	info.addMaxVersion("ConfigureESDLBindingMethodRequest","EspBindingName",1.3);
	info.addMaxVersion("ConfigureESDLBindingMethodRequest","EspPort",1.3);
	info.addMaxVersion("ConfigureESDLBindingMethodRequest","EsdlDefinitionID",1.3);
	info.addMaxVersion("ConfigureESDLBindingMethodRequest","EsdlServiceName",1.3);
	info.addMinVersion("ConfigureESDLBindingMethodRequest","MethodStructure",1.2);
	info.addMinVersion("ConfigureESDLBindingMethodRequest","EchoBinding",1.2);
	if (!added.getValue("MethodConfig"))
	{
		added.setValue("MethodConfig",1);
		CMethodConfig::getMapInfo(info,added);
	}
}

StringBuffer &CConfigureESDLBindingMethodRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","EsdlBindingId")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EsdlBindingId");
		form.appendf("  <tr><td><b>EsdlBindingId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","MethodName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MethodName");
		form.appendf("  <tr><td><b>MethodName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","EspProcName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspProcName");
		form.appendf("  <tr><td><b>EspProcName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","EspBindingName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspBindingName");
		form.appendf("  <tr><td><b>EspBindingName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","EspPort")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspPort");
		form.appendf("  <tr><td><b>EspPort: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","EsdlDefinitionID")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EsdlDefinitionID");
		form.appendf("  <tr><td><b>EsdlDefinitionID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","EsdlServiceName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EsdlServiceName");
		form.appendf("  <tr><td><b>EsdlServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Overwrite");
	
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Config");
	form.appendf("  <tr><td><b>Config: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","MethodStructure")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MethodStructure");
		form.append("<tr>").append("<td><b>MethodStructure: </b></td><td><hr/>");
		CMethodConfig::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodRequest","EchoBinding")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EchoBinding");
		
	form.appendf("  <tr><td><b>EchoBinding? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CConfigureESDLBindingMethodRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CConfigureESDLBindingMethodRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	if ((clientVer==-1.0 || clientVer>=1.4))
		m_EsdlBindingId.marshall(rpc_resp, "EsdlBindingId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_MethodName.marshall(rpc_resp, "MethodName", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspProcName.marshall(rpc_resp, "EspProcName", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspBindingName.marshall(rpc_resp, "EspBindingName", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspPort.marshall(rpc_resp, "EspPort", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EsdlDefinitionID.marshall(rpc_resp, "EsdlDefinitionID", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EsdlServiceName.marshall(rpc_resp, "EsdlServiceName", "", "", "");
	m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
	m_Config.marshall(rpc_resp, "Config", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_MethodStructure.marshall(rpc_resp, "MethodStructure", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_EchoBinding.marshall(rpc_resp, "EchoBinding", "", "", "");
}


void CConfigureESDLBindingMethodRequest::copy(CConfigureESDLBindingMethodRequest &from)
{
	m_EsdlBindingId.copy(from.m_EsdlBindingId);
	m_MethodName.copy(from.m_MethodName);
	m_EspProcName.copy(from.m_EspProcName);
	m_EspBindingName.copy(from.m_EspBindingName);
	m_EspPort.copy(from.m_EspPort);
	m_EsdlDefinitionID.copy(from.m_EsdlDefinitionID);
	m_EsdlServiceName.copy(from.m_EsdlServiceName);
	m_Overwrite.copy(from.m_Overwrite);
	m_Config.copy(from.m_Config);
	m_MethodStructure.copy(from.m_MethodStructure);
	m_EchoBinding.copy(from.m_EchoBinding);
}


void CConfigureESDLBindingMethodRequest::copy(IConstConfigureESDLBindingMethodRequest &ifrom)
{
	setEsdlBindingId(ifrom.getEsdlBindingId());
	setMethodName(ifrom.getMethodName());
	setEspProcName(ifrom.getEspProcName());
	setEspBindingName(ifrom.getEspBindingName());
	setEspPort(ifrom.getEspPort());
	setEsdlDefinitionID(ifrom.getEsdlDefinitionID());
	setEsdlServiceName(ifrom.getEsdlServiceName());
	setOverwrite(ifrom.getOverwrite());
	setConfig(ifrom.getConfig());
	setMethodStructure(ifrom.getMethodStructure());
	setEchoBinding(ifrom.getEchoBinding());
}


void CConfigureESDLBindingMethodRequest::getAttributes(IProperties &attributes)
{
}


void CConfigureESDLBindingMethodRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_EsdlBindingId.toStr(ctx, buffer, "EsdlBindingId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.4))
		m_MethodName.toStr(ctx, buffer, "MethodName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspProcName.toStr(ctx, buffer, "EspProcName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspBindingName.toStr(ctx, buffer, "EspBindingName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspPort.toStr(ctx, buffer, "EspPort", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EsdlDefinitionID.toStr(ctx, buffer, "EsdlDefinitionID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EsdlServiceName.toStr(ctx, buffer, "EsdlServiceName", "", true, "", "");
	m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
	m_Config.toStr(ctx, buffer, "Config", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_MethodStructure.toStr(ctx, buffer, "MethodStructure", "", false, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_EchoBinding.toStr(ctx, buffer, "EchoBinding", "", true, "", "");
}


void CConfigureESDLBindingMethodRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CConfigureESDLBindingMethodRequest::serializer(IEspContext* ctx, IConstConfigureESDLBindingMethodRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ConfigureESDLBindingMethodRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field EsdlBindingId
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		const char* s = src.getEsdlBindingId();
		if (s && *s)
		{
			buffer.append("<EsdlBindingId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlBindingId>");
		}
	}
	// field MethodName
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		const char* s = src.getMethodName();
		if (s && *s)
		{
			buffer.append("<MethodName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MethodName>");
		}
	}
	// field EspProcName
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspProcName();
		if (s && *s)
		{
			buffer.append("<EspProcName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcName>");
		}
	}
	// field EspBindingName
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspBindingName();
		if (s && *s)
		{
			buffer.append("<EspBindingName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspBindingName>");
		}
	}
	// field EspPort
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspPort();
		if (s && *s)
		{
			buffer.append("<EspPort>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspPort>");
		}
	}
	// field EsdlDefinitionID
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEsdlDefinitionID();
		if (s && *s)
		{
			buffer.append("<EsdlDefinitionID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlDefinitionID>");
		}
	}
	// field EsdlServiceName
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEsdlServiceName();
		if (s && *s)
		{
			buffer.append("<EsdlServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlServiceName>");
		}
	}
	// field Overwrite
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	// field Config
	{
		const char* s = src.getConfig();
		if (s && *s)
		{
			buffer.append("<Config>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Config>");
		}
	}
	// field MethodStructure
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		StringBuffer tmp;
		CMethodConfig::serializer(ctx,src.getMethodStructure(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<MethodStructure>%s</MethodStructure>",tmp.str());
	}
	// field EchoBinding
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		bool b = src.getEchoBinding();
		if (b)
			buffer.appendf("<EchoBinding>1</EchoBinding>");
	}
	if (keepRootTag)
		buffer.append("</ConfigureESDLBindingMethodRequest>");
}

bool CConfigureESDLBindingMethodRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(rpc_request, "EsdlBindingId", basepath);
	hasValue |= m_MethodName.unmarshall(rpc_request, "MethodName", basepath);
	hasValue |= m_EspProcName.unmarshall(rpc_request, "EspProcName", basepath);
	hasValue |= m_EspBindingName.unmarshall(rpc_request, "EspBindingName", basepath);
	hasValue |= m_EspPort.unmarshall(rpc_request, "EspPort", basepath);
	hasValue |= m_EsdlDefinitionID.unmarshall(rpc_request, "EsdlDefinitionID", basepath);
	hasValue |= m_EsdlServiceName.unmarshall(rpc_request, "EsdlServiceName", basepath);
	hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
	hasValue |= m_Config.unmarshall(rpc_request, "Config", basepath);
	hasValue |= m_MethodStructure.unmarshall(rpc_request, "MethodStructure", basepath);
	hasValue |= m_EchoBinding.unmarshall(rpc_request, "EchoBinding", basepath);
	return hasValue;
}

bool CConfigureESDLBindingMethodRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(ctx, soapval, "EsdlBindingId");
	hasValue |= m_MethodName.unmarshall(ctx, soapval, "MethodName");
	hasValue |= m_EspProcName.unmarshall(ctx, soapval, "EspProcName");
	hasValue |= m_EspBindingName.unmarshall(ctx, soapval, "EspBindingName");
	hasValue |= m_EspPort.unmarshall(ctx, soapval, "EspPort");
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, soapval, "EsdlDefinitionID");
	hasValue |= m_EsdlServiceName.unmarshall(ctx, soapval, "EsdlServiceName");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	hasValue |= m_Config.unmarshall(ctx, soapval, "Config");
	hasValue |= m_MethodStructure.unmarshall(ctx, soapval, "MethodStructure");
	hasValue |= m_EchoBinding.unmarshall(ctx, soapval, "EchoBinding");
	return hasValue;
}

bool CConfigureESDLBindingMethodRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(ctx, params, attachments, "EsdlBindingId", basepath);
	hasValue |= m_MethodName.unmarshall(ctx, params, attachments, "MethodName", basepath);
	hasValue |= m_EspProcName.unmarshall(ctx, params, attachments, "EspProcName", basepath);
	hasValue |= m_EspBindingName.unmarshall(ctx, params, attachments, "EspBindingName", basepath);
	hasValue |= m_EspPort.unmarshall(ctx, params, attachments, "EspPort", basepath);
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, params, attachments, "EsdlDefinitionID", basepath);
	hasValue |= m_EsdlServiceName.unmarshall(ctx, params, attachments, "EsdlServiceName", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	hasValue |= m_Config.unmarshall(ctx, params, attachments, "Config", basepath);
	hasValue |= m_MethodStructure.unmarshall(ctx, params, attachments, "MethodStructure", basepath);
	hasValue |= m_EchoBinding.unmarshall(ctx, params, attachments, "EchoBinding", basepath);
	return hasValue;
}

const char * CConfigureESDLBindingMethodRequest::getEsdlBindingId() { return m_EsdlBindingId.query();}
const char * CConfigureESDLBindingMethodRequest::getMethodName() { return m_MethodName.query();}
const char * CConfigureESDLBindingMethodRequest::getEspProcName() { return m_EspProcName.query();}
const char * CConfigureESDLBindingMethodRequest::getEspBindingName() { return m_EspBindingName.query();}
const char * CConfigureESDLBindingMethodRequest::getEspPort() { return m_EspPort.query();}
const char * CConfigureESDLBindingMethodRequest::getEsdlDefinitionID() { return m_EsdlDefinitionID.query();}
const char * CConfigureESDLBindingMethodRequest::getEsdlServiceName() { return m_EsdlServiceName.query();}
bool CConfigureESDLBindingMethodRequest::getOverwrite_isNull(){return m_Overwrite.is_nil();}
bool CConfigureESDLBindingMethodRequest::getOverwrite() { return m_Overwrite;}
const char * CConfigureESDLBindingMethodRequest::getConfig() { return m_Config.query();}
IConstMethodConfig & CConfigureESDLBindingMethodRequest::getMethodStructure() { return (IConstMethodConfig &) m_MethodStructure.getValue();}
bool CConfigureESDLBindingMethodRequest::getEchoBinding_isNull(){return m_EchoBinding.is_nil();}
bool CConfigureESDLBindingMethodRequest::getEchoBinding() { return m_EchoBinding;}
void CConfigureESDLBindingMethodRequest::setEsdlBindingId(const char * val){ m_EsdlBindingId.set(val); }
void CConfigureESDLBindingMethodRequest::setMethodName(const char * val){ m_MethodName.set(val); }
void CConfigureESDLBindingMethodRequest::setEspProcName(const char * val){ m_EspProcName.set(val); }
void CConfigureESDLBindingMethodRequest::setEspBindingName(const char * val){ m_EspBindingName.set(val); }
void CConfigureESDLBindingMethodRequest::setEspPort(const char * val){ m_EspPort.set(val); }
void CConfigureESDLBindingMethodRequest::setEsdlDefinitionID(const char * val){ m_EsdlDefinitionID.set(val); }
void CConfigureESDLBindingMethodRequest::setEsdlServiceName(const char * val){ m_EsdlServiceName.set(val); }
void CConfigureESDLBindingMethodRequest::setOverwrite_null(){ m_Overwrite.Nil(); }void CConfigureESDLBindingMethodRequest::setOverwrite(bool val){ m_Overwrite=val; }
void CConfigureESDLBindingMethodRequest::setConfig(const char * val){ m_Config.set(val); }
IEspMethodConfig & CConfigureESDLBindingMethodRequest::updateMethodStructure(){ return (IEspMethodConfig &) m_MethodStructure.getValue(); }
void CConfigureESDLBindingMethodRequest::setMethodStructure(IConstMethodConfig &ifrom){ m_MethodStructure.copy(ifrom); }
void CConfigureESDLBindingMethodRequest::setEchoBinding_null(){ m_EchoBinding.Nil(); }void CConfigureESDLBindingMethodRequest::setEchoBinding(bool val){ m_EchoBinding=val; }
extern "C"  IEspConfigureESDLBindingMethodRequest *createConfigureESDLBindingMethodRequest(const char *serv){return ((IEspConfigureESDLBindingMethodRequest *)new CConfigureESDLBindingMethodRequest(serv));}
extern "C"  IClientConfigureESDLBindingMethodRequest *createClientConfigureESDLBindingMethodRequest(const char *serv){return ((IClientConfigureESDLBindingMethodRequest *)new CConfigureESDLBindingMethodRequest(serv));}

//=======================================================
// class CConfigureESDLBindingMethodResponse Implementation
//=======================================================

CConfigureESDLBindingMethodResponse::CConfigureESDLBindingMethodResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_EspProcName(nilRemove),m_ServiceName(nilRemove),m_ServiceEsdlVersion(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CConfigureESDLBindingMethodResponse::CConfigureESDLBindingMethodResponse(const char *serviceName, const char *bc)
	: m_EspProcName(nilRemove),m_ServiceName(nilRemove),m_ServiceEsdlVersion(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodResponse");
}

CConfigureESDLBindingMethodResponse::CConfigureESDLBindingMethodResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EspProcName(nilRemove),m_ServiceName(nilRemove),m_ServiceEsdlVersion(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CConfigureESDLBindingMethodResponse::CConfigureESDLBindingMethodResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EspProcName(nilRemove),m_ServiceName(nilRemove),m_ServiceEsdlVersion(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingMethodResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CConfigureESDLBindingMethodResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ConfigureESDLBindingMethodResponse","ServiceName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodResponse","ServiceEsdlVersion")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceEsdlVersion\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodResponse","EspBindingName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspBindingName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodResponse","EsdlDefinitionID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlDefinitionID\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ConfigureESDLBindingMethodResponse","EsdlServiceName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlServiceName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"status\" type=\"tns:BaseESDLStatus\"/>\n");
		if (!context.suppressed("ConfigureESDLBindingMethodResponse","ESDLBinding")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLBinding\" type=\"tns:ESDLBindingContents\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CBaseESDLStatus::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ConfigureESDLBindingMethodResponse","ESDLBinding"))
			CESDLBindingContents::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CConfigureESDLBindingMethodResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CConfigureESDLBindingMethodResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMaxVersion("ConfigureESDLBindingMethodResponse","ServiceName",1.1);
	info.addMaxVersion("ConfigureESDLBindingMethodResponse","ServiceEsdlVersion",1.1);
	info.addMinVersion("ConfigureESDLBindingMethodResponse","EspBindingName",1.2);
	info.addMinVersion("ConfigureESDLBindingMethodResponse","EsdlDefinitionID",1.2);
	info.addMinVersion("ConfigureESDLBindingMethodResponse","EsdlServiceName",1.2);
	info.addMinVersion("ConfigureESDLBindingMethodResponse","ESDLBinding",1.2);
	if (!added.getValue("BaseESDLStatus"))
	{
		added.setValue("BaseESDLStatus",1);
		CBaseESDLStatus::getMapInfo(info,added);
	}
	if (!added.getValue("ESDLBindingContents"))
	{
		added.setValue("ESDLBindingContents",1);
		CESDLBindingContents::getMapInfo(info,added);
	}
}

StringBuffer &CConfigureESDLBindingMethodResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspProcName");
	form.appendf("  <tr><td><b>EspProcName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ConfigureESDLBindingMethodResponse","ServiceName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ServiceName");
		form.appendf("  <tr><td><b>ServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodResponse","ServiceEsdlVersion")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ServiceEsdlVersion");
		form.appendf("  <tr><td><b>ServiceEsdlVersion: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodResponse","EspBindingName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspBindingName");
		form.appendf("  <tr><td><b>EspBindingName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodResponse","EsdlDefinitionID")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EsdlDefinitionID");
		form.appendf("  <tr><td><b>EsdlDefinitionID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ConfigureESDLBindingMethodResponse","EsdlServiceName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EsdlServiceName");
		form.appendf("  <tr><td><b>EsdlServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("status");
	form.append("<tr>").append("<td><b>status: </b></td><td><hr/>");
	CBaseESDLStatus::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (!context.suppressed("ConfigureESDLBindingMethodResponse","ESDLBinding")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ESDLBinding");
		form.append("<tr>").append("<td><b>ESDLBinding: </b></td><td><hr/>");
		CESDLBindingContents::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CConfigureESDLBindingMethodResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CConfigureESDLBindingMethodResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_EspProcName.marshall(rpc_resp, "EspProcName", "", "", "");
		if ((clientVer==-1.0 || clientVer<=1.1))
			m_ServiceName.marshall(rpc_resp, "ServiceName", "", "", "");
		if ((clientVer==-1.0 || clientVer<=1.1))
			m_ServiceEsdlVersion.marshall(rpc_resp, "ServiceEsdlVersion", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_EspBindingName.marshall(rpc_resp, "EspBindingName", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_EsdlDefinitionID.marshall(rpc_resp, "EsdlDefinitionID", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_EsdlServiceName.marshall(rpc_resp, "EsdlServiceName", "", "", "");
		m_status.marshall(rpc_resp, "status", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_ESDLBinding.marshall(rpc_resp, "ESDLBinding", "", "", "");
	}
}


void CConfigureESDLBindingMethodResponse::copy(CConfigureESDLBindingMethodResponse &from)
{
	m_EspProcName.copy(from.m_EspProcName);
	m_ServiceName.copy(from.m_ServiceName);
	m_ServiceEsdlVersion.copy(from.m_ServiceEsdlVersion);
	m_EspBindingName.copy(from.m_EspBindingName);
	m_EsdlDefinitionID.copy(from.m_EsdlDefinitionID);
	m_EsdlServiceName.copy(from.m_EsdlServiceName);
	m_status.copy(from.m_status);
	m_ESDLBinding.copy(from.m_ESDLBinding);
}


void CConfigureESDLBindingMethodResponse::copy(IConstConfigureESDLBindingMethodResponse &ifrom)
{
	setEspProcName(ifrom.getEspProcName());
	setServiceName(ifrom.getServiceName());
	setServiceEsdlVersion(ifrom.getServiceEsdlVersion());
	setEspBindingName(ifrom.getEspBindingName());
	setEsdlDefinitionID(ifrom.getEsdlDefinitionID());
	setEsdlServiceName(ifrom.getEsdlServiceName());
	setStatus(ifrom.getStatus());
	setESDLBinding(ifrom.getESDLBinding());
}


void CConfigureESDLBindingMethodResponse::getAttributes(IProperties &attributes)
{
}


void CConfigureESDLBindingMethodResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_EspProcName.toStr(ctx, buffer, "EspProcName", "", true, "", "");
		if ((clientVer==-1.0 || clientVer<=1.1))
			m_ServiceName.toStr(ctx, buffer, "ServiceName", "", true, "", "");
		if ((clientVer==-1.0 || clientVer<=1.1))
			m_ServiceEsdlVersion.toStr(ctx, buffer, "ServiceEsdlVersion", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_EspBindingName.toStr(ctx, buffer, "EspBindingName", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_EsdlDefinitionID.toStr(ctx, buffer, "EsdlDefinitionID", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_EsdlServiceName.toStr(ctx, buffer, "EsdlServiceName", "", true, "", "");
		m_status.toStr(ctx, buffer, "status", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_ESDLBinding.toStr(ctx, buffer, "ESDLBinding", "", false, "", "");
	}
}


void CConfigureESDLBindingMethodResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CConfigureESDLBindingMethodResponse::serializer(IEspContext* ctx, IConstConfigureESDLBindingMethodResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ConfigureESDLBindingMethodResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field EspProcName
	{
		const char* s = src.getEspProcName();
		if (s && *s)
		{
			buffer.append("<EspProcName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcName>");
		}
	}
	// field ServiceName
	if ((clientVer==-1.0 || clientVer<=1.1))
	{
		const char* s = src.getServiceName();
		if (s && *s)
		{
			buffer.append("<ServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ServiceName>");
		}
	}
	// field ServiceEsdlVersion
	if ((clientVer==-1.0 || clientVer<=1.1))
	{
		int n = src.getServiceEsdlVersion();
		if (n)
			buffer.appendf("<ServiceEsdlVersion>%d</ServiceEsdlVersion>", n);
	}
	// field EspBindingName
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		const char* s = src.getEspBindingName();
		if (s && *s)
		{
			buffer.append("<EspBindingName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspBindingName>");
		}
	}
	// field EsdlDefinitionID
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		const char* s = src.getEsdlDefinitionID();
		if (s && *s)
		{
			buffer.append("<EsdlDefinitionID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlDefinitionID>");
		}
	}
	// field EsdlServiceName
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		const char* s = src.getEsdlServiceName();
		if (s && *s)
		{
			buffer.append("<EsdlServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlServiceName>");
		}
	}
	// field status
	{
		StringBuffer tmp;
		CBaseESDLStatus::serializer(ctx,src.getStatus(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<status>%s</status>",tmp.str());
	}
	// field ESDLBinding
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		StringBuffer tmp;
		CESDLBindingContents::serializer(ctx,src.getESDLBinding(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ESDLBinding>%s</ESDLBinding>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</ConfigureESDLBindingMethodResponse>");
}

bool CConfigureESDLBindingMethodResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_EspProcName.unmarshall(rpc_request, "EspProcName", basepath);
		hasValue |= m_ServiceName.unmarshall(rpc_request, "ServiceName", basepath);
		hasValue |= m_ServiceEsdlVersion.unmarshall(rpc_request, "ServiceEsdlVersion", basepath);
		hasValue |= m_EspBindingName.unmarshall(rpc_request, "EspBindingName", basepath);
		hasValue |= m_EsdlDefinitionID.unmarshall(rpc_request, "EsdlDefinitionID", basepath);
		hasValue |= m_EsdlServiceName.unmarshall(rpc_request, "EsdlServiceName", basepath);
		hasValue |= m_status.unmarshall(rpc_request, "status", basepath);
		hasValue |= m_ESDLBinding.unmarshall(rpc_request, "ESDLBinding", basepath);
	}
	return hasValue;
}

bool CConfigureESDLBindingMethodResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EspProcName.unmarshall(ctx, soapval, "EspProcName");
	hasValue |= m_ServiceName.unmarshall(ctx, soapval, "ServiceName");
	hasValue |= m_ServiceEsdlVersion.unmarshall(ctx, soapval, "ServiceEsdlVersion");
	hasValue |= m_EspBindingName.unmarshall(ctx, soapval, "EspBindingName");
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, soapval, "EsdlDefinitionID");
	hasValue |= m_EsdlServiceName.unmarshall(ctx, soapval, "EsdlServiceName");
	hasValue |= m_status.unmarshall(ctx, soapval, "status");
	hasValue |= m_ESDLBinding.unmarshall(ctx, soapval, "ESDLBinding");
	return hasValue;
}

bool CConfigureESDLBindingMethodResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EspProcName.unmarshall(ctx, params, attachments, "EspProcName", basepath);
	hasValue |= m_ServiceName.unmarshall(ctx, params, attachments, "ServiceName", basepath);
	hasValue |= m_ServiceEsdlVersion.unmarshall(ctx, params, attachments, "ServiceEsdlVersion", basepath);
	hasValue |= m_EspBindingName.unmarshall(ctx, params, attachments, "EspBindingName", basepath);
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, params, attachments, "EsdlDefinitionID", basepath);
	hasValue |= m_EsdlServiceName.unmarshall(ctx, params, attachments, "EsdlServiceName", basepath);
	hasValue |= m_status.unmarshall(ctx, params, attachments, "status", basepath);
	hasValue |= m_ESDLBinding.unmarshall(ctx, params, attachments, "ESDLBinding", basepath);
	return hasValue;
}

const char * CConfigureESDLBindingMethodResponse::getEspProcName() { return m_EspProcName.query();}
const char * CConfigureESDLBindingMethodResponse::getServiceName() { return m_ServiceName.query();}
bool CConfigureESDLBindingMethodResponse::getServiceEsdlVersion_isNull(){return m_ServiceEsdlVersion.is_nil();}
int CConfigureESDLBindingMethodResponse::getServiceEsdlVersion() { return m_ServiceEsdlVersion;}
const char * CConfigureESDLBindingMethodResponse::getEspBindingName() { return m_EspBindingName.query();}
const char * CConfigureESDLBindingMethodResponse::getEsdlDefinitionID() { return m_EsdlDefinitionID.query();}
const char * CConfigureESDLBindingMethodResponse::getEsdlServiceName() { return m_EsdlServiceName.query();}
IConstBaseESDLStatus & CConfigureESDLBindingMethodResponse::getStatus() { return (IConstBaseESDLStatus &) m_status.getValue();}
IConstESDLBindingContents & CConfigureESDLBindingMethodResponse::getESDLBinding() { return (IConstESDLBindingContents &) m_ESDLBinding.getValue();}
void CConfigureESDLBindingMethodResponse::setEspProcName(const char * val){ m_EspProcName.set(val); }
void CConfigureESDLBindingMethodResponse::setServiceName(const char * val){ m_ServiceName.set(val); }
void CConfigureESDLBindingMethodResponse::setServiceEsdlVersion_null(){ m_ServiceEsdlVersion.Nil(); }void CConfigureESDLBindingMethodResponse::setServiceEsdlVersion(int val){ m_ServiceEsdlVersion=val; }
void CConfigureESDLBindingMethodResponse::setEspBindingName(const char * val){ m_EspBindingName.set(val); }
void CConfigureESDLBindingMethodResponse::setEsdlDefinitionID(const char * val){ m_EsdlDefinitionID.set(val); }
void CConfigureESDLBindingMethodResponse::setEsdlServiceName(const char * val){ m_EsdlServiceName.set(val); }
IEspBaseESDLStatus & CConfigureESDLBindingMethodResponse::updateStatus(){ return (IEspBaseESDLStatus &) m_status.getValue(); }
void CConfigureESDLBindingMethodResponse::setStatus(IConstBaseESDLStatus &ifrom){ m_status.copy(ifrom); }
IEspESDLBindingContents & CConfigureESDLBindingMethodResponse::updateESDLBinding(){ return (IEspESDLBindingContents &) m_ESDLBinding.getValue(); }
void CConfigureESDLBindingMethodResponse::setESDLBinding(IConstESDLBindingContents &ifrom){ m_ESDLBinding.copy(ifrom); }
extern "C"  IEspConfigureESDLBindingMethodResponse *createConfigureESDLBindingMethodResponse(const char *serv){return ((IEspConfigureESDLBindingMethodResponse *)new CConfigureESDLBindingMethodResponse(serv));}
extern "C"  IClientConfigureESDLBindingMethodResponse *createClientConfigureESDLBindingMethodResponse(const char *serv){return ((IClientConfigureESDLBindingMethodResponse *)new CConfigureESDLBindingMethodResponse(serv));}

//=======================================================
// class CConfigureESDLBindingLogTransformRequest Implementation
//=======================================================

CConfigureESDLBindingLogTransformRequest::CConfigureESDLBindingLogTransformRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_EsdlBindingId(nilRemove),m_LogTransformName(nilRemove),m_Overwrite(nilRemove),m_Encoded(nilRemove),m_Config(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CConfigureESDLBindingLogTransformRequest::CConfigureESDLBindingLogTransformRequest(const char *serviceName, const char *bc)
	: m_EsdlBindingId(nilRemove),m_LogTransformName(nilRemove),m_Overwrite(nilRemove),m_Encoded(nilRemove),m_Config(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformRequest");
}

CConfigureESDLBindingLogTransformRequest::CConfigureESDLBindingLogTransformRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EsdlBindingId(nilRemove),m_LogTransformName(nilRemove),m_Overwrite(nilRemove),m_Encoded(nilRemove),m_Config(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CConfigureESDLBindingLogTransformRequest::CConfigureESDLBindingLogTransformRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EsdlBindingId(nilRemove),m_LogTransformName(nilRemove),m_Overwrite(nilRemove),m_Encoded(nilRemove),m_Config(nilRemove),m_EchoBinding(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CConfigureESDLBindingLogTransformRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlBindingId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogTransformName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Encoded\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Config\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EchoBinding\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CConfigureESDLBindingLogTransformRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CConfigureESDLBindingLogTransformRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CConfigureESDLBindingLogTransformRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EsdlBindingId");
	form.appendf("  <tr><td><b>EsdlBindingId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogTransformName");
	form.appendf("  <tr><td><b>LogTransformName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Overwrite");
	
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Encoded");
	
	form.appendf("  <tr><td><b>Encoded? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Config");
	form.appendf("  <tr><td><b>Config: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EchoBinding");
	
	form.appendf("  <tr><td><b>EchoBinding? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CConfigureESDLBindingLogTransformRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CConfigureESDLBindingLogTransformRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_EsdlBindingId.marshall(rpc_resp, "EsdlBindingId", "", "", "");
	m_LogTransformName.marshall(rpc_resp, "LogTransformName", "", "", "");
	m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
	m_Encoded.marshall(rpc_resp, "Encoded", "", "", "");
	m_Config.marshall(rpc_resp, "Config", "", "", "");
	m_EchoBinding.marshall(rpc_resp, "EchoBinding", "", "", "");
}


void CConfigureESDLBindingLogTransformRequest::copy(CConfigureESDLBindingLogTransformRequest &from)
{
	m_EsdlBindingId.copy(from.m_EsdlBindingId);
	m_LogTransformName.copy(from.m_LogTransformName);
	m_Overwrite.copy(from.m_Overwrite);
	m_Encoded.copy(from.m_Encoded);
	m_Config.copy(from.m_Config);
	m_EchoBinding.copy(from.m_EchoBinding);
}


void CConfigureESDLBindingLogTransformRequest::copy(IConstConfigureESDLBindingLogTransformRequest &ifrom)
{
	setEsdlBindingId(ifrom.getEsdlBindingId());
	setLogTransformName(ifrom.getLogTransformName());
	setOverwrite(ifrom.getOverwrite());
	setEncoded(ifrom.getEncoded());
	setConfig(ifrom.getConfig());
	setEchoBinding(ifrom.getEchoBinding());
}


void CConfigureESDLBindingLogTransformRequest::getAttributes(IProperties &attributes)
{
}


void CConfigureESDLBindingLogTransformRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_EsdlBindingId.toStr(ctx, buffer, "EsdlBindingId", "", true, "", "");
	m_LogTransformName.toStr(ctx, buffer, "LogTransformName", "", true, "", "");
	m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
	m_Encoded.toStr(ctx, buffer, "Encoded", "", true, "", "");
	m_Config.toStr(ctx, buffer, "Config", "", true, "", "");
	m_EchoBinding.toStr(ctx, buffer, "EchoBinding", "", true, "", "");
}


void CConfigureESDLBindingLogTransformRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CConfigureESDLBindingLogTransformRequest::serializer(IEspContext* ctx, IConstConfigureESDLBindingLogTransformRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ConfigureESDLBindingLogTransformRequest>");
	// field EsdlBindingId
	{
		const char* s = src.getEsdlBindingId();
		if (s && *s)
		{
			buffer.append("<EsdlBindingId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlBindingId>");
		}
	}
	// field LogTransformName
	{
		const char* s = src.getLogTransformName();
		if (s && *s)
		{
			buffer.append("<LogTransformName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogTransformName>");
		}
	}
	// field Overwrite
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	// field Encoded
	{
		bool b = src.getEncoded();
		if (b)
			buffer.appendf("<Encoded>1</Encoded>");
	}
	// field Config
	{
		const char* s = src.getConfig();
		if (s && *s)
		{
			buffer.append("<Config>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Config>");
		}
	}
	// field EchoBinding
	{
		bool b = src.getEchoBinding();
		if (b)
			buffer.appendf("<EchoBinding>1</EchoBinding>");
	}
	if (keepRootTag)
		buffer.append("</ConfigureESDLBindingLogTransformRequest>");
}

bool CConfigureESDLBindingLogTransformRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(rpc_request, "EsdlBindingId", basepath);
	hasValue |= m_LogTransformName.unmarshall(rpc_request, "LogTransformName", basepath);
	hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
	hasValue |= m_Encoded.unmarshall(rpc_request, "Encoded", basepath);
	hasValue |= m_Config.unmarshall(rpc_request, "Config", basepath);
	hasValue |= m_EchoBinding.unmarshall(rpc_request, "EchoBinding", basepath);
	return hasValue;
}

bool CConfigureESDLBindingLogTransformRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(ctx, soapval, "EsdlBindingId");
	hasValue |= m_LogTransformName.unmarshall(ctx, soapval, "LogTransformName");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	hasValue |= m_Encoded.unmarshall(ctx, soapval, "Encoded");
	hasValue |= m_Config.unmarshall(ctx, soapval, "Config");
	hasValue |= m_EchoBinding.unmarshall(ctx, soapval, "EchoBinding");
	return hasValue;
}

bool CConfigureESDLBindingLogTransformRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(ctx, params, attachments, "EsdlBindingId", basepath);
	hasValue |= m_LogTransformName.unmarshall(ctx, params, attachments, "LogTransformName", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	hasValue |= m_Encoded.unmarshall(ctx, params, attachments, "Encoded", basepath);
	hasValue |= m_Config.unmarshall(ctx, params, attachments, "Config", basepath);
	hasValue |= m_EchoBinding.unmarshall(ctx, params, attachments, "EchoBinding", basepath);
	return hasValue;
}

const char * CConfigureESDLBindingLogTransformRequest::getEsdlBindingId() { return m_EsdlBindingId.query();}
const char * CConfigureESDLBindingLogTransformRequest::getLogTransformName() { return m_LogTransformName.query();}
bool CConfigureESDLBindingLogTransformRequest::getOverwrite_isNull(){return m_Overwrite.is_nil();}
bool CConfigureESDLBindingLogTransformRequest::getOverwrite() { return m_Overwrite;}
bool CConfigureESDLBindingLogTransformRequest::getEncoded_isNull(){return m_Encoded.is_nil();}
bool CConfigureESDLBindingLogTransformRequest::getEncoded() { return m_Encoded;}
const char * CConfigureESDLBindingLogTransformRequest::getConfig() { return m_Config.query();}
bool CConfigureESDLBindingLogTransformRequest::getEchoBinding_isNull(){return m_EchoBinding.is_nil();}
bool CConfigureESDLBindingLogTransformRequest::getEchoBinding() { return m_EchoBinding;}
void CConfigureESDLBindingLogTransformRequest::setEsdlBindingId(const char * val){ m_EsdlBindingId.set(val); }
void CConfigureESDLBindingLogTransformRequest::setLogTransformName(const char * val){ m_LogTransformName.set(val); }
void CConfigureESDLBindingLogTransformRequest::setOverwrite_null(){ m_Overwrite.Nil(); }void CConfigureESDLBindingLogTransformRequest::setOverwrite(bool val){ m_Overwrite=val; }
void CConfigureESDLBindingLogTransformRequest::setEncoded_null(){ m_Encoded.Nil(); }void CConfigureESDLBindingLogTransformRequest::setEncoded(bool val){ m_Encoded=val; }
void CConfigureESDLBindingLogTransformRequest::setConfig(const char * val){ m_Config.set(val); }
void CConfigureESDLBindingLogTransformRequest::setEchoBinding_null(){ m_EchoBinding.Nil(); }void CConfigureESDLBindingLogTransformRequest::setEchoBinding(bool val){ m_EchoBinding=val; }
extern "C"  IEspConfigureESDLBindingLogTransformRequest *createConfigureESDLBindingLogTransformRequest(const char *serv){return ((IEspConfigureESDLBindingLogTransformRequest *)new CConfigureESDLBindingLogTransformRequest(serv));}
extern "C"  IClientConfigureESDLBindingLogTransformRequest *createClientConfigureESDLBindingLogTransformRequest(const char *serv){return ((IClientConfigureESDLBindingLogTransformRequest *)new CConfigureESDLBindingLogTransformRequest(serv));}

//=======================================================
// class CConfigureESDLBindingLogTransformResponse Implementation
//=======================================================

CConfigureESDLBindingLogTransformResponse::CConfigureESDLBindingLogTransformResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CConfigureESDLBindingLogTransformResponse::CConfigureESDLBindingLogTransformResponse(const char *serviceName, const char *bc)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformResponse");
}

CConfigureESDLBindingLogTransformResponse::CConfigureESDLBindingLogTransformResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CConfigureESDLBindingLogTransformResponse::CConfigureESDLBindingLogTransformResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EspProcName(nilRemove),m_EspBindingName(nilRemove),m_EsdlDefinitionID(nilRemove),m_EsdlServiceName(nilRemove),m_status(serviceName, nilRemove),m_ESDLBinding(serviceName, nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ConfigureESDLBindingLogTransformResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CConfigureESDLBindingLogTransformResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspBindingName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlDefinitionID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlServiceName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"status\" type=\"tns:BaseESDLStatus\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLBinding\" type=\"tns:ESDLBindingContents\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CBaseESDLStatus::getXsdDefinition(context, request, schema, added);
		CESDLBindingContents::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CConfigureESDLBindingLogTransformResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CConfigureESDLBindingLogTransformResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("BaseESDLStatus"))
	{
		added.setValue("BaseESDLStatus",1);
		CBaseESDLStatus::getMapInfo(info,added);
	}
	if (!added.getValue("ESDLBindingContents"))
	{
		added.setValue("ESDLBindingContents",1);
		CESDLBindingContents::getMapInfo(info,added);
	}
}

StringBuffer &CConfigureESDLBindingLogTransformResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspProcName");
	form.appendf("  <tr><td><b>EspProcName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspBindingName");
	form.appendf("  <tr><td><b>EspBindingName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EsdlDefinitionID");
	form.appendf("  <tr><td><b>EsdlDefinitionID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EsdlServiceName");
	form.appendf("  <tr><td><b>EsdlServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("status");
	form.append("<tr>").append("<td><b>status: </b></td><td><hr/>");
	CBaseESDLStatus::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ESDLBinding");
	form.append("<tr>").append("<td><b>ESDLBinding: </b></td><td><hr/>");
	CESDLBindingContents::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CConfigureESDLBindingLogTransformResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CConfigureESDLBindingLogTransformResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_EspProcName.marshall(rpc_resp, "EspProcName", "", "", "");
		m_EspBindingName.marshall(rpc_resp, "EspBindingName", "", "", "");
		m_EsdlDefinitionID.marshall(rpc_resp, "EsdlDefinitionID", "", "", "");
		m_EsdlServiceName.marshall(rpc_resp, "EsdlServiceName", "", "", "");
		m_status.marshall(rpc_resp, "status", "", "", "");
		m_ESDLBinding.marshall(rpc_resp, "ESDLBinding", "", "", "");
	}
}


void CConfigureESDLBindingLogTransformResponse::copy(CConfigureESDLBindingLogTransformResponse &from)
{
	m_EspProcName.copy(from.m_EspProcName);
	m_EspBindingName.copy(from.m_EspBindingName);
	m_EsdlDefinitionID.copy(from.m_EsdlDefinitionID);
	m_EsdlServiceName.copy(from.m_EsdlServiceName);
	m_status.copy(from.m_status);
	m_ESDLBinding.copy(from.m_ESDLBinding);
}


void CConfigureESDLBindingLogTransformResponse::copy(IConstConfigureESDLBindingLogTransformResponse &ifrom)
{
	setEspProcName(ifrom.getEspProcName());
	setEspBindingName(ifrom.getEspBindingName());
	setEsdlDefinitionID(ifrom.getEsdlDefinitionID());
	setEsdlServiceName(ifrom.getEsdlServiceName());
	setStatus(ifrom.getStatus());
	setESDLBinding(ifrom.getESDLBinding());
}


void CConfigureESDLBindingLogTransformResponse::getAttributes(IProperties &attributes)
{
}


void CConfigureESDLBindingLogTransformResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_EspProcName.toStr(ctx, buffer, "EspProcName", "", true, "", "");
		m_EspBindingName.toStr(ctx, buffer, "EspBindingName", "", true, "", "");
		m_EsdlDefinitionID.toStr(ctx, buffer, "EsdlDefinitionID", "", true, "", "");
		m_EsdlServiceName.toStr(ctx, buffer, "EsdlServiceName", "", true, "", "");
		m_status.toStr(ctx, buffer, "status", "", false, "", "");
		m_ESDLBinding.toStr(ctx, buffer, "ESDLBinding", "", false, "", "");
	}
}


void CConfigureESDLBindingLogTransformResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CConfigureESDLBindingLogTransformResponse::serializer(IEspContext* ctx, IConstConfigureESDLBindingLogTransformResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ConfigureESDLBindingLogTransformResponse>");
	// field EspProcName
	{
		const char* s = src.getEspProcName();
		if (s && *s)
		{
			buffer.append("<EspProcName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcName>");
		}
	}
	// field EspBindingName
	{
		const char* s = src.getEspBindingName();
		if (s && *s)
		{
			buffer.append("<EspBindingName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspBindingName>");
		}
	}
	// field EsdlDefinitionID
	{
		const char* s = src.getEsdlDefinitionID();
		if (s && *s)
		{
			buffer.append("<EsdlDefinitionID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlDefinitionID>");
		}
	}
	// field EsdlServiceName
	{
		const char* s = src.getEsdlServiceName();
		if (s && *s)
		{
			buffer.append("<EsdlServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlServiceName>");
		}
	}
	// field status
	{
		StringBuffer tmp;
		CBaseESDLStatus::serializer(ctx,src.getStatus(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<status>%s</status>",tmp.str());
	}
	// field ESDLBinding
	{
		StringBuffer tmp;
		CESDLBindingContents::serializer(ctx,src.getESDLBinding(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ESDLBinding>%s</ESDLBinding>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</ConfigureESDLBindingLogTransformResponse>");
}

bool CConfigureESDLBindingLogTransformResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_EspProcName.unmarshall(rpc_request, "EspProcName", basepath);
		hasValue |= m_EspBindingName.unmarshall(rpc_request, "EspBindingName", basepath);
		hasValue |= m_EsdlDefinitionID.unmarshall(rpc_request, "EsdlDefinitionID", basepath);
		hasValue |= m_EsdlServiceName.unmarshall(rpc_request, "EsdlServiceName", basepath);
		hasValue |= m_status.unmarshall(rpc_request, "status", basepath);
		hasValue |= m_ESDLBinding.unmarshall(rpc_request, "ESDLBinding", basepath);
	}
	return hasValue;
}

bool CConfigureESDLBindingLogTransformResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EspProcName.unmarshall(ctx, soapval, "EspProcName");
	hasValue |= m_EspBindingName.unmarshall(ctx, soapval, "EspBindingName");
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, soapval, "EsdlDefinitionID");
	hasValue |= m_EsdlServiceName.unmarshall(ctx, soapval, "EsdlServiceName");
	hasValue |= m_status.unmarshall(ctx, soapval, "status");
	hasValue |= m_ESDLBinding.unmarshall(ctx, soapval, "ESDLBinding");
	return hasValue;
}

bool CConfigureESDLBindingLogTransformResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EspProcName.unmarshall(ctx, params, attachments, "EspProcName", basepath);
	hasValue |= m_EspBindingName.unmarshall(ctx, params, attachments, "EspBindingName", basepath);
	hasValue |= m_EsdlDefinitionID.unmarshall(ctx, params, attachments, "EsdlDefinitionID", basepath);
	hasValue |= m_EsdlServiceName.unmarshall(ctx, params, attachments, "EsdlServiceName", basepath);
	hasValue |= m_status.unmarshall(ctx, params, attachments, "status", basepath);
	hasValue |= m_ESDLBinding.unmarshall(ctx, params, attachments, "ESDLBinding", basepath);
	return hasValue;
}

const char * CConfigureESDLBindingLogTransformResponse::getEspProcName() { return m_EspProcName.query();}
const char * CConfigureESDLBindingLogTransformResponse::getEspBindingName() { return m_EspBindingName.query();}
const char * CConfigureESDLBindingLogTransformResponse::getEsdlDefinitionID() { return m_EsdlDefinitionID.query();}
const char * CConfigureESDLBindingLogTransformResponse::getEsdlServiceName() { return m_EsdlServiceName.query();}
IConstBaseESDLStatus & CConfigureESDLBindingLogTransformResponse::getStatus() { return (IConstBaseESDLStatus &) m_status.getValue();}
IConstESDLBindingContents & CConfigureESDLBindingLogTransformResponse::getESDLBinding() { return (IConstESDLBindingContents &) m_ESDLBinding.getValue();}
void CConfigureESDLBindingLogTransformResponse::setEspProcName(const char * val){ m_EspProcName.set(val); }
void CConfigureESDLBindingLogTransformResponse::setEspBindingName(const char * val){ m_EspBindingName.set(val); }
void CConfigureESDLBindingLogTransformResponse::setEsdlDefinitionID(const char * val){ m_EsdlDefinitionID.set(val); }
void CConfigureESDLBindingLogTransformResponse::setEsdlServiceName(const char * val){ m_EsdlServiceName.set(val); }
IEspBaseESDLStatus & CConfigureESDLBindingLogTransformResponse::updateStatus(){ return (IEspBaseESDLStatus &) m_status.getValue(); }
void CConfigureESDLBindingLogTransformResponse::setStatus(IConstBaseESDLStatus &ifrom){ m_status.copy(ifrom); }
IEspESDLBindingContents & CConfigureESDLBindingLogTransformResponse::updateESDLBinding(){ return (IEspESDLBindingContents &) m_ESDLBinding.getValue(); }
void CConfigureESDLBindingLogTransformResponse::setESDLBinding(IConstESDLBindingContents &ifrom){ m_ESDLBinding.copy(ifrom); }
extern "C"  IEspConfigureESDLBindingLogTransformResponse *createConfigureESDLBindingLogTransformResponse(const char *serv){return ((IEspConfigureESDLBindingLogTransformResponse *)new CConfigureESDLBindingLogTransformResponse(serv));}
extern "C"  IClientConfigureESDLBindingLogTransformResponse *createClientConfigureESDLBindingLogTransformResponse(const char *serv){return ((IClientConfigureESDLBindingLogTransformResponse *)new CConfigureESDLBindingLogTransformResponse(serv));}

//=======================================================
// class CGetESDLBindingRequest Implementation
//=======================================================

CGetESDLBindingRequest::CGetESDLBindingRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_EsdlBindingId(nilIgnore),m_EspProcName(nilIgnore),m_EspBindingName(nilIgnore),m_EspPort(nilIgnore),m_IncludeInterfaceDefinition(nilIgnore),m_ReportMethodsAvailable(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CGetESDLBindingRequest::CGetESDLBindingRequest(const char *serviceName, const char *bc)
	: m_EsdlBindingId(nilIgnore),m_EspProcName(nilIgnore),m_EspBindingName(nilIgnore),m_EspPort(nilIgnore),m_IncludeInterfaceDefinition(nilIgnore),m_ReportMethodsAvailable(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingRequest");
}

CGetESDLBindingRequest::CGetESDLBindingRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EsdlBindingId(nilIgnore),m_EspProcName(nilIgnore),m_EspBindingName(nilIgnore),m_EspPort(nilIgnore),m_IncludeInterfaceDefinition(nilIgnore),m_ReportMethodsAvailable(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CGetESDLBindingRequest::CGetESDLBindingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EsdlBindingId(nilIgnore),m_EspProcName(nilIgnore),m_EspBindingName(nilIgnore),m_EspPort(nilIgnore),m_IncludeInterfaceDefinition(nilIgnore),m_ReportMethodsAvailable(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CGetESDLBindingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EsdlBindingId\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("GetESDLBindingRequest","EspProcName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("GetESDLBindingRequest","EspBindingName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspBindingName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("GetESDLBindingRequest","EspPort")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspPort\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("GetESDLBindingRequest","IncludeInterfaceDefinition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IncludeInterfaceDefinition\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("GetESDLBindingRequest","ReportMethodsAvailable")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ReportMethodsAvailable\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CGetESDLBindingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CGetESDLBindingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMaxVersion("GetESDLBindingRequest","EspProcName",1.3);
	info.addMaxVersion("GetESDLBindingRequest","EspBindingName",1.3);
	info.addMaxVersion("GetESDLBindingRequest","EspPort",1.3);
	info.addMinVersion("GetESDLBindingRequest","IncludeInterfaceDefinition",1.1);
	info.addMinVersion("GetESDLBindingRequest","ReportMethodsAvailable",1.2);
}

StringBuffer &CGetESDLBindingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EsdlBindingId");
	form.appendf("  <tr><td><b>EsdlBindingId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("GetESDLBindingRequest","EspProcName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspProcName");
		form.appendf("  <tr><td><b>EspProcName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("GetESDLBindingRequest","EspBindingName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspBindingName");
		form.appendf("  <tr><td><b>EspBindingName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("GetESDLBindingRequest","EspPort")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspPort");
		form.appendf("  <tr><td><b>EspPort: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("GetESDLBindingRequest","IncludeInterfaceDefinition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeInterfaceDefinition");
		
	form.appendf("  <tr><td><b>IncludeInterfaceDefinition? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("GetESDLBindingRequest","ReportMethodsAvailable")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ReportMethodsAvailable");
		
	form.appendf("  <tr><td><b>ReportMethodsAvailable? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CGetESDLBindingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CGetESDLBindingRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_EsdlBindingId.marshall(rpc_resp, "EsdlBindingId", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspProcName.marshall(rpc_resp, "EspProcName", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspBindingName.marshall(rpc_resp, "EspBindingName", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspPort.marshall(rpc_resp, "EspPort", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_IncludeInterfaceDefinition.marshall(rpc_resp, "IncludeInterfaceDefinition", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_ReportMethodsAvailable.marshall(rpc_resp, "ReportMethodsAvailable", "", "", "");
}


void CGetESDLBindingRequest::copy(CGetESDLBindingRequest &from)
{
	m_EsdlBindingId.copy(from.m_EsdlBindingId);
	m_EspProcName.copy(from.m_EspProcName);
	m_EspBindingName.copy(from.m_EspBindingName);
	m_EspPort.copy(from.m_EspPort);
	m_IncludeInterfaceDefinition.copy(from.m_IncludeInterfaceDefinition);
	m_ReportMethodsAvailable.copy(from.m_ReportMethodsAvailable);
}


void CGetESDLBindingRequest::copy(IConstGetESDLBindingRequest &ifrom)
{
	setEsdlBindingId(ifrom.getEsdlBindingId());
	setEspProcName(ifrom.getEspProcName());
	setEspBindingName(ifrom.getEspBindingName());
	setEspPort(ifrom.getEspPort());
	setIncludeInterfaceDefinition(ifrom.getIncludeInterfaceDefinition());
	setReportMethodsAvailable(ifrom.getReportMethodsAvailable());
}


void CGetESDLBindingRequest::getAttributes(IProperties &attributes)
{
}


void CGetESDLBindingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_EsdlBindingId.toStr(ctx, buffer, "EsdlBindingId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspProcName.toStr(ctx, buffer, "EspProcName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspBindingName.toStr(ctx, buffer, "EspBindingName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_EspPort.toStr(ctx, buffer, "EspPort", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_IncludeInterfaceDefinition.toStr(ctx, buffer, "IncludeInterfaceDefinition", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_ReportMethodsAvailable.toStr(ctx, buffer, "ReportMethodsAvailable", "", true, "", "");
}


void CGetESDLBindingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CGetESDLBindingRequest::serializer(IEspContext* ctx, IConstGetESDLBindingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<GetESDLBindingRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field EsdlBindingId
	{
		const char* s = src.getEsdlBindingId();
		if (s && *s)
		{
			buffer.append("<EsdlBindingId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EsdlBindingId>");
		}
	}
	// field EspProcName
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspProcName();
		if (s && *s)
		{
			buffer.append("<EspProcName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcName>");
		}
	}
	// field EspBindingName
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspBindingName();
		if (s && *s)
		{
			buffer.append("<EspBindingName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspBindingName>");
		}
	}
	// field EspPort
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		const char* s = src.getEspPort();
		if (s && *s)
		{
			buffer.append("<EspPort>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspPort>");
		}
	}
	// field IncludeInterfaceDefinition
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		bool b = src.getIncludeInterfaceDefinition();
		if (b)
			buffer.appendf("<IncludeInterfaceDefinition>1</IncludeInterfaceDefinition>");
	}
	// field ReportMethodsAvailable
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		bool b = src.getReportMethodsAvailable();
		if (b)
			buffer.appendf("<ReportMethodsAvailable>1</ReportMethodsAvailable>");
	}
	if (keepRootTag)
		buffer.append("</GetESDLBindingRequest>");
}

bool CGetESDLBindingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(rpc_request, "EsdlBindingId", basepath);
	hasValue |= m_EspProcName.unmarshall(rpc_request, "EspProcName", basepath);
	hasValue |= m_EspBindingName.unmarshall(rpc_request, "EspBindingName", basepath);
	hasValue |= m_EspPort.unmarshall(rpc_request, "EspPort", basepath);
	hasValue |= m_IncludeInterfaceDefinition.unmarshall(rpc_request, "IncludeInterfaceDefinition", basepath);
	hasValue |= m_ReportMethodsAvailable.unmarshall(rpc_request, "ReportMethodsAvailable", basepath);
	return hasValue;
}

bool CGetESDLBindingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(ctx, soapval, "EsdlBindingId");
	hasValue |= m_EspProcName.unmarshall(ctx, soapval, "EspProcName");
	hasValue |= m_EspBindingName.unmarshall(ctx, soapval, "EspBindingName");
	hasValue |= m_EspPort.unmarshall(ctx, soapval, "EspPort");
	hasValue |= m_IncludeInterfaceDefinition.unmarshall(ctx, soapval, "IncludeInterfaceDefinition");
	hasValue |= m_ReportMethodsAvailable.unmarshall(ctx, soapval, "ReportMethodsAvailable");
	return hasValue;
}

bool CGetESDLBindingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EsdlBindingId.unmarshall(ctx, params, attachments, "EsdlBindingId", basepath);
	hasValue |= m_EspProcName.unmarshall(ctx, params, attachments, "EspProcName", basepath);
	hasValue |= m_EspBindingName.unmarshall(ctx, params, attachments, "EspBindingName", basepath);
	hasValue |= m_EspPort.unmarshall(ctx, params, attachments, "EspPort", basepath);
	hasValue |= m_IncludeInterfaceDefinition.unmarshall(ctx, params, attachments, "IncludeInterfaceDefinition", basepath);
	hasValue |= m_ReportMethodsAvailable.unmarshall(ctx, params, attachments, "ReportMethodsAvailable", basepath);
	return hasValue;
}

const char * CGetESDLBindingRequest::getEsdlBindingId() { return m_EsdlBindingId.query();}
const char * CGetESDLBindingRequest::getEspProcName() { return m_EspProcName.query();}
const char * CGetESDLBindingRequest::getEspBindingName() { return m_EspBindingName.query();}
const char * CGetESDLBindingRequest::getEspPort() { return m_EspPort.query();}
bool CGetESDLBindingRequest::getIncludeInterfaceDefinition() { return m_IncludeInterfaceDefinition;}
bool CGetESDLBindingRequest::getReportMethodsAvailable() { return m_ReportMethodsAvailable;}
void CGetESDLBindingRequest::setEsdlBindingId(const char * val){ m_EsdlBindingId.set(val); }
void CGetESDLBindingRequest::setEspProcName(const char * val){ m_EspProcName.set(val); }
void CGetESDLBindingRequest::setEspBindingName(const char * val){ m_EspBindingName.set(val); }
void CGetESDLBindingRequest::setEspPort(const char * val){ m_EspPort.set(val); }
void CGetESDLBindingRequest::setIncludeInterfaceDefinition(bool val){ m_IncludeInterfaceDefinition=val; }
void CGetESDLBindingRequest::setReportMethodsAvailable(bool val){ m_ReportMethodsAvailable=val; }
extern "C"  IEspGetESDLBindingRequest *createGetESDLBindingRequest(const char *serv){return ((IEspGetESDLBindingRequest *)new CGetESDLBindingRequest(serv));}
extern "C"  IClientGetESDLBindingRequest *createClientGetESDLBindingRequest(const char *serv){return ((IClientGetESDLBindingRequest *)new CGetESDLBindingRequest(serv));}

//=======================================================
// class CGetESDLBindingResponse Implementation
//=======================================================

CGetESDLBindingResponse::CGetESDLBindingResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ServiceName(nilIgnore),m_EspProcName(nilIgnore),m_BindingName(nilIgnore),m_EspPort(nilIgnore),m_ConfigXML(nilIgnore),m_ESDLBinding(serviceName, nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CGetESDLBindingResponse::CGetESDLBindingResponse(const char *serviceName, const char *bc)
	: m_ServiceName(nilIgnore),m_EspProcName(nilIgnore),m_BindingName(nilIgnore),m_EspPort(nilIgnore),m_ConfigXML(nilIgnore),m_ESDLBinding(serviceName, nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingResponse");
}

CGetESDLBindingResponse::CGetESDLBindingResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ServiceName(nilIgnore),m_EspProcName(nilIgnore),m_BindingName(nilIgnore),m_EspPort(nilIgnore),m_ConfigXML(nilIgnore),m_ESDLBinding(serviceName, nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CGetESDLBindingResponse::CGetESDLBindingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ServiceName(nilIgnore),m_EspProcName(nilIgnore),m_BindingName(nilIgnore),m_EspPort(nilIgnore),m_ConfigXML(nilIgnore),m_ESDLBinding(serviceName, nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GetESDLBindingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CGetESDLBindingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ServiceName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BindingName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspPort\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ConfigXML\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("GetESDLBindingResponse","ESDLBinding")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ESDLBinding\" type=\"tns:ESDLBindingContents\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"status\" type=\"tns:BaseESDLStatus\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("GetESDLBindingResponse","ESDLBinding"))
			CESDLBindingContents::getXsdDefinition(context, request, schema, added);
		CBaseESDLStatus::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CGetESDLBindingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CGetESDLBindingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("GetESDLBindingResponse","ESDLBinding",1.1);
	if (!added.getValue("BaseESDLStatus"))
	{
		added.setValue("BaseESDLStatus",1);
		CBaseESDLStatus::getMapInfo(info,added);
	}
	if (!added.getValue("ESDLBindingContents"))
	{
		added.setValue("ESDLBindingContents",1);
		CESDLBindingContents::getMapInfo(info,added);
	}
}

StringBuffer &CGetESDLBindingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ServiceName");
	form.appendf("  <tr><td><b>ServiceName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspProcName");
	form.appendf("  <tr><td><b>EspProcName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BindingName");
	form.appendf("  <tr><td><b>BindingName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspPort");
	form.appendf("  <tr><td><b>EspPort: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ConfigXML");
	form.appendf("  <tr><td><b>ConfigXML: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("GetESDLBindingResponse","ESDLBinding")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ESDLBinding");
		form.append("<tr>").append("<td><b>ESDLBinding: </b></td><td><hr/>");
		CESDLBindingContents::getHtmlForm(context, request, serv, method, form, false, extfix.str());
		form.append("<hr/></td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("status");
	form.append("<tr>").append("<td><b>status: </b></td><td><hr/>");
	CBaseESDLStatus::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CGetESDLBindingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CGetESDLBindingResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ServiceName.marshall(rpc_resp, "ServiceName", "", "", "");
		m_EspProcName.marshall(rpc_resp, "EspProcName", "", "", "");
		m_BindingName.marshall(rpc_resp, "BindingName", "", "", "");
		m_EspPort.marshall(rpc_resp, "EspPort", "", "", "");
		m_ConfigXML.marshall(rpc_resp, "ConfigXML", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.1))
			m_ESDLBinding.marshall(rpc_resp, "ESDLBinding", "", "", "");
		m_status.marshall(rpc_resp, "status", "", "", "");
	}
}


void CGetESDLBindingResponse::copy(CGetESDLBindingResponse &from)
{
	m_ServiceName.copy(from.m_ServiceName);
	m_EspProcName.copy(from.m_EspProcName);
	m_BindingName.copy(from.m_BindingName);
	m_EspPort.copy(from.m_EspPort);
	m_ConfigXML.copy(from.m_ConfigXML);
	m_ESDLBinding.copy(from.m_ESDLBinding);
	m_status.copy(from.m_status);
}


void CGetESDLBindingResponse::copy(IConstGetESDLBindingResponse &ifrom)
{
	setServiceName(ifrom.getServiceName());
	setEspProcName(ifrom.getEspProcName());
	setBindingName(ifrom.getBindingName());
	setEspPort(ifrom.getEspPort());
	setConfigXML(ifrom.getConfigXML());
	setESDLBinding(ifrom.getESDLBinding());
	setStatus(ifrom.getStatus());
}


void CGetESDLBindingResponse::getAttributes(IProperties &attributes)
{
}


void CGetESDLBindingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_ServiceName.toStr(ctx, buffer, "ServiceName", "", true, "", "");
		m_EspProcName.toStr(ctx, buffer, "EspProcName", "", true, "", "");
		m_BindingName.toStr(ctx, buffer, "BindingName", "", true, "", "");
		m_EspPort.toStr(ctx, buffer, "EspPort", "", true, "", "");
		m_ConfigXML.toStr(ctx, buffer, "ConfigXML", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.1))
			m_ESDLBinding.toStr(ctx, buffer, "ESDLBinding", "", false, "", "");
		m_status.toStr(ctx, buffer, "status", "", false, "", "");
	}
}


void CGetESDLBindingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CGetESDLBindingResponse::serializer(IEspContext* ctx, IConstGetESDLBindingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<GetESDLBindingResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field ServiceName
	{
		const char* s = src.getServiceName();
		if (s && *s)
		{
			buffer.append("<ServiceName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ServiceName>");
		}
	}
	// field EspProcName
	{
		const char* s = src.getEspProcName();
		if (s && *s)
		{
			buffer.append("<EspProcName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcName>");
		}
	}
	// field BindingName
	{
		const char* s = src.getBindingName();
		if (s && *s)
		{
			buffer.append("<BindingName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BindingName>");
		}
	}
	// field EspPort
	{
		const char* s = src.getEspPort();
		if (s && *s)
		{
			buffer.append("<EspPort>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspPort>");
		}
	}
	// field ConfigXML
	{
		const char* s = src.getConfigXML();
		if (s && *s)
		{
			buffer.append("<ConfigXML>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ConfigXML>");
		}
	}
	// field ESDLBinding
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		StringBuffer tmp;
		CESDLBindingContents::serializer(ctx,src.getESDLBinding(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ESDLBinding>%s</ESDLBinding>",tmp.str());
	}
	// field status
	{
		StringBuffer tmp;
		CBaseESDLStatus::serializer(ctx,src.getStatus(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<status>%s</status>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</GetESDLBindingResponse>");
}

bool CGetESDLBindingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ServiceName.unmarshall(rpc_request, "ServiceName", basepath);
		hasValue |= m_EspProcName.unmarshall(rpc_request, "EspProcName", basepath);
		hasValue |= m_BindingName.unmarshall(rpc_request, "BindingName", basepath);
		hasValue |= m_EspPort.unmarshall(rpc_request, "EspPort", basepath);
		hasValue |= m_ConfigXML.unmarshall(rpc_request, "ConfigXML", basepath);
		hasValue |= m_ESDLBinding.unmarshall(rpc_request, "ESDLBinding", basepath);
		hasValue |= m_status.unmarshall(rpc_request, "status", basepath);
	}
	return hasValue;
}

bool CGetESDLBindingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ServiceName.unmarshall(ctx, soapval, "ServiceName");
	hasValue |= m_EspProcName.unmarshall(ctx, soapval, "EspProcName");
	hasValue |= m_BindingName.unmarshall(ctx, soapval, "BindingName");
	hasValue |= m_EspPort.unmarshall(ctx, soapval, "EspPort");
	hasValue |= m_ConfigXML.unmarshall(ctx, soapval, "ConfigXML");
	hasValue |= m_ESDLBinding.unmarshall(ctx, soapval, "ESDLBinding");
	hasValue |= m_status.unmarshall(ctx, soapval, "status");
	return hasValue;
}

bool CGetESDLBindingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ServiceName.unmarshall(ctx, params, attachments, "ServiceName", basepath);
	hasValue |= m_EspProcName.unmarshall(ctx, params, attachments, "EspProcName", basepath);
	hasValue |= m_BindingName.unmarshall(ctx, params, attachments, "BindingName", basepath);
	hasValue |= m_EspPort.unmarshall(ctx, params, attachments, "EspPort", basepath);
	hasValue |= m_ConfigXML.unmarshall(ctx, params, attachments, "ConfigXML", basepath);
	hasValue |= m_ESDLBinding.unmarshall(ctx, params, attachments, "ESDLBinding", basepath);
	hasValue |= m_status.unmarshall(ctx, params, attachments, "status", basepath);
	return hasValue;
}

const char * CGetESDLBindingResponse::getServiceName() { return m_ServiceName.query();}
const char * CGetESDLBindingResponse::getEspProcName() { return m_EspProcName.query();}
const char * CGetESDLBindingResponse::getBindingName() { return m_BindingName.query();}
const char * CGetESDLBindingResponse::getEspPort() { return m_EspPort.query();}
const char * CGetESDLBindingResponse::getConfigXML() { return m_ConfigXML.query();}
IConstESDLBindingContents & CGetESDLBindingResponse::getESDLBinding() { return (IConstESDLBindingContents &) m_ESDLBinding.getValue();}
IConstBaseESDLStatus & CGetESDLBindingResponse::getStatus() { return (IConstBaseESDLStatus &) m_status.getValue();}
void CGetESDLBindingResponse::setServiceName(const char * val){ m_ServiceName.set(val); }
void CGetESDLBindingResponse::setEspProcName(const char * val){ m_EspProcName.set(val); }
void CGetESDLBindingResponse::setBindingName(const char * val){ m_BindingName.set(val); }
void CGetESDLBindingResponse::setEspPort(const char * val){ m_EspPort.set(val); }
void CGetESDLBindingResponse::setConfigXML(const char * val){ m_ConfigXML.set(val); }
IEspESDLBindingContents & CGetESDLBindingResponse::updateESDLBinding(){ return (IEspESDLBindingContents &) m_ESDLBinding.getValue(); }
void CGetESDLBindingResponse::setESDLBinding(IConstESDLBindingContents &ifrom){ m_ESDLBinding.copy(ifrom); }
IEspBaseESDLStatus & CGetESDLBindingResponse::updateStatus(){ return (IEspBaseESDLStatus &) m_status.getValue(); }
void CGetESDLBindingResponse::setStatus(IConstBaseESDLStatus &ifrom){ m_status.copy(ifrom); }
extern "C"  IEspGetESDLBindingResponse *createGetESDLBindingResponse(const char *serv){return ((IEspGetESDLBindingResponse *)new CGetESDLBindingResponse(serv));}
extern "C"  IClientGetESDLBindingResponse *createClientGetESDLBindingResponse(const char *serv){return ((IClientGetESDLBindingResponse *)new CGetESDLBindingResponse(serv));}

//=======================================================
// class CDeleteESDLDefinitionRequest Implementation
//=======================================================

CDeleteESDLDefinitionRequest::CDeleteESDLDefinitionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilIgnore),m_Name(nilIgnore),m_Version(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLDefinitionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDeleteESDLDefinitionRequest::CDeleteESDLDefinitionRequest(const char *serviceName, const char *bc)
	: m_Id(nilIgnore),m_Name(nilIgnore),m_Version(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLDefinitionRequest");
}

CDeleteESDLDefinitionRequest::CDeleteESDLDefinitionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Id(nilIgnore),m_Name(nilIgnore),m_Version(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLDefinitionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDeleteESDLDefinitionRequest::CDeleteESDLDefinitionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Id(nilIgnore),m_Name(nilIgnore),m_Version(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLDefinitionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDeleteESDLDefinitionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Version\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDeleteESDLDefinitionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDeleteESDLDefinitionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDeleteESDLDefinitionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Version");
	form.appendf("  <tr><td><b>Version: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDeleteESDLDefinitionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDeleteESDLDefinitionRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Version.marshall(rpc_resp, "Version", "", "", "");
}


void CDeleteESDLDefinitionRequest::copy(CDeleteESDLDefinitionRequest &from)
{
	m_Id.copy(from.m_Id);
	m_Name.copy(from.m_Name);
	m_Version.copy(from.m_Version);
}


void CDeleteESDLDefinitionRequest::copy(IConstDeleteESDLDefinitionRequest &ifrom)
{
	setId(ifrom.getId());
	setName(ifrom.getName());
	setVersion(ifrom.getVersion());
}


void CDeleteESDLDefinitionRequest::getAttributes(IProperties &attributes)
{
}


void CDeleteESDLDefinitionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Version.toStr(ctx, buffer, "Version", "", true, "", "");
}


void CDeleteESDLDefinitionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDeleteESDLDefinitionRequest::serializer(IEspContext* ctx, IConstDeleteESDLDefinitionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DeleteESDLDefinitionRequest>");
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Version
	{
		const char* s = src.getVersion();
		if (s && *s)
		{
			buffer.append("<Version>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Version>");
		}
	}
	if (keepRootTag)
		buffer.append("</DeleteESDLDefinitionRequest>");
}

bool CDeleteESDLDefinitionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Version.unmarshall(rpc_request, "Version", basepath);
	return hasValue;
}

bool CDeleteESDLDefinitionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Version.unmarshall(ctx, soapval, "Version");
	return hasValue;
}

bool CDeleteESDLDefinitionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Version.unmarshall(ctx, params, attachments, "Version", basepath);
	return hasValue;
}

const char * CDeleteESDLDefinitionRequest::getId() { return m_Id.query();}
const char * CDeleteESDLDefinitionRequest::getName() { return m_Name.query();}
const char * CDeleteESDLDefinitionRequest::getVersion() { return m_Version.query();}
void CDeleteESDLDefinitionRequest::setId(const char * val){ m_Id.set(val); }
void CDeleteESDLDefinitionRequest::setName(const char * val){ m_Name.set(val); }
void CDeleteESDLDefinitionRequest::setVersion(const char * val){ m_Version.set(val); }
extern "C"  IEspDeleteESDLDefinitionRequest *createDeleteESDLDefinitionRequest(const char *serv){return ((IEspDeleteESDLDefinitionRequest *)new CDeleteESDLDefinitionRequest(serv));}
extern "C"  IClientDeleteESDLDefinitionRequest *createClientDeleteESDLDefinitionRequest(const char *serv){return ((IClientDeleteESDLDefinitionRequest *)new CDeleteESDLDefinitionRequest(serv));}

//=======================================================
// class CDeleteESDLBindingRequest Implementation
//=======================================================

CDeleteESDLBindingRequest::CDeleteESDLBindingRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilIgnore),m_EspProcess(nilIgnore),m_EspBinding(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLBindingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDeleteESDLBindingRequest::CDeleteESDLBindingRequest(const char *serviceName, const char *bc)
	: m_Id(nilIgnore),m_EspProcess(nilIgnore),m_EspBinding(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLBindingRequest");
}

CDeleteESDLBindingRequest::CDeleteESDLBindingRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Id(nilIgnore),m_EspProcess(nilIgnore),m_EspBinding(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLBindingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CDeleteESDLBindingRequest::CDeleteESDLBindingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Id(nilIgnore),m_EspProcess(nilIgnore),m_EspBinding(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLBindingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDeleteESDLBindingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcess\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EspBinding\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CDeleteESDLBindingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDeleteESDLBindingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDeleteESDLBindingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspProcess");
	form.appendf("  <tr><td><b>EspProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EspBinding");
	form.appendf("  <tr><td><b>EspBinding: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDeleteESDLBindingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDeleteESDLBindingRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_EspProcess.marshall(rpc_resp, "EspProcess", "", "", "");
	m_EspBinding.marshall(rpc_resp, "EspBinding", "", "", "");
}


void CDeleteESDLBindingRequest::copy(CDeleteESDLBindingRequest &from)
{
	m_Id.copy(from.m_Id);
	m_EspProcess.copy(from.m_EspProcess);
	m_EspBinding.copy(from.m_EspBinding);
}


void CDeleteESDLBindingRequest::copy(IConstDeleteESDLBindingRequest &ifrom)
{
	setId(ifrom.getId());
	setEspProcess(ifrom.getEspProcess());
	setEspBinding(ifrom.getEspBinding());
}


void CDeleteESDLBindingRequest::getAttributes(IProperties &attributes)
{
}


void CDeleteESDLBindingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_EspProcess.toStr(ctx, buffer, "EspProcess", "", true, "", "");
	m_EspBinding.toStr(ctx, buffer, "EspBinding", "", true, "", "");
}


void CDeleteESDLBindingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDeleteESDLBindingRequest::serializer(IEspContext* ctx, IConstDeleteESDLBindingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DeleteESDLBindingRequest>");
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field EspProcess
	{
		const char* s = src.getEspProcess();
		if (s && *s)
		{
			buffer.append("<EspProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspProcess>");
		}
	}
	// field EspBinding
	{
		const char* s = src.getEspBinding();
		if (s && *s)
		{
			buffer.append("<EspBinding>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EspBinding>");
		}
	}
	if (keepRootTag)
		buffer.append("</DeleteESDLBindingRequest>");
}

bool CDeleteESDLBindingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_EspProcess.unmarshall(rpc_request, "EspProcess", basepath);
	hasValue |= m_EspBinding.unmarshall(rpc_request, "EspBinding", basepath);
	return hasValue;
}

bool CDeleteESDLBindingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_EspProcess.unmarshall(ctx, soapval, "EspProcess");
	hasValue |= m_EspBinding.unmarshall(ctx, soapval, "EspBinding");
	return hasValue;
}

bool CDeleteESDLBindingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_EspProcess.unmarshall(ctx, params, attachments, "EspProcess", basepath);
	hasValue |= m_EspBinding.unmarshall(ctx, params, attachments, "EspBinding", basepath);
	return hasValue;
}

const char * CDeleteESDLBindingRequest::getId() { return m_Id.query();}
const char * CDeleteESDLBindingRequest::getEspProcess() { return m_EspProcess.query();}
const char * CDeleteESDLBindingRequest::getEspBinding() { return m_EspBinding.query();}
void CDeleteESDLBindingRequest::setId(const char * val){ m_Id.set(val); }
void CDeleteESDLBindingRequest::setEspProcess(const char * val){ m_EspProcess.set(val); }
void CDeleteESDLBindingRequest::setEspBinding(const char * val){ m_EspBinding.set(val); }
extern "C"  IEspDeleteESDLBindingRequest *createDeleteESDLBindingRequest(const char *serv){return ((IEspDeleteESDLBindingRequest *)new CDeleteESDLBindingRequest(serv));}
extern "C"  IClientDeleteESDLBindingRequest *createClientDeleteESDLBindingRequest(const char *serv){return ((IClientDeleteESDLBindingRequest *)new CDeleteESDLBindingRequest(serv));}

//=======================================================
// class CDeleteESDLRegistryEntryResponse Implementation
//=======================================================

CDeleteESDLRegistryEntryResponse::CDeleteESDLRegistryEntryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DeletedTree(nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLRegistryEntryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDeleteESDLRegistryEntryResponse::CDeleteESDLRegistryEntryResponse(const char *serviceName, const char *bc)
	: m_DeletedTree(nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLRegistryEntryResponse");
}

CDeleteESDLRegistryEntryResponse::CDeleteESDLRegistryEntryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DeletedTree(nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLRegistryEntryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CDeleteESDLRegistryEntryResponse::CDeleteESDLRegistryEntryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DeletedTree(nilIgnore),m_status(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeleteESDLRegistryEntryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CDeleteESDLRegistryEntryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DeletedTree\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"status\" type=\"tns:BaseESDLStatus\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CBaseESDLStatus::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CDeleteESDLRegistryEntryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDeleteESDLRegistryEntryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("BaseESDLStatus"))
	{
		added.setValue("BaseESDLStatus",1);
		CBaseESDLStatus::getMapInfo(info,added);
	}
}

StringBuffer &CDeleteESDLRegistryEntryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DeletedTree");
	form.appendf("  <tr><td><b>DeletedTree: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("status");
	form.append("<tr>").append("<td><b>status: </b></td><td><hr/>");
	CBaseESDLStatus::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDeleteESDLRegistryEntryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDeleteESDLRegistryEntryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DeletedTree.marshall(rpc_resp, "DeletedTree", "", "", "");
		m_status.marshall(rpc_resp, "status", "", "", "");
	}
}


void CDeleteESDLRegistryEntryResponse::copy(CDeleteESDLRegistryEntryResponse &from)
{
	m_DeletedTree.copy(from.m_DeletedTree);
	m_status.copy(from.m_status);
}


void CDeleteESDLRegistryEntryResponse::copy(IConstDeleteESDLRegistryEntryResponse &ifrom)
{
	setDeletedTree(ifrom.getDeletedTree());
	setStatus(ifrom.getStatus());
}


void CDeleteESDLRegistryEntryResponse::getAttributes(IProperties &attributes)
{
}


void CDeleteESDLRegistryEntryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DeletedTree.toStr(ctx, buffer, "DeletedTree", "", true, "", "");
		m_status.toStr(ctx, buffer, "status", "", false, "", "");
	}
}


void CDeleteESDLRegistryEntryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDeleteESDLRegistryEntryResponse::serializer(IEspContext* ctx, IConstDeleteESDLRegistryEntryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DeleteESDLRegistryEntryResponse>");
	// field DeletedTree
	{
		const char* s = src.getDeletedTree();
		if (s && *s)
		{
			buffer.append("<DeletedTree>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DeletedTree>");
		}
	}
	// field status
	{
		StringBuffer tmp;
		CBaseESDLStatus::serializer(ctx,src.getStatus(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<status>%s</status>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</DeleteESDLRegistryEntryResponse>");
}

bool CDeleteESDLRegistryEntryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DeletedTree.unmarshall(rpc_request, "DeletedTree", basepath);
		hasValue |= m_status.unmarshall(rpc_request, "status", basepath);
	}
	return hasValue;
}

bool CDeleteESDLRegistryEntryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DeletedTree.unmarshall(ctx, soapval, "DeletedTree");
	hasValue |= m_status.unmarshall(ctx, soapval, "status");
	return hasValue;
}

bool CDeleteESDLRegistryEntryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DeletedTree.unmarshall(ctx, params, attachments, "DeletedTree", basepath);
	hasValue |= m_status.unmarshall(ctx, params, attachments, "status", basepath);
	return hasValue;
}

const char * CDeleteESDLRegistryEntryResponse::getDeletedTree() { return m_DeletedTree.query();}
IConstBaseESDLStatus & CDeleteESDLRegistryEntryResponse::getStatus() { return (IConstBaseESDLStatus &) m_status.getValue();}
void CDeleteESDLRegistryEntryResponse::setDeletedTree(const char * val){ m_DeletedTree.set(val); }
IEspBaseESDLStatus & CDeleteESDLRegistryEntryResponse::updateStatus(){ return (IEspBaseESDLStatus &) m_status.getValue(); }
void CDeleteESDLRegistryEntryResponse::setStatus(IConstBaseESDLStatus &ifrom){ m_status.copy(ifrom); }
extern "C"  IEspDeleteESDLRegistryEntryResponse *createDeleteESDLRegistryEntryResponse(const char *serv){return ((IEspDeleteESDLRegistryEntryResponse *)new CDeleteESDLRegistryEntryResponse(serv));}
extern "C"  IClientDeleteESDLRegistryEntryResponse *createClientDeleteESDLRegistryEntryResponse(const char *serv){return ((IClientDeleteESDLRegistryEntryResponse *)new CDeleteESDLRegistryEntryResponse(serv));}

//=======================================================
// class CListESDLDefinitionsRequest Implementation
//=======================================================

CListESDLDefinitionsRequest::CListESDLDefinitionsRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListESDLDefinitionsRequest::CListESDLDefinitionsRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsRequest");
}

CListESDLDefinitionsRequest::CListESDLDefinitionsRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CListESDLDefinitionsRequest::CListESDLDefinitionsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListESDLDefinitionsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CListESDLDefinitionsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListESDLDefinitionsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CListESDLDefinitionsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListESDLDefinitionsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListESDLDefinitionsRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CListESDLDefinitionsRequest::copy(CListESDLDefinitionsRequest &from)
{
}


void CListESDLDefinitionsRequest::copy(IConstListESDLDefinitionsRequest &ifrom)
{
}


void CListESDLDefinitionsRequest::getAttributes(IProperties &attributes)
{
}


void CListESDLDefinitionsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CListESDLDefinitionsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListESDLDefinitionsRequest::serializer(IEspContext* ctx, IConstListESDLDefinitionsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListESDLDefinitionsRequest>");
	if (keepRootTag)
		buffer.append("</ListESDLDefinitionsRequest>");
}

bool CListESDLDefinitionsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CListESDLDefinitionsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CListESDLDefinitionsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspListESDLDefinitionsRequest *createListESDLDefinitionsRequest(const char *serv){return ((IEspListESDLDefinitionsRequest *)new CListESDLDefinitionsRequest(serv));}
extern "C"  IClientListESDLDefinitionsRequest *createClientListESDLDefinitionsRequest(const char *serv){return ((IClientListESDLDefinitionsRequest *)new CListESDLDefinitionsRequest(serv));}

//=======================================================
// class CListESDLDefinitionsResponse Implementation
//=======================================================

CListESDLDefinitionsResponse::CListESDLDefinitionsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Definitions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListESDLDefinitionsResponse::CListESDLDefinitionsResponse(const char *serviceName, const char *bc)
	: m_Definitions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsResponse");
}

CListESDLDefinitionsResponse::CListESDLDefinitionsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Definitions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CListESDLDefinitionsResponse::CListESDLDefinitionsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Definitions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLDefinitionsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListESDLDefinitionsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Definitions\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Definition\" type=\"tns:ESDLDefinition\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CESDLDefinition::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CListESDLDefinitionsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListESDLDefinitionsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ESDLDefinition"))
	{
		added.setValue("ESDLDefinition",1);
		CESDLDefinition::getMapInfo(info,added);
	}
}

StringBuffer &CListESDLDefinitionsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Definitions");
	form.appendf("<tr><td><b>Definitions: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListESDLDefinitionsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListESDLDefinitionsResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Definitions.marshall(rpc_resp, "Definitions", "Definition");
	}
}


void CListESDLDefinitionsResponse::copy(CListESDLDefinitionsResponse &from)
{
	m_Definitions.copy(from.m_Definitions);
}


void CListESDLDefinitionsResponse::copy(IConstListESDLDefinitionsResponse &ifrom)
{
	setDefinitions(ifrom.getDefinitions());
}


void CListESDLDefinitionsResponse::getAttributes(IProperties &attributes)
{
}


void CListESDLDefinitionsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Definitions.toStr(ctx, buffer, "Definitions", "Definition");
	}
}


void CListESDLDefinitionsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListESDLDefinitionsResponse::serializer(IEspContext* ctx, IConstListESDLDefinitionsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListESDLDefinitionsResponse>");
	// field Definitions
	{
		IArrayOf<IConstESDLDefinition>& v = src.getDefinitions();
		int size = v.length();
		if (size>0)
			buffer.append("<Definitions>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Definition>");
			CESDLDefinition::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Definition>");
		}
		if (size>0)
			buffer.append("</Definitions>");
	}
	if (keepRootTag)
		buffer.append("</ListESDLDefinitionsResponse>");
}

bool CListESDLDefinitionsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Definitions.unmarshall(rpc_request, "Definitions", basepath);
	}
	return hasValue;
}

bool CListESDLDefinitionsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Definitions.unmarshall(ctx, soapval, "Definitions");
	return hasValue;
}

bool CListESDLDefinitionsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Definitions.unmarshall(ctx, params, attachments, "Definitions", basepath);
	return hasValue;
}

IArrayOf<IConstESDLDefinition> & CListESDLDefinitionsResponse::getDefinitions() { return (IArrayOf<IConstESDLDefinition> &) m_Definitions; }
void CListESDLDefinitionsResponse::setDefinitions(IArrayOf<IEspESDLDefinition> &val)
{
	m_Definitions->kill();
	IArrayOf<IConstESDLDefinition> &target = m_Definitions.getValue();
	ForEachItemIn(idx, val)
	{
		IEspESDLDefinition &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CListESDLDefinitionsResponse::setDefinitions(IArrayOf<IConstESDLDefinition> &val)
{
	m_Definitions->kill();
	IArrayOf<IConstESDLDefinition> &target = m_Definitions.getValue();
	ForEachItemIn(idx, val)
	{
		IConstESDLDefinition &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspListESDLDefinitionsResponse *createListESDLDefinitionsResponse(const char *serv){return ((IEspListESDLDefinitionsResponse *)new CListESDLDefinitionsResponse(serv));}
extern "C"  IClientListESDLDefinitionsResponse *createClientListESDLDefinitionsResponse(const char *serv){return ((IClientListESDLDefinitionsResponse *)new CListESDLDefinitionsResponse(serv));}

//=======================================================
// class CEspPortStruct Implementation
//=======================================================

CEspPortStruct::CEspPortStruct(const char *serviceName, IRpcMessageBinding *init)
	: m_Value(nilIgnore),m_Bindings(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EspPortStruct");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEspPortStruct::CEspPortStruct(const char *serviceName, const char *bc)
	: m_Value(nilIgnore),m_Bindings(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EspPortStruct");
}

StringBuffer &CEspPortStruct::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Value\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Bindings\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Binding\" type=\"tns:ESDLBinding\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CESDLBinding::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CEspPortStruct::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEspPortStruct::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ESDLBinding"))
	{
		added.setValue("ESDLBinding",1);
		CESDLBinding::getMapInfo(info,added);
	}
}

StringBuffer &CEspPortStruct::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Value");
	form.appendf("  <tr><td><b>Value: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Bindings");
	form.appendf("<tr><td><b>Bindings: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEspPortStruct::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEspPortStruct::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Value.marshall(rpc_resp, "Value", "", "", "");
	m_Bindings.marshall(rpc_resp, "Bindings", "Binding");
}


void CEspPortStruct::copy(CEspPortStruct &from)
{
	m_Value.copy(from.m_Value);
	m_Bindings.copy(from.m_Bindings);
}


void CEspPortStruct::copy(IConstEspPortStruct &ifrom)
{
	setValue(ifrom.getValue());
	setBindings(ifrom.getBindings());
}


void CEspPortStruct::getAttributes(IProperties &attributes)
{
}


void CEspPortStruct::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Value.toStr(ctx, buffer, "Value", "", true, "", "");
	m_Bindings.toStr(ctx, buffer, "Bindings", "Binding");
}


void CEspPortStruct::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEspPortStruct::serializer(IEspContext* ctx, IConstEspPortStruct &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EspPortStruct>");
	// field Value
	{
		int n = src.getValue();
		if (n)
			buffer.appendf("<Value>%d</Value>", n);
	}
	// field Bindings
	{
		IArrayOf<IConstESDLBinding>& v = src.getBindings();
		int size = v.length();
		if (size>0)
			buffer.append("<Bindings>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Binding>");
			CESDLBinding::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Binding>");
		}
		if (size>0)
			buffer.append("</Bindings>");
	}
	if (keepRootTag)
		buffer.append("</EspPortStruct>");
}

bool CEspPortStruct::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Value.unmarshall(rpc_request, "Value", basepath);
	hasValue |= m_Bindings.unmarshall(rpc_request, "Bindings", basepath);
	return hasValue;
}

bool CEspPortStruct::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Value.unmarshall(ctx, soapval, "Value");
	hasValue |= m_Bindings.unmarshall(ctx, soapval, "Bindings");
	return hasValue;
}

bool CEspPortStruct::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Value.unmarshall(ctx, params, attachments, "Value", basepath);
	hasValue |= m_Bindings.unmarshall(ctx, params, attachments, "Bindings", basepath);
	return hasValue;
}

int CEspPortStruct::getValue() { return m_Value;}
IArrayOf<IConstESDLBinding> & CEspPortStruct::getBindings() { return (IArrayOf<IConstESDLBinding> &) m_Bindings; }
void CEspPortStruct::setValue(int val){ m_Value=val; }
void CEspPortStruct::setBindings(IArrayOf<IEspESDLBinding> &val)
{
	m_Bindings->kill();
	IArrayOf<IConstESDLBinding> &target = m_Bindings.getValue();
	ForEachItemIn(idx, val)
	{
		IEspESDLBinding &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CEspPortStruct::setBindings(IArrayOf<IConstESDLBinding> &val)
{
	m_Bindings->kill();
	IArrayOf<IConstESDLBinding> &target = m_Bindings.getValue();
	ForEachItemIn(idx, val)
	{
		IConstESDLBinding &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspEspPortStruct *createEspPortStruct(const char *serv, const char *msgname){return ((IEspEspPortStruct *)new CEspPortStruct(serv /*, msgname*/));}
extern "C"  IClientEspPortStruct *createClientEspPortStruct(const char *serv, const char *msgname){return ((IClientEspPortStruct *)new CEspPortStruct(serv /*, msgname*/));}

//=======================================================
// class CEspProcessStruct Implementation
//=======================================================

CEspProcessStruct::CEspProcessStruct(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Ports(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EspProcessStruct");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CEspProcessStruct::CEspProcessStruct(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Ports(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("EspProcessStruct");
}

StringBuffer &CEspProcessStruct::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Ports\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Port\" type=\"tns:EspPortStruct\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CEspPortStruct::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CEspProcessStruct::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CEspProcessStruct::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("EspPortStruct"))
	{
		added.setValue("EspPortStruct",1);
		CEspPortStruct::getMapInfo(info,added);
	}
}

StringBuffer &CEspProcessStruct::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Ports");
	form.appendf("<tr><td><b>Ports: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CEspProcessStruct::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CEspProcessStruct::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Ports.marshall(rpc_resp, "Ports", "Port");
}


void CEspProcessStruct::copy(CEspProcessStruct &from)
{
	m_Name.copy(from.m_Name);
	m_Ports.copy(from.m_Ports);
}


void CEspProcessStruct::copy(IConstEspProcessStruct &ifrom)
{
	setName(ifrom.getName());
	setPorts(ifrom.getPorts());
}


void CEspProcessStruct::getAttributes(IProperties &attributes)
{
}


void CEspProcessStruct::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Ports.toStr(ctx, buffer, "Ports", "Port");
}


void CEspProcessStruct::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CEspProcessStruct::serializer(IEspContext* ctx, IConstEspProcessStruct &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<EspProcessStruct>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Ports
	{
		IArrayOf<IConstEspPortStruct>& v = src.getPorts();
		int size = v.length();
		if (size>0)
			buffer.append("<Ports>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Port>");
			CEspPortStruct::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Port>");
		}
		if (size>0)
			buffer.append("</Ports>");
	}
	if (keepRootTag)
		buffer.append("</EspProcessStruct>");
}

bool CEspProcessStruct::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Ports.unmarshall(rpc_request, "Ports", basepath);
	return hasValue;
}

bool CEspProcessStruct::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Ports.unmarshall(ctx, soapval, "Ports");
	return hasValue;
}

bool CEspProcessStruct::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Ports.unmarshall(ctx, params, attachments, "Ports", basepath);
	return hasValue;
}

const char * CEspProcessStruct::getName() { return m_Name.query();}
IArrayOf<IConstEspPortStruct> & CEspProcessStruct::getPorts() { return (IArrayOf<IConstEspPortStruct> &) m_Ports; }
void CEspProcessStruct::setName(const char * val){ m_Name.set(val); }
void CEspProcessStruct::setPorts(IArrayOf<IEspEspPortStruct> &val)
{
	m_Ports->kill();
	IArrayOf<IConstEspPortStruct> &target = m_Ports.getValue();
	ForEachItemIn(idx, val)
	{
		IEspEspPortStruct &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CEspProcessStruct::setPorts(IArrayOf<IConstEspPortStruct> &val)
{
	m_Ports->kill();
	IArrayOf<IConstEspPortStruct> &target = m_Ports.getValue();
	ForEachItemIn(idx, val)
	{
		IConstEspPortStruct &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspEspProcessStruct *createEspProcessStruct(const char *serv, const char *msgname){return ((IEspEspProcessStruct *)new CEspProcessStruct(serv /*, msgname*/));}
extern "C"  IClientEspProcessStruct *createClientEspProcessStruct(const char *serv, const char *msgname){return ((IClientEspProcessStruct *)new CEspProcessStruct(serv /*, msgname*/));}

//=======================================================
// class CListESDLBindingsRequest Implementation
//=======================================================

CListESDLBindingsRequest::CListESDLBindingsRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListESDLBindingsRequest::CListESDLBindingsRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsRequest");
}

CListESDLBindingsRequest::CListESDLBindingsRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CListESDLBindingsRequest::CListESDLBindingsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListESDLBindingsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CListESDLBindingsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListESDLBindingsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CListESDLBindingsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListESDLBindingsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListESDLBindingsRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CListESDLBindingsRequest::copy(CListESDLBindingsRequest &from)
{
}


void CListESDLBindingsRequest::copy(IConstListESDLBindingsRequest &ifrom)
{
}


void CListESDLBindingsRequest::getAttributes(IProperties &attributes)
{
}


void CListESDLBindingsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CListESDLBindingsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListESDLBindingsRequest::serializer(IEspContext* ctx, IConstListESDLBindingsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListESDLBindingsRequest>");
	if (keepRootTag)
		buffer.append("</ListESDLBindingsRequest>");
}

bool CListESDLBindingsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CListESDLBindingsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CListESDLBindingsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspListESDLBindingsRequest *createListESDLBindingsRequest(const char *serv){return ((IEspListESDLBindingsRequest *)new CListESDLBindingsRequest(serv));}
extern "C"  IClientListESDLBindingsRequest *createClientListESDLBindingsRequest(const char *serv){return ((IClientListESDLBindingsRequest *)new CListESDLBindingsRequest(serv));}

//=======================================================
// class CListESDLBindingsResponse Implementation
//=======================================================

CListESDLBindingsResponse::CListESDLBindingsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_BindingsXML(nilIgnore),m_Bindings(nilIgnore),m_EspProcesses(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CListESDLBindingsResponse::CListESDLBindingsResponse(const char *serviceName, const char *bc)
	: m_BindingsXML(nilIgnore),m_Bindings(nilIgnore),m_EspProcesses(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsResponse");
}

CListESDLBindingsResponse::CListESDLBindingsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_BindingsXML(nilIgnore),m_Bindings(nilIgnore),m_EspProcesses(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CListESDLBindingsResponse::CListESDLBindingsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_BindingsXML(nilIgnore),m_Bindings(nilIgnore),m_EspProcesses(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ListESDLBindingsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CListESDLBindingsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"BindingsXML\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ListESDLBindingsResponse","Bindings")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Bindings\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Binding\" type=\"tns:ESDLBinding\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!context.suppressed("ListESDLBindingsResponse","EspProcesses")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EspProcesses\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"EspProcess\" type=\"tns:EspProcessStruct\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("ListESDLBindingsResponse","Bindings"))
			CESDLBinding::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ListESDLBindingsResponse","EspProcesses"))
			CEspProcessStruct::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CListESDLBindingsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CListESDLBindingsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMaxVersion("ListESDLBindingsResponse","Bindings",1.3);
	info.addMinVersion("ListESDLBindingsResponse","EspProcesses",1.4);
	if (!added.getValue("ESDLBinding"))
	{
		added.setValue("ESDLBinding",1);
		CESDLBinding::getMapInfo(info,added);
	}
	if (!added.getValue("EspProcessStruct"))
	{
		added.setValue("EspProcessStruct",1);
		CEspProcessStruct::getMapInfo(info,added);
	}
}

StringBuffer &CListESDLBindingsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BindingsXML");
	form.appendf("  <tr><td><b>BindingsXML: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ListESDLBindingsResponse","Bindings")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Bindings");
		form.appendf("<tr><td><b>Bindings: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("ListESDLBindingsResponse","EspProcesses")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EspProcesses");
		form.appendf("<tr><td><b>EspProcesses: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CListESDLBindingsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CListESDLBindingsResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_BindingsXML.marshall(rpc_resp, "BindingsXML", "", "", "");
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_Bindings.marshall(rpc_resp, "Bindings", "Binding");
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_EspProcesses.marshall(rpc_resp, "EspProcesses", "EspProcess");
	}
}


void CListESDLBindingsResponse::copy(CListESDLBindingsResponse &from)
{
	m_BindingsXML.copy(from.m_BindingsXML);
	m_Bindings.copy(from.m_Bindings);
	m_EspProcesses.copy(from.m_EspProcesses);
}


void CListESDLBindingsResponse::copy(IConstListESDLBindingsResponse &ifrom)
{
	setBindingsXML(ifrom.getBindingsXML());
	setBindings(ifrom.getBindings());
	setEspProcesses(ifrom.getEspProcesses());
}


void CListESDLBindingsResponse::getAttributes(IProperties &attributes)
{
}


void CListESDLBindingsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_BindingsXML.toStr(ctx, buffer, "BindingsXML", "", true, "", "");
		if ((clientVer==-1.0 || clientVer<=1.3))
			m_Bindings.toStr(ctx, buffer, "Bindings", "Binding");
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_EspProcesses.toStr(ctx, buffer, "EspProcesses", "EspProcess");
	}
}


void CListESDLBindingsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CListESDLBindingsResponse::serializer(IEspContext* ctx, IConstListESDLBindingsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ListESDLBindingsResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field BindingsXML
	{
		const char* s = src.getBindingsXML();
		if (s && *s)
		{
			buffer.append("<BindingsXML>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BindingsXML>");
		}
	}
	// field Bindings
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		IArrayOf<IConstESDLBinding>& v = src.getBindings();
		int size = v.length();
		if (size>0)
			buffer.append("<Bindings>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Binding>");
			CESDLBinding::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Binding>");
		}
		if (size>0)
			buffer.append("</Bindings>");
	}
	// field EspProcesses
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		IArrayOf<IConstEspProcessStruct>& v = src.getEspProcesses();
		int size = v.length();
		if (size>0)
			buffer.append("<EspProcesses>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<EspProcess>");
			CEspProcessStruct::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</EspProcess>");
		}
		if (size>0)
			buffer.append("</EspProcesses>");
	}
	if (keepRootTag)
		buffer.append("</ListESDLBindingsResponse>");
}

bool CListESDLBindingsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_BindingsXML.unmarshall(rpc_request, "BindingsXML", basepath);
		hasValue |= m_Bindings.unmarshall(rpc_request, "Bindings", basepath);
		hasValue |= m_EspProcesses.unmarshall(rpc_request, "EspProcesses", basepath);
	}
	return hasValue;
}

bool CListESDLBindingsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_BindingsXML.unmarshall(ctx, soapval, "BindingsXML");
	hasValue |= m_Bindings.unmarshall(ctx, soapval, "Bindings");
	hasValue |= m_EspProcesses.unmarshall(ctx, soapval, "EspProcesses");
	return hasValue;
}

bool CListESDLBindingsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_BindingsXML.unmarshall(ctx, params, attachments, "BindingsXML", basepath);
	hasValue |= m_Bindings.unmarshall(ctx, params, attachments, "Bindings", basepath);
	hasValue |= m_EspProcesses.unmarshall(ctx, params, attachments, "EspProcesses", basepath);
	return hasValue;
}

const char * CListESDLBindingsResponse::getBindingsXML() { return m_BindingsXML.query();}
IArrayOf<IConstESDLBinding> & CListESDLBindingsResponse::getBindings() { return (IArrayOf<IConstESDLBinding> &) m_Bindings; }
IArrayOf<IConstEspProcessStruct> & CListESDLBindingsResponse::getEspProcesses() { return (IArrayOf<IConstEspProcessStruct> &) m_EspProcesses; }
void CListESDLBindingsResponse::setBindingsXML(const char * val){ m_BindingsXML.set(val); }
void CListESDLBindingsResponse::setBindings(IArrayOf<IEspESDLBinding> &val)
{
	m_Bindings->kill();
	IArrayOf<IConstESDLBinding> &target = m_Bindings.getValue();
	ForEachItemIn(idx, val)
	{
		IEspESDLBinding &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CListESDLBindingsResponse::setBindings(IArrayOf<IConstESDLBinding> &val)
{
	m_Bindings->kill();
	IArrayOf<IConstESDLBinding> &target = m_Bindings.getValue();
	ForEachItemIn(idx, val)
	{
		IConstESDLBinding &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CListESDLBindingsResponse::setEspProcesses(IArrayOf<IEspEspProcessStruct> &val)
{
	m_EspProcesses->kill();
	IArrayOf<IConstEspProcessStruct> &target = m_EspProcesses.getValue();
	ForEachItemIn(idx, val)
	{
		IEspEspProcessStruct &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CListESDLBindingsResponse::setEspProcesses(IArrayOf<IConstEspProcessStruct> &val)
{
	m_EspProcesses->kill();
	IArrayOf<IConstEspProcessStruct> &target = m_EspProcesses.getValue();
	ForEachItemIn(idx, val)
	{
		IConstEspProcessStruct &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspListESDLBindingsResponse *createListESDLBindingsResponse(const char *serv){return ((IEspListESDLBindingsResponse *)new CListESDLBindingsResponse(serv));}
extern "C"  IClientListESDLBindingsResponse *createClientListESDLBindingsResponse(const char *serv){return ((IClientListESDLBindingsResponse *)new CListESDLBindingsResponse(serv));}

//=======================================================
// class CWsESDLConfigPingRequest Implementation
//=======================================================

CWsESDLConfigPingRequest::CWsESDLConfigPingRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsESDLConfigPingRequest::CWsESDLConfigPingRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingRequest");
}

CWsESDLConfigPingRequest::CWsESDLConfigPingRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsESDLConfigPingRequest::CWsESDLConfigPingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsESDLConfigPingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsESDLConfigPingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsESDLConfigPingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsESDLConfigPingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsESDLConfigPingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsESDLConfigPingRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWsESDLConfigPingRequest::copy(CWsESDLConfigPingRequest &from)
{
}


void CWsESDLConfigPingRequest::copy(IConstWsESDLConfigPingRequest &ifrom)
{
}


void CWsESDLConfigPingRequest::getAttributes(IProperties &attributes)
{
}


void CWsESDLConfigPingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWsESDLConfigPingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsESDLConfigPingRequest::serializer(IEspContext* ctx, IConstWsESDLConfigPingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsESDLConfigPingRequest>");
	if (keepRootTag)
		buffer.append("</WsESDLConfigPingRequest>");
}

bool CWsESDLConfigPingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWsESDLConfigPingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsESDLConfigPingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsESDLConfigPingRequest *createWsESDLConfigPingRequest(const char *serv){return ((IEspWsESDLConfigPingRequest *)new CWsESDLConfigPingRequest(serv));}
extern "C"  IClientWsESDLConfigPingRequest *createClientWsESDLConfigPingRequest(const char *serv){return ((IClientWsESDLConfigPingRequest *)new CWsESDLConfigPingRequest(serv));}

//=======================================================
// class CWsESDLConfigPingResponse Implementation
//=======================================================

CWsESDLConfigPingResponse::CWsESDLConfigPingResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsESDLConfigPingResponse::CWsESDLConfigPingResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingResponse");
}

CWsESDLConfigPingResponse::CWsESDLConfigPingResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsESDLConfigPingResponse::CWsESDLConfigPingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsESDLConfigPingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsESDLConfigPingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsESDLConfigPingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsESDLConfigPingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsESDLConfigPingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsESDLConfigPingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsESDLConfigPingResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWsESDLConfigPingResponse::copy(CWsESDLConfigPingResponse &from)
{
}


void CWsESDLConfigPingResponse::copy(IConstWsESDLConfigPingResponse &ifrom)
{
}


void CWsESDLConfigPingResponse::getAttributes(IProperties &attributes)
{
}


void CWsESDLConfigPingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWsESDLConfigPingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsESDLConfigPingResponse::serializer(IEspContext* ctx, IConstWsESDLConfigPingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsESDLConfigPingResponse>");
	if (keepRootTag)
		buffer.append("</WsESDLConfigPingResponse>");
}

bool CWsESDLConfigPingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWsESDLConfigPingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsESDLConfigPingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsESDLConfigPingResponse *createWsESDLConfigPingResponse(const char *serv){return ((IEspWsESDLConfigPingResponse *)new CWsESDLConfigPingResponse(serv));}
extern "C"  IClientWsESDLConfigPingResponse *createClientWsESDLConfigPingResponse(const char *serv){return ((IClientWsESDLConfigPingResponse *)new CWsESDLConfigPingResponse(serv));}

//=======================================================
// class CWsESDLConfigSoapBinding Implementation
//=======================================================

CWsESDLConfigSoapBinding::CWsESDLConfigSoapBinding(http_soap_log_level level):CHttpSoapBinding(NULL, NULL, NULL, level)
{
	init_strings();
	setWsdlVersion(1.5);
}

CWsESDLConfigSoapBinding::CWsESDLConfigSoapBinding(IPropertyTree* cfg, const char *bindname, const char *procname, http_soap_log_level level):CHttpSoapBinding(cfg, bindname, procname, level)
{
	init_strings(); 
	setWsdlVersion(1.5);

}

void CWsESDLConfigSoapBinding::init_strings()
{
}

int CWsESDLConfigSoapBinding::processRequest(IRpcMessage* rpc_call, IRpcMessage* rpc_response)
{
	if(rpc_call == NULL || rpc_response == NULL)
		return -1;

	IEspContext *ctx=rpc_call->queryContext();
	DBGLOG("Client version: %g", ctx->getClientVersion());
	StringBuffer serviceName;
	double clientVer=(ctx) ? ctx->getClientVersion() : 0.0;
	qualifyServiceName(*ctx, ctx->queryServiceName(NULL), NULL, serviceName, NULL);
	CRpcCall* thecall = static_cast<CRpcCall *>(rpc_call);
	CRpcResponse* response = static_cast<CRpcResponse*>(rpc_response);
	CHttpRequest* httprequest = thecall->getHttpReq();
	CHttpResponse* httpresponse = response->getHttpResp();

	Owned<IEspWsESDLConfig> iserv = (IEspWsESDLConfig*)getService();
	if(iserv == NULL)
	{
		response->set_status(SOAP_SERVER_ERROR);
		response->set_err("Service not available");
		DBGLOG("Service not available");
		return -1;
	}
	if (thecall->get_name() == NULL)
	{
		response->set_status(SOAP_CLIENT_ERROR);
		response->set_err("No service method specified");
		ERRLOG("No service method specified");
		return -1;
	}

	IEspContext& context = *rpc_call->queryContext();

	if(!stricmp(thecall->get_name(), "ConfigureESDLBindingLogTransform")||!stricmp(thecall->get_name(), "ConfigureESDLBindingLogTransformRequest"))
	{
		Owned<CConfigureESDLBindingLogTransformRequest> esp_request = new CConfigureESDLBindingLogTransformRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CConfigureESDLBindingLogTransformResponse> esp_response = new CConfigureESDLBindingLogTransformResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.5)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ConfigureESDLBindingLogTransform");
			iserv->onConfigureESDLBindingLogTransform(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "ConfigureESDLBindingLogTransform");
		response->set_name("ConfigureESDLBindingLogTransformResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "ConfigureESDLBindingMethod")||!stricmp(thecall->get_name(), "ConfigureESDLBindingMethodRequest"))
	{
		Owned<CConfigureESDLBindingMethodRequest> esp_request = new CConfigureESDLBindingMethodRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CConfigureESDLBindingMethodResponse> esp_response = new CConfigureESDLBindingMethodResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ConfigureESDLBindingMethod");
			iserv->onConfigureESDLBindingMethod(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "ConfigureESDLBindingMethod");
		response->set_name("ConfigureESDLBindingMethodResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DeleteESDLBinding")||!stricmp(thecall->get_name(), "DeleteESDLBindingRequest"))
	{
		Owned<CDeleteESDLBindingRequest> esp_request = new CDeleteESDLBindingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDeleteESDLRegistryEntryResponse> esp_response = new CDeleteESDLRegistryEntryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Full);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "DeleteESDLBinding");
			iserv->onDeleteESDLBinding(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "DeleteESDLBinding");
		response->set_name("DeleteESDLRegistryEntryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "DeleteESDLDefinition")||!stricmp(thecall->get_name(), "DeleteESDLDefinitionRequest"))
	{
		Owned<CDeleteESDLDefinitionRequest> esp_request = new CDeleteESDLDefinitionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CDeleteESDLRegistryEntryResponse> esp_response = new CDeleteESDLRegistryEntryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Full);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "DeleteESDLDefinition");
			iserv->onDeleteESDLDefinition(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "DeleteESDLDefinition");
		response->set_name("DeleteESDLRegistryEntryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "Echo")||!stricmp(thecall->get_name(), "EchoRequest"))
	{
		Owned<CEchoRequest> esp_request = new CEchoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CEchoResponse> esp_response = new CEchoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "Echo");
			iserv->onEcho(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "Echo");
		response->set_name("EchoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "GetESDLBinding")||!stricmp(thecall->get_name(), "GetESDLBindingRequest"))
	{
		Owned<CGetESDLBindingRequest> esp_request = new CGetESDLBindingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CGetESDLBindingResponse> esp_response = new CGetESDLBindingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "GetESDLBinding");
			iserv->onGetESDLBinding(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "GetESDLBinding");
		response->set_name("GetESDLBindingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "GetESDLDefinition")||!stricmp(thecall->get_name(), "GetESDLDefinitionRequest"))
	{
		Owned<CGetESDLDefinitionRequest> esp_request = new CGetESDLDefinitionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CGetESDLDefinitionResponse> esp_response = new CGetESDLDefinitionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "GetESDLDefinition");
			iserv->onGetESDLDefinition(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "GetESDLDefinition");
		response->set_name("GetESDLDefinitionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "ListDESDLEspBindings")||!stricmp(thecall->get_name(), "ListDESDLEspBindingsReq"))
	{
		Owned<CListDESDLEspBindingsReq> esp_request = new CListDESDLEspBindingsReq(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CListDESDLEspBindingsResp> esp_response = new CListDESDLEspBindingsResp(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
		accessmap.setValue("ClusterTopologyAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.2)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ListDESDLEspBindings");
			iserv->onListDESDLEspBindings(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "ListDESDLEspBindings");
		response->set_name("ListDESDLEspBindingsResp");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "ListESDLBindings")||!stricmp(thecall->get_name(), "ListESDLBindingsRequest"))
	{
		Owned<CListESDLBindingsRequest> esp_request = new CListESDLBindingsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CListESDLBindingsResponse> esp_response = new CListESDLBindingsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ListESDLBindings");
			iserv->onListESDLBindings(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "ListESDLBindings");
		response->set_name("ListESDLBindingsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "ListESDLDefinitions")||!stricmp(thecall->get_name(), "ListESDLDefinitionsRequest"))
	{
		Owned<CListESDLDefinitionsRequest> esp_request = new CListESDLDefinitionsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CListESDLDefinitionsResponse> esp_response = new CListESDLDefinitionsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ListESDLDefinitions");
			iserv->onListESDLDefinitions(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "ListESDLDefinitions");
		response->set_name("ListESDLDefinitionsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "Ping")||!stricmp(thecall->get_name(), "WsESDLConfigPingRequest"))
	{
		Owned<CWsESDLConfigPingRequest> esp_request = new CWsESDLConfigPingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWsESDLConfigPingResponse> esp_response = new CWsESDLConfigPingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "Ping");
			iserv->onPing(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "Ping");
		response->set_name("WsESDLConfigPingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "PublishESDLBinding")||!stricmp(thecall->get_name(), "PublishESDLBindingRequest"))
	{
		Owned<CPublishESDLBindingRequest> esp_request = new CPublishESDLBindingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CPublishESDLBindingResponse> esp_response = new CPublishESDLBindingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "PublishESDLBinding");
			iserv->onPublishESDLBinding(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "PublishESDLBinding");
		response->set_name("PublishESDLBindingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "PublishESDLDefinition")||!stricmp(thecall->get_name(), "PublishESDLDefinitionRequest"))
	{
		Owned<CPublishESDLDefinitionRequest> esp_request = new CPublishESDLDefinitionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CPublishESDLDefinitionResponse> esp_response = new CPublishESDLDefinitionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;
		accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
		accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsESDLConfig::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "PublishESDLDefinition");
			iserv->onPublishESDLDefinition(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsESDLConfig", "PublishESDLDefinition");
		response->set_name("PublishESDLDefinitionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	response->set_status(SOAP_CLIENT_ERROR);
	StringBuffer msg, svcName;
	msg.appendf("Method %s not available in service %s",thecall->get_name(),getServiceName(svcName).str());
	ERRLOG("%s", msg.str());
	response->set_err(msg);
	return -1;
}

int CWsESDLConfigSoapBinding::getXsdDefinition(IEspContext &context, CHttpRequest* request, StringBuffer &content, const char *service, const char *method, bool mda)
{
	BoolHash added;
	if (context.getClientVersion()<=0)
		context.setClientVersion(1.5);

	DBGLOG("Client version: %g", context.getClientVersion());
	bool fullservice = (!Utils::strcasecmp(service, "WsESDLConfig"));
	bool allMethods = (method==NULL || *method==0);
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "ConfigureESDLBindingLogTransform"))) || Utils::strcasecmp(method, "ConfigureESDLBindingLogTransform")==0)
	{
		if (context.getClientVersion()>=1.5) {
			CConfigureESDLBindingLogTransformRequest::getMapInfo(context.queryMapInfo());
			CConfigureESDLBindingLogTransformResponse::getMapInfo(context.queryMapInfo());
			CConfigureESDLBindingLogTransformRequest::getXsdDefinition(context, request, "ConfigureESDLBindingLogTransformRequest", content, added);
			CConfigureESDLBindingLogTransformResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "ConfigureESDLBindingMethod"))) || Utils::strcasecmp(method, "ConfigureESDLBindingMethod")==0)
	{
		CConfigureESDLBindingMethodRequest::getMapInfo(context.queryMapInfo());
		CConfigureESDLBindingMethodResponse::getMapInfo(context.queryMapInfo());
		CConfigureESDLBindingMethodRequest::getXsdDefinition(context, request, "ConfigureESDLBindingMethodRequest", content, added);
		CConfigureESDLBindingMethodResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DeleteESDLBinding"))) || Utils::strcasecmp(method, "DeleteESDLBinding")==0)
	{
		CDeleteESDLBindingRequest::getMapInfo(context.queryMapInfo());
		CDeleteESDLRegistryEntryResponse::getMapInfo(context.queryMapInfo());
		CDeleteESDLBindingRequest::getXsdDefinition(context, request, "DeleteESDLBindingRequest", content, added);
		CDeleteESDLRegistryEntryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "DeleteESDLDefinition"))) || Utils::strcasecmp(method, "DeleteESDLDefinition")==0)
	{
		CDeleteESDLDefinitionRequest::getMapInfo(context.queryMapInfo());
		CDeleteESDLRegistryEntryResponse::getMapInfo(context.queryMapInfo());
		CDeleteESDLDefinitionRequest::getXsdDefinition(context, request, "DeleteESDLDefinitionRequest", content, added);
		CDeleteESDLRegistryEntryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Echo"))) || Utils::strcasecmp(method, "Echo")==0)
	{
		CEchoRequest::getMapInfo(context.queryMapInfo());
		CEchoResponse::getMapInfo(context.queryMapInfo());
		CEchoRequest::getXsdDefinition(context, request, "EchoRequest", content, added);
		CEchoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "GetESDLBinding"))) || Utils::strcasecmp(method, "GetESDLBinding")==0)
	{
		CGetESDLBindingRequest::getMapInfo(context.queryMapInfo());
		CGetESDLBindingResponse::getMapInfo(context.queryMapInfo());
		CGetESDLBindingRequest::getXsdDefinition(context, request, "GetESDLBindingRequest", content, added);
		CGetESDLBindingResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "GetESDLDefinition"))) || Utils::strcasecmp(method, "GetESDLDefinition")==0)
	{
		CGetESDLDefinitionRequest::getMapInfo(context.queryMapInfo());
		CGetESDLDefinitionResponse::getMapInfo(context.queryMapInfo());
		CGetESDLDefinitionRequest::getXsdDefinition(context, request, "GetESDLDefinitionRequest", content, added);
		CGetESDLDefinitionResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "ListDESDLEspBindings"))) || Utils::strcasecmp(method, "ListDESDLEspBindings")==0)
	{
		if (context.getClientVersion()>=1.2) {
			CListDESDLEspBindingsReq::getMapInfo(context.queryMapInfo());
			CListDESDLEspBindingsResp::getMapInfo(context.queryMapInfo());
			CListDESDLEspBindingsReq::getXsdDefinition(context, request, "ListDESDLEspBindingsReq", content, added);
			CListDESDLEspBindingsResp::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "ListESDLBindings"))) || Utils::strcasecmp(method, "ListESDLBindings")==0)
	{
		CListESDLBindingsRequest::getMapInfo(context.queryMapInfo());
		CListESDLBindingsResponse::getMapInfo(context.queryMapInfo());
		CListESDLBindingsRequest::getXsdDefinition(context, request, "ListESDLBindingsRequest", content, added);
		CListESDLBindingsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "ListESDLDefinitions"))) || Utils::strcasecmp(method, "ListESDLDefinitions")==0)
	{
		CListESDLDefinitionsRequest::getMapInfo(context.queryMapInfo());
		CListESDLDefinitionsResponse::getMapInfo(context.queryMapInfo());
		CListESDLDefinitionsRequest::getXsdDefinition(context, request, "ListESDLDefinitionsRequest", content, added);
		CListESDLDefinitionsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Ping"))) || Utils::strcasecmp(method, "Ping")==0)
	{
		CWsESDLConfigPingRequest::getMapInfo(context.queryMapInfo());
		CWsESDLConfigPingResponse::getMapInfo(context.queryMapInfo());
		CWsESDLConfigPingRequest::getXsdDefinition(context, request, "WsESDLConfigPingRequest", content, added);
		CWsESDLConfigPingResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "PublishESDLBinding"))) || Utils::strcasecmp(method, "PublishESDLBinding")==0)
	{
		CPublishESDLBindingRequest::getMapInfo(context.queryMapInfo());
		CPublishESDLBindingResponse::getMapInfo(context.queryMapInfo());
		CPublishESDLBindingRequest::getXsdDefinition(context, request, "PublishESDLBindingRequest", content, added);
		CPublishESDLBindingResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "PublishESDLDefinition"))) || Utils::strcasecmp(method, "PublishESDLDefinition")==0)
	{
		CPublishESDLDefinitionRequest::getMapInfo(context.queryMapInfo());
		CPublishESDLDefinitionResponse::getMapInfo(context.queryMapInfo());
		CPublishESDLDefinitionRequest::getXsdDefinition(context, request, "PublishESDLDefinitionRequest", content, added);
		CPublishESDLDefinitionResponse::getXsdDefinition(context, request, content, added);
	}
	return 0;
}

int CWsESDLConfigSoapBinding::getMethodHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &page, bool bIncludeFormTag)
{
	DBGLOG("Client version: %g", context.getClientVersion());
	if (Utils::strcasecmp(method, "ConfigureESDLBindingLogTransform")==0)
	{
		CConfigureESDLBindingLogTransformRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "ConfigureESDLBindingMethod")==0)
	{
		CConfigureESDLBindingMethodRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DeleteESDLBinding")==0)
	{
		CDeleteESDLBindingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "DeleteESDLDefinition")==0)
	{
		CDeleteESDLDefinitionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "Echo")==0)
	{
		CEchoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "GetESDLBinding")==0)
	{
		CGetESDLBindingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "GetESDLDefinition")==0)
	{
		CGetESDLDefinitionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "ListDESDLEspBindings")==0)
	{
		CListDESDLEspBindingsReq::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "ListESDLBindings")==0)
	{
		CListESDLBindingsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "ListESDLDefinitions")==0)
	{
		CListESDLDefinitionsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "Ping")==0)
	{
		CWsESDLConfigPingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "PublishESDLBinding")==0)
	{
		CPublishESDLBindingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "PublishESDLDefinition")==0)
	{
		CPublishESDLDefinitionRequest::getHtmlForm(context, request, serv, method, page);
	}
	return 0;
}

int CWsESDLConfigSoapBinding::getQualifiedNames(IEspContext& ctx, MethodInfoArray & methods)
{
	double ver = ctx.getClientVersion();
	if (ver<=0)
		ver = getWsdlVersion();
	const char *servname=ctx.queryServiceName(NULL);
	bool fullservice = (!stricmp(servname, "esp")||!stricmp(servname, "WsESDLConfig"));
	if ((fullservice || isMethodInSubService(ctx, servname, "ConfigureESDLBindingLogTransform")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.5, -1))
		methods.append(*new CMethodInfo("ConfigureESDLBindingLogTransform", "ConfigureESDLBindingLogTransformRequest", "ConfigureESDLBindingLogTransformResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "ConfigureESDLBindingMethod")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("ConfigureESDLBindingMethod", "ConfigureESDLBindingMethodRequest", "ConfigureESDLBindingMethodResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DeleteESDLBinding")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DeleteESDLBinding", "DeleteESDLBindingRequest", "DeleteESDLRegistryEntryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "DeleteESDLDefinition")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("DeleteESDLDefinition", "DeleteESDLDefinitionRequest", "DeleteESDLRegistryEntryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Echo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Echo", "EchoRequest", "EchoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "GetESDLBinding")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("GetESDLBinding", "GetESDLBindingRequest", "GetESDLBindingResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "GetESDLDefinition")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("GetESDLDefinition", "GetESDLDefinitionRequest", "GetESDLDefinitionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "ListDESDLEspBindings")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.2, -1))
		methods.append(*new CMethodInfo("ListDESDLEspBindings", "ListDESDLEspBindingsReq", "ListDESDLEspBindingsResp"));
	if ((fullservice || isMethodInSubService(ctx, servname, "ListESDLBindings")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("ListESDLBindings", "ListESDLBindingsRequest", "ListESDLBindingsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "ListESDLDefinitions")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("ListESDLDefinitions", "ListESDLDefinitionsRequest", "ListESDLDefinitionsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Ping")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Ping", "WsESDLConfigPingRequest", "WsESDLConfigPingResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "PublishESDLBinding")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("PublishESDLBinding", "PublishESDLBindingRequest", "PublishESDLBindingResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "PublishESDLDefinition")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("PublishESDLDefinition", "PublishESDLDefinitionRequest", "PublishESDLDefinitionResponse"));
	return methods.ordinality();
}

StringBuffer & CWsESDLConfigSoapBinding::getServiceName(StringBuffer &resp)
{
	resp.append("WsESDLConfig");
	return resp;
}

bool CWsESDLConfigSoapBinding::isValidServiceName(IEspContext &context, const char *name)
{
	if (!Utils::strcasecmp(name, "WsESDLConfig"))
		return true;
	else
		return (hasSubService(context, name));
}

bool CWsESDLConfigSoapBinding::qualifyMethodName(IEspContext &context, const char *methname, StringBuffer *methQName)
{
	if (!methname || !*methname)
	{
		if (methQName!=NULL)
			methQName->clear();
		return true;
	}
	if (Utils::strcasecmp(methname, "ConfigureESDLBindingLogTransform")==0)
	{
		if (methQName!=NULL)
			methQName->set("ConfigureESDLBindingLogTransform");
		return true;
	}
	if (Utils::strcasecmp(methname, "ConfigureESDLBindingMethod")==0)
	{
		if (methQName!=NULL)
			methQName->set("ConfigureESDLBindingMethod");
		return true;
	}
	if (Utils::strcasecmp(methname, "DeleteESDLBinding")==0)
	{
		if (methQName!=NULL)
			methQName->set("DeleteESDLBinding");
		return true;
	}
	if (Utils::strcasecmp(methname, "DeleteESDLDefinition")==0)
	{
		if (methQName!=NULL)
			methQName->set("DeleteESDLDefinition");
		return true;
	}
	if (Utils::strcasecmp(methname, "Echo")==0)
	{
		if (methQName!=NULL)
			methQName->set("Echo");
		return true;
	}
	if (Utils::strcasecmp(methname, "GetESDLBinding")==0)
	{
		if (methQName!=NULL)
			methQName->set("GetESDLBinding");
		return true;
	}
	if (Utils::strcasecmp(methname, "GetESDLDefinition")==0)
	{
		if (methQName!=NULL)
			methQName->set("GetESDLDefinition");
		return true;
	}
	if (Utils::strcasecmp(methname, "ListDESDLEspBindings")==0)
	{
		if (methQName!=NULL)
			methQName->set("ListDESDLEspBindings");
		return true;
	}
	if (Utils::strcasecmp(methname, "ListESDLBindings")==0)
	{
		if (methQName!=NULL)
			methQName->set("ListESDLBindings");
		return true;
	}
	if (Utils::strcasecmp(methname, "ListESDLDefinitions")==0)
	{
		if (methQName!=NULL)
			methQName->set("ListESDLDefinitions");
		return true;
	}
	if (Utils::strcasecmp(methname, "Ping")==0)
	{
		if (methQName!=NULL)
			methQName->set("Ping");
		return true;
	}
	if (Utils::strcasecmp(methname, "PublishESDLBinding")==0)
	{
		if (methQName!=NULL)
			methQName->set("PublishESDLBinding");
		return true;
	}
	if (Utils::strcasecmp(methname, "PublishESDLDefinition")==0)
	{
		if (methQName!=NULL)
			methQName->set("PublishESDLDefinition");
		return true;
	}
	return false;
}

bool CWsESDLConfigSoapBinding::qualifyServiceName(IEspContext &context, const char *servname, const char *methname, StringBuffer &servQName, StringBuffer *methQName)
{
	servQName.clear();
	if (!Utils::strcasecmp(servname, "WsESDLConfig"))
	{
		servQName.append("WsESDLConfig");
		return qualifyMethodName(context, methname, methQName);
	}
	return qualifySubServiceName(context, servname, methname, servQName, methQName);
}

int CWsESDLConfigSoapBinding::onGetFile(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	StringBuffer mimetype;
	MemoryBuffer content;

	StringBuffer filepath;
	getBaseFilePath(filepath);
	if (strchr("\\/", filepath.charAt(filepath.length()-1))==NULL)
		filepath.append("/");
	filepath.append(pathex);
	response->httpContentFromFile(filepath.str());
	response->send();
	return 0;
}

int CWsESDLConfigSoapBinding::onGetForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if (context.getClientVersion()<=0)
		context.setClientVersion(1.5);

	if (!stricmp("ConfigureESDLBindingLogTransform", method)) {
		CConfigureESDLBindingLogTransformRequest::getMapInfo(context.queryMapInfo());
		CConfigureESDLBindingLogTransformResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("ConfigureESDLBindingMethod", method)) {
		CConfigureESDLBindingMethodRequest::getMapInfo(context.queryMapInfo());
		CConfigureESDLBindingMethodResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DeleteESDLBinding", method)) {
		CDeleteESDLBindingRequest::getMapInfo(context.queryMapInfo());
		CDeleteESDLRegistryEntryResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("DeleteESDLDefinition", method)) {
		CDeleteESDLDefinitionRequest::getMapInfo(context.queryMapInfo());
		CDeleteESDLRegistryEntryResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("Echo", method)) {
		CEchoRequest::getMapInfo(context.queryMapInfo());
		CEchoResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("GetESDLBinding", method)) {
		CGetESDLBindingRequest::getMapInfo(context.queryMapInfo());
		CGetESDLBindingResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("GetESDLDefinition", method)) {
		CGetESDLDefinitionRequest::getMapInfo(context.queryMapInfo());
		CGetESDLDefinitionResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("ListDESDLEspBindings", method)) {
		CListDESDLEspBindingsReq::getMapInfo(context.queryMapInfo());
		CListDESDLEspBindingsResp::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("ListESDLBindings", method)) {
		CListESDLBindingsRequest::getMapInfo(context.queryMapInfo());
		CListESDLBindingsResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("ListESDLDefinitions", method)) {
		CListESDLDefinitionsRequest::getMapInfo(context.queryMapInfo());
		CListESDLDefinitionsResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("Ping", method)) {
		CWsESDLConfigPingRequest::getMapInfo(context.queryMapInfo());
		CWsESDLConfigPingResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("PublishESDLBinding", method)) {
		CPublishESDLBindingRequest::getMapInfo(context.queryMapInfo());
		CPublishESDLBindingResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("PublishESDLDefinition", method)) {
		CPublishESDLDefinitionRequest::getMapInfo(context.queryMapInfo());
		CPublishESDLDefinitionResponse::getMapInfo(context.queryMapInfo());
	}

	return EspHttpBinding::onGetForm(context, request, response, service, method);
}
int CWsESDLConfigSoapBinding::onGetXForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	return EspHttpBinding::onGetXForm(context, request, response, service, method);
}

int CWsESDLConfigSoapBinding::onGetService(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	return onGetQuery(context, request, response, service, method);
}

 IRpcRequestBinding *CWsESDLConfigSoapBinding::createReqBinding(IEspContext &context, IHttpMessage *ireq, const char *service, const char *method)
{
	CHttpRequest *request=static_cast<CHttpRequest*>(ireq);
	IProperties *props = (request) ? request->queryParameters() : NULL;

	if (!stricmp(method, "ConfigureESDLBindingLogTransform") || !stricmp(method, "ConfigureESDLBindingLogTransformRequest"))
		return new CConfigureESDLBindingLogTransformRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "ConfigureESDLBindingMethod") || !stricmp(method, "ConfigureESDLBindingMethodRequest"))
		return new CConfigureESDLBindingMethodRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "DeleteESDLBinding") || !stricmp(method, "DeleteESDLBindingRequest"))
		return new CDeleteESDLBindingRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "DeleteESDLDefinition") || !stricmp(method, "DeleteESDLDefinitionRequest"))
		return new CDeleteESDLDefinitionRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "Echo") || !stricmp(method, "EchoRequest"))
		return new CEchoRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "GetESDLBinding") || !stricmp(method, "GetESDLBindingRequest"))
		return new CGetESDLBindingRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "GetESDLDefinition") || !stricmp(method, "GetESDLDefinitionRequest"))
		return new CGetESDLDefinitionRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "ListDESDLEspBindings") || !stricmp(method, "ListDESDLEspBindingsReq"))
		return new CListDESDLEspBindingsReq(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "ListESDLBindings") || !stricmp(method, "ListESDLBindingsRequest"))
		return new CListESDLBindingsRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "ListESDLDefinitions") || !stricmp(method, "ListESDLDefinitionsRequest"))
		return new CListESDLDefinitionsRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "Ping") || !stricmp(method, "WsESDLConfigPingRequest"))
		return new CWsESDLConfigPingRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "PublishESDLBinding") || !stricmp(method, "PublishESDLBindingRequest"))
		return new CPublishESDLBindingRequest(&context, "WsESDLConfig", props, NULL);
	if (!stricmp(method, "PublishESDLDefinition") || !stricmp(method, "PublishESDLDefinitionRequest"))
		return new CPublishESDLDefinitionRequest(&context, "WsESDLConfig", props, NULL);
	return NULL;
}

int CWsESDLConfigSoapBinding::onGetInstantQuery(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if (context.getClientVersion()<=0)
		context.setClientVersion(1.5);

	if(request == NULL || response == NULL)
		return -1;
	StringBuffer respStr;
	Owned<IEspWsESDLConfig> iserv = (IEspWsESDLConfig*)getService();
	if(iserv == NULL)
	{
		respStr.append("Service not available");
		response->setContent(respStr.str());
		response->setContentType("text/html");
		response->send();
	}
	else
	{
		Owned<CSoapResponseBinding> esp_response;
		StringBuffer source;
		IEspContext& context = *request->queryContext();
		if(!stricmp(method, "ConfigureESDLBindingLogTransform")||!stricmp(method, "ConfigureESDLBindingLogTransformRequest"))
		{
			Owned<CConfigureESDLBindingLogTransformRequest> esp_request = new CConfigureESDLBindingLogTransformRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CConfigureESDLBindingLogTransformResponse* resp = new CConfigureESDLBindingLogTransformResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ConfigureESDLBindingLogTransform");
				iserv->onConfigureESDLBindingLogTransform(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "ConfigureESDLBindingLogTransform", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "ConfigureESDLBindingMethod")||!stricmp(method, "ConfigureESDLBindingMethodRequest"))
		{
			Owned<CConfigureESDLBindingMethodRequest> esp_request = new CConfigureESDLBindingMethodRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CConfigureESDLBindingMethodResponse* resp = new CConfigureESDLBindingMethodResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ConfigureESDLBindingMethod");
				iserv->onConfigureESDLBindingMethod(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "ConfigureESDLBindingMethod", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DeleteESDLBinding")||!stricmp(method, "DeleteESDLBindingRequest"))
		{
			Owned<CDeleteESDLBindingRequest> esp_request = new CDeleteESDLBindingRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDeleteESDLRegistryEntryResponse* resp = new CDeleteESDLRegistryEntryResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Full);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "DeleteESDLBinding");
				iserv->onDeleteESDLBinding(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "DeleteESDLBinding", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "DeleteESDLDefinition")||!stricmp(method, "DeleteESDLDefinitionRequest"))
		{
			Owned<CDeleteESDLDefinitionRequest> esp_request = new CDeleteESDLDefinitionRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CDeleteESDLRegistryEntryResponse* resp = new CDeleteESDLRegistryEntryResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Full);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "DeleteESDLDefinition");
				iserv->onDeleteESDLDefinition(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "DeleteESDLDefinition", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "Echo")||!stricmp(method, "EchoRequest"))
		{
			Owned<CEchoRequest> esp_request = new CEchoRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CEchoResponse* resp = new CEchoResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "Echo");
				iserv->onEcho(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "Echo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "GetESDLBinding")||!stricmp(method, "GetESDLBindingRequest"))
		{
			Owned<CGetESDLBindingRequest> esp_request = new CGetESDLBindingRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CGetESDLBindingResponse* resp = new CGetESDLBindingResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "GetESDLBinding");
				iserv->onGetESDLBinding(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "GetESDLBinding", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "GetESDLDefinition")||!stricmp(method, "GetESDLDefinitionRequest"))
		{
			Owned<CGetESDLDefinitionRequest> esp_request = new CGetESDLDefinitionRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CGetESDLDefinitionResponse* resp = new CGetESDLDefinitionResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "GetESDLDefinition");
				iserv->onGetESDLDefinition(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "GetESDLDefinition", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "ListDESDLEspBindings")||!stricmp(method, "ListDESDLEspBindingsReq"))
		{
			Owned<CListDESDLEspBindingsReq> esp_request = new CListDESDLEspBindingsReq(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CListDESDLEspBindingsResp* resp = new CListDESDLEspBindingsResp("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
			accessmap.setValue("ClusterTopologyAccess", SecAccess_Read);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ListDESDLEspBindings");
				iserv->onListDESDLEspBindings(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "ListDESDLEspBindings", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "ListESDLBindings")||!stricmp(method, "ListESDLBindingsRequest"))
		{
			Owned<CListESDLBindingsRequest> esp_request = new CListESDLBindingsRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CListESDLBindingsResponse* resp = new CListESDLBindingsResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ListESDLBindings");
				iserv->onListESDLBindings(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "ListESDLBindings", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "ListESDLDefinitions")||!stricmp(method, "ListESDLDefinitionsRequest"))
		{
			Owned<CListESDLDefinitionsRequest> esp_request = new CListESDLDefinitionsRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CListESDLDefinitionsResponse* resp = new CListESDLDefinitionsResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Read);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "ListESDLDefinitions");
				iserv->onListESDLDefinitions(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "ListESDLDefinitions", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "Ping")||!stricmp(method, "WsESDLConfigPingRequest"))
		{
			Owned<CWsESDLConfigPingRequest> esp_request = new CWsESDLConfigPingRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWsESDLConfigPingResponse* resp = new CWsESDLConfigPingResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "Ping");
				iserv->onPing(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "Ping", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "PublishESDLBinding")||!stricmp(method, "PublishESDLBindingRequest"))
		{
			Owned<CPublishESDLBindingRequest> esp_request = new CPublishESDLBindingRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CPublishESDLBindingResponse* resp = new CPublishESDLBindingResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "PublishESDLBinding");
				iserv->onPublishESDLBinding(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "PublishESDLBinding", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "PublishESDLDefinition")||!stricmp(method, "PublishESDLDefinitionRequest"))
		{
			Owned<CPublishESDLDefinitionRequest> esp_request = new CPublishESDLDefinitionRequest(&context, "WsESDLConfig", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CPublishESDLDefinitionResponse* resp = new CPublishESDLDefinitionResponse("WsESDLConfig");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;
			accessmap.setValue("ESDLConfigAccess", SecAccess_Access);
			accessmap.setValue("ESDLConfigAccess", SecAccess_Write);
			source.setf("WsESDLConfig::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsESDLConfig", "PublishESDLDefinition");
				iserv->onPublishESDLDefinition(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsESDLConfig", "PublishESDLDefinition", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}

		if (esp_response.get())
		{
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
				response->redirect(*request, esp_response->getRedirectUrl());
			else
			{
				MemoryBuffer content;
				StringBuffer mimetype;
				esp_response->appendContent(&context,content, mimetype);
				onBeforeSendResponse(context,request,content,service,method);
				response->setContent(content.length(), content.toByteArray());
				response->setContentType(mimetype.str());
				response->send();
			}
			return 0;
		}
	}
	return onGetNotFound(context, request,  response, service);
}





//=======================================================
// client util methods
//=======================================================

//------ method ConfigureESDLBindingLogTransform ---------

IClientConfigureESDLBindingLogTransformRequest * CClientWsESDLConfig::createConfigureESDLBindingLogTransformRequest()
{
	CConfigureESDLBindingLogTransformRequest* request = new CConfigureESDLBindingLogTransformRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientConfigureESDLBindingLogTransformResponse * CClientWsESDLConfig::ConfigureESDLBindingLogTransform(IClientConfigureESDLBindingLogTransformRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CConfigureESDLBindingLogTransformRequest* esprequest = static_cast<CConfigureESDLBindingLogTransformRequest*>(request);
	CConfigureESDLBindingLogTransformResponse* espresponse = new CConfigureESDLBindingLogTransformResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_ConfigureESDLBindingLogTransform(IClientConfigureESDLBindingLogTransformRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CConfigureESDLBindingLogTransformRequest* esprequest = static_cast<CConfigureESDLBindingLogTransformRequest*>(request);
	esprequest->setMethod("ConfigureESDLBindingLogTransform");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientConfigureESDLBindingLogTransformResponse *CClientWsESDLConfig::ConfigureESDLBindingLogTransformFn(const char * EsdlBindingId_, const char * LogTransformName_, bool Overwrite_, bool Encoded_, const char * Config_, bool EchoBinding_)
{
	Owned<IClientConfigureESDLBindingLogTransformRequest> req =  createConfigureESDLBindingLogTransformRequest();
	req->setEsdlBindingId(EsdlBindingId_);
	req->setLogTransformName(LogTransformName_);
	req->setOverwrite(Overwrite_);
	req->setEncoded(Encoded_);
	req->setConfig(Config_);
	req->setEchoBinding(EchoBinding_);
	return ConfigureESDLBindingLogTransform(req.get());
}

//------ method ConfigureESDLBindingMethod ---------

IClientConfigureESDLBindingMethodRequest * CClientWsESDLConfig::createConfigureESDLBindingMethodRequest()
{
	CConfigureESDLBindingMethodRequest* request = new CConfigureESDLBindingMethodRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientConfigureESDLBindingMethodResponse * CClientWsESDLConfig::ConfigureESDLBindingMethod(IClientConfigureESDLBindingMethodRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CConfigureESDLBindingMethodRequest* esprequest = static_cast<CConfigureESDLBindingMethodRequest*>(request);
	CConfigureESDLBindingMethodResponse* espresponse = new CConfigureESDLBindingMethodResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_ConfigureESDLBindingMethod(IClientConfigureESDLBindingMethodRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CConfigureESDLBindingMethodRequest* esprequest = static_cast<CConfigureESDLBindingMethodRequest*>(request);
	esprequest->setMethod("ConfigureESDLBindingMethod");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientConfigureESDLBindingMethodResponse *CClientWsESDLConfig::ConfigureESDLBindingMethodFn(const char * EsdlBindingId_, const char * MethodName_, const char * EspProcName_, const char * EspBindingName_, const char * EspPort_, const char * EsdlDefinitionID_, const char * EsdlServiceName_, bool Overwrite_, const char * Config_, IConstMethodConfig &MethodStructure_, bool EchoBinding_)
{
	Owned<IClientConfigureESDLBindingMethodRequest> req =  createConfigureESDLBindingMethodRequest();
	req->setEsdlBindingId(EsdlBindingId_);
	req->setMethodName(MethodName_);
	req->setEspProcName(EspProcName_);
	req->setEspBindingName(EspBindingName_);
	req->setEspPort(EspPort_);
	req->setEsdlDefinitionID(EsdlDefinitionID_);
	req->setEsdlServiceName(EsdlServiceName_);
	req->setOverwrite(Overwrite_);
	req->setConfig(Config_);
	req->setMethodStructure(MethodStructure_);
	req->setEchoBinding(EchoBinding_);
	return ConfigureESDLBindingMethod(req.get());
}

//------ method DeleteESDLBinding ---------

IClientDeleteESDLBindingRequest * CClientWsESDLConfig::createDeleteESDLBindingRequest()
{
	CDeleteESDLBindingRequest* request = new CDeleteESDLBindingRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDeleteESDLRegistryEntryResponse * CClientWsESDLConfig::DeleteESDLBinding(IClientDeleteESDLBindingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDeleteESDLBindingRequest* esprequest = static_cast<CDeleteESDLBindingRequest*>(request);
	CDeleteESDLRegistryEntryResponse* espresponse = new CDeleteESDLRegistryEntryResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_DeleteESDLBinding(IClientDeleteESDLBindingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDeleteESDLBindingRequest* esprequest = static_cast<CDeleteESDLBindingRequest*>(request);
	esprequest->setMethod("DeleteESDLBinding");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDeleteESDLRegistryEntryResponse *CClientWsESDLConfig::DeleteESDLBindingFn(const char * Id_, const char * EspProcess_, const char * EspBinding_)
{
	Owned<IClientDeleteESDLBindingRequest> req =  createDeleteESDLBindingRequest();
	req->setId(Id_);
	req->setEspProcess(EspProcess_);
	req->setEspBinding(EspBinding_);
	return DeleteESDLBinding(req.get());
}

//------ method DeleteESDLDefinition ---------

IClientDeleteESDLDefinitionRequest * CClientWsESDLConfig::createDeleteESDLDefinitionRequest()
{
	CDeleteESDLDefinitionRequest* request = new CDeleteESDLDefinitionRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientDeleteESDLRegistryEntryResponse * CClientWsESDLConfig::DeleteESDLDefinition(IClientDeleteESDLDefinitionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDeleteESDLDefinitionRequest* esprequest = static_cast<CDeleteESDLDefinitionRequest*>(request);
	CDeleteESDLRegistryEntryResponse* espresponse = new CDeleteESDLRegistryEntryResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_DeleteESDLDefinition(IClientDeleteESDLDefinitionRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CDeleteESDLDefinitionRequest* esprequest = static_cast<CDeleteESDLDefinitionRequest*>(request);
	esprequest->setMethod("DeleteESDLDefinition");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientDeleteESDLRegistryEntryResponse *CClientWsESDLConfig::DeleteESDLDefinitionFn(const char * Id_, const char * Name_, const char * Version_)
{
	Owned<IClientDeleteESDLDefinitionRequest> req =  createDeleteESDLDefinitionRequest();
	req->setId(Id_);
	req->setName(Name_);
	req->setVersion(Version_);
	return DeleteESDLDefinition(req.get());
}

//------ method Echo ---------

IClientEchoRequest * CClientWsESDLConfig::createEchoRequest()
{
	CEchoRequest* request = new CEchoRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientEchoResponse * CClientWsESDLConfig::Echo(IClientEchoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CEchoRequest* esprequest = static_cast<CEchoRequest*>(request);
	CEchoResponse* espresponse = new CEchoResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_Echo(IClientEchoRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CEchoRequest* esprequest = static_cast<CEchoRequest*>(request);
	esprequest->setMethod("Echo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientEchoResponse *CClientWsESDLConfig::EchoFn(const char * Request_)
{
	Owned<IClientEchoRequest> req =  createEchoRequest();
	req->setRequest(Request_);
	return Echo(req.get());
}

//------ method GetESDLBinding ---------

IClientGetESDLBindingRequest * CClientWsESDLConfig::createGetESDLBindingRequest()
{
	CGetESDLBindingRequest* request = new CGetESDLBindingRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientGetESDLBindingResponse * CClientWsESDLConfig::GetESDLBinding(IClientGetESDLBindingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CGetESDLBindingRequest* esprequest = static_cast<CGetESDLBindingRequest*>(request);
	CGetESDLBindingResponse* espresponse = new CGetESDLBindingResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_GetESDLBinding(IClientGetESDLBindingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CGetESDLBindingRequest* esprequest = static_cast<CGetESDLBindingRequest*>(request);
	esprequest->setMethod("GetESDLBinding");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientGetESDLBindingResponse *CClientWsESDLConfig::GetESDLBindingFn(const char * EsdlBindingId_, const char * EspProcName_, const char * EspBindingName_, const char * EspPort_, bool IncludeInterfaceDefinition_, bool ReportMethodsAvailable_)
{
	Owned<IClientGetESDLBindingRequest> req =  createGetESDLBindingRequest();
	req->setEsdlBindingId(EsdlBindingId_);
	req->setEspProcName(EspProcName_);
	req->setEspBindingName(EspBindingName_);
	req->setEspPort(EspPort_);
	req->setIncludeInterfaceDefinition(IncludeInterfaceDefinition_);
	req->setReportMethodsAvailable(ReportMethodsAvailable_);
	return GetESDLBinding(req.get());
}

//------ method GetESDLDefinition ---------

IClientGetESDLDefinitionRequest * CClientWsESDLConfig::createGetESDLDefinitionRequest()
{
	CGetESDLDefinitionRequest* request = new CGetESDLDefinitionRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientGetESDLDefinitionResponse * CClientWsESDLConfig::GetESDLDefinition(IClientGetESDLDefinitionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CGetESDLDefinitionRequest* esprequest = static_cast<CGetESDLDefinitionRequest*>(request);
	CGetESDLDefinitionResponse* espresponse = new CGetESDLDefinitionResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_GetESDLDefinition(IClientGetESDLDefinitionRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CGetESDLDefinitionRequest* esprequest = static_cast<CGetESDLDefinitionRequest*>(request);
	esprequest->setMethod("GetESDLDefinition");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientGetESDLDefinitionResponse *CClientWsESDLConfig::GetESDLDefinitionFn(const char * Id_, const char * Name_, int Seq_, const char * ServiceName_, bool ReportMethodsAvailable_)
{
	Owned<IClientGetESDLDefinitionRequest> req =  createGetESDLDefinitionRequest();
	req->setId(Id_);
	req->setName(Name_);
	req->setSeq(Seq_);
	req->setServiceName(ServiceName_);
	req->setReportMethodsAvailable(ReportMethodsAvailable_);
	return GetESDLDefinition(req.get());
}

//------ method ListDESDLEspBindings ---------

IClientListDESDLEspBindingsReq * CClientWsESDLConfig::createListDESDLEspBindingsRequest()
{
	CListDESDLEspBindingsReq* request = new CListDESDLEspBindingsReq("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientListDESDLEspBindingsResp * CClientWsESDLConfig::ListDESDLEspBindings(IClientListDESDLEspBindingsReq *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListDESDLEspBindingsReq* esprequest = static_cast<CListDESDLEspBindingsReq*>(request);
	CListDESDLEspBindingsResp* espresponse = new CListDESDLEspBindingsResp("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_ListDESDLEspBindings(IClientListDESDLEspBindingsReq *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListDESDLEspBindingsReq* esprequest = static_cast<CListDESDLEspBindingsReq*>(request);
	esprequest->setMethod("ListDESDLEspBindings");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientListDESDLEspBindingsResp *CClientWsESDLConfig::ListDESDLEspBindingsFn(bool IncludeESDLBindingInfo_)
{
	Owned<IClientListDESDLEspBindingsReq> req =  createListDESDLEspBindingsRequest();
	req->setIncludeESDLBindingInfo(IncludeESDLBindingInfo_);
	return ListDESDLEspBindings(req.get());
}

//------ method ListESDLBindings ---------

IClientListESDLBindingsRequest * CClientWsESDLConfig::createListESDLBindingsRequest()
{
	CListESDLBindingsRequest* request = new CListESDLBindingsRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientListESDLBindingsResponse * CClientWsESDLConfig::ListESDLBindings(IClientListESDLBindingsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListESDLBindingsRequest* esprequest = static_cast<CListESDLBindingsRequest*>(request);
	CListESDLBindingsResponse* espresponse = new CListESDLBindingsResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_ListESDLBindings(IClientListESDLBindingsRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListESDLBindingsRequest* esprequest = static_cast<CListESDLBindingsRequest*>(request);
	esprequest->setMethod("ListESDLBindings");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientListESDLBindingsResponse *CClientWsESDLConfig::ListESDLBindingsFn()
{
	Owned<IClientListESDLBindingsRequest> req =  createListESDLBindingsRequest();
	return ListESDLBindings(req.get());
}

//------ method ListESDLDefinitions ---------

IClientListESDLDefinitionsRequest * CClientWsESDLConfig::createListESDLDefinitionsRequest()
{
	CListESDLDefinitionsRequest* request = new CListESDLDefinitionsRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientListESDLDefinitionsResponse * CClientWsESDLConfig::ListESDLDefinitions(IClientListESDLDefinitionsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListESDLDefinitionsRequest* esprequest = static_cast<CListESDLDefinitionsRequest*>(request);
	CListESDLDefinitionsResponse* espresponse = new CListESDLDefinitionsResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_ListESDLDefinitions(IClientListESDLDefinitionsRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CListESDLDefinitionsRequest* esprequest = static_cast<CListESDLDefinitionsRequest*>(request);
	esprequest->setMethod("ListESDLDefinitions");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientListESDLDefinitionsResponse *CClientWsESDLConfig::ListESDLDefinitionsFn()
{
	Owned<IClientListESDLDefinitionsRequest> req =  createListESDLDefinitionsRequest();
	return ListESDLDefinitions(req.get());
}

//------ method Ping ---------

IClientWsESDLConfigPingRequest * CClientWsESDLConfig::createPingRequest()
{
	CWsESDLConfigPingRequest* request = new CWsESDLConfigPingRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientWsESDLConfigPingResponse * CClientWsESDLConfig::Ping(IClientWsESDLConfigPingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsESDLConfigPingRequest* esprequest = static_cast<CWsESDLConfigPingRequest*>(request);
	CWsESDLConfigPingResponse* espresponse = new CWsESDLConfigPingResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_Ping(IClientWsESDLConfigPingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsESDLConfigPingRequest* esprequest = static_cast<CWsESDLConfigPingRequest*>(request);
	esprequest->setMethod("Ping");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWsESDLConfigPingResponse *CClientWsESDLConfig::PingFn()
{
	Owned<IClientWsESDLConfigPingRequest> req =  createPingRequest();
	return Ping(req.get());
}

//------ method PublishESDLBinding ---------

IClientPublishESDLBindingRequest * CClientWsESDLConfig::createPublishESDLBindingRequest()
{
	CPublishESDLBindingRequest* request = new CPublishESDLBindingRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientPublishESDLBindingResponse * CClientWsESDLConfig::PublishESDLBinding(IClientPublishESDLBindingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CPublishESDLBindingRequest* esprequest = static_cast<CPublishESDLBindingRequest*>(request);
	CPublishESDLBindingResponse* espresponse = new CPublishESDLBindingResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_PublishESDLBinding(IClientPublishESDLBindingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CPublishESDLBindingRequest* esprequest = static_cast<CPublishESDLBindingRequest*>(request);
	esprequest->setMethod("PublishESDLBinding");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientPublishESDLBindingResponse *CClientWsESDLConfig::PublishESDLBindingFn(const char * EspProcName_, const char * EspBindingName_, const char * EspPort_, const char * EsdlDefinitionID_, const char * EsdlServiceName_, const char * EspServiceName_, bool Overwrite_, const char * Config_, IArrayOf<IConstMethodConfig> &Methods_, bool EchoBinding_)
{
	Owned<IClientPublishESDLBindingRequest> req =  createPublishESDLBindingRequest();
	req->setEspProcName(EspProcName_);
	req->setEspBindingName(EspBindingName_);
	req->setEspPort(EspPort_);
	req->setEsdlDefinitionID(EsdlDefinitionID_);
	req->setEsdlServiceName(EsdlServiceName_);
	req->setEspServiceName(EspServiceName_);
	req->setOverwrite(Overwrite_);
	req->setConfig(Config_);
	req->setMethods(Methods_);
	req->setEchoBinding(EchoBinding_);
	return PublishESDLBinding(req.get());
}

//------ method PublishESDLDefinition ---------

IClientPublishESDLDefinitionRequest * CClientWsESDLConfig::createPublishESDLDefinitionRequest()
{
	CPublishESDLDefinitionRequest* request = new CPublishESDLDefinitionRequest("WsESDLConfig");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientPublishESDLDefinitionResponse * CClientWsESDLConfig::PublishESDLDefinition(IClientPublishESDLDefinitionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CPublishESDLDefinitionRequest* esprequest = static_cast<CPublishESDLDefinitionRequest*>(request);
	CPublishESDLDefinitionResponse* espresponse = new CPublishESDLDefinitionResponse("WsESDLConfig");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsESDLConfig::async_PublishESDLDefinition(IClientPublishESDLDefinitionRequest *request, IClientWsESDLConfigEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CPublishESDLDefinitionRequest* esprequest = static_cast<CPublishESDLDefinitionRequest*>(request);
	esprequest->setMethod("PublishESDLDefinition");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsESDLConfig::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientPublishESDLDefinitionResponse *CClientWsESDLConfig::PublishESDLDefinitionFn(const char * ServiceName_, const char * XMLDefinition_, bool DeletePrevious_, bool EchoDefinition_)
{
	Owned<IClientPublishESDLDefinitionRequest> req =  createPublishESDLDefinitionRequest();
	req->setServiceName(ServiceName_);
	req->setXMLDefinition(XMLDefinition_);
	req->setDeletePrevious(DeletePrevious_);
	req->setEchoDefinition(EchoDefinition_);
	return PublishESDLDefinition(req.get());
}

int CClientWsESDLConfig::transferThunkEvent(void *data)
{
	IRpcResponseBinding *response = (IRpcResponseBinding *)data;
	if (response!=NULL)
	{
		IClientWsESDLConfigEvents *eventSink = (IClientWsESDLConfigEvents *)response->getEventSink();
		response->lock();

		if (stricmp(response->getMethod(), "ConfigureESDLBindingLogTransform")==0)
		{
			IClientConfigureESDLBindingLogTransformResponse* icresp = dynamic_cast<IClientConfigureESDLBindingLogTransformResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onConfigureESDLBindingLogTransformComplete(icresp, response->queryState());
				else
					eventSink->onConfigureESDLBindingLogTransformError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "ConfigureESDLBindingMethod")==0)
		{
			IClientConfigureESDLBindingMethodResponse* icresp = dynamic_cast<IClientConfigureESDLBindingMethodResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onConfigureESDLBindingMethodComplete(icresp, response->queryState());
				else
					eventSink->onConfigureESDLBindingMethodError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DeleteESDLBinding")==0)
		{
			IClientDeleteESDLRegistryEntryResponse* icresp = dynamic_cast<IClientDeleteESDLRegistryEntryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDeleteESDLBindingComplete(icresp, response->queryState());
				else
					eventSink->onDeleteESDLBindingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "DeleteESDLDefinition")==0)
		{
			IClientDeleteESDLRegistryEntryResponse* icresp = dynamic_cast<IClientDeleteESDLRegistryEntryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onDeleteESDLDefinitionComplete(icresp, response->queryState());
				else
					eventSink->onDeleteESDLDefinitionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "Echo")==0)
		{
			IClientEchoResponse* icresp = dynamic_cast<IClientEchoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onEchoComplete(icresp, response->queryState());
				else
					eventSink->onEchoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "GetESDLBinding")==0)
		{
			IClientGetESDLBindingResponse* icresp = dynamic_cast<IClientGetESDLBindingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onGetESDLBindingComplete(icresp, response->queryState());
				else
					eventSink->onGetESDLBindingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "GetESDLDefinition")==0)
		{
			IClientGetESDLDefinitionResponse* icresp = dynamic_cast<IClientGetESDLDefinitionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onGetESDLDefinitionComplete(icresp, response->queryState());
				else
					eventSink->onGetESDLDefinitionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "ListDESDLEspBindings")==0)
		{
			IClientListDESDLEspBindingsResp* icresp = dynamic_cast<IClientListDESDLEspBindingsResp*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onListDESDLEspBindingsComplete(icresp, response->queryState());
				else
					eventSink->onListDESDLEspBindingsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "ListESDLBindings")==0)
		{
			IClientListESDLBindingsResponse* icresp = dynamic_cast<IClientListESDLBindingsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onListESDLBindingsComplete(icresp, response->queryState());
				else
					eventSink->onListESDLBindingsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "ListESDLDefinitions")==0)
		{
			IClientListESDLDefinitionsResponse* icresp = dynamic_cast<IClientListESDLDefinitionsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onListESDLDefinitionsComplete(icresp, response->queryState());
				else
					eventSink->onListESDLDefinitionsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "Ping")==0)
		{
			IClientWsESDLConfigPingResponse* icresp = dynamic_cast<IClientWsESDLConfigPingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onPingComplete(icresp, response->queryState());
				else
					eventSink->onPingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "PublishESDLBinding")==0)
		{
			IClientPublishESDLBindingResponse* icresp = dynamic_cast<IClientPublishESDLBindingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onPublishESDLBindingComplete(icresp, response->queryState());
				else
					eventSink->onPublishESDLBindingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "PublishESDLDefinition")==0)
		{
			IClientPublishESDLDefinitionResponse* icresp = dynamic_cast<IClientPublishESDLDefinitionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onPublishESDLDefinitionComplete(icresp, response->queryState());
				else
					eventSink->onPublishESDLDefinitionError(icresp,response->queryState());
			}
		}
		response->unlock();
	}
	return 0;
}

static IRpcResponseBinding* createWsESDLConfigResponseObject(IRpcRequestBinding *request)
{
	const char* method = request->getMethod();
	if (stricmp(method, "ConfigureESDLBindingLogTransform")==0)
		return new CConfigureESDLBindingLogTransformResponse("WsESDLConfig", request);
	if (stricmp(method, "ConfigureESDLBindingMethod")==0)
		return new CConfigureESDLBindingMethodResponse("WsESDLConfig", request);
	if (stricmp(method, "DeleteESDLBinding")==0)
		return new CDeleteESDLRegistryEntryResponse("WsESDLConfig", request);
	if (stricmp(method, "DeleteESDLDefinition")==0)
		return new CDeleteESDLRegistryEntryResponse("WsESDLConfig", request);
	if (stricmp(method, "Echo")==0)
		return new CEchoResponse("WsESDLConfig", request);
	if (stricmp(method, "GetESDLBinding")==0)
		return new CGetESDLBindingResponse("WsESDLConfig", request);
	if (stricmp(method, "GetESDLDefinition")==0)
		return new CGetESDLDefinitionResponse("WsESDLConfig", request);
	if (stricmp(method, "ListDESDLEspBindings")==0)
		return new CListDESDLEspBindingsResp("WsESDLConfig", request);
	if (stricmp(method, "ListESDLBindings")==0)
		return new CListESDLBindingsResponse("WsESDLConfig", request);
	if (stricmp(method, "ListESDLDefinitions")==0)
		return new CListESDLDefinitionsResponse("WsESDLConfig", request);
	if (stricmp(method, "Ping")==0)
		return new CWsESDLConfigPingResponse("WsESDLConfig", request);
	if (stricmp(method, "PublishESDLBinding")==0)
		return new CPublishESDLBindingResponse("WsESDLConfig", request);
	if (stricmp(method, "PublishESDLDefinition")==0)
		return new CPublishESDLDefinitionResponse("WsESDLConfig", request);
	return NULL;
}

#ifdef _WIN32
void CClientWsESDLConfig::espWorkerThread(void* data)
#else
void *CClientWsESDLConfig::espWorkerThread(void *data)
#endif
{
	IRpcRequestBinding *request = (IRpcRequestBinding *) data;

	if (request != NULL)
	{
		request->lock();
		IRpcResponseBinding *response=createWsESDLConfigResponseObject(request);
		if (response!=NULL)
		{
			try{
				request->post(*response);
			}
			catch(IException* ex){
				StringBuffer errorStr;
				ex->errorMessage(errorStr);
				ERRLOG("CClientWsESDLConfig::espWorkerThread(%s)--Exception caught while posting async request: %s", request->getMethod(), errorStr.str());
				ex->Release();
			}
			catch(...){
				ERRLOG("Unknown exception caught while posting async request");
			}
		}
#ifdef USE_CLIENT_THREAD
		ThunkToClientThread(request->getThunkHandle(), transferThunkEvent, (void *)response);
#else
		transferThunkEvent((void *)response);
#endif
		request->unlock();
		if(request->queryState()!=NULL)
			request->queryState()->Release();

		if(response!=NULL)
			response->Release();

		request->Release();
	}
#if defined(_WIN32)
#else
	return (void *) 0 ;
#endif
}



extern "C" IClientWsESDLConfig * createWsESDLConfigClient() {  return new CClientWsESDLConfig(); }


#endif //ws_esdlconfig_ESPGEN_INCLUDED
