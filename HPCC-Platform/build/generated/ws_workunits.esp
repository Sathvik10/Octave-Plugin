// *** Source file generated by HIDL Version 1.3 from ws_workunits.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_workunits_ESPGEN_INCLUDED
#define ws_workunits_ESPGEN_INCLUDED

#include "ws_workunits_esp.ipp"

#ifdef _WIN32
#include "edwin.h"
#include <process.h>
#endif



//=======================================================
// class CECLException Implementation
//=======================================================

CECLException::CECLException(const char *serviceName, IRpcMessageBinding *init)
	: m_Source(nilRemove),m_Severity(nilRemove),m_Code(nilRemove),m_Message(nilRemove),m_FileName(nilRemove),m_LineNo(nilRemove),m_Column(nilRemove),m_Activity(nilRemove),m_Scope(nilRemove),m_Priority(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLException");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLException::CECLException(const char *serviceName, const char *bc)
	: m_Source(nilRemove),m_Severity(nilRemove),m_Code(nilRemove),m_Message(nilRemove),m_FileName(nilRemove),m_LineNo(nilRemove),m_Column(nilRemove),m_Activity(nilRemove),m_Scope(nilRemove),m_Priority(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLException");
}

StringBuffer &CECLException::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Source\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Severity\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Code\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Message\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LineNo\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Column\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("ECLException","Activity")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Activity\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLException","Scope")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Scope\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLException","Priority")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLException::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLException::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLException","Activity",1.63);
	info.addMinVersion("ECLException","Scope",1.69);
	info.addMinVersion("ECLException","Priority",1.69);
}

StringBuffer &CECLException::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Source");
	form.appendf("  <tr><td><b>Source: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Severity");
	form.appendf("  <tr><td><b>Severity: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Code");
	form.appendf("  <tr><td><b>Code: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Message");
	form.appendf("  <tr><td><b>Message: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("LineNo");
	form.appendf("  <tr><td><b>LineNo: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Column");
	form.appendf("  <tr><td><b>Column: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLException","Activity")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("Activity");
		form.appendf("  <tr><td><b>Activity: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLException","Scope")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Scope");
		form.appendf("  <tr><td><b>Scope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLException","Priority")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("Priority");
		form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLException::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLException::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Source.marshall(rpc_resp, "Source", "", "", "");
	m_Severity.marshall(rpc_resp, "Severity", "", "", "");
	m_Code.marshall(rpc_resp, "Code", "", "", "");
	m_Message.marshall(rpc_resp, "Message", "", "", "");
	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	m_LineNo.marshall(rpc_resp, "LineNo", "", "", "");
	m_Column.marshall(rpc_resp, "Column", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.63))
		m_Activity.marshall(rpc_resp, "Activity", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Scope.marshall(rpc_resp, "Scope", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Priority.marshall(rpc_resp, "Priority", "", "", "");
}


void CECLException::copy(CECLException &from)
{
	m_Source.copy(from.m_Source);
	m_Severity.copy(from.m_Severity);
	m_Code.copy(from.m_Code);
	m_Message.copy(from.m_Message);
	m_FileName.copy(from.m_FileName);
	m_LineNo.copy(from.m_LineNo);
	m_Column.copy(from.m_Column);
	m_Activity.copy(from.m_Activity);
	m_Scope.copy(from.m_Scope);
	m_Priority.copy(from.m_Priority);
}


void CECLException::copy(IConstECLException &ifrom)
{
	setSource(ifrom.getSource());
	setSeverity(ifrom.getSeverity());
	setCode(ifrom.getCode());
	setMessage(ifrom.getMessage());
	setFileName(ifrom.getFileName());
	setLineNo(ifrom.getLineNo());
	setColumn(ifrom.getColumn());
	setActivity(ifrom.getActivity());
	setScope(ifrom.getScope());
	setPriority(ifrom.getPriority());
}


void CECLException::getAttributes(IProperties &attributes)
{
}


void CECLException::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Source.toStr(ctx, buffer, "Source", "", true, "", "");
	m_Severity.toStr(ctx, buffer, "Severity", "", true, "", "");
	m_Code.toStr(ctx, buffer, "Code", "", true, "", "");
	m_Message.toStr(ctx, buffer, "Message", "", true, "", "");
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	m_LineNo.toStr(ctx, buffer, "LineNo", "", true, "", "");
	m_Column.toStr(ctx, buffer, "Column", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.63))
		m_Activity.toStr(ctx, buffer, "Activity", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Scope.toStr(ctx, buffer, "Scope", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
}


void CECLException::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLException::serializer(IEspContext* ctx, IConstECLException &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLException>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Source
	{
		const char* s = src.getSource();
		if (s && *s)
		{
			buffer.append("<Source>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Source>");
		}
	}
	// field Severity
	{
		const char* s = src.getSeverity();
		if (s && *s)
		{
			buffer.append("<Severity>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Severity>");
		}
	}
	// field Code
	{
		int n = src.getCode();
		if (n)
			buffer.appendf("<Code>%d</Code>", n);
	}
	// field Message
	{
		const char* s = src.getMessage();
		if (s && *s)
		{
			buffer.append("<Message>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Message>");
		}
	}
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field LineNo
	{
		int n = src.getLineNo();
		if (n)
			buffer.appendf("<LineNo>%d</LineNo>", n);
	}
	// field Column
	{
		int n = src.getColumn();
		if (n)
			buffer.appendf("<Column>%d</Column>", n);
	}
	// field Activity
	if ((clientVer==-1.0 || clientVer>=1.63))
	{
		int n = src.getActivity();
		if (n)
			buffer.appendf("<Activity>%d</Activity>", n);
	}
	// field Scope
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		const char* s = src.getScope();
		if (s && *s)
		{
			buffer.append("<Scope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Scope>");
		}
	}
	// field Priority
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		int n = src.getPriority();
		if (n)
			buffer.appendf("<Priority>%d</Priority>", n);
	}
	if (keepRootTag)
		buffer.append("</ECLException>");
}

bool CECLException::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(rpc_request, "Source", basepath);
	hasValue |= m_Severity.unmarshall(rpc_request, "Severity", basepath);
	hasValue |= m_Code.unmarshall(rpc_request, "Code", basepath);
	hasValue |= m_Message.unmarshall(rpc_request, "Message", basepath);
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_LineNo.unmarshall(rpc_request, "LineNo", basepath);
	hasValue |= m_Column.unmarshall(rpc_request, "Column", basepath);
	hasValue |= m_Activity.unmarshall(rpc_request, "Activity", basepath);
	hasValue |= m_Scope.unmarshall(rpc_request, "Scope", basepath);
	hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
	return hasValue;
}

bool CECLException::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(ctx, soapval, "Source");
	hasValue |= m_Severity.unmarshall(ctx, soapval, "Severity");
	hasValue |= m_Code.unmarshall(ctx, soapval, "Code");
	hasValue |= m_Message.unmarshall(ctx, soapval, "Message");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_LineNo.unmarshall(ctx, soapval, "LineNo");
	hasValue |= m_Column.unmarshall(ctx, soapval, "Column");
	hasValue |= m_Activity.unmarshall(ctx, soapval, "Activity");
	hasValue |= m_Scope.unmarshall(ctx, soapval, "Scope");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	return hasValue;
}

bool CECLException::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(ctx, params, attachments, "Source", basepath);
	hasValue |= m_Severity.unmarshall(ctx, params, attachments, "Severity", basepath);
	hasValue |= m_Code.unmarshall(ctx, params, attachments, "Code", basepath);
	hasValue |= m_Message.unmarshall(ctx, params, attachments, "Message", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_LineNo.unmarshall(ctx, params, attachments, "LineNo", basepath);
	hasValue |= m_Column.unmarshall(ctx, params, attachments, "Column", basepath);
	hasValue |= m_Activity.unmarshall(ctx, params, attachments, "Activity", basepath);
	hasValue |= m_Scope.unmarshall(ctx, params, attachments, "Scope", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	return hasValue;
}

const char * CECLException::getSource() { return m_Source.query();}
const char * CECLException::getSeverity() { return m_Severity.query();}
bool CECLException::getCode_isNull(){return m_Code.is_nil();}
int CECLException::getCode() { return m_Code;}
const char * CECLException::getMessage() { return m_Message.query();}
const char * CECLException::getFileName() { return m_FileName.query();}
bool CECLException::getLineNo_isNull(){return m_LineNo.is_nil();}
int CECLException::getLineNo() { return m_LineNo;}
bool CECLException::getColumn_isNull(){return m_Column.is_nil();}
int CECLException::getColumn() { return m_Column;}
bool CECLException::getActivity_isNull(){return m_Activity.is_nil();}
int CECLException::getActivity() { return m_Activity;}
const char * CECLException::getScope() { return m_Scope.query();}
bool CECLException::getPriority_isNull(){return m_Priority.is_nil();}
int CECLException::getPriority() { return m_Priority;}
void CECLException::setSource(const char * val){ m_Source.set(val); }
void CECLException::setSeverity(const char * val){ m_Severity.set(val); }
void CECLException::setCode_null(){ m_Code.Nil(); }void CECLException::setCode(int val){ m_Code=val; }
void CECLException::setMessage(const char * val){ m_Message.set(val); }
void CECLException::setFileName(const char * val){ m_FileName.set(val); }
void CECLException::setLineNo_null(){ m_LineNo.Nil(); }void CECLException::setLineNo(int val){ m_LineNo=val; }
void CECLException::setColumn_null(){ m_Column.Nil(); }void CECLException::setColumn(int val){ m_Column=val; }
void CECLException::setActivity_null(){ m_Activity.Nil(); }void CECLException::setActivity(int val){ m_Activity=val; }
void CECLException::setScope(const char * val){ m_Scope.set(val); }
void CECLException::setPriority_null(){ m_Priority.Nil(); }void CECLException::setPriority(int val){ m_Priority=val; }
extern "C"  IEspECLException *createECLException(const char *serv, const char *msgname){return ((IEspECLException *)new CECLException(serv /*, msgname*/));}
extern "C"  IClientECLException *createClientECLException(const char *serv, const char *msgname){return ((IClientECLException *)new CECLException(serv /*, msgname*/));}

//=======================================================
// class CECLSchemaItem Implementation
//=======================================================

CECLSchemaItem::CECLSchemaItem(const char *serviceName, IRpcMessageBinding *init)
	: m_ColumnName(nilRemove),m_ColumnType(nilRemove),m_ColumnTypeCode(nilRemove),m_isConditional(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLSchemaItem");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLSchemaItem::CECLSchemaItem(const char *serviceName, const char *bc)
	: m_ColumnName(nilRemove),m_ColumnType(nilRemove),m_ColumnTypeCode(nilRemove),m_isConditional(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLSchemaItem");
}

StringBuffer &CECLSchemaItem::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ColumnTypeCode\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"isConditional\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLSchemaItem::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLSchemaItem::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CECLSchemaItem::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ColumnName");
	form.appendf("  <tr><td><b>ColumnName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ColumnType");
	form.appendf("  <tr><td><b>ColumnType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ColumnTypeCode");
	form.appendf("  <tr><td><b>ColumnTypeCode: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("isConditional");
	
	form.appendf("  <tr><td><b>isConditional? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLSchemaItem::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLSchemaItem::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ColumnName.marshall(rpc_resp, "ColumnName", "", "", "");
	m_ColumnType.marshall(rpc_resp, "ColumnType", "", "", "");
	m_ColumnTypeCode.marshall(rpc_resp, "ColumnTypeCode", "", "", "");
	m_isConditional.marshall(rpc_resp, "isConditional", "", "", "");
}


void CECLSchemaItem::copy(CECLSchemaItem &from)
{
	m_ColumnName.copy(from.m_ColumnName);
	m_ColumnType.copy(from.m_ColumnType);
	m_ColumnTypeCode.copy(from.m_ColumnTypeCode);
	m_isConditional.copy(from.m_isConditional);
}


void CECLSchemaItem::copy(IConstECLSchemaItem &ifrom)
{
	setColumnName(ifrom.getColumnName());
	setColumnType(ifrom.getColumnType());
	setColumnTypeCode(ifrom.getColumnTypeCode());
	setIsConditional(ifrom.getIsConditional());
}


void CECLSchemaItem::getAttributes(IProperties &attributes)
{
}


void CECLSchemaItem::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ColumnName.toStr(ctx, buffer, "ColumnName", "", true, "", "");
	m_ColumnType.toStr(ctx, buffer, "ColumnType", "", true, "", "");
	m_ColumnTypeCode.toStr(ctx, buffer, "ColumnTypeCode", "", true, "", "");
	m_isConditional.toStr(ctx, buffer, "isConditional", "", true, "", "");
}


void CECLSchemaItem::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLSchemaItem::serializer(IEspContext* ctx, IConstECLSchemaItem &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLSchemaItem>");
	// field ColumnName
	{
		const char* s = src.getColumnName();
		if (s && *s)
		{
			buffer.append("<ColumnName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ColumnName>");
		}
	}
	// field ColumnType
	{
		const char* s = src.getColumnType();
		if (s && *s)
		{
			buffer.append("<ColumnType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ColumnType>");
		}
	}
	// field ColumnTypeCode
	{
		int n = src.getColumnTypeCode();
		if (n)
			buffer.appendf("<ColumnTypeCode>%d</ColumnTypeCode>", n);
	}
	// field isConditional
	{
		bool b = src.getIsConditional();
		if (b)
			buffer.appendf("<isConditional>1</isConditional>");
	}
	if (keepRootTag)
		buffer.append("</ECLSchemaItem>");
}

bool CECLSchemaItem::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ColumnName.unmarshall(rpc_request, "ColumnName", basepath);
	hasValue |= m_ColumnType.unmarshall(rpc_request, "ColumnType", basepath);
	hasValue |= m_ColumnTypeCode.unmarshall(rpc_request, "ColumnTypeCode", basepath);
	hasValue |= m_isConditional.unmarshall(rpc_request, "isConditional", basepath);
	return hasValue;
}

bool CECLSchemaItem::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ColumnName.unmarshall(ctx, soapval, "ColumnName");
	hasValue |= m_ColumnType.unmarshall(ctx, soapval, "ColumnType");
	hasValue |= m_ColumnTypeCode.unmarshall(ctx, soapval, "ColumnTypeCode");
	hasValue |= m_isConditional.unmarshall(ctx, soapval, "isConditional");
	return hasValue;
}

bool CECLSchemaItem::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ColumnName.unmarshall(ctx, params, attachments, "ColumnName", basepath);
	hasValue |= m_ColumnType.unmarshall(ctx, params, attachments, "ColumnType", basepath);
	hasValue |= m_ColumnTypeCode.unmarshall(ctx, params, attachments, "ColumnTypeCode", basepath);
	hasValue |= m_isConditional.unmarshall(ctx, params, attachments, "isConditional", basepath);
	return hasValue;
}

const char * CECLSchemaItem::getColumnName() { return m_ColumnName.query();}
const char * CECLSchemaItem::getColumnType() { return m_ColumnType.query();}
bool CECLSchemaItem::getColumnTypeCode_isNull(){return m_ColumnTypeCode.is_nil();}
int CECLSchemaItem::getColumnTypeCode() { return m_ColumnTypeCode;}
bool CECLSchemaItem::getIsConditional_isNull(){return m_isConditional.is_nil();}
bool CECLSchemaItem::getIsConditional() { return m_isConditional;}
void CECLSchemaItem::setColumnName(const char * val){ m_ColumnName.set(val); }
void CECLSchemaItem::setColumnType(const char * val){ m_ColumnType.set(val); }
void CECLSchemaItem::setColumnTypeCode_null(){ m_ColumnTypeCode.Nil(); }void CECLSchemaItem::setColumnTypeCode(int val){ m_ColumnTypeCode=val; }
void CECLSchemaItem::setIsConditional_null(){ m_isConditional.Nil(); }void CECLSchemaItem::setIsConditional(bool val){ m_isConditional=val; }
extern "C"  IEspECLSchemaItem *createECLSchemaItem(const char *serv, const char *msgname){return ((IEspECLSchemaItem *)new CECLSchemaItem(serv /*, msgname*/));}
extern "C"  IClientECLSchemaItem *createClientECLSchemaItem(const char *serv, const char *msgname){return ((IClientECLSchemaItem *)new CECLSchemaItem(serv /*, msgname*/));}

//=======================================================
// class CECLResult Implementation
//=======================================================

CECLResult::CECLResult(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Sequence(nilRemove),m_Value(nilRemove),m_Link(nilRemove),m_FileName(nilRemove),m_IsSupplied(nilRemove),m_ShowFileContent(1, nilRemove,false),m_Total(nilRemove),m_ECLSchemas(nilRemove),m_XmlSchema(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLResult");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLResult::CECLResult(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Sequence(nilRemove),m_Value(nilRemove),m_Link(nilRemove),m_FileName(nilRemove),m_IsSupplied(nilRemove),m_ShowFileContent(1, nilRemove,false),m_Total(nilRemove),m_ECLSchemas(nilRemove),m_XmlSchema(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLResult");
}

StringBuffer &CECLResult::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Value\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Link\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsSupplied\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"ShowFileContent\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Total\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECLSchemas\" type=\"tns:ArrayOfECLSchemaItem\"/>\n");
		if (!context.suppressed("ECLResult","XmlSchema")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"XmlSchema\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLSchemaItem::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLSchemaItem") && added.getValue("ArrayOfECLSchemaItem")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLSchemaItem\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLSchemaItem\" type=\"tns:ECLSchemaItem\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLSchemaItem",1);
	}
	return schema;
}

void CECLResult::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLResult::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLResult","XmlSchema",1.39);
	if (!added.getValue("ECLSchemaItem"))
	{
		added.setValue("ECLSchemaItem",1);
		CECLSchemaItem::getMapInfo(info,added);
	}
}

StringBuffer &CECLResult::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Value");
	form.appendf("  <tr><td><b>Value: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Link");
	form.appendf("  <tr><td><b>Link: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsSupplied");
	
	form.appendf("  <tr><td><b>IsSupplied? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowFileContent");
	
	form.appendf("  <tr><td><b>ShowFileContent? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Total");
	form.appendf("  <tr><td><b>Total: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECLSchemas");
	form.appendf("<tr><td><b>ECLSchemas: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("ECLResult","XmlSchema")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("XmlSchema");
		form.appendf("  <tr><td><b>XmlSchema: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLResult::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLResult::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
	m_Value.marshall(rpc_resp, "Value", "", "", "");
	m_Link.marshall(rpc_resp, "Link", "", "", "");
	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	m_IsSupplied.marshall(rpc_resp, "IsSupplied", "", "", "");
	m_ShowFileContent.marshall(rpc_resp, "ShowFileContent", "", "", "");
	m_Total.marshall(rpc_resp, "Total", "", "", "");
	m_ECLSchemas.marshall(rpc_resp, "ECLSchemas", "ECLSchemaItem");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_XmlSchema.marshall(rpc_resp, "XmlSchema", "", "", "");
}


void CECLResult::copy(CECLResult &from)
{
	m_Name.copy(from.m_Name);
	m_Sequence.copy(from.m_Sequence);
	m_Value.copy(from.m_Value);
	m_Link.copy(from.m_Link);
	m_FileName.copy(from.m_FileName);
	m_IsSupplied.copy(from.m_IsSupplied);
	m_ShowFileContent.copy(from.m_ShowFileContent);
	m_Total.copy(from.m_Total);
	m_ECLSchemas.copy(from.m_ECLSchemas);
	m_XmlSchema.copy(from.m_XmlSchema);
}


void CECLResult::copy(IConstECLResult &ifrom)
{
	setName(ifrom.getName());
	setSequence(ifrom.getSequence());
	setValue(ifrom.getValue());
	setLink(ifrom.getLink());
	setFileName(ifrom.getFileName());
	setIsSupplied(ifrom.getIsSupplied());
	setShowFileContent(ifrom.getShowFileContent());
	setTotal(ifrom.getTotal());
	setECLSchemas(ifrom.getECLSchemas());
	setXmlSchema(ifrom.getXmlSchema());
}


void CECLResult::getAttributes(IProperties &attributes)
{
}


void CECLResult::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Sequence.toStr(ctx, buffer, "Sequence", "", true, "", "");
	m_Value.toStr(ctx, buffer, "Value", "", true, "", "");
	m_Link.toStr(ctx, buffer, "Link", "", true, "", "");
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	m_IsSupplied.toStr(ctx, buffer, "IsSupplied", "", true, "", "");
	m_ShowFileContent.toStr(ctx, buffer, "ShowFileContent", "", true, "", "");
	m_Total.toStr(ctx, buffer, "Total", "", true, "", "");
	m_ECLSchemas.toStr(ctx, buffer, "ECLSchemas", "ECLSchemaItem");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_XmlSchema.toStr(ctx, buffer, "XmlSchema", "", true, "", "");
}


void CECLResult::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLResult::serializer(IEspContext* ctx, IConstECLResult &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLResult>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	// field Value
	{
		const char* s = src.getValue();
		if (s && *s)
		{
			buffer.append("<Value>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Value>");
		}
	}
	// field Link
	{
		const char* s = src.getLink();
		if (s && *s)
		{
			buffer.append("<Link>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Link>");
		}
	}
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field IsSupplied
	{
		bool b = src.getIsSupplied();
		if (b)
			buffer.appendf("<IsSupplied>1</IsSupplied>");
	}
	// field ShowFileContent
	{
		bool b = src.getShowFileContent();
		if (b)
			buffer.appendf("<ShowFileContent>1</ShowFileContent>");
	}
	// field Total
	{
		//*** default kind: TK_INT; type=int64, name=Total
		buffer.append("<Total>");
		buffer.append(src.getTotal());
		buffer.append("</Total>");
	}
	// field ECLSchemas
	{
		IArrayOf<IConstECLSchemaItem>& v = src.getECLSchemas();
		int size = v.length();
		if (size>0)
			buffer.append("<ECLSchemas>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLSchemaItem::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ECLSchemas>");
	}
	// field XmlSchema
	if ((clientVer==-1.0 || clientVer>=1.39))
	{
		const char* s = src.getXmlSchema();
		if (s && *s)
		{
			buffer.append("<XmlSchema>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XmlSchema>");
		}
	}
	if (keepRootTag)
		buffer.append("</ECLResult>");
}

bool CECLResult::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
	hasValue |= m_Value.unmarshall(rpc_request, "Value", basepath);
	hasValue |= m_Link.unmarshall(rpc_request, "Link", basepath);
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_IsSupplied.unmarshall(rpc_request, "IsSupplied", basepath);
	hasValue |= m_ShowFileContent.unmarshall(rpc_request, "ShowFileContent", basepath);
	hasValue |= m_Total.unmarshall(rpc_request, "Total", basepath);
	hasValue |= m_ECLSchemas.unmarshall(rpc_request, "ECLSchemas", basepath);
	hasValue |= m_XmlSchema.unmarshall(rpc_request, "XmlSchema", basepath);
	return hasValue;
}

bool CECLResult::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	hasValue |= m_Value.unmarshall(ctx, soapval, "Value");
	hasValue |= m_Link.unmarshall(ctx, soapval, "Link");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_IsSupplied.unmarshall(ctx, soapval, "IsSupplied");
	hasValue |= m_ShowFileContent.unmarshall(ctx, soapval, "ShowFileContent");
	hasValue |= m_Total.unmarshall(ctx, soapval, "Total");
	hasValue |= m_ECLSchemas.unmarshall(ctx, soapval, "ECLSchemas");
	hasValue |= m_XmlSchema.unmarshall(ctx, soapval, "XmlSchema");
	return hasValue;
}

bool CECLResult::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	hasValue |= m_Value.unmarshall(ctx, params, attachments, "Value", basepath);
	hasValue |= m_Link.unmarshall(ctx, params, attachments, "Link", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_IsSupplied.unmarshall(ctx, params, attachments, "IsSupplied", basepath);
	hasValue |= m_ShowFileContent.unmarshall(ctx, params, attachments, "ShowFileContent", basepath);
	hasValue |= m_Total.unmarshall(ctx, params, attachments, "Total", basepath);
	hasValue |= m_ECLSchemas.unmarshall(ctx, params, attachments, "ECLSchemas", basepath);
	hasValue |= m_XmlSchema.unmarshall(ctx, params, attachments, "XmlSchema", basepath);
	return hasValue;
}

const char * CECLResult::getName() { return m_Name.query();}
bool CECLResult::getSequence_isNull(){return m_Sequence.is_nil();}
int CECLResult::getSequence() { return m_Sequence;}
const char * CECLResult::getValue() { return m_Value.query();}
const char * CECLResult::getLink() { return m_Link.query();}
const char * CECLResult::getFileName() { return m_FileName.query();}
bool CECLResult::getIsSupplied_isNull(){return m_IsSupplied.is_nil();}
bool CECLResult::getIsSupplied() { return m_IsSupplied;}
bool CECLResult::getShowFileContent_isNull(){return m_ShowFileContent.is_nil();}
bool CECLResult::getShowFileContent() { return m_ShowFileContent;}
bool CECLResult::getTotal_isNull(){return m_Total.is_nil();}
__int64 CECLResult::getTotal() { return m_Total;}
IArrayOf<IConstECLSchemaItem> & CECLResult::getECLSchemas() { return (IArrayOf<IConstECLSchemaItem> &) m_ECLSchemas; }
const char * CECLResult::getXmlSchema() { return m_XmlSchema.query();}
void CECLResult::setName(const char * val){ m_Name.set(val); }
void CECLResult::setSequence_null(){ m_Sequence.Nil(); }void CECLResult::setSequence(int val){ m_Sequence=val; }
void CECLResult::setValue(const char * val){ m_Value.set(val); }
void CECLResult::setLink(const char * val){ m_Link.set(val); }
void CECLResult::setFileName(const char * val){ m_FileName.set(val); }
void CECLResult::setIsSupplied_null(){ m_IsSupplied.Nil(); }void CECLResult::setIsSupplied(bool val){ m_IsSupplied=val; }
void CECLResult::setShowFileContent_null(){ m_ShowFileContent.Nil(); }void CECLResult::setShowFileContent(bool val){ m_ShowFileContent=val; }
void CECLResult::setTotal_null(){ m_Total.Nil(); }void CECLResult::setTotal(__int64 val){ m_Total=val; }
void CECLResult::setECLSchemas(IArrayOf<IEspECLSchemaItem> &val)
{
	m_ECLSchemas->kill();
	IArrayOf<IConstECLSchemaItem> &target = m_ECLSchemas.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLSchemaItem &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLResult::setECLSchemas(IArrayOf<IConstECLSchemaItem> &val)
{
	m_ECLSchemas->kill();
	IArrayOf<IConstECLSchemaItem> &target = m_ECLSchemas.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLSchemaItem &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLResult::setXmlSchema(const char * val){ m_XmlSchema.set(val); }
extern "C"  IEspECLResult *createECLResult(const char *serv, const char *msgname){return ((IEspECLResult *)new CECLResult(serv /*, msgname*/));}
extern "C"  IClientECLResult *createClientECLResult(const char *serv, const char *msgname){return ((IClientECLResult *)new CECLResult(serv /*, msgname*/));}

//=======================================================
// class CECLTimingData Implementation
//=======================================================

CECLTimingData::CECLTimingData(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_GraphNum(nilRemove),m_SubGraphNum(nilRemove),m_GID(nilRemove),m_Min(nilRemove),m_MS(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLTimingData");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLTimingData::CECLTimingData(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_GraphNum(nilRemove),m_SubGraphNum(nilRemove),m_GID(nilRemove),m_Min(nilRemove),m_MS(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLTimingData");
}

StringBuffer &CECLTimingData::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"GraphNum\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphNum\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"GID\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Min\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MS\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLTimingData::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLTimingData::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CECLTimingData::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("GraphNum");
	form.appendf("  <tr><td><b>GraphNum: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("SubGraphNum");
	form.appendf("  <tr><td><b>SubGraphNum: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("GID");
	form.appendf("  <tr><td><b>GID: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Min");
	form.appendf("  <tr><td><b>Min: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MS");
	form.appendf("  <tr><td><b>MS: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLTimingData::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLTimingData::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_GraphNum.marshall(rpc_resp, "GraphNum", "", "", "");
	m_SubGraphNum.marshall(rpc_resp, "SubGraphNum", "", "", "");
	m_GID.marshall(rpc_resp, "GID", "", "", "");
	m_Min.marshall(rpc_resp, "Min", "", "", "");
	m_MS.marshall(rpc_resp, "MS", "", "", "");
}


void CECLTimingData::copy(CECLTimingData &from)
{
	m_Name.copy(from.m_Name);
	m_GraphNum.copy(from.m_GraphNum);
	m_SubGraphNum.copy(from.m_SubGraphNum);
	m_GID.copy(from.m_GID);
	m_Min.copy(from.m_Min);
	m_MS.copy(from.m_MS);
}


void CECLTimingData::copy(IConstECLTimingData &ifrom)
{
	setName(ifrom.getName());
	setGraphNum(ifrom.getGraphNum());
	setSubGraphNum(ifrom.getSubGraphNum());
	setGID(ifrom.getGID());
	setMin(ifrom.getMin());
	setMS(ifrom.getMS());
}


void CECLTimingData::getAttributes(IProperties &attributes)
{
}


void CECLTimingData::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_GraphNum.toStr(ctx, buffer, "GraphNum", "", true, "", "");
	m_SubGraphNum.toStr(ctx, buffer, "SubGraphNum", "", true, "", "");
	m_GID.toStr(ctx, buffer, "GID", "", true, "", "");
	m_Min.toStr(ctx, buffer, "Min", "", true, "", "");
	m_MS.toStr(ctx, buffer, "MS", "", true, "", "");
}


void CECLTimingData::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLTimingData::serializer(IEspContext* ctx, IConstECLTimingData &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLTimingData>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field GraphNum
	{
		int n = src.getGraphNum();
		if (n)
			buffer.appendf("<GraphNum>%d</GraphNum>", n);
	}
	// field SubGraphNum
	{
		int n = src.getSubGraphNum();
		if (n)
			buffer.appendf("<SubGraphNum>%d</SubGraphNum>", n);
	}
	// field GID
	{
		int n = src.getGID();
		if (n)
			buffer.appendf("<GID>%d</GID>", n);
	}
	// field Min
	{
		int n = src.getMin();
		if (n)
			buffer.appendf("<Min>%d</Min>", n);
	}
	// field MS
	{
		int n = src.getMS();
		if (n)
			buffer.appendf("<MS>%d</MS>", n);
	}
	if (keepRootTag)
		buffer.append("</ECLTimingData>");
}

bool CECLTimingData::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_GraphNum.unmarshall(rpc_request, "GraphNum", basepath);
	hasValue |= m_SubGraphNum.unmarshall(rpc_request, "SubGraphNum", basepath);
	hasValue |= m_GID.unmarshall(rpc_request, "GID", basepath);
	hasValue |= m_Min.unmarshall(rpc_request, "Min", basepath);
	hasValue |= m_MS.unmarshall(rpc_request, "MS", basepath);
	return hasValue;
}

bool CECLTimingData::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_GraphNum.unmarshall(ctx, soapval, "GraphNum");
	hasValue |= m_SubGraphNum.unmarshall(ctx, soapval, "SubGraphNum");
	hasValue |= m_GID.unmarshall(ctx, soapval, "GID");
	hasValue |= m_Min.unmarshall(ctx, soapval, "Min");
	hasValue |= m_MS.unmarshall(ctx, soapval, "MS");
	return hasValue;
}

bool CECLTimingData::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_GraphNum.unmarshall(ctx, params, attachments, "GraphNum", basepath);
	hasValue |= m_SubGraphNum.unmarshall(ctx, params, attachments, "SubGraphNum", basepath);
	hasValue |= m_GID.unmarshall(ctx, params, attachments, "GID", basepath);
	hasValue |= m_Min.unmarshall(ctx, params, attachments, "Min", basepath);
	hasValue |= m_MS.unmarshall(ctx, params, attachments, "MS", basepath);
	return hasValue;
}

const char * CECLTimingData::getName() { return m_Name.query();}
bool CECLTimingData::getGraphNum_isNull(){return m_GraphNum.is_nil();}
int CECLTimingData::getGraphNum() { return m_GraphNum;}
bool CECLTimingData::getSubGraphNum_isNull(){return m_SubGraphNum.is_nil();}
int CECLTimingData::getSubGraphNum() { return m_SubGraphNum;}
bool CECLTimingData::getGID_isNull(){return m_GID.is_nil();}
int CECLTimingData::getGID() { return m_GID;}
bool CECLTimingData::getMin_isNull(){return m_Min.is_nil();}
int CECLTimingData::getMin() { return m_Min;}
bool CECLTimingData::getMS_isNull(){return m_MS.is_nil();}
int CECLTimingData::getMS() { return m_MS;}
void CECLTimingData::setName(const char * val){ m_Name.set(val); }
void CECLTimingData::setGraphNum_null(){ m_GraphNum.Nil(); }void CECLTimingData::setGraphNum(int val){ m_GraphNum=val; }
void CECLTimingData::setSubGraphNum_null(){ m_SubGraphNum.Nil(); }void CECLTimingData::setSubGraphNum(int val){ m_SubGraphNum=val; }
void CECLTimingData::setGID_null(){ m_GID.Nil(); }void CECLTimingData::setGID(int val){ m_GID=val; }
void CECLTimingData::setMin_null(){ m_Min.Nil(); }void CECLTimingData::setMin(int val){ m_Min=val; }
void CECLTimingData::setMS_null(){ m_MS.Nil(); }void CECLTimingData::setMS(int val){ m_MS=val; }
extern "C"  IEspECLTimingData *createECLTimingData(const char *serv, const char *msgname){return ((IEspECLTimingData *)new CECLTimingData(serv /*, msgname*/));}
extern "C"  IClientECLTimingData *createClientECLTimingData(const char *serv, const char *msgname){return ((IClientECLTimingData *)new CECLTimingData(serv /*, msgname*/));}

//=======================================================
// class CECLGraph Implementation
//=======================================================

CECLGraph::CECLGraph(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Label(nilRemove),m_Type(nilRemove),m_Running(nilRemove),m_Complete(nilRemove),m_Failed(nilRemove),m_RunningId(nilRemove),m_WhenStarted(nilRemove),m_WhenFinished(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLGraph");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLGraph::CECLGraph(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Label(nilRemove),m_Type(nilRemove),m_Running(nilRemove),m_Complete(nilRemove),m_Failed(nilRemove),m_RunningId(nilRemove),m_WhenStarted(nilRemove),m_WhenFinished(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLGraph");
}

StringBuffer &CECLGraph::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Label\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Running\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("ECLGraph","Complete")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Complete\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLGraph","Failed")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Failed\" type=\"xsd:boolean\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"RunningId\" type=\"xsd:long\"/>\n");
		if (!context.suppressed("ECLGraph","WhenStarted")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WhenStarted\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLGraph","WhenFinished")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WhenFinished\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLGraph::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLGraph::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLGraph","Complete",1.09);
	info.addMinVersion("ECLGraph","Failed",1.14);
	info.addMinVersion("ECLGraph","WhenStarted",1.53);
	info.addMinVersion("ECLGraph","WhenFinished",1.53);
}

StringBuffer &CECLGraph::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Label");
	form.appendf("  <tr><td><b>Label: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Running");
	
	form.appendf("  <tr><td><b>Running? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("ECLGraph","Complete")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Complete");
		
	form.appendf("  <tr><td><b>Complete? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLGraph","Failed")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Failed");
		
	form.appendf("  <tr><td><b>Failed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RunningId");
	form.appendf("  <tr><td><b>RunningId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLGraph","WhenStarted")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WhenStarted");
		form.appendf("  <tr><td><b>WhenStarted: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLGraph","WhenFinished")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WhenFinished");
		form.appendf("  <tr><td><b>WhenFinished: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLGraph::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLGraph::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Label.marshall(rpc_resp, "Label", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Running.marshall(rpc_resp, "Running", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.09))
		m_Complete.marshall(rpc_resp, "Complete", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.14))
		m_Failed.marshall(rpc_resp, "Failed", "", "", "");
	m_RunningId.marshall(rpc_resp, "RunningId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.53))
		m_WhenStarted.marshall(rpc_resp, "WhenStarted", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.53))
		m_WhenFinished.marshall(rpc_resp, "WhenFinished", "", "", "");
}


void CECLGraph::copy(CECLGraph &from)
{
	m_Name.copy(from.m_Name);
	m_Label.copy(from.m_Label);
	m_Type.copy(from.m_Type);
	m_Running.copy(from.m_Running);
	m_Complete.copy(from.m_Complete);
	m_Failed.copy(from.m_Failed);
	m_RunningId.copy(from.m_RunningId);
	m_WhenStarted.copy(from.m_WhenStarted);
	m_WhenFinished.copy(from.m_WhenFinished);
}


void CECLGraph::copy(IConstECLGraph &ifrom)
{
	setName(ifrom.getName());
	setLabel(ifrom.getLabel());
	setType(ifrom.getType());
	setRunning(ifrom.getRunning());
	setComplete(ifrom.getComplete());
	setFailed(ifrom.getFailed());
	setRunningId(ifrom.getRunningId());
	setWhenStarted(ifrom.getWhenStarted());
	setWhenFinished(ifrom.getWhenFinished());
}


void CECLGraph::getAttributes(IProperties &attributes)
{
}


void CECLGraph::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Label.toStr(ctx, buffer, "Label", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Running.toStr(ctx, buffer, "Running", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.09))
		m_Complete.toStr(ctx, buffer, "Complete", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.14))
		m_Failed.toStr(ctx, buffer, "Failed", "", true, "", "");
	m_RunningId.toStr(ctx, buffer, "RunningId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.53))
		m_WhenStarted.toStr(ctx, buffer, "WhenStarted", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.53))
		m_WhenFinished.toStr(ctx, buffer, "WhenFinished", "", true, "", "");
}


void CECLGraph::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLGraph::serializer(IEspContext* ctx, IConstECLGraph &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLGraph>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Label
	{
		const char* s = src.getLabel();
		if (s && *s)
		{
			buffer.append("<Label>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Label>");
		}
	}
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Running
	{
		bool b = src.getRunning();
		if (b)
			buffer.appendf("<Running>1</Running>");
	}
	// field Complete
	if ((clientVer==-1.0 || clientVer>=1.09))
	{
		bool b = src.getComplete();
		if (b)
			buffer.appendf("<Complete>1</Complete>");
	}
	// field Failed
	if ((clientVer==-1.0 || clientVer>=1.14))
	{
		bool b = src.getFailed();
		if (b)
			buffer.appendf("<Failed>1</Failed>");
	}
	// field RunningId
	{
		//*** default kind: TK_INT; type=int64, name=RunningId
		buffer.append("<RunningId>");
		buffer.append(src.getRunningId());
		buffer.append("</RunningId>");
	}
	// field WhenStarted
	if ((clientVer==-1.0 || clientVer>=1.53))
	{
		const char* s = src.getWhenStarted();
		if (s && *s)
		{
			buffer.append("<WhenStarted>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WhenStarted>");
		}
	}
	// field WhenFinished
	if ((clientVer==-1.0 || clientVer>=1.53))
	{
		const char* s = src.getWhenFinished();
		if (s && *s)
		{
			buffer.append("<WhenFinished>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WhenFinished>");
		}
	}
	if (keepRootTag)
		buffer.append("</ECLGraph>");
}

bool CECLGraph::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Label.unmarshall(rpc_request, "Label", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Running.unmarshall(rpc_request, "Running", basepath);
	hasValue |= m_Complete.unmarshall(rpc_request, "Complete", basepath);
	hasValue |= m_Failed.unmarshall(rpc_request, "Failed", basepath);
	hasValue |= m_RunningId.unmarshall(rpc_request, "RunningId", basepath);
	hasValue |= m_WhenStarted.unmarshall(rpc_request, "WhenStarted", basepath);
	hasValue |= m_WhenFinished.unmarshall(rpc_request, "WhenFinished", basepath);
	return hasValue;
}

bool CECLGraph::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Label.unmarshall(ctx, soapval, "Label");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Running.unmarshall(ctx, soapval, "Running");
	hasValue |= m_Complete.unmarshall(ctx, soapval, "Complete");
	hasValue |= m_Failed.unmarshall(ctx, soapval, "Failed");
	hasValue |= m_RunningId.unmarshall(ctx, soapval, "RunningId");
	hasValue |= m_WhenStarted.unmarshall(ctx, soapval, "WhenStarted");
	hasValue |= m_WhenFinished.unmarshall(ctx, soapval, "WhenFinished");
	return hasValue;
}

bool CECLGraph::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Label.unmarshall(ctx, params, attachments, "Label", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Running.unmarshall(ctx, params, attachments, "Running", basepath);
	hasValue |= m_Complete.unmarshall(ctx, params, attachments, "Complete", basepath);
	hasValue |= m_Failed.unmarshall(ctx, params, attachments, "Failed", basepath);
	hasValue |= m_RunningId.unmarshall(ctx, params, attachments, "RunningId", basepath);
	hasValue |= m_WhenStarted.unmarshall(ctx, params, attachments, "WhenStarted", basepath);
	hasValue |= m_WhenFinished.unmarshall(ctx, params, attachments, "WhenFinished", basepath);
	return hasValue;
}

const char * CECLGraph::getName() { return m_Name.query();}
const char * CECLGraph::getLabel() { return m_Label.query();}
const char * CECLGraph::getType() { return m_Type.query();}
bool CECLGraph::getRunning_isNull(){return m_Running.is_nil();}
bool CECLGraph::getRunning() { return m_Running;}
bool CECLGraph::getComplete_isNull(){return m_Complete.is_nil();}
bool CECLGraph::getComplete() { return m_Complete;}
bool CECLGraph::getFailed_isNull(){return m_Failed.is_nil();}
bool CECLGraph::getFailed() { return m_Failed;}
bool CECLGraph::getRunningId_isNull(){return m_RunningId.is_nil();}
__int64 CECLGraph::getRunningId() { return m_RunningId;}
const char * CECLGraph::getWhenStarted() { return m_WhenStarted.query();}
const char * CECLGraph::getWhenFinished() { return m_WhenFinished.query();}
void CECLGraph::setName(const char * val){ m_Name.set(val); }
void CECLGraph::setLabel(const char * val){ m_Label.set(val); }
void CECLGraph::setType(const char * val){ m_Type.set(val); }
void CECLGraph::setRunning_null(){ m_Running.Nil(); }void CECLGraph::setRunning(bool val){ m_Running=val; }
void CECLGraph::setComplete_null(){ m_Complete.Nil(); }void CECLGraph::setComplete(bool val){ m_Complete=val; }
void CECLGraph::setFailed_null(){ m_Failed.Nil(); }void CECLGraph::setFailed(bool val){ m_Failed=val; }
void CECLGraph::setRunningId_null(){ m_RunningId.Nil(); }void CECLGraph::setRunningId(__int64 val){ m_RunningId=val; }
void CECLGraph::setWhenStarted(const char * val){ m_WhenStarted.set(val); }
void CECLGraph::setWhenFinished(const char * val){ m_WhenFinished.set(val); }
extern "C"  IEspECLGraph *createECLGraph(const char *serv, const char *msgname){return ((IEspECLGraph *)new CECLGraph(serv /*, msgname*/));}
extern "C"  IClientECLGraph *createClientECLGraph(const char *serv, const char *msgname){return ((IClientECLGraph *)new CECLGraph(serv /*, msgname*/));}

//=======================================================
// class CECLGraphEx Implementation
//=======================================================

CECLGraphEx::CECLGraphEx(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Label(nilRemove),m_Type(nilRemove),m_Graph(nilRemove),m_Running(nilRemove),m_RunningId(nilRemove),m_Complete(nilRemove),m_Failed(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLGraphEx");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLGraphEx::CECLGraphEx(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Label(nilRemove),m_Type(nilRemove),m_Graph(nilRemove),m_Running(nilRemove),m_RunningId(nilRemove),m_Complete(nilRemove),m_Failed(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLGraphEx");
}

StringBuffer &CECLGraphEx::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Label\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Graph\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Running\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RunningId\" type=\"xsd:long\"/>\n");
		if (!context.suppressed("ECLGraphEx","Complete")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Complete\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLGraphEx","Failed")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Failed\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLGraphEx::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLGraphEx::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLGraphEx","Complete",1.21);
	info.addMinVersion("ECLGraphEx","Failed",1.21);
}

StringBuffer &CECLGraphEx::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Label");
	form.appendf("  <tr><td><b>Label: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Graph");
	form.appendf("  <tr><td><b>Graph: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Running");
	
	form.appendf("  <tr><td><b>Running? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RunningId");
	form.appendf("  <tr><td><b>RunningId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLGraphEx","Complete")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Complete");
		
	form.appendf("  <tr><td><b>Complete? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLGraphEx","Failed")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Failed");
		
	form.appendf("  <tr><td><b>Failed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLGraphEx::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLGraphEx::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Label.marshall(rpc_resp, "Label", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Graph.marshall(rpc_resp, "Graph", "", "", "");
	m_Running.marshall(rpc_resp, "Running", "", "", "");
	m_RunningId.marshall(rpc_resp, "RunningId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_Complete.marshall(rpc_resp, "Complete", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_Failed.marshall(rpc_resp, "Failed", "", "", "");
}


void CECLGraphEx::copy(CECLGraphEx &from)
{
	m_Name.copy(from.m_Name);
	m_Label.copy(from.m_Label);
	m_Type.copy(from.m_Type);
	m_Graph.copy(from.m_Graph);
	m_Running.copy(from.m_Running);
	m_RunningId.copy(from.m_RunningId);
	m_Complete.copy(from.m_Complete);
	m_Failed.copy(from.m_Failed);
}


void CECLGraphEx::copy(IConstECLGraphEx &ifrom)
{
	setName(ifrom.getName());
	setLabel(ifrom.getLabel());
	setType(ifrom.getType());
	setGraph(ifrom.getGraph());
	setRunning(ifrom.getRunning());
	setRunningId(ifrom.getRunningId());
	setComplete(ifrom.getComplete());
	setFailed(ifrom.getFailed());
}


void CECLGraphEx::getAttributes(IProperties &attributes)
{
}


void CECLGraphEx::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Label.toStr(ctx, buffer, "Label", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Graph.toStr(ctx, buffer, "Graph", "", true, "", "");
	m_Running.toStr(ctx, buffer, "Running", "", true, "", "");
	m_RunningId.toStr(ctx, buffer, "RunningId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_Complete.toStr(ctx, buffer, "Complete", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_Failed.toStr(ctx, buffer, "Failed", "", true, "", "");
}


void CECLGraphEx::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLGraphEx::serializer(IEspContext* ctx, IConstECLGraphEx &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLGraphEx>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Label
	{
		const char* s = src.getLabel();
		if (s && *s)
		{
			buffer.append("<Label>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Label>");
		}
	}
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Graph
	{
		const char* s = src.getGraph();
		if (s && *s)
		{
			buffer.append("<Graph>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Graph>");
		}
	}
	// field Running
	{
		bool b = src.getRunning();
		if (b)
			buffer.appendf("<Running>1</Running>");
	}
	// field RunningId
	{
		//*** default kind: TK_INT; type=int64, name=RunningId
		buffer.append("<RunningId>");
		buffer.append(src.getRunningId());
		buffer.append("</RunningId>");
	}
	// field Complete
	if ((clientVer==-1.0 || clientVer>=1.21))
	{
		bool b = src.getComplete();
		if (b)
			buffer.appendf("<Complete>1</Complete>");
	}
	// field Failed
	if ((clientVer==-1.0 || clientVer>=1.21))
	{
		bool b = src.getFailed();
		if (b)
			buffer.appendf("<Failed>1</Failed>");
	}
	if (keepRootTag)
		buffer.append("</ECLGraphEx>");
}

bool CECLGraphEx::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Label.unmarshall(rpc_request, "Label", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Graph.unmarshall(rpc_request, "Graph", basepath);
	hasValue |= m_Running.unmarshall(rpc_request, "Running", basepath);
	hasValue |= m_RunningId.unmarshall(rpc_request, "RunningId", basepath);
	hasValue |= m_Complete.unmarshall(rpc_request, "Complete", basepath);
	hasValue |= m_Failed.unmarshall(rpc_request, "Failed", basepath);
	return hasValue;
}

bool CECLGraphEx::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Label.unmarshall(ctx, soapval, "Label");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Graph.unmarshall(ctx, soapval, "Graph");
	hasValue |= m_Running.unmarshall(ctx, soapval, "Running");
	hasValue |= m_RunningId.unmarshall(ctx, soapval, "RunningId");
	hasValue |= m_Complete.unmarshall(ctx, soapval, "Complete");
	hasValue |= m_Failed.unmarshall(ctx, soapval, "Failed");
	return hasValue;
}

bool CECLGraphEx::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Label.unmarshall(ctx, params, attachments, "Label", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Graph.unmarshall(ctx, params, attachments, "Graph", basepath);
	hasValue |= m_Running.unmarshall(ctx, params, attachments, "Running", basepath);
	hasValue |= m_RunningId.unmarshall(ctx, params, attachments, "RunningId", basepath);
	hasValue |= m_Complete.unmarshall(ctx, params, attachments, "Complete", basepath);
	hasValue |= m_Failed.unmarshall(ctx, params, attachments, "Failed", basepath);
	return hasValue;
}

const char * CECLGraphEx::getName() { return m_Name.query();}
const char * CECLGraphEx::getLabel() { return m_Label.query();}
const char * CECLGraphEx::getType() { return m_Type.query();}
const char * CECLGraphEx::getGraph() { return m_Graph.query();}
bool CECLGraphEx::getRunning_isNull(){return m_Running.is_nil();}
bool CECLGraphEx::getRunning() { return m_Running;}
bool CECLGraphEx::getRunningId_isNull(){return m_RunningId.is_nil();}
__int64 CECLGraphEx::getRunningId() { return m_RunningId;}
bool CECLGraphEx::getComplete_isNull(){return m_Complete.is_nil();}
bool CECLGraphEx::getComplete() { return m_Complete;}
bool CECLGraphEx::getFailed_isNull(){return m_Failed.is_nil();}
bool CECLGraphEx::getFailed() { return m_Failed;}
void CECLGraphEx::setName(const char * val){ m_Name.set(val); }
void CECLGraphEx::setLabel(const char * val){ m_Label.set(val); }
void CECLGraphEx::setType(const char * val){ m_Type.set(val); }
void CECLGraphEx::setGraph(const char * val){ m_Graph.set(val); }
void CECLGraphEx::setRunning_null(){ m_Running.Nil(); }void CECLGraphEx::setRunning(bool val){ m_Running=val; }
void CECLGraphEx::setRunningId_null(){ m_RunningId.Nil(); }void CECLGraphEx::setRunningId(__int64 val){ m_RunningId=val; }
void CECLGraphEx::setComplete_null(){ m_Complete.Nil(); }void CECLGraphEx::setComplete(bool val){ m_Complete=val; }
void CECLGraphEx::setFailed_null(){ m_Failed.Nil(); }void CECLGraphEx::setFailed(bool val){ m_Failed=val; }
extern "C"  IEspECLGraphEx *createECLGraphEx(const char *serv, const char *msgname){return ((IEspECLGraphEx *)new CECLGraphEx(serv /*, msgname*/));}
extern "C"  IClientECLGraphEx *createClientECLGraphEx(const char *serv, const char *msgname){return ((IClientECLGraphEx *)new CECLGraphEx(serv /*, msgname*/));}

//=======================================================
// class CECLSourceFile Implementation
//=======================================================

CECLSourceFile::CECLSourceFile(const char *serviceName, IRpcMessageBinding *init)
	: m_FileCluster(nilRemove),m_Name(nilRemove),m_IsSuperFile(nilRemove),m_Subs(nilRemove),m_Count(nilRemove),m_ECLSourceFiles(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLSourceFile");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLSourceFile::CECLSourceFile(const char *serviceName, const char *bc)
	: m_FileCluster(nilRemove),m_Name(nilRemove),m_IsSuperFile(nilRemove),m_Subs(nilRemove),m_Count(nilRemove),m_ECLSourceFiles(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLSourceFile");
}

StringBuffer &CECLSourceFile::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		if (!context.suppressed("ECLSourceFile","FileCluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileCluster\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ECLSourceFile","IsSuperFile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsSuperFile\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLSourceFile","Subs")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Subs\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("ECLSourceFile","ECLSourceFiles")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ECLSourceFiles\" type=\"tns:ArrayOfECLSourceFile\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (added.getValue("ECLSourceFile") && added.getValue("ArrayOfECLSourceFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLSourceFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLSourceFile\" type=\"tns:ECLSourceFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLSourceFile",1);
	}
	return schema;
}

void CECLSourceFile::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLSourceFile::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLSourceFile","FileCluster",1.01);
	info.addMinVersion("ECLSourceFile","IsSuperFile",1.12);
	info.addMinVersion("ECLSourceFile","Subs",1.27);
	info.addMinVersion("ECLSourceFile","ECLSourceFiles",1.27);
}

StringBuffer &CECLSourceFile::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("ECLSourceFile","FileCluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileCluster");
		form.appendf("  <tr><td><b>FileCluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLSourceFile","IsSuperFile")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsSuperFile");
		
	form.appendf("  <tr><td><b>IsSuperFile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLSourceFile","Subs")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("Subs");
		form.appendf("  <tr><td><b>Subs: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLSourceFile","ECLSourceFiles")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ECLSourceFiles");
		form.appendf("<tr><td><b>ECLSourceFiles: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLSourceFile::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLSourceFile::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	if ((clientVer==-1.0 || clientVer>=1.01))
		m_FileCluster.marshall(rpc_resp, "FileCluster", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_IsSuperFile.marshall(rpc_resp, "IsSuperFile", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.27))
		m_Subs.marshall(rpc_resp, "Subs", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.27))
		m_ECLSourceFiles.marshall(rpc_resp, "ECLSourceFiles", "ECLSourceFile");
}


void CECLSourceFile::copy(CECLSourceFile &from)
{
	m_FileCluster.copy(from.m_FileCluster);
	m_Name.copy(from.m_Name);
	m_IsSuperFile.copy(from.m_IsSuperFile);
	m_Subs.copy(from.m_Subs);
	m_Count.copy(from.m_Count);
	m_ECLSourceFiles.copy(from.m_ECLSourceFiles);
}


void CECLSourceFile::copy(IConstECLSourceFile &ifrom)
{
	setFileCluster(ifrom.getFileCluster());
	setName(ifrom.getName());
	setIsSuperFile(ifrom.getIsSuperFile());
	setSubs(ifrom.getSubs());
	setCount(ifrom.getCount());
	setECLSourceFiles(ifrom.getECLSourceFiles());
}


void CECLSourceFile::getAttributes(IProperties &attributes)
{
}


void CECLSourceFile::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_FileCluster.toStr(ctx, buffer, "FileCluster", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_IsSuperFile.toStr(ctx, buffer, "IsSuperFile", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.27))
		m_Subs.toStr(ctx, buffer, "Subs", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.27))
		m_ECLSourceFiles.toStr(ctx, buffer, "ECLSourceFiles", "ECLSourceFile");
}


void CECLSourceFile::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLSourceFile::serializer(IEspContext* ctx, IConstECLSourceFile &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLSourceFile>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field FileCluster
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getFileCluster();
		if (s && *s)
		{
			buffer.append("<FileCluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileCluster>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field IsSuperFile
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		bool b = src.getIsSuperFile();
		if (b)
			buffer.appendf("<IsSuperFile>1</IsSuperFile>");
	}
	// field Subs
	if ((clientVer==-1.0 || clientVer>=1.27))
	{
		int n = src.getSubs();
		if (n)
			buffer.appendf("<Subs>%d</Subs>", n);
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field ECLSourceFiles
	if ((clientVer==-1.0 || clientVer>=1.27))
	{
		IArrayOf<IConstECLSourceFile>& v = src.getECLSourceFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<ECLSourceFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLSourceFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ECLSourceFiles>");
	}
	if (keepRootTag)
		buffer.append("</ECLSourceFile>");
}

bool CECLSourceFile::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_FileCluster.unmarshall(rpc_request, "FileCluster", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_IsSuperFile.unmarshall(rpc_request, "IsSuperFile", basepath);
	hasValue |= m_Subs.unmarshall(rpc_request, "Subs", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	hasValue |= m_ECLSourceFiles.unmarshall(rpc_request, "ECLSourceFiles", basepath);
	return hasValue;
}

bool CECLSourceFile::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FileCluster.unmarshall(ctx, soapval, "FileCluster");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_IsSuperFile.unmarshall(ctx, soapval, "IsSuperFile");
	hasValue |= m_Subs.unmarshall(ctx, soapval, "Subs");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_ECLSourceFiles.unmarshall(ctx, soapval, "ECLSourceFiles");
	return hasValue;
}

bool CECLSourceFile::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FileCluster.unmarshall(ctx, params, attachments, "FileCluster", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_IsSuperFile.unmarshall(ctx, params, attachments, "IsSuperFile", basepath);
	hasValue |= m_Subs.unmarshall(ctx, params, attachments, "Subs", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_ECLSourceFiles.unmarshall(ctx, params, attachments, "ECLSourceFiles", basepath);
	return hasValue;
}

const char * CECLSourceFile::getFileCluster() { return m_FileCluster.query();}
const char * CECLSourceFile::getName() { return m_Name.query();}
bool CECLSourceFile::getIsSuperFile_isNull(){return m_IsSuperFile.is_nil();}
bool CECLSourceFile::getIsSuperFile() { return m_IsSuperFile;}
bool CECLSourceFile::getSubs_isNull(){return m_Subs.is_nil();}
int CECLSourceFile::getSubs() { return m_Subs;}
bool CECLSourceFile::getCount_isNull(){return m_Count.is_nil();}
int CECLSourceFile::getCount() { return m_Count;}
IArrayOf<IConstECLSourceFile> & CECLSourceFile::getECLSourceFiles() { return (IArrayOf<IConstECLSourceFile> &) m_ECLSourceFiles; }
void CECLSourceFile::setFileCluster(const char * val){ m_FileCluster.set(val); }
void CECLSourceFile::setName(const char * val){ m_Name.set(val); }
void CECLSourceFile::setIsSuperFile_null(){ m_IsSuperFile.Nil(); }void CECLSourceFile::setIsSuperFile(bool val){ m_IsSuperFile=val; }
void CECLSourceFile::setSubs_null(){ m_Subs.Nil(); }void CECLSourceFile::setSubs(int val){ m_Subs=val; }
void CECLSourceFile::setCount_null(){ m_Count.Nil(); }void CECLSourceFile::setCount(int val){ m_Count=val; }
void CECLSourceFile::setECLSourceFiles(IArrayOf<IEspECLSourceFile> &val)
{
	m_ECLSourceFiles->kill();
	IArrayOf<IConstECLSourceFile> &target = m_ECLSourceFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLSourceFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLSourceFile::setECLSourceFiles(IArrayOf<IConstECLSourceFile> &val)
{
	m_ECLSourceFiles->kill();
	IArrayOf<IConstECLSourceFile> &target = m_ECLSourceFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLSourceFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspECLSourceFile *createECLSourceFile(const char *serv, const char *msgname){return ((IEspECLSourceFile *)new CECLSourceFile(serv /*, msgname*/));}
extern "C"  IClientECLSourceFile *createClientECLSourceFile(const char *serv, const char *msgname){return ((IClientECLSourceFile *)new CECLSourceFile(serv /*, msgname*/));}

//=======================================================
// class CECLTimer Implementation
//=======================================================

CECLTimer::CECLTimer(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Value(nilRemove),m_count(nilRemove),m_GraphName(nilRemove),m_SubGraphId(nilRemove),m_Timestamp(nilRemove),m_When(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLTimer");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLTimer::CECLTimer(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Value(nilRemove),m_count(nilRemove),m_GraphName(nilRemove),m_SubGraphId(nilRemove),m_Timestamp(nilRemove),m_When(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLTimer");
}

StringBuffer &CECLTimer::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Value\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"count\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("ECLTimer","GraphName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GraphName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLTimer","SubGraphId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphId\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLTimer","Timestamp")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Timestamp\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("ECLTimer","When")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"When\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLTimer::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLTimer::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLTimer","GraphName",1.2);
	info.addMinVersion("ECLTimer","SubGraphId",1.2);
	info.addMinVersion("ECLTimer","Timestamp",1.72);
	info.addMinVersion("ECLTimer","When",1.72);
}

StringBuffer &CECLTimer::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Value");
	form.appendf("  <tr><td><b>Value: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("count");
	form.appendf("  <tr><td><b>count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLTimer","GraphName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GraphName");
		form.appendf("  <tr><td><b>GraphName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLTimer","SubGraphId")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("SubGraphId");
		form.appendf("  <tr><td><b>SubGraphId: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLTimer","Timestamp")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Timestamp");
		form.appendf("  <tr><td><b>Timestamp: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLTimer","When")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("When");
		form.appendf("  <tr><td><b>When: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLTimer::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLTimer::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Value.marshall(rpc_resp, "Value", "", "", "");
	m_count.marshall(rpc_resp, "count", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_GraphName.marshall(rpc_resp, "GraphName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_SubGraphId.marshall(rpc_resp, "SubGraphId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_Timestamp.marshall(rpc_resp, "Timestamp", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_When.marshall(rpc_resp, "When", "", "", "");
}


void CECLTimer::copy(CECLTimer &from)
{
	m_Name.copy(from.m_Name);
	m_Value.copy(from.m_Value);
	m_count.copy(from.m_count);
	m_GraphName.copy(from.m_GraphName);
	m_SubGraphId.copy(from.m_SubGraphId);
	m_Timestamp.copy(from.m_Timestamp);
	m_When.copy(from.m_When);
}


void CECLTimer::copy(IConstECLTimer &ifrom)
{
	setName(ifrom.getName());
	setValue(ifrom.getValue());
	setCount(ifrom.getCount());
	setGraphName(ifrom.getGraphName());
	setSubGraphId(ifrom.getSubGraphId());
	setTimestamp(ifrom.getTimestamp());
	setWhen(ifrom.getWhen());
}


void CECLTimer::getAttributes(IProperties &attributes)
{
}


void CECLTimer::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Value.toStr(ctx, buffer, "Value", "", true, "", "");
	m_count.toStr(ctx, buffer, "count", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_GraphName.toStr(ctx, buffer, "GraphName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_SubGraphId.toStr(ctx, buffer, "SubGraphId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_Timestamp.toStr(ctx, buffer, "Timestamp", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_When.toStr(ctx, buffer, "When", "", true, "", "");
}


void CECLTimer::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLTimer::serializer(IEspContext* ctx, IConstECLTimer &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLTimer>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Value
	{
		const char* s = src.getValue();
		if (s && *s)
		{
			buffer.append("<Value>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Value>");
		}
	}
	// field count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<count>%d</count>", n);
	}
	// field GraphName
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		const char* s = src.getGraphName();
		if (s && *s)
		{
			buffer.append("<GraphName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphName>");
		}
	}
	// field SubGraphId
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		int n = src.getSubGraphId();
		if (n)
			buffer.appendf("<SubGraphId>%d</SubGraphId>", n);
	}
	// field Timestamp
	if ((clientVer==-1.0 || clientVer>=1.72))
	{
		//*** default kind: TK_INT; type=int64, name=Timestamp
		buffer.append("<Timestamp>");
		buffer.append(src.getTimestamp());
		buffer.append("</Timestamp>");
	}
	// field When
	if ((clientVer==-1.0 || clientVer>=1.72))
	{
		const char* s = src.getWhen();
		if (s && *s)
		{
			buffer.append("<When>");
			encodeUtf8XML(s,buffer);
			buffer.append("</When>");
		}
	}
	if (keepRootTag)
		buffer.append("</ECLTimer>");
}

bool CECLTimer::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Value.unmarshall(rpc_request, "Value", basepath);
	hasValue |= m_count.unmarshall(rpc_request, "count", basepath);
	hasValue |= m_GraphName.unmarshall(rpc_request, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(rpc_request, "SubGraphId", basepath);
	hasValue |= m_Timestamp.unmarshall(rpc_request, "Timestamp", basepath);
	hasValue |= m_When.unmarshall(rpc_request, "When", basepath);
	return hasValue;
}

bool CECLTimer::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Value.unmarshall(ctx, soapval, "Value");
	hasValue |= m_count.unmarshall(ctx, soapval, "count");
	hasValue |= m_GraphName.unmarshall(ctx, soapval, "GraphName");
	hasValue |= m_SubGraphId.unmarshall(ctx, soapval, "SubGraphId");
	hasValue |= m_Timestamp.unmarshall(ctx, soapval, "Timestamp");
	hasValue |= m_When.unmarshall(ctx, soapval, "When");
	return hasValue;
}

bool CECLTimer::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Value.unmarshall(ctx, params, attachments, "Value", basepath);
	hasValue |= m_count.unmarshall(ctx, params, attachments, "count", basepath);
	hasValue |= m_GraphName.unmarshall(ctx, params, attachments, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(ctx, params, attachments, "SubGraphId", basepath);
	hasValue |= m_Timestamp.unmarshall(ctx, params, attachments, "Timestamp", basepath);
	hasValue |= m_When.unmarshall(ctx, params, attachments, "When", basepath);
	return hasValue;
}

const char * CECLTimer::getName() { return m_Name.query();}
const char * CECLTimer::getValue() { return m_Value.query();}
bool CECLTimer::getCount_isNull(){return m_count.is_nil();}
int CECLTimer::getCount() { return m_count;}
const char * CECLTimer::getGraphName() { return m_GraphName.query();}
bool CECLTimer::getSubGraphId_isNull(){return m_SubGraphId.is_nil();}
int CECLTimer::getSubGraphId() { return m_SubGraphId;}
bool CECLTimer::getTimestamp_isNull(){return m_Timestamp.is_nil();}
__int64 CECLTimer::getTimestamp() { return m_Timestamp;}
const char * CECLTimer::getWhen() { return m_When.query();}
void CECLTimer::setName(const char * val){ m_Name.set(val); }
void CECLTimer::setValue(const char * val){ m_Value.set(val); }
void CECLTimer::setCount_null(){ m_count.Nil(); }void CECLTimer::setCount(int val){ m_count=val; }
void CECLTimer::setGraphName(const char * val){ m_GraphName.set(val); }
void CECLTimer::setSubGraphId_null(){ m_SubGraphId.Nil(); }void CECLTimer::setSubGraphId(int val){ m_SubGraphId=val; }
void CECLTimer::setTimestamp_null(){ m_Timestamp.Nil(); }void CECLTimer::setTimestamp(__int64 val){ m_Timestamp=val; }
void CECLTimer::setWhen(const char * val){ m_When.set(val); }
extern "C"  IEspECLTimer *createECLTimer(const char *serv, const char *msgname){return ((IEspECLTimer *)new CECLTimer(serv /*, msgname*/));}
extern "C"  IClientECLTimer *createClientECLTimer(const char *serv, const char *msgname){return ((IClientECLTimer *)new CECLTimer(serv /*, msgname*/));}

//=======================================================
// class CECLHelpFile Implementation
//=======================================================

CECLHelpFile::CECLHelpFile(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Type(nilRemove),m_IPAddress(nilRemove),m_Description(nilRemove),m_FileSize(nilRemove),m_PID(0, nilRemove,false),m_minActivityId(0, nilRemove,false),m_maxActivityId(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLHelpFile");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLHelpFile::CECLHelpFile(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Type(nilRemove),m_IPAddress(nilRemove),m_Description(nilRemove),m_FileSize(nilRemove),m_PID(0, nilRemove,false),m_minActivityId(0, nilRemove,false),m_maxActivityId(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLHelpFile");
}

StringBuffer &CECLHelpFile::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ECLHelpFile","IPAddress")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IPAddress\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLHelpFile","Description")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLHelpFile","FileSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileSize\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("ECLHelpFile","PID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PID\" type=\"xsd:unsignedInt\"/>\n");
		}
		if (!context.suppressed("ECLHelpFile","minActivityId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"minActivityId\" type=\"xsd:unsignedInt\"/>\n");
		}
		if (!context.suppressed("ECLHelpFile","maxActivityId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"maxActivityId\" type=\"xsd:unsignedInt\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLHelpFile::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLHelpFile::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLHelpFile","IPAddress",1.32);
	info.addMinVersion("ECLHelpFile","Description",1.32);
	info.addMinVersion("ECLHelpFile","FileSize",1.43);
	info.addMinVersion("ECLHelpFile","PID",1.44);
	info.addMinVersion("ECLHelpFile","minActivityId",1.58);
	info.addMinVersion("ECLHelpFile","maxActivityId",1.58);
}

StringBuffer &CECLHelpFile::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLHelpFile","IPAddress")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IPAddress");
		form.appendf("  <tr><td><b>IPAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLHelpFile","Description")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Description");
		form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLHelpFile","FileSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileSize");
		form.appendf("  <tr><td><b>FileSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLHelpFile","PID")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("PID");
		form.appendf("  <tr><td><b>PID: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLHelpFile","minActivityId")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("minActivityId");
		form.appendf("  <tr><td><b>minActivityId: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLHelpFile","maxActivityId")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("maxActivityId");
		form.appendf("  <tr><td><b>maxActivityId: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLHelpFile::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLHelpFile::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_IPAddress.marshall(rpc_resp, "IPAddress", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_Description.marshall(rpc_resp, "Description", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.43))
		m_FileSize.marshall(rpc_resp, "FileSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.44))
		m_PID.marshall(rpc_resp, "PID", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.58))
		m_minActivityId.marshall(rpc_resp, "minActivityId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.58))
		m_maxActivityId.marshall(rpc_resp, "maxActivityId", "", "", "");
}


void CECLHelpFile::copy(CECLHelpFile &from)
{
	m_Name.copy(from.m_Name);
	m_Type.copy(from.m_Type);
	m_IPAddress.copy(from.m_IPAddress);
	m_Description.copy(from.m_Description);
	m_FileSize.copy(from.m_FileSize);
	m_PID.copy(from.m_PID);
	m_minActivityId.copy(from.m_minActivityId);
	m_maxActivityId.copy(from.m_maxActivityId);
}


void CECLHelpFile::copy(IConstECLHelpFile &ifrom)
{
	setName(ifrom.getName());
	setType(ifrom.getType());
	setIPAddress(ifrom.getIPAddress());
	setDescription(ifrom.getDescription());
	setFileSize(ifrom.getFileSize());
	setPID(ifrom.getPID());
	setMinActivityId(ifrom.getMinActivityId());
	setMaxActivityId(ifrom.getMaxActivityId());
}


void CECLHelpFile::getAttributes(IProperties &attributes)
{
}


void CECLHelpFile::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_IPAddress.toStr(ctx, buffer, "IPAddress", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.43))
		m_FileSize.toStr(ctx, buffer, "FileSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.44))
		m_PID.toStr(ctx, buffer, "PID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.58))
		m_minActivityId.toStr(ctx, buffer, "minActivityId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.58))
		m_maxActivityId.toStr(ctx, buffer, "maxActivityId", "", true, "", "");
}


void CECLHelpFile::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLHelpFile::serializer(IEspContext* ctx, IConstECLHelpFile &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLHelpFile>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field IPAddress
	if ((clientVer==-1.0 || clientVer>=1.32))
	{
		const char* s = src.getIPAddress();
		if (s && *s)
		{
			buffer.append("<IPAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</IPAddress>");
		}
	}
	// field Description
	if ((clientVer==-1.0 || clientVer>=1.32))
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field FileSize
	if ((clientVer==-1.0 || clientVer>=1.43))
	{
		//*** default kind: TK_INT; type=int64, name=FileSize
		buffer.append("<FileSize>");
		buffer.append(src.getFileSize());
		buffer.append("</FileSize>");
	}
	// field PID
	if ((clientVer==-1.0 || clientVer>=1.44))
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=PID
		buffer.append("<PID>");
		buffer.append(src.getPID());
		buffer.append("</PID>");
	}
	// field minActivityId
	if ((clientVer==-1.0 || clientVer>=1.58))
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=MinActivityId
		buffer.append("<minActivityId>");
		buffer.append(src.getMinActivityId());
		buffer.append("</minActivityId>");
	}
	// field maxActivityId
	if ((clientVer==-1.0 || clientVer>=1.58))
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=MaxActivityId
		buffer.append("<maxActivityId>");
		buffer.append(src.getMaxActivityId());
		buffer.append("</maxActivityId>");
	}
	if (keepRootTag)
		buffer.append("</ECLHelpFile>");
}

bool CECLHelpFile::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_IPAddress.unmarshall(rpc_request, "IPAddress", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_FileSize.unmarshall(rpc_request, "FileSize", basepath);
	hasValue |= m_PID.unmarshall(rpc_request, "PID", basepath);
	hasValue |= m_minActivityId.unmarshall(rpc_request, "minActivityId", basepath);
	hasValue |= m_maxActivityId.unmarshall(rpc_request, "maxActivityId", basepath);
	return hasValue;
}

bool CECLHelpFile::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_IPAddress.unmarshall(ctx, soapval, "IPAddress");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_FileSize.unmarshall(ctx, soapval, "FileSize");
	hasValue |= m_PID.unmarshall(ctx, soapval, "PID");
	hasValue |= m_minActivityId.unmarshall(ctx, soapval, "minActivityId");
	hasValue |= m_maxActivityId.unmarshall(ctx, soapval, "maxActivityId");
	return hasValue;
}

bool CECLHelpFile::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_IPAddress.unmarshall(ctx, params, attachments, "IPAddress", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_FileSize.unmarshall(ctx, params, attachments, "FileSize", basepath);
	hasValue |= m_PID.unmarshall(ctx, params, attachments, "PID", basepath);
	hasValue |= m_minActivityId.unmarshall(ctx, params, attachments, "minActivityId", basepath);
	hasValue |= m_maxActivityId.unmarshall(ctx, params, attachments, "maxActivityId", basepath);
	return hasValue;
}

const char * CECLHelpFile::getName() { return m_Name.query();}
const char * CECLHelpFile::getType() { return m_Type.query();}
const char * CECLHelpFile::getIPAddress() { return m_IPAddress.query();}
const char * CECLHelpFile::getDescription() { return m_Description.query();}
bool CECLHelpFile::getFileSize_isNull(){return m_FileSize.is_nil();}
__int64 CECLHelpFile::getFileSize() { return m_FileSize;}
bool CECLHelpFile::getPID_isNull(){return m_PID.is_nil();}
unsigned int CECLHelpFile::getPID() { return m_PID;}
bool CECLHelpFile::getMinActivityId_isNull(){return m_minActivityId.is_nil();}
unsigned int CECLHelpFile::getMinActivityId() { return m_minActivityId;}
bool CECLHelpFile::getMaxActivityId_isNull(){return m_maxActivityId.is_nil();}
unsigned int CECLHelpFile::getMaxActivityId() { return m_maxActivityId;}
void CECLHelpFile::setName(const char * val){ m_Name.set(val); }
void CECLHelpFile::setType(const char * val){ m_Type.set(val); }
void CECLHelpFile::setIPAddress(const char * val){ m_IPAddress.set(val); }
void CECLHelpFile::setDescription(const char * val){ m_Description.set(val); }
void CECLHelpFile::setFileSize_null(){ m_FileSize.Nil(); }void CECLHelpFile::setFileSize(__int64 val){ m_FileSize=val; }
void CECLHelpFile::setPID_null(){ m_PID.Nil(); }void CECLHelpFile::setPID(unsigned int val){ m_PID=val; }
void CECLHelpFile::setMinActivityId_null(){ m_minActivityId.Nil(); }void CECLHelpFile::setMinActivityId(unsigned int val){ m_minActivityId=val; }
void CECLHelpFile::setMaxActivityId_null(){ m_maxActivityId.Nil(); }void CECLHelpFile::setMaxActivityId(unsigned int val){ m_maxActivityId=val; }
extern "C"  IEspECLHelpFile *createECLHelpFile(const char *serv, const char *msgname){return ((IEspECLHelpFile *)new CECLHelpFile(serv /*, msgname*/));}
extern "C"  IClientECLHelpFile *createClientECLHelpFile(const char *serv, const char *msgname){return ((IClientECLHelpFile *)new CECLHelpFile(serv /*, msgname*/));}

//=======================================================
// class CECLQuery Implementation
//=======================================================

CECLQuery::CECLQuery(const char *serviceName, IRpcMessageBinding *init)
	: m_Text(nilRemove),m_Cpp(nilRemove),m_ResTxt(nilRemove),m_Dll(nilRemove),m_ThorLog(nilRemove),m_QueryMainDefinition(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLQuery");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLQuery::CECLQuery(const char *serviceName, const char *bc)
	: m_Text(nilRemove),m_Cpp(nilRemove),m_ResTxt(nilRemove),m_Dll(nilRemove),m_ThorLog(nilRemove),m_QueryMainDefinition(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLQuery");
}

StringBuffer &CECLQuery::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Text\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cpp\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResTxt\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Dll\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ThorLog\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ECLQuery","QueryMainDefinition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QueryMainDefinition\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLQuery::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLQuery::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLQuery","QueryMainDefinition",1.35);
}

StringBuffer &CECLQuery::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Text");
	form.appendf("  <tr><td><b>Text: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cpp");
	form.appendf("  <tr><td><b>Cpp: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ResTxt");
	form.appendf("  <tr><td><b>ResTxt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Dll");
	form.appendf("  <tr><td><b>Dll: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ThorLog");
	form.appendf("  <tr><td><b>ThorLog: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLQuery","QueryMainDefinition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QueryMainDefinition");
		form.appendf("  <tr><td><b>QueryMainDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLQuery::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLQuery::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Text.marshall(rpc_resp, "Text", "", "", "");
	m_Cpp.marshall(rpc_resp, "Cpp", "", "", "");
	m_ResTxt.marshall(rpc_resp, "ResTxt", "", "", "");
	m_Dll.marshall(rpc_resp, "Dll", "", "", "");
	m_ThorLog.marshall(rpc_resp, "ThorLog", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.35))
		m_QueryMainDefinition.marshall(rpc_resp, "QueryMainDefinition", "", "", "");
}


void CECLQuery::copy(CECLQuery &from)
{
	m_Text.copy(from.m_Text);
	m_Cpp.copy(from.m_Cpp);
	m_ResTxt.copy(from.m_ResTxt);
	m_Dll.copy(from.m_Dll);
	m_ThorLog.copy(from.m_ThorLog);
	m_QueryMainDefinition.copy(from.m_QueryMainDefinition);
}


void CECLQuery::copy(IConstECLQuery &ifrom)
{
	setText(ifrom.getText());
	setCpp(ifrom.getCpp());
	setResTxt(ifrom.getResTxt());
	setDll(ifrom.getDll());
	setThorLog(ifrom.getThorLog());
	setQueryMainDefinition(ifrom.getQueryMainDefinition());
}


void CECLQuery::getAttributes(IProperties &attributes)
{
}


void CECLQuery::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Text.toStr(ctx, buffer, "Text", "", true, "", "");
	m_Cpp.toStr(ctx, buffer, "Cpp", "", true, "", "");
	m_ResTxt.toStr(ctx, buffer, "ResTxt", "", true, "", "");
	m_Dll.toStr(ctx, buffer, "Dll", "", true, "", "");
	m_ThorLog.toStr(ctx, buffer, "ThorLog", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.35))
		m_QueryMainDefinition.toStr(ctx, buffer, "QueryMainDefinition", "", true, "", "");
}


void CECLQuery::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLQuery::serializer(IEspContext* ctx, IConstECLQuery &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLQuery>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Text
	{
		const char* s = src.getText();
		if (s && *s)
		{
			buffer.append("<Text>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Text>");
		}
	}
	// field Cpp
	{
		const char* s = src.getCpp();
		if (s && *s)
		{
			buffer.append("<Cpp>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cpp>");
		}
	}
	// field ResTxt
	{
		const char* s = src.getResTxt();
		if (s && *s)
		{
			buffer.append("<ResTxt>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ResTxt>");
		}
	}
	// field Dll
	{
		const char* s = src.getDll();
		if (s && *s)
		{
			buffer.append("<Dll>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Dll>");
		}
	}
	// field ThorLog
	{
		const char* s = src.getThorLog();
		if (s && *s)
		{
			buffer.append("<ThorLog>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ThorLog>");
		}
	}
	// field QueryMainDefinition
	if ((clientVer==-1.0 || clientVer>=1.35))
	{
		const char* s = src.getQueryMainDefinition();
		if (s && *s)
		{
			buffer.append("<QueryMainDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryMainDefinition>");
		}
	}
	if (keepRootTag)
		buffer.append("</ECLQuery>");
}

bool CECLQuery::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Text.unmarshall(rpc_request, "Text", basepath);
	hasValue |= m_Cpp.unmarshall(rpc_request, "Cpp", basepath);
	hasValue |= m_ResTxt.unmarshall(rpc_request, "ResTxt", basepath);
	hasValue |= m_Dll.unmarshall(rpc_request, "Dll", basepath);
	hasValue |= m_ThorLog.unmarshall(rpc_request, "ThorLog", basepath);
	hasValue |= m_QueryMainDefinition.unmarshall(rpc_request, "QueryMainDefinition", basepath);
	return hasValue;
}

bool CECLQuery::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Text.unmarshall(ctx, soapval, "Text");
	hasValue |= m_Cpp.unmarshall(ctx, soapval, "Cpp");
	hasValue |= m_ResTxt.unmarshall(ctx, soapval, "ResTxt");
	hasValue |= m_Dll.unmarshall(ctx, soapval, "Dll");
	hasValue |= m_ThorLog.unmarshall(ctx, soapval, "ThorLog");
	hasValue |= m_QueryMainDefinition.unmarshall(ctx, soapval, "QueryMainDefinition");
	return hasValue;
}

bool CECLQuery::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Text.unmarshall(ctx, params, attachments, "Text", basepath);
	hasValue |= m_Cpp.unmarshall(ctx, params, attachments, "Cpp", basepath);
	hasValue |= m_ResTxt.unmarshall(ctx, params, attachments, "ResTxt", basepath);
	hasValue |= m_Dll.unmarshall(ctx, params, attachments, "Dll", basepath);
	hasValue |= m_ThorLog.unmarshall(ctx, params, attachments, "ThorLog", basepath);
	hasValue |= m_QueryMainDefinition.unmarshall(ctx, params, attachments, "QueryMainDefinition", basepath);
	return hasValue;
}

const char * CECLQuery::getText() { return m_Text.query();}
const char * CECLQuery::getCpp() { return m_Cpp.query();}
const char * CECLQuery::getResTxt() { return m_ResTxt.query();}
const char * CECLQuery::getDll() { return m_Dll.query();}
const char * CECLQuery::getThorLog() { return m_ThorLog.query();}
const char * CECLQuery::getQueryMainDefinition() { return m_QueryMainDefinition.query();}
void CECLQuery::setText(const char * val){ m_Text.set(val); }
void CECLQuery::setCpp(const char * val){ m_Cpp.set(val); }
void CECLQuery::setResTxt(const char * val){ m_ResTxt.set(val); }
void CECLQuery::setDll(const char * val){ m_Dll.set(val); }
void CECLQuery::setThorLog(const char * val){ m_ThorLog.set(val); }
void CECLQuery::setQueryMainDefinition(const char * val){ m_QueryMainDefinition.set(val); }
extern "C"  IEspECLQuery *createECLQuery(const char *serv, const char *msgname){return ((IEspECLQuery *)new CECLQuery(serv /*, msgname*/));}
extern "C"  IClientECLQuery *createClientECLQuery(const char *serv, const char *msgname){return ((IClientECLQuery *)new CECLQuery(serv /*, msgname*/));}

//=======================================================
// class CQuerySummaryStats Implementation
//=======================================================

CQuerySummaryStats::CQuerySummaryStats(const char *serviceName, IRpcMessageBinding *init)
	: m_Endpoint(nilRemove),m_Status(nilRemove),m_StartTime(nilRemove),m_EndTime(nilRemove),m_CountTotal(nilRemove),m_CountFailed(nilRemove),m_AverageSlavesReplyLen(nilRemove),m_AverageBytesOut(nilRemove),m_SizeAvgPeakMemory(nilRemove),m_TimeAvgTotalExecuteMinutes(nilRemove),m_TimeMinTotalExecuteMinutes(nilRemove),m_TimeMaxTotalExecuteMinutes(nilRemove),m_Percentile97(nilRemove),m_Percentile97Estimate(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySummaryStats");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySummaryStats::CQuerySummaryStats(const char *serviceName, const char *bc)
	: m_Endpoint(nilRemove),m_Status(nilRemove),m_StartTime(nilRemove),m_EndTime(nilRemove),m_CountTotal(nilRemove),m_CountFailed(nilRemove),m_AverageSlavesReplyLen(nilRemove),m_AverageBytesOut(nilRemove),m_SizeAvgPeakMemory(nilRemove),m_TimeAvgTotalExecuteMinutes(nilRemove),m_TimeMinTotalExecuteMinutes(nilRemove),m_TimeMaxTotalExecuteMinutes(nilRemove),m_Percentile97(nilRemove),m_Percentile97Estimate(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySummaryStats");
}

StringBuffer &CQuerySummaryStats::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Endpoint\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Status\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartTime\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndTime\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CountTotal\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CountFailed\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AverageSlavesReplyLen\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AverageBytesOut\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SizeAvgPeakMemory\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeAvgTotalExecuteMinutes\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeMinTotalExecuteMinutes\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeMaxTotalExecuteMinutes\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Percentile97\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Percentile97Estimate\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySummaryStats::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySummaryStats::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQuerySummaryStats::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Endpoint");
	form.appendf("  <tr><td><b>Endpoint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Status");
	form.appendf("  <tr><td><b>Status: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartTime");
	form.appendf("  <tr><td><b>StartTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndTime");
	form.appendf("  <tr><td><b>EndTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("CountTotal");
	form.appendf("  <tr><td><b>CountTotal: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("CountFailed");
	form.appendf("  <tr><td><b>CountFailed: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("AverageSlavesReplyLen");
	form.appendf("  <tr><td><b>AverageSlavesReplyLen: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AverageBytesOut");
	form.appendf("  <tr><td><b>AverageBytesOut: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SizeAvgPeakMemory");
	form.appendf("  <tr><td><b>SizeAvgPeakMemory: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TimeAvgTotalExecuteMinutes");
	form.appendf("  <tr><td><b>TimeAvgTotalExecuteMinutes: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TimeMinTotalExecuteMinutes");
	form.appendf("  <tr><td><b>TimeMinTotalExecuteMinutes: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TimeMaxTotalExecuteMinutes");
	form.appendf("  <tr><td><b>TimeMaxTotalExecuteMinutes: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Percentile97");
	form.appendf("  <tr><td><b>Percentile97: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Percentile97Estimate");
	
	form.appendf("  <tr><td><b>Percentile97Estimate? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySummaryStats::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySummaryStats::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Endpoint.marshall(rpc_resp, "Endpoint", "", "", "");
	m_Status.marshall(rpc_resp, "Status", "", "", "");
	m_StartTime.marshall(rpc_resp, "StartTime", "", "", "");
	m_EndTime.marshall(rpc_resp, "EndTime", "", "", "");
	m_CountTotal.marshall(rpc_resp, "CountTotal", "", "", "");
	m_CountFailed.marshall(rpc_resp, "CountFailed", "", "", "");
	m_AverageSlavesReplyLen.marshall(rpc_resp, "AverageSlavesReplyLen", "", "", "");
	m_AverageBytesOut.marshall(rpc_resp, "AverageBytesOut", "", "", "");
	m_SizeAvgPeakMemory.marshall(rpc_resp, "SizeAvgPeakMemory", "", "", "");
	m_TimeAvgTotalExecuteMinutes.marshall(rpc_resp, "TimeAvgTotalExecuteMinutes", "", "", "");
	m_TimeMinTotalExecuteMinutes.marshall(rpc_resp, "TimeMinTotalExecuteMinutes", "", "", "");
	m_TimeMaxTotalExecuteMinutes.marshall(rpc_resp, "TimeMaxTotalExecuteMinutes", "", "", "");
	m_Percentile97.marshall(rpc_resp, "Percentile97", "", "", "");
	m_Percentile97Estimate.marshall(rpc_resp, "Percentile97Estimate", "", "", "");
}


void CQuerySummaryStats::copy(CQuerySummaryStats &from)
{
	m_Endpoint.copy(from.m_Endpoint);
	m_Status.copy(from.m_Status);
	m_StartTime.copy(from.m_StartTime);
	m_EndTime.copy(from.m_EndTime);
	m_CountTotal.copy(from.m_CountTotal);
	m_CountFailed.copy(from.m_CountFailed);
	m_AverageSlavesReplyLen.copy(from.m_AverageSlavesReplyLen);
	m_AverageBytesOut.copy(from.m_AverageBytesOut);
	m_SizeAvgPeakMemory.copy(from.m_SizeAvgPeakMemory);
	m_TimeAvgTotalExecuteMinutes.copy(from.m_TimeAvgTotalExecuteMinutes);
	m_TimeMinTotalExecuteMinutes.copy(from.m_TimeMinTotalExecuteMinutes);
	m_TimeMaxTotalExecuteMinutes.copy(from.m_TimeMaxTotalExecuteMinutes);
	m_Percentile97.copy(from.m_Percentile97);
	m_Percentile97Estimate.copy(from.m_Percentile97Estimate);
}


void CQuerySummaryStats::copy(IConstQuerySummaryStats &ifrom)
{
	setEndpoint(ifrom.getEndpoint());
	setStatus(ifrom.getStatus());
	setStartTime(ifrom.getStartTime());
	setEndTime(ifrom.getEndTime());
	setCountTotal(ifrom.getCountTotal());
	setCountFailed(ifrom.getCountFailed());
	setAverageSlavesReplyLen(ifrom.getAverageSlavesReplyLen());
	setAverageBytesOut(ifrom.getAverageBytesOut());
	setSizeAvgPeakMemory(ifrom.getSizeAvgPeakMemory());
	setTimeAvgTotalExecuteMinutes(ifrom.getTimeAvgTotalExecuteMinutes());
	setTimeMinTotalExecuteMinutes(ifrom.getTimeMinTotalExecuteMinutes());
	setTimeMaxTotalExecuteMinutes(ifrom.getTimeMaxTotalExecuteMinutes());
	setPercentile97(ifrom.getPercentile97());
	setPercentile97Estimate(ifrom.getPercentile97Estimate());
}


void CQuerySummaryStats::getAttributes(IProperties &attributes)
{
}


void CQuerySummaryStats::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Endpoint.toStr(ctx, buffer, "Endpoint", "", true, "", "");
	m_Status.toStr(ctx, buffer, "Status", "", true, "", "");
	m_StartTime.toStr(ctx, buffer, "StartTime", "", true, "", "");
	m_EndTime.toStr(ctx, buffer, "EndTime", "", true, "", "");
	m_CountTotal.toStr(ctx, buffer, "CountTotal", "", true, "", "");
	m_CountFailed.toStr(ctx, buffer, "CountFailed", "", true, "", "");
	m_AverageSlavesReplyLen.toStr(ctx, buffer, "AverageSlavesReplyLen", "", true, "", "");
	m_AverageBytesOut.toStr(ctx, buffer, "AverageBytesOut", "", true, "", "");
	m_SizeAvgPeakMemory.toStr(ctx, buffer, "SizeAvgPeakMemory", "", true, "", "");
	m_TimeAvgTotalExecuteMinutes.toStr(ctx, buffer, "TimeAvgTotalExecuteMinutes", "", true, "", "");
	m_TimeMinTotalExecuteMinutes.toStr(ctx, buffer, "TimeMinTotalExecuteMinutes", "", true, "", "");
	m_TimeMaxTotalExecuteMinutes.toStr(ctx, buffer, "TimeMaxTotalExecuteMinutes", "", true, "", "");
	m_Percentile97.toStr(ctx, buffer, "Percentile97", "", true, "", "");
	m_Percentile97Estimate.toStr(ctx, buffer, "Percentile97Estimate", "", true, "", "");
}


void CQuerySummaryStats::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySummaryStats::serializer(IEspContext* ctx, IConstQuerySummaryStats &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySummaryStats>");
	// field Endpoint
	{
		const char* s = src.getEndpoint();
		if (s && *s)
		{
			buffer.append("<Endpoint>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Endpoint>");
		}
	}
	// field Status
	{
		const char* s = src.getStatus();
		if (s && *s)
		{
			buffer.append("<Status>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Status>");
		}
	}
	// field StartTime
	{
		const char* s = src.getStartTime();
		if (s && *s)
		{
			buffer.append("<StartTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartTime>");
		}
	}
	// field EndTime
	{
		const char* s = src.getEndTime();
		if (s && *s)
		{
			buffer.append("<EndTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndTime>");
		}
	}
	// field CountTotal
	{
		int n = src.getCountTotal();
		if (n)
			buffer.appendf("<CountTotal>%d</CountTotal>", n);
	}
	// field CountFailed
	{
		int n = src.getCountFailed();
		if (n)
			buffer.appendf("<CountFailed>%d</CountFailed>", n);
	}
	// field AverageSlavesReplyLen
	{
		int n = src.getAverageSlavesReplyLen();
		if (n)
			buffer.appendf("<AverageSlavesReplyLen>%d</AverageSlavesReplyLen>", n);
	}
	// field AverageBytesOut
	{
		//*** default kind: TK_INT; type=int64, name=AverageBytesOut
		buffer.append("<AverageBytesOut>");
		buffer.append(src.getAverageBytesOut());
		buffer.append("</AverageBytesOut>");
	}
	// field SizeAvgPeakMemory
	{
		//*** default kind: TK_INT; type=int64, name=SizeAvgPeakMemory
		buffer.append("<SizeAvgPeakMemory>");
		buffer.append(src.getSizeAvgPeakMemory());
		buffer.append("</SizeAvgPeakMemory>");
	}
	// field TimeAvgTotalExecuteMinutes
	{
		//*** default kind: TK_INT; type=int64, name=TimeAvgTotalExecuteMinutes
		buffer.append("<TimeAvgTotalExecuteMinutes>");
		buffer.append(src.getTimeAvgTotalExecuteMinutes());
		buffer.append("</TimeAvgTotalExecuteMinutes>");
	}
	// field TimeMinTotalExecuteMinutes
	{
		//*** default kind: TK_INT; type=int64, name=TimeMinTotalExecuteMinutes
		buffer.append("<TimeMinTotalExecuteMinutes>");
		buffer.append(src.getTimeMinTotalExecuteMinutes());
		buffer.append("</TimeMinTotalExecuteMinutes>");
	}
	// field TimeMaxTotalExecuteMinutes
	{
		//*** default kind: TK_INT; type=int64, name=TimeMaxTotalExecuteMinutes
		buffer.append("<TimeMaxTotalExecuteMinutes>");
		buffer.append(src.getTimeMaxTotalExecuteMinutes());
		buffer.append("</TimeMaxTotalExecuteMinutes>");
	}
	// field Percentile97
	{
		//*** default kind: TK_INT; type=int64, name=Percentile97
		buffer.append("<Percentile97>");
		buffer.append(src.getPercentile97());
		buffer.append("</Percentile97>");
	}
	// field Percentile97Estimate
	{
		bool b = src.getPercentile97Estimate();
		if (b)
			buffer.appendf("<Percentile97Estimate>1</Percentile97Estimate>");
	}
	if (keepRootTag)
		buffer.append("</QuerySummaryStats>");
}

bool CQuerySummaryStats::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Endpoint.unmarshall(rpc_request, "Endpoint", basepath);
	hasValue |= m_Status.unmarshall(rpc_request, "Status", basepath);
	hasValue |= m_StartTime.unmarshall(rpc_request, "StartTime", basepath);
	hasValue |= m_EndTime.unmarshall(rpc_request, "EndTime", basepath);
	hasValue |= m_CountTotal.unmarshall(rpc_request, "CountTotal", basepath);
	hasValue |= m_CountFailed.unmarshall(rpc_request, "CountFailed", basepath);
	hasValue |= m_AverageSlavesReplyLen.unmarshall(rpc_request, "AverageSlavesReplyLen", basepath);
	hasValue |= m_AverageBytesOut.unmarshall(rpc_request, "AverageBytesOut", basepath);
	hasValue |= m_SizeAvgPeakMemory.unmarshall(rpc_request, "SizeAvgPeakMemory", basepath);
	hasValue |= m_TimeAvgTotalExecuteMinutes.unmarshall(rpc_request, "TimeAvgTotalExecuteMinutes", basepath);
	hasValue |= m_TimeMinTotalExecuteMinutes.unmarshall(rpc_request, "TimeMinTotalExecuteMinutes", basepath);
	hasValue |= m_TimeMaxTotalExecuteMinutes.unmarshall(rpc_request, "TimeMaxTotalExecuteMinutes", basepath);
	hasValue |= m_Percentile97.unmarshall(rpc_request, "Percentile97", basepath);
	hasValue |= m_Percentile97Estimate.unmarshall(rpc_request, "Percentile97Estimate", basepath);
	return hasValue;
}

bool CQuerySummaryStats::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Endpoint.unmarshall(ctx, soapval, "Endpoint");
	hasValue |= m_Status.unmarshall(ctx, soapval, "Status");
	hasValue |= m_StartTime.unmarshall(ctx, soapval, "StartTime");
	hasValue |= m_EndTime.unmarshall(ctx, soapval, "EndTime");
	hasValue |= m_CountTotal.unmarshall(ctx, soapval, "CountTotal");
	hasValue |= m_CountFailed.unmarshall(ctx, soapval, "CountFailed");
	hasValue |= m_AverageSlavesReplyLen.unmarshall(ctx, soapval, "AverageSlavesReplyLen");
	hasValue |= m_AverageBytesOut.unmarshall(ctx, soapval, "AverageBytesOut");
	hasValue |= m_SizeAvgPeakMemory.unmarshall(ctx, soapval, "SizeAvgPeakMemory");
	hasValue |= m_TimeAvgTotalExecuteMinutes.unmarshall(ctx, soapval, "TimeAvgTotalExecuteMinutes");
	hasValue |= m_TimeMinTotalExecuteMinutes.unmarshall(ctx, soapval, "TimeMinTotalExecuteMinutes");
	hasValue |= m_TimeMaxTotalExecuteMinutes.unmarshall(ctx, soapval, "TimeMaxTotalExecuteMinutes");
	hasValue |= m_Percentile97.unmarshall(ctx, soapval, "Percentile97");
	hasValue |= m_Percentile97Estimate.unmarshall(ctx, soapval, "Percentile97Estimate");
	return hasValue;
}

bool CQuerySummaryStats::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Endpoint.unmarshall(ctx, params, attachments, "Endpoint", basepath);
	hasValue |= m_Status.unmarshall(ctx, params, attachments, "Status", basepath);
	hasValue |= m_StartTime.unmarshall(ctx, params, attachments, "StartTime", basepath);
	hasValue |= m_EndTime.unmarshall(ctx, params, attachments, "EndTime", basepath);
	hasValue |= m_CountTotal.unmarshall(ctx, params, attachments, "CountTotal", basepath);
	hasValue |= m_CountFailed.unmarshall(ctx, params, attachments, "CountFailed", basepath);
	hasValue |= m_AverageSlavesReplyLen.unmarshall(ctx, params, attachments, "AverageSlavesReplyLen", basepath);
	hasValue |= m_AverageBytesOut.unmarshall(ctx, params, attachments, "AverageBytesOut", basepath);
	hasValue |= m_SizeAvgPeakMemory.unmarshall(ctx, params, attachments, "SizeAvgPeakMemory", basepath);
	hasValue |= m_TimeAvgTotalExecuteMinutes.unmarshall(ctx, params, attachments, "TimeAvgTotalExecuteMinutes", basepath);
	hasValue |= m_TimeMinTotalExecuteMinutes.unmarshall(ctx, params, attachments, "TimeMinTotalExecuteMinutes", basepath);
	hasValue |= m_TimeMaxTotalExecuteMinutes.unmarshall(ctx, params, attachments, "TimeMaxTotalExecuteMinutes", basepath);
	hasValue |= m_Percentile97.unmarshall(ctx, params, attachments, "Percentile97", basepath);
	hasValue |= m_Percentile97Estimate.unmarshall(ctx, params, attachments, "Percentile97Estimate", basepath);
	return hasValue;
}

const char * CQuerySummaryStats::getEndpoint() { return m_Endpoint.query();}
const char * CQuerySummaryStats::getStatus() { return m_Status.query();}
const char * CQuerySummaryStats::getStartTime() { return m_StartTime.query();}
const char * CQuerySummaryStats::getEndTime() { return m_EndTime.query();}
bool CQuerySummaryStats::getCountTotal_isNull(){return m_CountTotal.is_nil();}
int CQuerySummaryStats::getCountTotal() { return m_CountTotal;}
bool CQuerySummaryStats::getCountFailed_isNull(){return m_CountFailed.is_nil();}
int CQuerySummaryStats::getCountFailed() { return m_CountFailed;}
bool CQuerySummaryStats::getAverageSlavesReplyLen_isNull(){return m_AverageSlavesReplyLen.is_nil();}
int CQuerySummaryStats::getAverageSlavesReplyLen() { return m_AverageSlavesReplyLen;}
bool CQuerySummaryStats::getAverageBytesOut_isNull(){return m_AverageBytesOut.is_nil();}
__int64 CQuerySummaryStats::getAverageBytesOut() { return m_AverageBytesOut;}
bool CQuerySummaryStats::getSizeAvgPeakMemory_isNull(){return m_SizeAvgPeakMemory.is_nil();}
__int64 CQuerySummaryStats::getSizeAvgPeakMemory() { return m_SizeAvgPeakMemory;}
bool CQuerySummaryStats::getTimeAvgTotalExecuteMinutes_isNull(){return m_TimeAvgTotalExecuteMinutes.is_nil();}
__int64 CQuerySummaryStats::getTimeAvgTotalExecuteMinutes() { return m_TimeAvgTotalExecuteMinutes;}
bool CQuerySummaryStats::getTimeMinTotalExecuteMinutes_isNull(){return m_TimeMinTotalExecuteMinutes.is_nil();}
__int64 CQuerySummaryStats::getTimeMinTotalExecuteMinutes() { return m_TimeMinTotalExecuteMinutes;}
bool CQuerySummaryStats::getTimeMaxTotalExecuteMinutes_isNull(){return m_TimeMaxTotalExecuteMinutes.is_nil();}
__int64 CQuerySummaryStats::getTimeMaxTotalExecuteMinutes() { return m_TimeMaxTotalExecuteMinutes;}
bool CQuerySummaryStats::getPercentile97_isNull(){return m_Percentile97.is_nil();}
__int64 CQuerySummaryStats::getPercentile97() { return m_Percentile97;}
bool CQuerySummaryStats::getPercentile97Estimate_isNull(){return m_Percentile97Estimate.is_nil();}
bool CQuerySummaryStats::getPercentile97Estimate() { return m_Percentile97Estimate;}
void CQuerySummaryStats::setEndpoint(const char * val){ m_Endpoint.set(val); }
void CQuerySummaryStats::setStatus(const char * val){ m_Status.set(val); }
void CQuerySummaryStats::setStartTime(const char * val){ m_StartTime.set(val); }
void CQuerySummaryStats::setEndTime(const char * val){ m_EndTime.set(val); }
void CQuerySummaryStats::setCountTotal_null(){ m_CountTotal.Nil(); }void CQuerySummaryStats::setCountTotal(int val){ m_CountTotal=val; }
void CQuerySummaryStats::setCountFailed_null(){ m_CountFailed.Nil(); }void CQuerySummaryStats::setCountFailed(int val){ m_CountFailed=val; }
void CQuerySummaryStats::setAverageSlavesReplyLen_null(){ m_AverageSlavesReplyLen.Nil(); }void CQuerySummaryStats::setAverageSlavesReplyLen(int val){ m_AverageSlavesReplyLen=val; }
void CQuerySummaryStats::setAverageBytesOut_null(){ m_AverageBytesOut.Nil(); }void CQuerySummaryStats::setAverageBytesOut(__int64 val){ m_AverageBytesOut=val; }
void CQuerySummaryStats::setSizeAvgPeakMemory_null(){ m_SizeAvgPeakMemory.Nil(); }void CQuerySummaryStats::setSizeAvgPeakMemory(__int64 val){ m_SizeAvgPeakMemory=val; }
void CQuerySummaryStats::setTimeAvgTotalExecuteMinutes_null(){ m_TimeAvgTotalExecuteMinutes.Nil(); }void CQuerySummaryStats::setTimeAvgTotalExecuteMinutes(__int64 val){ m_TimeAvgTotalExecuteMinutes=val; }
void CQuerySummaryStats::setTimeMinTotalExecuteMinutes_null(){ m_TimeMinTotalExecuteMinutes.Nil(); }void CQuerySummaryStats::setTimeMinTotalExecuteMinutes(__int64 val){ m_TimeMinTotalExecuteMinutes=val; }
void CQuerySummaryStats::setTimeMaxTotalExecuteMinutes_null(){ m_TimeMaxTotalExecuteMinutes.Nil(); }void CQuerySummaryStats::setTimeMaxTotalExecuteMinutes(__int64 val){ m_TimeMaxTotalExecuteMinutes=val; }
void CQuerySummaryStats::setPercentile97_null(){ m_Percentile97.Nil(); }void CQuerySummaryStats::setPercentile97(__int64 val){ m_Percentile97=val; }
void CQuerySummaryStats::setPercentile97Estimate_null(){ m_Percentile97Estimate.Nil(); }void CQuerySummaryStats::setPercentile97Estimate(bool val){ m_Percentile97Estimate=val; }
extern "C"  IEspQuerySummaryStats *createQuerySummaryStats(const char *serv, const char *msgname){return ((IEspQuerySummaryStats *)new CQuerySummaryStats(serv /*, msgname*/));}
extern "C"  IClientQuerySummaryStats *createClientQuerySummaryStats(const char *serv, const char *msgname){return ((IClientQuerySummaryStats *)new CQuerySummaryStats(serv /*, msgname*/));}

//=======================================================
// class CDebugValue Implementation
//=======================================================

CDebugValue::CDebugValue(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Value(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DebugValue");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDebugValue::CDebugValue(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Value(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DebugValue");
}

StringBuffer &CDebugValue::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Value\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDebugValue::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDebugValue::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDebugValue::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Value");
	form.appendf("  <tr><td><b>Value: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDebugValue::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDebugValue::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Value.marshall(rpc_resp, "Value", "", "", "");
}


void CDebugValue::copy(CDebugValue &from)
{
	m_Name.copy(from.m_Name);
	m_Value.copy(from.m_Value);
}


void CDebugValue::copy(IConstDebugValue &ifrom)
{
	setName(ifrom.getName());
	setValue(ifrom.getValue());
}


void CDebugValue::getAttributes(IProperties &attributes)
{
}


void CDebugValue::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Value.toStr(ctx, buffer, "Value", "", true, "", "");
}


void CDebugValue::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDebugValue::serializer(IEspContext* ctx, IConstDebugValue &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DebugValue>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Value
	{
		const char* s = src.getValue();
		if (s && *s)
		{
			buffer.append("<Value>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Value>");
		}
	}
	if (keepRootTag)
		buffer.append("</DebugValue>");
}

bool CDebugValue::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Value.unmarshall(rpc_request, "Value", basepath);
	return hasValue;
}

bool CDebugValue::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Value.unmarshall(ctx, soapval, "Value");
	return hasValue;
}

bool CDebugValue::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Value.unmarshall(ctx, params, attachments, "Value", basepath);
	return hasValue;
}

const char * CDebugValue::getName() { return m_Name.query();}
const char * CDebugValue::getValue() { return m_Value.query();}
void CDebugValue::setName(const char * val){ m_Name.set(val); }
void CDebugValue::setValue(const char * val){ m_Value.set(val); }
extern "C"  IEspDebugValue *createDebugValue(const char *serv, const char *msgname){return ((IEspDebugValue *)new CDebugValue(serv /*, msgname*/));}
extern "C"  IClientDebugValue *createClientDebugValue(const char *serv, const char *msgname){return ((IClientDebugValue *)new CDebugValue(serv /*, msgname*/));}

//=======================================================
// class CWUActionResult Implementation
//=======================================================

CWUActionResult::CWUActionResult(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Action(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionResult");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUActionResult::CWUActionResult(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Action(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionResult");
}

StringBuffer &CWUActionResult::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUActionResult::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUActionResult::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUActionResult::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUActionResult::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUActionResult::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Action.marshall(rpc_resp, "Action", "", "", "");
	m_Result.marshall(rpc_resp, "Result", "", "", "");
}


void CWUActionResult::copy(CWUActionResult &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Action.copy(from.m_Action);
	m_Result.copy(from.m_Result);
}


void CWUActionResult::copy(IConstWUActionResult &ifrom)
{
	setWuid(ifrom.getWuid());
	setAction(ifrom.getAction());
	setResult(ifrom.getResult());
}


void CWUActionResult::getAttributes(IProperties &attributes)
{
}


void CWUActionResult::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
}


void CWUActionResult::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUActionResult::serializer(IEspContext* ctx, IConstWUActionResult &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUActionResult>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Action
	{
		const char* s = src.getAction();
		if (s && *s)
		{
			buffer.append("<Action>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Action>");
		}
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUActionResult>");
}

bool CWUActionResult::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	return hasValue;
}

bool CWUActionResult::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUActionResult::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWUActionResult::getWuid() { return m_Wuid.query();}
const char * CWUActionResult::getAction() { return m_Action.query();}
const char * CWUActionResult::getResult() { return m_Result.query();}
void CWUActionResult::setWuid(const char * val){ m_Wuid.set(val); }
void CWUActionResult::setAction(const char * val){ m_Action.set(val); }
void CWUActionResult::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspWUActionResult *createWUActionResult(const char *serv, const char *msgname){return ((IEspWUActionResult *)new CWUActionResult(serv /*, msgname*/));}
extern "C"  IClientWUActionResult *createClientWUActionResult(const char *serv, const char *msgname){return ((IClientWUActionResult *)new CWUActionResult(serv /*, msgname*/));}

//=======================================================
// class CApplicationValue Implementation
//=======================================================

CApplicationValue::CApplicationValue(const char *serviceName, IRpcMessageBinding *init)
	: m_Application(nilRemove),m_Name(nilRemove),m_Value(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ApplicationValue");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CApplicationValue::CApplicationValue(const char *serviceName, const char *bc)
	: m_Application(nilRemove),m_Name(nilRemove),m_Value(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ApplicationValue");
}

StringBuffer &CApplicationValue::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Application\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Value\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CApplicationValue::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CApplicationValue::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CApplicationValue::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Application");
	form.appendf("  <tr><td><b>Application: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Value");
	form.appendf("  <tr><td><b>Value: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CApplicationValue::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CApplicationValue::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Application.marshall(rpc_resp, "Application", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Value.marshall(rpc_resp, "Value", "", "", "");
}


void CApplicationValue::copy(CApplicationValue &from)
{
	m_Application.copy(from.m_Application);
	m_Name.copy(from.m_Name);
	m_Value.copy(from.m_Value);
}


void CApplicationValue::copy(IConstApplicationValue &ifrom)
{
	setApplication(ifrom.getApplication());
	setName(ifrom.getName());
	setValue(ifrom.getValue());
}


void CApplicationValue::getAttributes(IProperties &attributes)
{
}


void CApplicationValue::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Application.toStr(ctx, buffer, "Application", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Value.toStr(ctx, buffer, "Value", "", true, "", "");
}


void CApplicationValue::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CApplicationValue::serializer(IEspContext* ctx, IConstApplicationValue &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ApplicationValue>");
	// field Application
	{
		const char* s = src.getApplication();
		if (s && *s)
		{
			buffer.append("<Application>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Application>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Value
	{
		const char* s = src.getValue();
		if (s && *s)
		{
			buffer.append("<Value>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Value>");
		}
	}
	if (keepRootTag)
		buffer.append("</ApplicationValue>");
}

bool CApplicationValue::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Application.unmarshall(rpc_request, "Application", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Value.unmarshall(rpc_request, "Value", basepath);
	return hasValue;
}

bool CApplicationValue::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Application.unmarshall(ctx, soapval, "Application");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Value.unmarshall(ctx, soapval, "Value");
	return hasValue;
}

bool CApplicationValue::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Application.unmarshall(ctx, params, attachments, "Application", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Value.unmarshall(ctx, params, attachments, "Value", basepath);
	return hasValue;
}

const char * CApplicationValue::getApplication() { return m_Application.query();}
const char * CApplicationValue::getName() { return m_Name.query();}
const char * CApplicationValue::getValue() { return m_Value.query();}
void CApplicationValue::setApplication(const char * val){ m_Application.set(val); }
void CApplicationValue::setName(const char * val){ m_Name.set(val); }
void CApplicationValue::setValue(const char * val){ m_Value.set(val); }
extern "C"  IEspApplicationValue *createApplicationValue(const char *serv, const char *msgname){return ((IEspApplicationValue *)new CApplicationValue(serv /*, msgname*/));}
extern "C"  IClientApplicationValue *createClientApplicationValue(const char *serv, const char *msgname){return ((IClientApplicationValue *)new CApplicationValue(serv /*, msgname*/));}

//=======================================================
// class CECLWorkflow Implementation
//=======================================================

CECLWorkflow::CECLWorkflow(const char *serviceName, IRpcMessageBinding *init)
	: m_WFID(nilRemove),m_EventName("", nilRemove),m_EventText("", nilRemove),m_Count(-1, nilRemove,false),m_CountRemaining(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLWorkflow");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLWorkflow::CECLWorkflow(const char *serviceName, const char *bc)
	: m_WFID(nilRemove),m_EventName("", nilRemove),m_EventText("", nilRemove),m_Count(-1, nilRemove,false),m_CountRemaining(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLWorkflow");
}

StringBuffer &CECLWorkflow::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WFID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventText\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"Count\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"CountRemaining\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLWorkflow::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLWorkflow::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CECLWorkflow::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WFID");
	form.appendf("  <tr><td><b>WFID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventName");
	form.appendf("  <tr><td><b>EventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventText");
	form.appendf("  <tr><td><b>EventText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("CountRemaining");
	form.appendf("  <tr><td><b>CountRemaining: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLWorkflow::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLWorkflow::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_WFID.marshall(rpc_resp, "WFID", "", "", "");
	m_EventName.marshall(rpc_resp, "EventName", "", "", "");
	m_EventText.marshall(rpc_resp, "EventText", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
	m_CountRemaining.marshall(rpc_resp, "CountRemaining", "", "", "");
}


void CECLWorkflow::copy(CECLWorkflow &from)
{
	m_WFID.copy(from.m_WFID);
	m_EventName.copy(from.m_EventName);
	m_EventText.copy(from.m_EventText);
	m_Count.copy(from.m_Count);
	m_CountRemaining.copy(from.m_CountRemaining);
}


void CECLWorkflow::copy(IConstECLWorkflow &ifrom)
{
	setWFID(ifrom.getWFID());
	setEventName(ifrom.getEventName());
	setEventText(ifrom.getEventText());
	setCount(ifrom.getCount());
	setCountRemaining(ifrom.getCountRemaining());
}


void CECLWorkflow::getAttributes(IProperties &attributes)
{
}


void CECLWorkflow::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_WFID.toStr(ctx, buffer, "WFID", "", true, "", "");
	m_EventName.toStr(ctx, buffer, "EventName", "", true, "", "");
	m_EventText.toStr(ctx, buffer, "EventText", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
	m_CountRemaining.toStr(ctx, buffer, "CountRemaining", "", true, "", "");
}


void CECLWorkflow::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLWorkflow::serializer(IEspContext* ctx, IConstECLWorkflow &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLWorkflow>");
	// field WFID
	{
		const char* s = src.getWFID();
		if (s && *s)
		{
			buffer.append("<WFID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WFID>");
		}
	}
	// field EventName
	{
		const char* s = src.getEventName();
		if (s && *s)
		{
			buffer.append("<EventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventName>");
		}
	}
	// field EventText
	{
		const char* s = src.getEventText();
		if (s && *s)
		{
			buffer.append("<EventText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventText>");
		}
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field CountRemaining
	{
		int n = src.getCountRemaining();
		if (n)
			buffer.appendf("<CountRemaining>%d</CountRemaining>", n);
	}
	if (keepRootTag)
		buffer.append("</ECLWorkflow>");
}

bool CECLWorkflow::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_WFID.unmarshall(rpc_request, "WFID", basepath);
	hasValue |= m_EventName.unmarshall(rpc_request, "EventName", basepath);
	hasValue |= m_EventText.unmarshall(rpc_request, "EventText", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	hasValue |= m_CountRemaining.unmarshall(rpc_request, "CountRemaining", basepath);
	return hasValue;
}

bool CECLWorkflow::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WFID.unmarshall(ctx, soapval, "WFID");
	hasValue |= m_EventName.unmarshall(ctx, soapval, "EventName");
	hasValue |= m_EventText.unmarshall(ctx, soapval, "EventText");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_CountRemaining.unmarshall(ctx, soapval, "CountRemaining");
	return hasValue;
}

bool CECLWorkflow::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WFID.unmarshall(ctx, params, attachments, "WFID", basepath);
	hasValue |= m_EventName.unmarshall(ctx, params, attachments, "EventName", basepath);
	hasValue |= m_EventText.unmarshall(ctx, params, attachments, "EventText", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_CountRemaining.unmarshall(ctx, params, attachments, "CountRemaining", basepath);
	return hasValue;
}

const char * CECLWorkflow::getWFID() { return m_WFID.query();}
const char * CECLWorkflow::getEventName() { return m_EventName.query();}
const char * CECLWorkflow::getEventText() { return m_EventText.query();}
bool CECLWorkflow::getCount_isNull(){return m_Count.is_nil();}
int CECLWorkflow::getCount() { return m_Count;}
bool CECLWorkflow::getCountRemaining_isNull(){return m_CountRemaining.is_nil();}
int CECLWorkflow::getCountRemaining() { return m_CountRemaining;}
void CECLWorkflow::setWFID(const char * val){ m_WFID.set(val); }
void CECLWorkflow::setEventName(const char * val){ m_EventName.set(val); }
void CECLWorkflow::setEventText(const char * val){ m_EventText.set(val); }
void CECLWorkflow::setCount_null(){ m_Count.Nil(); }void CECLWorkflow::setCount(int val){ m_Count=val; }
void CECLWorkflow::setCountRemaining_null(){ m_CountRemaining.Nil(); }void CECLWorkflow::setCountRemaining(int val){ m_CountRemaining=val; }
extern "C"  IEspECLWorkflow *createECLWorkflow(const char *serv, const char *msgname){return ((IEspECLWorkflow *)new CECLWorkflow(serv /*, msgname*/));}
extern "C"  IClientECLWorkflow *createClientECLWorkflow(const char *serv, const char *msgname){return ((IClientECLWorkflow *)new CECLWorkflow(serv /*, msgname*/));}

//=======================================================
// class CThorLogInfo Implementation
//=======================================================

CThorLogInfo::CThorLogInfo(const char *serviceName, IRpcMessageBinding *init)
	: m_ProcessName(nilRemove),m_ClusterGroup(nilRemove),m_LogDate(nilRemove),m_NumberSlaves(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ThorLogInfo");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CThorLogInfo::CThorLogInfo(const char *serviceName, const char *bc)
	: m_ProcessName(nilRemove),m_ClusterGroup(nilRemove),m_LogDate(nilRemove),m_NumberSlaves(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ThorLogInfo");
}

StringBuffer &CThorLogInfo::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ProcessName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterGroup\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumberSlaves\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CThorLogInfo::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CThorLogInfo::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CThorLogInfo::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ProcessName");
	form.appendf("  <tr><td><b>ProcessName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterGroup");
	form.appendf("  <tr><td><b>ClusterGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogDate");
	form.appendf("  <tr><td><b>LogDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumberSlaves");
	form.appendf("  <tr><td><b>NumberSlaves: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CThorLogInfo::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CThorLogInfo::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ProcessName.marshall(rpc_resp, "ProcessName", "", "", "");
	m_ClusterGroup.marshall(rpc_resp, "ClusterGroup", "", "", "");
	m_LogDate.marshall(rpc_resp, "LogDate", "", "", "");
	m_NumberSlaves.marshall(rpc_resp, "NumberSlaves", "", "", "");
}


void CThorLogInfo::copy(CThorLogInfo &from)
{
	m_ProcessName.copy(from.m_ProcessName);
	m_ClusterGroup.copy(from.m_ClusterGroup);
	m_LogDate.copy(from.m_LogDate);
	m_NumberSlaves.copy(from.m_NumberSlaves);
}


void CThorLogInfo::copy(IConstThorLogInfo &ifrom)
{
	setProcessName(ifrom.getProcessName());
	setClusterGroup(ifrom.getClusterGroup());
	setLogDate(ifrom.getLogDate());
	setNumberSlaves(ifrom.getNumberSlaves());
}


void CThorLogInfo::getAttributes(IProperties &attributes)
{
}


void CThorLogInfo::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ProcessName.toStr(ctx, buffer, "ProcessName", "", true, "", "");
	m_ClusterGroup.toStr(ctx, buffer, "ClusterGroup", "", true, "", "");
	m_LogDate.toStr(ctx, buffer, "LogDate", "", true, "", "");
	m_NumberSlaves.toStr(ctx, buffer, "NumberSlaves", "", true, "", "");
}


void CThorLogInfo::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CThorLogInfo::serializer(IEspContext* ctx, IConstThorLogInfo &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ThorLogInfo>");
	// field ProcessName
	{
		const char* s = src.getProcessName();
		if (s && *s)
		{
			buffer.append("<ProcessName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ProcessName>");
		}
	}
	// field ClusterGroup
	{
		const char* s = src.getClusterGroup();
		if (s && *s)
		{
			buffer.append("<ClusterGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterGroup>");
		}
	}
	// field LogDate
	{
		const char* s = src.getLogDate();
		if (s && *s)
		{
			buffer.append("<LogDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogDate>");
		}
	}
	// field NumberSlaves
	{
		int n = src.getNumberSlaves();
		if (n)
			buffer.appendf("<NumberSlaves>%d</NumberSlaves>", n);
	}
	if (keepRootTag)
		buffer.append("</ThorLogInfo>");
}

bool CThorLogInfo::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ProcessName.unmarshall(rpc_request, "ProcessName", basepath);
	hasValue |= m_ClusterGroup.unmarshall(rpc_request, "ClusterGroup", basepath);
	hasValue |= m_LogDate.unmarshall(rpc_request, "LogDate", basepath);
	hasValue |= m_NumberSlaves.unmarshall(rpc_request, "NumberSlaves", basepath);
	return hasValue;
}

bool CThorLogInfo::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ProcessName.unmarshall(ctx, soapval, "ProcessName");
	hasValue |= m_ClusterGroup.unmarshall(ctx, soapval, "ClusterGroup");
	hasValue |= m_LogDate.unmarshall(ctx, soapval, "LogDate");
	hasValue |= m_NumberSlaves.unmarshall(ctx, soapval, "NumberSlaves");
	return hasValue;
}

bool CThorLogInfo::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ProcessName.unmarshall(ctx, params, attachments, "ProcessName", basepath);
	hasValue |= m_ClusterGroup.unmarshall(ctx, params, attachments, "ClusterGroup", basepath);
	hasValue |= m_LogDate.unmarshall(ctx, params, attachments, "LogDate", basepath);
	hasValue |= m_NumberSlaves.unmarshall(ctx, params, attachments, "NumberSlaves", basepath);
	return hasValue;
}

const char * CThorLogInfo::getProcessName() { return m_ProcessName.query();}
const char * CThorLogInfo::getClusterGroup() { return m_ClusterGroup.query();}
const char * CThorLogInfo::getLogDate() { return m_LogDate.query();}
bool CThorLogInfo::getNumberSlaves_isNull(){return m_NumberSlaves.is_nil();}
int CThorLogInfo::getNumberSlaves() { return m_NumberSlaves;}
void CThorLogInfo::setProcessName(const char * val){ m_ProcessName.set(val); }
void CThorLogInfo::setClusterGroup(const char * val){ m_ClusterGroup.set(val); }
void CThorLogInfo::setLogDate(const char * val){ m_LogDate.set(val); }
void CThorLogInfo::setNumberSlaves_null(){ m_NumberSlaves.Nil(); }void CThorLogInfo::setNumberSlaves(int val){ m_NumberSlaves=val; }
extern "C"  IEspThorLogInfo *createThorLogInfo(const char *serv, const char *msgname){return ((IEspThorLogInfo *)new CThorLogInfo(serv /*, msgname*/));}
extern "C"  IClientThorLogInfo *createClientThorLogInfo(const char *serv, const char *msgname){return ((IClientThorLogInfo *)new CThorLogInfo(serv /*, msgname*/));}

//=======================================================
// class CECLWorkunitLW Implementation
//=======================================================

CECLWorkunitLW::CECLWorkunitLW(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Owner(nilRemove),m_JobName(nilRemove),m_WuScope(nilRemove),m_ClusterName(nilRemove),m_State(nilRemove),m_StateDesc(nilRemove),m_Action(nilRemove),m_ActionDesc(nilRemove),m_Priority(nilRemove),m_PriorityDesc(nilRemove),m_PriorityLevel(nilRemove),m_IsProtected(nilRemove),m_DateTimeScheduled(nilRemove),m_TotalClusterTime(nilRemove),m_ApplicationValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLWorkunitLW");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLWorkunitLW::CECLWorkunitLW(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Owner(nilRemove),m_JobName(nilRemove),m_WuScope(nilRemove),m_ClusterName(nilRemove),m_State(nilRemove),m_StateDesc(nilRemove),m_Action(nilRemove),m_ActionDesc(nilRemove),m_Priority(nilRemove),m_PriorityDesc(nilRemove),m_PriorityLevel(nilRemove),m_IsProtected(nilRemove),m_DateTimeScheduled(nilRemove),m_TotalClusterTime(nilRemove),m_ApplicationValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLWorkunitLW");
}

StringBuffer &CECLWorkunitLW::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"JobName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WuScope\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StateDesc\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionDesc\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityDesc\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityLevel\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsProtected\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DateTimeScheduled\" type=\"xsd:dateTime\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TotalClusterTime\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValues\" type=\"tns:ArrayOfApplicationValue\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CApplicationValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ApplicationValue") && added.getValue("ArrayOfApplicationValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfApplicationValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ApplicationValue\" type=\"tns:ApplicationValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfApplicationValue",1);
	}
	return schema;
}

void CECLWorkunitLW::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLWorkunitLW::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ApplicationValue"))
	{
		added.setValue("ApplicationValue",1);
		CApplicationValue::getMapInfo(info,added);
	}
}

StringBuffer &CECLWorkunitLW::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobName");
	form.appendf("  <tr><td><b>JobName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WuScope");
	form.appendf("  <tr><td><b>WuScope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StateDesc");
	form.appendf("  <tr><td><b>StateDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionDesc");
	form.appendf("  <tr><td><b>ActionDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Priority");
	form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PriorityDesc");
	form.appendf("  <tr><td><b>PriorityDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PriorityLevel");
	form.appendf("  <tr><td><b>PriorityLevel: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsProtected");
	
	form.appendf("  <tr><td><b>IsProtected? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DateTimeScheduled");
	form.appendf("  <tr><td><b>DateTimeScheduled: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TotalClusterTime");
	form.appendf("  <tr><td><b>TotalClusterTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ApplicationValues");
	form.appendf("<tr><td><b>ApplicationValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLWorkunitLW::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLWorkunitLW::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_JobName.marshall(rpc_resp, "JobName", "", "", "");
	m_WuScope.marshall(rpc_resp, "WuScope", "", "", "");
	m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_StateDesc.marshall(rpc_resp, "StateDesc", "", "", "");
	m_Action.marshall(rpc_resp, "Action", "", "", "");
	m_ActionDesc.marshall(rpc_resp, "ActionDesc", "", "", "");
	m_Priority.marshall(rpc_resp, "Priority", "", "", "");
	m_PriorityDesc.marshall(rpc_resp, "PriorityDesc", "", "", "");
	m_PriorityLevel.marshall(rpc_resp, "PriorityLevel", "", "", "");
	m_IsProtected.marshall(rpc_resp, "IsProtected", "", "", "");
	m_DateTimeScheduled.marshall(rpc_resp, "DateTimeScheduled", "", "", "");
	m_TotalClusterTime.marshall(rpc_resp, "TotalClusterTime", "", "", "");
	m_ApplicationValues.marshall(rpc_resp, "ApplicationValues", "ApplicationValue");
}


void CECLWorkunitLW::copy(CECLWorkunitLW &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Owner.copy(from.m_Owner);
	m_JobName.copy(from.m_JobName);
	m_WuScope.copy(from.m_WuScope);
	m_ClusterName.copy(from.m_ClusterName);
	m_State.copy(from.m_State);
	m_StateDesc.copy(from.m_StateDesc);
	m_Action.copy(from.m_Action);
	m_ActionDesc.copy(from.m_ActionDesc);
	m_Priority.copy(from.m_Priority);
	m_PriorityDesc.copy(from.m_PriorityDesc);
	m_PriorityLevel.copy(from.m_PriorityLevel);
	m_IsProtected.copy(from.m_IsProtected);
	m_DateTimeScheduled.copy(from.m_DateTimeScheduled);
	m_TotalClusterTime.copy(from.m_TotalClusterTime);
	m_ApplicationValues.copy(from.m_ApplicationValues);
}


void CECLWorkunitLW::copy(IConstECLWorkunitLW &ifrom)
{
	setWuid(ifrom.getWuid());
	setOwner(ifrom.getOwner());
	setJobName(ifrom.getJobName());
	setWuScope(ifrom.getWuScope());
	setClusterName(ifrom.getClusterName());
	setState(ifrom.getState());
	setStateDesc(ifrom.getStateDesc());
	setAction(ifrom.getAction());
	setActionDesc(ifrom.getActionDesc());
	setPriority(ifrom.getPriority());
	setPriorityDesc(ifrom.getPriorityDesc());
	setPriorityLevel(ifrom.getPriorityLevel());
	setIsProtected(ifrom.getIsProtected());
	setDateTimeScheduled(ifrom.getDateTimeScheduled());
	setTotalClusterTime(ifrom.getTotalClusterTime());
	setApplicationValues(ifrom.getApplicationValues());
}


void CECLWorkunitLW::getAttributes(IProperties &attributes)
{
}


void CECLWorkunitLW::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_JobName.toStr(ctx, buffer, "JobName", "", true, "", "");
	m_WuScope.toStr(ctx, buffer, "WuScope", "", true, "", "");
	m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_StateDesc.toStr(ctx, buffer, "StateDesc", "", true, "", "");
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	m_ActionDesc.toStr(ctx, buffer, "ActionDesc", "", true, "", "");
	m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
	m_PriorityDesc.toStr(ctx, buffer, "PriorityDesc", "", true, "", "");
	m_PriorityLevel.toStr(ctx, buffer, "PriorityLevel", "", true, "", "");
	m_IsProtected.toStr(ctx, buffer, "IsProtected", "", true, "", "");
	m_DateTimeScheduled.toStr(ctx, buffer, "DateTimeScheduled", "", true, "", "");
	m_TotalClusterTime.toStr(ctx, buffer, "TotalClusterTime", "", true, "", "");
	m_ApplicationValues.toStr(ctx, buffer, "ApplicationValues", "ApplicationValue");
}


void CECLWorkunitLW::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLWorkunitLW::serializer(IEspContext* ctx, IConstECLWorkunitLW &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLWorkunitLW>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field JobName
	{
		const char* s = src.getJobName();
		if (s && *s)
		{
			buffer.append("<JobName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobName>");
		}
	}
	// field WuScope
	{
		const char* s = src.getWuScope();
		if (s && *s)
		{
			buffer.append("<WuScope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WuScope>");
		}
	}
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field State
	{
		int n = src.getState();
		if (n)
			buffer.appendf("<State>%d</State>", n);
	}
	// field StateDesc
	{
		const char* s = src.getStateDesc();
		if (s && *s)
		{
			buffer.append("<StateDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StateDesc>");
		}
	}
	// field Action
	{
		int n = src.getAction();
		if (n)
			buffer.appendf("<Action>%d</Action>", n);
	}
	// field ActionDesc
	{
		const char* s = src.getActionDesc();
		if (s && *s)
		{
			buffer.append("<ActionDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ActionDesc>");
		}
	}
	// field Priority
	{
		int n = src.getPriority();
		if (n)
			buffer.appendf("<Priority>%d</Priority>", n);
	}
	// field PriorityDesc
	{
		const char* s = src.getPriorityDesc();
		if (s && *s)
		{
			buffer.append("<PriorityDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PriorityDesc>");
		}
	}
	// field PriorityLevel
	{
		int n = src.getPriorityLevel();
		if (n)
			buffer.appendf("<PriorityLevel>%d</PriorityLevel>", n);
	}
	// field IsProtected
	{
		bool b = src.getIsProtected();
		if (b)
			buffer.appendf("<IsProtected>1</IsProtected>");
	}
	// field DateTimeScheduled
	{
		const char* s = src.getDateTimeScheduled();
		if (s && *s)
		{
			buffer.append("<DateTimeScheduled>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DateTimeScheduled>");
		}
	}
	// field TotalClusterTime
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=TotalClusterTime
		buffer.append("<TotalClusterTime>");
		buffer.append(src.getTotalClusterTime());
		buffer.append("</TotalClusterTime>");
	}
	// field ApplicationValues
	{
		IArrayOf<IConstApplicationValue>& v = src.getApplicationValues();
		int size = v.length();
		if (size>0)
			buffer.append("<ApplicationValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CApplicationValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ApplicationValues>");
	}
	if (keepRootTag)
		buffer.append("</ECLWorkunitLW>");
}

bool CECLWorkunitLW::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_JobName.unmarshall(rpc_request, "JobName", basepath);
	hasValue |= m_WuScope.unmarshall(rpc_request, "WuScope", basepath);
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_StateDesc.unmarshall(rpc_request, "StateDesc", basepath);
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_ActionDesc.unmarshall(rpc_request, "ActionDesc", basepath);
	hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
	hasValue |= m_PriorityDesc.unmarshall(rpc_request, "PriorityDesc", basepath);
	hasValue |= m_PriorityLevel.unmarshall(rpc_request, "PriorityLevel", basepath);
	hasValue |= m_IsProtected.unmarshall(rpc_request, "IsProtected", basepath);
	hasValue |= m_DateTimeScheduled.unmarshall(rpc_request, "DateTimeScheduled", basepath);
	hasValue |= m_TotalClusterTime.unmarshall(rpc_request, "TotalClusterTime", basepath);
	hasValue |= m_ApplicationValues.unmarshall(rpc_request, "ApplicationValues", basepath);
	return hasValue;
}

bool CECLWorkunitLW::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_JobName.unmarshall(ctx, soapval, "JobName");
	hasValue |= m_WuScope.unmarshall(ctx, soapval, "WuScope");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StateDesc.unmarshall(ctx, soapval, "StateDesc");
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_ActionDesc.unmarshall(ctx, soapval, "ActionDesc");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	hasValue |= m_PriorityDesc.unmarshall(ctx, soapval, "PriorityDesc");
	hasValue |= m_PriorityLevel.unmarshall(ctx, soapval, "PriorityLevel");
	hasValue |= m_IsProtected.unmarshall(ctx, soapval, "IsProtected");
	hasValue |= m_DateTimeScheduled.unmarshall(ctx, soapval, "DateTimeScheduled");
	hasValue |= m_TotalClusterTime.unmarshall(ctx, soapval, "TotalClusterTime");
	hasValue |= m_ApplicationValues.unmarshall(ctx, soapval, "ApplicationValues");
	return hasValue;
}

bool CECLWorkunitLW::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_JobName.unmarshall(ctx, params, attachments, "JobName", basepath);
	hasValue |= m_WuScope.unmarshall(ctx, params, attachments, "WuScope", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StateDesc.unmarshall(ctx, params, attachments, "StateDesc", basepath);
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_ActionDesc.unmarshall(ctx, params, attachments, "ActionDesc", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	hasValue |= m_PriorityDesc.unmarshall(ctx, params, attachments, "PriorityDesc", basepath);
	hasValue |= m_PriorityLevel.unmarshall(ctx, params, attachments, "PriorityLevel", basepath);
	hasValue |= m_IsProtected.unmarshall(ctx, params, attachments, "IsProtected", basepath);
	hasValue |= m_DateTimeScheduled.unmarshall(ctx, params, attachments, "DateTimeScheduled", basepath);
	hasValue |= m_TotalClusterTime.unmarshall(ctx, params, attachments, "TotalClusterTime", basepath);
	hasValue |= m_ApplicationValues.unmarshall(ctx, params, attachments, "ApplicationValues", basepath);
	return hasValue;
}

const char * CECLWorkunitLW::getWuid() { return m_Wuid.query();}
const char * CECLWorkunitLW::getOwner() { return m_Owner.query();}
const char * CECLWorkunitLW::getJobName() { return m_JobName.query();}
const char * CECLWorkunitLW::getWuScope() { return m_WuScope.query();}
const char * CECLWorkunitLW::getClusterName() { return m_ClusterName.query();}
bool CECLWorkunitLW::getState_isNull(){return m_State.is_nil();}
int CECLWorkunitLW::getState() { return m_State;}
const char * CECLWorkunitLW::getStateDesc() { return m_StateDesc.query();}
bool CECLWorkunitLW::getAction_isNull(){return m_Action.is_nil();}
int CECLWorkunitLW::getAction() { return m_Action;}
const char * CECLWorkunitLW::getActionDesc() { return m_ActionDesc.query();}
bool CECLWorkunitLW::getPriority_isNull(){return m_Priority.is_nil();}
int CECLWorkunitLW::getPriority() { return m_Priority;}
const char * CECLWorkunitLW::getPriorityDesc() { return m_PriorityDesc.query();}
bool CECLWorkunitLW::getPriorityLevel_isNull(){return m_PriorityLevel.is_nil();}
int CECLWorkunitLW::getPriorityLevel() { return m_PriorityLevel;}
bool CECLWorkunitLW::getIsProtected_isNull(){return m_IsProtected.is_nil();}
bool CECLWorkunitLW::getIsProtected() { return m_IsProtected;}
const char * CECLWorkunitLW::getDateTimeScheduled() { return m_DateTimeScheduled.query();}
bool CECLWorkunitLW::getTotalClusterTime_isNull(){return m_TotalClusterTime.is_nil();}
unsigned int CECLWorkunitLW::getTotalClusterTime() { return m_TotalClusterTime;}
IArrayOf<IConstApplicationValue> & CECLWorkunitLW::getApplicationValues() { return (IArrayOf<IConstApplicationValue> &) m_ApplicationValues; }
void CECLWorkunitLW::setWuid(const char * val){ m_Wuid.set(val); }
void CECLWorkunitLW::setOwner(const char * val){ m_Owner.set(val); }
void CECLWorkunitLW::setJobName(const char * val){ m_JobName.set(val); }
void CECLWorkunitLW::setWuScope(const char * val){ m_WuScope.set(val); }
void CECLWorkunitLW::setClusterName(const char * val){ m_ClusterName.set(val); }
void CECLWorkunitLW::setState_null(){ m_State.Nil(); }void CECLWorkunitLW::setState(int val){ m_State=val; }
void CECLWorkunitLW::setStateDesc(const char * val){ m_StateDesc.set(val); }
void CECLWorkunitLW::setAction_null(){ m_Action.Nil(); }void CECLWorkunitLW::setAction(int val){ m_Action=val; }
void CECLWorkunitLW::setActionDesc(const char * val){ m_ActionDesc.set(val); }
void CECLWorkunitLW::setPriority_null(){ m_Priority.Nil(); }void CECLWorkunitLW::setPriority(int val){ m_Priority=val; }
void CECLWorkunitLW::setPriorityDesc(const char * val){ m_PriorityDesc.set(val); }
void CECLWorkunitLW::setPriorityLevel_null(){ m_PriorityLevel.Nil(); }void CECLWorkunitLW::setPriorityLevel(int val){ m_PriorityLevel=val; }
void CECLWorkunitLW::setIsProtected_null(){ m_IsProtected.Nil(); }void CECLWorkunitLW::setIsProtected(bool val){ m_IsProtected=val; }
void CECLWorkunitLW::setDateTimeScheduled(const char * val){ m_DateTimeScheduled.set(val); }
void CECLWorkunitLW::setTotalClusterTime_null(){ m_TotalClusterTime.Nil(); }void CECLWorkunitLW::setTotalClusterTime(unsigned int val){ m_TotalClusterTime=val; }
void CECLWorkunitLW::setApplicationValues(IArrayOf<IEspApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspApplicationValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunitLW::setApplicationValues(IArrayOf<IConstApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstApplicationValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspECLWorkunitLW *createECLWorkunitLW(const char *serv, const char *msgname){return ((IEspECLWorkunitLW *)new CECLWorkunitLW(serv /*, msgname*/));}
extern "C"  IClientECLWorkunitLW *createClientECLWorkunitLW(const char *serv, const char *msgname){return ((IClientECLWorkunitLW *)new CECLWorkunitLW(serv /*, msgname*/));}

//=======================================================
// class CECLWorkunit Implementation
//=======================================================

CECLWorkunit::CECLWorkunit(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Owner(nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Jobname(nilRemove),m_Queue(nilRemove),m_StateID(nilRemove),m_State(nilRemove),m_StateEx(nilRemove),m_Description(nilRemove),m_Protected(nilRemove),m_Active(nilRemove),m_Action(nilRemove),m_ActionEx(nilRemove),m_DateTimeScheduled(nilRemove),m_PriorityClass(nilRemove),m_PriorityLevel(nilRemove),m_Scope(nilRemove),m_Snapshot(nilRemove),m_ResultLimit(nilRemove),m_Archived(nilRemove),m_IsPausing(0, nilRemove,false),m_ThorLCR(0, nilRemove,false),m_EventSchedule(nilRemove),m_HaveSubGraphTimings(nilRemove),m_TotalThorTime(nilRemove),m_TotalClusterTime(nilRemove),m_AbortBy(nilRemove),m_AbortTime(nilRemove),m_Query(serviceName, nilRemove),m_Helpers(nilRemove),m_Exceptions(nilRemove),m_Graphs(nilRemove),m_SourceFiles(nilRemove),m_Results(nilRemove),m_Variables(nilRemove),m_Timers(nilRemove),m_DebugValues(nilRemove),m_ApplicationValues(nilRemove),m_Workflows(nilRemove),m_TimingData(nilRemove),m_AllowedClusters(nilRemove),m_ErrorCount(nilRemove),m_WarningCount(nilRemove),m_InfoCount(nilRemove),m_AlertCount(nilRemove),m_GraphCount(nilRemove),m_SourceFileCount(nilRemove),m_ResultCount(nilRemove),m_VariableCount(nilRemove),m_TimerCount(nilRemove),m_HasDebugValue(nilRemove),m_ApplicationValueCount(nilRemove),m_XmlParams(nilRemove),m_AccessFlag(nilRemove),m_ClusterFlag(nilRemove),m_HelpersDesc(nilRemove),m_GraphsDesc(nilRemove),m_SourceFilesDesc(nilRemove),m_ResultsDesc(nilRemove),m_VariablesDesc(nilRemove),m_TimersDesc(nilRemove),m_DebugValuesDesc(nilRemove),m_ApplicationValuesDesc(nilRemove),m_WorkflowsDesc(nilRemove),m_HasArchiveQuery(nilRemove),m_ThorLogList(nilRemove),m_ResourceURLs(nilRemove),m_ResultViewCount(nilRemove),m_ResourceURLCount(nilRemove),m_DebugValueCount(nilRemove),m_WorkflowCount(nilRemove),m_HelpersCount(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLWorkunit");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLWorkunit::CECLWorkunit(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Owner(nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Jobname(nilRemove),m_Queue(nilRemove),m_StateID(nilRemove),m_State(nilRemove),m_StateEx(nilRemove),m_Description(nilRemove),m_Protected(nilRemove),m_Active(nilRemove),m_Action(nilRemove),m_ActionEx(nilRemove),m_DateTimeScheduled(nilRemove),m_PriorityClass(nilRemove),m_PriorityLevel(nilRemove),m_Scope(nilRemove),m_Snapshot(nilRemove),m_ResultLimit(nilRemove),m_Archived(nilRemove),m_IsPausing(0, nilRemove,false),m_ThorLCR(0, nilRemove,false),m_EventSchedule(nilRemove),m_HaveSubGraphTimings(nilRemove),m_TotalThorTime(nilRemove),m_TotalClusterTime(nilRemove),m_AbortBy(nilRemove),m_AbortTime(nilRemove),m_Query(serviceName, nilRemove),m_Helpers(nilRemove),m_Exceptions(nilRemove),m_Graphs(nilRemove),m_SourceFiles(nilRemove),m_Results(nilRemove),m_Variables(nilRemove),m_Timers(nilRemove),m_DebugValues(nilRemove),m_ApplicationValues(nilRemove),m_Workflows(nilRemove),m_TimingData(nilRemove),m_AllowedClusters(nilRemove),m_ErrorCount(nilRemove),m_WarningCount(nilRemove),m_InfoCount(nilRemove),m_AlertCount(nilRemove),m_GraphCount(nilRemove),m_SourceFileCount(nilRemove),m_ResultCount(nilRemove),m_VariableCount(nilRemove),m_TimerCount(nilRemove),m_HasDebugValue(nilRemove),m_ApplicationValueCount(nilRemove),m_XmlParams(nilRemove),m_AccessFlag(nilRemove),m_ClusterFlag(nilRemove),m_HelpersDesc(nilRemove),m_GraphsDesc(nilRemove),m_SourceFilesDesc(nilRemove),m_ResultsDesc(nilRemove),m_VariablesDesc(nilRemove),m_TimersDesc(nilRemove),m_DebugValuesDesc(nilRemove),m_ApplicationValuesDesc(nilRemove),m_WorkflowsDesc(nilRemove),m_HasArchiveQuery(nilRemove),m_ThorLogList(nilRemove),m_ResourceURLs(nilRemove),m_ResultViewCount(nilRemove),m_ResourceURLCount(nilRemove),m_DebugValueCount(nilRemove),m_WorkflowCount(nilRemove),m_HelpersCount(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLWorkunit");
}

StringBuffer &CECLWorkunit::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ECLWorkunit","RoxieCluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RoxieCluster\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Jobname\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StateID\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StateEx\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Protected\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Active\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("ECLWorkunit","ActionEx")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ActionEx\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DateTimeScheduled\" type=\"xsd:dateTime\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityClass\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityLevel\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scope\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Snapshot\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResultLimit\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("ECLWorkunit","Archived")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Archived\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","IsPausing")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IsPausing\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ThorLCR")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ThorLCR\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","EventSchedule")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EventSchedule\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","HaveSubGraphTimings")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"HaveSubGraphTimings\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","TotalThorTime")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"TotalThorTime\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","TotalClusterTime")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"TotalClusterTime\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","AbortBy")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AbortBy\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","AbortTime")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AbortTime\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Query\" type=\"tns:ECLQuery\"/>\n");
		if (!context.suppressed("ECLWorkunit","Helpers")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Helpers\" type=\"tns:ArrayOfECLHelpFile\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Exceptions\" type=\"tns:ArrayOfECLException\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Graphs\" type=\"tns:ArrayOfECLGraph\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourceFiles\" type=\"tns:ArrayOfECLSourceFile\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Results\" type=\"tns:ArrayOfECLResult\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Variables\" type=\"tns:ArrayOfECLResult\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Timers\" type=\"tns:ArrayOfECLTimer\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValues\" type=\"tns:ArrayOfDebugValue\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValues\" type=\"tns:ArrayOfApplicationValue\"/>\n");
		if (!context.suppressed("ECLWorkunit","Workflows")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Workflows\" type=\"tns:ArrayOfECLWorkflow\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","TimingData")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"TimingData\" type=\"tns:ArrayOfECLTimingData\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","AllowedClusters")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AllowedClusters\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"AllowedCluster\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("ECLWorkunit","ErrorCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ErrorCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","WarningCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WarningCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","InfoCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"InfoCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","AlertCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AlertCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","GraphCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GraphCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","SourceFileCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SourceFileCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ResultCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ResultCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","VariableCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"VariableCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","TimerCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"TimerCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","HasDebugValue")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"HasDebugValue\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ApplicationValueCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValueCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","XmlParams")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"XmlParams\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","AccessFlag")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AccessFlag\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ClusterFlag")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterFlag\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","HelpersDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"HelpersDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","GraphsDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GraphsDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","SourceFilesDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SourceFilesDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ResultsDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ResultsDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","VariablesDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"VariablesDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","TimersDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"TimersDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","DebugValuesDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValuesDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ApplicationValuesDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValuesDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","WorkflowsDesc")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WorkflowsDesc\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","HasArchiveQuery")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"HasArchiveQuery\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ThorLogList")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ThorLogList\" type=\"tns:ArrayOfThorLogInfo\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ResourceURLs")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ResourceURLs\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"URL\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("ECLWorkunit","ResultViewCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ResultViewCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","ResourceURLCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ResourceURLCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","DebugValueCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValueCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","WorkflowCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WorkflowCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ECLWorkunit","HelpersCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"HelpersCount\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLQuery::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ECLWorkunit","Helpers"))
			CECLHelpFile::getXsdDefinition(context, request, schema, added);
		CECLException::getXsdDefinition(context, request, schema, added);
		CECLGraph::getXsdDefinition(context, request, schema, added);
		CECLSourceFile::getXsdDefinition(context, request, schema, added);
		CECLResult::getXsdDefinition(context, request, schema, added);
		CECLTimer::getXsdDefinition(context, request, schema, added);
		CDebugValue::getXsdDefinition(context, request, schema, added);
		CApplicationValue::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ECLWorkunit","Workflows"))
			CECLWorkflow::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ECLWorkunit","TimingData"))
			CECLTimingData::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("ECLWorkunit","ThorLogList"))
			CThorLogInfo::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ApplicationValue") && added.getValue("ArrayOfApplicationValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfApplicationValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ApplicationValue\" type=\"tns:ApplicationValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfApplicationValue",1);
	}
	if (added.getValue("DebugValue") && added.getValue("ArrayOfDebugValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDebugValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DebugValue\" type=\"tns:DebugValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDebugValue",1);
	}
	if (added.getValue("ECLException") && added.getValue("ArrayOfECLException")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLException\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLException\" type=\"tns:ECLException\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLException",1);
	}
	if (added.getValue("ECLGraph") && added.getValue("ArrayOfECLGraph")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLGraph\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLGraph\" type=\"tns:ECLGraph\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLGraph",1);
	}
	if (added.getValue("ECLHelpFile") && added.getValue("ArrayOfECLHelpFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLHelpFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLHelpFile\" type=\"tns:ECLHelpFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLHelpFile",1);
	}
	if (added.getValue("ECLResult") && added.getValue("ArrayOfECLResult")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLResult\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLResult\" type=\"tns:ECLResult\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLResult",1);
	}
	if (added.getValue("ECLSourceFile") && added.getValue("ArrayOfECLSourceFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLSourceFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLSourceFile\" type=\"tns:ECLSourceFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLSourceFile",1);
	}
	if (added.getValue("ECLTimer") && added.getValue("ArrayOfECLTimer")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLTimer\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLTimer\" type=\"tns:ECLTimer\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLTimer",1);
	}
	if (added.getValue("ECLTimingData") && added.getValue("ArrayOfECLTimingData")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLTimingData\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLTimingData\" type=\"tns:ECLTimingData\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLTimingData",1);
	}
	if (added.getValue("ECLWorkflow") && added.getValue("ArrayOfECLWorkflow")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLWorkflow\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLWorkflow\" type=\"tns:ECLWorkflow\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLWorkflow",1);
	}
	if (added.getValue("ThorLogInfo") && added.getValue("ArrayOfThorLogInfo")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfThorLogInfo\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ThorLogInfo\" type=\"tns:ThorLogInfo\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfThorLogInfo",1);
	}
	return schema;
}

void CECLWorkunit::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLWorkunit::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLWorkunit","RoxieCluster",1.07);
	info.addMinVersion("ECLWorkunit","ActionEx",1.33);
	info.addMinVersion("ECLWorkunit","Archived",1.01);
	info.addMinVersion("ECLWorkunit","IsPausing",1.3);
	info.addMinVersion("ECLWorkunit","ThorLCR",1.3);
	info.addMinVersion("ECLWorkunit","EventSchedule",1.01);
	info.addMinVersion("ECLWorkunit","HaveSubGraphTimings",1.02);
	info.addDeprVersion("ECLWorkunit","HaveSubGraphTimings",1.71);
	info.addMinVersion("ECLWorkunit","TotalThorTime",1.28);
	info.addDeprVersion("ECLWorkunit","TotalThorTime",1.53);
	info.addMinVersion("ECLWorkunit","TotalClusterTime",1.53);
	info.addMinVersion("ECLWorkunit","AbortBy",1.59);
	info.addMinVersion("ECLWorkunit","AbortTime",1.59);
	info.addMinVersion("ECLWorkunit","Helpers",1.03);
	info.addMinVersion("ECLWorkunit","Workflows",1.01);
	info.addMinVersion("ECLWorkunit","TimingData",1.02);
	info.addMinVersion("ECLWorkunit","AllowedClusters",1.05);
	info.addMinVersion("ECLWorkunit","ErrorCount",1.17);
	info.addMinVersion("ECLWorkunit","WarningCount",1.17);
	info.addMinVersion("ECLWorkunit","InfoCount",1.17);
	info.addMinVersion("ECLWorkunit","AlertCount",1.52);
	info.addMinVersion("ECLWorkunit","GraphCount",1.17);
	info.addMinVersion("ECLWorkunit","SourceFileCount",1.17);
	info.addMinVersion("ECLWorkunit","ResultCount",1.17);
	info.addMinVersion("ECLWorkunit","VariableCount",1.17);
	info.addMinVersion("ECLWorkunit","TimerCount",1.17);
	info.addMinVersion("ECLWorkunit","HasDebugValue",1.17);
	info.addMinVersion("ECLWorkunit","ApplicationValueCount",1.17);
	info.addMinVersion("ECLWorkunit","XmlParams",1.22);
	info.addMinVersion("ECLWorkunit","AccessFlag",1.23);
	info.addMinVersion("ECLWorkunit","ClusterFlag",1.24);
	info.addMinVersion("ECLWorkunit","HelpersDesc",1.29);
	info.addMinVersion("ECLWorkunit","GraphsDesc",1.29);
	info.addMinVersion("ECLWorkunit","SourceFilesDesc",1.29);
	info.addMinVersion("ECLWorkunit","ResultsDesc",1.29);
	info.addMinVersion("ECLWorkunit","VariablesDesc",1.29);
	info.addMinVersion("ECLWorkunit","TimersDesc",1.29);
	info.addMinVersion("ECLWorkunit","DebugValuesDesc",1.29);
	info.addMinVersion("ECLWorkunit","ApplicationValuesDesc",1.29);
	info.addMinVersion("ECLWorkunit","WorkflowsDesc",1.29);
	info.addMinVersion("ECLWorkunit","HasArchiveQuery",1.31);
	info.addMinVersion("ECLWorkunit","ThorLogList",1.38);
	info.addMinVersion("ECLWorkunit","ResourceURLs",1.47);
	info.addMinVersion("ECLWorkunit","ResultViewCount",1.5);
	info.addMinVersion("ECLWorkunit","ResourceURLCount",1.5);
	info.addMinVersion("ECLWorkunit","DebugValueCount",1.5);
	info.addMinVersion("ECLWorkunit","WorkflowCount",1.5);
	info.addMinVersion("ECLWorkunit","HelpersCount",1.67);
	if (!added.getValue("ApplicationValue"))
	{
		added.setValue("ApplicationValue",1);
		CApplicationValue::getMapInfo(info,added);
	}
	if (!added.getValue("DebugValue"))
	{
		added.setValue("DebugValue",1);
		CDebugValue::getMapInfo(info,added);
	}
	if (!added.getValue("ECLException"))
	{
		added.setValue("ECLException",1);
		CECLException::getMapInfo(info,added);
	}
	if (!added.getValue("ECLGraph"))
	{
		added.setValue("ECLGraph",1);
		CECLGraph::getMapInfo(info,added);
	}
	if (!added.getValue("ECLHelpFile"))
	{
		added.setValue("ECLHelpFile",1);
		CECLHelpFile::getMapInfo(info,added);
	}
	if (!added.getValue("ECLQuery"))
	{
		added.setValue("ECLQuery",1);
		CECLQuery::getMapInfo(info,added);
	}
	if (!added.getValue("ECLResult"))
	{
		added.setValue("ECLResult",1);
		CECLResult::getMapInfo(info,added);
	}
	if (!added.getValue("ECLSourceFile"))
	{
		added.setValue("ECLSourceFile",1);
		CECLSourceFile::getMapInfo(info,added);
	}
	if (!added.getValue("ECLTimer"))
	{
		added.setValue("ECLTimer",1);
		CECLTimer::getMapInfo(info,added);
	}
	if (!added.getValue("ECLTimingData"))
	{
		added.setValue("ECLTimingData",1);
		CECLTimingData::getMapInfo(info,added);
	}
	if (!added.getValue("ECLWorkflow"))
	{
		added.setValue("ECLWorkflow",1);
		CECLWorkflow::getMapInfo(info,added);
	}
	if (!added.getValue("ThorLogInfo"))
	{
		added.setValue("ThorLogInfo",1);
		CThorLogInfo::getMapInfo(info,added);
	}
}

StringBuffer &CECLWorkunit::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLWorkunit","RoxieCluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RoxieCluster");
		form.appendf("  <tr><td><b>RoxieCluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Jobname");
	form.appendf("  <tr><td><b>Jobname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queue");
	form.appendf("  <tr><td><b>Queue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("StateID");
	form.appendf("  <tr><td><b>StateID: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StateEx");
	form.appendf("  <tr><td><b>StateEx: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Protected");
	
	form.appendf("  <tr><td><b>Protected? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Active");
	
	form.appendf("  <tr><td><b>Active? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLWorkunit","ActionEx")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ActionEx");
		form.appendf("  <tr><td><b>ActionEx: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DateTimeScheduled");
	form.appendf("  <tr><td><b>DateTimeScheduled: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PriorityClass");
	form.appendf("  <tr><td><b>PriorityClass: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PriorityLevel");
	form.appendf("  <tr><td><b>PriorityLevel: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scope");
	form.appendf("  <tr><td><b>Scope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Snapshot");
	form.appendf("  <tr><td><b>Snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ResultLimit");
	form.appendf("  <tr><td><b>ResultLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLWorkunit","Archived")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Archived");
		
	form.appendf("  <tr><td><b>Archived? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLWorkunit","IsPausing")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsPausing");
		
	form.appendf("  <tr><td><b>IsPausing? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLWorkunit","ThorLCR")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ThorLCR");
		
	form.appendf("  <tr><td><b>ThorLCR? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLWorkunit","EventSchedule")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("EventSchedule");
		form.appendf("  <tr><td><b>EventSchedule: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","HaveSubGraphTimings")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("HaveSubGraphTimings");
		
	form.appendf("  <tr><td><b>HaveSubGraphTimings? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLWorkunit","TotalThorTime")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("TotalThorTime");
		form.appendf("  <tr><td><b>TotalThorTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","TotalClusterTime")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("TotalClusterTime");
		form.appendf("  <tr><td><b>TotalClusterTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","AbortBy")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("AbortBy");
		form.appendf("  <tr><td><b>AbortBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","AbortTime")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("AbortTime");
		form.appendf("  <tr><td><b>AbortTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Query");
	form.append("<tr>").append("<td><b>Query: </b></td><td><hr/>");
	CECLQuery::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (!context.suppressed("ECLWorkunit","Helpers")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Helpers");
		form.appendf("<tr><td><b>Helpers: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Exceptions");
	form.appendf("<tr><td><b>Exceptions: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Graphs");
	form.appendf("<tr><td><b>Graphs: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourceFiles");
	form.appendf("<tr><td><b>SourceFiles: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Results");
	form.appendf("<tr><td><b>Results: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Variables");
	form.appendf("<tr><td><b>Variables: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Timers");
	form.appendf("<tr><td><b>Timers: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DebugValues");
	form.appendf("<tr><td><b>DebugValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ApplicationValues");
	form.appendf("<tr><td><b>ApplicationValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("ECLWorkunit","Workflows")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Workflows");
		form.appendf("<tr><td><b>Workflows: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("ECLWorkunit","TimingData")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("TimingData");
		form.appendf("<tr><td><b>TimingData: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("ECLWorkunit","AllowedClusters")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("AllowedClusters");
		form.appendf("<tr><td><b>AllowedClusters: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("ECLWorkunit","ErrorCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ErrorCount");
		form.appendf("  <tr><td><b>ErrorCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","WarningCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("WarningCount");
		form.appendf("  <tr><td><b>WarningCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","InfoCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("InfoCount");
		form.appendf("  <tr><td><b>InfoCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","AlertCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("AlertCount");
		form.appendf("  <tr><td><b>AlertCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","GraphCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("GraphCount");
		form.appendf("  <tr><td><b>GraphCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","SourceFileCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("SourceFileCount");
		form.appendf("  <tr><td><b>SourceFileCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","ResultCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ResultCount");
		form.appendf("  <tr><td><b>ResultCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","VariableCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("VariableCount");
		form.appendf("  <tr><td><b>VariableCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","TimerCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("TimerCount");
		form.appendf("  <tr><td><b>TimerCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","HasDebugValue")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("HasDebugValue");
		
	form.appendf("  <tr><td><b>HasDebugValue? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLWorkunit","ApplicationValueCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ApplicationValueCount");
		form.appendf("  <tr><td><b>ApplicationValueCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","XmlParams")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("XmlParams");
		form.appendf("  <tr><td><b>XmlParams: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","AccessFlag")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("AccessFlag");
		form.appendf("  <tr><td><b>AccessFlag: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","ClusterFlag")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ClusterFlag");
		form.appendf("  <tr><td><b>ClusterFlag: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","HelpersDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("HelpersDesc");
		form.appendf("  <tr><td><b>HelpersDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","GraphsDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GraphsDesc");
		form.appendf("  <tr><td><b>GraphsDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","SourceFilesDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SourceFilesDesc");
		form.appendf("  <tr><td><b>SourceFilesDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","ResultsDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ResultsDesc");
		form.appendf("  <tr><td><b>ResultsDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","VariablesDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("VariablesDesc");
		form.appendf("  <tr><td><b>VariablesDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","TimersDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("TimersDesc");
		form.appendf("  <tr><td><b>TimersDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","DebugValuesDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DebugValuesDesc");
		form.appendf("  <tr><td><b>DebugValuesDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","ApplicationValuesDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ApplicationValuesDesc");
		form.appendf("  <tr><td><b>ApplicationValuesDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","WorkflowsDesc")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WorkflowsDesc");
		form.appendf("  <tr><td><b>WorkflowsDesc: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","HasArchiveQuery")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("HasArchiveQuery");
		
	form.appendf("  <tr><td><b>HasArchiveQuery? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("ECLWorkunit","ThorLogList")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ThorLogList");
		form.appendf("<tr><td><b>ThorLogList: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("ECLWorkunit","ResourceURLs")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ResourceURLs");
		form.appendf("<tr><td><b>ResourceURLs: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("ECLWorkunit","ResultViewCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ResultViewCount");
		form.appendf("  <tr><td><b>ResultViewCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","ResourceURLCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ResourceURLCount");
		form.appendf("  <tr><td><b>ResourceURLCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","DebugValueCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("DebugValueCount");
		form.appendf("  <tr><td><b>DebugValueCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","WorkflowCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("WorkflowCount");
		form.appendf("  <tr><td><b>WorkflowCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLWorkunit","HelpersCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("HelpersCount");
		form.appendf("  <tr><td><b>HelpersCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLWorkunit::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLWorkunit::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.07))
		m_RoxieCluster.marshall(rpc_resp, "RoxieCluster", "", "", "");
	m_Jobname.marshall(rpc_resp, "Jobname", "", "", "");
	m_Queue.marshall(rpc_resp, "Queue", "", "", "");
	m_StateID.marshall(rpc_resp, "StateID", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_StateEx.marshall(rpc_resp, "StateEx", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
	m_Protected.marshall(rpc_resp, "Protected", "", "", "");
	m_Active.marshall(rpc_resp, "Active", "", "", "");
	m_Action.marshall(rpc_resp, "Action", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.33))
		m_ActionEx.marshall(rpc_resp, "ActionEx", "", "", "");
	m_DateTimeScheduled.marshall(rpc_resp, "DateTimeScheduled", "", "", "");
	m_PriorityClass.marshall(rpc_resp, "PriorityClass", "", "", "");
	m_PriorityLevel.marshall(rpc_resp, "PriorityLevel", "", "", "");
	m_Scope.marshall(rpc_resp, "Scope", "", "", "");
	m_Snapshot.marshall(rpc_resp, "Snapshot", "", "", "");
	m_ResultLimit.marshall(rpc_resp, "ResultLimit", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Archived.marshall(rpc_resp, "Archived", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_IsPausing.marshall(rpc_resp, "IsPausing", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_ThorLCR.marshall(rpc_resp, "ThorLCR", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_EventSchedule.marshall(rpc_resp, "EventSchedule", "", "", "");
	if ((clientVer==-1.0 || (clientVer>=1.02 && clientVer<1.71)))
		m_HaveSubGraphTimings.marshall(rpc_resp, "HaveSubGraphTimings", "", "", "");
	if ((clientVer==-1.0 || (clientVer>=1.28 && clientVer<1.53)))
		m_TotalThorTime.marshall(rpc_resp, "TotalThorTime", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.53))
		m_TotalClusterTime.marshall(rpc_resp, "TotalClusterTime", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.59))
		m_AbortBy.marshall(rpc_resp, "AbortBy", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.59))
		m_AbortTime.marshall(rpc_resp, "AbortTime", "", "", "");
	m_Query.marshall(rpc_resp, "Query", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_Helpers.marshall(rpc_resp, "Helpers", "ECLHelpFile");
	m_Exceptions.marshall(rpc_resp, "Exceptions", "ECLException");
	m_Graphs.marshall(rpc_resp, "Graphs", "ECLGraph");
	m_SourceFiles.marshall(rpc_resp, "SourceFiles", "ECLSourceFile");
	m_Results.marshall(rpc_resp, "Results", "ECLResult");
	m_Variables.marshall(rpc_resp, "Variables", "ECLResult");
	m_Timers.marshall(rpc_resp, "Timers", "ECLTimer");
	m_DebugValues.marshall(rpc_resp, "DebugValues", "DebugValue");
	m_ApplicationValues.marshall(rpc_resp, "ApplicationValues", "ApplicationValue");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Workflows.marshall(rpc_resp, "Workflows", "ECLWorkflow");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_TimingData.marshall(rpc_resp, "TimingData", "ECLTimingData");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_AllowedClusters.marshall(rpc_resp, "AllowedClusters", "AllowedCluster");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_ErrorCount.marshall(rpc_resp, "ErrorCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_WarningCount.marshall(rpc_resp, "WarningCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_InfoCount.marshall(rpc_resp, "InfoCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.52))
		m_AlertCount.marshall(rpc_resp, "AlertCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_GraphCount.marshall(rpc_resp, "GraphCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_SourceFileCount.marshall(rpc_resp, "SourceFileCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_ResultCount.marshall(rpc_resp, "ResultCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_VariableCount.marshall(rpc_resp, "VariableCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_TimerCount.marshall(rpc_resp, "TimerCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_HasDebugValue.marshall(rpc_resp, "HasDebugValue", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_ApplicationValueCount.marshall(rpc_resp, "ApplicationValueCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_XmlParams.marshall(rpc_resp, "XmlParams", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.23))
		m_AccessFlag.marshall(rpc_resp, "AccessFlag", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.24))
		m_ClusterFlag.marshall(rpc_resp, "ClusterFlag", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_HelpersDesc.marshall(rpc_resp, "HelpersDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_GraphsDesc.marshall(rpc_resp, "GraphsDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_SourceFilesDesc.marshall(rpc_resp, "SourceFilesDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ResultsDesc.marshall(rpc_resp, "ResultsDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_VariablesDesc.marshall(rpc_resp, "VariablesDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_TimersDesc.marshall(rpc_resp, "TimersDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_DebugValuesDesc.marshall(rpc_resp, "DebugValuesDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ApplicationValuesDesc.marshall(rpc_resp, "ApplicationValuesDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_WorkflowsDesc.marshall(rpc_resp, "WorkflowsDesc", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_HasArchiveQuery.marshall(rpc_resp, "HasArchiveQuery", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_ThorLogList.marshall(rpc_resp, "ThorLogList", "ThorLogInfo");
	if ((clientVer==-1.0 || clientVer>=1.47))
		m_ResourceURLs.marshall(rpc_resp, "ResourceURLs", "URL");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_ResultViewCount.marshall(rpc_resp, "ResultViewCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_ResourceURLCount.marshall(rpc_resp, "ResourceURLCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_DebugValueCount.marshall(rpc_resp, "DebugValueCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_WorkflowCount.marshall(rpc_resp, "WorkflowCount", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.67))
		m_HelpersCount.marshall(rpc_resp, "HelpersCount", "", "", "");
}


void CECLWorkunit::copy(CECLWorkunit &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Owner.copy(from.m_Owner);
	m_Cluster.copy(from.m_Cluster);
	m_RoxieCluster.copy(from.m_RoxieCluster);
	m_Jobname.copy(from.m_Jobname);
	m_Queue.copy(from.m_Queue);
	m_StateID.copy(from.m_StateID);
	m_State.copy(from.m_State);
	m_StateEx.copy(from.m_StateEx);
	m_Description.copy(from.m_Description);
	m_Protected.copy(from.m_Protected);
	m_Active.copy(from.m_Active);
	m_Action.copy(from.m_Action);
	m_ActionEx.copy(from.m_ActionEx);
	m_DateTimeScheduled.copy(from.m_DateTimeScheduled);
	m_PriorityClass.copy(from.m_PriorityClass);
	m_PriorityLevel.copy(from.m_PriorityLevel);
	m_Scope.copy(from.m_Scope);
	m_Snapshot.copy(from.m_Snapshot);
	m_ResultLimit.copy(from.m_ResultLimit);
	m_Archived.copy(from.m_Archived);
	m_IsPausing.copy(from.m_IsPausing);
	m_ThorLCR.copy(from.m_ThorLCR);
	m_EventSchedule.copy(from.m_EventSchedule);
	m_HaveSubGraphTimings.copy(from.m_HaveSubGraphTimings);
	m_TotalThorTime.copy(from.m_TotalThorTime);
	m_TotalClusterTime.copy(from.m_TotalClusterTime);
	m_AbortBy.copy(from.m_AbortBy);
	m_AbortTime.copy(from.m_AbortTime);
	m_Query.copy(from.m_Query);
	m_Helpers.copy(from.m_Helpers);
	m_Exceptions.copy(from.m_Exceptions);
	m_Graphs.copy(from.m_Graphs);
	m_SourceFiles.copy(from.m_SourceFiles);
	m_Results.copy(from.m_Results);
	m_Variables.copy(from.m_Variables);
	m_Timers.copy(from.m_Timers);
	m_DebugValues.copy(from.m_DebugValues);
	m_ApplicationValues.copy(from.m_ApplicationValues);
	m_Workflows.copy(from.m_Workflows);
	m_TimingData.copy(from.m_TimingData);
	m_AllowedClusters.copy(from.m_AllowedClusters);
	m_ErrorCount.copy(from.m_ErrorCount);
	m_WarningCount.copy(from.m_WarningCount);
	m_InfoCount.copy(from.m_InfoCount);
	m_AlertCount.copy(from.m_AlertCount);
	m_GraphCount.copy(from.m_GraphCount);
	m_SourceFileCount.copy(from.m_SourceFileCount);
	m_ResultCount.copy(from.m_ResultCount);
	m_VariableCount.copy(from.m_VariableCount);
	m_TimerCount.copy(from.m_TimerCount);
	m_HasDebugValue.copy(from.m_HasDebugValue);
	m_ApplicationValueCount.copy(from.m_ApplicationValueCount);
	m_XmlParams.copy(from.m_XmlParams);
	m_AccessFlag.copy(from.m_AccessFlag);
	m_ClusterFlag.copy(from.m_ClusterFlag);
	m_HelpersDesc.copy(from.m_HelpersDesc);
	m_GraphsDesc.copy(from.m_GraphsDesc);
	m_SourceFilesDesc.copy(from.m_SourceFilesDesc);
	m_ResultsDesc.copy(from.m_ResultsDesc);
	m_VariablesDesc.copy(from.m_VariablesDesc);
	m_TimersDesc.copy(from.m_TimersDesc);
	m_DebugValuesDesc.copy(from.m_DebugValuesDesc);
	m_ApplicationValuesDesc.copy(from.m_ApplicationValuesDesc);
	m_WorkflowsDesc.copy(from.m_WorkflowsDesc);
	m_HasArchiveQuery.copy(from.m_HasArchiveQuery);
	m_ThorLogList.copy(from.m_ThorLogList);
	m_ResourceURLs.copy(from.m_ResourceURLs);
	m_ResultViewCount.copy(from.m_ResultViewCount);
	m_ResourceURLCount.copy(from.m_ResourceURLCount);
	m_DebugValueCount.copy(from.m_DebugValueCount);
	m_WorkflowCount.copy(from.m_WorkflowCount);
	m_HelpersCount.copy(from.m_HelpersCount);
}


void CECLWorkunit::copy(IConstECLWorkunit &ifrom)
{
	setWuid(ifrom.getWuid());
	setOwner(ifrom.getOwner());
	setCluster(ifrom.getCluster());
	setRoxieCluster(ifrom.getRoxieCluster());
	setJobname(ifrom.getJobname());
	setQueue(ifrom.getQueue());
	setStateID(ifrom.getStateID());
	setState(ifrom.getState());
	setStateEx(ifrom.getStateEx());
	setDescription(ifrom.getDescription());
	setProtected(ifrom.getProtected());
	setActive(ifrom.getActive());
	setAction(ifrom.getAction());
	setActionEx(ifrom.getActionEx());
	setDateTimeScheduled(ifrom.getDateTimeScheduled());
	setPriorityClass(ifrom.getPriorityClass());
	setPriorityLevel(ifrom.getPriorityLevel());
	setScope(ifrom.getScope());
	setSnapshot(ifrom.getSnapshot());
	setResultLimit(ifrom.getResultLimit());
	setArchived(ifrom.getArchived());
	setIsPausing(ifrom.getIsPausing());
	setThorLCR(ifrom.getThorLCR());
	setEventSchedule(ifrom.getEventSchedule());
	setHaveSubGraphTimings(ifrom.getHaveSubGraphTimings());
	setTotalThorTime(ifrom.getTotalThorTime());
	setTotalClusterTime(ifrom.getTotalClusterTime());
	setAbortBy(ifrom.getAbortBy());
	setAbortTime(ifrom.getAbortTime());
	setQuery(ifrom.getQuery());
	setHelpers(ifrom.getHelpers());
	setExceptions(ifrom.getExceptions());
	setGraphs(ifrom.getGraphs());
	setSourceFiles(ifrom.getSourceFiles());
	setResults(ifrom.getResults());
	setVariables(ifrom.getVariables());
	setTimers(ifrom.getTimers());
	setDebugValues(ifrom.getDebugValues());
	setApplicationValues(ifrom.getApplicationValues());
	setWorkflows(ifrom.getWorkflows());
	setTimingData(ifrom.getTimingData());
	setAllowedClusters(ifrom.getAllowedClusters());
	setErrorCount(ifrom.getErrorCount());
	setWarningCount(ifrom.getWarningCount());
	setInfoCount(ifrom.getInfoCount());
	setAlertCount(ifrom.getAlertCount());
	setGraphCount(ifrom.getGraphCount());
	setSourceFileCount(ifrom.getSourceFileCount());
	setResultCount(ifrom.getResultCount());
	setVariableCount(ifrom.getVariableCount());
	setTimerCount(ifrom.getTimerCount());
	setHasDebugValue(ifrom.getHasDebugValue());
	setApplicationValueCount(ifrom.getApplicationValueCount());
	setXmlParams(ifrom.getXmlParams());
	setAccessFlag(ifrom.getAccessFlag());
	setClusterFlag(ifrom.getClusterFlag());
	setHelpersDesc(ifrom.getHelpersDesc());
	setGraphsDesc(ifrom.getGraphsDesc());
	setSourceFilesDesc(ifrom.getSourceFilesDesc());
	setResultsDesc(ifrom.getResultsDesc());
	setVariablesDesc(ifrom.getVariablesDesc());
	setTimersDesc(ifrom.getTimersDesc());
	setDebugValuesDesc(ifrom.getDebugValuesDesc());
	setApplicationValuesDesc(ifrom.getApplicationValuesDesc());
	setWorkflowsDesc(ifrom.getWorkflowsDesc());
	setHasArchiveQuery(ifrom.getHasArchiveQuery());
	setThorLogList(ifrom.getThorLogList());
	setResourceURLs(ifrom.getResourceURLs());
	setResultViewCount(ifrom.getResultViewCount());
	setResourceURLCount(ifrom.getResourceURLCount());
	setDebugValueCount(ifrom.getDebugValueCount());
	setWorkflowCount(ifrom.getWorkflowCount());
	setHelpersCount(ifrom.getHelpersCount());
}


void CECLWorkunit::getAttributes(IProperties &attributes)
{
}


void CECLWorkunit::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.07))
		m_RoxieCluster.toStr(ctx, buffer, "RoxieCluster", "", true, "", "");
	m_Jobname.toStr(ctx, buffer, "Jobname", "", true, "", "");
	m_Queue.toStr(ctx, buffer, "Queue", "", true, "", "");
	m_StateID.toStr(ctx, buffer, "StateID", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_StateEx.toStr(ctx, buffer, "StateEx", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	m_Protected.toStr(ctx, buffer, "Protected", "", true, "", "");
	m_Active.toStr(ctx, buffer, "Active", "", true, "", "");
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.33))
		m_ActionEx.toStr(ctx, buffer, "ActionEx", "", true, "", "");
	m_DateTimeScheduled.toStr(ctx, buffer, "DateTimeScheduled", "", true, "", "");
	m_PriorityClass.toStr(ctx, buffer, "PriorityClass", "", true, "", "");
	m_PriorityLevel.toStr(ctx, buffer, "PriorityLevel", "", true, "", "");
	m_Scope.toStr(ctx, buffer, "Scope", "", true, "", "");
	m_Snapshot.toStr(ctx, buffer, "Snapshot", "", true, "", "");
	m_ResultLimit.toStr(ctx, buffer, "ResultLimit", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Archived.toStr(ctx, buffer, "Archived", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_IsPausing.toStr(ctx, buffer, "IsPausing", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.3))
		m_ThorLCR.toStr(ctx, buffer, "ThorLCR", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_EventSchedule.toStr(ctx, buffer, "EventSchedule", "", true, "", "");
	if ((clientVer==-1.0 || (clientVer>=1.02 && clientVer<1.71)))
		m_HaveSubGraphTimings.toStr(ctx, buffer, "HaveSubGraphTimings", "", true, "", "");
	if ((clientVer==-1.0 || (clientVer>=1.28 && clientVer<1.53)))
		m_TotalThorTime.toStr(ctx, buffer, "TotalThorTime", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.53))
		m_TotalClusterTime.toStr(ctx, buffer, "TotalClusterTime", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.59))
		m_AbortBy.toStr(ctx, buffer, "AbortBy", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.59))
		m_AbortTime.toStr(ctx, buffer, "AbortTime", "", true, "", "");
	m_Query.toStr(ctx, buffer, "Query", "", false, "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_Helpers.toStr(ctx, buffer, "Helpers", "ECLHelpFile");
	m_Exceptions.toStr(ctx, buffer, "Exceptions", "ECLException");
	m_Graphs.toStr(ctx, buffer, "Graphs", "ECLGraph");
	m_SourceFiles.toStr(ctx, buffer, "SourceFiles", "ECLSourceFile");
	m_Results.toStr(ctx, buffer, "Results", "ECLResult");
	m_Variables.toStr(ctx, buffer, "Variables", "ECLResult");
	m_Timers.toStr(ctx, buffer, "Timers", "ECLTimer");
	m_DebugValues.toStr(ctx, buffer, "DebugValues", "DebugValue");
	m_ApplicationValues.toStr(ctx, buffer, "ApplicationValues", "ApplicationValue");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Workflows.toStr(ctx, buffer, "Workflows", "ECLWorkflow");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_TimingData.toStr(ctx, buffer, "TimingData", "ECLTimingData");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_AllowedClusters.toStr(ctx, buffer, "AllowedClusters", "AllowedCluster");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_ErrorCount.toStr(ctx, buffer, "ErrorCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_WarningCount.toStr(ctx, buffer, "WarningCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_InfoCount.toStr(ctx, buffer, "InfoCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.52))
		m_AlertCount.toStr(ctx, buffer, "AlertCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_GraphCount.toStr(ctx, buffer, "GraphCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_SourceFileCount.toStr(ctx, buffer, "SourceFileCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_ResultCount.toStr(ctx, buffer, "ResultCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_VariableCount.toStr(ctx, buffer, "VariableCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_TimerCount.toStr(ctx, buffer, "TimerCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_HasDebugValue.toStr(ctx, buffer, "HasDebugValue", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.17))
		m_ApplicationValueCount.toStr(ctx, buffer, "ApplicationValueCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_XmlParams.toStr(ctx, buffer, "XmlParams", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.23))
		m_AccessFlag.toStr(ctx, buffer, "AccessFlag", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.24))
		m_ClusterFlag.toStr(ctx, buffer, "ClusterFlag", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_HelpersDesc.toStr(ctx, buffer, "HelpersDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_GraphsDesc.toStr(ctx, buffer, "GraphsDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_SourceFilesDesc.toStr(ctx, buffer, "SourceFilesDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ResultsDesc.toStr(ctx, buffer, "ResultsDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_VariablesDesc.toStr(ctx, buffer, "VariablesDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_TimersDesc.toStr(ctx, buffer, "TimersDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_DebugValuesDesc.toStr(ctx, buffer, "DebugValuesDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_ApplicationValuesDesc.toStr(ctx, buffer, "ApplicationValuesDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.29))
		m_WorkflowsDesc.toStr(ctx, buffer, "WorkflowsDesc", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.31))
		m_HasArchiveQuery.toStr(ctx, buffer, "HasArchiveQuery", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_ThorLogList.toStr(ctx, buffer, "ThorLogList", "ThorLogInfo");
	if ((clientVer==-1.0 || clientVer>=1.47))
		m_ResourceURLs.toStr(ctx, buffer, "ResourceURLs", "URL");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_ResultViewCount.toStr(ctx, buffer, "ResultViewCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_ResourceURLCount.toStr(ctx, buffer, "ResourceURLCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_DebugValueCount.toStr(ctx, buffer, "DebugValueCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_WorkflowCount.toStr(ctx, buffer, "WorkflowCount", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.67))
		m_HelpersCount.toStr(ctx, buffer, "HelpersCount", "", true, "", "");
}


void CECLWorkunit::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLWorkunit::serializer(IEspContext* ctx, IConstECLWorkunit &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLWorkunit>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field RoxieCluster
	if ((clientVer==-1.0 || clientVer>=1.07))
	{
		const char* s = src.getRoxieCluster();
		if (s && *s)
		{
			buffer.append("<RoxieCluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RoxieCluster>");
		}
	}
	// field Jobname
	{
		const char* s = src.getJobname();
		if (s && *s)
		{
			buffer.append("<Jobname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Jobname>");
		}
	}
	// field Queue
	{
		const char* s = src.getQueue();
		if (s && *s)
		{
			buffer.append("<Queue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Queue>");
		}
	}
	// field StateID
	{
		int n = src.getStateID();
		if (n)
			buffer.appendf("<StateID>%d</StateID>", n);
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field StateEx
	{
		const char* s = src.getStateEx();
		if (s && *s)
		{
			buffer.append("<StateEx>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StateEx>");
		}
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field Protected
	{
		bool b = src.getProtected();
		if (b)
			buffer.appendf("<Protected>1</Protected>");
	}
	// field Active
	{
		bool b = src.getActive();
		if (b)
			buffer.appendf("<Active>1</Active>");
	}
	// field Action
	{
		int n = src.getAction();
		if (n)
			buffer.appendf("<Action>%d</Action>", n);
	}
	// field ActionEx
	if ((clientVer==-1.0 || clientVer>=1.33))
	{
		const char* s = src.getActionEx();
		if (s && *s)
		{
			buffer.append("<ActionEx>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ActionEx>");
		}
	}
	// field DateTimeScheduled
	{
		const char* s = src.getDateTimeScheduled();
		if (s && *s)
		{
			buffer.append("<DateTimeScheduled>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DateTimeScheduled>");
		}
	}
	// field PriorityClass
	{
		int n = src.getPriorityClass();
		if (n)
			buffer.appendf("<PriorityClass>%d</PriorityClass>", n);
	}
	// field PriorityLevel
	{
		int n = src.getPriorityLevel();
		if (n)
			buffer.appendf("<PriorityLevel>%d</PriorityLevel>", n);
	}
	// field Scope
	{
		const char* s = src.getScope();
		if (s && *s)
		{
			buffer.append("<Scope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Scope>");
		}
	}
	// field Snapshot
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<Snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Snapshot>");
		}
	}
	// field ResultLimit
	{
		int n = src.getResultLimit();
		if (n)
			buffer.appendf("<ResultLimit>%d</ResultLimit>", n);
	}
	// field Archived
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		bool b = src.getArchived();
		if (b)
			buffer.appendf("<Archived>1</Archived>");
	}
	// field IsPausing
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		bool b = src.getIsPausing();
		if (b)
			buffer.appendf("<IsPausing>1</IsPausing>");
	}
	// field ThorLCR
	if ((clientVer==-1.0 || clientVer>=1.3))
	{
		bool b = src.getThorLCR();
		if (b)
			buffer.appendf("<ThorLCR>1</ThorLCR>");
	}
	// field EventSchedule
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		int n = src.getEventSchedule();
		if (n)
			buffer.appendf("<EventSchedule>%d</EventSchedule>", n);
	}
	// field HaveSubGraphTimings
	if ((clientVer==-1.0 || (clientVer>=1.02 && clientVer<1.71)))
	{
		bool b = src.getHaveSubGraphTimings();
		if (b)
			buffer.appendf("<HaveSubGraphTimings>1</HaveSubGraphTimings>");
	}
	// field TotalThorTime
	if ((clientVer==-1.0 || (clientVer>=1.28 && clientVer<1.53)))
	{
		const char* s = src.getTotalThorTime();
		if (s && *s)
		{
			buffer.append("<TotalThorTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</TotalThorTime>");
		}
	}
	// field TotalClusterTime
	if ((clientVer==-1.0 || clientVer>=1.53))
	{
		const char* s = src.getTotalClusterTime();
		if (s && *s)
		{
			buffer.append("<TotalClusterTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</TotalClusterTime>");
		}
	}
	// field AbortBy
	if ((clientVer==-1.0 || clientVer>=1.59))
	{
		const char* s = src.getAbortBy();
		if (s && *s)
		{
			buffer.append("<AbortBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</AbortBy>");
		}
	}
	// field AbortTime
	if ((clientVer==-1.0 || clientVer>=1.59))
	{
		const char* s = src.getAbortTime();
		if (s && *s)
		{
			buffer.append("<AbortTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</AbortTime>");
		}
	}
	// field Query
	{
		StringBuffer tmp;
		CECLQuery::serializer(ctx,src.getQuery(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Query>%s</Query>",tmp.str());
	}
	// field Helpers
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		IArrayOf<IConstECLHelpFile>& v = src.getHelpers();
		int size = v.length();
		if (size>0)
			buffer.append("<Helpers>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLHelpFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Helpers>");
	}
	// field Exceptions
	{
		IArrayOf<IConstECLException>& v = src.getExceptions();
		int size = v.length();
		if (size>0)
			buffer.append("<Exceptions>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLException::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Exceptions>");
	}
	// field Graphs
	{
		IArrayOf<IConstECLGraph>& v = src.getGraphs();
		int size = v.length();
		if (size>0)
			buffer.append("<Graphs>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLGraph::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Graphs>");
	}
	// field SourceFiles
	{
		IArrayOf<IConstECLSourceFile>& v = src.getSourceFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<SourceFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLSourceFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</SourceFiles>");
	}
	// field Results
	{
		IArrayOf<IConstECLResult>& v = src.getResults();
		int size = v.length();
		if (size>0)
			buffer.append("<Results>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Results>");
	}
	// field Variables
	{
		IArrayOf<IConstECLResult>& v = src.getVariables();
		int size = v.length();
		if (size>0)
			buffer.append("<Variables>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Variables>");
	}
	// field Timers
	{
		IArrayOf<IConstECLTimer>& v = src.getTimers();
		int size = v.length();
		if (size>0)
			buffer.append("<Timers>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLTimer::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Timers>");
	}
	// field DebugValues
	{
		IArrayOf<IConstDebugValue>& v = src.getDebugValues();
		int size = v.length();
		if (size>0)
			buffer.append("<DebugValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDebugValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DebugValues>");
	}
	// field ApplicationValues
	{
		IArrayOf<IConstApplicationValue>& v = src.getApplicationValues();
		int size = v.length();
		if (size>0)
			buffer.append("<ApplicationValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CApplicationValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ApplicationValues>");
	}
	// field Workflows
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		IArrayOf<IConstECLWorkflow>& v = src.getWorkflows();
		int size = v.length();
		if (size>0)
			buffer.append("<Workflows>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLWorkflow::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Workflows>");
	}
	// field TimingData
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		IArrayOf<IConstECLTimingData>& v = src.getTimingData();
		int size = v.length();
		if (size>0)
			buffer.append("<TimingData>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLTimingData::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</TimingData>");
	}
	// field AllowedClusters
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		StringArray& v = src.getAllowedClusters();
		if (v.length()>0)
			buffer.append("<AllowedClusters>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<AllowedCluster>%s</AllowedCluster>",v.item(i));
		if (v.length()>0)
			buffer.append("</AllowedClusters>");
	}
	// field ErrorCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getErrorCount();
		if (n)
			buffer.appendf("<ErrorCount>%d</ErrorCount>", n);
	}
	// field WarningCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getWarningCount();
		if (n)
			buffer.appendf("<WarningCount>%d</WarningCount>", n);
	}
	// field InfoCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getInfoCount();
		if (n)
			buffer.appendf("<InfoCount>%d</InfoCount>", n);
	}
	// field AlertCount
	if ((clientVer==-1.0 || clientVer>=1.52))
	{
		int n = src.getAlertCount();
		if (n)
			buffer.appendf("<AlertCount>%d</AlertCount>", n);
	}
	// field GraphCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getGraphCount();
		if (n)
			buffer.appendf("<GraphCount>%d</GraphCount>", n);
	}
	// field SourceFileCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getSourceFileCount();
		if (n)
			buffer.appendf("<SourceFileCount>%d</SourceFileCount>", n);
	}
	// field ResultCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getResultCount();
		if (n)
			buffer.appendf("<ResultCount>%d</ResultCount>", n);
	}
	// field VariableCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getVariableCount();
		if (n)
			buffer.appendf("<VariableCount>%d</VariableCount>", n);
	}
	// field TimerCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getTimerCount();
		if (n)
			buffer.appendf("<TimerCount>%d</TimerCount>", n);
	}
	// field HasDebugValue
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		bool b = src.getHasDebugValue();
		if (b)
			buffer.appendf("<HasDebugValue>1</HasDebugValue>");
	}
	// field ApplicationValueCount
	if ((clientVer==-1.0 || clientVer>=1.17))
	{
		int n = src.getApplicationValueCount();
		if (n)
			buffer.appendf("<ApplicationValueCount>%d</ApplicationValueCount>", n);
	}
	// field XmlParams
	if ((clientVer==-1.0 || clientVer>=1.22))
	{
		const char* s = src.getXmlParams();
		if (s && *s)
		{
			buffer.append("<XmlParams>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XmlParams>");
		}
	}
	// field AccessFlag
	if ((clientVer==-1.0 || clientVer>=1.23))
	{
		int n = src.getAccessFlag();
		if (n)
			buffer.appendf("<AccessFlag>%d</AccessFlag>", n);
	}
	// field ClusterFlag
	if ((clientVer==-1.0 || clientVer>=1.24))
	{
		int n = src.getClusterFlag();
		if (n)
			buffer.appendf("<ClusterFlag>%d</ClusterFlag>", n);
	}
	// field HelpersDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getHelpersDesc();
		if (s && *s)
		{
			buffer.append("<HelpersDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</HelpersDesc>");
		}
	}
	// field GraphsDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getGraphsDesc();
		if (s && *s)
		{
			buffer.append("<GraphsDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphsDesc>");
		}
	}
	// field SourceFilesDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getSourceFilesDesc();
		if (s && *s)
		{
			buffer.append("<SourceFilesDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourceFilesDesc>");
		}
	}
	// field ResultsDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getResultsDesc();
		if (s && *s)
		{
			buffer.append("<ResultsDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ResultsDesc>");
		}
	}
	// field VariablesDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getVariablesDesc();
		if (s && *s)
		{
			buffer.append("<VariablesDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</VariablesDesc>");
		}
	}
	// field TimersDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getTimersDesc();
		if (s && *s)
		{
			buffer.append("<TimersDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</TimersDesc>");
		}
	}
	// field DebugValuesDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getDebugValuesDesc();
		if (s && *s)
		{
			buffer.append("<DebugValuesDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DebugValuesDesc>");
		}
	}
	// field ApplicationValuesDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getApplicationValuesDesc();
		if (s && *s)
		{
			buffer.append("<ApplicationValuesDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ApplicationValuesDesc>");
		}
	}
	// field WorkflowsDesc
	if ((clientVer==-1.0 || clientVer>=1.29))
	{
		const char* s = src.getWorkflowsDesc();
		if (s && *s)
		{
			buffer.append("<WorkflowsDesc>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WorkflowsDesc>");
		}
	}
	// field HasArchiveQuery
	if ((clientVer==-1.0 || clientVer>=1.31))
	{
		bool b = src.getHasArchiveQuery();
		if (b)
			buffer.appendf("<HasArchiveQuery>1</HasArchiveQuery>");
	}
	// field ThorLogList
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		IArrayOf<IConstThorLogInfo>& v = src.getThorLogList();
		int size = v.length();
		if (size>0)
			buffer.append("<ThorLogList>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CThorLogInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ThorLogList>");
	}
	// field ResourceURLs
	if ((clientVer==-1.0 || clientVer>=1.47))
	{
		StringArray& v = src.getResourceURLs();
		if (v.length()>0)
			buffer.append("<ResourceURLs>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<URL>%s</URL>",v.item(i));
		if (v.length()>0)
			buffer.append("</ResourceURLs>");
	}
	// field ResultViewCount
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		int n = src.getResultViewCount();
		if (n)
			buffer.appendf("<ResultViewCount>%d</ResultViewCount>", n);
	}
	// field ResourceURLCount
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		int n = src.getResourceURLCount();
		if (n)
			buffer.appendf("<ResourceURLCount>%d</ResourceURLCount>", n);
	}
	// field DebugValueCount
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		int n = src.getDebugValueCount();
		if (n)
			buffer.appendf("<DebugValueCount>%d</DebugValueCount>", n);
	}
	// field WorkflowCount
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		int n = src.getWorkflowCount();
		if (n)
			buffer.appendf("<WorkflowCount>%d</WorkflowCount>", n);
	}
	// field HelpersCount
	if ((clientVer==-1.0 || clientVer>=1.67))
	{
		int n = src.getHelpersCount();
		if (n)
			buffer.appendf("<HelpersCount>%d</HelpersCount>", n);
	}
	if (keepRootTag)
		buffer.append("</ECLWorkunit>");
}

bool CECLWorkunit::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_RoxieCluster.unmarshall(rpc_request, "RoxieCluster", basepath);
	hasValue |= m_Jobname.unmarshall(rpc_request, "Jobname", basepath);
	hasValue |= m_Queue.unmarshall(rpc_request, "Queue", basepath);
	hasValue |= m_StateID.unmarshall(rpc_request, "StateID", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_StateEx.unmarshall(rpc_request, "StateEx", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_Protected.unmarshall(rpc_request, "Protected", basepath);
	hasValue |= m_Active.unmarshall(rpc_request, "Active", basepath);
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_ActionEx.unmarshall(rpc_request, "ActionEx", basepath);
	hasValue |= m_DateTimeScheduled.unmarshall(rpc_request, "DateTimeScheduled", basepath);
	hasValue |= m_PriorityClass.unmarshall(rpc_request, "PriorityClass", basepath);
	hasValue |= m_PriorityLevel.unmarshall(rpc_request, "PriorityLevel", basepath);
	hasValue |= m_Scope.unmarshall(rpc_request, "Scope", basepath);
	hasValue |= m_Snapshot.unmarshall(rpc_request, "Snapshot", basepath);
	hasValue |= m_ResultLimit.unmarshall(rpc_request, "ResultLimit", basepath);
	hasValue |= m_Archived.unmarshall(rpc_request, "Archived", basepath);
	hasValue |= m_IsPausing.unmarshall(rpc_request, "IsPausing", basepath);
	hasValue |= m_ThorLCR.unmarshall(rpc_request, "ThorLCR", basepath);
	hasValue |= m_EventSchedule.unmarshall(rpc_request, "EventSchedule", basepath);
	hasValue |= m_HaveSubGraphTimings.unmarshall(rpc_request, "HaveSubGraphTimings", basepath);
	hasValue |= m_TotalThorTime.unmarshall(rpc_request, "TotalThorTime", basepath);
	hasValue |= m_TotalClusterTime.unmarshall(rpc_request, "TotalClusterTime", basepath);
	hasValue |= m_AbortBy.unmarshall(rpc_request, "AbortBy", basepath);
	hasValue |= m_AbortTime.unmarshall(rpc_request, "AbortTime", basepath);
	hasValue |= m_Query.unmarshall(rpc_request, "Query", basepath);
	hasValue |= m_Helpers.unmarshall(rpc_request, "Helpers", basepath);
	hasValue |= m_Exceptions.unmarshall(rpc_request, "Exceptions", basepath);
	hasValue |= m_Graphs.unmarshall(rpc_request, "Graphs", basepath);
	hasValue |= m_SourceFiles.unmarshall(rpc_request, "SourceFiles", basepath);
	hasValue |= m_Results.unmarshall(rpc_request, "Results", basepath);
	hasValue |= m_Variables.unmarshall(rpc_request, "Variables", basepath);
	hasValue |= m_Timers.unmarshall(rpc_request, "Timers", basepath);
	hasValue |= m_DebugValues.unmarshall(rpc_request, "DebugValues", basepath);
	hasValue |= m_ApplicationValues.unmarshall(rpc_request, "ApplicationValues", basepath);
	hasValue |= m_Workflows.unmarshall(rpc_request, "Workflows", basepath);
	hasValue |= m_TimingData.unmarshall(rpc_request, "TimingData", basepath);
	hasValue |= m_AllowedClusters.unmarshall(rpc_request, "AllowedClusters", basepath);
	hasValue |= m_ErrorCount.unmarshall(rpc_request, "ErrorCount", basepath);
	hasValue |= m_WarningCount.unmarshall(rpc_request, "WarningCount", basepath);
	hasValue |= m_InfoCount.unmarshall(rpc_request, "InfoCount", basepath);
	hasValue |= m_AlertCount.unmarshall(rpc_request, "AlertCount", basepath);
	hasValue |= m_GraphCount.unmarshall(rpc_request, "GraphCount", basepath);
	hasValue |= m_SourceFileCount.unmarshall(rpc_request, "SourceFileCount", basepath);
	hasValue |= m_ResultCount.unmarshall(rpc_request, "ResultCount", basepath);
	hasValue |= m_VariableCount.unmarshall(rpc_request, "VariableCount", basepath);
	hasValue |= m_TimerCount.unmarshall(rpc_request, "TimerCount", basepath);
	hasValue |= m_HasDebugValue.unmarshall(rpc_request, "HasDebugValue", basepath);
	hasValue |= m_ApplicationValueCount.unmarshall(rpc_request, "ApplicationValueCount", basepath);
	hasValue |= m_XmlParams.unmarshall(rpc_request, "XmlParams", basepath);
	hasValue |= m_AccessFlag.unmarshall(rpc_request, "AccessFlag", basepath);
	hasValue |= m_ClusterFlag.unmarshall(rpc_request, "ClusterFlag", basepath);
	hasValue |= m_HelpersDesc.unmarshall(rpc_request, "HelpersDesc", basepath);
	hasValue |= m_GraphsDesc.unmarshall(rpc_request, "GraphsDesc", basepath);
	hasValue |= m_SourceFilesDesc.unmarshall(rpc_request, "SourceFilesDesc", basepath);
	hasValue |= m_ResultsDesc.unmarshall(rpc_request, "ResultsDesc", basepath);
	hasValue |= m_VariablesDesc.unmarshall(rpc_request, "VariablesDesc", basepath);
	hasValue |= m_TimersDesc.unmarshall(rpc_request, "TimersDesc", basepath);
	hasValue |= m_DebugValuesDesc.unmarshall(rpc_request, "DebugValuesDesc", basepath);
	hasValue |= m_ApplicationValuesDesc.unmarshall(rpc_request, "ApplicationValuesDesc", basepath);
	hasValue |= m_WorkflowsDesc.unmarshall(rpc_request, "WorkflowsDesc", basepath);
	hasValue |= m_HasArchiveQuery.unmarshall(rpc_request, "HasArchiveQuery", basepath);
	hasValue |= m_ThorLogList.unmarshall(rpc_request, "ThorLogList", basepath);
	hasValue |= m_ResourceURLs.unmarshall(rpc_request, "ResourceURLs", basepath);
	hasValue |= m_ResultViewCount.unmarshall(rpc_request, "ResultViewCount", basepath);
	hasValue |= m_ResourceURLCount.unmarshall(rpc_request, "ResourceURLCount", basepath);
	hasValue |= m_DebugValueCount.unmarshall(rpc_request, "DebugValueCount", basepath);
	hasValue |= m_WorkflowCount.unmarshall(rpc_request, "WorkflowCount", basepath);
	hasValue |= m_HelpersCount.unmarshall(rpc_request, "HelpersCount", basepath);
	return hasValue;
}

bool CECLWorkunit::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_RoxieCluster.unmarshall(ctx, soapval, "RoxieCluster");
	hasValue |= m_Jobname.unmarshall(ctx, soapval, "Jobname");
	hasValue |= m_Queue.unmarshall(ctx, soapval, "Queue");
	hasValue |= m_StateID.unmarshall(ctx, soapval, "StateID");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StateEx.unmarshall(ctx, soapval, "StateEx");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_Protected.unmarshall(ctx, soapval, "Protected");
	hasValue |= m_Active.unmarshall(ctx, soapval, "Active");
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_ActionEx.unmarshall(ctx, soapval, "ActionEx");
	hasValue |= m_DateTimeScheduled.unmarshall(ctx, soapval, "DateTimeScheduled");
	hasValue |= m_PriorityClass.unmarshall(ctx, soapval, "PriorityClass");
	hasValue |= m_PriorityLevel.unmarshall(ctx, soapval, "PriorityLevel");
	hasValue |= m_Scope.unmarshall(ctx, soapval, "Scope");
	hasValue |= m_Snapshot.unmarshall(ctx, soapval, "Snapshot");
	hasValue |= m_ResultLimit.unmarshall(ctx, soapval, "ResultLimit");
	hasValue |= m_Archived.unmarshall(ctx, soapval, "Archived");
	hasValue |= m_IsPausing.unmarshall(ctx, soapval, "IsPausing");
	hasValue |= m_ThorLCR.unmarshall(ctx, soapval, "ThorLCR");
	hasValue |= m_EventSchedule.unmarshall(ctx, soapval, "EventSchedule");
	hasValue |= m_HaveSubGraphTimings.unmarshall(ctx, soapval, "HaveSubGraphTimings");
	hasValue |= m_TotalThorTime.unmarshall(ctx, soapval, "TotalThorTime");
	hasValue |= m_TotalClusterTime.unmarshall(ctx, soapval, "TotalClusterTime");
	hasValue |= m_AbortBy.unmarshall(ctx, soapval, "AbortBy");
	hasValue |= m_AbortTime.unmarshall(ctx, soapval, "AbortTime");
	hasValue |= m_Query.unmarshall(ctx, soapval, "Query");
	hasValue |= m_Helpers.unmarshall(ctx, soapval, "Helpers");
	hasValue |= m_Exceptions.unmarshall(ctx, soapval, "Exceptions");
	hasValue |= m_Graphs.unmarshall(ctx, soapval, "Graphs");
	hasValue |= m_SourceFiles.unmarshall(ctx, soapval, "SourceFiles");
	hasValue |= m_Results.unmarshall(ctx, soapval, "Results");
	hasValue |= m_Variables.unmarshall(ctx, soapval, "Variables");
	hasValue |= m_Timers.unmarshall(ctx, soapval, "Timers");
	hasValue |= m_DebugValues.unmarshall(ctx, soapval, "DebugValues");
	hasValue |= m_ApplicationValues.unmarshall(ctx, soapval, "ApplicationValues");
	hasValue |= m_Workflows.unmarshall(ctx, soapval, "Workflows");
	hasValue |= m_TimingData.unmarshall(ctx, soapval, "TimingData");
	hasValue |= m_AllowedClusters.unmarshall(ctx, soapval, "AllowedClusters");
	hasValue |= m_ErrorCount.unmarshall(ctx, soapval, "ErrorCount");
	hasValue |= m_WarningCount.unmarshall(ctx, soapval, "WarningCount");
	hasValue |= m_InfoCount.unmarshall(ctx, soapval, "InfoCount");
	hasValue |= m_AlertCount.unmarshall(ctx, soapval, "AlertCount");
	hasValue |= m_GraphCount.unmarshall(ctx, soapval, "GraphCount");
	hasValue |= m_SourceFileCount.unmarshall(ctx, soapval, "SourceFileCount");
	hasValue |= m_ResultCount.unmarshall(ctx, soapval, "ResultCount");
	hasValue |= m_VariableCount.unmarshall(ctx, soapval, "VariableCount");
	hasValue |= m_TimerCount.unmarshall(ctx, soapval, "TimerCount");
	hasValue |= m_HasDebugValue.unmarshall(ctx, soapval, "HasDebugValue");
	hasValue |= m_ApplicationValueCount.unmarshall(ctx, soapval, "ApplicationValueCount");
	hasValue |= m_XmlParams.unmarshall(ctx, soapval, "XmlParams");
	hasValue |= m_AccessFlag.unmarshall(ctx, soapval, "AccessFlag");
	hasValue |= m_ClusterFlag.unmarshall(ctx, soapval, "ClusterFlag");
	hasValue |= m_HelpersDesc.unmarshall(ctx, soapval, "HelpersDesc");
	hasValue |= m_GraphsDesc.unmarshall(ctx, soapval, "GraphsDesc");
	hasValue |= m_SourceFilesDesc.unmarshall(ctx, soapval, "SourceFilesDesc");
	hasValue |= m_ResultsDesc.unmarshall(ctx, soapval, "ResultsDesc");
	hasValue |= m_VariablesDesc.unmarshall(ctx, soapval, "VariablesDesc");
	hasValue |= m_TimersDesc.unmarshall(ctx, soapval, "TimersDesc");
	hasValue |= m_DebugValuesDesc.unmarshall(ctx, soapval, "DebugValuesDesc");
	hasValue |= m_ApplicationValuesDesc.unmarshall(ctx, soapval, "ApplicationValuesDesc");
	hasValue |= m_WorkflowsDesc.unmarshall(ctx, soapval, "WorkflowsDesc");
	hasValue |= m_HasArchiveQuery.unmarshall(ctx, soapval, "HasArchiveQuery");
	hasValue |= m_ThorLogList.unmarshall(ctx, soapval, "ThorLogList");
	hasValue |= m_ResourceURLs.unmarshall(ctx, soapval, "ResourceURLs");
	hasValue |= m_ResultViewCount.unmarshall(ctx, soapval, "ResultViewCount");
	hasValue |= m_ResourceURLCount.unmarshall(ctx, soapval, "ResourceURLCount");
	hasValue |= m_DebugValueCount.unmarshall(ctx, soapval, "DebugValueCount");
	hasValue |= m_WorkflowCount.unmarshall(ctx, soapval, "WorkflowCount");
	hasValue |= m_HelpersCount.unmarshall(ctx, soapval, "HelpersCount");
	return hasValue;
}

bool CECLWorkunit::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_RoxieCluster.unmarshall(ctx, params, attachments, "RoxieCluster", basepath);
	hasValue |= m_Jobname.unmarshall(ctx, params, attachments, "Jobname", basepath);
	hasValue |= m_Queue.unmarshall(ctx, params, attachments, "Queue", basepath);
	hasValue |= m_StateID.unmarshall(ctx, params, attachments, "StateID", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StateEx.unmarshall(ctx, params, attachments, "StateEx", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_Protected.unmarshall(ctx, params, attachments, "Protected", basepath);
	hasValue |= m_Active.unmarshall(ctx, params, attachments, "Active", basepath);
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_ActionEx.unmarshall(ctx, params, attachments, "ActionEx", basepath);
	hasValue |= m_DateTimeScheduled.unmarshall(ctx, params, attachments, "DateTimeScheduled", basepath);
	hasValue |= m_PriorityClass.unmarshall(ctx, params, attachments, "PriorityClass", basepath);
	hasValue |= m_PriorityLevel.unmarshall(ctx, params, attachments, "PriorityLevel", basepath);
	hasValue |= m_Scope.unmarshall(ctx, params, attachments, "Scope", basepath);
	hasValue |= m_Snapshot.unmarshall(ctx, params, attachments, "Snapshot", basepath);
	hasValue |= m_ResultLimit.unmarshall(ctx, params, attachments, "ResultLimit", basepath);
	hasValue |= m_Archived.unmarshall(ctx, params, attachments, "Archived", basepath);
	hasValue |= m_IsPausing.unmarshall(ctx, params, attachments, "IsPausing", basepath);
	hasValue |= m_ThorLCR.unmarshall(ctx, params, attachments, "ThorLCR", basepath);
	hasValue |= m_EventSchedule.unmarshall(ctx, params, attachments, "EventSchedule", basepath);
	hasValue |= m_HaveSubGraphTimings.unmarshall(ctx, params, attachments, "HaveSubGraphTimings", basepath);
	hasValue |= m_TotalThorTime.unmarshall(ctx, params, attachments, "TotalThorTime", basepath);
	hasValue |= m_TotalClusterTime.unmarshall(ctx, params, attachments, "TotalClusterTime", basepath);
	hasValue |= m_AbortBy.unmarshall(ctx, params, attachments, "AbortBy", basepath);
	hasValue |= m_AbortTime.unmarshall(ctx, params, attachments, "AbortTime", basepath);
	hasValue |= m_Query.unmarshall(ctx, params, attachments, "Query", basepath);
	hasValue |= m_Helpers.unmarshall(ctx, params, attachments, "Helpers", basepath);
	hasValue |= m_Exceptions.unmarshall(ctx, params, attachments, "Exceptions", basepath);
	hasValue |= m_Graphs.unmarshall(ctx, params, attachments, "Graphs", basepath);
	hasValue |= m_SourceFiles.unmarshall(ctx, params, attachments, "SourceFiles", basepath);
	hasValue |= m_Results.unmarshall(ctx, params, attachments, "Results", basepath);
	hasValue |= m_Variables.unmarshall(ctx, params, attachments, "Variables", basepath);
	hasValue |= m_Timers.unmarshall(ctx, params, attachments, "Timers", basepath);
	hasValue |= m_DebugValues.unmarshall(ctx, params, attachments, "DebugValues", basepath);
	hasValue |= m_ApplicationValues.unmarshall(ctx, params, attachments, "ApplicationValues", basepath);
	hasValue |= m_Workflows.unmarshall(ctx, params, attachments, "Workflows", basepath);
	hasValue |= m_TimingData.unmarshall(ctx, params, attachments, "TimingData", basepath);
	hasValue |= m_AllowedClusters.unmarshall(ctx, params, attachments, "AllowedClusters", basepath);
	hasValue |= m_ErrorCount.unmarshall(ctx, params, attachments, "ErrorCount", basepath);
	hasValue |= m_WarningCount.unmarshall(ctx, params, attachments, "WarningCount", basepath);
	hasValue |= m_InfoCount.unmarshall(ctx, params, attachments, "InfoCount", basepath);
	hasValue |= m_AlertCount.unmarshall(ctx, params, attachments, "AlertCount", basepath);
	hasValue |= m_GraphCount.unmarshall(ctx, params, attachments, "GraphCount", basepath);
	hasValue |= m_SourceFileCount.unmarshall(ctx, params, attachments, "SourceFileCount", basepath);
	hasValue |= m_ResultCount.unmarshall(ctx, params, attachments, "ResultCount", basepath);
	hasValue |= m_VariableCount.unmarshall(ctx, params, attachments, "VariableCount", basepath);
	hasValue |= m_TimerCount.unmarshall(ctx, params, attachments, "TimerCount", basepath);
	hasValue |= m_HasDebugValue.unmarshall(ctx, params, attachments, "HasDebugValue", basepath);
	hasValue |= m_ApplicationValueCount.unmarshall(ctx, params, attachments, "ApplicationValueCount", basepath);
	hasValue |= m_XmlParams.unmarshall(ctx, params, attachments, "XmlParams", basepath);
	hasValue |= m_AccessFlag.unmarshall(ctx, params, attachments, "AccessFlag", basepath);
	hasValue |= m_ClusterFlag.unmarshall(ctx, params, attachments, "ClusterFlag", basepath);
	hasValue |= m_HelpersDesc.unmarshall(ctx, params, attachments, "HelpersDesc", basepath);
	hasValue |= m_GraphsDesc.unmarshall(ctx, params, attachments, "GraphsDesc", basepath);
	hasValue |= m_SourceFilesDesc.unmarshall(ctx, params, attachments, "SourceFilesDesc", basepath);
	hasValue |= m_ResultsDesc.unmarshall(ctx, params, attachments, "ResultsDesc", basepath);
	hasValue |= m_VariablesDesc.unmarshall(ctx, params, attachments, "VariablesDesc", basepath);
	hasValue |= m_TimersDesc.unmarshall(ctx, params, attachments, "TimersDesc", basepath);
	hasValue |= m_DebugValuesDesc.unmarshall(ctx, params, attachments, "DebugValuesDesc", basepath);
	hasValue |= m_ApplicationValuesDesc.unmarshall(ctx, params, attachments, "ApplicationValuesDesc", basepath);
	hasValue |= m_WorkflowsDesc.unmarshall(ctx, params, attachments, "WorkflowsDesc", basepath);
	hasValue |= m_HasArchiveQuery.unmarshall(ctx, params, attachments, "HasArchiveQuery", basepath);
	hasValue |= m_ThorLogList.unmarshall(ctx, params, attachments, "ThorLogList", basepath);
	hasValue |= m_ResourceURLs.unmarshall(ctx, params, attachments, "ResourceURLs", basepath);
	hasValue |= m_ResultViewCount.unmarshall(ctx, params, attachments, "ResultViewCount", basepath);
	hasValue |= m_ResourceURLCount.unmarshall(ctx, params, attachments, "ResourceURLCount", basepath);
	hasValue |= m_DebugValueCount.unmarshall(ctx, params, attachments, "DebugValueCount", basepath);
	hasValue |= m_WorkflowCount.unmarshall(ctx, params, attachments, "WorkflowCount", basepath);
	hasValue |= m_HelpersCount.unmarshall(ctx, params, attachments, "HelpersCount", basepath);
	return hasValue;
}

const char * CECLWorkunit::getWuid() { return m_Wuid.query();}
const char * CECLWorkunit::getOwner() { return m_Owner.query();}
const char * CECLWorkunit::getCluster() { return m_Cluster.query();}
const char * CECLWorkunit::getRoxieCluster() { return m_RoxieCluster.query();}
const char * CECLWorkunit::getJobname() { return m_Jobname.query();}
const char * CECLWorkunit::getQueue() { return m_Queue.query();}
bool CECLWorkunit::getStateID_isNull(){return m_StateID.is_nil();}
int CECLWorkunit::getStateID() { return m_StateID;}
const char * CECLWorkunit::getState() { return m_State.query();}
const char * CECLWorkunit::getStateEx() { return m_StateEx.query();}
const char * CECLWorkunit::getDescription() { return m_Description.query();}
bool CECLWorkunit::getProtected_isNull(){return m_Protected.is_nil();}
bool CECLWorkunit::getProtected() { return m_Protected;}
bool CECLWorkunit::getActive_isNull(){return m_Active.is_nil();}
bool CECLWorkunit::getActive() { return m_Active;}
bool CECLWorkunit::getAction_isNull(){return m_Action.is_nil();}
int CECLWorkunit::getAction() { return m_Action;}
const char * CECLWorkunit::getActionEx() { return m_ActionEx.query();}
const char * CECLWorkunit::getDateTimeScheduled() { return m_DateTimeScheduled.query();}
bool CECLWorkunit::getPriorityClass_isNull(){return m_PriorityClass.is_nil();}
int CECLWorkunit::getPriorityClass() { return m_PriorityClass;}
bool CECLWorkunit::getPriorityLevel_isNull(){return m_PriorityLevel.is_nil();}
int CECLWorkunit::getPriorityLevel() { return m_PriorityLevel;}
const char * CECLWorkunit::getScope() { return m_Scope.query();}
const char * CECLWorkunit::getSnapshot() { return m_Snapshot.query();}
bool CECLWorkunit::getResultLimit_isNull(){return m_ResultLimit.is_nil();}
int CECLWorkunit::getResultLimit() { return m_ResultLimit;}
bool CECLWorkunit::getArchived_isNull(){return m_Archived.is_nil();}
bool CECLWorkunit::getArchived() { return m_Archived;}
bool CECLWorkunit::getIsPausing_isNull(){return m_IsPausing.is_nil();}
bool CECLWorkunit::getIsPausing() { return m_IsPausing;}
bool CECLWorkunit::getThorLCR_isNull(){return m_ThorLCR.is_nil();}
bool CECLWorkunit::getThorLCR() { return m_ThorLCR;}
bool CECLWorkunit::getEventSchedule_isNull(){return m_EventSchedule.is_nil();}
int CECLWorkunit::getEventSchedule() { return m_EventSchedule;}
bool CECLWorkunit::getHaveSubGraphTimings_isNull(){return m_HaveSubGraphTimings.is_nil();}
bool CECLWorkunit::getHaveSubGraphTimings() { return m_HaveSubGraphTimings;}
const char * CECLWorkunit::getTotalThorTime() { return m_TotalThorTime.query();}
const char * CECLWorkunit::getTotalClusterTime() { return m_TotalClusterTime.query();}
const char * CECLWorkunit::getAbortBy() { return m_AbortBy.query();}
const char * CECLWorkunit::getAbortTime() { return m_AbortTime.query();}
IConstECLQuery & CECLWorkunit::getQuery() { return (IConstECLQuery &) m_Query.getValue();}
IArrayOf<IConstECLHelpFile> & CECLWorkunit::getHelpers() { return (IArrayOf<IConstECLHelpFile> &) m_Helpers; }
IArrayOf<IConstECLException> & CECLWorkunit::getExceptions() { return (IArrayOf<IConstECLException> &) m_Exceptions; }
IArrayOf<IConstECLGraph> & CECLWorkunit::getGraphs() { return (IArrayOf<IConstECLGraph> &) m_Graphs; }
IArrayOf<IConstECLSourceFile> & CECLWorkunit::getSourceFiles() { return (IArrayOf<IConstECLSourceFile> &) m_SourceFiles; }
IArrayOf<IConstECLResult> & CECLWorkunit::getResults() { return (IArrayOf<IConstECLResult> &) m_Results; }
IArrayOf<IConstECLResult> & CECLWorkunit::getVariables() { return (IArrayOf<IConstECLResult> &) m_Variables; }
IArrayOf<IConstECLTimer> & CECLWorkunit::getTimers() { return (IArrayOf<IConstECLTimer> &) m_Timers; }
IArrayOf<IConstDebugValue> & CECLWorkunit::getDebugValues() { return (IArrayOf<IConstDebugValue> &) m_DebugValues; }
IArrayOf<IConstApplicationValue> & CECLWorkunit::getApplicationValues() { return (IArrayOf<IConstApplicationValue> &) m_ApplicationValues; }
IArrayOf<IConstECLWorkflow> & CECLWorkunit::getWorkflows() { return (IArrayOf<IConstECLWorkflow> &) m_Workflows; }
IArrayOf<IConstECLTimingData> & CECLWorkunit::getTimingData() { return (IArrayOf<IConstECLTimingData> &) m_TimingData; }
StringArray & CECLWorkunit::getAllowedClusters() { return (StringArray &) m_AllowedClusters; }
bool CECLWorkunit::getErrorCount_isNull(){return m_ErrorCount.is_nil();}
int CECLWorkunit::getErrorCount() { return m_ErrorCount;}
bool CECLWorkunit::getWarningCount_isNull(){return m_WarningCount.is_nil();}
int CECLWorkunit::getWarningCount() { return m_WarningCount;}
bool CECLWorkunit::getInfoCount_isNull(){return m_InfoCount.is_nil();}
int CECLWorkunit::getInfoCount() { return m_InfoCount;}
bool CECLWorkunit::getAlertCount_isNull(){return m_AlertCount.is_nil();}
int CECLWorkunit::getAlertCount() { return m_AlertCount;}
bool CECLWorkunit::getGraphCount_isNull(){return m_GraphCount.is_nil();}
int CECLWorkunit::getGraphCount() { return m_GraphCount;}
bool CECLWorkunit::getSourceFileCount_isNull(){return m_SourceFileCount.is_nil();}
int CECLWorkunit::getSourceFileCount() { return m_SourceFileCount;}
bool CECLWorkunit::getResultCount_isNull(){return m_ResultCount.is_nil();}
int CECLWorkunit::getResultCount() { return m_ResultCount;}
bool CECLWorkunit::getVariableCount_isNull(){return m_VariableCount.is_nil();}
int CECLWorkunit::getVariableCount() { return m_VariableCount;}
bool CECLWorkunit::getTimerCount_isNull(){return m_TimerCount.is_nil();}
int CECLWorkunit::getTimerCount() { return m_TimerCount;}
bool CECLWorkunit::getHasDebugValue_isNull(){return m_HasDebugValue.is_nil();}
bool CECLWorkunit::getHasDebugValue() { return m_HasDebugValue;}
bool CECLWorkunit::getApplicationValueCount_isNull(){return m_ApplicationValueCount.is_nil();}
int CECLWorkunit::getApplicationValueCount() { return m_ApplicationValueCount;}
const char * CECLWorkunit::getXmlParams() { return m_XmlParams.query();}
bool CECLWorkunit::getAccessFlag_isNull(){return m_AccessFlag.is_nil();}
int CECLWorkunit::getAccessFlag() { return m_AccessFlag;}
bool CECLWorkunit::getClusterFlag_isNull(){return m_ClusterFlag.is_nil();}
int CECLWorkunit::getClusterFlag() { return m_ClusterFlag;}
const char * CECLWorkunit::getHelpersDesc() { return m_HelpersDesc.query();}
const char * CECLWorkunit::getGraphsDesc() { return m_GraphsDesc.query();}
const char * CECLWorkunit::getSourceFilesDesc() { return m_SourceFilesDesc.query();}
const char * CECLWorkunit::getResultsDesc() { return m_ResultsDesc.query();}
const char * CECLWorkunit::getVariablesDesc() { return m_VariablesDesc.query();}
const char * CECLWorkunit::getTimersDesc() { return m_TimersDesc.query();}
const char * CECLWorkunit::getDebugValuesDesc() { return m_DebugValuesDesc.query();}
const char * CECLWorkunit::getApplicationValuesDesc() { return m_ApplicationValuesDesc.query();}
const char * CECLWorkunit::getWorkflowsDesc() { return m_WorkflowsDesc.query();}
bool CECLWorkunit::getHasArchiveQuery_isNull(){return m_HasArchiveQuery.is_nil();}
bool CECLWorkunit::getHasArchiveQuery() { return m_HasArchiveQuery;}
IArrayOf<IConstThorLogInfo> & CECLWorkunit::getThorLogList() { return (IArrayOf<IConstThorLogInfo> &) m_ThorLogList; }
StringArray & CECLWorkunit::getResourceURLs() { return (StringArray &) m_ResourceURLs; }
bool CECLWorkunit::getResultViewCount_isNull(){return m_ResultViewCount.is_nil();}
int CECLWorkunit::getResultViewCount() { return m_ResultViewCount;}
bool CECLWorkunit::getResourceURLCount_isNull(){return m_ResourceURLCount.is_nil();}
int CECLWorkunit::getResourceURLCount() { return m_ResourceURLCount;}
bool CECLWorkunit::getDebugValueCount_isNull(){return m_DebugValueCount.is_nil();}
int CECLWorkunit::getDebugValueCount() { return m_DebugValueCount;}
bool CECLWorkunit::getWorkflowCount_isNull(){return m_WorkflowCount.is_nil();}
int CECLWorkunit::getWorkflowCount() { return m_WorkflowCount;}
bool CECLWorkunit::getHelpersCount_isNull(){return m_HelpersCount.is_nil();}
int CECLWorkunit::getHelpersCount() { return m_HelpersCount;}
void CECLWorkunit::setWuid(const char * val){ m_Wuid.set(val); }
void CECLWorkunit::setOwner(const char * val){ m_Owner.set(val); }
void CECLWorkunit::setCluster(const char * val){ m_Cluster.set(val); }
void CECLWorkunit::setRoxieCluster(const char * val){ m_RoxieCluster.set(val); }
void CECLWorkunit::setJobname(const char * val){ m_Jobname.set(val); }
void CECLWorkunit::setQueue(const char * val){ m_Queue.set(val); }
void CECLWorkunit::setStateID_null(){ m_StateID.Nil(); }void CECLWorkunit::setStateID(int val){ m_StateID=val; }
void CECLWorkunit::setState(const char * val){ m_State.set(val); }
void CECLWorkunit::setStateEx(const char * val){ m_StateEx.set(val); }
void CECLWorkunit::setDescription(const char * val){ m_Description.set(val); }
void CECLWorkunit::setProtected_null(){ m_Protected.Nil(); }void CECLWorkunit::setProtected(bool val){ m_Protected=val; }
void CECLWorkunit::setActive_null(){ m_Active.Nil(); }void CECLWorkunit::setActive(bool val){ m_Active=val; }
void CECLWorkunit::setAction_null(){ m_Action.Nil(); }void CECLWorkunit::setAction(int val){ m_Action=val; }
void CECLWorkunit::setActionEx(const char * val){ m_ActionEx.set(val); }
void CECLWorkunit::setDateTimeScheduled(const char * val){ m_DateTimeScheduled.set(val); }
void CECLWorkunit::setPriorityClass_null(){ m_PriorityClass.Nil(); }void CECLWorkunit::setPriorityClass(int val){ m_PriorityClass=val; }
void CECLWorkunit::setPriorityLevel_null(){ m_PriorityLevel.Nil(); }void CECLWorkunit::setPriorityLevel(int val){ m_PriorityLevel=val; }
void CECLWorkunit::setScope(const char * val){ m_Scope.set(val); }
void CECLWorkunit::setSnapshot(const char * val){ m_Snapshot.set(val); }
void CECLWorkunit::setResultLimit_null(){ m_ResultLimit.Nil(); }void CECLWorkunit::setResultLimit(int val){ m_ResultLimit=val; }
void CECLWorkunit::setArchived_null(){ m_Archived.Nil(); }void CECLWorkunit::setArchived(bool val){ m_Archived=val; }
void CECLWorkunit::setIsPausing_null(){ m_IsPausing.Nil(); }void CECLWorkunit::setIsPausing(bool val){ m_IsPausing=val; }
void CECLWorkunit::setThorLCR_null(){ m_ThorLCR.Nil(); }void CECLWorkunit::setThorLCR(bool val){ m_ThorLCR=val; }
void CECLWorkunit::setEventSchedule_null(){ m_EventSchedule.Nil(); }void CECLWorkunit::setEventSchedule(int val){ m_EventSchedule=val; }
void CECLWorkunit::setHaveSubGraphTimings_null(){ m_HaveSubGraphTimings.Nil(); }void CECLWorkunit::setHaveSubGraphTimings(bool val){ m_HaveSubGraphTimings=val; }
void CECLWorkunit::setTotalThorTime(const char * val){ m_TotalThorTime.set(val); }
void CECLWorkunit::setTotalClusterTime(const char * val){ m_TotalClusterTime.set(val); }
void CECLWorkunit::setAbortBy(const char * val){ m_AbortBy.set(val); }
void CECLWorkunit::setAbortTime(const char * val){ m_AbortTime.set(val); }
IEspECLQuery & CECLWorkunit::updateQuery(){ return (IEspECLQuery &) m_Query.getValue(); }
void CECLWorkunit::setQuery(IConstECLQuery &ifrom){ m_Query.copy(ifrom); }
void CECLWorkunit::setHelpers(IArrayOf<IEspECLHelpFile> &val)
{
	m_Helpers->kill();
	IArrayOf<IConstECLHelpFile> &target = m_Helpers.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLHelpFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setHelpers(IArrayOf<IConstECLHelpFile> &val)
{
	m_Helpers->kill();
	IArrayOf<IConstECLHelpFile> &target = m_Helpers.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLHelpFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setExceptions(IArrayOf<IEspECLException> &val)
{
	m_Exceptions->kill();
	IArrayOf<IConstECLException> &target = m_Exceptions.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLException &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setExceptions(IArrayOf<IConstECLException> &val)
{
	m_Exceptions->kill();
	IArrayOf<IConstECLException> &target = m_Exceptions.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLException &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setGraphs(IArrayOf<IEspECLGraph> &val)
{
	m_Graphs->kill();
	IArrayOf<IConstECLGraph> &target = m_Graphs.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLGraph &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setGraphs(IArrayOf<IConstECLGraph> &val)
{
	m_Graphs->kill();
	IArrayOf<IConstECLGraph> &target = m_Graphs.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLGraph &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setSourceFiles(IArrayOf<IEspECLSourceFile> &val)
{
	m_SourceFiles->kill();
	IArrayOf<IConstECLSourceFile> &target = m_SourceFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLSourceFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setSourceFiles(IArrayOf<IConstECLSourceFile> &val)
{
	m_SourceFiles->kill();
	IArrayOf<IConstECLSourceFile> &target = m_SourceFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLSourceFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setResults(IArrayOf<IEspECLResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstECLResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setResults(IArrayOf<IConstECLResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstECLResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setVariables(IArrayOf<IEspECLResult> &val)
{
	m_Variables->kill();
	IArrayOf<IConstECLResult> &target = m_Variables.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setVariables(IArrayOf<IConstECLResult> &val)
{
	m_Variables->kill();
	IArrayOf<IConstECLResult> &target = m_Variables.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setTimers(IArrayOf<IEspECLTimer> &val)
{
	m_Timers->kill();
	IArrayOf<IConstECLTimer> &target = m_Timers.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLTimer &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setTimers(IArrayOf<IConstECLTimer> &val)
{
	m_Timers->kill();
	IArrayOf<IConstECLTimer> &target = m_Timers.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLTimer &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setDebugValues(IArrayOf<IEspDebugValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstDebugValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDebugValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setDebugValues(IArrayOf<IConstDebugValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstDebugValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDebugValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setApplicationValues(IArrayOf<IEspApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspApplicationValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setApplicationValues(IArrayOf<IConstApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstApplicationValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setWorkflows(IArrayOf<IEspECLWorkflow> &val)
{
	m_Workflows->kill();
	IArrayOf<IConstECLWorkflow> &target = m_Workflows.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLWorkflow &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setWorkflows(IArrayOf<IConstECLWorkflow> &val)
{
	m_Workflows->kill();
	IArrayOf<IConstECLWorkflow> &target = m_Workflows.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLWorkflow &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setTimingData(IArrayOf<IEspECLTimingData> &val)
{
	m_TimingData->kill();
	IArrayOf<IConstECLTimingData> &target = m_TimingData.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLTimingData &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setTimingData(IArrayOf<IConstECLTimingData> &val)
{
	m_TimingData->kill();
	IArrayOf<IConstECLTimingData> &target = m_TimingData.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLTimingData &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setAllowedClusters(StringArray &val){ m_AllowedClusters->kill();  CloneArray(m_AllowedClusters.getValue(), val); }
void CECLWorkunit::setErrorCount_null(){ m_ErrorCount.Nil(); }void CECLWorkunit::setErrorCount(int val){ m_ErrorCount=val; }
void CECLWorkunit::setWarningCount_null(){ m_WarningCount.Nil(); }void CECLWorkunit::setWarningCount(int val){ m_WarningCount=val; }
void CECLWorkunit::setInfoCount_null(){ m_InfoCount.Nil(); }void CECLWorkunit::setInfoCount(int val){ m_InfoCount=val; }
void CECLWorkunit::setAlertCount_null(){ m_AlertCount.Nil(); }void CECLWorkunit::setAlertCount(int val){ m_AlertCount=val; }
void CECLWorkunit::setGraphCount_null(){ m_GraphCount.Nil(); }void CECLWorkunit::setGraphCount(int val){ m_GraphCount=val; }
void CECLWorkunit::setSourceFileCount_null(){ m_SourceFileCount.Nil(); }void CECLWorkunit::setSourceFileCount(int val){ m_SourceFileCount=val; }
void CECLWorkunit::setResultCount_null(){ m_ResultCount.Nil(); }void CECLWorkunit::setResultCount(int val){ m_ResultCount=val; }
void CECLWorkunit::setVariableCount_null(){ m_VariableCount.Nil(); }void CECLWorkunit::setVariableCount(int val){ m_VariableCount=val; }
void CECLWorkunit::setTimerCount_null(){ m_TimerCount.Nil(); }void CECLWorkunit::setTimerCount(int val){ m_TimerCount=val; }
void CECLWorkunit::setHasDebugValue_null(){ m_HasDebugValue.Nil(); }void CECLWorkunit::setHasDebugValue(bool val){ m_HasDebugValue=val; }
void CECLWorkunit::setApplicationValueCount_null(){ m_ApplicationValueCount.Nil(); }void CECLWorkunit::setApplicationValueCount(int val){ m_ApplicationValueCount=val; }
void CECLWorkunit::setXmlParams(const char * val){ m_XmlParams.set(val); }
void CECLWorkunit::setAccessFlag_null(){ m_AccessFlag.Nil(); }void CECLWorkunit::setAccessFlag(int val){ m_AccessFlag=val; }
void CECLWorkunit::setClusterFlag_null(){ m_ClusterFlag.Nil(); }void CECLWorkunit::setClusterFlag(int val){ m_ClusterFlag=val; }
void CECLWorkunit::setHelpersDesc(const char * val){ m_HelpersDesc.set(val); }
void CECLWorkunit::setGraphsDesc(const char * val){ m_GraphsDesc.set(val); }
void CECLWorkunit::setSourceFilesDesc(const char * val){ m_SourceFilesDesc.set(val); }
void CECLWorkunit::setResultsDesc(const char * val){ m_ResultsDesc.set(val); }
void CECLWorkunit::setVariablesDesc(const char * val){ m_VariablesDesc.set(val); }
void CECLWorkunit::setTimersDesc(const char * val){ m_TimersDesc.set(val); }
void CECLWorkunit::setDebugValuesDesc(const char * val){ m_DebugValuesDesc.set(val); }
void CECLWorkunit::setApplicationValuesDesc(const char * val){ m_ApplicationValuesDesc.set(val); }
void CECLWorkunit::setWorkflowsDesc(const char * val){ m_WorkflowsDesc.set(val); }
void CECLWorkunit::setHasArchiveQuery_null(){ m_HasArchiveQuery.Nil(); }void CECLWorkunit::setHasArchiveQuery(bool val){ m_HasArchiveQuery=val; }
void CECLWorkunit::setThorLogList(IArrayOf<IEspThorLogInfo> &val)
{
	m_ThorLogList->kill();
	IArrayOf<IConstThorLogInfo> &target = m_ThorLogList.getValue();
	ForEachItemIn(idx, val)
	{
		IEspThorLogInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setThorLogList(IArrayOf<IConstThorLogInfo> &val)
{
	m_ThorLogList->kill();
	IArrayOf<IConstThorLogInfo> &target = m_ThorLogList.getValue();
	ForEachItemIn(idx, val)
	{
		IConstThorLogInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CECLWorkunit::setResourceURLs(StringArray &val){ m_ResourceURLs->kill();  CloneArray(m_ResourceURLs.getValue(), val); }
void CECLWorkunit::setResultViewCount_null(){ m_ResultViewCount.Nil(); }void CECLWorkunit::setResultViewCount(int val){ m_ResultViewCount=val; }
void CECLWorkunit::setResourceURLCount_null(){ m_ResourceURLCount.Nil(); }void CECLWorkunit::setResourceURLCount(int val){ m_ResourceURLCount=val; }
void CECLWorkunit::setDebugValueCount_null(){ m_DebugValueCount.Nil(); }void CECLWorkunit::setDebugValueCount(int val){ m_DebugValueCount=val; }
void CECLWorkunit::setWorkflowCount_null(){ m_WorkflowCount.Nil(); }void CECLWorkunit::setWorkflowCount(int val){ m_WorkflowCount=val; }
void CECLWorkunit::setHelpersCount_null(){ m_HelpersCount.Nil(); }void CECLWorkunit::setHelpersCount(int val){ m_HelpersCount=val; }
extern "C"  IEspECLWorkunit *createECLWorkunit(const char *serv, const char *msgname){return ((IEspECLWorkunit *)new CECLWorkunit(serv /*, msgname*/));}
extern "C"  IClientECLWorkunit *createClientECLWorkunit(const char *serv, const char *msgname){return ((IClientECLWorkunit *)new CECLWorkunit(serv /*, msgname*/));}

//=======================================================
// class CWUECLAttribute Implementation
//=======================================================

CWUECLAttribute::CWUECLAttribute(const char *serviceName, IRpcMessageBinding *init)
	: m_ModuleName(nilRemove),m_AttributeName(nilRemove),m_IsLocked(nilRemove),m_IsCheckedOut(nilRemove),m_IsSandbox(nilRemove),m_IsOrphaned(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUECLAttribute");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUECLAttribute::CWUECLAttribute(const char *serviceName, const char *bc)
	: m_ModuleName(nilRemove),m_AttributeName(nilRemove),m_IsLocked(nilRemove),m_IsCheckedOut(nilRemove),m_IsSandbox(nilRemove),m_IsOrphaned(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUECLAttribute");
}

StringBuffer &CWUECLAttribute::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ModuleName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AttributeName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsLocked\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsCheckedOut\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsSandbox\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsOrphaned\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUECLAttribute::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUECLAttribute::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUECLAttribute::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ModuleName");
	form.appendf("  <tr><td><b>ModuleName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AttributeName");
	form.appendf("  <tr><td><b>AttributeName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsLocked");
	
	form.appendf("  <tr><td><b>IsLocked? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsCheckedOut");
	
	form.appendf("  <tr><td><b>IsCheckedOut? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsSandbox");
	
	form.appendf("  <tr><td><b>IsSandbox? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsOrphaned");
	
	form.appendf("  <tr><td><b>IsOrphaned? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUECLAttribute::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUECLAttribute::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ModuleName.marshall(rpc_resp, "ModuleName", "", "", "");
	m_AttributeName.marshall(rpc_resp, "AttributeName", "", "", "");
	m_IsLocked.marshall(rpc_resp, "IsLocked", "", "", "");
	m_IsCheckedOut.marshall(rpc_resp, "IsCheckedOut", "", "", "");
	m_IsSandbox.marshall(rpc_resp, "IsSandbox", "", "", "");
	m_IsOrphaned.marshall(rpc_resp, "IsOrphaned", "", "", "");
}


void CWUECLAttribute::copy(CWUECLAttribute &from)
{
	m_ModuleName.copy(from.m_ModuleName);
	m_AttributeName.copy(from.m_AttributeName);
	m_IsLocked.copy(from.m_IsLocked);
	m_IsCheckedOut.copy(from.m_IsCheckedOut);
	m_IsSandbox.copy(from.m_IsSandbox);
	m_IsOrphaned.copy(from.m_IsOrphaned);
}


void CWUECLAttribute::copy(IConstWUECLAttribute &ifrom)
{
	setModuleName(ifrom.getModuleName());
	setAttributeName(ifrom.getAttributeName());
	setIsLocked(ifrom.getIsLocked());
	setIsCheckedOut(ifrom.getIsCheckedOut());
	setIsSandbox(ifrom.getIsSandbox());
	setIsOrphaned(ifrom.getIsOrphaned());
}


void CWUECLAttribute::getAttributes(IProperties &attributes)
{
}


void CWUECLAttribute::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ModuleName.toStr(ctx, buffer, "ModuleName", "", true, "", "");
	m_AttributeName.toStr(ctx, buffer, "AttributeName", "", true, "", "");
	m_IsLocked.toStr(ctx, buffer, "IsLocked", "", true, "", "");
	m_IsCheckedOut.toStr(ctx, buffer, "IsCheckedOut", "", true, "", "");
	m_IsSandbox.toStr(ctx, buffer, "IsSandbox", "", true, "", "");
	m_IsOrphaned.toStr(ctx, buffer, "IsOrphaned", "", true, "", "");
}


void CWUECLAttribute::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUECLAttribute::serializer(IEspContext* ctx, IConstWUECLAttribute &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUECLAttribute>");
	// field ModuleName
	{
		const char* s = src.getModuleName();
		if (s && *s)
		{
			buffer.append("<ModuleName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ModuleName>");
		}
	}
	// field AttributeName
	{
		const char* s = src.getAttributeName();
		if (s && *s)
		{
			buffer.append("<AttributeName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</AttributeName>");
		}
	}
	// field IsLocked
	{
		bool b = src.getIsLocked();
		if (b)
			buffer.appendf("<IsLocked>1</IsLocked>");
	}
	// field IsCheckedOut
	{
		bool b = src.getIsCheckedOut();
		if (b)
			buffer.appendf("<IsCheckedOut>1</IsCheckedOut>");
	}
	// field IsSandbox
	{
		bool b = src.getIsSandbox();
		if (b)
			buffer.appendf("<IsSandbox>1</IsSandbox>");
	}
	// field IsOrphaned
	{
		bool b = src.getIsOrphaned();
		if (b)
			buffer.appendf("<IsOrphaned>1</IsOrphaned>");
	}
	if (keepRootTag)
		buffer.append("</WUECLAttribute>");
}

bool CWUECLAttribute::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ModuleName.unmarshall(rpc_request, "ModuleName", basepath);
	hasValue |= m_AttributeName.unmarshall(rpc_request, "AttributeName", basepath);
	hasValue |= m_IsLocked.unmarshall(rpc_request, "IsLocked", basepath);
	hasValue |= m_IsCheckedOut.unmarshall(rpc_request, "IsCheckedOut", basepath);
	hasValue |= m_IsSandbox.unmarshall(rpc_request, "IsSandbox", basepath);
	hasValue |= m_IsOrphaned.unmarshall(rpc_request, "IsOrphaned", basepath);
	return hasValue;
}

bool CWUECLAttribute::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ModuleName.unmarshall(ctx, soapval, "ModuleName");
	hasValue |= m_AttributeName.unmarshall(ctx, soapval, "AttributeName");
	hasValue |= m_IsLocked.unmarshall(ctx, soapval, "IsLocked");
	hasValue |= m_IsCheckedOut.unmarshall(ctx, soapval, "IsCheckedOut");
	hasValue |= m_IsSandbox.unmarshall(ctx, soapval, "IsSandbox");
	hasValue |= m_IsOrphaned.unmarshall(ctx, soapval, "IsOrphaned");
	return hasValue;
}

bool CWUECLAttribute::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ModuleName.unmarshall(ctx, params, attachments, "ModuleName", basepath);
	hasValue |= m_AttributeName.unmarshall(ctx, params, attachments, "AttributeName", basepath);
	hasValue |= m_IsLocked.unmarshall(ctx, params, attachments, "IsLocked", basepath);
	hasValue |= m_IsCheckedOut.unmarshall(ctx, params, attachments, "IsCheckedOut", basepath);
	hasValue |= m_IsSandbox.unmarshall(ctx, params, attachments, "IsSandbox", basepath);
	hasValue |= m_IsOrphaned.unmarshall(ctx, params, attachments, "IsOrphaned", basepath);
	return hasValue;
}

const char * CWUECLAttribute::getModuleName() { return m_ModuleName.query();}
const char * CWUECLAttribute::getAttributeName() { return m_AttributeName.query();}
bool CWUECLAttribute::getIsLocked_isNull(){return m_IsLocked.is_nil();}
bool CWUECLAttribute::getIsLocked() { return m_IsLocked;}
bool CWUECLAttribute::getIsCheckedOut_isNull(){return m_IsCheckedOut.is_nil();}
bool CWUECLAttribute::getIsCheckedOut() { return m_IsCheckedOut;}
bool CWUECLAttribute::getIsSandbox_isNull(){return m_IsSandbox.is_nil();}
bool CWUECLAttribute::getIsSandbox() { return m_IsSandbox;}
bool CWUECLAttribute::getIsOrphaned_isNull(){return m_IsOrphaned.is_nil();}
bool CWUECLAttribute::getIsOrphaned() { return m_IsOrphaned;}
void CWUECLAttribute::setModuleName(const char * val){ m_ModuleName.set(val); }
void CWUECLAttribute::setAttributeName(const char * val){ m_AttributeName.set(val); }
void CWUECLAttribute::setIsLocked_null(){ m_IsLocked.Nil(); }void CWUECLAttribute::setIsLocked(bool val){ m_IsLocked=val; }
void CWUECLAttribute::setIsCheckedOut_null(){ m_IsCheckedOut.Nil(); }void CWUECLAttribute::setIsCheckedOut(bool val){ m_IsCheckedOut=val; }
void CWUECLAttribute::setIsSandbox_null(){ m_IsSandbox.Nil(); }void CWUECLAttribute::setIsSandbox(bool val){ m_IsSandbox=val; }
void CWUECLAttribute::setIsOrphaned_null(){ m_IsOrphaned.Nil(); }void CWUECLAttribute::setIsOrphaned(bool val){ m_IsOrphaned=val; }
extern "C"  IEspWUECLAttribute *createWUECLAttribute(const char *serv, const char *msgname){return ((IEspWUECLAttribute *)new CWUECLAttribute(serv /*, msgname*/));}
extern "C"  IClientWUECLAttribute *createClientWUECLAttribute(const char *serv, const char *msgname){return ((IClientWUECLAttribute *)new CWUECLAttribute(serv /*, msgname*/));}

//=======================================================
// class CNetworkNode Implementation
//=======================================================

CNetworkNode::CNetworkNode(const char *serviceName, IRpcMessageBinding *init)
	: m_Category(nilIgnore),m_id(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("NetworkNode");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CNetworkNode::CNetworkNode(const char *serviceName, const char *bc)
	: m_Category(nilIgnore),m_id(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("NetworkNode");
}

StringBuffer &CNetworkNode::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Category\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"id\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CNetworkNode::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CNetworkNode::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CNetworkNode::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Category");
	form.appendf("  <tr><td><b>Category: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("id");
	form.appendf("  <tr><td><b>id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CNetworkNode::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CNetworkNode::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Category.marshall(rpc_resp, "Category", "", "", "");
	m_id.marshall(rpc_resp, "id", "", "", "");
}


void CNetworkNode::copy(CNetworkNode &from)
{
	m_Category.copy(from.m_Category);
	m_id.copy(from.m_id);
}


void CNetworkNode::copy(IConstNetworkNode &ifrom)
{
	setCategory(ifrom.getCategory());
	setId(ifrom.getId());
}


void CNetworkNode::getAttributes(IProperties &attributes)
{
}


void CNetworkNode::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Category.toStr(ctx, buffer, "Category", "", true, "", "");
	m_id.toStr(ctx, buffer, "id", "", true, "", "");
}


void CNetworkNode::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CNetworkNode::serializer(IEspContext* ctx, IConstNetworkNode &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<NetworkNode>");
	// field Category
	{
		int n = src.getCategory();
		if (n)
			buffer.appendf("<Category>%d</Category>", n);
	}
	// field id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</id>");
		}
	}
	if (keepRootTag)
		buffer.append("</NetworkNode>");
}

bool CNetworkNode::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Category.unmarshall(rpc_request, "Category", basepath);
	hasValue |= m_id.unmarshall(rpc_request, "id", basepath);
	return hasValue;
}

bool CNetworkNode::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Category.unmarshall(ctx, soapval, "Category");
	hasValue |= m_id.unmarshall(ctx, soapval, "id");
	return hasValue;
}

bool CNetworkNode::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Category.unmarshall(ctx, params, attachments, "Category", basepath);
	hasValue |= m_id.unmarshall(ctx, params, attachments, "id", basepath);
	return hasValue;
}

int CNetworkNode::getCategory() { return m_Category;}
const char * CNetworkNode::getId() { return m_id.query();}
void CNetworkNode::setCategory(int val){ m_Category=val; }
void CNetworkNode::setId(const char * val){ m_id.set(val); }
extern "C"  IEspNetworkNode *createNetworkNode(const char *serv, const char *msgname){return ((IEspNetworkNode *)new CNetworkNode(serv /*, msgname*/));}
extern "C"  IClientNetworkNode *createClientNetworkNode(const char *serv, const char *msgname){return ((IClientNetworkNode *)new CNetworkNode(serv /*, msgname*/));}

//=======================================================
// class CClusterEndpoint Implementation
//=======================================================

CClusterEndpoint::CClusterEndpoint(const char *serviceName, IRpcMessageBinding *init)
	: m_URL(nilRemove),m_Status(nilRemove),m_NumQueryFileToCopy(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ClusterEndpoint");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CClusterEndpoint::CClusterEndpoint(const char *serviceName, const char *bc)
	: m_URL(nilRemove),m_Status(nilRemove),m_NumQueryFileToCopy(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ClusterEndpoint");
}

StringBuffer &CClusterEndpoint::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"URL\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Status\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumQueryFileToCopy\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CClusterEndpoint::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CClusterEndpoint::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CClusterEndpoint::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("URL");
	form.appendf("  <tr><td><b>URL: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Status");
	form.appendf("  <tr><td><b>Status: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumQueryFileToCopy");
	form.appendf("  <tr><td><b>NumQueryFileToCopy: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CClusterEndpoint::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CClusterEndpoint::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_URL.marshall(rpc_resp, "URL", "", "", "");
	m_Status.marshall(rpc_resp, "Status", "", "", "");
	m_NumQueryFileToCopy.marshall(rpc_resp, "NumQueryFileToCopy", "", "", "");
}


void CClusterEndpoint::copy(CClusterEndpoint &from)
{
	m_URL.copy(from.m_URL);
	m_Status.copy(from.m_Status);
	m_NumQueryFileToCopy.copy(from.m_NumQueryFileToCopy);
}


void CClusterEndpoint::copy(IConstClusterEndpoint &ifrom)
{
	setURL(ifrom.getURL());
	setStatus(ifrom.getStatus());
	setNumQueryFileToCopy(ifrom.getNumQueryFileToCopy());
}


void CClusterEndpoint::getAttributes(IProperties &attributes)
{
}


void CClusterEndpoint::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_URL.toStr(ctx, buffer, "URL", "", true, "", "");
	m_Status.toStr(ctx, buffer, "Status", "", true, "", "");
	m_NumQueryFileToCopy.toStr(ctx, buffer, "NumQueryFileToCopy", "", true, "", "");
}


void CClusterEndpoint::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CClusterEndpoint::serializer(IEspContext* ctx, IConstClusterEndpoint &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ClusterEndpoint>");
	// field URL
	{
		const char* s = src.getURL();
		if (s && *s)
		{
			buffer.append("<URL>");
			encodeUtf8XML(s,buffer);
			buffer.append("</URL>");
		}
	}
	// field Status
	{
		const char* s = src.getStatus();
		if (s && *s)
		{
			buffer.append("<Status>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Status>");
		}
	}
	// field NumQueryFileToCopy
	{
		int n = src.getNumQueryFileToCopy();
		if (n)
			buffer.appendf("<NumQueryFileToCopy>%d</NumQueryFileToCopy>", n);
	}
	if (keepRootTag)
		buffer.append("</ClusterEndpoint>");
}

bool CClusterEndpoint::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_URL.unmarshall(rpc_request, "URL", basepath);
	hasValue |= m_Status.unmarshall(rpc_request, "Status", basepath);
	hasValue |= m_NumQueryFileToCopy.unmarshall(rpc_request, "NumQueryFileToCopy", basepath);
	return hasValue;
}

bool CClusterEndpoint::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_URL.unmarshall(ctx, soapval, "URL");
	hasValue |= m_Status.unmarshall(ctx, soapval, "Status");
	hasValue |= m_NumQueryFileToCopy.unmarshall(ctx, soapval, "NumQueryFileToCopy");
	return hasValue;
}

bool CClusterEndpoint::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_URL.unmarshall(ctx, params, attachments, "URL", basepath);
	hasValue |= m_Status.unmarshall(ctx, params, attachments, "Status", basepath);
	hasValue |= m_NumQueryFileToCopy.unmarshall(ctx, params, attachments, "NumQueryFileToCopy", basepath);
	return hasValue;
}

const char * CClusterEndpoint::getURL() { return m_URL.query();}
const char * CClusterEndpoint::getStatus() { return m_Status.query();}
bool CClusterEndpoint::getNumQueryFileToCopy_isNull(){return m_NumQueryFileToCopy.is_nil();}
int CClusterEndpoint::getNumQueryFileToCopy() { return m_NumQueryFileToCopy;}
void CClusterEndpoint::setURL(const char * val){ m_URL.set(val); }
void CClusterEndpoint::setStatus(const char * val){ m_Status.set(val); }
void CClusterEndpoint::setNumQueryFileToCopy_null(){ m_NumQueryFileToCopy.Nil(); }void CClusterEndpoint::setNumQueryFileToCopy(int val){ m_NumQueryFileToCopy=val; }
extern "C"  IEspClusterEndpoint *createClusterEndpoint(const char *serv, const char *msgname){return ((IEspClusterEndpoint *)new CClusterEndpoint(serv /*, msgname*/));}
extern "C"  IClientClusterEndpoint *createClientClusterEndpoint(const char *serv, const char *msgname){return ((IClientClusterEndpoint *)new CClusterEndpoint(serv /*, msgname*/));}

//=======================================================
// class CLogicalFileUpload Implementation
//=======================================================

CLogicalFileUpload::CLogicalFileUpload(const char *serviceName, IRpcMessageBinding *init)
	: m_Type(nilIgnore),m_Source(nilIgnore),m_Destination(nilIgnore),m_EventTag(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("LogicalFileUpload");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CLogicalFileUpload::CLogicalFileUpload(const char *serviceName, const char *bc)
	: m_Type(nilIgnore),m_Source(nilIgnore),m_Destination(nilIgnore),m_EventTag(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("LogicalFileUpload");
}

StringBuffer &CLogicalFileUpload::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Source\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Destination\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EventTag\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CLogicalFileUpload::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CLogicalFileUpload::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CLogicalFileUpload::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Source");
	form.appendf("  <tr><td><b>Source: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Destination");
	form.appendf("  <tr><td><b>Destination: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventTag");
	form.appendf("  <tr><td><b>EventTag: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CLogicalFileUpload::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CLogicalFileUpload::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Source.marshall(rpc_resp, "Source", "", "", "");
	m_Destination.marshall(rpc_resp, "Destination", "", "", "");
	m_EventTag.marshall(rpc_resp, "EventTag", "", "", "");
}


void CLogicalFileUpload::copy(CLogicalFileUpload &from)
{
	m_Type.copy(from.m_Type);
	m_Source.copy(from.m_Source);
	m_Destination.copy(from.m_Destination);
	m_EventTag.copy(from.m_EventTag);
}


void CLogicalFileUpload::copy(IConstLogicalFileUpload &ifrom)
{
	setType(ifrom.getType());
	setSource(ifrom.getSource());
	setDestination(ifrom.getDestination());
	setEventTag(ifrom.getEventTag());
}


void CLogicalFileUpload::getAttributes(IProperties &attributes)
{
}


void CLogicalFileUpload::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Source.toStr(ctx, buffer, "Source", "", true, "", "");
	m_Destination.toStr(ctx, buffer, "Destination", "", true, "", "");
	m_EventTag.toStr(ctx, buffer, "EventTag", "", true, "", "");
}


void CLogicalFileUpload::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CLogicalFileUpload::serializer(IEspContext* ctx, IConstLogicalFileUpload &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<LogicalFileUpload>");
	// field Type
	{
		int n = src.getType();
		if (n)
			buffer.appendf("<Type>%d</Type>", n);
	}
	// field Source
	{
		const char* s = src.getSource();
		if (s && *s)
		{
			buffer.append("<Source>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Source>");
		}
	}
	// field Destination
	{
		const char* s = src.getDestination();
		if (s && *s)
		{
			buffer.append("<Destination>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Destination>");
		}
	}
	// field EventTag
	{
		const char* s = src.getEventTag();
		if (s && *s)
		{
			buffer.append("<EventTag>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventTag>");
		}
	}
	if (keepRootTag)
		buffer.append("</LogicalFileUpload>");
}

bool CLogicalFileUpload::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Source.unmarshall(rpc_request, "Source", basepath);
	hasValue |= m_Destination.unmarshall(rpc_request, "Destination", basepath);
	hasValue |= m_EventTag.unmarshall(rpc_request, "EventTag", basepath);
	return hasValue;
}

bool CLogicalFileUpload::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Source.unmarshall(ctx, soapval, "Source");
	hasValue |= m_Destination.unmarshall(ctx, soapval, "Destination");
	hasValue |= m_EventTag.unmarshall(ctx, soapval, "EventTag");
	return hasValue;
}

bool CLogicalFileUpload::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Source.unmarshall(ctx, params, attachments, "Source", basepath);
	hasValue |= m_Destination.unmarshall(ctx, params, attachments, "Destination", basepath);
	hasValue |= m_EventTag.unmarshall(ctx, params, attachments, "EventTag", basepath);
	return hasValue;
}

int CLogicalFileUpload::getType() { return m_Type;}
const char * CLogicalFileUpload::getSource() { return m_Source.query();}
const char * CLogicalFileUpload::getDestination() { return m_Destination.query();}
const char * CLogicalFileUpload::getEventTag() { return m_EventTag.query();}
void CLogicalFileUpload::setType(int val){ m_Type=val; }
void CLogicalFileUpload::setSource(const char * val){ m_Source.set(val); }
void CLogicalFileUpload::setDestination(const char * val){ m_Destination.set(val); }
void CLogicalFileUpload::setEventTag(const char * val){ m_EventTag.set(val); }
extern "C"  IEspLogicalFileUpload *createLogicalFileUpload(const char *serv, const char *msgname){return ((IEspLogicalFileUpload *)new CLogicalFileUpload(serv /*, msgname*/));}
extern "C"  IClientLogicalFileUpload *createClientLogicalFileUpload(const char *serv, const char *msgname){return ((IClientLogicalFileUpload *)new CLogicalFileUpload(serv /*, msgname*/));}

//=======================================================
// class CECLJob Implementation
//=======================================================

CECLJob::CECLJob(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Graph(nilRemove),m_State(nilRemove),m_StartedDate(nilRemove),m_FinishedDate(nilRemove),m_Cluster(nilRemove),m_GraphNum(nilRemove),m_SubGraphNum(nilRemove),m_NumOfRuns(nilRemove),m_Duration(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLJob");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CECLJob::CECLJob(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Graph(nilRemove),m_State(nilRemove),m_StartedDate(nilRemove),m_FinishedDate(nilRemove),m_Cluster(nilRemove),m_GraphNum(nilRemove),m_SubGraphNum(nilRemove),m_NumOfRuns(nilRemove),m_Duration(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ECLJob");
}

StringBuffer &CECLJob::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Graph\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartedDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FinishedDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ECLJob","GraphNum")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GraphNum\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLJob","SubGraphNum")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphNum\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLJob","NumOfRuns")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NumOfRuns\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ECLJob","Duration")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Duration\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CECLJob::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CECLJob::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ECLJob","GraphNum",1.06);
	info.addMinVersion("ECLJob","SubGraphNum",1.06);
	info.addMinVersion("ECLJob","NumOfRuns",1.06);
	info.addMinVersion("ECLJob","Duration",1.06);
}

StringBuffer &CECLJob::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Graph");
	form.appendf("  <tr><td><b>Graph: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartedDate");
	form.appendf("  <tr><td><b>StartedDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FinishedDate");
	form.appendf("  <tr><td><b>FinishedDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ECLJob","GraphNum")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GraphNum");
		form.appendf("  <tr><td><b>GraphNum: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLJob","SubGraphNum")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SubGraphNum");
		form.appendf("  <tr><td><b>SubGraphNum: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLJob","NumOfRuns")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NumOfRuns");
		form.appendf("  <tr><td><b>NumOfRuns: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ECLJob","Duration")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("Duration");
		form.appendf("  <tr><td><b>Duration: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CECLJob::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CECLJob::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Graph.marshall(rpc_resp, "Graph", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_StartedDate.marshall(rpc_resp, "StartedDate", "", "", "");
	m_FinishedDate.marshall(rpc_resp, "FinishedDate", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_GraphNum.marshall(rpc_resp, "GraphNum", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_SubGraphNum.marshall(rpc_resp, "SubGraphNum", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_NumOfRuns.marshall(rpc_resp, "NumOfRuns", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_Duration.marshall(rpc_resp, "Duration", "", "", "");
}


void CECLJob::copy(CECLJob &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Graph.copy(from.m_Graph);
	m_State.copy(from.m_State);
	m_StartedDate.copy(from.m_StartedDate);
	m_FinishedDate.copy(from.m_FinishedDate);
	m_Cluster.copy(from.m_Cluster);
	m_GraphNum.copy(from.m_GraphNum);
	m_SubGraphNum.copy(from.m_SubGraphNum);
	m_NumOfRuns.copy(from.m_NumOfRuns);
	m_Duration.copy(from.m_Duration);
}


void CECLJob::copy(IConstECLJob &ifrom)
{
	setWuid(ifrom.getWuid());
	setGraph(ifrom.getGraph());
	setState(ifrom.getState());
	setStartedDate(ifrom.getStartedDate());
	setFinishedDate(ifrom.getFinishedDate());
	setCluster(ifrom.getCluster());
	setGraphNum(ifrom.getGraphNum());
	setSubGraphNum(ifrom.getSubGraphNum());
	setNumOfRuns(ifrom.getNumOfRuns());
	setDuration(ifrom.getDuration());
}


void CECLJob::getAttributes(IProperties &attributes)
{
}


void CECLJob::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Graph.toStr(ctx, buffer, "Graph", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_StartedDate.toStr(ctx, buffer, "StartedDate", "", true, "", "");
	m_FinishedDate.toStr(ctx, buffer, "FinishedDate", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_GraphNum.toStr(ctx, buffer, "GraphNum", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_SubGraphNum.toStr(ctx, buffer, "SubGraphNum", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_NumOfRuns.toStr(ctx, buffer, "NumOfRuns", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.06))
		m_Duration.toStr(ctx, buffer, "Duration", "", true, "", "");
}


void CECLJob::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CECLJob::serializer(IEspContext* ctx, IConstECLJob &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ECLJob>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Graph
	{
		const char* s = src.getGraph();
		if (s && *s)
		{
			buffer.append("<Graph>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Graph>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field StartedDate
	{
		const char* s = src.getStartedDate();
		if (s && *s)
		{
			buffer.append("<StartedDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartedDate>");
		}
	}
	// field FinishedDate
	{
		const char* s = src.getFinishedDate();
		if (s && *s)
		{
			buffer.append("<FinishedDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FinishedDate>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field GraphNum
	if ((clientVer==-1.0 || clientVer>=1.06))
	{
		const char* s = src.getGraphNum();
		if (s && *s)
		{
			buffer.append("<GraphNum>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphNum>");
		}
	}
	// field SubGraphNum
	if ((clientVer==-1.0 || clientVer>=1.06))
	{
		const char* s = src.getSubGraphNum();
		if (s && *s)
		{
			buffer.append("<SubGraphNum>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SubGraphNum>");
		}
	}
	// field NumOfRuns
	if ((clientVer==-1.0 || clientVer>=1.06))
	{
		const char* s = src.getNumOfRuns();
		if (s && *s)
		{
			buffer.append("<NumOfRuns>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NumOfRuns>");
		}
	}
	// field Duration
	if ((clientVer==-1.0 || clientVer>=1.06))
	{
		int n = src.getDuration();
		if (n)
			buffer.appendf("<Duration>%d</Duration>", n);
	}
	if (keepRootTag)
		buffer.append("</ECLJob>");
}

bool CECLJob::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Graph.unmarshall(rpc_request, "Graph", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_StartedDate.unmarshall(rpc_request, "StartedDate", basepath);
	hasValue |= m_FinishedDate.unmarshall(rpc_request, "FinishedDate", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_GraphNum.unmarshall(rpc_request, "GraphNum", basepath);
	hasValue |= m_SubGraphNum.unmarshall(rpc_request, "SubGraphNum", basepath);
	hasValue |= m_NumOfRuns.unmarshall(rpc_request, "NumOfRuns", basepath);
	hasValue |= m_Duration.unmarshall(rpc_request, "Duration", basepath);
	return hasValue;
}

bool CECLJob::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Graph.unmarshall(ctx, soapval, "Graph");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StartedDate.unmarshall(ctx, soapval, "StartedDate");
	hasValue |= m_FinishedDate.unmarshall(ctx, soapval, "FinishedDate");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_GraphNum.unmarshall(ctx, soapval, "GraphNum");
	hasValue |= m_SubGraphNum.unmarshall(ctx, soapval, "SubGraphNum");
	hasValue |= m_NumOfRuns.unmarshall(ctx, soapval, "NumOfRuns");
	hasValue |= m_Duration.unmarshall(ctx, soapval, "Duration");
	return hasValue;
}

bool CECLJob::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Graph.unmarshall(ctx, params, attachments, "Graph", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StartedDate.unmarshall(ctx, params, attachments, "StartedDate", basepath);
	hasValue |= m_FinishedDate.unmarshall(ctx, params, attachments, "FinishedDate", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_GraphNum.unmarshall(ctx, params, attachments, "GraphNum", basepath);
	hasValue |= m_SubGraphNum.unmarshall(ctx, params, attachments, "SubGraphNum", basepath);
	hasValue |= m_NumOfRuns.unmarshall(ctx, params, attachments, "NumOfRuns", basepath);
	hasValue |= m_Duration.unmarshall(ctx, params, attachments, "Duration", basepath);
	return hasValue;
}

const char * CECLJob::getWuid() { return m_Wuid.query();}
const char * CECLJob::getGraph() { return m_Graph.query();}
const char * CECLJob::getState() { return m_State.query();}
const char * CECLJob::getStartedDate() { return m_StartedDate.query();}
const char * CECLJob::getFinishedDate() { return m_FinishedDate.query();}
const char * CECLJob::getCluster() { return m_Cluster.query();}
const char * CECLJob::getGraphNum() { return m_GraphNum.query();}
const char * CECLJob::getSubGraphNum() { return m_SubGraphNum.query();}
const char * CECLJob::getNumOfRuns() { return m_NumOfRuns.query();}
bool CECLJob::getDuration_isNull(){return m_Duration.is_nil();}
int CECLJob::getDuration() { return m_Duration;}
void CECLJob::setWuid(const char * val){ m_Wuid.set(val); }
void CECLJob::setGraph(const char * val){ m_Graph.set(val); }
void CECLJob::setState(const char * val){ m_State.set(val); }
void CECLJob::setStartedDate(const char * val){ m_StartedDate.set(val); }
void CECLJob::setFinishedDate(const char * val){ m_FinishedDate.set(val); }
void CECLJob::setCluster(const char * val){ m_Cluster.set(val); }
void CECLJob::setGraphNum(const char * val){ m_GraphNum.set(val); }
void CECLJob::setSubGraphNum(const char * val){ m_SubGraphNum.set(val); }
void CECLJob::setNumOfRuns(const char * val){ m_NumOfRuns.set(val); }
void CECLJob::setDuration_null(){ m_Duration.Nil(); }void CECLJob::setDuration(int val){ m_Duration=val; }
extern "C"  IEspECLJob *createECLJob(const char *serv, const char *msgname){return ((IEspECLJob *)new CECLJob(serv /*, msgname*/));}
extern "C"  IClientECLJob *createClientECLJob(const char *serv, const char *msgname){return ((IClientECLJob *)new CECLJob(serv /*, msgname*/));}

//=======================================================
// class CThorQueue Implementation
//=======================================================

CThorQueue::CThorQueue(const char *serviceName, IRpcMessageBinding *init)
	: m_DT(nilRemove),m_RunningWUs(nilRemove),m_QueuedWUs(nilRemove),m_WaitingThors(nilRemove),m_ConnectedThors(nilRemove),m_IdledThors(nilRemove),m_RunningWU1(nilRemove),m_RunningWU2(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ThorQueue");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CThorQueue::CThorQueue(const char *serviceName, const char *bc)
	: m_DT(nilRemove),m_RunningWUs(nilRemove),m_QueuedWUs(nilRemove),m_WaitingThors(nilRemove),m_ConnectedThors(nilRemove),m_IdledThors(nilRemove),m_RunningWU1(nilRemove),m_RunningWU2(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ThorQueue");
}

StringBuffer &CThorQueue::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DT\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RunningWUs\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueuedWUs\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WaitingThors\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ConnectedThors\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IdledThors\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RunningWU1\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RunningWU2\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CThorQueue::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CThorQueue::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CThorQueue::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DT");
	form.appendf("  <tr><td><b>DT: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RunningWUs");
	form.appendf("  <tr><td><b>RunningWUs: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueuedWUs");
	form.appendf("  <tr><td><b>QueuedWUs: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WaitingThors");
	form.appendf("  <tr><td><b>WaitingThors: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ConnectedThors");
	form.appendf("  <tr><td><b>ConnectedThors: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IdledThors");
	form.appendf("  <tr><td><b>IdledThors: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RunningWU1");
	form.appendf("  <tr><td><b>RunningWU1: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RunningWU2");
	form.appendf("  <tr><td><b>RunningWU2: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CThorQueue::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CThorQueue::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_DT.marshall(rpc_resp, "DT", "", "", "");
	m_RunningWUs.marshall(rpc_resp, "RunningWUs", "", "", "");
	m_QueuedWUs.marshall(rpc_resp, "QueuedWUs", "", "", "");
	m_WaitingThors.marshall(rpc_resp, "WaitingThors", "", "", "");
	m_ConnectedThors.marshall(rpc_resp, "ConnectedThors", "", "", "");
	m_IdledThors.marshall(rpc_resp, "IdledThors", "", "", "");
	m_RunningWU1.marshall(rpc_resp, "RunningWU1", "", "", "");
	m_RunningWU2.marshall(rpc_resp, "RunningWU2", "", "", "");
}


void CThorQueue::copy(CThorQueue &from)
{
	m_DT.copy(from.m_DT);
	m_RunningWUs.copy(from.m_RunningWUs);
	m_QueuedWUs.copy(from.m_QueuedWUs);
	m_WaitingThors.copy(from.m_WaitingThors);
	m_ConnectedThors.copy(from.m_ConnectedThors);
	m_IdledThors.copy(from.m_IdledThors);
	m_RunningWU1.copy(from.m_RunningWU1);
	m_RunningWU2.copy(from.m_RunningWU2);
}


void CThorQueue::copy(IConstThorQueue &ifrom)
{
	setDT(ifrom.getDT());
	setRunningWUs(ifrom.getRunningWUs());
	setQueuedWUs(ifrom.getQueuedWUs());
	setWaitingThors(ifrom.getWaitingThors());
	setConnectedThors(ifrom.getConnectedThors());
	setIdledThors(ifrom.getIdledThors());
	setRunningWU1(ifrom.getRunningWU1());
	setRunningWU2(ifrom.getRunningWU2());
}


void CThorQueue::getAttributes(IProperties &attributes)
{
}


void CThorQueue::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_DT.toStr(ctx, buffer, "DT", "", true, "", "");
	m_RunningWUs.toStr(ctx, buffer, "RunningWUs", "", true, "", "");
	m_QueuedWUs.toStr(ctx, buffer, "QueuedWUs", "", true, "", "");
	m_WaitingThors.toStr(ctx, buffer, "WaitingThors", "", true, "", "");
	m_ConnectedThors.toStr(ctx, buffer, "ConnectedThors", "", true, "", "");
	m_IdledThors.toStr(ctx, buffer, "IdledThors", "", true, "", "");
	m_RunningWU1.toStr(ctx, buffer, "RunningWU1", "", true, "", "");
	m_RunningWU2.toStr(ctx, buffer, "RunningWU2", "", true, "", "");
}


void CThorQueue::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CThorQueue::serializer(IEspContext* ctx, IConstThorQueue &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ThorQueue>");
	// field DT
	{
		const char* s = src.getDT();
		if (s && *s)
		{
			buffer.append("<DT>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DT>");
		}
	}
	// field RunningWUs
	{
		const char* s = src.getRunningWUs();
		if (s && *s)
		{
			buffer.append("<RunningWUs>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RunningWUs>");
		}
	}
	// field QueuedWUs
	{
		const char* s = src.getQueuedWUs();
		if (s && *s)
		{
			buffer.append("<QueuedWUs>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueuedWUs>");
		}
	}
	// field WaitingThors
	{
		const char* s = src.getWaitingThors();
		if (s && *s)
		{
			buffer.append("<WaitingThors>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WaitingThors>");
		}
	}
	// field ConnectedThors
	{
		const char* s = src.getConnectedThors();
		if (s && *s)
		{
			buffer.append("<ConnectedThors>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ConnectedThors>");
		}
	}
	// field IdledThors
	{
		const char* s = src.getIdledThors();
		if (s && *s)
		{
			buffer.append("<IdledThors>");
			encodeUtf8XML(s,buffer);
			buffer.append("</IdledThors>");
		}
	}
	// field RunningWU1
	{
		const char* s = src.getRunningWU1();
		if (s && *s)
		{
			buffer.append("<RunningWU1>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RunningWU1>");
		}
	}
	// field RunningWU2
	{
		const char* s = src.getRunningWU2();
		if (s && *s)
		{
			buffer.append("<RunningWU2>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RunningWU2>");
		}
	}
	if (keepRootTag)
		buffer.append("</ThorQueue>");
}

bool CThorQueue::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_DT.unmarshall(rpc_request, "DT", basepath);
	hasValue |= m_RunningWUs.unmarshall(rpc_request, "RunningWUs", basepath);
	hasValue |= m_QueuedWUs.unmarshall(rpc_request, "QueuedWUs", basepath);
	hasValue |= m_WaitingThors.unmarshall(rpc_request, "WaitingThors", basepath);
	hasValue |= m_ConnectedThors.unmarshall(rpc_request, "ConnectedThors", basepath);
	hasValue |= m_IdledThors.unmarshall(rpc_request, "IdledThors", basepath);
	hasValue |= m_RunningWU1.unmarshall(rpc_request, "RunningWU1", basepath);
	hasValue |= m_RunningWU2.unmarshall(rpc_request, "RunningWU2", basepath);
	return hasValue;
}

bool CThorQueue::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DT.unmarshall(ctx, soapval, "DT");
	hasValue |= m_RunningWUs.unmarshall(ctx, soapval, "RunningWUs");
	hasValue |= m_QueuedWUs.unmarshall(ctx, soapval, "QueuedWUs");
	hasValue |= m_WaitingThors.unmarshall(ctx, soapval, "WaitingThors");
	hasValue |= m_ConnectedThors.unmarshall(ctx, soapval, "ConnectedThors");
	hasValue |= m_IdledThors.unmarshall(ctx, soapval, "IdledThors");
	hasValue |= m_RunningWU1.unmarshall(ctx, soapval, "RunningWU1");
	hasValue |= m_RunningWU2.unmarshall(ctx, soapval, "RunningWU2");
	return hasValue;
}

bool CThorQueue::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DT.unmarshall(ctx, params, attachments, "DT", basepath);
	hasValue |= m_RunningWUs.unmarshall(ctx, params, attachments, "RunningWUs", basepath);
	hasValue |= m_QueuedWUs.unmarshall(ctx, params, attachments, "QueuedWUs", basepath);
	hasValue |= m_WaitingThors.unmarshall(ctx, params, attachments, "WaitingThors", basepath);
	hasValue |= m_ConnectedThors.unmarshall(ctx, params, attachments, "ConnectedThors", basepath);
	hasValue |= m_IdledThors.unmarshall(ctx, params, attachments, "IdledThors", basepath);
	hasValue |= m_RunningWU1.unmarshall(ctx, params, attachments, "RunningWU1", basepath);
	hasValue |= m_RunningWU2.unmarshall(ctx, params, attachments, "RunningWU2", basepath);
	return hasValue;
}

const char * CThorQueue::getDT() { return m_DT.query();}
const char * CThorQueue::getRunningWUs() { return m_RunningWUs.query();}
const char * CThorQueue::getQueuedWUs() { return m_QueuedWUs.query();}
const char * CThorQueue::getWaitingThors() { return m_WaitingThors.query();}
const char * CThorQueue::getConnectedThors() { return m_ConnectedThors.query();}
const char * CThorQueue::getIdledThors() { return m_IdledThors.query();}
const char * CThorQueue::getRunningWU1() { return m_RunningWU1.query();}
const char * CThorQueue::getRunningWU2() { return m_RunningWU2.query();}
void CThorQueue::setDT(const char * val){ m_DT.set(val); }
void CThorQueue::setRunningWUs(const char * val){ m_RunningWUs.set(val); }
void CThorQueue::setQueuedWUs(const char * val){ m_QueuedWUs.set(val); }
void CThorQueue::setWaitingThors(const char * val){ m_WaitingThors.set(val); }
void CThorQueue::setConnectedThors(const char * val){ m_ConnectedThors.set(val); }
void CThorQueue::setIdledThors(const char * val){ m_IdledThors.set(val); }
void CThorQueue::setRunningWU1(const char * val){ m_RunningWU1.set(val); }
void CThorQueue::setRunningWU2(const char * val){ m_RunningWU2.set(val); }
extern "C"  IEspThorQueue *createThorQueue(const char *serv, const char *msgname){return ((IEspThorQueue *)new CThorQueue(serv /*, msgname*/));}
extern "C"  IClientThorQueue *createClientThorQueue(const char *serv, const char *msgname){return ((IClientThorQueue *)new CThorQueue(serv /*, msgname*/));}

//=======================================================
// class CResubmittedWU Implementation
//=======================================================

CResubmittedWU::CResubmittedWU(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilRemove),m_ParentWUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ResubmittedWU");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CResubmittedWU::CResubmittedWU(const char *serviceName, const char *bc)
	: m_WUID(nilRemove),m_ParentWUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ResubmittedWU");
}

StringBuffer &CResubmittedWU::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ParentWUID\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CResubmittedWU::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CResubmittedWU::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CResubmittedWU::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ParentWUID");
	form.appendf("  <tr><td><b>ParentWUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CResubmittedWU::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CResubmittedWU::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_WUID.marshall(rpc_resp, "WUID", "", "", "");
	m_ParentWUID.marshall(rpc_resp, "ParentWUID", "", "", "");
}


void CResubmittedWU::copy(CResubmittedWU &from)
{
	m_WUID.copy(from.m_WUID);
	m_ParentWUID.copy(from.m_ParentWUID);
}


void CResubmittedWU::copy(IConstResubmittedWU &ifrom)
{
	setWUID(ifrom.getWUID());
	setParentWUID(ifrom.getParentWUID());
}


void CResubmittedWU::getAttributes(IProperties &attributes)
{
}


void CResubmittedWU::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
	m_ParentWUID.toStr(ctx, buffer, "ParentWUID", "", true, "", "");
}


void CResubmittedWU::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CResubmittedWU::serializer(IEspContext* ctx, IConstResubmittedWU &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ResubmittedWU>");
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field ParentWUID
	{
		const char* s = src.getParentWUID();
		if (s && *s)
		{
			buffer.append("<ParentWUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ParentWUID>");
		}
	}
	if (keepRootTag)
		buffer.append("</ResubmittedWU>");
}

bool CResubmittedWU::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	hasValue |= m_ParentWUID.unmarshall(rpc_request, "ParentWUID", basepath);
	return hasValue;
}

bool CResubmittedWU::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_ParentWUID.unmarshall(ctx, soapval, "ParentWUID");
	return hasValue;
}

bool CResubmittedWU::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_ParentWUID.unmarshall(ctx, params, attachments, "ParentWUID", basepath);
	return hasValue;
}

const char * CResubmittedWU::getWUID() { return m_WUID.query();}
const char * CResubmittedWU::getParentWUID() { return m_ParentWUID.query();}
void CResubmittedWU::setWUID(const char * val){ m_WUID.set(val); }
void CResubmittedWU::setParentWUID(const char * val){ m_ParentWUID.set(val); }
extern "C"  IEspResubmittedWU *createResubmittedWU(const char *serv, const char *msgname){return ((IEspResubmittedWU *)new CResubmittedWU(serv /*, msgname*/));}
extern "C"  IClientResubmittedWU *createClientResubmittedWU(const char *serv, const char *msgname){return ((IClientResubmittedWU *)new CResubmittedWU(serv /*, msgname*/));}

//=======================================================
// class CWUFileOption Implementation
//=======================================================

CWUFileOption::CWUFileOption(const char *serviceName, IRpcMessageBinding *init)
	: m_FileType(nilIgnore),m_Name(nilIgnore),m_IPAddress(nilIgnore),m_Description(nilIgnore),m_Process(nilIgnore),m_LogDate(nilIgnore),m_ClusterGroup(nilIgnore),m_PlainText(nilIgnore),m_SlaveNumber(1, nilIgnore,false),m_SizeLimit(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFileOption");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUFileOption::CWUFileOption(const char *serviceName, const char *bc)
	: m_FileType(nilIgnore),m_Name(nilIgnore),m_IPAddress(nilIgnore),m_Description(nilIgnore),m_Process(nilIgnore),m_LogDate(nilIgnore),m_ClusterGroup(nilIgnore),m_PlainText(nilIgnore),m_SlaveNumber(1, nilIgnore,false),m_SizeLimit(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFileOption");
}

StringBuffer &CWUFileOption::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileType\" type=\"tns:WUFileType\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IPAddress\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Process\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterGroup\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PlainText\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"1\" name=\"SlaveNumber\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SizeLimit\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXWUFileType::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUFileOption::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUFileOption::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUFileType"))
	{
		added.setValue("WUFileType",1);
		CXWUFileType::getMapInfo(info,added);
	}
}

StringBuffer &CWUFileOption::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileType");
	form.appendf("  <tr><td><b>FileType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IPAddress");
	form.appendf("  <tr><td><b>IPAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Process");
	form.appendf("  <tr><td><b>Process: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogDate");
	form.appendf("  <tr><td><b>LogDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterGroup");
	form.appendf("  <tr><td><b>ClusterGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PlainText");
	form.appendf("  <tr><td><b>PlainText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("SlaveNumber");
	form.appendf("  <tr><td><b>SlaveNumber: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"1\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SizeLimit");
	form.appendf("  <tr><td><b>SizeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUFileOption::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUFileOption::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_FileType.marshall(rpc_resp, "FileType", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_IPAddress.marshall(rpc_resp, "IPAddress", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
	m_Process.marshall(rpc_resp, "Process", "", "", "");
	m_LogDate.marshall(rpc_resp, "LogDate", "", "", "");
	m_ClusterGroup.marshall(rpc_resp, "ClusterGroup", "", "", "");
	m_PlainText.marshall(rpc_resp, "PlainText", "", "", "");
	m_SlaveNumber.marshall(rpc_resp, "SlaveNumber", "", "", "");
	m_SizeLimit.marshall(rpc_resp, "SizeLimit", "", "", "");
}


void CWUFileOption::copy(CWUFileOption &from)
{
	m_FileType.copy(from.m_FileType);
	m_Name.copy(from.m_Name);
	m_IPAddress.copy(from.m_IPAddress);
	m_Description.copy(from.m_Description);
	m_Process.copy(from.m_Process);
	m_LogDate.copy(from.m_LogDate);
	m_ClusterGroup.copy(from.m_ClusterGroup);
	m_PlainText.copy(from.m_PlainText);
	m_SlaveNumber.copy(from.m_SlaveNumber);
	m_SizeLimit.copy(from.m_SizeLimit);
}


void CWUFileOption::copy(IConstWUFileOption &ifrom)
{
	setFileType(ifrom.getFileType());
	setName(ifrom.getName());
	setIPAddress(ifrom.getIPAddress());
	setDescription(ifrom.getDescription());
	setProcess(ifrom.getProcess());
	setLogDate(ifrom.getLogDate());
	setClusterGroup(ifrom.getClusterGroup());
	setPlainText(ifrom.getPlainText());
	setSlaveNumber(ifrom.getSlaveNumber());
	setSizeLimit(ifrom.getSizeLimit());
}


void CWUFileOption::getAttributes(IProperties &attributes)
{
}


void CWUFileOption::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_FileType.toStr(ctx, buffer, "FileType", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_IPAddress.toStr(ctx, buffer, "IPAddress", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	m_Process.toStr(ctx, buffer, "Process", "", true, "", "");
	m_LogDate.toStr(ctx, buffer, "LogDate", "", true, "", "");
	m_ClusterGroup.toStr(ctx, buffer, "ClusterGroup", "", true, "", "");
	m_PlainText.toStr(ctx, buffer, "PlainText", "", true, "", "");
	m_SlaveNumber.toStr(ctx, buffer, "SlaveNumber", "", true, "", "");
	m_SizeLimit.toStr(ctx, buffer, "SizeLimit", "", true, "", "");
}


void CWUFileOption::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUFileOption::serializer(IEspContext* ctx, IConstWUFileOption &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUFileOption>");
	// field FileType
	{
		const char* s = src.getFileTypeAsString();
		buffer.append("<FileType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</FileType>");
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field IPAddress
	{
		const char* s = src.getIPAddress();
		if (s && *s)
		{
			buffer.append("<IPAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</IPAddress>");
		}
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field Process
	{
		const char* s = src.getProcess();
		if (s && *s)
		{
			buffer.append("<Process>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Process>");
		}
	}
	// field LogDate
	{
		const char* s = src.getLogDate();
		if (s && *s)
		{
			buffer.append("<LogDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogDate>");
		}
	}
	// field ClusterGroup
	{
		const char* s = src.getClusterGroup();
		if (s && *s)
		{
			buffer.append("<ClusterGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterGroup>");
		}
	}
	// field PlainText
	{
		const char* s = src.getPlainText();
		if (s && *s)
		{
			buffer.append("<PlainText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PlainText>");
		}
	}
	// field SlaveNumber
	{
		int n = src.getSlaveNumber();
		if (n)
			buffer.appendf("<SlaveNumber>%d</SlaveNumber>", n);
	}
	// field SizeLimit
	{
		//*** default kind: TK_INT; type=int64, name=SizeLimit
		buffer.append("<SizeLimit>");
		buffer.append(src.getSizeLimit());
		buffer.append("</SizeLimit>");
	}
	if (keepRootTag)
		buffer.append("</WUFileOption>");
}

bool CWUFileOption::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_FileType.unmarshall(rpc_request, "FileType", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_IPAddress.unmarshall(rpc_request, "IPAddress", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_Process.unmarshall(rpc_request, "Process", basepath);
	hasValue |= m_LogDate.unmarshall(rpc_request, "LogDate", basepath);
	hasValue |= m_ClusterGroup.unmarshall(rpc_request, "ClusterGroup", basepath);
	hasValue |= m_PlainText.unmarshall(rpc_request, "PlainText", basepath);
	hasValue |= m_SlaveNumber.unmarshall(rpc_request, "SlaveNumber", basepath);
	hasValue |= m_SizeLimit.unmarshall(rpc_request, "SizeLimit", basepath);
	return hasValue;
}

bool CWUFileOption::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FileType.unmarshall(ctx, soapval, "FileType");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_IPAddress.unmarshall(ctx, soapval, "IPAddress");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_Process.unmarshall(ctx, soapval, "Process");
	hasValue |= m_LogDate.unmarshall(ctx, soapval, "LogDate");
	hasValue |= m_ClusterGroup.unmarshall(ctx, soapval, "ClusterGroup");
	hasValue |= m_PlainText.unmarshall(ctx, soapval, "PlainText");
	hasValue |= m_SlaveNumber.unmarshall(ctx, soapval, "SlaveNumber");
	hasValue |= m_SizeLimit.unmarshall(ctx, soapval, "SizeLimit");
	return hasValue;
}

bool CWUFileOption::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FileType.unmarshall(ctx, params, attachments, "FileType", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_IPAddress.unmarshall(ctx, params, attachments, "IPAddress", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_Process.unmarshall(ctx, params, attachments, "Process", basepath);
	hasValue |= m_LogDate.unmarshall(ctx, params, attachments, "LogDate", basepath);
	hasValue |= m_ClusterGroup.unmarshall(ctx, params, attachments, "ClusterGroup", basepath);
	hasValue |= m_PlainText.unmarshall(ctx, params, attachments, "PlainText", basepath);
	hasValue |= m_SlaveNumber.unmarshall(ctx, params, attachments, "SlaveNumber", basepath);
	hasValue |= m_SizeLimit.unmarshall(ctx, params, attachments, "SizeLimit", basepath);
	return hasValue;
}

CWUFileType CWUFileOption::getFileType() { return m_FileType.getValue(); }
const char* CWUFileOption::getFileTypeAsString() {  return (const char*)m_FileType; }
const char * CWUFileOption::getName() { return m_Name.query();}
const char * CWUFileOption::getIPAddress() { return m_IPAddress.query();}
const char * CWUFileOption::getDescription() { return m_Description.query();}
const char * CWUFileOption::getProcess() { return m_Process.query();}
const char * CWUFileOption::getLogDate() { return m_LogDate.query();}
const char * CWUFileOption::getClusterGroup() { return m_ClusterGroup.query();}
const char * CWUFileOption::getPlainText() { return m_PlainText.query();}
int CWUFileOption::getSlaveNumber() { return m_SlaveNumber;}
__int64 CWUFileOption::getSizeLimit() { return m_SizeLimit;}
void CWUFileOption::setFileType(CWUFileType val) { m_FileType.setValue(val); }
void CWUFileOption::setFileType(const char* val) { m_FileType.setValue(val); }
void CWUFileOption::setName(const char * val){ m_Name.set(val); }
void CWUFileOption::setIPAddress(const char * val){ m_IPAddress.set(val); }
void CWUFileOption::setDescription(const char * val){ m_Description.set(val); }
void CWUFileOption::setProcess(const char * val){ m_Process.set(val); }
void CWUFileOption::setLogDate(const char * val){ m_LogDate.set(val); }
void CWUFileOption::setClusterGroup(const char * val){ m_ClusterGroup.set(val); }
void CWUFileOption::setPlainText(const char * val){ m_PlainText.set(val); }
void CWUFileOption::setSlaveNumber(int val){ m_SlaveNumber=val; }
void CWUFileOption::setSizeLimit(__int64 val){ m_SizeLimit=val; }
extern "C"  IEspWUFileOption *createWUFileOption(const char *serv, const char *msgname){return ((IEspWUFileOption *)new CWUFileOption(serv /*, msgname*/));}
extern "C"  IClientWUFileOption *createClientWUFileOption(const char *serv, const char *msgname){return ((IClientWUFileOption *)new CWUFileOption(serv /*, msgname*/));}

//=======================================================
// class CWUCreateRequest Implementation
//=======================================================

CWUCreateRequest::CWUCreateRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCreateRequest::CWUCreateRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateRequest");
}

CWUCreateRequest::CWUCreateRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCreateRequest::CWUCreateRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCreateRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWUCreateRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCreateRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUCreateRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCreateRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCreateRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWUCreateRequest::copy(CWUCreateRequest &from)
{
}


void CWUCreateRequest::copy(IConstWUCreateRequest &ifrom)
{
}


void CWUCreateRequest::getAttributes(IProperties &attributes)
{
}


void CWUCreateRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWUCreateRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCreateRequest::serializer(IEspContext* ctx, IConstWUCreateRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCreateRequest>");
	if (keepRootTag)
		buffer.append("</WUCreateRequest>");
}

bool CWUCreateRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWUCreateRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWUCreateRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWUCreateRequest *createWUCreateRequest(const char *serv){return ((IEspWUCreateRequest *)new CWUCreateRequest(serv));}
extern "C"  IClientWUCreateRequest *createClientWUCreateRequest(const char *serv){return ((IClientWUCreateRequest *)new CWUCreateRequest(serv));}

//=======================================================
// class CWUCreateResponse Implementation
//=======================================================

CWUCreateResponse::CWUCreateResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCreateResponse::CWUCreateResponse(const char *serviceName, const char *bc)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateResponse");
}

CWUCreateResponse::CWUCreateResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCreateResponse::CWUCreateResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCreateResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunit\" type=\"tns:ECLWorkunit\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLWorkunit::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUCreateResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCreateResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLWorkunit"))
	{
		added.setValue("ECLWorkunit",1);
		CECLWorkunit::getMapInfo(info,added);
	}
}

StringBuffer &CWUCreateResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunit");
	form.append("<tr>").append("<td><b>Workunit: </b></td><td><hr/>");
	CECLWorkunit::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCreateResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCreateResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Workunit.marshall(rpc_resp, "Workunit", "", "", "");
	}
}


void CWUCreateResponse::copy(CWUCreateResponse &from)
{
	m_Workunit.copy(from.m_Workunit);
}


void CWUCreateResponse::copy(IConstWUCreateResponse &ifrom)
{
	setWorkunit(ifrom.getWorkunit());
}


void CWUCreateResponse::getAttributes(IProperties &attributes)
{
}


void CWUCreateResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Workunit.toStr(ctx, buffer, "Workunit", "", false, "", "");
	}
}


void CWUCreateResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCreateResponse::serializer(IEspContext* ctx, IConstWUCreateResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCreateResponse>");
	// field Workunit
	{
		StringBuffer tmp;
		CECLWorkunit::serializer(ctx,src.getWorkunit(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Workunit>%s</Workunit>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUCreateResponse>");
}

bool CWUCreateResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Workunit.unmarshall(rpc_request, "Workunit", basepath);
	}
	return hasValue;
}

bool CWUCreateResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, soapval, "Workunit");
	return hasValue;
}

bool CWUCreateResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, params, attachments, "Workunit", basepath);
	return hasValue;
}

IConstECLWorkunit & CWUCreateResponse::getWorkunit() { return (IConstECLWorkunit &) m_Workunit.getValue();}
IEspECLWorkunit & CWUCreateResponse::updateWorkunit(){ return (IEspECLWorkunit &) m_Workunit.getValue(); }
void CWUCreateResponse::setWorkunit(IConstECLWorkunit &ifrom){ m_Workunit.copy(ifrom); }
extern "C"  IEspWUCreateResponse *createWUCreateResponse(const char *serv){return ((IEspWUCreateResponse *)new CWUCreateResponse(serv));}
extern "C"  IClientWUCreateResponse *createClientWUCreateResponse(const char *serv){return ((IClientWUCreateResponse *)new CWUCreateResponse(serv));}

//=======================================================
// class CWUDeployWorkunitRequest Implementation
//=======================================================

CWUDeployWorkunitRequest::CWUDeployWorkunitRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilRemove),m_Name(nilRemove),m_Wait(-1, nilRemove,false),m_ObjType(nilRemove),m_FileName(nilRemove),m_Object(nilRemove),m_ResultLimit(nilRemove),m_QueryMainDefinition(nilRemove),m_Snapshot(nilRemove),m_DebugValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDeployWorkunitRequest::CWUDeployWorkunitRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilRemove),m_Name(nilRemove),m_Wait(-1, nilRemove,false),m_ObjType(nilRemove),m_FileName(nilRemove),m_Object(nilRemove),m_ResultLimit(nilRemove),m_QueryMainDefinition(nilRemove),m_Snapshot(nilRemove),m_DebugValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitRequest");
}

CWUDeployWorkunitRequest::CWUDeployWorkunitRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilRemove),m_Name(nilRemove),m_Wait(-1, nilRemove,false),m_ObjType(nilRemove),m_FileName(nilRemove),m_Object(nilRemove),m_ResultLimit(nilRemove),m_QueryMainDefinition(nilRemove),m_Snapshot(nilRemove),m_DebugValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDeployWorkunitRequest::CWUDeployWorkunitRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilRemove),m_Name(nilRemove),m_Wait(-1, nilRemove,false),m_ObjType(nilRemove),m_FileName(nilRemove),m_Object(nilRemove),m_ResultLimit(nilRemove),m_QueryMainDefinition(nilRemove),m_Snapshot(nilRemove),m_DebugValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDeployWorkunitRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"Wait\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ObjType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Object\" type=\"xsd:base64Binary\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResultLimit\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryMainDefinition\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Snapshot\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValues\" type=\"tns:ArrayOfNamedValue\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CNamedValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("NamedValue") && added.getValue("ArrayOfNamedValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfNamedValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"NamedValue\" type=\"tns:NamedValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfNamedValue",1);
	}
	return schema;
}

void CWUDeployWorkunitRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDeployWorkunitRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("NamedValue"))
	{
		added.setValue("NamedValue",1);
		CNamedValue::getMapInfo(info,added);
	}
}

StringBuffer &CWUDeployWorkunitRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Wait");
	form.appendf("  <tr><td><b>Wait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ObjType");
	form.appendf("  <tr><td><b>ObjType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Object");
	form.appendf("  <tr><td><b>Object: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ResultLimit");
	form.appendf("  <tr><td><b>ResultLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryMainDefinition");
	form.appendf("  <tr><td><b>QueryMainDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Snapshot");
	form.appendf("  <tr><td><b>Snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DebugValues");
	form.appendf("<tr><td><b>DebugValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDeployWorkunitRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDeployWorkunitRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Wait.marshall(rpc_resp, "Wait", "", "", "");
	m_ObjType.marshall(rpc_resp, "ObjType", "", "", "");
	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	m_Object.marshall(rpc_resp, "Object", "", "", "");
	m_ResultLimit.marshall(rpc_resp, "ResultLimit", "", "", "");
	m_QueryMainDefinition.marshall(rpc_resp, "QueryMainDefinition", "", "", "");
	m_Snapshot.marshall(rpc_resp, "Snapshot", "", "", "");
	m_DebugValues.marshall(rpc_resp, "DebugValues", "NamedValue");
}


void CWUDeployWorkunitRequest::copy(CWUDeployWorkunitRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_Name.copy(from.m_Name);
	m_Wait.copy(from.m_Wait);
	m_ObjType.copy(from.m_ObjType);
	m_FileName.copy(from.m_FileName);
	m_Object.copy(from.m_Object);
	m_ResultLimit.copy(from.m_ResultLimit);
	m_QueryMainDefinition.copy(from.m_QueryMainDefinition);
	m_Snapshot.copy(from.m_Snapshot);
	m_DebugValues.copy(from.m_DebugValues);
}


void CWUDeployWorkunitRequest::copy(IConstWUDeployWorkunitRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setName(ifrom.getName());
	setWait(ifrom.getWait());
	setObjType(ifrom.getObjType());
	setFileName(ifrom.getFileName());
	setObject(ifrom.getObject());
	setResultLimit(ifrom.getResultLimit());
	setQueryMainDefinition(ifrom.getQueryMainDefinition());
	setSnapshot(ifrom.getSnapshot());
	setDebugValues(ifrom.getDebugValues());
}


void CWUDeployWorkunitRequest::getAttributes(IProperties &attributes)
{
}


void CWUDeployWorkunitRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Wait.toStr(ctx, buffer, "Wait", "", true, "", "");
	m_ObjType.toStr(ctx, buffer, "ObjType", "", true, "", "");
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	m_Object.toStr(ctx, buffer, "Object", "", true, "", "");
	m_ResultLimit.toStr(ctx, buffer, "ResultLimit", "", true, "", "");
	m_QueryMainDefinition.toStr(ctx, buffer, "QueryMainDefinition", "", true, "", "");
	m_Snapshot.toStr(ctx, buffer, "Snapshot", "", true, "", "");
	m_DebugValues.toStr(ctx, buffer, "DebugValues", "NamedValue");
}


void CWUDeployWorkunitRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDeployWorkunitRequest::serializer(IEspContext* ctx, IConstWUDeployWorkunitRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDeployWorkunitRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Wait
	{
		int n = src.getWait();
		if (n)
			buffer.appendf("<Wait>%d</Wait>", n);
	}
	// field ObjType
	{
		const char* s = src.getObjType();
		if (s && *s)
		{
			buffer.append("<ObjType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ObjType>");
		}
	}
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field Object
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getObject().toByteArray(), src.getObject().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Object>%s</Object>",tmp.str());
	}
	// field ResultLimit
	{
		int n = src.getResultLimit();
		if (n)
			buffer.appendf("<ResultLimit>%d</ResultLimit>", n);
	}
	// field QueryMainDefinition
	{
		const char* s = src.getQueryMainDefinition();
		if (s && *s)
		{
			buffer.append("<QueryMainDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryMainDefinition>");
		}
	}
	// field Snapshot
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<Snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Snapshot>");
		}
	}
	// field DebugValues
	{
		IArrayOf<IConstNamedValue>& v = src.getDebugValues();
		int size = v.length();
		if (size>0)
			buffer.append("<DebugValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CNamedValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DebugValues>");
	}
	if (keepRootTag)
		buffer.append("</WUDeployWorkunitRequest>");
}

bool CWUDeployWorkunitRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Wait.unmarshall(rpc_request, "Wait", basepath);
	hasValue |= m_ObjType.unmarshall(rpc_request, "ObjType", basepath);
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_Object.unmarshall(rpc_request, "Object", basepath);
	hasValue |= m_ResultLimit.unmarshall(rpc_request, "ResultLimit", basepath);
	hasValue |= m_QueryMainDefinition.unmarshall(rpc_request, "QueryMainDefinition", basepath);
	hasValue |= m_Snapshot.unmarshall(rpc_request, "Snapshot", basepath);
	hasValue |= m_DebugValues.unmarshall(rpc_request, "DebugValues", basepath);
	return hasValue;
}

bool CWUDeployWorkunitRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Wait.unmarshall(ctx, soapval, "Wait");
	hasValue |= m_ObjType.unmarshall(ctx, soapval, "ObjType");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_Object.unmarshall(ctx, soapval, "Object");
	hasValue |= m_ResultLimit.unmarshall(ctx, soapval, "ResultLimit");
	hasValue |= m_QueryMainDefinition.unmarshall(ctx, soapval, "QueryMainDefinition");
	hasValue |= m_Snapshot.unmarshall(ctx, soapval, "Snapshot");
	hasValue |= m_DebugValues.unmarshall(ctx, soapval, "DebugValues");
	return hasValue;
}

bool CWUDeployWorkunitRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Wait.unmarshall(ctx, params, attachments, "Wait", basepath);
	hasValue |= m_ObjType.unmarshall(ctx, params, attachments, "ObjType", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_Object.unmarshall(ctx, params, attachments, "Object", basepath);
	hasValue |= m_ResultLimit.unmarshall(ctx, params, attachments, "ResultLimit", basepath);
	hasValue |= m_QueryMainDefinition.unmarshall(ctx, params, attachments, "QueryMainDefinition", basepath);
	hasValue |= m_Snapshot.unmarshall(ctx, params, attachments, "Snapshot", basepath);
	hasValue |= m_DebugValues.unmarshall(ctx, params, attachments, "DebugValues", basepath);
	return hasValue;
}

const char * CWUDeployWorkunitRequest::getCluster() { return m_Cluster.query();}
const char * CWUDeployWorkunitRequest::getName() { return m_Name.query();}
bool CWUDeployWorkunitRequest::getWait_isNull(){return m_Wait.is_nil();}
int CWUDeployWorkunitRequest::getWait() { return m_Wait;}
const char * CWUDeployWorkunitRequest::getObjType() { return m_ObjType.query();}
const char * CWUDeployWorkunitRequest::getFileName() { return m_FileName.query();}
const MemoryBuffer & CWUDeployWorkunitRequest::getObject() { return m_Object.getValue();}
bool CWUDeployWorkunitRequest::getResultLimit_isNull(){return m_ResultLimit.is_nil();}
int CWUDeployWorkunitRequest::getResultLimit() { return m_ResultLimit;}
const char * CWUDeployWorkunitRequest::getQueryMainDefinition() { return m_QueryMainDefinition.query();}
const char * CWUDeployWorkunitRequest::getSnapshot() { return m_Snapshot.query();}
IArrayOf<IConstNamedValue> & CWUDeployWorkunitRequest::getDebugValues() { return (IArrayOf<IConstNamedValue> &) m_DebugValues; }
void CWUDeployWorkunitRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUDeployWorkunitRequest::setName(const char * val){ m_Name.set(val); }
void CWUDeployWorkunitRequest::setWait_null(){ m_Wait.Nil(); }void CWUDeployWorkunitRequest::setWait(int val){ m_Wait=val; }
void CWUDeployWorkunitRequest::setObjType(const char * val){ m_ObjType.set(val); }
void CWUDeployWorkunitRequest::setFileName(const char * val){ m_FileName.set(val); }
void CWUDeployWorkunitRequest::setObject(const MemoryBuffer & val){ m_Object->clear().append(val); }
void CWUDeployWorkunitRequest::setResultLimit_null(){ m_ResultLimit.Nil(); }void CWUDeployWorkunitRequest::setResultLimit(int val){ m_ResultLimit=val; }
void CWUDeployWorkunitRequest::setQueryMainDefinition(const char * val){ m_QueryMainDefinition.set(val); }
void CWUDeployWorkunitRequest::setSnapshot(const char * val){ m_Snapshot.set(val); }
void CWUDeployWorkunitRequest::setDebugValues(IArrayOf<IEspNamedValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstNamedValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNamedValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUDeployWorkunitRequest::setDebugValues(IArrayOf<IConstNamedValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstNamedValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNamedValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUDeployWorkunitRequest *createWUDeployWorkunitRequest(const char *serv){return ((IEspWUDeployWorkunitRequest *)new CWUDeployWorkunitRequest(serv));}
extern "C"  IClientWUDeployWorkunitRequest *createClientWUDeployWorkunitRequest(const char *serv){return ((IClientWUDeployWorkunitRequest *)new CWUDeployWorkunitRequest(serv));}

//=======================================================
// class CWUDeployWorkunitResponse Implementation
//=======================================================

CWUDeployWorkunitResponse::CWUDeployWorkunitResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDeployWorkunitResponse::CWUDeployWorkunitResponse(const char *serviceName, const char *bc)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitResponse");
}

CWUDeployWorkunitResponse::CWUDeployWorkunitResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDeployWorkunitResponse::CWUDeployWorkunitResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeployWorkunitResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDeployWorkunitResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunit\" type=\"tns:ECLWorkunit\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLWorkunit::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUDeployWorkunitResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDeployWorkunitResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLWorkunit"))
	{
		added.setValue("ECLWorkunit",1);
		CECLWorkunit::getMapInfo(info,added);
	}
}

StringBuffer &CWUDeployWorkunitResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunit");
	form.append("<tr>").append("<td><b>Workunit: </b></td><td><hr/>");
	CECLWorkunit::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDeployWorkunitResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDeployWorkunitResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Workunit.marshall(rpc_resp, "Workunit", "", "", "");
	}
}


void CWUDeployWorkunitResponse::copy(CWUDeployWorkunitResponse &from)
{
	m_Workunit.copy(from.m_Workunit);
}


void CWUDeployWorkunitResponse::copy(IConstWUDeployWorkunitResponse &ifrom)
{
	setWorkunit(ifrom.getWorkunit());
}


void CWUDeployWorkunitResponse::getAttributes(IProperties &attributes)
{
}


void CWUDeployWorkunitResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Workunit.toStr(ctx, buffer, "Workunit", "", false, "", "");
	}
}


void CWUDeployWorkunitResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDeployWorkunitResponse::serializer(IEspContext* ctx, IConstWUDeployWorkunitResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDeployWorkunitResponse>");
	// field Workunit
	{
		StringBuffer tmp;
		CECLWorkunit::serializer(ctx,src.getWorkunit(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Workunit>%s</Workunit>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUDeployWorkunitResponse>");
}

bool CWUDeployWorkunitResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Workunit.unmarshall(rpc_request, "Workunit", basepath);
	}
	return hasValue;
}

bool CWUDeployWorkunitResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, soapval, "Workunit");
	return hasValue;
}

bool CWUDeployWorkunitResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, params, attachments, "Workunit", basepath);
	return hasValue;
}

IConstECLWorkunit & CWUDeployWorkunitResponse::getWorkunit() { return (IConstECLWorkunit &) m_Workunit.getValue();}
IEspECLWorkunit & CWUDeployWorkunitResponse::updateWorkunit(){ return (IEspECLWorkunit &) m_Workunit.getValue(); }
void CWUDeployWorkunitResponse::setWorkunit(IConstECLWorkunit &ifrom){ m_Workunit.copy(ifrom); }
extern "C"  IEspWUDeployWorkunitResponse *createWUDeployWorkunitResponse(const char *serv){return ((IEspWUDeployWorkunitResponse *)new CWUDeployWorkunitResponse(serv));}
extern "C"  IClientWUDeployWorkunitResponse *createClientWUDeployWorkunitResponse(const char *serv){return ((IClientWUDeployWorkunitResponse *)new CWUDeployWorkunitResponse(serv));}

//=======================================================
// class CWUQueryRequest Implementation
//=======================================================

CWUQueryRequest::CWUQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_ApplicationName(nilRemove),m_ApplicationKey(nilRemove),m_ApplicationData(nilRemove),m_ApplicationValues(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_After(nilRemove),m_Before(nilRemove),m_Count(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryRequest::CWUQueryRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_ApplicationName(nilRemove),m_ApplicationKey(nilRemove),m_ApplicationData(nilRemove),m_ApplicationValues(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_After(nilRemove),m_Before(nilRemove),m_Count(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryRequest");
}

CWUQueryRequest::CWUQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_ApplicationName(nilRemove),m_ApplicationKey(nilRemove),m_ApplicationData(nilRemove),m_ApplicationValues(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_After(nilRemove),m_Before(nilRemove),m_Count(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryRequest::CWUQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_ApplicationName(nilRemove),m_ApplicationKey(nilRemove),m_ApplicationData(nilRemove),m_ApplicationValues(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_After(nilRemove),m_Before(nilRemove),m_Count(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryRequest","Type")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryRequest","RoxieCluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RoxieCluster\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECL\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Jobname\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalFile\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"LogicalFileSearchType\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryRequest","ApplicationName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","ApplicationKey")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationKey\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","ApplicationData")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationData\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","ApplicationValues")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValues\" type=\"tns:ArrayOfApplicationValue\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","BeforeWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BeforeWU\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","AfterWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AfterWU\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","After")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"After\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","Before")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Before\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("WUQueryRequest","PageSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","PageStartFrom")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PageStartFrom\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","PageEndAt")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PageEndAt\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryRequest","LastNDays")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"LastNDays\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sortby\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUQueryRequest","ApplicationValues"))
			CApplicationValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ApplicationValue") && added.getValue("ArrayOfApplicationValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfApplicationValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ApplicationValue\" type=\"tns:ApplicationValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfApplicationValue",1);
	}
	return schema;
}

void CWUQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQueryRequest","Type",1.01);
	info.addMinVersion("WUQueryRequest","RoxieCluster",1.08);
	info.addDeprVersion("WUQueryRequest","ApplicationName",1.57);
	info.addDeprVersion("WUQueryRequest","ApplicationKey",1.57);
	info.addDeprVersion("WUQueryRequest","ApplicationData",1.57);
	info.addMinVersion("WUQueryRequest","ApplicationValues",1.57);
	info.addMinVersion("WUQueryRequest","BeforeWU",1.72);
	info.addMinVersion("WUQueryRequest","AfterWU",1.72);
	info.addDeprVersion("WUQueryRequest","After",1.02);
	info.addDeprVersion("WUQueryRequest","Before",1.02);
	info.addMinVersion("WUQueryRequest","PageSize",1.03);
	info.addMinVersion("WUQueryRequest","PageStartFrom",1.03);
	info.addMinVersion("WUQueryRequest","PageEndAt",1.03);
	info.addMinVersion("WUQueryRequest","LastNDays",1.26);
	info.addDeprVersion("WUQueryRequest","LastNDays",1.72);
	if (!added.getValue("ApplicationValue"))
	{
		added.setValue("ApplicationValue",1);
		CApplicationValue::getMapInfo(info,added);
	}
}

StringBuffer &CWUQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryRequest","Type")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Type");
		form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryRequest","RoxieCluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RoxieCluster");
		form.appendf("  <tr><td><b>RoxieCluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECL");
	form.appendf("  <tr><td><b>ECL: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Jobname");
	form.appendf("  <tr><td><b>Jobname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalFile");
	form.appendf("  <tr><td><b>LogicalFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalFileSearchType");
	form.appendf("  <tr><td><b>LogicalFileSearchType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryRequest","ApplicationName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ApplicationName");
		form.appendf("  <tr><td><b>ApplicationName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","ApplicationKey")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ApplicationKey");
		form.appendf("  <tr><td><b>ApplicationKey: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","ApplicationData")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ApplicationData");
		form.appendf("  <tr><td><b>ApplicationData: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","ApplicationValues")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ApplicationValues");
		form.appendf("<tr><td><b>ApplicationValues: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("WUQueryRequest","BeforeWU")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BeforeWU");
		form.appendf("  <tr><td><b>BeforeWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","AfterWU")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("AfterWU");
		form.appendf("  <tr><td><b>AfterWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","After")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("After");
		form.appendf("  <tr><td><b>After: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","Before")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Before");
		form.appendf("  <tr><td><b>Before: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryRequest","PageSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageSize");
		form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","PageStartFrom")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageStartFrom");
		form.appendf("  <tr><td><b>PageStartFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","PageEndAt")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageEndAt");
		form.appendf("  <tr><td><b>PageEndAt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryRequest","LastNDays")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("LastNDays");
		form.appendf("  <tr><td><b>LastNDays: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Sortby");
	form.appendf("  <tr><td><b>Sortby: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Descending");
	
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CacheHint");
	form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.08))
		m_RoxieCluster.marshall(rpc_resp, "RoxieCluster", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_ECL.marshall(rpc_resp, "ECL", "", "", "");
	m_Jobname.marshall(rpc_resp, "Jobname", "", "", "");
	m_LogicalFile.marshall(rpc_resp, "LogicalFile", "", "", "");
	m_LogicalFileSearchType.marshall(rpc_resp, "LogicalFileSearchType", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ApplicationName.marshall(rpc_resp, "ApplicationName", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ApplicationKey.marshall(rpc_resp, "ApplicationKey", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ApplicationData.marshall(rpc_resp, "ApplicationData", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_ApplicationValues.marshall(rpc_resp, "ApplicationValues", "ApplicationValue");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_BeforeWU.marshall(rpc_resp, "BeforeWU", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_AfterWU.marshall(rpc_resp, "AfterWU", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.02))
		m_After.marshall(rpc_resp, "After", "", "", "");
	if ((clientVer==-1.0 || clientVer<1.02))
		m_Before.marshall(rpc_resp, "Before", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageStartFrom.marshall(rpc_resp, "PageStartFrom", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageEndAt.marshall(rpc_resp, "PageEndAt", "", "", "");
	if ((clientVer==-1.0 || (clientVer>=1.26 && clientVer<1.72)))
		m_LastNDays.marshall(rpc_resp, "LastNDays", "", "", "");
	m_Sortby.marshall(rpc_resp, "Sortby", "", "", "");
	m_Descending.marshall(rpc_resp, "Descending", "", "", "");
	m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
}


void CWUQueryRequest::copy(CWUQueryRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Type.copy(from.m_Type);
	m_Cluster.copy(from.m_Cluster);
	m_RoxieCluster.copy(from.m_RoxieCluster);
	m_Owner.copy(from.m_Owner);
	m_State.copy(from.m_State);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ECL.copy(from.m_ECL);
	m_Jobname.copy(from.m_Jobname);
	m_LogicalFile.copy(from.m_LogicalFile);
	m_LogicalFileSearchType.copy(from.m_LogicalFileSearchType);
	m_ApplicationName.copy(from.m_ApplicationName);
	m_ApplicationKey.copy(from.m_ApplicationKey);
	m_ApplicationData.copy(from.m_ApplicationData);
	m_ApplicationValues.copy(from.m_ApplicationValues);
	m_BeforeWU.copy(from.m_BeforeWU);
	m_AfterWU.copy(from.m_AfterWU);
	m_After.copy(from.m_After);
	m_Before.copy(from.m_Before);
	m_Count.copy(from.m_Count);
	m_PageSize.copy(from.m_PageSize);
	m_PageStartFrom.copy(from.m_PageStartFrom);
	m_PageEndAt.copy(from.m_PageEndAt);
	m_LastNDays.copy(from.m_LastNDays);
	m_Sortby.copy(from.m_Sortby);
	m_Descending.copy(from.m_Descending);
	m_CacheHint.copy(from.m_CacheHint);
}


void CWUQueryRequest::copy(IConstWUQueryRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setType(ifrom.getType());
	setCluster(ifrom.getCluster());
	setRoxieCluster(ifrom.getRoxieCluster());
	setOwner(ifrom.getOwner());
	setState(ifrom.getState());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setECL(ifrom.getECL());
	setJobname(ifrom.getJobname());
	setLogicalFile(ifrom.getLogicalFile());
	setLogicalFileSearchType(ifrom.getLogicalFileSearchType());
	setApplicationName(ifrom.getApplicationName());
	setApplicationKey(ifrom.getApplicationKey());
	setApplicationData(ifrom.getApplicationData());
	setApplicationValues(ifrom.getApplicationValues());
	setBeforeWU(ifrom.getBeforeWU());
	setAfterWU(ifrom.getAfterWU());
	setAfter(ifrom.getAfter());
	setBefore(ifrom.getBefore());
	setCount(ifrom.getCount());
	setPageSize(ifrom.getPageSize());
	setPageStartFrom(ifrom.getPageStartFrom());
	setPageEndAt(ifrom.getPageEndAt());
	setLastNDays(ifrom.getLastNDays());
	setSortby(ifrom.getSortby());
	setDescending(ifrom.getDescending());
	setCacheHint(ifrom.getCacheHint());
}


void CWUQueryRequest::getAttributes(IProperties &attributes)
{
}


void CWUQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.08))
		m_RoxieCluster.toStr(ctx, buffer, "RoxieCluster", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_ECL.toStr(ctx, buffer, "ECL", "", true, "", "");
	m_Jobname.toStr(ctx, buffer, "Jobname", "", true, "", "");
	m_LogicalFile.toStr(ctx, buffer, "LogicalFile", "", true, "", "");
	m_LogicalFileSearchType.toStr(ctx, buffer, "LogicalFileSearchType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ApplicationName.toStr(ctx, buffer, "ApplicationName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ApplicationKey.toStr(ctx, buffer, "ApplicationKey", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ApplicationData.toStr(ctx, buffer, "ApplicationData", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_ApplicationValues.toStr(ctx, buffer, "ApplicationValues", "ApplicationValue");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_BeforeWU.toStr(ctx, buffer, "BeforeWU", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_AfterWU.toStr(ctx, buffer, "AfterWU", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.02))
		m_After.toStr(ctx, buffer, "After", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<1.02))
		m_Before.toStr(ctx, buffer, "Before", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageStartFrom.toStr(ctx, buffer, "PageStartFrom", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageEndAt.toStr(ctx, buffer, "PageEndAt", "", true, "", "");
	if ((clientVer==-1.0 || (clientVer>=1.26 && clientVer<1.72)))
		m_LastNDays.toStr(ctx, buffer, "LastNDays", "", true, "", "");
	m_Sortby.toStr(ctx, buffer, "Sortby", "", true, "", "");
	m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
	m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
}


void CWUQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryRequest::serializer(IEspContext* ctx, IConstWUQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Type
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field RoxieCluster
	if ((clientVer==-1.0 || clientVer>=1.08))
	{
		const char* s = src.getRoxieCluster();
		if (s && *s)
		{
			buffer.append("<RoxieCluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RoxieCluster>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ECL
	{
		const char* s = src.getECL();
		if (s && *s)
		{
			buffer.append("<ECL>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECL>");
		}
	}
	// field Jobname
	{
		const char* s = src.getJobname();
		if (s && *s)
		{
			buffer.append("<Jobname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Jobname>");
		}
	}
	// field LogicalFile
	{
		const char* s = src.getLogicalFile();
		if (s && *s)
		{
			buffer.append("<LogicalFile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalFile>");
		}
	}
	// field LogicalFileSearchType
	{
		const char* s = src.getLogicalFileSearchType();
		if (s && *s)
		{
			buffer.append("<LogicalFileSearchType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalFileSearchType>");
		}
	}
	// field ApplicationName
	if ((clientVer==-1.0 || clientVer<1.57))
	{
		const char* s = src.getApplicationName();
		if (s && *s)
		{
			buffer.append("<ApplicationName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ApplicationName>");
		}
	}
	// field ApplicationKey
	if ((clientVer==-1.0 || clientVer<1.57))
	{
		const char* s = src.getApplicationKey();
		if (s && *s)
		{
			buffer.append("<ApplicationKey>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ApplicationKey>");
		}
	}
	// field ApplicationData
	if ((clientVer==-1.0 || clientVer<1.57))
	{
		const char* s = src.getApplicationData();
		if (s && *s)
		{
			buffer.append("<ApplicationData>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ApplicationData>");
		}
	}
	// field ApplicationValues
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		IArrayOf<IConstApplicationValue>& v = src.getApplicationValues();
		int size = v.length();
		if (size>0)
			buffer.append("<ApplicationValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CApplicationValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ApplicationValues>");
	}
	// field BeforeWU
	if ((clientVer==-1.0 || clientVer>=1.72))
	{
		const char* s = src.getBeforeWU();
		if (s && *s)
		{
			buffer.append("<BeforeWU>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BeforeWU>");
		}
	}
	// field AfterWU
	if ((clientVer==-1.0 || clientVer>=1.72))
	{
		const char* s = src.getAfterWU();
		if (s && *s)
		{
			buffer.append("<AfterWU>");
			encodeUtf8XML(s,buffer);
			buffer.append("</AfterWU>");
		}
	}
	// field After
	if ((clientVer==-1.0 || clientVer<1.02))
	{
		const char* s = src.getAfter();
		if (s && *s)
		{
			buffer.append("<After>");
			encodeUtf8XML(s,buffer);
			buffer.append("</After>");
		}
	}
	// field Before
	if ((clientVer==-1.0 || clientVer<1.02))
	{
		const char* s = src.getBefore();
		if (s && *s)
		{
			buffer.append("<Before>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Before>");
		}
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field PageSize
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=PageSize
		buffer.append("<PageSize>");
		buffer.append(src.getPageSize());
		buffer.append("</PageSize>");
	}
	// field PageStartFrom
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=PageStartFrom
		buffer.append("<PageStartFrom>");
		buffer.append(src.getPageStartFrom());
		buffer.append("</PageStartFrom>");
	}
	// field PageEndAt
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=PageEndAt
		buffer.append("<PageEndAt>");
		buffer.append(src.getPageEndAt());
		buffer.append("</PageEndAt>");
	}
	// field LastNDays
	if ((clientVer==-1.0 || (clientVer>=1.26 && clientVer<1.72)))
	{
		int n = src.getLastNDays();
		if (n)
			buffer.appendf("<LastNDays>%d</LastNDays>", n);
	}
	// field Sortby
	{
		const char* s = src.getSortby();
		if (s && *s)
		{
			buffer.append("<Sortby>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Sortby>");
		}
	}
	// field Descending
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field CacheHint
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryRequest>");
}

bool CWUQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_RoxieCluster.unmarshall(rpc_request, "RoxieCluster", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_ECL.unmarshall(rpc_request, "ECL", basepath);
	hasValue |= m_Jobname.unmarshall(rpc_request, "Jobname", basepath);
	hasValue |= m_LogicalFile.unmarshall(rpc_request, "LogicalFile", basepath);
	hasValue |= m_LogicalFileSearchType.unmarshall(rpc_request, "LogicalFileSearchType", basepath);
	hasValue |= m_ApplicationName.unmarshall(rpc_request, "ApplicationName", basepath);
	hasValue |= m_ApplicationKey.unmarshall(rpc_request, "ApplicationKey", basepath);
	hasValue |= m_ApplicationData.unmarshall(rpc_request, "ApplicationData", basepath);
	hasValue |= m_ApplicationValues.unmarshall(rpc_request, "ApplicationValues", basepath);
	hasValue |= m_BeforeWU.unmarshall(rpc_request, "BeforeWU", basepath);
	hasValue |= m_AfterWU.unmarshall(rpc_request, "AfterWU", basepath);
	hasValue |= m_After.unmarshall(rpc_request, "After", basepath);
	hasValue |= m_Before.unmarshall(rpc_request, "Before", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(rpc_request, "PageStartFrom", basepath);
	hasValue |= m_PageEndAt.unmarshall(rpc_request, "PageEndAt", basepath);
	hasValue |= m_LastNDays.unmarshall(rpc_request, "LastNDays", basepath);
	hasValue |= m_Sortby.unmarshall(rpc_request, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
	return hasValue;
}

bool CWUQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_RoxieCluster.unmarshall(ctx, soapval, "RoxieCluster");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ECL.unmarshall(ctx, soapval, "ECL");
	hasValue |= m_Jobname.unmarshall(ctx, soapval, "Jobname");
	hasValue |= m_LogicalFile.unmarshall(ctx, soapval, "LogicalFile");
	hasValue |= m_LogicalFileSearchType.unmarshall(ctx, soapval, "LogicalFileSearchType");
	hasValue |= m_ApplicationName.unmarshall(ctx, soapval, "ApplicationName");
	hasValue |= m_ApplicationKey.unmarshall(ctx, soapval, "ApplicationKey");
	hasValue |= m_ApplicationData.unmarshall(ctx, soapval, "ApplicationData");
	hasValue |= m_ApplicationValues.unmarshall(ctx, soapval, "ApplicationValues");
	hasValue |= m_BeforeWU.unmarshall(ctx, soapval, "BeforeWU");
	hasValue |= m_AfterWU.unmarshall(ctx, soapval, "AfterWU");
	hasValue |= m_After.unmarshall(ctx, soapval, "After");
	hasValue |= m_Before.unmarshall(ctx, soapval, "Before");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_PageStartFrom.unmarshall(ctx, soapval, "PageStartFrom");
	hasValue |= m_PageEndAt.unmarshall(ctx, soapval, "PageEndAt");
	hasValue |= m_LastNDays.unmarshall(ctx, soapval, "LastNDays");
	hasValue |= m_Sortby.unmarshall(ctx, soapval, "Sortby");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	return hasValue;
}

bool CWUQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_RoxieCluster.unmarshall(ctx, params, attachments, "RoxieCluster", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ECL.unmarshall(ctx, params, attachments, "ECL", basepath);
	hasValue |= m_Jobname.unmarshall(ctx, params, attachments, "Jobname", basepath);
	hasValue |= m_LogicalFile.unmarshall(ctx, params, attachments, "LogicalFile", basepath);
	hasValue |= m_LogicalFileSearchType.unmarshall(ctx, params, attachments, "LogicalFileSearchType", basepath);
	hasValue |= m_ApplicationName.unmarshall(ctx, params, attachments, "ApplicationName", basepath);
	hasValue |= m_ApplicationKey.unmarshall(ctx, params, attachments, "ApplicationKey", basepath);
	hasValue |= m_ApplicationData.unmarshall(ctx, params, attachments, "ApplicationData", basepath);
	hasValue |= m_ApplicationValues.unmarshall(ctx, params, attachments, "ApplicationValues", basepath);
	hasValue |= m_BeforeWU.unmarshall(ctx, params, attachments, "BeforeWU", basepath);
	hasValue |= m_AfterWU.unmarshall(ctx, params, attachments, "AfterWU", basepath);
	hasValue |= m_After.unmarshall(ctx, params, attachments, "After", basepath);
	hasValue |= m_Before.unmarshall(ctx, params, attachments, "Before", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(ctx, params, attachments, "PageStartFrom", basepath);
	hasValue |= m_PageEndAt.unmarshall(ctx, params, attachments, "PageEndAt", basepath);
	hasValue |= m_LastNDays.unmarshall(ctx, params, attachments, "LastNDays", basepath);
	hasValue |= m_Sortby.unmarshall(ctx, params, attachments, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	return hasValue;
}

const char * CWUQueryRequest::getWuid() { return m_Wuid.query();}
const char * CWUQueryRequest::getType() { return m_Type.query();}
const char * CWUQueryRequest::getCluster() { return m_Cluster.query();}
const char * CWUQueryRequest::getRoxieCluster() { return m_RoxieCluster.query();}
const char * CWUQueryRequest::getOwner() { return m_Owner.query();}
const char * CWUQueryRequest::getState() { return m_State.query();}
const char * CWUQueryRequest::getStartDate() { return m_StartDate.query();}
const char * CWUQueryRequest::getEndDate() { return m_EndDate.query();}
const char * CWUQueryRequest::getECL() { return m_ECL.query();}
const char * CWUQueryRequest::getJobname() { return m_Jobname.query();}
const char * CWUQueryRequest::getLogicalFile() { return m_LogicalFile.query();}
const char * CWUQueryRequest::getLogicalFileSearchType() { return m_LogicalFileSearchType.query();}
const char * CWUQueryRequest::getApplicationName() { return m_ApplicationName.query();}
const char * CWUQueryRequest::getApplicationKey() { return m_ApplicationKey.query();}
const char * CWUQueryRequest::getApplicationData() { return m_ApplicationData.query();}
IArrayOf<IConstApplicationValue> & CWUQueryRequest::getApplicationValues() { return (IArrayOf<IConstApplicationValue> &) m_ApplicationValues; }
const char * CWUQueryRequest::getBeforeWU() { return m_BeforeWU.query();}
const char * CWUQueryRequest::getAfterWU() { return m_AfterWU.query();}
const char * CWUQueryRequest::getAfter() { return m_After.query();}
const char * CWUQueryRequest::getBefore() { return m_Before.query();}
bool CWUQueryRequest::getCount_isNull(){return m_Count.is_nil();}
int CWUQueryRequest::getCount() { return m_Count;}
bool CWUQueryRequest::getPageSize_isNull(){return m_PageSize.is_nil();}
__int64 CWUQueryRequest::getPageSize() { return m_PageSize;}
bool CWUQueryRequest::getPageStartFrom_isNull(){return m_PageStartFrom.is_nil();}
__int64 CWUQueryRequest::getPageStartFrom() { return m_PageStartFrom;}
bool CWUQueryRequest::getPageEndAt_isNull(){return m_PageEndAt.is_nil();}
__int64 CWUQueryRequest::getPageEndAt() { return m_PageEndAt;}
bool CWUQueryRequest::getLastNDays_isNull(){return m_LastNDays.is_nil();}
int CWUQueryRequest::getLastNDays() { return m_LastNDays;}
const char * CWUQueryRequest::getSortby() { return m_Sortby.query();}
bool CWUQueryRequest::getDescending_isNull(){return m_Descending.is_nil();}
bool CWUQueryRequest::getDescending() { return m_Descending;}
bool CWUQueryRequest::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CWUQueryRequest::getCacheHint() { return m_CacheHint;}
void CWUQueryRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUQueryRequest::setType(const char * val){ m_Type.set(val); }
void CWUQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUQueryRequest::setRoxieCluster(const char * val){ m_RoxieCluster.set(val); }
void CWUQueryRequest::setOwner(const char * val){ m_Owner.set(val); }
void CWUQueryRequest::setState(const char * val){ m_State.set(val); }
void CWUQueryRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUQueryRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUQueryRequest::setECL(const char * val){ m_ECL.set(val); }
void CWUQueryRequest::setJobname(const char * val){ m_Jobname.set(val); }
void CWUQueryRequest::setLogicalFile(const char * val){ m_LogicalFile.set(val); }
void CWUQueryRequest::setLogicalFileSearchType(const char * val){ m_LogicalFileSearchType.set(val); }
void CWUQueryRequest::setApplicationName(const char * val){ m_ApplicationName.set(val); }
void CWUQueryRequest::setApplicationKey(const char * val){ m_ApplicationKey.set(val); }
void CWUQueryRequest::setApplicationData(const char * val){ m_ApplicationData.set(val); }
void CWUQueryRequest::setApplicationValues(IArrayOf<IEspApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspApplicationValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryRequest::setApplicationValues(IArrayOf<IConstApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstApplicationValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryRequest::setBeforeWU(const char * val){ m_BeforeWU.set(val); }
void CWUQueryRequest::setAfterWU(const char * val){ m_AfterWU.set(val); }
void CWUQueryRequest::setAfter(const char * val){ m_After.set(val); }
void CWUQueryRequest::setBefore(const char * val){ m_Before.set(val); }
void CWUQueryRequest::setCount_null(){ m_Count.Nil(); }void CWUQueryRequest::setCount(int val){ m_Count=val; }
void CWUQueryRequest::setPageSize_null(){ m_PageSize.Nil(); }void CWUQueryRequest::setPageSize(__int64 val){ m_PageSize=val; }
void CWUQueryRequest::setPageStartFrom_null(){ m_PageStartFrom.Nil(); }void CWUQueryRequest::setPageStartFrom(__int64 val){ m_PageStartFrom=val; }
void CWUQueryRequest::setPageEndAt_null(){ m_PageEndAt.Nil(); }void CWUQueryRequest::setPageEndAt(__int64 val){ m_PageEndAt=val; }
void CWUQueryRequest::setLastNDays_null(){ m_LastNDays.Nil(); }void CWUQueryRequest::setLastNDays(int val){ m_LastNDays=val; }
void CWUQueryRequest::setSortby(const char * val){ m_Sortby.set(val); }
void CWUQueryRequest::setDescending_null(){ m_Descending.Nil(); }void CWUQueryRequest::setDescending(bool val){ m_Descending=val; }
void CWUQueryRequest::setCacheHint_null(){ m_CacheHint.Nil(); }void CWUQueryRequest::setCacheHint(__int64 val){ m_CacheHint=val; }
extern "C"  IEspWUQueryRequest *createWUQueryRequest(const char *serv){return ((IEspWUQueryRequest *)new CWUQueryRequest(serv));}
extern "C"  IClientWUQueryRequest *createClientWUQueryRequest(const char *serv){return ((IClientWUQueryRequest *)new CWUQueryRequest(serv));}

//=======================================================
// class CWUQueryResponse Implementation
//=======================================================

CWUQueryResponse::CWUQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Type("", nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_Current(nilRemove),m_Next(nilRemove),m_Count(0, nilRemove,false),m_PageSize(0, nilRemove,false),m_PrevPage(nilRemove),m_NextPage(nilRemove),m_LastPage(-1, nilRemove,false),m_NumWUs(nilRemove),m_First(1, nilRemove,false),m_PageStartFrom(-1, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_BasicQuery(nilRemove),m_Filters(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryResponse::CWUQueryResponse(const char *serviceName, const char *bc)
	: m_Type("", nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_Current(nilRemove),m_Next(nilRemove),m_Count(0, nilRemove,false),m_PageSize(0, nilRemove,false),m_PrevPage(nilRemove),m_NextPage(nilRemove),m_LastPage(-1, nilRemove,false),m_NumWUs(nilRemove),m_First(1, nilRemove,false),m_PageStartFrom(-1, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_BasicQuery(nilRemove),m_Filters(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryResponse");
}

CWUQueryResponse::CWUQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Type("", nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_Current(nilRemove),m_Next(nilRemove),m_Count(0, nilRemove,false),m_PageSize(0, nilRemove,false),m_PrevPage(nilRemove),m_NextPage(nilRemove),m_LastPage(-1, nilRemove,false),m_NumWUs(nilRemove),m_First(1, nilRemove,false),m_PageStartFrom(-1, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_BasicQuery(nilRemove),m_Filters(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryResponse::CWUQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Type("", nilRemove),m_Cluster(nilRemove),m_RoxieCluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_LogicalFile(nilRemove),m_LogicalFileSearchType("", nilRemove),m_Current(nilRemove),m_Next(nilRemove),m_Count(0, nilRemove,false),m_PageSize(0, nilRemove,false),m_PrevPage(nilRemove),m_NextPage(nilRemove),m_LastPage(-1, nilRemove,false),m_NumWUs(nilRemove),m_First(1, nilRemove,false),m_PageStartFrom(-1, nilRemove,false),m_PageEndAt(nilRemove),m_LastNDays(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_BasicQuery(nilRemove),m_Filters(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!context.suppressed("WUQueryResponse","Type")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"Type\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryResponse","RoxieCluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"RoxieCluster\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECL\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Jobname\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryResponse","LogicalFile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalFile\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryResponse","LogicalFileSearchType")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"LogicalFileSearchType\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Current\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Next\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("WUQueryResponse","PageSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryResponse","PrevPage")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PrevPage\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryResponse","NextPage")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"NextPage\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryResponse","LastPage")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"LastPage\" type=\"xsd:long\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumWUs\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"First\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUQueryResponse","PageStartFrom")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"PageStartFrom\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryResponse","PageEndAt")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PageEndAt\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUQueryResponse","LastNDays")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"LastNDays\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sortby\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BasicQuery\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Filters\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryResponse","CacheHint")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunits\" type=\"tns:ArrayOfECLWorkunit\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLWorkunit::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLWorkunit") && added.getValue("ArrayOfECLWorkunit")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLWorkunit\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLWorkunit\" type=\"tns:ECLWorkunit\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLWorkunit",1);
	}
	return schema;
}

void CWUQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQueryResponse","Type",1.01);
	info.addMinVersion("WUQueryResponse","RoxieCluster",1.08);
	info.addMinVersion("WUQueryResponse","LogicalFile",1.01);
	info.addMinVersion("WUQueryResponse","LogicalFileSearchType",1.01);
	info.addMinVersion("WUQueryResponse","PageSize",1.03);
	info.addMinVersion("WUQueryResponse","PrevPage",1.03);
	info.addMinVersion("WUQueryResponse","NextPage",1.03);
	info.addMinVersion("WUQueryResponse","LastPage",1.03);
	info.addMinVersion("WUQueryResponse","PageStartFrom",1.03);
	info.addMinVersion("WUQueryResponse","PageEndAt",1.03);
	info.addMinVersion("WUQueryResponse","LastNDays",1.26);
	info.addDeprVersion("WUQueryResponse","LastNDays",1.72);
	info.addMinVersion("WUQueryResponse","CacheHint",1.41);
	if (!added.getValue("ECLWorkunit"))
	{
		added.setValue("ECLWorkunit",1);
		CECLWorkunit::getMapInfo(info,added);
	}
}

StringBuffer &CWUQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("WUQueryResponse","Type")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Type");
		form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryResponse","RoxieCluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("RoxieCluster");
		form.appendf("  <tr><td><b>RoxieCluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECL");
	form.appendf("  <tr><td><b>ECL: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Jobname");
	form.appendf("  <tr><td><b>Jobname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryResponse","LogicalFile")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("LogicalFile");
		form.appendf("  <tr><td><b>LogicalFile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryResponse","LogicalFileSearchType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("LogicalFileSearchType");
		form.appendf("  <tr><td><b>LogicalFileSearchType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Current");
	form.appendf("  <tr><td><b>Current: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Next");
	form.appendf("  <tr><td><b>Next: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryResponse","PageSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageSize");
		form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryResponse","PrevPage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PrevPage");
		form.appendf("  <tr><td><b>PrevPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryResponse","NextPage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("NextPage");
		form.appendf("  <tr><td><b>NextPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryResponse","LastPage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("LastPage");
		form.appendf("  <tr><td><b>LastPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumWUs");
	form.appendf("  <tr><td><b>NumWUs: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("First");
	
	form.appendf("  <tr><td><b>First? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUQueryResponse","PageStartFrom")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageStartFrom");
		form.appendf("  <tr><td><b>PageStartFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryResponse","PageEndAt")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageEndAt");
		form.appendf("  <tr><td><b>PageEndAt: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryResponse","LastNDays")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("LastNDays");
		form.appendf("  <tr><td><b>LastNDays: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Sortby");
	form.appendf("  <tr><td><b>Sortby: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Descending");
	
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BasicQuery");
	form.appendf("  <tr><td><b>BasicQuery: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Filters");
	form.appendf("  <tr><td><b>Filters: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryResponse","CacheHint")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CacheHint");
		form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunits");
	form.appendf("<tr><td><b>Workunits: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		if ((clientVer==-1.0 || clientVer>=1.01))
			m_Type.marshall(rpc_resp, "Type", "", "", "");
		m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.08))
			m_RoxieCluster.marshall(rpc_resp, "RoxieCluster", "", "", "");
		m_Owner.marshall(rpc_resp, "Owner", "", "", "");
		m_State.marshall(rpc_resp, "State", "", "", "");
		m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
		m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
		m_ECL.marshall(rpc_resp, "ECL", "", "", "");
		m_Jobname.marshall(rpc_resp, "Jobname", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.01))
			m_LogicalFile.marshall(rpc_resp, "LogicalFile", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.01))
			m_LogicalFileSearchType.marshall(rpc_resp, "LogicalFileSearchType", "", "", "");
		m_Current.marshall(rpc_resp, "Current", "", "", "");
		m_Next.marshall(rpc_resp, "Next", "", "", "");
		m_Count.marshall(rpc_resp, "Count", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PrevPage.marshall(rpc_resp, "PrevPage", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_NextPage.marshall(rpc_resp, "NextPage", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_LastPage.marshall(rpc_resp, "LastPage", "", "", "");
		m_NumWUs.marshall(rpc_resp, "NumWUs", "", "", "");
		m_First.marshall(rpc_resp, "First", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PageStartFrom.marshall(rpc_resp, "PageStartFrom", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PageEndAt.marshall(rpc_resp, "PageEndAt", "", "", "");
		if ((clientVer==-1.0 || (clientVer>=1.26 && clientVer<1.72)))
			m_LastNDays.marshall(rpc_resp, "LastNDays", "", "", "");
		m_Sortby.marshall(rpc_resp, "Sortby", "", "", "");
		m_Descending.marshall(rpc_resp, "Descending", "", "", "");
		m_BasicQuery.marshall(rpc_resp, "BasicQuery", "", "", "");
		m_Filters.marshall(rpc_resp, "Filters", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.41))
			m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
		m_Workunits.marshall(rpc_resp, "Workunits", "ECLWorkunit");
	}
}


void CWUQueryResponse::copy(CWUQueryResponse &from)
{
	m_Type.copy(from.m_Type);
	m_Cluster.copy(from.m_Cluster);
	m_RoxieCluster.copy(from.m_RoxieCluster);
	m_Owner.copy(from.m_Owner);
	m_State.copy(from.m_State);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ECL.copy(from.m_ECL);
	m_Jobname.copy(from.m_Jobname);
	m_LogicalFile.copy(from.m_LogicalFile);
	m_LogicalFileSearchType.copy(from.m_LogicalFileSearchType);
	m_Current.copy(from.m_Current);
	m_Next.copy(from.m_Next);
	m_Count.copy(from.m_Count);
	m_PageSize.copy(from.m_PageSize);
	m_PrevPage.copy(from.m_PrevPage);
	m_NextPage.copy(from.m_NextPage);
	m_LastPage.copy(from.m_LastPage);
	m_NumWUs.copy(from.m_NumWUs);
	m_First.copy(from.m_First);
	m_PageStartFrom.copy(from.m_PageStartFrom);
	m_PageEndAt.copy(from.m_PageEndAt);
	m_LastNDays.copy(from.m_LastNDays);
	m_Sortby.copy(from.m_Sortby);
	m_Descending.copy(from.m_Descending);
	m_BasicQuery.copy(from.m_BasicQuery);
	m_Filters.copy(from.m_Filters);
	m_CacheHint.copy(from.m_CacheHint);
	m_Workunits.copy(from.m_Workunits);
}


void CWUQueryResponse::copy(IConstWUQueryResponse &ifrom)
{
	setType(ifrom.getType());
	setCluster(ifrom.getCluster());
	setRoxieCluster(ifrom.getRoxieCluster());
	setOwner(ifrom.getOwner());
	setState(ifrom.getState());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setECL(ifrom.getECL());
	setJobname(ifrom.getJobname());
	setLogicalFile(ifrom.getLogicalFile());
	setLogicalFileSearchType(ifrom.getLogicalFileSearchType());
	setCurrent(ifrom.getCurrent());
	setNext(ifrom.getNext());
	setCount(ifrom.getCount());
	setPageSize(ifrom.getPageSize());
	setPrevPage(ifrom.getPrevPage());
	setNextPage(ifrom.getNextPage());
	setLastPage(ifrom.getLastPage());
	setNumWUs(ifrom.getNumWUs());
	setFirst(ifrom.getFirst());
	setPageStartFrom(ifrom.getPageStartFrom());
	setPageEndAt(ifrom.getPageEndAt());
	setLastNDays(ifrom.getLastNDays());
	setSortby(ifrom.getSortby());
	setDescending(ifrom.getDescending());
	setBasicQuery(ifrom.getBasicQuery());
	setFilters(ifrom.getFilters());
	setCacheHint(ifrom.getCacheHint());
	setWorkunits(ifrom.getWorkunits());
}


void CWUQueryResponse::getAttributes(IProperties &attributes)
{
}


void CWUQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		if ((clientVer==-1.0 || clientVer>=1.01))
			m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
		m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.08))
			m_RoxieCluster.toStr(ctx, buffer, "RoxieCluster", "", true, "", "");
		m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
		m_State.toStr(ctx, buffer, "State", "", true, "", "");
		m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
		m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
		m_ECL.toStr(ctx, buffer, "ECL", "", true, "", "");
		m_Jobname.toStr(ctx, buffer, "Jobname", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.01))
			m_LogicalFile.toStr(ctx, buffer, "LogicalFile", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.01))
			m_LogicalFileSearchType.toStr(ctx, buffer, "LogicalFileSearchType", "", true, "", "");
		m_Current.toStr(ctx, buffer, "Current", "", true, "", "");
		m_Next.toStr(ctx, buffer, "Next", "", true, "", "");
		m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PrevPage.toStr(ctx, buffer, "PrevPage", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_NextPage.toStr(ctx, buffer, "NextPage", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_LastPage.toStr(ctx, buffer, "LastPage", "", true, "", "");
		m_NumWUs.toStr(ctx, buffer, "NumWUs", "", true, "", "");
		m_First.toStr(ctx, buffer, "First", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PageStartFrom.toStr(ctx, buffer, "PageStartFrom", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.03))
			m_PageEndAt.toStr(ctx, buffer, "PageEndAt", "", true, "", "");
		if ((clientVer==-1.0 || (clientVer>=1.26 && clientVer<1.72)))
			m_LastNDays.toStr(ctx, buffer, "LastNDays", "", true, "", "");
		m_Sortby.toStr(ctx, buffer, "Sortby", "", true, "", "");
		m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
		m_BasicQuery.toStr(ctx, buffer, "BasicQuery", "", true, "", "");
		m_Filters.toStr(ctx, buffer, "Filters", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.41))
			m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
		m_Workunits.toStr(ctx, buffer, "Workunits", "ECLWorkunit");
	}
}


void CWUQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryResponse::serializer(IEspContext* ctx, IConstWUQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Type
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field RoxieCluster
	if ((clientVer==-1.0 || clientVer>=1.08))
	{
		const char* s = src.getRoxieCluster();
		if (s && *s)
		{
			buffer.append("<RoxieCluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RoxieCluster>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ECL
	{
		const char* s = src.getECL();
		if (s && *s)
		{
			buffer.append("<ECL>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECL>");
		}
	}
	// field Jobname
	{
		const char* s = src.getJobname();
		if (s && *s)
		{
			buffer.append("<Jobname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Jobname>");
		}
	}
	// field LogicalFile
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getLogicalFile();
		if (s && *s)
		{
			buffer.append("<LogicalFile>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalFile>");
		}
	}
	// field LogicalFileSearchType
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getLogicalFileSearchType();
		if (s && *s)
		{
			buffer.append("<LogicalFileSearchType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalFileSearchType>");
		}
	}
	// field Current
	{
		const char* s = src.getCurrent();
		if (s && *s)
		{
			buffer.append("<Current>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Current>");
		}
	}
	// field Next
	{
		const char* s = src.getNext();
		if (s && *s)
		{
			buffer.append("<Next>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Next>");
		}
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field PageSize
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=PageSize
		buffer.append("<PageSize>");
		buffer.append(src.getPageSize());
		buffer.append("</PageSize>");
	}
	// field PrevPage
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=PrevPage
		buffer.append("<PrevPage>");
		buffer.append(src.getPrevPage());
		buffer.append("</PrevPage>");
	}
	// field NextPage
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=NextPage
		buffer.append("<NextPage>");
		buffer.append(src.getNextPage());
		buffer.append("</NextPage>");
	}
	// field LastPage
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=LastPage
		buffer.append("<LastPage>");
		buffer.append(src.getLastPage());
		buffer.append("</LastPage>");
	}
	// field NumWUs
	{
		int n = src.getNumWUs();
		if (n)
			buffer.appendf("<NumWUs>%d</NumWUs>", n);
	}
	// field First
	{
		bool b = src.getFirst();
		if (b)
			buffer.appendf("<First>1</First>");
	}
	// field PageStartFrom
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=PageStartFrom
		buffer.append("<PageStartFrom>");
		buffer.append(src.getPageStartFrom());
		buffer.append("</PageStartFrom>");
	}
	// field PageEndAt
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		//*** default kind: TK_INT; type=int64, name=PageEndAt
		buffer.append("<PageEndAt>");
		buffer.append(src.getPageEndAt());
		buffer.append("</PageEndAt>");
	}
	// field LastNDays
	if ((clientVer==-1.0 || (clientVer>=1.26 && clientVer<1.72)))
	{
		int n = src.getLastNDays();
		if (n)
			buffer.appendf("<LastNDays>%d</LastNDays>", n);
	}
	// field Sortby
	{
		const char* s = src.getSortby();
		if (s && *s)
		{
			buffer.append("<Sortby>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Sortby>");
		}
	}
	// field Descending
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field BasicQuery
	{
		const char* s = src.getBasicQuery();
		if (s && *s)
		{
			buffer.append("<BasicQuery>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BasicQuery>");
		}
	}
	// field Filters
	{
		const char* s = src.getFilters();
		if (s && *s)
		{
			buffer.append("<Filters>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filters>");
		}
	}
	// field CacheHint
	if ((clientVer==-1.0 || clientVer>=1.41))
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	// field Workunits
	{
		IArrayOf<IConstECLWorkunit>& v = src.getWorkunits();
		int size = v.length();
		if (size>0)
			buffer.append("<Workunits>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLWorkunit::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Workunits>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryResponse>");
}

bool CWUQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
		hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
		hasValue |= m_RoxieCluster.unmarshall(rpc_request, "RoxieCluster", basepath);
		hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
		hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
		hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
		hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
		hasValue |= m_ECL.unmarshall(rpc_request, "ECL", basepath);
		hasValue |= m_Jobname.unmarshall(rpc_request, "Jobname", basepath);
		hasValue |= m_LogicalFile.unmarshall(rpc_request, "LogicalFile", basepath);
		hasValue |= m_LogicalFileSearchType.unmarshall(rpc_request, "LogicalFileSearchType", basepath);
		hasValue |= m_Current.unmarshall(rpc_request, "Current", basepath);
		hasValue |= m_Next.unmarshall(rpc_request, "Next", basepath);
		hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
		hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
		hasValue |= m_PrevPage.unmarshall(rpc_request, "PrevPage", basepath);
		hasValue |= m_NextPage.unmarshall(rpc_request, "NextPage", basepath);
		hasValue |= m_LastPage.unmarshall(rpc_request, "LastPage", basepath);
		hasValue |= m_NumWUs.unmarshall(rpc_request, "NumWUs", basepath);
		hasValue |= m_First.unmarshall(rpc_request, "First", basepath);
		hasValue |= m_PageStartFrom.unmarshall(rpc_request, "PageStartFrom", basepath);
		hasValue |= m_PageEndAt.unmarshall(rpc_request, "PageEndAt", basepath);
		hasValue |= m_LastNDays.unmarshall(rpc_request, "LastNDays", basepath);
		hasValue |= m_Sortby.unmarshall(rpc_request, "Sortby", basepath);
		hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
		hasValue |= m_BasicQuery.unmarshall(rpc_request, "BasicQuery", basepath);
		hasValue |= m_Filters.unmarshall(rpc_request, "Filters", basepath);
		hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
		hasValue |= m_Workunits.unmarshall(rpc_request, "Workunits", basepath);
	}
	return hasValue;
}

bool CWUQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_RoxieCluster.unmarshall(ctx, soapval, "RoxieCluster");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ECL.unmarshall(ctx, soapval, "ECL");
	hasValue |= m_Jobname.unmarshall(ctx, soapval, "Jobname");
	hasValue |= m_LogicalFile.unmarshall(ctx, soapval, "LogicalFile");
	hasValue |= m_LogicalFileSearchType.unmarshall(ctx, soapval, "LogicalFileSearchType");
	hasValue |= m_Current.unmarshall(ctx, soapval, "Current");
	hasValue |= m_Next.unmarshall(ctx, soapval, "Next");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_PrevPage.unmarshall(ctx, soapval, "PrevPage");
	hasValue |= m_NextPage.unmarshall(ctx, soapval, "NextPage");
	hasValue |= m_LastPage.unmarshall(ctx, soapval, "LastPage");
	hasValue |= m_NumWUs.unmarshall(ctx, soapval, "NumWUs");
	hasValue |= m_First.unmarshall(ctx, soapval, "First");
	hasValue |= m_PageStartFrom.unmarshall(ctx, soapval, "PageStartFrom");
	hasValue |= m_PageEndAt.unmarshall(ctx, soapval, "PageEndAt");
	hasValue |= m_LastNDays.unmarshall(ctx, soapval, "LastNDays");
	hasValue |= m_Sortby.unmarshall(ctx, soapval, "Sortby");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_BasicQuery.unmarshall(ctx, soapval, "BasicQuery");
	hasValue |= m_Filters.unmarshall(ctx, soapval, "Filters");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	hasValue |= m_Workunits.unmarshall(ctx, soapval, "Workunits");
	return hasValue;
}

bool CWUQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_RoxieCluster.unmarshall(ctx, params, attachments, "RoxieCluster", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ECL.unmarshall(ctx, params, attachments, "ECL", basepath);
	hasValue |= m_Jobname.unmarshall(ctx, params, attachments, "Jobname", basepath);
	hasValue |= m_LogicalFile.unmarshall(ctx, params, attachments, "LogicalFile", basepath);
	hasValue |= m_LogicalFileSearchType.unmarshall(ctx, params, attachments, "LogicalFileSearchType", basepath);
	hasValue |= m_Current.unmarshall(ctx, params, attachments, "Current", basepath);
	hasValue |= m_Next.unmarshall(ctx, params, attachments, "Next", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_PrevPage.unmarshall(ctx, params, attachments, "PrevPage", basepath);
	hasValue |= m_NextPage.unmarshall(ctx, params, attachments, "NextPage", basepath);
	hasValue |= m_LastPage.unmarshall(ctx, params, attachments, "LastPage", basepath);
	hasValue |= m_NumWUs.unmarshall(ctx, params, attachments, "NumWUs", basepath);
	hasValue |= m_First.unmarshall(ctx, params, attachments, "First", basepath);
	hasValue |= m_PageStartFrom.unmarshall(ctx, params, attachments, "PageStartFrom", basepath);
	hasValue |= m_PageEndAt.unmarshall(ctx, params, attachments, "PageEndAt", basepath);
	hasValue |= m_LastNDays.unmarshall(ctx, params, attachments, "LastNDays", basepath);
	hasValue |= m_Sortby.unmarshall(ctx, params, attachments, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_BasicQuery.unmarshall(ctx, params, attachments, "BasicQuery", basepath);
	hasValue |= m_Filters.unmarshall(ctx, params, attachments, "Filters", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	hasValue |= m_Workunits.unmarshall(ctx, params, attachments, "Workunits", basepath);
	return hasValue;
}

const char * CWUQueryResponse::getType() { return m_Type.query();}
const char * CWUQueryResponse::getCluster() { return m_Cluster.query();}
const char * CWUQueryResponse::getRoxieCluster() { return m_RoxieCluster.query();}
const char * CWUQueryResponse::getOwner() { return m_Owner.query();}
const char * CWUQueryResponse::getState() { return m_State.query();}
const char * CWUQueryResponse::getStartDate() { return m_StartDate.query();}
const char * CWUQueryResponse::getEndDate() { return m_EndDate.query();}
const char * CWUQueryResponse::getECL() { return m_ECL.query();}
const char * CWUQueryResponse::getJobname() { return m_Jobname.query();}
const char * CWUQueryResponse::getLogicalFile() { return m_LogicalFile.query();}
const char * CWUQueryResponse::getLogicalFileSearchType() { return m_LogicalFileSearchType.query();}
const char * CWUQueryResponse::getCurrent() { return m_Current.query();}
const char * CWUQueryResponse::getNext() { return m_Next.query();}
bool CWUQueryResponse::getCount_isNull(){return m_Count.is_nil();}
int CWUQueryResponse::getCount() { return m_Count;}
bool CWUQueryResponse::getPageSize_isNull(){return m_PageSize.is_nil();}
__int64 CWUQueryResponse::getPageSize() { return m_PageSize;}
bool CWUQueryResponse::getPrevPage_isNull(){return m_PrevPage.is_nil();}
__int64 CWUQueryResponse::getPrevPage() { return m_PrevPage;}
bool CWUQueryResponse::getNextPage_isNull(){return m_NextPage.is_nil();}
__int64 CWUQueryResponse::getNextPage() { return m_NextPage;}
bool CWUQueryResponse::getLastPage_isNull(){return m_LastPage.is_nil();}
__int64 CWUQueryResponse::getLastPage() { return m_LastPage;}
bool CWUQueryResponse::getNumWUs_isNull(){return m_NumWUs.is_nil();}
int CWUQueryResponse::getNumWUs() { return m_NumWUs;}
bool CWUQueryResponse::getFirst_isNull(){return m_First.is_nil();}
bool CWUQueryResponse::getFirst() { return m_First;}
bool CWUQueryResponse::getPageStartFrom_isNull(){return m_PageStartFrom.is_nil();}
__int64 CWUQueryResponse::getPageStartFrom() { return m_PageStartFrom;}
bool CWUQueryResponse::getPageEndAt_isNull(){return m_PageEndAt.is_nil();}
__int64 CWUQueryResponse::getPageEndAt() { return m_PageEndAt;}
bool CWUQueryResponse::getLastNDays_isNull(){return m_LastNDays.is_nil();}
int CWUQueryResponse::getLastNDays() { return m_LastNDays;}
const char * CWUQueryResponse::getSortby() { return m_Sortby.query();}
bool CWUQueryResponse::getDescending_isNull(){return m_Descending.is_nil();}
bool CWUQueryResponse::getDescending() { return m_Descending;}
const char * CWUQueryResponse::getBasicQuery() { return m_BasicQuery.query();}
const char * CWUQueryResponse::getFilters() { return m_Filters.query();}
bool CWUQueryResponse::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CWUQueryResponse::getCacheHint() { return m_CacheHint;}
IArrayOf<IConstECLWorkunit> & CWUQueryResponse::getWorkunits() { return (IArrayOf<IConstECLWorkunit> &) m_Workunits; }
void CWUQueryResponse::setType(const char * val){ m_Type.set(val); }
void CWUQueryResponse::setCluster(const char * val){ m_Cluster.set(val); }
void CWUQueryResponse::setRoxieCluster(const char * val){ m_RoxieCluster.set(val); }
void CWUQueryResponse::setOwner(const char * val){ m_Owner.set(val); }
void CWUQueryResponse::setState(const char * val){ m_State.set(val); }
void CWUQueryResponse::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUQueryResponse::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUQueryResponse::setECL(const char * val){ m_ECL.set(val); }
void CWUQueryResponse::setJobname(const char * val){ m_Jobname.set(val); }
void CWUQueryResponse::setLogicalFile(const char * val){ m_LogicalFile.set(val); }
void CWUQueryResponse::setLogicalFileSearchType(const char * val){ m_LogicalFileSearchType.set(val); }
void CWUQueryResponse::setCurrent(const char * val){ m_Current.set(val); }
void CWUQueryResponse::setNext(const char * val){ m_Next.set(val); }
void CWUQueryResponse::setCount_null(){ m_Count.Nil(); }void CWUQueryResponse::setCount(int val){ m_Count=val; }
void CWUQueryResponse::setPageSize_null(){ m_PageSize.Nil(); }void CWUQueryResponse::setPageSize(__int64 val){ m_PageSize=val; }
void CWUQueryResponse::setPrevPage_null(){ m_PrevPage.Nil(); }void CWUQueryResponse::setPrevPage(__int64 val){ m_PrevPage=val; }
void CWUQueryResponse::setNextPage_null(){ m_NextPage.Nil(); }void CWUQueryResponse::setNextPage(__int64 val){ m_NextPage=val; }
void CWUQueryResponse::setLastPage_null(){ m_LastPage.Nil(); }void CWUQueryResponse::setLastPage(__int64 val){ m_LastPage=val; }
void CWUQueryResponse::setNumWUs_null(){ m_NumWUs.Nil(); }void CWUQueryResponse::setNumWUs(int val){ m_NumWUs=val; }
void CWUQueryResponse::setFirst_null(){ m_First.Nil(); }void CWUQueryResponse::setFirst(bool val){ m_First=val; }
void CWUQueryResponse::setPageStartFrom_null(){ m_PageStartFrom.Nil(); }void CWUQueryResponse::setPageStartFrom(__int64 val){ m_PageStartFrom=val; }
void CWUQueryResponse::setPageEndAt_null(){ m_PageEndAt.Nil(); }void CWUQueryResponse::setPageEndAt(__int64 val){ m_PageEndAt=val; }
void CWUQueryResponse::setLastNDays_null(){ m_LastNDays.Nil(); }void CWUQueryResponse::setLastNDays(int val){ m_LastNDays=val; }
void CWUQueryResponse::setSortby(const char * val){ m_Sortby.set(val); }
void CWUQueryResponse::setDescending_null(){ m_Descending.Nil(); }void CWUQueryResponse::setDescending(bool val){ m_Descending=val; }
void CWUQueryResponse::setBasicQuery(const char * val){ m_BasicQuery.set(val); }
void CWUQueryResponse::setFilters(const char * val){ m_Filters.set(val); }
void CWUQueryResponse::setCacheHint_null(){ m_CacheHint.Nil(); }void CWUQueryResponse::setCacheHint(__int64 val){ m_CacheHint=val; }
void CWUQueryResponse::setWorkunits(IArrayOf<IEspECLWorkunit> &val)
{
	m_Workunits->kill();
	IArrayOf<IConstECLWorkunit> &target = m_Workunits.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLWorkunit &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryResponse::setWorkunits(IArrayOf<IConstECLWorkunit> &val)
{
	m_Workunits->kill();
	IArrayOf<IConstECLWorkunit> &target = m_Workunits.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLWorkunit &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQueryResponse *createWUQueryResponse(const char *serv){return ((IEspWUQueryResponse *)new CWUQueryResponse(serv));}
extern "C"  IClientWUQueryResponse *createClientWUQueryResponse(const char *serv){return ((IClientWUQueryResponse *)new CWUQueryResponse(serv));}

//=======================================================
// class CWULightWeightQueryRequest Implementation
//=======================================================

CWULightWeightQueryRequest::CWULightWeightQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_JobName(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_State(nilRemove),m_ApplicationValues(nilRemove),m_PageStartFrom(nilRemove),m_PageSize(nilRemove),m_SortBy(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWULightWeightQueryRequest::CWULightWeightQueryRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_JobName(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_State(nilRemove),m_ApplicationValues(nilRemove),m_PageStartFrom(nilRemove),m_PageSize(nilRemove),m_SortBy(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryRequest");
}

CWULightWeightQueryRequest::CWULightWeightQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_JobName(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_State(nilRemove),m_ApplicationValues(nilRemove),m_PageStartFrom(nilRemove),m_PageSize(nilRemove),m_SortBy(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWULightWeightQueryRequest::CWULightWeightQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_Type(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_JobName(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_BeforeWU(nilRemove),m_AfterWU(nilRemove),m_State(nilRemove),m_ApplicationValues(nilRemove),m_PageStartFrom(nilRemove),m_PageSize(nilRemove),m_SortBy(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWULightWeightQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"JobName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WULightWeightQueryRequest","BeforeWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BeforeWU\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULightWeightQueryRequest","AfterWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"AfterWU\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValues\" type=\"tns:ArrayOfApplicationValue\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageStartFrom\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SortBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CApplicationValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ApplicationValue") && added.getValue("ArrayOfApplicationValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfApplicationValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ApplicationValue\" type=\"tns:ApplicationValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfApplicationValue",1);
	}
	return schema;
}

void CWULightWeightQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWULightWeightQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WULightWeightQueryRequest","BeforeWU",1.72);
	info.addMinVersion("WULightWeightQueryRequest","AfterWU",1.72);
	if (!added.getValue("ApplicationValue"))
	{
		added.setValue("ApplicationValue",1);
		CApplicationValue::getMapInfo(info,added);
	}
}

StringBuffer &CWULightWeightQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobName");
	form.appendf("  <tr><td><b>JobName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WULightWeightQueryRequest","BeforeWU")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BeforeWU");
		form.appendf("  <tr><td><b>BeforeWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULightWeightQueryRequest","AfterWU")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("AfterWU");
		form.appendf("  <tr><td><b>AfterWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ApplicationValues");
	form.appendf("<tr><td><b>ApplicationValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PageStartFrom");
	form.appendf("  <tr><td><b>PageStartFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PageSize");
	form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SortBy");
	form.appendf("  <tr><td><b>SortBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Descending");
	
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CacheHint");
	form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWULightWeightQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWULightWeightQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_JobName.marshall(rpc_resp, "JobName", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_BeforeWU.marshall(rpc_resp, "BeforeWU", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_AfterWU.marshall(rpc_resp, "AfterWU", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_ApplicationValues.marshall(rpc_resp, "ApplicationValues", "ApplicationValue");
	m_PageStartFrom.marshall(rpc_resp, "PageStartFrom", "", "", "");
	m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
	m_SortBy.marshall(rpc_resp, "SortBy", "", "", "");
	m_Descending.marshall(rpc_resp, "Descending", "", "", "");
	m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
}


void CWULightWeightQueryRequest::copy(CWULightWeightQueryRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Type.copy(from.m_Type);
	m_Cluster.copy(from.m_Cluster);
	m_Owner.copy(from.m_Owner);
	m_JobName.copy(from.m_JobName);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_BeforeWU.copy(from.m_BeforeWU);
	m_AfterWU.copy(from.m_AfterWU);
	m_State.copy(from.m_State);
	m_ApplicationValues.copy(from.m_ApplicationValues);
	m_PageStartFrom.copy(from.m_PageStartFrom);
	m_PageSize.copy(from.m_PageSize);
	m_SortBy.copy(from.m_SortBy);
	m_Descending.copy(from.m_Descending);
	m_CacheHint.copy(from.m_CacheHint);
}


void CWULightWeightQueryRequest::copy(IConstWULightWeightQueryRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setType(ifrom.getType());
	setCluster(ifrom.getCluster());
	setOwner(ifrom.getOwner());
	setJobName(ifrom.getJobName());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setBeforeWU(ifrom.getBeforeWU());
	setAfterWU(ifrom.getAfterWU());
	setState(ifrom.getState());
	setApplicationValues(ifrom.getApplicationValues());
	setPageStartFrom(ifrom.getPageStartFrom());
	setPageSize(ifrom.getPageSize());
	setSortBy(ifrom.getSortBy());
	setDescending(ifrom.getDescending());
	setCacheHint(ifrom.getCacheHint());
}


void CWULightWeightQueryRequest::getAttributes(IProperties &attributes)
{
}


void CWULightWeightQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_JobName.toStr(ctx, buffer, "JobName", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_BeforeWU.toStr(ctx, buffer, "BeforeWU", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.72))
		m_AfterWU.toStr(ctx, buffer, "AfterWU", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_ApplicationValues.toStr(ctx, buffer, "ApplicationValues", "ApplicationValue");
	m_PageStartFrom.toStr(ctx, buffer, "PageStartFrom", "", true, "", "");
	m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
	m_SortBy.toStr(ctx, buffer, "SortBy", "", true, "", "");
	m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
	m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
}


void CWULightWeightQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWULightWeightQueryRequest::serializer(IEspContext* ctx, IConstWULightWeightQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WULightWeightQueryRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field JobName
	{
		const char* s = src.getJobName();
		if (s && *s)
		{
			buffer.append("<JobName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobName>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field BeforeWU
	if ((clientVer==-1.0 || clientVer>=1.72))
	{
		const char* s = src.getBeforeWU();
		if (s && *s)
		{
			buffer.append("<BeforeWU>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BeforeWU>");
		}
	}
	// field AfterWU
	if ((clientVer==-1.0 || clientVer>=1.72))
	{
		const char* s = src.getAfterWU();
		if (s && *s)
		{
			buffer.append("<AfterWU>");
			encodeUtf8XML(s,buffer);
			buffer.append("</AfterWU>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field ApplicationValues
	{
		IArrayOf<IConstApplicationValue>& v = src.getApplicationValues();
		int size = v.length();
		if (size>0)
			buffer.append("<ApplicationValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CApplicationValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ApplicationValues>");
	}
	// field PageStartFrom
	{
		//*** default kind: TK_INT; type=int64, name=PageStartFrom
		buffer.append("<PageStartFrom>");
		buffer.append(src.getPageStartFrom());
		buffer.append("</PageStartFrom>");
	}
	// field PageSize
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=PageSize
		buffer.append("<PageSize>");
		buffer.append(src.getPageSize());
		buffer.append("</PageSize>");
	}
	// field SortBy
	{
		const char* s = src.getSortBy();
		if (s && *s)
		{
			buffer.append("<SortBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SortBy>");
		}
	}
	// field Descending
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field CacheHint
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	if (keepRootTag)
		buffer.append("</WULightWeightQueryRequest>");
}

bool CWULightWeightQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_JobName.unmarshall(rpc_request, "JobName", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_BeforeWU.unmarshall(rpc_request, "BeforeWU", basepath);
	hasValue |= m_AfterWU.unmarshall(rpc_request, "AfterWU", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_ApplicationValues.unmarshall(rpc_request, "ApplicationValues", basepath);
	hasValue |= m_PageStartFrom.unmarshall(rpc_request, "PageStartFrom", basepath);
	hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
	hasValue |= m_SortBy.unmarshall(rpc_request, "SortBy", basepath);
	hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
	return hasValue;
}

bool CWULightWeightQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_JobName.unmarshall(ctx, soapval, "JobName");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_BeforeWU.unmarshall(ctx, soapval, "BeforeWU");
	hasValue |= m_AfterWU.unmarshall(ctx, soapval, "AfterWU");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_ApplicationValues.unmarshall(ctx, soapval, "ApplicationValues");
	hasValue |= m_PageStartFrom.unmarshall(ctx, soapval, "PageStartFrom");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_SortBy.unmarshall(ctx, soapval, "SortBy");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	return hasValue;
}

bool CWULightWeightQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_JobName.unmarshall(ctx, params, attachments, "JobName", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_BeforeWU.unmarshall(ctx, params, attachments, "BeforeWU", basepath);
	hasValue |= m_AfterWU.unmarshall(ctx, params, attachments, "AfterWU", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_ApplicationValues.unmarshall(ctx, params, attachments, "ApplicationValues", basepath);
	hasValue |= m_PageStartFrom.unmarshall(ctx, params, attachments, "PageStartFrom", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_SortBy.unmarshall(ctx, params, attachments, "SortBy", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	return hasValue;
}

const char * CWULightWeightQueryRequest::getWuid() { return m_Wuid.query();}
const char * CWULightWeightQueryRequest::getType() { return m_Type.query();}
const char * CWULightWeightQueryRequest::getCluster() { return m_Cluster.query();}
const char * CWULightWeightQueryRequest::getOwner() { return m_Owner.query();}
const char * CWULightWeightQueryRequest::getJobName() { return m_JobName.query();}
const char * CWULightWeightQueryRequest::getStartDate() { return m_StartDate.query();}
const char * CWULightWeightQueryRequest::getEndDate() { return m_EndDate.query();}
const char * CWULightWeightQueryRequest::getBeforeWU() { return m_BeforeWU.query();}
const char * CWULightWeightQueryRequest::getAfterWU() { return m_AfterWU.query();}
const char * CWULightWeightQueryRequest::getState() { return m_State.query();}
IArrayOf<IConstApplicationValue> & CWULightWeightQueryRequest::getApplicationValues() { return (IArrayOf<IConstApplicationValue> &) m_ApplicationValues; }
bool CWULightWeightQueryRequest::getPageStartFrom_isNull(){return m_PageStartFrom.is_nil();}
__int64 CWULightWeightQueryRequest::getPageStartFrom() { return m_PageStartFrom;}
bool CWULightWeightQueryRequest::getPageSize_isNull(){return m_PageSize.is_nil();}
unsigned int CWULightWeightQueryRequest::getPageSize() { return m_PageSize;}
const char * CWULightWeightQueryRequest::getSortBy() { return m_SortBy.query();}
bool CWULightWeightQueryRequest::getDescending_isNull(){return m_Descending.is_nil();}
bool CWULightWeightQueryRequest::getDescending() { return m_Descending;}
bool CWULightWeightQueryRequest::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CWULightWeightQueryRequest::getCacheHint() { return m_CacheHint;}
void CWULightWeightQueryRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWULightWeightQueryRequest::setType(const char * val){ m_Type.set(val); }
void CWULightWeightQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWULightWeightQueryRequest::setOwner(const char * val){ m_Owner.set(val); }
void CWULightWeightQueryRequest::setJobName(const char * val){ m_JobName.set(val); }
void CWULightWeightQueryRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWULightWeightQueryRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWULightWeightQueryRequest::setBeforeWU(const char * val){ m_BeforeWU.set(val); }
void CWULightWeightQueryRequest::setAfterWU(const char * val){ m_AfterWU.set(val); }
void CWULightWeightQueryRequest::setState(const char * val){ m_State.set(val); }
void CWULightWeightQueryRequest::setApplicationValues(IArrayOf<IEspApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspApplicationValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWULightWeightQueryRequest::setApplicationValues(IArrayOf<IConstApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstApplicationValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWULightWeightQueryRequest::setPageStartFrom_null(){ m_PageStartFrom.Nil(); }void CWULightWeightQueryRequest::setPageStartFrom(__int64 val){ m_PageStartFrom=val; }
void CWULightWeightQueryRequest::setPageSize_null(){ m_PageSize.Nil(); }void CWULightWeightQueryRequest::setPageSize(unsigned int val){ m_PageSize=val; }
void CWULightWeightQueryRequest::setSortBy(const char * val){ m_SortBy.set(val); }
void CWULightWeightQueryRequest::setDescending_null(){ m_Descending.Nil(); }void CWULightWeightQueryRequest::setDescending(bool val){ m_Descending=val; }
void CWULightWeightQueryRequest::setCacheHint_null(){ m_CacheHint.Nil(); }void CWULightWeightQueryRequest::setCacheHint(__int64 val){ m_CacheHint=val; }
extern "C"  IEspWULightWeightQueryRequest *createWULightWeightQueryRequest(const char *serv){return ((IEspWULightWeightQueryRequest *)new CWULightWeightQueryRequest(serv));}
extern "C"  IClientWULightWeightQueryRequest *createClientWULightWeightQueryRequest(const char *serv){return ((IClientWULightWeightQueryRequest *)new CWULightWeightQueryRequest(serv));}

//=======================================================
// class CWULightWeightQueryResponse Implementation
//=======================================================

CWULightWeightQueryResponse::CWULightWeightQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_NumWUs(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWULightWeightQueryResponse::CWULightWeightQueryResponse(const char *serviceName, const char *bc)
	: m_NumWUs(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryResponse");
}

CWULightWeightQueryResponse::CWULightWeightQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_NumWUs(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWULightWeightQueryResponse::CWULightWeightQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_NumWUs(nilRemove),m_CacheHint(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULightWeightQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWULightWeightQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumWUs\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunits\" type=\"tns:ArrayOfECLWorkunitLW\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLWorkunitLW::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLWorkunitLW") && added.getValue("ArrayOfECLWorkunitLW")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLWorkunitLW\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLWorkunitLW\" type=\"tns:ECLWorkunitLW\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLWorkunitLW",1);
	}
	return schema;
}

void CWULightWeightQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWULightWeightQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLWorkunitLW"))
	{
		added.setValue("ECLWorkunitLW",1);
		CECLWorkunitLW::getMapInfo(info,added);
	}
}

StringBuffer &CWULightWeightQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumWUs");
	form.appendf("  <tr><td><b>NumWUs: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CacheHint");
	form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunits");
	form.appendf("<tr><td><b>Workunits: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWULightWeightQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWULightWeightQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_NumWUs.marshall(rpc_resp, "NumWUs", "", "", "");
		m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
		m_Workunits.marshall(rpc_resp, "Workunits", "ECLWorkunitLW");
	}
}


void CWULightWeightQueryResponse::copy(CWULightWeightQueryResponse &from)
{
	m_NumWUs.copy(from.m_NumWUs);
	m_CacheHint.copy(from.m_CacheHint);
	m_Workunits.copy(from.m_Workunits);
}


void CWULightWeightQueryResponse::copy(IConstWULightWeightQueryResponse &ifrom)
{
	setNumWUs(ifrom.getNumWUs());
	setCacheHint(ifrom.getCacheHint());
	setWorkunits(ifrom.getWorkunits());
}


void CWULightWeightQueryResponse::getAttributes(IProperties &attributes)
{
}


void CWULightWeightQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_NumWUs.toStr(ctx, buffer, "NumWUs", "", true, "", "");
		m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
		m_Workunits.toStr(ctx, buffer, "Workunits", "ECLWorkunitLW");
	}
}


void CWULightWeightQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWULightWeightQueryResponse::serializer(IEspContext* ctx, IConstWULightWeightQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WULightWeightQueryResponse>");
	// field NumWUs
	{
		int n = src.getNumWUs();
		if (n)
			buffer.appendf("<NumWUs>%d</NumWUs>", n);
	}
	// field CacheHint
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	// field Workunits
	{
		IArrayOf<IConstECLWorkunitLW>& v = src.getWorkunits();
		int size = v.length();
		if (size>0)
			buffer.append("<Workunits>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLWorkunitLW::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Workunits>");
	}
	if (keepRootTag)
		buffer.append("</WULightWeightQueryResponse>");
}

bool CWULightWeightQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_NumWUs.unmarshall(rpc_request, "NumWUs", basepath);
		hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
		hasValue |= m_Workunits.unmarshall(rpc_request, "Workunits", basepath);
	}
	return hasValue;
}

bool CWULightWeightQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_NumWUs.unmarshall(ctx, soapval, "NumWUs");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	hasValue |= m_Workunits.unmarshall(ctx, soapval, "Workunits");
	return hasValue;
}

bool CWULightWeightQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_NumWUs.unmarshall(ctx, params, attachments, "NumWUs", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	hasValue |= m_Workunits.unmarshall(ctx, params, attachments, "Workunits", basepath);
	return hasValue;
}

bool CWULightWeightQueryResponse::getNumWUs_isNull(){return m_NumWUs.is_nil();}
int CWULightWeightQueryResponse::getNumWUs() { return m_NumWUs;}
bool CWULightWeightQueryResponse::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CWULightWeightQueryResponse::getCacheHint() { return m_CacheHint;}
IArrayOf<IConstECLWorkunitLW> & CWULightWeightQueryResponse::getWorkunits() { return (IArrayOf<IConstECLWorkunitLW> &) m_Workunits; }
void CWULightWeightQueryResponse::setNumWUs_null(){ m_NumWUs.Nil(); }void CWULightWeightQueryResponse::setNumWUs(int val){ m_NumWUs=val; }
void CWULightWeightQueryResponse::setCacheHint_null(){ m_CacheHint.Nil(); }void CWULightWeightQueryResponse::setCacheHint(__int64 val){ m_CacheHint=val; }
void CWULightWeightQueryResponse::setWorkunits(IArrayOf<IEspECLWorkunitLW> &val)
{
	m_Workunits->kill();
	IArrayOf<IConstECLWorkunitLW> &target = m_Workunits.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLWorkunitLW &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWULightWeightQueryResponse::setWorkunits(IArrayOf<IConstECLWorkunitLW> &val)
{
	m_Workunits->kill();
	IArrayOf<IConstECLWorkunitLW> &target = m_Workunits.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLWorkunitLW &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWULightWeightQueryResponse *createWULightWeightQueryResponse(const char *serv){return ((IEspWULightWeightQueryResponse *)new CWULightWeightQueryResponse(serv));}
extern "C"  IClientWULightWeightQueryResponse *createClientWULightWeightQueryResponse(const char *serv){return ((IClientWULightWeightQueryResponse *)new CWULightWeightQueryResponse(serv));}

//=======================================================
// class CWUUpdateRequest Implementation
//=======================================================

CWUUpdateRequest::CWUUpdateRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_State(nilRemove),m_StateOrig(nilRemove),m_Jobname(nilRemove),m_JobnameOrig(nilRemove),m_QueryText(nilRemove),m_Action(nilRemove),m_Description(nilRemove),m_DescriptionOrig(nilRemove),m_AddDrilldownFields(nilRemove),m_ResultLimit(nilRemove),m_Protected(nilRemove, false),m_ProtectedOrig(nilRemove, false),m_PriorityClass(nilRemove),m_PriorityLevel(nilRemove),m_Scope(nilRemove),m_ScopeOrig(nilRemove),m_ClusterSelection(nilRemove),m_ClusterOrig(nilRemove),m_XmlParams(nilRemove),m_ThorSlaveIP(nilRemove),m_QueryMainDefinition(nilRemove),m_DebugValues(nilRemove),m_ApplicationValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUUpdateRequest::CWUUpdateRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_State(nilRemove),m_StateOrig(nilRemove),m_Jobname(nilRemove),m_JobnameOrig(nilRemove),m_QueryText(nilRemove),m_Action(nilRemove),m_Description(nilRemove),m_DescriptionOrig(nilRemove),m_AddDrilldownFields(nilRemove),m_ResultLimit(nilRemove),m_Protected(nilRemove, false),m_ProtectedOrig(nilRemove, false),m_PriorityClass(nilRemove),m_PriorityLevel(nilRemove),m_Scope(nilRemove),m_ScopeOrig(nilRemove),m_ClusterSelection(nilRemove),m_ClusterOrig(nilRemove),m_XmlParams(nilRemove),m_ThorSlaveIP(nilRemove),m_QueryMainDefinition(nilRemove),m_DebugValues(nilRemove),m_ApplicationValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateRequest");
}

CWUUpdateRequest::CWUUpdateRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_State(nilRemove),m_StateOrig(nilRemove),m_Jobname(nilRemove),m_JobnameOrig(nilRemove),m_QueryText(nilRemove),m_Action(nilRemove),m_Description(nilRemove),m_DescriptionOrig(nilRemove),m_AddDrilldownFields(nilRemove),m_ResultLimit(nilRemove),m_Protected(nilRemove, false),m_ProtectedOrig(nilRemove, false),m_PriorityClass(nilRemove),m_PriorityLevel(nilRemove),m_Scope(nilRemove),m_ScopeOrig(nilRemove),m_ClusterSelection(nilRemove),m_ClusterOrig(nilRemove),m_XmlParams(nilRemove),m_ThorSlaveIP(nilRemove),m_QueryMainDefinition(nilRemove),m_DebugValues(nilRemove),m_ApplicationValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUUpdateRequest::CWUUpdateRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_State(nilRemove),m_StateOrig(nilRemove),m_Jobname(nilRemove),m_JobnameOrig(nilRemove),m_QueryText(nilRemove),m_Action(nilRemove),m_Description(nilRemove),m_DescriptionOrig(nilRemove),m_AddDrilldownFields(nilRemove),m_ResultLimit(nilRemove),m_Protected(nilRemove, false),m_ProtectedOrig(nilRemove, false),m_PriorityClass(nilRemove),m_PriorityLevel(nilRemove),m_Scope(nilRemove),m_ScopeOrig(nilRemove),m_ClusterSelection(nilRemove),m_ClusterOrig(nilRemove),m_XmlParams(nilRemove),m_ThorSlaveIP(nilRemove),m_QueryMainDefinition(nilRemove),m_DebugValues(nilRemove),m_ApplicationValues(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUUpdateRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StateOrig\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Jobname\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"JobnameOrig\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryText\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DescriptionOrig\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AddDrilldownFields\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResultLimit\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Protected\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ProtectedOrig\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityClass\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityLevel\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scope\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeOrig\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUUpdateRequest","ClusterSelection")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterSelection\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUUpdateRequest","ClusterOrig")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterOrig\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUUpdateRequest","XmlParams")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"XmlParams\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUUpdateRequest","ThorSlaveIP")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ThorSlaveIP\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUUpdateRequest","QueryMainDefinition")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QueryMainDefinition\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValues\" type=\"tns:ArrayOfDebugValue\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValues\" type=\"tns:ArrayOfApplicationValue\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDebugValue::getXsdDefinition(context, request, schema, added);
		CApplicationValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ApplicationValue") && added.getValue("ArrayOfApplicationValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfApplicationValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ApplicationValue\" type=\"tns:ApplicationValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfApplicationValue",1);
	}
	if (added.getValue("DebugValue") && added.getValue("ArrayOfDebugValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDebugValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DebugValue\" type=\"tns:DebugValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDebugValue",1);
	}
	return schema;
}

void CWUUpdateRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUUpdateRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUUpdateRequest","ClusterSelection",1.05);
	info.addMinVersion("WUUpdateRequest","ClusterOrig",1.05);
	info.addMinVersion("WUUpdateRequest","XmlParams",1.22);
	info.addMinVersion("WUUpdateRequest","ThorSlaveIP",1.25);
	info.addMinVersion("WUUpdateRequest","QueryMainDefinition",1.35);
	if (!added.getValue("ApplicationValue"))
	{
		added.setValue("ApplicationValue",1);
		CApplicationValue::getMapInfo(info,added);
	}
	if (!added.getValue("DebugValue"))
	{
		added.setValue("DebugValue",1);
		CDebugValue::getMapInfo(info,added);
	}
}

StringBuffer &CWUUpdateRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("StateOrig");
	form.appendf("  <tr><td><b>StateOrig: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Jobname");
	form.appendf("  <tr><td><b>Jobname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobnameOrig");
	form.appendf("  <tr><td><b>JobnameOrig: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryText");
	form.appendf("  <tr><td><b>QueryText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DescriptionOrig");
	form.appendf("  <tr><td><b>DescriptionOrig: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AddDrilldownFields");
	
	form.appendf("  <tr><td><b>AddDrilldownFields? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ResultLimit");
	form.appendf("  <tr><td><b>ResultLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Protected");
	
	form.appendf("  <tr><td><b>Protected? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ProtectedOrig");
	
	form.appendf("  <tr><td><b>ProtectedOrig? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PriorityClass");
	form.appendf("  <tr><td><b>PriorityClass: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PriorityLevel");
	form.appendf("  <tr><td><b>PriorityLevel: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scope");
	form.appendf("  <tr><td><b>Scope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeOrig");
	form.appendf("  <tr><td><b>ScopeOrig: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUUpdateRequest","ClusterSelection")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterSelection");
		form.appendf("  <tr><td><b>ClusterSelection: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUUpdateRequest","ClusterOrig")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterOrig");
		form.appendf("  <tr><td><b>ClusterOrig: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUUpdateRequest","XmlParams")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("XmlParams");
		form.appendf("  <tr><td><b>XmlParams: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUUpdateRequest","ThorSlaveIP")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ThorSlaveIP");
		form.appendf("  <tr><td><b>ThorSlaveIP: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUUpdateRequest","QueryMainDefinition")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QueryMainDefinition");
		form.appendf("  <tr><td><b>QueryMainDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DebugValues");
	form.appendf("<tr><td><b>DebugValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ApplicationValues");
	form.appendf("<tr><td><b>ApplicationValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUUpdateRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUUpdateRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_StateOrig.marshall(rpc_resp, "StateOrig", "", "", "");
	m_Jobname.marshall(rpc_resp, "Jobname", "", "", "");
	m_JobnameOrig.marshall(rpc_resp, "JobnameOrig", "", "", "");
	m_QueryText.marshall(rpc_resp, "QueryText", "", "", "");
	m_Action.marshall(rpc_resp, "Action", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
	m_DescriptionOrig.marshall(rpc_resp, "DescriptionOrig", "", "", "");
	m_AddDrilldownFields.marshall(rpc_resp, "AddDrilldownFields", "", "", "");
	m_ResultLimit.marshall(rpc_resp, "ResultLimit", "", "", "");
	m_Protected.marshall(rpc_resp, "Protected", "", "", "");
	m_ProtectedOrig.marshall(rpc_resp, "ProtectedOrig", "", "", "");
	m_PriorityClass.marshall(rpc_resp, "PriorityClass", "", "", "");
	m_PriorityLevel.marshall(rpc_resp, "PriorityLevel", "", "", "");
	m_Scope.marshall(rpc_resp, "Scope", "", "", "");
	m_ScopeOrig.marshall(rpc_resp, "ScopeOrig", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ClusterSelection.marshall(rpc_resp, "ClusterSelection", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ClusterOrig.marshall(rpc_resp, "ClusterOrig", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_XmlParams.marshall(rpc_resp, "XmlParams", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.25))
		m_ThorSlaveIP.marshall(rpc_resp, "ThorSlaveIP", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.35))
		m_QueryMainDefinition.marshall(rpc_resp, "QueryMainDefinition", "", "", "");
	m_DebugValues.marshall(rpc_resp, "DebugValues", "DebugValue");
	m_ApplicationValues.marshall(rpc_resp, "ApplicationValues", "ApplicationValue");
}


void CWUUpdateRequest::copy(CWUUpdateRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_State.copy(from.m_State);
	m_StateOrig.copy(from.m_StateOrig);
	m_Jobname.copy(from.m_Jobname);
	m_JobnameOrig.copy(from.m_JobnameOrig);
	m_QueryText.copy(from.m_QueryText);
	m_Action.copy(from.m_Action);
	m_Description.copy(from.m_Description);
	m_DescriptionOrig.copy(from.m_DescriptionOrig);
	m_AddDrilldownFields.copy(from.m_AddDrilldownFields);
	m_ResultLimit.copy(from.m_ResultLimit);
	m_Protected.copy(from.m_Protected);
	m_ProtectedOrig.copy(from.m_ProtectedOrig);
	m_PriorityClass.copy(from.m_PriorityClass);
	m_PriorityLevel.copy(from.m_PriorityLevel);
	m_Scope.copy(from.m_Scope);
	m_ScopeOrig.copy(from.m_ScopeOrig);
	m_ClusterSelection.copy(from.m_ClusterSelection);
	m_ClusterOrig.copy(from.m_ClusterOrig);
	m_XmlParams.copy(from.m_XmlParams);
	m_ThorSlaveIP.copy(from.m_ThorSlaveIP);
	m_QueryMainDefinition.copy(from.m_QueryMainDefinition);
	m_DebugValues.copy(from.m_DebugValues);
	m_ApplicationValues.copy(from.m_ApplicationValues);
}


void CWUUpdateRequest::copy(IConstWUUpdateRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setState(ifrom.getState());
	setStateOrig(ifrom.getStateOrig());
	setJobname(ifrom.getJobname());
	setJobnameOrig(ifrom.getJobnameOrig());
	setQueryText(ifrom.getQueryText());
	setAction(ifrom.getAction());
	setDescription(ifrom.getDescription());
	setDescriptionOrig(ifrom.getDescriptionOrig());
	setAddDrilldownFields(ifrom.getAddDrilldownFields());
	setResultLimit(ifrom.getResultLimit());
	setProtected(ifrom.getProtected());
	setProtectedOrig(ifrom.getProtectedOrig());
	setPriorityClass(ifrom.getPriorityClass());
	setPriorityLevel(ifrom.getPriorityLevel());
	setScope(ifrom.getScope());
	setScopeOrig(ifrom.getScopeOrig());
	setClusterSelection(ifrom.getClusterSelection());
	setClusterOrig(ifrom.getClusterOrig());
	setXmlParams(ifrom.getXmlParams());
	setThorSlaveIP(ifrom.getThorSlaveIP());
	setQueryMainDefinition(ifrom.getQueryMainDefinition());
	setDebugValues(ifrom.getDebugValues());
	setApplicationValues(ifrom.getApplicationValues());
}


void CWUUpdateRequest::getAttributes(IProperties &attributes)
{
}


void CWUUpdateRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_StateOrig.toStr(ctx, buffer, "StateOrig", "", true, "", "");
	m_Jobname.toStr(ctx, buffer, "Jobname", "", true, "", "");
	m_JobnameOrig.toStr(ctx, buffer, "JobnameOrig", "", true, "", "");
	m_QueryText.toStr(ctx, buffer, "QueryText", "", true, "", "");
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	m_DescriptionOrig.toStr(ctx, buffer, "DescriptionOrig", "", true, "", "");
	m_AddDrilldownFields.toStr(ctx, buffer, "AddDrilldownFields", "", true, "", "");
	m_ResultLimit.toStr(ctx, buffer, "ResultLimit", "", true, "", "");
	m_Protected.toStr(ctx, buffer, "Protected", "", true, "", "");
	m_ProtectedOrig.toStr(ctx, buffer, "ProtectedOrig", "", true, "", "");
	m_PriorityClass.toStr(ctx, buffer, "PriorityClass", "", true, "", "");
	m_PriorityLevel.toStr(ctx, buffer, "PriorityLevel", "", true, "", "");
	m_Scope.toStr(ctx, buffer, "Scope", "", true, "", "");
	m_ScopeOrig.toStr(ctx, buffer, "ScopeOrig", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ClusterSelection.toStr(ctx, buffer, "ClusterSelection", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.05))
		m_ClusterOrig.toStr(ctx, buffer, "ClusterOrig", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.22))
		m_XmlParams.toStr(ctx, buffer, "XmlParams", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.25))
		m_ThorSlaveIP.toStr(ctx, buffer, "ThorSlaveIP", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.35))
		m_QueryMainDefinition.toStr(ctx, buffer, "QueryMainDefinition", "", true, "", "");
	m_DebugValues.toStr(ctx, buffer, "DebugValues", "DebugValue");
	m_ApplicationValues.toStr(ctx, buffer, "ApplicationValues", "ApplicationValue");
}


void CWUUpdateRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUUpdateRequest::serializer(IEspContext* ctx, IConstWUUpdateRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUUpdateRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field State
	{
		int n = src.getState();
		if (n)
			buffer.appendf("<State>%d</State>", n);
	}
	// field StateOrig
	{
		int n = src.getStateOrig();
		if (n)
			buffer.appendf("<StateOrig>%d</StateOrig>", n);
	}
	// field Jobname
	{
		const char* s = src.getJobname();
		if (s && *s)
		{
			buffer.append("<Jobname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Jobname>");
		}
	}
	// field JobnameOrig
	{
		const char* s = src.getJobnameOrig();
		if (s && *s)
		{
			buffer.append("<JobnameOrig>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobnameOrig>");
		}
	}
	// field QueryText
	{
		const char* s = src.getQueryText();
		if (s && *s)
		{
			buffer.append("<QueryText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryText>");
		}
	}
	// field Action
	{
		int n = src.getAction();
		if (n)
			buffer.appendf("<Action>%d</Action>", n);
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field DescriptionOrig
	{
		const char* s = src.getDescriptionOrig();
		if (s && *s)
		{
			buffer.append("<DescriptionOrig>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DescriptionOrig>");
		}
	}
	// field AddDrilldownFields
	{
		bool b = src.getAddDrilldownFields();
		if (b)
			buffer.appendf("<AddDrilldownFields>1</AddDrilldownFields>");
	}
	// field ResultLimit
	{
		int n = src.getResultLimit();
		if (n)
			buffer.appendf("<ResultLimit>%d</ResultLimit>", n);
	}
	// field Protected
	{
		bool b = src.getProtected();
		if (b)
			buffer.appendf("<Protected>1</Protected>");
	}
	// field ProtectedOrig
	{
		bool b = src.getProtectedOrig();
		if (b)
			buffer.appendf("<ProtectedOrig>1</ProtectedOrig>");
	}
	// field PriorityClass
	{
		int n = src.getPriorityClass();
		if (n)
			buffer.appendf("<PriorityClass>%d</PriorityClass>", n);
	}
	// field PriorityLevel
	{
		int n = src.getPriorityLevel();
		if (n)
			buffer.appendf("<PriorityLevel>%d</PriorityLevel>", n);
	}
	// field Scope
	{
		const char* s = src.getScope();
		if (s && *s)
		{
			buffer.append("<Scope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Scope>");
		}
	}
	// field ScopeOrig
	{
		const char* s = src.getScopeOrig();
		if (s && *s)
		{
			buffer.append("<ScopeOrig>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ScopeOrig>");
		}
	}
	// field ClusterSelection
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getClusterSelection();
		if (s && *s)
		{
			buffer.append("<ClusterSelection>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterSelection>");
		}
	}
	// field ClusterOrig
	if ((clientVer==-1.0 || clientVer>=1.05))
	{
		const char* s = src.getClusterOrig();
		if (s && *s)
		{
			buffer.append("<ClusterOrig>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterOrig>");
		}
	}
	// field XmlParams
	if ((clientVer==-1.0 || clientVer>=1.22))
	{
		const char* s = src.getXmlParams();
		if (s && *s)
		{
			buffer.append("<XmlParams>");
			encodeUtf8XML(s,buffer);
			buffer.append("</XmlParams>");
		}
	}
	// field ThorSlaveIP
	if ((clientVer==-1.0 || clientVer>=1.25))
	{
		const char* s = src.getThorSlaveIP();
		if (s && *s)
		{
			buffer.append("<ThorSlaveIP>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ThorSlaveIP>");
		}
	}
	// field QueryMainDefinition
	if ((clientVer==-1.0 || clientVer>=1.35))
	{
		const char* s = src.getQueryMainDefinition();
		if (s && *s)
		{
			buffer.append("<QueryMainDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryMainDefinition>");
		}
	}
	// field DebugValues
	{
		IArrayOf<IConstDebugValue>& v = src.getDebugValues();
		int size = v.length();
		if (size>0)
			buffer.append("<DebugValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDebugValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DebugValues>");
	}
	// field ApplicationValues
	{
		IArrayOf<IConstApplicationValue>& v = src.getApplicationValues();
		int size = v.length();
		if (size>0)
			buffer.append("<ApplicationValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CApplicationValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ApplicationValues>");
	}
	if (keepRootTag)
		buffer.append("</WUUpdateRequest>");
}

bool CWUUpdateRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_StateOrig.unmarshall(rpc_request, "StateOrig", basepath);
	hasValue |= m_Jobname.unmarshall(rpc_request, "Jobname", basepath);
	hasValue |= m_JobnameOrig.unmarshall(rpc_request, "JobnameOrig", basepath);
	hasValue |= m_QueryText.unmarshall(rpc_request, "QueryText", basepath);
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_DescriptionOrig.unmarshall(rpc_request, "DescriptionOrig", basepath);
	hasValue |= m_AddDrilldownFields.unmarshall(rpc_request, "AddDrilldownFields", basepath);
	hasValue |= m_ResultLimit.unmarshall(rpc_request, "ResultLimit", basepath);
	hasValue |= m_Protected.unmarshall(rpc_request, "Protected", basepath);
	hasValue |= m_ProtectedOrig.unmarshall(rpc_request, "ProtectedOrig", basepath);
	hasValue |= m_PriorityClass.unmarshall(rpc_request, "PriorityClass", basepath);
	hasValue |= m_PriorityLevel.unmarshall(rpc_request, "PriorityLevel", basepath);
	hasValue |= m_Scope.unmarshall(rpc_request, "Scope", basepath);
	hasValue |= m_ScopeOrig.unmarshall(rpc_request, "ScopeOrig", basepath);
	hasValue |= m_ClusterSelection.unmarshall(rpc_request, "ClusterSelection", basepath);
	hasValue |= m_ClusterOrig.unmarshall(rpc_request, "ClusterOrig", basepath);
	hasValue |= m_XmlParams.unmarshall(rpc_request, "XmlParams", basepath);
	hasValue |= m_ThorSlaveIP.unmarshall(rpc_request, "ThorSlaveIP", basepath);
	hasValue |= m_QueryMainDefinition.unmarshall(rpc_request, "QueryMainDefinition", basepath);
	hasValue |= m_DebugValues.unmarshall(rpc_request, "DebugValues", basepath);
	hasValue |= m_ApplicationValues.unmarshall(rpc_request, "ApplicationValues", basepath);
	return hasValue;
}

bool CWUUpdateRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StateOrig.unmarshall(ctx, soapval, "StateOrig");
	hasValue |= m_Jobname.unmarshall(ctx, soapval, "Jobname");
	hasValue |= m_JobnameOrig.unmarshall(ctx, soapval, "JobnameOrig");
	hasValue |= m_QueryText.unmarshall(ctx, soapval, "QueryText");
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_DescriptionOrig.unmarshall(ctx, soapval, "DescriptionOrig");
	hasValue |= m_AddDrilldownFields.unmarshall(ctx, soapval, "AddDrilldownFields");
	hasValue |= m_ResultLimit.unmarshall(ctx, soapval, "ResultLimit");
	hasValue |= m_Protected.unmarshall(ctx, soapval, "Protected");
	hasValue |= m_ProtectedOrig.unmarshall(ctx, soapval, "ProtectedOrig");
	hasValue |= m_PriorityClass.unmarshall(ctx, soapval, "PriorityClass");
	hasValue |= m_PriorityLevel.unmarshall(ctx, soapval, "PriorityLevel");
	hasValue |= m_Scope.unmarshall(ctx, soapval, "Scope");
	hasValue |= m_ScopeOrig.unmarshall(ctx, soapval, "ScopeOrig");
	hasValue |= m_ClusterSelection.unmarshall(ctx, soapval, "ClusterSelection");
	hasValue |= m_ClusterOrig.unmarshall(ctx, soapval, "ClusterOrig");
	hasValue |= m_XmlParams.unmarshall(ctx, soapval, "XmlParams");
	hasValue |= m_ThorSlaveIP.unmarshall(ctx, soapval, "ThorSlaveIP");
	hasValue |= m_QueryMainDefinition.unmarshall(ctx, soapval, "QueryMainDefinition");
	hasValue |= m_DebugValues.unmarshall(ctx, soapval, "DebugValues");
	hasValue |= m_ApplicationValues.unmarshall(ctx, soapval, "ApplicationValues");
	return hasValue;
}

bool CWUUpdateRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StateOrig.unmarshall(ctx, params, attachments, "StateOrig", basepath);
	hasValue |= m_Jobname.unmarshall(ctx, params, attachments, "Jobname", basepath);
	hasValue |= m_JobnameOrig.unmarshall(ctx, params, attachments, "JobnameOrig", basepath);
	hasValue |= m_QueryText.unmarshall(ctx, params, attachments, "QueryText", basepath);
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_DescriptionOrig.unmarshall(ctx, params, attachments, "DescriptionOrig", basepath);
	hasValue |= m_AddDrilldownFields.unmarshall(ctx, params, attachments, "AddDrilldownFields", basepath);
	hasValue |= m_ResultLimit.unmarshall(ctx, params, attachments, "ResultLimit", basepath);
	hasValue |= m_Protected.unmarshall(ctx, params, attachments, "Protected", basepath);
	hasValue |= m_ProtectedOrig.unmarshall(ctx, params, attachments, "ProtectedOrig", basepath);
	hasValue |= m_PriorityClass.unmarshall(ctx, params, attachments, "PriorityClass", basepath);
	hasValue |= m_PriorityLevel.unmarshall(ctx, params, attachments, "PriorityLevel", basepath);
	hasValue |= m_Scope.unmarshall(ctx, params, attachments, "Scope", basepath);
	hasValue |= m_ScopeOrig.unmarshall(ctx, params, attachments, "ScopeOrig", basepath);
	hasValue |= m_ClusterSelection.unmarshall(ctx, params, attachments, "ClusterSelection", basepath);
	hasValue |= m_ClusterOrig.unmarshall(ctx, params, attachments, "ClusterOrig", basepath);
	hasValue |= m_XmlParams.unmarshall(ctx, params, attachments, "XmlParams", basepath);
	hasValue |= m_ThorSlaveIP.unmarshall(ctx, params, attachments, "ThorSlaveIP", basepath);
	hasValue |= m_QueryMainDefinition.unmarshall(ctx, params, attachments, "QueryMainDefinition", basepath);
	hasValue |= m_DebugValues.unmarshall(ctx, params, attachments, "DebugValues", basepath);
	hasValue |= m_ApplicationValues.unmarshall(ctx, params, attachments, "ApplicationValues", basepath);
	return hasValue;
}

const char * CWUUpdateRequest::getWuid() { return m_Wuid.query();}
bool CWUUpdateRequest::getState_isNull(){return m_State.is_nil();}
int CWUUpdateRequest::getState() { return m_State;}
bool CWUUpdateRequest::getStateOrig_isNull(){return m_StateOrig.is_nil();}
int CWUUpdateRequest::getStateOrig() { return m_StateOrig;}
const char * CWUUpdateRequest::getJobname() { return m_Jobname.query();}
const char * CWUUpdateRequest::getJobnameOrig() { return m_JobnameOrig.query();}
const char * CWUUpdateRequest::getQueryText() { return m_QueryText.query();}
bool CWUUpdateRequest::getAction_isNull(){return m_Action.is_nil();}
int CWUUpdateRequest::getAction() { return m_Action;}
const char * CWUUpdateRequest::getDescription() { return m_Description.query();}
const char * CWUUpdateRequest::getDescriptionOrig() { return m_DescriptionOrig.query();}
bool CWUUpdateRequest::getAddDrilldownFields_isNull(){return m_AddDrilldownFields.is_nil();}
bool CWUUpdateRequest::getAddDrilldownFields() { return m_AddDrilldownFields;}
bool CWUUpdateRequest::getResultLimit_isNull(){return m_ResultLimit.is_nil();}
int CWUUpdateRequest::getResultLimit() { return m_ResultLimit;}
bool CWUUpdateRequest::getProtected_isNull(){return m_Protected.is_nil();}
bool CWUUpdateRequest::getProtected() { return m_Protected;}
bool CWUUpdateRequest::getProtectedOrig_isNull(){return m_ProtectedOrig.is_nil();}
bool CWUUpdateRequest::getProtectedOrig() { return m_ProtectedOrig;}
bool CWUUpdateRequest::getPriorityClass_isNull(){return m_PriorityClass.is_nil();}
int CWUUpdateRequest::getPriorityClass() { return m_PriorityClass;}
bool CWUUpdateRequest::getPriorityLevel_isNull(){return m_PriorityLevel.is_nil();}
int CWUUpdateRequest::getPriorityLevel() { return m_PriorityLevel;}
const char * CWUUpdateRequest::getScope() { return m_Scope.query();}
const char * CWUUpdateRequest::getScopeOrig() { return m_ScopeOrig.query();}
const char * CWUUpdateRequest::getClusterSelection() { return m_ClusterSelection.query();}
const char * CWUUpdateRequest::getClusterOrig() { return m_ClusterOrig.query();}
const char * CWUUpdateRequest::getXmlParams() { return m_XmlParams.query();}
const char * CWUUpdateRequest::getThorSlaveIP() { return m_ThorSlaveIP.query();}
const char * CWUUpdateRequest::getQueryMainDefinition() { return m_QueryMainDefinition.query();}
IArrayOf<IConstDebugValue> & CWUUpdateRequest::getDebugValues() { return (IArrayOf<IConstDebugValue> &) m_DebugValues; }
IArrayOf<IConstApplicationValue> & CWUUpdateRequest::getApplicationValues() { return (IArrayOf<IConstApplicationValue> &) m_ApplicationValues; }
void CWUUpdateRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUUpdateRequest::setState_null(){ m_State.Nil(); }void CWUUpdateRequest::setState(int val){ m_State=val; }
void CWUUpdateRequest::setStateOrig_null(){ m_StateOrig.Nil(); }void CWUUpdateRequest::setStateOrig(int val){ m_StateOrig=val; }
void CWUUpdateRequest::setJobname(const char * val){ m_Jobname.set(val); }
void CWUUpdateRequest::setJobnameOrig(const char * val){ m_JobnameOrig.set(val); }
void CWUUpdateRequest::setQueryText(const char * val){ m_QueryText.set(val); }
void CWUUpdateRequest::setAction_null(){ m_Action.Nil(); }void CWUUpdateRequest::setAction(int val){ m_Action=val; }
void CWUUpdateRequest::setDescription(const char * val){ m_Description.set(val); }
void CWUUpdateRequest::setDescriptionOrig(const char * val){ m_DescriptionOrig.set(val); }
void CWUUpdateRequest::setAddDrilldownFields_null(){ m_AddDrilldownFields.Nil(); }void CWUUpdateRequest::setAddDrilldownFields(bool val){ m_AddDrilldownFields=val; }
void CWUUpdateRequest::setResultLimit_null(){ m_ResultLimit.Nil(); }void CWUUpdateRequest::setResultLimit(int val){ m_ResultLimit=val; }
void CWUUpdateRequest::setProtected_null(){ m_Protected.Nil(); }void CWUUpdateRequest::setProtected(bool val){ m_Protected=val; }
void CWUUpdateRequest::setProtectedOrig_null(){ m_ProtectedOrig.Nil(); }void CWUUpdateRequest::setProtectedOrig(bool val){ m_ProtectedOrig=val; }
void CWUUpdateRequest::setPriorityClass_null(){ m_PriorityClass.Nil(); }void CWUUpdateRequest::setPriorityClass(int val){ m_PriorityClass=val; }
void CWUUpdateRequest::setPriorityLevel_null(){ m_PriorityLevel.Nil(); }void CWUUpdateRequest::setPriorityLevel(int val){ m_PriorityLevel=val; }
void CWUUpdateRequest::setScope(const char * val){ m_Scope.set(val); }
void CWUUpdateRequest::setScopeOrig(const char * val){ m_ScopeOrig.set(val); }
void CWUUpdateRequest::setClusterSelection(const char * val){ m_ClusterSelection.set(val); }
void CWUUpdateRequest::setClusterOrig(const char * val){ m_ClusterOrig.set(val); }
void CWUUpdateRequest::setXmlParams(const char * val){ m_XmlParams.set(val); }
void CWUUpdateRequest::setThorSlaveIP(const char * val){ m_ThorSlaveIP.set(val); }
void CWUUpdateRequest::setQueryMainDefinition(const char * val){ m_QueryMainDefinition.set(val); }
void CWUUpdateRequest::setDebugValues(IArrayOf<IEspDebugValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstDebugValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDebugValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUUpdateRequest::setDebugValues(IArrayOf<IConstDebugValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstDebugValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDebugValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUUpdateRequest::setApplicationValues(IArrayOf<IEspApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspApplicationValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUUpdateRequest::setApplicationValues(IArrayOf<IConstApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstApplicationValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUUpdateRequest *createWUUpdateRequest(const char *serv){return ((IEspWUUpdateRequest *)new CWUUpdateRequest(serv));}
extern "C"  IClientWUUpdateRequest *createClientWUUpdateRequest(const char *serv){return ((IClientWUUpdateRequest *)new CWUUpdateRequest(serv));}

//=======================================================
// class CWUUpdateResponse Implementation
//=======================================================

CWUUpdateResponse::CWUUpdateResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUUpdateResponse::CWUUpdateResponse(const char *serviceName, const char *bc)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateResponse");
}

CWUUpdateResponse::CWUUpdateResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUUpdateResponse::CWUUpdateResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUUpdateResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunit\" type=\"tns:ECLWorkunit\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLWorkunit::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUUpdateResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUUpdateResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLWorkunit"))
	{
		added.setValue("ECLWorkunit",1);
		CECLWorkunit::getMapInfo(info,added);
	}
}

StringBuffer &CWUUpdateResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunit");
	form.append("<tr>").append("<td><b>Workunit: </b></td><td><hr/>");
	CECLWorkunit::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUUpdateResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUUpdateResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Workunit.marshall(rpc_resp, "Workunit", "", "", "");
	}
}


void CWUUpdateResponse::copy(CWUUpdateResponse &from)
{
	m_Workunit.copy(from.m_Workunit);
}


void CWUUpdateResponse::copy(IConstWUUpdateResponse &ifrom)
{
	setWorkunit(ifrom.getWorkunit());
}


void CWUUpdateResponse::getAttributes(IProperties &attributes)
{
}


void CWUUpdateResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Workunit.toStr(ctx, buffer, "Workunit", "", false, "", "");
	}
}


void CWUUpdateResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUUpdateResponse::serializer(IEspContext* ctx, IConstWUUpdateResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUUpdateResponse>");
	// field Workunit
	{
		StringBuffer tmp;
		CECLWorkunit::serializer(ctx,src.getWorkunit(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Workunit>%s</Workunit>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUUpdateResponse>");
}

bool CWUUpdateResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Workunit.unmarshall(rpc_request, "Workunit", basepath);
	}
	return hasValue;
}

bool CWUUpdateResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, soapval, "Workunit");
	return hasValue;
}

bool CWUUpdateResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, params, attachments, "Workunit", basepath);
	return hasValue;
}

IConstECLWorkunit & CWUUpdateResponse::getWorkunit() { return (IConstECLWorkunit &) m_Workunit.getValue();}
IEspECLWorkunit & CWUUpdateResponse::updateWorkunit(){ return (IEspECLWorkunit &) m_Workunit.getValue(); }
void CWUUpdateResponse::setWorkunit(IConstECLWorkunit &ifrom){ m_Workunit.copy(ifrom); }
extern "C"  IEspWUUpdateResponse *createWUUpdateResponse(const char *serv){return ((IEspWUUpdateResponse *)new CWUUpdateResponse(serv));}
extern "C"  IClientWUUpdateResponse *createClientWUUpdateResponse(const char *serv){return ((IClientWUUpdateResponse *)new CWUUpdateResponse(serv));}

//=======================================================
// class CWUDeleteRequest Implementation
//=======================================================

CWUDeleteRequest::CWUDeleteRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDeleteRequest::CWUDeleteRequest(const char *serviceName, const char *bc)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteRequest");
}

CWUDeleteRequest::CWUDeleteRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDeleteRequest::CWUDeleteRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDeleteRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuids\" type=\"tns:EspStringArray\"/>\n");
		if (!context.suppressed("WUDeleteRequest","BlockTillFinishTimer")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BlockTillFinishTimer\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CWUDeleteRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDeleteRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUDeleteRequest","BlockTillFinishTimer",1.02);
}

StringBuffer &CWUDeleteRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuids");
	form.appendf("<tr><td><b>Wuids: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("WUDeleteRequest","BlockTillFinishTimer")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BlockTillFinishTimer");
		form.appendf("  <tr><td><b>BlockTillFinishTimer: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDeleteRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDeleteRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuids.marshall(rpc_resp, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.marshall(rpc_resp, "BlockTillFinishTimer", "", "", "");
}


void CWUDeleteRequest::copy(CWUDeleteRequest &from)
{
	m_Wuids.copy(from.m_Wuids);
	m_BlockTillFinishTimer.copy(from.m_BlockTillFinishTimer);
}


void CWUDeleteRequest::copy(IConstWUDeleteRequest &ifrom)
{
	setWuids(ifrom.getWuids());
	setBlockTillFinishTimer(ifrom.getBlockTillFinishTimer());
}


void CWUDeleteRequest::getAttributes(IProperties &attributes)
{
}


void CWUDeleteRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuids.toStr(ctx, buffer, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.toStr(ctx, buffer, "BlockTillFinishTimer", "", true, "", "");
}


void CWUDeleteRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDeleteRequest::serializer(IEspContext* ctx, IConstWUDeleteRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDeleteRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuids
	{
		StringArray& v = src.getWuids();
		if (v.length()>0)
			buffer.append("<Wuids>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</Wuids>");
	}
	// field BlockTillFinishTimer
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		int n = src.getBlockTillFinishTimer();
		if (n)
			buffer.appendf("<BlockTillFinishTimer>%d</BlockTillFinishTimer>", n);
	}
	if (keepRootTag)
		buffer.append("</WUDeleteRequest>");
}

bool CWUDeleteRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(rpc_request, "Wuids", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(rpc_request, "BlockTillFinishTimer", basepath);
	return hasValue;
}

bool CWUDeleteRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, soapval, "Wuids");
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, soapval, "BlockTillFinishTimer");
	return hasValue;
}

bool CWUDeleteRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, params, attachments, "Wuids", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, params, attachments, "BlockTillFinishTimer", basepath);
	return hasValue;
}

StringArray & CWUDeleteRequest::getWuids() { return (StringArray &) m_Wuids; }
int CWUDeleteRequest::getBlockTillFinishTimer() { return m_BlockTillFinishTimer;}
void CWUDeleteRequest::setWuids(StringArray &val){ m_Wuids->kill();  CloneArray(m_Wuids.getValue(), val); }
void CWUDeleteRequest::setBlockTillFinishTimer(int val){ m_BlockTillFinishTimer=val; }
extern "C"  IEspWUDeleteRequest *createWUDeleteRequest(const char *serv){return ((IEspWUDeleteRequest *)new CWUDeleteRequest(serv));}
extern "C"  IClientWUDeleteRequest *createClientWUDeleteRequest(const char *serv){return ((IClientWUDeleteRequest *)new CWUDeleteRequest(serv));}

//=======================================================
// class CWUDeleteResponse Implementation
//=======================================================

CWUDeleteResponse::CWUDeleteResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDeleteResponse::CWUDeleteResponse(const char *serviceName, const char *bc)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteResponse");
}

CWUDeleteResponse::CWUDeleteResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDeleteResponse::CWUDeleteResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDeleteResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDeleteResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionResults\" type=\"tns:ArrayOfWUActionResult\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUActionResult::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUActionResult") && added.getValue("ArrayOfWUActionResult")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUActionResult\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUActionResult\" type=\"tns:WUActionResult\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUActionResult",1);
	}
	return schema;
}

void CWUDeleteResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDeleteResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUActionResult"))
	{
		added.setValue("WUActionResult",1);
		CWUActionResult::getMapInfo(info,added);
	}
}

StringBuffer &CWUDeleteResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionResults");
	form.appendf("<tr><td><b>ActionResults: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDeleteResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDeleteResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ActionResults.marshall(rpc_resp, "ActionResults", "WUActionResult");
	}
}


void CWUDeleteResponse::copy(CWUDeleteResponse &from)
{
	m_ActionResults.copy(from.m_ActionResults);
}


void CWUDeleteResponse::copy(IConstWUDeleteResponse &ifrom)
{
	setActionResults(ifrom.getActionResults());
}


void CWUDeleteResponse::getAttributes(IProperties &attributes)
{
}


void CWUDeleteResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ActionResults.toStr(ctx, buffer, "ActionResults", "WUActionResult");
	}
}


void CWUDeleteResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDeleteResponse::serializer(IEspContext* ctx, IConstWUDeleteResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDeleteResponse>");
	// field ActionResults
	{
		IArrayOf<IConstWUActionResult>& v = src.getActionResults();
		int size = v.length();
		if (size>0)
			buffer.append("<ActionResults>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUActionResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ActionResults>");
	}
	if (keepRootTag)
		buffer.append("</WUDeleteResponse>");
}

bool CWUDeleteResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ActionResults.unmarshall(rpc_request, "ActionResults", basepath);
	}
	return hasValue;
}

bool CWUDeleteResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, soapval, "ActionResults");
	return hasValue;
}

bool CWUDeleteResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, params, attachments, "ActionResults", basepath);
	return hasValue;
}

IArrayOf<IConstWUActionResult> & CWUDeleteResponse::getActionResults() { return (IArrayOf<IConstWUActionResult> &) m_ActionResults; }
void CWUDeleteResponse::setActionResults(IArrayOf<IEspWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUActionResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUDeleteResponse::setActionResults(IArrayOf<IConstWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUActionResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUDeleteResponse *createWUDeleteResponse(const char *serv){return ((IEspWUDeleteResponse *)new CWUDeleteResponse(serv));}
extern "C"  IClientWUDeleteResponse *createClientWUDeleteResponse(const char *serv){return ((IClientWUDeleteResponse *)new CWUDeleteResponse(serv));}

//=======================================================
// class CWUActionRequest Implementation
//=======================================================

CWUActionRequest::CWUActionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuids(nilRemove),m_ActionType(nilRemove),m_WUActionType(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_Test(nilRemove),m_CurrentPage("", nilRemove),m_PageSize("", nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_EventServer("", nilRemove),m_EventName("", nilRemove),m_PageFrom("", nilRemove),m_BlockTillFinishTimer(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUActionRequest::CWUActionRequest(const char *serviceName, const char *bc)
	: m_Wuids(nilRemove),m_ActionType(nilRemove),m_WUActionType(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_Test(nilRemove),m_CurrentPage("", nilRemove),m_PageSize("", nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_EventServer("", nilRemove),m_EventName("", nilRemove),m_PageFrom("", nilRemove),m_BlockTillFinishTimer(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionRequest");
}

CWUActionRequest::CWUActionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuids(nilRemove),m_ActionType(nilRemove),m_WUActionType(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_Test(nilRemove),m_CurrentPage("", nilRemove),m_PageSize("", nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_EventServer("", nilRemove),m_EventName("", nilRemove),m_PageFrom("", nilRemove),m_BlockTillFinishTimer(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUActionRequest::CWUActionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuids(nilRemove),m_ActionType(nilRemove),m_WUActionType(nilRemove),m_Cluster(nilRemove),m_Owner(nilRemove),m_State(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_ECL(nilRemove),m_Jobname(nilRemove),m_Test(nilRemove),m_CurrentPage("", nilRemove),m_PageSize("", nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_EventServer("", nilRemove),m_EventName("", nilRemove),m_PageFrom("", nilRemove),m_BlockTillFinishTimer(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUActionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuids\" type=\"tns:EspStringArray\"/>\n");
		if (!context.suppressed("WUActionRequest","ActionType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ActionType\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUActionRequest","WUActionType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WUActionType\" type=\"tns:ECLWUActions\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECL\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Jobname\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Test\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"CurrentPage\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUActionRequest","PageSize")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"PageSize\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sortby\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUActionRequest","EventServer")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventServer\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUActionRequest","EventName")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUActionRequest","PageFrom")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"PageFrom\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUActionRequest","BlockTillFinishTimer")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BlockTillFinishTimer\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUActionRequest","WUActionType"))
			CXECLWUActions::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CWUActionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUActionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addDeprVersion("WUActionRequest","ActionType",1.57);
	info.addMinVersion("WUActionRequest","WUActionType",1.57);
	info.addMinVersion("WUActionRequest","PageSize",1.03);
	info.addMinVersion("WUActionRequest","EventServer",1.01);
	info.addMinVersion("WUActionRequest","EventName",1.01);
	info.addMinVersion("WUActionRequest","PageFrom",1.01);
	info.addMinVersion("WUActionRequest","BlockTillFinishTimer",1.02);
	if (!added.getValue("ECLWUActions"))
	{
		added.setValue("ECLWUActions",1);
		CXECLWUActions::getMapInfo(info,added);
	}
}

StringBuffer &CWUActionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuids");
	form.appendf("<tr><td><b>Wuids: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("WUActionRequest","ActionType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ActionType");
		form.appendf("  <tr><td><b>ActionType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUActionRequest","WUActionType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WUActionType");
		form.appendf("  <tr><td><b>WUActionType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECL");
	form.appendf("  <tr><td><b>ECL: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Jobname");
	form.appendf("  <tr><td><b>Jobname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Test");
	form.appendf("  <tr><td><b>Test: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CurrentPage");
	form.appendf("  <tr><td><b>CurrentPage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUActionRequest","PageSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageSize");
		form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Sortby");
	form.appendf("  <tr><td><b>Sortby: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Descending");
	
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUActionRequest","EventServer")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EventServer");
		form.appendf("  <tr><td><b>EventServer: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUActionRequest","EventName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EventName");
		form.appendf("  <tr><td><b>EventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUActionRequest","PageFrom")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageFrom");
		form.appendf("  <tr><td><b>PageFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUActionRequest","BlockTillFinishTimer")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BlockTillFinishTimer");
		form.appendf("  <tr><td><b>BlockTillFinishTimer: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUActionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUActionRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuids.marshall(rpc_resp, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ActionType.marshall(rpc_resp, "ActionType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_WUActionType.marshall(rpc_resp, "WUActionType", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_ECL.marshall(rpc_resp, "ECL", "", "", "");
	m_Jobname.marshall(rpc_resp, "Jobname", "", "", "");
	m_Test.marshall(rpc_resp, "Test", "", "", "");
	m_CurrentPage.marshall(rpc_resp, "CurrentPage", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
	m_Sortby.marshall(rpc_resp, "Sortby", "", "", "");
	m_Descending.marshall(rpc_resp, "Descending", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_EventServer.marshall(rpc_resp, "EventServer", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_EventName.marshall(rpc_resp, "EventName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_PageFrom.marshall(rpc_resp, "PageFrom", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.marshall(rpc_resp, "BlockTillFinishTimer", "", "", "");
}


void CWUActionRequest::copy(CWUActionRequest &from)
{
	m_Wuids.copy(from.m_Wuids);
	m_ActionType.copy(from.m_ActionType);
	m_WUActionType.copy(from.m_WUActionType);
	m_Cluster.copy(from.m_Cluster);
	m_Owner.copy(from.m_Owner);
	m_State.copy(from.m_State);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ECL.copy(from.m_ECL);
	m_Jobname.copy(from.m_Jobname);
	m_Test.copy(from.m_Test);
	m_CurrentPage.copy(from.m_CurrentPage);
	m_PageSize.copy(from.m_PageSize);
	m_Sortby.copy(from.m_Sortby);
	m_Descending.copy(from.m_Descending);
	m_EventServer.copy(from.m_EventServer);
	m_EventName.copy(from.m_EventName);
	m_PageFrom.copy(from.m_PageFrom);
	m_BlockTillFinishTimer.copy(from.m_BlockTillFinishTimer);
}


void CWUActionRequest::copy(IConstWUActionRequest &ifrom)
{
	setWuids(ifrom.getWuids());
	setActionType(ifrom.getActionType());
	setWUActionType(ifrom.getWUActionType());
	setCluster(ifrom.getCluster());
	setOwner(ifrom.getOwner());
	setState(ifrom.getState());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setECL(ifrom.getECL());
	setJobname(ifrom.getJobname());
	setTest(ifrom.getTest());
	setCurrentPage(ifrom.getCurrentPage());
	setPageSize(ifrom.getPageSize());
	setSortby(ifrom.getSortby());
	setDescending(ifrom.getDescending());
	setEventServer(ifrom.getEventServer());
	setEventName(ifrom.getEventName());
	setPageFrom(ifrom.getPageFrom());
	setBlockTillFinishTimer(ifrom.getBlockTillFinishTimer());
}


void CWUActionRequest::getAttributes(IProperties &attributes)
{
}


void CWUActionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuids.toStr(ctx, buffer, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer<1.57))
		m_ActionType.toStr(ctx, buffer, "ActionType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_WUActionType.toStr(ctx, buffer, "WUActionType", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_ECL.toStr(ctx, buffer, "ECL", "", true, "", "");
	m_Jobname.toStr(ctx, buffer, "Jobname", "", true, "", "");
	m_Test.toStr(ctx, buffer, "Test", "", true, "", "");
	m_CurrentPage.toStr(ctx, buffer, "CurrentPage", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.03))
		m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
	m_Sortby.toStr(ctx, buffer, "Sortby", "", true, "", "");
	m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_EventServer.toStr(ctx, buffer, "EventServer", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_EventName.toStr(ctx, buffer, "EventName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_PageFrom.toStr(ctx, buffer, "PageFrom", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.toStr(ctx, buffer, "BlockTillFinishTimer", "", true, "", "");
}


void CWUActionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUActionRequest::serializer(IEspContext* ctx, IConstWUActionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUActionRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuids
	{
		StringArray& v = src.getWuids();
		if (v.length()>0)
			buffer.append("<Wuids>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</Wuids>");
	}
	// field ActionType
	if ((clientVer==-1.0 || clientVer<1.57))
	{
		const char* s = src.getActionType();
		if (s && *s)
		{
			buffer.append("<ActionType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ActionType>");
		}
	}
	// field WUActionType
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		const char* s = src.getWUActionTypeAsString();
		buffer.append("<WUActionType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</WUActionType>");
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ECL
	{
		const char* s = src.getECL();
		if (s && *s)
		{
			buffer.append("<ECL>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECL>");
		}
	}
	// field Jobname
	{
		const char* s = src.getJobname();
		if (s && *s)
		{
			buffer.append("<Jobname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Jobname>");
		}
	}
	// field Test
	{
		const char* s = src.getTest();
		if (s && *s)
		{
			buffer.append("<Test>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Test>");
		}
	}
	// field CurrentPage
	{
		const char* s = src.getCurrentPage();
		if (s && *s)
		{
			buffer.append("<CurrentPage>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CurrentPage>");
		}
	}
	// field PageSize
	if ((clientVer==-1.0 || clientVer>=1.03))
	{
		const char* s = src.getPageSize();
		if (s && *s)
		{
			buffer.append("<PageSize>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PageSize>");
		}
	}
	// field Sortby
	{
		const char* s = src.getSortby();
		if (s && *s)
		{
			buffer.append("<Sortby>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Sortby>");
		}
	}
	// field Descending
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field EventServer
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getEventServer();
		if (s && *s)
		{
			buffer.append("<EventServer>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventServer>");
		}
	}
	// field EventName
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getEventName();
		if (s && *s)
		{
			buffer.append("<EventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventName>");
		}
	}
	// field PageFrom
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getPageFrom();
		if (s && *s)
		{
			buffer.append("<PageFrom>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PageFrom>");
		}
	}
	// field BlockTillFinishTimer
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		int n = src.getBlockTillFinishTimer();
		if (n)
			buffer.appendf("<BlockTillFinishTimer>%d</BlockTillFinishTimer>", n);
	}
	if (keepRootTag)
		buffer.append("</WUActionRequest>");
}

bool CWUActionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(rpc_request, "Wuids", basepath);
	hasValue |= m_ActionType.unmarshall(rpc_request, "ActionType", basepath);
	hasValue |= m_WUActionType.unmarshall(rpc_request, "WUActionType", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_ECL.unmarshall(rpc_request, "ECL", basepath);
	hasValue |= m_Jobname.unmarshall(rpc_request, "Jobname", basepath);
	hasValue |= m_Test.unmarshall(rpc_request, "Test", basepath);
	hasValue |= m_CurrentPage.unmarshall(rpc_request, "CurrentPage", basepath);
	hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
	hasValue |= m_Sortby.unmarshall(rpc_request, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
	hasValue |= m_EventServer.unmarshall(rpc_request, "EventServer", basepath);
	hasValue |= m_EventName.unmarshall(rpc_request, "EventName", basepath);
	hasValue |= m_PageFrom.unmarshall(rpc_request, "PageFrom", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(rpc_request, "BlockTillFinishTimer", basepath);
	return hasValue;
}

bool CWUActionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, soapval, "Wuids");
	hasValue |= m_ActionType.unmarshall(ctx, soapval, "ActionType");
	hasValue |= m_WUActionType.unmarshall(ctx, soapval, "WUActionType");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ECL.unmarshall(ctx, soapval, "ECL");
	hasValue |= m_Jobname.unmarshall(ctx, soapval, "Jobname");
	hasValue |= m_Test.unmarshall(ctx, soapval, "Test");
	hasValue |= m_CurrentPage.unmarshall(ctx, soapval, "CurrentPage");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_Sortby.unmarshall(ctx, soapval, "Sortby");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_EventServer.unmarshall(ctx, soapval, "EventServer");
	hasValue |= m_EventName.unmarshall(ctx, soapval, "EventName");
	hasValue |= m_PageFrom.unmarshall(ctx, soapval, "PageFrom");
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, soapval, "BlockTillFinishTimer");
	return hasValue;
}

bool CWUActionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, params, attachments, "Wuids", basepath);
	hasValue |= m_ActionType.unmarshall(ctx, params, attachments, "ActionType", basepath);
	hasValue |= m_WUActionType.unmarshall(ctx, params, attachments, "WUActionType", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ECL.unmarshall(ctx, params, attachments, "ECL", basepath);
	hasValue |= m_Jobname.unmarshall(ctx, params, attachments, "Jobname", basepath);
	hasValue |= m_Test.unmarshall(ctx, params, attachments, "Test", basepath);
	hasValue |= m_CurrentPage.unmarshall(ctx, params, attachments, "CurrentPage", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_Sortby.unmarshall(ctx, params, attachments, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_EventServer.unmarshall(ctx, params, attachments, "EventServer", basepath);
	hasValue |= m_EventName.unmarshall(ctx, params, attachments, "EventName", basepath);
	hasValue |= m_PageFrom.unmarshall(ctx, params, attachments, "PageFrom", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, params, attachments, "BlockTillFinishTimer", basepath);
	return hasValue;
}

StringArray & CWUActionRequest::getWuids() { return (StringArray &) m_Wuids; }
const char * CWUActionRequest::getActionType() { return m_ActionType.query();}
CECLWUActions CWUActionRequest::getWUActionType() { return m_WUActionType.getValue(); }
const char* CWUActionRequest::getWUActionTypeAsString() {  return (const char*)m_WUActionType; }
const char * CWUActionRequest::getCluster() { return m_Cluster.query();}
const char * CWUActionRequest::getOwner() { return m_Owner.query();}
const char * CWUActionRequest::getState() { return m_State.query();}
const char * CWUActionRequest::getStartDate() { return m_StartDate.query();}
const char * CWUActionRequest::getEndDate() { return m_EndDate.query();}
const char * CWUActionRequest::getECL() { return m_ECL.query();}
const char * CWUActionRequest::getJobname() { return m_Jobname.query();}
const char * CWUActionRequest::getTest() { return m_Test.query();}
const char * CWUActionRequest::getCurrentPage() { return m_CurrentPage.query();}
const char * CWUActionRequest::getPageSize() { return m_PageSize.query();}
const char * CWUActionRequest::getSortby() { return m_Sortby.query();}
bool CWUActionRequest::getDescending_isNull(){return m_Descending.is_nil();}
bool CWUActionRequest::getDescending() { return m_Descending;}
const char * CWUActionRequest::getEventServer() { return m_EventServer.query();}
const char * CWUActionRequest::getEventName() { return m_EventName.query();}
const char * CWUActionRequest::getPageFrom() { return m_PageFrom.query();}
bool CWUActionRequest::getBlockTillFinishTimer_isNull(){return m_BlockTillFinishTimer.is_nil();}
int CWUActionRequest::getBlockTillFinishTimer() { return m_BlockTillFinishTimer;}
void CWUActionRequest::setWuids(StringArray &val){ m_Wuids->kill();  CloneArray(m_Wuids.getValue(), val); }
void CWUActionRequest::setActionType(const char * val){ m_ActionType.set(val); }
void CWUActionRequest::setWUActionType(CECLWUActions val) { m_WUActionType.setValue(val); }
void CWUActionRequest::setWUActionType(const char* val) { m_WUActionType.setValue(val); }
void CWUActionRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUActionRequest::setOwner(const char * val){ m_Owner.set(val); }
void CWUActionRequest::setState(const char * val){ m_State.set(val); }
void CWUActionRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUActionRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUActionRequest::setECL(const char * val){ m_ECL.set(val); }
void CWUActionRequest::setJobname(const char * val){ m_Jobname.set(val); }
void CWUActionRequest::setTest(const char * val){ m_Test.set(val); }
void CWUActionRequest::setCurrentPage(const char * val){ m_CurrentPage.set(val); }
void CWUActionRequest::setPageSize(const char * val){ m_PageSize.set(val); }
void CWUActionRequest::setSortby(const char * val){ m_Sortby.set(val); }
void CWUActionRequest::setDescending_null(){ m_Descending.Nil(); }void CWUActionRequest::setDescending(bool val){ m_Descending=val; }
void CWUActionRequest::setEventServer(const char * val){ m_EventServer.set(val); }
void CWUActionRequest::setEventName(const char * val){ m_EventName.set(val); }
void CWUActionRequest::setPageFrom(const char * val){ m_PageFrom.set(val); }
void CWUActionRequest::setBlockTillFinishTimer_null(){ m_BlockTillFinishTimer.Nil(); }void CWUActionRequest::setBlockTillFinishTimer(int val){ m_BlockTillFinishTimer=val; }
extern "C"  IEspWUActionRequest *createWUActionRequest(const char *serv){return ((IEspWUActionRequest *)new CWUActionRequest(serv));}
extern "C"  IClientWUActionRequest *createClientWUActionRequest(const char *serv){return ((IClientWUActionRequest *)new CWUActionRequest(serv));}

//=======================================================
// class CWUActionResponse Implementation
//=======================================================

CWUActionResponse::CWUActionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUActionResponse::CWUActionResponse(const char *serviceName, const char *bc)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionResponse");
}

CWUActionResponse::CWUActionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUActionResponse::CWUActionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUActionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUActionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionResults\" type=\"tns:ArrayOfWUActionResult\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUActionResult::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUActionResult") && added.getValue("ArrayOfWUActionResult")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUActionResult\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUActionResult\" type=\"tns:WUActionResult\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUActionResult",1);
	}
	return schema;
}

void CWUActionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUActionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUActionResult"))
	{
		added.setValue("WUActionResult",1);
		CWUActionResult::getMapInfo(info,added);
	}
}

StringBuffer &CWUActionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionResults");
	form.appendf("<tr><td><b>ActionResults: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUActionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUActionResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ActionResults.marshall(rpc_resp, "ActionResults", "WUActionResult");
	}
}


void CWUActionResponse::copy(CWUActionResponse &from)
{
	m_ActionResults.copy(from.m_ActionResults);
}


void CWUActionResponse::copy(IConstWUActionResponse &ifrom)
{
	setActionResults(ifrom.getActionResults());
}


void CWUActionResponse::getAttributes(IProperties &attributes)
{
}


void CWUActionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ActionResults.toStr(ctx, buffer, "ActionResults", "WUActionResult");
	}
}


void CWUActionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUActionResponse::serializer(IEspContext* ctx, IConstWUActionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUActionResponse>");
	// field ActionResults
	{
		IArrayOf<IConstWUActionResult>& v = src.getActionResults();
		int size = v.length();
		if (size>0)
			buffer.append("<ActionResults>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUActionResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ActionResults>");
	}
	if (keepRootTag)
		buffer.append("</WUActionResponse>");
}

bool CWUActionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ActionResults.unmarshall(rpc_request, "ActionResults", basepath);
	}
	return hasValue;
}

bool CWUActionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, soapval, "ActionResults");
	return hasValue;
}

bool CWUActionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, params, attachments, "ActionResults", basepath);
	return hasValue;
}

IArrayOf<IConstWUActionResult> & CWUActionResponse::getActionResults() { return (IArrayOf<IConstWUActionResult> &) m_ActionResults; }
void CWUActionResponse::setActionResults(IArrayOf<IEspWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUActionResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUActionResponse::setActionResults(IArrayOf<IConstWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUActionResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUActionResponse *createWUActionResponse(const char *serv){return ((IEspWUActionResponse *)new CWUActionResponse(serv));}
extern "C"  IClientWUActionResponse *createClientWUActionResponse(const char *serv){return ((IClientWUActionResponse *)new CWUActionResponse(serv));}

//=======================================================
// class CWUAbortRequest Implementation
//=======================================================

CWUAbortRequest::CWUAbortRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUAbortRequest::CWUAbortRequest(const char *serviceName, const char *bc)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortRequest");
}

CWUAbortRequest::CWUAbortRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUAbortRequest::CWUAbortRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuids(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUAbortRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuids\" type=\"tns:EspStringArray\"/>\n");
		if (!context.suppressed("WUAbortRequest","BlockTillFinishTimer")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BlockTillFinishTimer\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CWUAbortRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUAbortRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUAbortRequest","BlockTillFinishTimer",1.02);
}

StringBuffer &CWUAbortRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuids");
	form.appendf("<tr><td><b>Wuids: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("WUAbortRequest","BlockTillFinishTimer")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BlockTillFinishTimer");
		form.appendf("  <tr><td><b>BlockTillFinishTimer: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUAbortRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUAbortRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuids.marshall(rpc_resp, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.marshall(rpc_resp, "BlockTillFinishTimer", "", "", "");
}


void CWUAbortRequest::copy(CWUAbortRequest &from)
{
	m_Wuids.copy(from.m_Wuids);
	m_BlockTillFinishTimer.copy(from.m_BlockTillFinishTimer);
}


void CWUAbortRequest::copy(IConstWUAbortRequest &ifrom)
{
	setWuids(ifrom.getWuids());
	setBlockTillFinishTimer(ifrom.getBlockTillFinishTimer());
}


void CWUAbortRequest::getAttributes(IProperties &attributes)
{
}


void CWUAbortRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuids.toStr(ctx, buffer, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.toStr(ctx, buffer, "BlockTillFinishTimer", "", true, "", "");
}


void CWUAbortRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUAbortRequest::serializer(IEspContext* ctx, IConstWUAbortRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUAbortRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuids
	{
		StringArray& v = src.getWuids();
		if (v.length()>0)
			buffer.append("<Wuids>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</Wuids>");
	}
	// field BlockTillFinishTimer
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		int n = src.getBlockTillFinishTimer();
		if (n)
			buffer.appendf("<BlockTillFinishTimer>%d</BlockTillFinishTimer>", n);
	}
	if (keepRootTag)
		buffer.append("</WUAbortRequest>");
}

bool CWUAbortRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(rpc_request, "Wuids", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(rpc_request, "BlockTillFinishTimer", basepath);
	return hasValue;
}

bool CWUAbortRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, soapval, "Wuids");
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, soapval, "BlockTillFinishTimer");
	return hasValue;
}

bool CWUAbortRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, params, attachments, "Wuids", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, params, attachments, "BlockTillFinishTimer", basepath);
	return hasValue;
}

StringArray & CWUAbortRequest::getWuids() { return (StringArray &) m_Wuids; }
int CWUAbortRequest::getBlockTillFinishTimer() { return m_BlockTillFinishTimer;}
void CWUAbortRequest::setWuids(StringArray &val){ m_Wuids->kill();  CloneArray(m_Wuids.getValue(), val); }
void CWUAbortRequest::setBlockTillFinishTimer(int val){ m_BlockTillFinishTimer=val; }
extern "C"  IEspWUAbortRequest *createWUAbortRequest(const char *serv){return ((IEspWUAbortRequest *)new CWUAbortRequest(serv));}
extern "C"  IClientWUAbortRequest *createClientWUAbortRequest(const char *serv){return ((IClientWUAbortRequest *)new CWUAbortRequest(serv));}

//=======================================================
// class CWUAbortResponse Implementation
//=======================================================

CWUAbortResponse::CWUAbortResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUAbortResponse::CWUAbortResponse(const char *serviceName, const char *bc)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortResponse");
}

CWUAbortResponse::CWUAbortResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUAbortResponse::CWUAbortResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAbortResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUAbortResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionResults\" type=\"tns:ArrayOfWUActionResult\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUActionResult::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUActionResult") && added.getValue("ArrayOfWUActionResult")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUActionResult\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUActionResult\" type=\"tns:WUActionResult\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUActionResult",1);
	}
	return schema;
}

void CWUAbortResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUAbortResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUActionResult"))
	{
		added.setValue("WUActionResult",1);
		CWUActionResult::getMapInfo(info,added);
	}
}

StringBuffer &CWUAbortResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionResults");
	form.appendf("<tr><td><b>ActionResults: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUAbortResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUAbortResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ActionResults.marshall(rpc_resp, "ActionResults", "WUActionResult");
	}
}


void CWUAbortResponse::copy(CWUAbortResponse &from)
{
	m_ActionResults.copy(from.m_ActionResults);
}


void CWUAbortResponse::copy(IConstWUAbortResponse &ifrom)
{
	setActionResults(ifrom.getActionResults());
}


void CWUAbortResponse::getAttributes(IProperties &attributes)
{
}


void CWUAbortResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ActionResults.toStr(ctx, buffer, "ActionResults", "WUActionResult");
	}
}


void CWUAbortResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUAbortResponse::serializer(IEspContext* ctx, IConstWUAbortResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUAbortResponse>");
	// field ActionResults
	{
		IArrayOf<IConstWUActionResult>& v = src.getActionResults();
		int size = v.length();
		if (size>0)
			buffer.append("<ActionResults>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUActionResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ActionResults>");
	}
	if (keepRootTag)
		buffer.append("</WUAbortResponse>");
}

bool CWUAbortResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ActionResults.unmarshall(rpc_request, "ActionResults", basepath);
	}
	return hasValue;
}

bool CWUAbortResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, soapval, "ActionResults");
	return hasValue;
}

bool CWUAbortResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, params, attachments, "ActionResults", basepath);
	return hasValue;
}

IArrayOf<IConstWUActionResult> & CWUAbortResponse::getActionResults() { return (IArrayOf<IConstWUActionResult> &) m_ActionResults; }
void CWUAbortResponse::setActionResults(IArrayOf<IEspWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUActionResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUAbortResponse::setActionResults(IArrayOf<IConstWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUActionResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUAbortResponse *createWUAbortResponse(const char *serv){return ((IEspWUAbortResponse *)new CWUAbortResponse(serv));}
extern "C"  IClientWUAbortResponse *createClientWUAbortResponse(const char *serv){return ((IClientWUAbortResponse *)new CWUAbortResponse(serv));}

//=======================================================
// class CWUProtectRequest Implementation
//=======================================================

CWUProtectRequest::CWUProtectRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuids(nilIgnore),m_Protect(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUProtectRequest::CWUProtectRequest(const char *serviceName, const char *bc)
	: m_Wuids(nilIgnore),m_Protect(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectRequest");
}

CWUProtectRequest::CWUProtectRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuids(nilIgnore),m_Protect(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUProtectRequest::CWUProtectRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuids(nilIgnore),m_Protect(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUProtectRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuids\" type=\"tns:EspStringArray\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"Protect\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CWUProtectRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUProtectRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUProtectRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuids");
	form.appendf("<tr><td><b>Wuids: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Protect");
	
	form.appendf("  <tr><td><b>Protect? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUProtectRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUProtectRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuids.marshall(rpc_resp, "Wuids", "Item");
	m_Protect.marshall(rpc_resp, "Protect", "", "", "");
}


void CWUProtectRequest::copy(CWUProtectRequest &from)
{
	m_Wuids.copy(from.m_Wuids);
	m_Protect.copy(from.m_Protect);
}


void CWUProtectRequest::copy(IConstWUProtectRequest &ifrom)
{
	setWuids(ifrom.getWuids());
	setProtect(ifrom.getProtect());
}


void CWUProtectRequest::getAttributes(IProperties &attributes)
{
}


void CWUProtectRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuids.toStr(ctx, buffer, "Wuids", "Item");
	m_Protect.toStr(ctx, buffer, "Protect", "", true, "", "");
}


void CWUProtectRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUProtectRequest::serializer(IEspContext* ctx, IConstWUProtectRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUProtectRequest>");
	// field Wuids
	{
		StringArray& v = src.getWuids();
		if (v.length()>0)
			buffer.append("<Wuids>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</Wuids>");
	}
	// field Protect
	{
		bool b = src.getProtect();
		if (b)
			buffer.appendf("<Protect>1</Protect>");
	}
	if (keepRootTag)
		buffer.append("</WUProtectRequest>");
}

bool CWUProtectRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(rpc_request, "Wuids", basepath);
	hasValue |= m_Protect.unmarshall(rpc_request, "Protect", basepath);
	return hasValue;
}

bool CWUProtectRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, soapval, "Wuids");
	hasValue |= m_Protect.unmarshall(ctx, soapval, "Protect");
	return hasValue;
}

bool CWUProtectRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, params, attachments, "Wuids", basepath);
	hasValue |= m_Protect.unmarshall(ctx, params, attachments, "Protect", basepath);
	return hasValue;
}

StringArray & CWUProtectRequest::getWuids() { return (StringArray &) m_Wuids; }
bool CWUProtectRequest::getProtect() { return m_Protect;}
void CWUProtectRequest::setWuids(StringArray &val){ m_Wuids->kill();  CloneArray(m_Wuids.getValue(), val); }
void CWUProtectRequest::setProtect(bool val){ m_Protect=val; }
extern "C"  IEspWUProtectRequest *createWUProtectRequest(const char *serv){return ((IEspWUProtectRequest *)new CWUProtectRequest(serv));}
extern "C"  IClientWUProtectRequest *createClientWUProtectRequest(const char *serv){return ((IClientWUProtectRequest *)new CWUProtectRequest(serv));}

//=======================================================
// class CWUProtectResponse Implementation
//=======================================================

CWUProtectResponse::CWUProtectResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUProtectResponse::CWUProtectResponse(const char *serviceName, const char *bc)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectResponse");
}

CWUProtectResponse::CWUProtectResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUProtectResponse::CWUProtectResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProtectResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUProtectResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionResults\" type=\"tns:ArrayOfWUActionResult\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUActionResult::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUActionResult") && added.getValue("ArrayOfWUActionResult")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUActionResult\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUActionResult\" type=\"tns:WUActionResult\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUActionResult",1);
	}
	return schema;
}

void CWUProtectResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUProtectResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUActionResult"))
	{
		added.setValue("WUActionResult",1);
		CWUActionResult::getMapInfo(info,added);
	}
}

StringBuffer &CWUProtectResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionResults");
	form.appendf("<tr><td><b>ActionResults: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUProtectResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUProtectResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ActionResults.marshall(rpc_resp, "ActionResults", "WUActionResult");
	}
}


void CWUProtectResponse::copy(CWUProtectResponse &from)
{
	m_ActionResults.copy(from.m_ActionResults);
}


void CWUProtectResponse::copy(IConstWUProtectResponse &ifrom)
{
	setActionResults(ifrom.getActionResults());
}


void CWUProtectResponse::getAttributes(IProperties &attributes)
{
}


void CWUProtectResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ActionResults.toStr(ctx, buffer, "ActionResults", "WUActionResult");
	}
}


void CWUProtectResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUProtectResponse::serializer(IEspContext* ctx, IConstWUProtectResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUProtectResponse>");
	// field ActionResults
	{
		IArrayOf<IConstWUActionResult>& v = src.getActionResults();
		int size = v.length();
		if (size>0)
			buffer.append("<ActionResults>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUActionResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ActionResults>");
	}
	if (keepRootTag)
		buffer.append("</WUProtectResponse>");
}

bool CWUProtectResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ActionResults.unmarshall(rpc_request, "ActionResults", basepath);
	}
	return hasValue;
}

bool CWUProtectResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, soapval, "ActionResults");
	return hasValue;
}

bool CWUProtectResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, params, attachments, "ActionResults", basepath);
	return hasValue;
}

IArrayOf<IConstWUActionResult> & CWUProtectResponse::getActionResults() { return (IArrayOf<IConstWUActionResult> &) m_ActionResults; }
void CWUProtectResponse::setActionResults(IArrayOf<IEspWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUActionResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUProtectResponse::setActionResults(IArrayOf<IConstWUActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUActionResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUProtectResponse *createWUProtectResponse(const char *serv){return ((IEspWUProtectResponse *)new CWUProtectResponse(serv));}
extern "C"  IClientWUProtectResponse *createClientWUProtectResponse(const char *serv){return ((IClientWUProtectResponse *)new CWUProtectResponse(serv));}

//=======================================================
// class CWUResubmitRequest Implementation
//=======================================================

CWUResubmitRequest::CWUResubmitRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuids(nilIgnore),m_Recompile(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_ResetWorkflow(nilIgnore),m_CloneWorkunit(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResubmitRequest::CWUResubmitRequest(const char *serviceName, const char *bc)
	: m_Wuids(nilIgnore),m_Recompile(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_ResetWorkflow(nilIgnore),m_CloneWorkunit(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitRequest");
}

CWUResubmitRequest::CWUResubmitRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuids(nilIgnore),m_Recompile(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_ResetWorkflow(nilIgnore),m_CloneWorkunit(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResubmitRequest::CWUResubmitRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuids(nilIgnore),m_Recompile(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_ResetWorkflow(nilIgnore),m_CloneWorkunit(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResubmitRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuids\" type=\"tns:EspStringArray\"/>\n");
		if (!context.suppressed("WUResubmitRequest","Recompile")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Recompile\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUResubmitRequest","BlockTillFinishTimer")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BlockTillFinishTimer\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResetWorkflow\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CloneWorkunit\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CWUResubmitRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResubmitRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMaxVersion("WUResubmitRequest","Recompile",1.3);
	info.addMinVersion("WUResubmitRequest","BlockTillFinishTimer",1.02);
}

StringBuffer &CWUResubmitRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuids");
	form.appendf("<tr><td><b>Wuids: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("WUResubmitRequest","Recompile")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Recompile");
		
	form.appendf("  <tr><td><b>Recompile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUResubmitRequest","BlockTillFinishTimer")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BlockTillFinishTimer");
		form.appendf("  <tr><td><b>BlockTillFinishTimer: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ResetWorkflow");
	
	form.appendf("  <tr><td><b>ResetWorkflow? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CloneWorkunit");
	
	form.appendf("  <tr><td><b>CloneWorkunit? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResubmitRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResubmitRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuids.marshall(rpc_resp, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_Recompile.marshall(rpc_resp, "Recompile", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.marshall(rpc_resp, "BlockTillFinishTimer", "", "", "");
	m_ResetWorkflow.marshall(rpc_resp, "ResetWorkflow", "", "", "");
	m_CloneWorkunit.marshall(rpc_resp, "CloneWorkunit", "", "", "");
}


void CWUResubmitRequest::copy(CWUResubmitRequest &from)
{
	m_Wuids.copy(from.m_Wuids);
	m_Recompile.copy(from.m_Recompile);
	m_BlockTillFinishTimer.copy(from.m_BlockTillFinishTimer);
	m_ResetWorkflow.copy(from.m_ResetWorkflow);
	m_CloneWorkunit.copy(from.m_CloneWorkunit);
}


void CWUResubmitRequest::copy(IConstWUResubmitRequest &ifrom)
{
	setWuids(ifrom.getWuids());
	setRecompile(ifrom.getRecompile());
	setBlockTillFinishTimer(ifrom.getBlockTillFinishTimer());
	setResetWorkflow(ifrom.getResetWorkflow());
	setCloneWorkunit(ifrom.getCloneWorkunit());
}


void CWUResubmitRequest::getAttributes(IProperties &attributes)
{
}


void CWUResubmitRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuids.toStr(ctx, buffer, "Wuids", "Item");
	if ((clientVer==-1.0 || clientVer<=1.3))
		m_Recompile.toStr(ctx, buffer, "Recompile", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.toStr(ctx, buffer, "BlockTillFinishTimer", "", true, "", "");
	m_ResetWorkflow.toStr(ctx, buffer, "ResetWorkflow", "", true, "", "");
	m_CloneWorkunit.toStr(ctx, buffer, "CloneWorkunit", "", true, "", "");
}


void CWUResubmitRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResubmitRequest::serializer(IEspContext* ctx, IConstWUResubmitRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResubmitRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuids
	{
		StringArray& v = src.getWuids();
		if (v.length()>0)
			buffer.append("<Wuids>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</Wuids>");
	}
	// field Recompile
	if ((clientVer==-1.0 || clientVer<=1.3))
	{
		bool b = src.getRecompile();
		if (b)
			buffer.appendf("<Recompile>1</Recompile>");
	}
	// field BlockTillFinishTimer
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		int n = src.getBlockTillFinishTimer();
		if (n)
			buffer.appendf("<BlockTillFinishTimer>%d</BlockTillFinishTimer>", n);
	}
	// field ResetWorkflow
	{
		bool b = src.getResetWorkflow();
		if (b)
			buffer.appendf("<ResetWorkflow>1</ResetWorkflow>");
	}
	// field CloneWorkunit
	{
		bool b = src.getCloneWorkunit();
		if (b)
			buffer.appendf("<CloneWorkunit>1</CloneWorkunit>");
	}
	if (keepRootTag)
		buffer.append("</WUResubmitRequest>");
}

bool CWUResubmitRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(rpc_request, "Wuids", basepath);
	hasValue |= m_Recompile.unmarshall(rpc_request, "Recompile", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(rpc_request, "BlockTillFinishTimer", basepath);
	hasValue |= m_ResetWorkflow.unmarshall(rpc_request, "ResetWorkflow", basepath);
	hasValue |= m_CloneWorkunit.unmarshall(rpc_request, "CloneWorkunit", basepath);
	return hasValue;
}

bool CWUResubmitRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, soapval, "Wuids");
	hasValue |= m_Recompile.unmarshall(ctx, soapval, "Recompile");
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, soapval, "BlockTillFinishTimer");
	hasValue |= m_ResetWorkflow.unmarshall(ctx, soapval, "ResetWorkflow");
	hasValue |= m_CloneWorkunit.unmarshall(ctx, soapval, "CloneWorkunit");
	return hasValue;
}

bool CWUResubmitRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuids.unmarshall(ctx, params, attachments, "Wuids", basepath);
	hasValue |= m_Recompile.unmarshall(ctx, params, attachments, "Recompile", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, params, attachments, "BlockTillFinishTimer", basepath);
	hasValue |= m_ResetWorkflow.unmarshall(ctx, params, attachments, "ResetWorkflow", basepath);
	hasValue |= m_CloneWorkunit.unmarshall(ctx, params, attachments, "CloneWorkunit", basepath);
	return hasValue;
}

StringArray & CWUResubmitRequest::getWuids() { return (StringArray &) m_Wuids; }
bool CWUResubmitRequest::getRecompile() { return m_Recompile;}
int CWUResubmitRequest::getBlockTillFinishTimer() { return m_BlockTillFinishTimer;}
bool CWUResubmitRequest::getResetWorkflow() { return m_ResetWorkflow;}
bool CWUResubmitRequest::getCloneWorkunit() { return m_CloneWorkunit;}
void CWUResubmitRequest::setWuids(StringArray &val){ m_Wuids->kill();  CloneArray(m_Wuids.getValue(), val); }
void CWUResubmitRequest::setRecompile(bool val){ m_Recompile=val; }
void CWUResubmitRequest::setBlockTillFinishTimer(int val){ m_BlockTillFinishTimer=val; }
void CWUResubmitRequest::setResetWorkflow(bool val){ m_ResetWorkflow=val; }
void CWUResubmitRequest::setCloneWorkunit(bool val){ m_CloneWorkunit=val; }
extern "C"  IEspWUResubmitRequest *createWUResubmitRequest(const char *serv){return ((IEspWUResubmitRequest *)new CWUResubmitRequest(serv));}
extern "C"  IClientWUResubmitRequest *createClientWUResubmitRequest(const char *serv){return ((IClientWUResubmitRequest *)new CWUResubmitRequest(serv));}

//=======================================================
// class CWUResubmitResponse Implementation
//=======================================================

CWUResubmitResponse::CWUResubmitResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_WUs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResubmitResponse::CWUResubmitResponse(const char *serviceName, const char *bc)
	: m_WUs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitResponse");
}

CWUResubmitResponse::CWUResubmitResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResubmitResponse::CWUResubmitResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResubmitResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResubmitResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!context.suppressed("WUResubmitResponse","WUs")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WUs\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WU\" type=\"tns:ResubmittedWU\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUResubmitResponse","WUs"))
			CResubmittedWU::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUResubmitResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResubmitResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUResubmitResponse","WUs",1.4);
	if (!added.getValue("ResubmittedWU"))
	{
		added.setValue("ResubmittedWU",1);
		CResubmittedWU::getMapInfo(info,added);
	}
}

StringBuffer &CWUResubmitResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("WUResubmitResponse","WUs")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WUs");
		form.appendf("<tr><td><b>WUs: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResubmitResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResubmitResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_WUs.marshall(rpc_resp, "WUs", "WU");
	}
}


void CWUResubmitResponse::copy(CWUResubmitResponse &from)
{
	m_WUs.copy(from.m_WUs);
}


void CWUResubmitResponse::copy(IConstWUResubmitResponse &ifrom)
{
	setWUs(ifrom.getWUs());
}


void CWUResubmitResponse::getAttributes(IProperties &attributes)
{
}


void CWUResubmitResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		if ((clientVer==-1.0 || clientVer>=1.4))
			m_WUs.toStr(ctx, buffer, "WUs", "WU");
	}
}


void CWUResubmitResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResubmitResponse::serializer(IEspContext* ctx, IConstWUResubmitResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResubmitResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field WUs
	if ((clientVer==-1.0 || clientVer>=1.4))
	{
		IArrayOf<IConstResubmittedWU>& v = src.getWUs();
		int size = v.length();
		if (size>0)
			buffer.append("<WUs>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<WU>");
			CResubmittedWU::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</WU>");
		}
		if (size>0)
			buffer.append("</WUs>");
	}
	if (keepRootTag)
		buffer.append("</WUResubmitResponse>");
}

bool CWUResubmitResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_WUs.unmarshall(rpc_request, "WUs", basepath);
	}
	return hasValue;
}

bool CWUResubmitResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUs.unmarshall(ctx, soapval, "WUs");
	return hasValue;
}

bool CWUResubmitResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUs.unmarshall(ctx, params, attachments, "WUs", basepath);
	return hasValue;
}

IArrayOf<IConstResubmittedWU> & CWUResubmitResponse::getWUs() { return (IArrayOf<IConstResubmittedWU> &) m_WUs; }
void CWUResubmitResponse::setWUs(IArrayOf<IEspResubmittedWU> &val)
{
	m_WUs->kill();
	IArrayOf<IConstResubmittedWU> &target = m_WUs.getValue();
	ForEachItemIn(idx, val)
	{
		IEspResubmittedWU &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUResubmitResponse::setWUs(IArrayOf<IConstResubmittedWU> &val)
{
	m_WUs->kill();
	IArrayOf<IConstResubmittedWU> &target = m_WUs.getValue();
	ForEachItemIn(idx, val)
	{
		IConstResubmittedWU &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUResubmitResponse *createWUResubmitResponse(const char *serv){return ((IEspWUResubmitResponse *)new CWUResubmitResponse(serv));}
extern "C"  IClientWUResubmitResponse *createClientWUResubmitResponse(const char *serv){return ((IClientWUResubmitResponse *)new CWUResubmitResponse(serv));}

//=======================================================
// class CWURecreateQueryRequest Implementation
//=======================================================

CWURecreateQueryRequest::CWURecreateQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_DebugValues(nilRemove),m_DestTarget(nilRemove),m_Republish(0, nilRemove,false),m_Activate(nilRemove),m_NoReload(0, nilRemove,false),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_RemoteDali(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false),m_Wait(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWURecreateQueryRequest::CWURecreateQueryRequest(const char *serviceName, const char *bc)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_DebugValues(nilRemove),m_DestTarget(nilRemove),m_Republish(0, nilRemove,false),m_Activate(nilRemove),m_NoReload(0, nilRemove,false),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_RemoteDali(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false),m_Wait(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryRequest");
}

CWURecreateQueryRequest::CWURecreateQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_DebugValues(nilRemove),m_DestTarget(nilRemove),m_Republish(0, nilRemove,false),m_Activate(nilRemove),m_NoReload(0, nilRemove,false),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_RemoteDali(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false),m_Wait(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWURecreateQueryRequest::CWURecreateQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_DebugValues(nilRemove),m_DestTarget(nilRemove),m_Republish(0, nilRemove,false),m_Activate(nilRemove),m_NoReload(0, nilRemove,false),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_RemoteDali(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false),m_Wait(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWURecreateQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValues\" type=\"tns:ArrayOfNamedValue\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestTarget\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Republish\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Activate\" type=\"tns:WUQueryActivationMode\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoReload\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MemoryLimit\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WarnTimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RemoteDali\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"DontCopyFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourceProcess\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllowForeignFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateDfs\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateSuperFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateCloneFrom\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AppendCluster\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeFileErrors\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"Wait\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CNamedValue::getXsdDefinition(context, request, schema, added);
		CXWUQueryActivationMode::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("NamedValue") && added.getValue("ArrayOfNamedValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfNamedValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"NamedValue\" type=\"tns:NamedValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfNamedValue",1);
	}
	return schema;
}

void CWURecreateQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWURecreateQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("NamedValue"))
	{
		added.setValue("NamedValue",1);
		CNamedValue::getMapInfo(info,added);
	}
	if (!added.getValue("WUQueryActivationMode"))
	{
		added.setValue("WUQueryActivationMode",1);
		CXWUQueryActivationMode::getMapInfo(info,added);
	}
}

StringBuffer &CWURecreateQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DebugValues");
	form.appendf("<tr><td><b>DebugValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestTarget");
	form.appendf("  <tr><td><b>DestTarget: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Republish");
	
	form.appendf("  <tr><td><b>Republish? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Activate");
	form.appendf("  <tr><td><b>Activate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoReload");
	
	form.appendf("  <tr><td><b>NoReload? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MemoryLimit");
	form.appendf("  <tr><td><b>MemoryLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimit");
	form.appendf("  <tr><td><b>TimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimit");
	form.appendf("  <tr><td><b>WarnTimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Priority");
	form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RemoteDali");
	form.appendf("  <tr><td><b>RemoteDali: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DontCopyFiles");
	
	form.appendf("  <tr><td><b>DontCopyFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourceProcess");
	form.appendf("  <tr><td><b>SourceProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllowForeignFiles");
	
	form.appendf("  <tr><td><b>AllowForeignFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateDfs");
	
	form.appendf("  <tr><td><b>UpdateDfs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateSuperFiles");
	
	form.appendf("  <tr><td><b>UpdateSuperFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateCloneFrom");
	
	form.appendf("  <tr><td><b>UpdateCloneFrom? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AppendCluster");
	
	form.appendf("  <tr><td><b>AppendCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeFileErrors");
	
	form.appendf("  <tr><td><b>IncludeFileErrors? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Wait");
	form.appendf("  <tr><td><b>Wait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWURecreateQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWURecreateQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	m_DebugValues.marshall(rpc_resp, "DebugValues", "NamedValue");
	m_DestTarget.marshall(rpc_resp, "DestTarget", "", "", "");
	m_Republish.marshall(rpc_resp, "Republish", "", "", "");
	m_Activate.marshall(rpc_resp, "Activate", "", "", "");
	m_NoReload.marshall(rpc_resp, "NoReload", "", "", "");
	m_MemoryLimit.marshall(rpc_resp, "MemoryLimit", "", "", "");
	m_TimeLimit.marshall(rpc_resp, "TimeLimit", "", "", "");
	m_WarnTimeLimit.marshall(rpc_resp, "WarnTimeLimit", "", "", "");
	m_Priority.marshall(rpc_resp, "Priority", "", "", "");
	m_Comment.marshall(rpc_resp, "Comment", "", "", "");
	m_RemoteDali.marshall(rpc_resp, "RemoteDali", "", "", "");
	m_DontCopyFiles.marshall(rpc_resp, "DontCopyFiles", "", "", "");
	m_SourceProcess.marshall(rpc_resp, "SourceProcess", "", "", "");
	m_AllowForeignFiles.marshall(rpc_resp, "AllowForeignFiles", "", "", "");
	m_UpdateDfs.marshall(rpc_resp, "UpdateDfs", "", "", "");
	m_UpdateSuperFiles.marshall(rpc_resp, "UpdateSuperFiles", "", "", "");
	m_UpdateCloneFrom.marshall(rpc_resp, "UpdateCloneFrom", "", "", "");
	m_AppendCluster.marshall(rpc_resp, "AppendCluster", "", "", "");
	m_IncludeFileErrors.marshall(rpc_resp, "IncludeFileErrors", "", "", "");
	m_Wait.marshall(rpc_resp, "Wait", "", "", "");
}


void CWURecreateQueryRequest::copy(CWURecreateQueryRequest &from)
{
	m_Target.copy(from.m_Target);
	m_QueryId.copy(from.m_QueryId);
	m_DebugValues.copy(from.m_DebugValues);
	m_DestTarget.copy(from.m_DestTarget);
	m_Republish.copy(from.m_Republish);
	m_Activate.copy(from.m_Activate);
	m_NoReload.copy(from.m_NoReload);
	m_MemoryLimit.copy(from.m_MemoryLimit);
	m_TimeLimit.copy(from.m_TimeLimit);
	m_WarnTimeLimit.copy(from.m_WarnTimeLimit);
	m_Priority.copy(from.m_Priority);
	m_Comment.copy(from.m_Comment);
	m_RemoteDali.copy(from.m_RemoteDali);
	m_DontCopyFiles.copy(from.m_DontCopyFiles);
	m_SourceProcess.copy(from.m_SourceProcess);
	m_AllowForeignFiles.copy(from.m_AllowForeignFiles);
	m_UpdateDfs.copy(from.m_UpdateDfs);
	m_UpdateSuperFiles.copy(from.m_UpdateSuperFiles);
	m_UpdateCloneFrom.copy(from.m_UpdateCloneFrom);
	m_AppendCluster.copy(from.m_AppendCluster);
	m_IncludeFileErrors.copy(from.m_IncludeFileErrors);
	m_Wait.copy(from.m_Wait);
}


void CWURecreateQueryRequest::copy(IConstWURecreateQueryRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setQueryId(ifrom.getQueryId());
	setDebugValues(ifrom.getDebugValues());
	setDestTarget(ifrom.getDestTarget());
	setRepublish(ifrom.getRepublish());
	setActivate(ifrom.getActivate());
	setNoReload(ifrom.getNoReload());
	setMemoryLimit(ifrom.getMemoryLimit());
	setTimeLimit(ifrom.getTimeLimit());
	setWarnTimeLimit(ifrom.getWarnTimeLimit());
	setPriority(ifrom.getPriority());
	setComment(ifrom.getComment());
	setRemoteDali(ifrom.getRemoteDali());
	setDontCopyFiles(ifrom.getDontCopyFiles());
	setSourceProcess(ifrom.getSourceProcess());
	setAllowForeignFiles(ifrom.getAllowForeignFiles());
	setUpdateDfs(ifrom.getUpdateDfs());
	setUpdateSuperFiles(ifrom.getUpdateSuperFiles());
	setUpdateCloneFrom(ifrom.getUpdateCloneFrom());
	setAppendCluster(ifrom.getAppendCluster());
	setIncludeFileErrors(ifrom.getIncludeFileErrors());
	setWait(ifrom.getWait());
}


void CWURecreateQueryRequest::getAttributes(IProperties &attributes)
{
}


void CWURecreateQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	m_DebugValues.toStr(ctx, buffer, "DebugValues", "NamedValue");
	m_DestTarget.toStr(ctx, buffer, "DestTarget", "", true, "", "");
	m_Republish.toStr(ctx, buffer, "Republish", "", true, "", "");
	m_Activate.toStr(ctx, buffer, "Activate", "", true, "", "");
	m_NoReload.toStr(ctx, buffer, "NoReload", "", true, "", "");
	m_MemoryLimit.toStr(ctx, buffer, "MemoryLimit", "", true, "", "");
	m_TimeLimit.toStr(ctx, buffer, "TimeLimit", "", true, "", "");
	m_WarnTimeLimit.toStr(ctx, buffer, "WarnTimeLimit", "", true, "", "");
	m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
	m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
	m_RemoteDali.toStr(ctx, buffer, "RemoteDali", "", true, "", "");
	m_DontCopyFiles.toStr(ctx, buffer, "DontCopyFiles", "", true, "", "");
	m_SourceProcess.toStr(ctx, buffer, "SourceProcess", "", true, "", "");
	m_AllowForeignFiles.toStr(ctx, buffer, "AllowForeignFiles", "", true, "", "");
	m_UpdateDfs.toStr(ctx, buffer, "UpdateDfs", "", true, "", "");
	m_UpdateSuperFiles.toStr(ctx, buffer, "UpdateSuperFiles", "", true, "", "");
	m_UpdateCloneFrom.toStr(ctx, buffer, "UpdateCloneFrom", "", true, "", "");
	m_AppendCluster.toStr(ctx, buffer, "AppendCluster", "", true, "", "");
	m_IncludeFileErrors.toStr(ctx, buffer, "IncludeFileErrors", "", true, "", "");
	m_Wait.toStr(ctx, buffer, "Wait", "", true, "", "");
}


void CWURecreateQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWURecreateQueryRequest::serializer(IEspContext* ctx, IConstWURecreateQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WURecreateQueryRequest>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field DebugValues
	{
		IArrayOf<IConstNamedValue>& v = src.getDebugValues();
		int size = v.length();
		if (size>0)
			buffer.append("<DebugValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CNamedValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DebugValues>");
	}
	// field DestTarget
	{
		const char* s = src.getDestTarget();
		if (s && *s)
		{
			buffer.append("<DestTarget>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestTarget>");
		}
	}
	// field Republish
	{
		bool b = src.getRepublish();
		if (b)
			buffer.appendf("<Republish>1</Republish>");
	}
	// field Activate
	{
		const char* s = src.getActivateAsString();
		buffer.append("<Activate>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Activate>");
	}
	// field NoReload
	{
		bool b = src.getNoReload();
		if (b)
			buffer.appendf("<NoReload>1</NoReload>");
	}
	// field MemoryLimit
	{
		const char* s = src.getMemoryLimit();
		if (s && *s)
		{
			buffer.append("<MemoryLimit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MemoryLimit>");
		}
	}
	// field TimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimit
		buffer.append("<TimeLimit>");
		buffer.append(src.getTimeLimit());
		buffer.append("</TimeLimit>");
	}
	// field WarnTimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimit
		buffer.append("<WarnTimeLimit>");
		buffer.append(src.getWarnTimeLimit());
		buffer.append("</WarnTimeLimit>");
	}
	// field Priority
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<Priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Priority>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	// field RemoteDali
	{
		const char* s = src.getRemoteDali();
		if (s && *s)
		{
			buffer.append("<RemoteDali>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RemoteDali>");
		}
	}
	// field DontCopyFiles
	{
		bool b = src.getDontCopyFiles();
		if (b)
			buffer.appendf("<DontCopyFiles>1</DontCopyFiles>");
	}
	// field SourceProcess
	{
		const char* s = src.getSourceProcess();
		if (s && *s)
		{
			buffer.append("<SourceProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourceProcess>");
		}
	}
	// field AllowForeignFiles
	{
		bool b = src.getAllowForeignFiles();
		if (b)
			buffer.appendf("<AllowForeignFiles>1</AllowForeignFiles>");
	}
	// field UpdateDfs
	{
		bool b = src.getUpdateDfs();
		if (b)
			buffer.appendf("<UpdateDfs>1</UpdateDfs>");
	}
	// field UpdateSuperFiles
	{
		bool b = src.getUpdateSuperFiles();
		if (b)
			buffer.appendf("<UpdateSuperFiles>1</UpdateSuperFiles>");
	}
	// field UpdateCloneFrom
	{
		bool b = src.getUpdateCloneFrom();
		if (b)
			buffer.appendf("<UpdateCloneFrom>1</UpdateCloneFrom>");
	}
	// field AppendCluster
	{
		bool b = src.getAppendCluster();
		if (b)
			buffer.appendf("<AppendCluster>1</AppendCluster>");
	}
	// field IncludeFileErrors
	{
		bool b = src.getIncludeFileErrors();
		if (b)
			buffer.appendf("<IncludeFileErrors>1</IncludeFileErrors>");
	}
	// field Wait
	{
		int n = src.getWait();
		if (n)
			buffer.appendf("<Wait>%d</Wait>", n);
	}
	if (keepRootTag)
		buffer.append("</WURecreateQueryRequest>");
}

bool CWURecreateQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_DebugValues.unmarshall(rpc_request, "DebugValues", basepath);
	hasValue |= m_DestTarget.unmarshall(rpc_request, "DestTarget", basepath);
	hasValue |= m_Republish.unmarshall(rpc_request, "Republish", basepath);
	hasValue |= m_Activate.unmarshall(rpc_request, "Activate", basepath);
	hasValue |= m_NoReload.unmarshall(rpc_request, "NoReload", basepath);
	hasValue |= m_MemoryLimit.unmarshall(rpc_request, "MemoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(rpc_request, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(rpc_request, "WarnTimeLimit", basepath);
	hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
	hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
	hasValue |= m_RemoteDali.unmarshall(rpc_request, "RemoteDali", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(rpc_request, "DontCopyFiles", basepath);
	hasValue |= m_SourceProcess.unmarshall(rpc_request, "SourceProcess", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(rpc_request, "AllowForeignFiles", basepath);
	hasValue |= m_UpdateDfs.unmarshall(rpc_request, "UpdateDfs", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(rpc_request, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(rpc_request, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(rpc_request, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(rpc_request, "IncludeFileErrors", basepath);
	hasValue |= m_Wait.unmarshall(rpc_request, "Wait", basepath);
	return hasValue;
}

bool CWURecreateQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_DebugValues.unmarshall(ctx, soapval, "DebugValues");
	hasValue |= m_DestTarget.unmarshall(ctx, soapval, "DestTarget");
	hasValue |= m_Republish.unmarshall(ctx, soapval, "Republish");
	hasValue |= m_Activate.unmarshall(ctx, soapval, "Activate");
	hasValue |= m_NoReload.unmarshall(ctx, soapval, "NoReload");
	hasValue |= m_MemoryLimit.unmarshall(ctx, soapval, "MemoryLimit");
	hasValue |= m_TimeLimit.unmarshall(ctx, soapval, "TimeLimit");
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, soapval, "WarnTimeLimit");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	hasValue |= m_RemoteDali.unmarshall(ctx, soapval, "RemoteDali");
	hasValue |= m_DontCopyFiles.unmarshall(ctx, soapval, "DontCopyFiles");
	hasValue |= m_SourceProcess.unmarshall(ctx, soapval, "SourceProcess");
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, soapval, "AllowForeignFiles");
	hasValue |= m_UpdateDfs.unmarshall(ctx, soapval, "UpdateDfs");
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, soapval, "UpdateSuperFiles");
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, soapval, "UpdateCloneFrom");
	hasValue |= m_AppendCluster.unmarshall(ctx, soapval, "AppendCluster");
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, soapval, "IncludeFileErrors");
	hasValue |= m_Wait.unmarshall(ctx, soapval, "Wait");
	return hasValue;
}

bool CWURecreateQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_DebugValues.unmarshall(ctx, params, attachments, "DebugValues", basepath);
	hasValue |= m_DestTarget.unmarshall(ctx, params, attachments, "DestTarget", basepath);
	hasValue |= m_Republish.unmarshall(ctx, params, attachments, "Republish", basepath);
	hasValue |= m_Activate.unmarshall(ctx, params, attachments, "Activate", basepath);
	hasValue |= m_NoReload.unmarshall(ctx, params, attachments, "NoReload", basepath);
	hasValue |= m_MemoryLimit.unmarshall(ctx, params, attachments, "MemoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(ctx, params, attachments, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, params, attachments, "WarnTimeLimit", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	hasValue |= m_RemoteDali.unmarshall(ctx, params, attachments, "RemoteDali", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(ctx, params, attachments, "DontCopyFiles", basepath);
	hasValue |= m_SourceProcess.unmarshall(ctx, params, attachments, "SourceProcess", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, params, attachments, "AllowForeignFiles", basepath);
	hasValue |= m_UpdateDfs.unmarshall(ctx, params, attachments, "UpdateDfs", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, params, attachments, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, params, attachments, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(ctx, params, attachments, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, params, attachments, "IncludeFileErrors", basepath);
	hasValue |= m_Wait.unmarshall(ctx, params, attachments, "Wait", basepath);
	return hasValue;
}

const char * CWURecreateQueryRequest::getTarget() { return m_Target.query();}
const char * CWURecreateQueryRequest::getQueryId() { return m_QueryId.query();}
IArrayOf<IConstNamedValue> & CWURecreateQueryRequest::getDebugValues() { return (IArrayOf<IConstNamedValue> &) m_DebugValues; }
const char * CWURecreateQueryRequest::getDestTarget() { return m_DestTarget.query();}
bool CWURecreateQueryRequest::getRepublish_isNull(){return m_Republish.is_nil();}
bool CWURecreateQueryRequest::getRepublish() { return m_Republish;}
CWUQueryActivationMode CWURecreateQueryRequest::getActivate() { return m_Activate.getValue(); }
const char* CWURecreateQueryRequest::getActivateAsString() {  return (const char*)m_Activate; }
bool CWURecreateQueryRequest::getNoReload_isNull(){return m_NoReload.is_nil();}
bool CWURecreateQueryRequest::getNoReload() { return m_NoReload;}
const char * CWURecreateQueryRequest::getMemoryLimit() { return m_MemoryLimit.query();}
bool CWURecreateQueryRequest::getTimeLimit_isNull(){return m_TimeLimit.is_nil();}
unsigned int CWURecreateQueryRequest::getTimeLimit() { return m_TimeLimit;}
bool CWURecreateQueryRequest::getWarnTimeLimit_isNull(){return m_WarnTimeLimit.is_nil();}
unsigned int CWURecreateQueryRequest::getWarnTimeLimit() { return m_WarnTimeLimit;}
const char * CWURecreateQueryRequest::getPriority() { return m_Priority.query();}
const char * CWURecreateQueryRequest::getComment() { return m_Comment.query();}
const char * CWURecreateQueryRequest::getRemoteDali() { return m_RemoteDali.query();}
bool CWURecreateQueryRequest::getDontCopyFiles_isNull(){return m_DontCopyFiles.is_nil();}
bool CWURecreateQueryRequest::getDontCopyFiles() { return m_DontCopyFiles;}
const char * CWURecreateQueryRequest::getSourceProcess() { return m_SourceProcess.query();}
bool CWURecreateQueryRequest::getAllowForeignFiles_isNull(){return m_AllowForeignFiles.is_nil();}
bool CWURecreateQueryRequest::getAllowForeignFiles() { return m_AllowForeignFiles;}
bool CWURecreateQueryRequest::getUpdateDfs_isNull(){return m_UpdateDfs.is_nil();}
bool CWURecreateQueryRequest::getUpdateDfs() { return m_UpdateDfs;}
bool CWURecreateQueryRequest::getUpdateSuperFiles_isNull(){return m_UpdateSuperFiles.is_nil();}
bool CWURecreateQueryRequest::getUpdateSuperFiles() { return m_UpdateSuperFiles;}
bool CWURecreateQueryRequest::getUpdateCloneFrom_isNull(){return m_UpdateCloneFrom.is_nil();}
bool CWURecreateQueryRequest::getUpdateCloneFrom() { return m_UpdateCloneFrom;}
bool CWURecreateQueryRequest::getAppendCluster_isNull(){return m_AppendCluster.is_nil();}
bool CWURecreateQueryRequest::getAppendCluster() { return m_AppendCluster;}
bool CWURecreateQueryRequest::getIncludeFileErrors_isNull(){return m_IncludeFileErrors.is_nil();}
bool CWURecreateQueryRequest::getIncludeFileErrors() { return m_IncludeFileErrors;}
bool CWURecreateQueryRequest::getWait_isNull(){return m_Wait.is_nil();}
int CWURecreateQueryRequest::getWait() { return m_Wait;}
void CWURecreateQueryRequest::setTarget(const char * val){ m_Target.set(val); }
void CWURecreateQueryRequest::setQueryId(const char * val){ m_QueryId.set(val); }
void CWURecreateQueryRequest::setDebugValues(IArrayOf<IEspNamedValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstNamedValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNamedValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURecreateQueryRequest::setDebugValues(IArrayOf<IConstNamedValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstNamedValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNamedValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURecreateQueryRequest::setDestTarget(const char * val){ m_DestTarget.set(val); }
void CWURecreateQueryRequest::setRepublish_null(){ m_Republish.Nil(); }void CWURecreateQueryRequest::setRepublish(bool val){ m_Republish=val; }
void CWURecreateQueryRequest::setActivate(CWUQueryActivationMode val) { m_Activate.setValue(val); }
void CWURecreateQueryRequest::setActivate(const char* val) { m_Activate.setValue(val); }
void CWURecreateQueryRequest::setNoReload_null(){ m_NoReload.Nil(); }void CWURecreateQueryRequest::setNoReload(bool val){ m_NoReload=val; }
void CWURecreateQueryRequest::setMemoryLimit(const char * val){ m_MemoryLimit.set(val); }
void CWURecreateQueryRequest::setTimeLimit_null(){ m_TimeLimit.Nil(); }void CWURecreateQueryRequest::setTimeLimit(unsigned int val){ m_TimeLimit=val; }
void CWURecreateQueryRequest::setWarnTimeLimit_null(){ m_WarnTimeLimit.Nil(); }void CWURecreateQueryRequest::setWarnTimeLimit(unsigned int val){ m_WarnTimeLimit=val; }
void CWURecreateQueryRequest::setPriority(const char * val){ m_Priority.set(val); }
void CWURecreateQueryRequest::setComment(const char * val){ m_Comment.set(val); }
void CWURecreateQueryRequest::setRemoteDali(const char * val){ m_RemoteDali.set(val); }
void CWURecreateQueryRequest::setDontCopyFiles_null(){ m_DontCopyFiles.Nil(); }void CWURecreateQueryRequest::setDontCopyFiles(bool val){ m_DontCopyFiles=val; }
void CWURecreateQueryRequest::setSourceProcess(const char * val){ m_SourceProcess.set(val); }
void CWURecreateQueryRequest::setAllowForeignFiles_null(){ m_AllowForeignFiles.Nil(); }void CWURecreateQueryRequest::setAllowForeignFiles(bool val){ m_AllowForeignFiles=val; }
void CWURecreateQueryRequest::setUpdateDfs_null(){ m_UpdateDfs.Nil(); }void CWURecreateQueryRequest::setUpdateDfs(bool val){ m_UpdateDfs=val; }
void CWURecreateQueryRequest::setUpdateSuperFiles_null(){ m_UpdateSuperFiles.Nil(); }void CWURecreateQueryRequest::setUpdateSuperFiles(bool val){ m_UpdateSuperFiles=val; }
void CWURecreateQueryRequest::setUpdateCloneFrom_null(){ m_UpdateCloneFrom.Nil(); }void CWURecreateQueryRequest::setUpdateCloneFrom(bool val){ m_UpdateCloneFrom=val; }
void CWURecreateQueryRequest::setAppendCluster_null(){ m_AppendCluster.Nil(); }void CWURecreateQueryRequest::setAppendCluster(bool val){ m_AppendCluster=val; }
void CWURecreateQueryRequest::setIncludeFileErrors_null(){ m_IncludeFileErrors.Nil(); }void CWURecreateQueryRequest::setIncludeFileErrors(bool val){ m_IncludeFileErrors=val; }
void CWURecreateQueryRequest::setWait_null(){ m_Wait.Nil(); }void CWURecreateQueryRequest::setWait(int val){ m_Wait=val; }
extern "C"  IEspWURecreateQueryRequest *createWURecreateQueryRequest(const char *serv){return ((IEspWURecreateQueryRequest *)new CWURecreateQueryRequest(serv));}
extern "C"  IClientWURecreateQueryRequest *createClientWURecreateQueryRequest(const char *serv){return ((IClientWURecreateQueryRequest *)new CWURecreateQueryRequest(serv));}

//=======================================================
// class CWURecreateQueryResponse Implementation
//=======================================================

CWURecreateQueryResponse::CWURecreateQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_QuerySet(nilRemove),m_QueryName(nilRemove),m_QueryId(nilRemove),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_ReloadFailed(nilRemove),m_Suspended(nilRemove),m_ErrorMessage(nilRemove),m_FileErrors(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWURecreateQueryResponse::CWURecreateQueryResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_QuerySet(nilRemove),m_QueryName(nilRemove),m_QueryId(nilRemove),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_ReloadFailed(nilRemove),m_Suspended(nilRemove),m_ErrorMessage(nilRemove),m_FileErrors(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryResponse");
}

CWURecreateQueryResponse::CWURecreateQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_QuerySet(nilRemove),m_QueryName(nilRemove),m_QueryId(nilRemove),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_ReloadFailed(nilRemove),m_Suspended(nilRemove),m_ErrorMessage(nilRemove),m_FileErrors(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWURecreateQueryResponse::CWURecreateQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_QuerySet(nilRemove),m_QueryName(nilRemove),m_QueryId(nilRemove),m_MemoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_ReloadFailed(nilRemove),m_Suspended(nilRemove),m_ErrorMessage(nilRemove),m_FileErrors(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURecreateQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWURecreateQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MemoryLimit\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WarnTimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ReloadFailed\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Suspended\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ErrorMessage\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileErrors\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:LogicalFileError\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CLogicalFileError::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWURecreateQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWURecreateQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("LogicalFileError"))
	{
		added.setValue("LogicalFileError",1);
		CLogicalFileError::getMapInfo(info,added);
	}
}

StringBuffer &CWURecreateQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySet");
	form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryName");
	form.appendf("  <tr><td><b>QueryName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MemoryLimit");
	form.appendf("  <tr><td><b>MemoryLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimit");
	form.appendf("  <tr><td><b>TimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimit");
	form.appendf("  <tr><td><b>WarnTimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Priority");
	form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReloadFailed");
	
	form.appendf("  <tr><td><b>ReloadFailed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Suspended");
	
	form.appendf("  <tr><td><b>Suspended? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ErrorMessage");
	form.appendf("  <tr><td><b>ErrorMessage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileErrors");
	form.appendf("<tr><td><b>FileErrors: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWURecreateQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWURecreateQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
		m_QueryName.marshall(rpc_resp, "QueryName", "", "", "");
		m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
		m_MemoryLimit.marshall(rpc_resp, "MemoryLimit", "", "", "");
		m_TimeLimit.marshall(rpc_resp, "TimeLimit", "", "", "");
		m_WarnTimeLimit.marshall(rpc_resp, "WarnTimeLimit", "", "", "");
		m_Priority.marshall(rpc_resp, "Priority", "", "", "");
		m_Comment.marshall(rpc_resp, "Comment", "", "", "");
		m_ReloadFailed.marshall(rpc_resp, "ReloadFailed", "", "", "");
		m_Suspended.marshall(rpc_resp, "Suspended", "", "", "");
		m_ErrorMessage.marshall(rpc_resp, "ErrorMessage", "", "", "");
		m_FileErrors.marshall(rpc_resp, "FileErrors", "File");
	}
}


void CWURecreateQueryResponse::copy(CWURecreateQueryResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_QuerySet.copy(from.m_QuerySet);
	m_QueryName.copy(from.m_QueryName);
	m_QueryId.copy(from.m_QueryId);
	m_MemoryLimit.copy(from.m_MemoryLimit);
	m_TimeLimit.copy(from.m_TimeLimit);
	m_WarnTimeLimit.copy(from.m_WarnTimeLimit);
	m_Priority.copy(from.m_Priority);
	m_Comment.copy(from.m_Comment);
	m_ReloadFailed.copy(from.m_ReloadFailed);
	m_Suspended.copy(from.m_Suspended);
	m_ErrorMessage.copy(from.m_ErrorMessage);
	m_FileErrors.copy(from.m_FileErrors);
}


void CWURecreateQueryResponse::copy(IConstWURecreateQueryResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setQuerySet(ifrom.getQuerySet());
	setQueryName(ifrom.getQueryName());
	setQueryId(ifrom.getQueryId());
	setMemoryLimit(ifrom.getMemoryLimit());
	setTimeLimit(ifrom.getTimeLimit());
	setWarnTimeLimit(ifrom.getWarnTimeLimit());
	setPriority(ifrom.getPriority());
	setComment(ifrom.getComment());
	setReloadFailed(ifrom.getReloadFailed());
	setSuspended(ifrom.getSuspended());
	setErrorMessage(ifrom.getErrorMessage());
	setFileErrors(ifrom.getFileErrors());
}


void CWURecreateQueryResponse::getAttributes(IProperties &attributes)
{
}


void CWURecreateQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
		m_QueryName.toStr(ctx, buffer, "QueryName", "", true, "", "");
		m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
		m_MemoryLimit.toStr(ctx, buffer, "MemoryLimit", "", true, "", "");
		m_TimeLimit.toStr(ctx, buffer, "TimeLimit", "", true, "", "");
		m_WarnTimeLimit.toStr(ctx, buffer, "WarnTimeLimit", "", true, "", "");
		m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
		m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
		m_ReloadFailed.toStr(ctx, buffer, "ReloadFailed", "", true, "", "");
		m_Suspended.toStr(ctx, buffer, "Suspended", "", true, "", "");
		m_ErrorMessage.toStr(ctx, buffer, "ErrorMessage", "", true, "", "");
		m_FileErrors.toStr(ctx, buffer, "FileErrors", "File");
	}
}


void CWURecreateQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWURecreateQueryResponse::serializer(IEspContext* ctx, IConstWURecreateQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WURecreateQueryResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field QuerySet
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field QueryName
	{
		const char* s = src.getQueryName();
		if (s && *s)
		{
			buffer.append("<QueryName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryName>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field MemoryLimit
	{
		const char* s = src.getMemoryLimit();
		if (s && *s)
		{
			buffer.append("<MemoryLimit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MemoryLimit>");
		}
	}
	// field TimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimit
		buffer.append("<TimeLimit>");
		buffer.append(src.getTimeLimit());
		buffer.append("</TimeLimit>");
	}
	// field WarnTimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimit
		buffer.append("<WarnTimeLimit>");
		buffer.append(src.getWarnTimeLimit());
		buffer.append("</WarnTimeLimit>");
	}
	// field Priority
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<Priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Priority>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	// field ReloadFailed
	{
		bool b = src.getReloadFailed();
		if (b)
			buffer.appendf("<ReloadFailed>1</ReloadFailed>");
	}
	// field Suspended
	{
		bool b = src.getSuspended();
		if (b)
			buffer.appendf("<Suspended>1</Suspended>");
	}
	// field ErrorMessage
	{
		const char* s = src.getErrorMessage();
		if (s && *s)
		{
			buffer.append("<ErrorMessage>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ErrorMessage>");
		}
	}
	// field FileErrors
	{
		IArrayOf<IConstLogicalFileError>& v = src.getFileErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<FileErrors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CLogicalFileError::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</FileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WURecreateQueryResponse>");
}

bool CWURecreateQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
		hasValue |= m_QueryName.unmarshall(rpc_request, "QueryName", basepath);
		hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
		hasValue |= m_MemoryLimit.unmarshall(rpc_request, "MemoryLimit", basepath);
		hasValue |= m_TimeLimit.unmarshall(rpc_request, "TimeLimit", basepath);
		hasValue |= m_WarnTimeLimit.unmarshall(rpc_request, "WarnTimeLimit", basepath);
		hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
		hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
		hasValue |= m_ReloadFailed.unmarshall(rpc_request, "ReloadFailed", basepath);
		hasValue |= m_Suspended.unmarshall(rpc_request, "Suspended", basepath);
		hasValue |= m_ErrorMessage.unmarshall(rpc_request, "ErrorMessage", basepath);
		hasValue |= m_FileErrors.unmarshall(rpc_request, "FileErrors", basepath);
	}
	return hasValue;
}

bool CWURecreateQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_QueryName.unmarshall(ctx, soapval, "QueryName");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_MemoryLimit.unmarshall(ctx, soapval, "MemoryLimit");
	hasValue |= m_TimeLimit.unmarshall(ctx, soapval, "TimeLimit");
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, soapval, "WarnTimeLimit");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	hasValue |= m_ReloadFailed.unmarshall(ctx, soapval, "ReloadFailed");
	hasValue |= m_Suspended.unmarshall(ctx, soapval, "Suspended");
	hasValue |= m_ErrorMessage.unmarshall(ctx, soapval, "ErrorMessage");
	hasValue |= m_FileErrors.unmarshall(ctx, soapval, "FileErrors");
	return hasValue;
}

bool CWURecreateQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_QueryName.unmarshall(ctx, params, attachments, "QueryName", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_MemoryLimit.unmarshall(ctx, params, attachments, "MemoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(ctx, params, attachments, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, params, attachments, "WarnTimeLimit", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	hasValue |= m_ReloadFailed.unmarshall(ctx, params, attachments, "ReloadFailed", basepath);
	hasValue |= m_Suspended.unmarshall(ctx, params, attachments, "Suspended", basepath);
	hasValue |= m_ErrorMessage.unmarshall(ctx, params, attachments, "ErrorMessage", basepath);
	hasValue |= m_FileErrors.unmarshall(ctx, params, attachments, "FileErrors", basepath);
	return hasValue;
}

const char * CWURecreateQueryResponse::getWuid() { return m_Wuid.query();}
const char * CWURecreateQueryResponse::getQuerySet() { return m_QuerySet.query();}
const char * CWURecreateQueryResponse::getQueryName() { return m_QueryName.query();}
const char * CWURecreateQueryResponse::getQueryId() { return m_QueryId.query();}
const char * CWURecreateQueryResponse::getMemoryLimit() { return m_MemoryLimit.query();}
bool CWURecreateQueryResponse::getTimeLimit_isNull(){return m_TimeLimit.is_nil();}
unsigned int CWURecreateQueryResponse::getTimeLimit() { return m_TimeLimit;}
bool CWURecreateQueryResponse::getWarnTimeLimit_isNull(){return m_WarnTimeLimit.is_nil();}
unsigned int CWURecreateQueryResponse::getWarnTimeLimit() { return m_WarnTimeLimit;}
const char * CWURecreateQueryResponse::getPriority() { return m_Priority.query();}
const char * CWURecreateQueryResponse::getComment() { return m_Comment.query();}
bool CWURecreateQueryResponse::getReloadFailed_isNull(){return m_ReloadFailed.is_nil();}
bool CWURecreateQueryResponse::getReloadFailed() { return m_ReloadFailed;}
bool CWURecreateQueryResponse::getSuspended_isNull(){return m_Suspended.is_nil();}
bool CWURecreateQueryResponse::getSuspended() { return m_Suspended;}
const char * CWURecreateQueryResponse::getErrorMessage() { return m_ErrorMessage.query();}
IArrayOf<IConstLogicalFileError> & CWURecreateQueryResponse::getFileErrors() { return (IArrayOf<IConstLogicalFileError> &) m_FileErrors; }
void CWURecreateQueryResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWURecreateQueryResponse::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWURecreateQueryResponse::setQueryName(const char * val){ m_QueryName.set(val); }
void CWURecreateQueryResponse::setQueryId(const char * val){ m_QueryId.set(val); }
void CWURecreateQueryResponse::setMemoryLimit(const char * val){ m_MemoryLimit.set(val); }
void CWURecreateQueryResponse::setTimeLimit_null(){ m_TimeLimit.Nil(); }void CWURecreateQueryResponse::setTimeLimit(unsigned int val){ m_TimeLimit=val; }
void CWURecreateQueryResponse::setWarnTimeLimit_null(){ m_WarnTimeLimit.Nil(); }void CWURecreateQueryResponse::setWarnTimeLimit(unsigned int val){ m_WarnTimeLimit=val; }
void CWURecreateQueryResponse::setPriority(const char * val){ m_Priority.set(val); }
void CWURecreateQueryResponse::setComment(const char * val){ m_Comment.set(val); }
void CWURecreateQueryResponse::setReloadFailed_null(){ m_ReloadFailed.Nil(); }void CWURecreateQueryResponse::setReloadFailed(bool val){ m_ReloadFailed=val; }
void CWURecreateQueryResponse::setSuspended_null(){ m_Suspended.Nil(); }void CWURecreateQueryResponse::setSuspended(bool val){ m_Suspended=val; }
void CWURecreateQueryResponse::setErrorMessage(const char * val){ m_ErrorMessage.set(val); }
void CWURecreateQueryResponse::setFileErrors(IArrayOf<IEspLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspLogicalFileError &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURecreateQueryResponse::setFileErrors(IArrayOf<IConstLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstLogicalFileError &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWURecreateQueryResponse *createWURecreateQueryResponse(const char *serv){return ((IEspWURecreateQueryResponse *)new CWURecreateQueryResponse(serv));}
extern "C"  IClientWURecreateQueryResponse *createClientWURecreateQueryResponse(const char *serv){return ((IClientWURecreateQueryResponse *)new CWURecreateQueryResponse(serv));}

//=======================================================
// class CWURunRequest Implementation
//=======================================================

CWURunRequest::CWURunRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Wuid(nilIgnore),m_CloneWorkunit(nilIgnore),m_Cluster(nilIgnore),m_Wait(-1, nilIgnore,false),m_Input(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_DebugValues(nilIgnore),m_Variables(nilIgnore),m_ApplicationValues(nilIgnore),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWURunRequest::CWURunRequest(const char *serviceName, const char *bc)
	: m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Wuid(nilIgnore),m_CloneWorkunit(nilIgnore),m_Cluster(nilIgnore),m_Wait(-1, nilIgnore,false),m_Input(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_DebugValues(nilIgnore),m_Variables(nilIgnore),m_ApplicationValues(nilIgnore),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunRequest");
}

CWURunRequest::CWURunRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Wuid(nilIgnore),m_CloneWorkunit(nilIgnore),m_Cluster(nilIgnore),m_Wait(-1, nilIgnore,false),m_Input(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_DebugValues(nilIgnore),m_Variables(nilIgnore),m_ApplicationValues(nilIgnore),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWURunRequest::CWURunRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Wuid(nilIgnore),m_CloneWorkunit(nilIgnore),m_Cluster(nilIgnore),m_Wait(-1, nilIgnore,false),m_Input(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_DebugValues(nilIgnore),m_Variables(nilIgnore),m_ApplicationValues(nilIgnore),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWURunRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Query\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CloneWorkunit\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"Wait\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Input\" type=\"xsd:string\"");
		if (context.queryOptions()&ESPCTX_ALL_ANNOTATION)
			schema.append("> <xsd:annotation><xsd:appinfo><form formRows=\"15\"/></xsd:appinfo></xsd:annotation></xsd:element>\n");
		else
			schema.append("/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoRootTag\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValues\" type=\"tns:ArrayOfNamedValue\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Variables\" type=\"tns:ArrayOfNamedValue\"/>\n");
		if (!context.suppressed("WURunRequest","ApplicationValues")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ApplicationValues\" type=\"tns:ArrayOfApplicationValue\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"info\" name=\"ExceptionSeverity\" type=\"tns:WUExceptionSeverity\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CNamedValue::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("WURunRequest","ApplicationValues"))
			CApplicationValue::getXsdDefinition(context, request, schema, added);
		CXWUExceptionSeverity::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ApplicationValue") && added.getValue("ArrayOfApplicationValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfApplicationValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ApplicationValue\" type=\"tns:ApplicationValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfApplicationValue",1);
	}
	if (added.getValue("NamedValue") && added.getValue("ArrayOfNamedValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfNamedValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"NamedValue\" type=\"tns:NamedValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfNamedValue",1);
	}
	return schema;
}

void CWURunRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWURunRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WURunRequest","ApplicationValues",1.56);
	if (!added.getValue("ApplicationValue"))
	{
		added.setValue("ApplicationValue",1);
		CApplicationValue::getMapInfo(info,added);
	}
	if (!added.getValue("NamedValue"))
	{
		added.setValue("NamedValue",1);
		CNamedValue::getMapInfo(info,added);
	}
	if (!added.getValue("WUExceptionSeverity"))
	{
		added.setValue("WUExceptionSeverity",1);
		CXWUExceptionSeverity::getMapInfo(info,added);
	}
}

StringBuffer &CWURunRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySet");
	form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Query");
	form.appendf("  <tr><td><b>Query: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CloneWorkunit");
	
	form.appendf("  <tr><td><b>CloneWorkunit? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Wait");
	form.appendf("  <tr><td><b>Wait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Input");
	form.appendf("<tr><td><b>Input: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"15\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoRootTag");
	
	form.appendf("  <tr><td><b>NoRootTag? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DebugValues");
	form.appendf("<tr><td><b>DebugValues: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Variables");
	form.appendf("<tr><td><b>Variables: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("WURunRequest","ApplicationValues")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ApplicationValues");
		form.appendf("<tr><td><b>ApplicationValues: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExceptionSeverity");
	form.appendf("  <tr><td><b>ExceptionSeverity: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"info\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWURunRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWURunRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
	m_Query.marshall(rpc_resp, "Query", "", "", "");
	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_CloneWorkunit.marshall(rpc_resp, "CloneWorkunit", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Wait.marshall(rpc_resp, "Wait", "", "", "");
	m_Input.marshall(rpc_resp, "Input", "", "", "");
	m_NoRootTag.marshall(rpc_resp, "NoRootTag", "", "", "");
	m_DebugValues.marshall(rpc_resp, "DebugValues", "NamedValue");
	m_Variables.marshall(rpc_resp, "Variables", "NamedValue");
	if ((clientVer==-1.0 || clientVer>=1.56))
		m_ApplicationValues.marshall(rpc_resp, "ApplicationValues", "ApplicationValue");
	m_ExceptionSeverity.marshall(rpc_resp, "ExceptionSeverity", "", "", "");
}


void CWURunRequest::copy(CWURunRequest &from)
{
	m_QuerySet.copy(from.m_QuerySet);
	m_Query.copy(from.m_Query);
	m_Wuid.copy(from.m_Wuid);
	m_CloneWorkunit.copy(from.m_CloneWorkunit);
	m_Cluster.copy(from.m_Cluster);
	m_Wait.copy(from.m_Wait);
	m_Input.copy(from.m_Input);
	m_NoRootTag.copy(from.m_NoRootTag);
	m_DebugValues.copy(from.m_DebugValues);
	m_Variables.copy(from.m_Variables);
	m_ApplicationValues.copy(from.m_ApplicationValues);
	m_ExceptionSeverity.copy(from.m_ExceptionSeverity);
}


void CWURunRequest::copy(IConstWURunRequest &ifrom)
{
	setQuerySet(ifrom.getQuerySet());
	setQuery(ifrom.getQuery());
	setWuid(ifrom.getWuid());
	setCloneWorkunit(ifrom.getCloneWorkunit());
	setCluster(ifrom.getCluster());
	setWait(ifrom.getWait());
	setInput(ifrom.getInput());
	setNoRootTag(ifrom.getNoRootTag());
	setDebugValues(ifrom.getDebugValues());
	setVariables(ifrom.getVariables());
	setApplicationValues(ifrom.getApplicationValues());
	setExceptionSeverity(ifrom.getExceptionSeverity());
}


void CWURunRequest::getAttributes(IProperties &attributes)
{
}


void CWURunRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
	m_Query.toStr(ctx, buffer, "Query", "", true, "", "");
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_CloneWorkunit.toStr(ctx, buffer, "CloneWorkunit", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Wait.toStr(ctx, buffer, "Wait", "", true, "", "");
	m_Input.toStr(ctx, buffer, "Input", "", true, "", "");
	m_NoRootTag.toStr(ctx, buffer, "NoRootTag", "", true, "", "");
	m_DebugValues.toStr(ctx, buffer, "DebugValues", "NamedValue");
	m_Variables.toStr(ctx, buffer, "Variables", "NamedValue");
	if ((clientVer==-1.0 || clientVer>=1.56))
		m_ApplicationValues.toStr(ctx, buffer, "ApplicationValues", "ApplicationValue");
	m_ExceptionSeverity.toStr(ctx, buffer, "ExceptionSeverity", "", true, "", "");
}


void CWURunRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWURunRequest::serializer(IEspContext* ctx, IConstWURunRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WURunRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field QuerySet
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field Query
	{
		const char* s = src.getQuery();
		if (s && *s)
		{
			buffer.append("<Query>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Query>");
		}
	}
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field CloneWorkunit
	{
		bool b = src.getCloneWorkunit();
		if (b)
			buffer.appendf("<CloneWorkunit>1</CloneWorkunit>");
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Wait
	{
		int n = src.getWait();
		if (n)
			buffer.appendf("<Wait>%d</Wait>", n);
	}
	// field Input
	{
		const char* s = src.getInput();
		if (s && *s)
		{
			buffer.append("<Input>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Input>");
		}
	}
	// field NoRootTag
	{
		bool b = src.getNoRootTag();
		if (b)
			buffer.appendf("<NoRootTag>1</NoRootTag>");
	}
	// field DebugValues
	{
		IArrayOf<IConstNamedValue>& v = src.getDebugValues();
		int size = v.length();
		if (size>0)
			buffer.append("<DebugValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CNamedValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DebugValues>");
	}
	// field Variables
	{
		IArrayOf<IConstNamedValue>& v = src.getVariables();
		int size = v.length();
		if (size>0)
			buffer.append("<Variables>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CNamedValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Variables>");
	}
	// field ApplicationValues
	if ((clientVer==-1.0 || clientVer>=1.56))
	{
		IArrayOf<IConstApplicationValue>& v = src.getApplicationValues();
		int size = v.length();
		if (size>0)
			buffer.append("<ApplicationValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CApplicationValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ApplicationValues>");
	}
	// field ExceptionSeverity
	{
		const char* s = src.getExceptionSeverityAsString();
		buffer.append("<ExceptionSeverity>");
		encodeUtf8XML(s,buffer);
		buffer.append("</ExceptionSeverity>");
	}
	if (keepRootTag)
		buffer.append("</WURunRequest>");
}

bool CWURunRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(rpc_request, "Query", basepath);
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_CloneWorkunit.unmarshall(rpc_request, "CloneWorkunit", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Wait.unmarshall(rpc_request, "Wait", basepath);
	hasValue |= m_Input.unmarshall(rpc_request, "Input", basepath);
	hasValue |= m_NoRootTag.unmarshall(rpc_request, "NoRootTag", basepath);
	hasValue |= m_DebugValues.unmarshall(rpc_request, "DebugValues", basepath);
	hasValue |= m_Variables.unmarshall(rpc_request, "Variables", basepath);
	hasValue |= m_ApplicationValues.unmarshall(rpc_request, "ApplicationValues", basepath);
	hasValue |= m_ExceptionSeverity.unmarshall(rpc_request, "ExceptionSeverity", basepath);
	return hasValue;
}

bool CWURunRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_Query.unmarshall(ctx, soapval, "Query");
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_CloneWorkunit.unmarshall(ctx, soapval, "CloneWorkunit");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Wait.unmarshall(ctx, soapval, "Wait");
	hasValue |= m_Input.unmarshall(ctx, soapval, "Input");
	hasValue |= m_NoRootTag.unmarshall(ctx, soapval, "NoRootTag");
	hasValue |= m_DebugValues.unmarshall(ctx, soapval, "DebugValues");
	hasValue |= m_Variables.unmarshall(ctx, soapval, "Variables");
	hasValue |= m_ApplicationValues.unmarshall(ctx, soapval, "ApplicationValues");
	hasValue |= m_ExceptionSeverity.unmarshall(ctx, soapval, "ExceptionSeverity");
	return hasValue;
}

bool CWURunRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(ctx, params, attachments, "Query", basepath);
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_CloneWorkunit.unmarshall(ctx, params, attachments, "CloneWorkunit", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Wait.unmarshall(ctx, params, attachments, "Wait", basepath);
	hasValue |= m_Input.unmarshall(ctx, params, attachments, "Input", basepath);
	hasValue |= m_NoRootTag.unmarshall(ctx, params, attachments, "NoRootTag", basepath);
	hasValue |= m_DebugValues.unmarshall(ctx, params, attachments, "DebugValues", basepath);
	hasValue |= m_Variables.unmarshall(ctx, params, attachments, "Variables", basepath);
	hasValue |= m_ApplicationValues.unmarshall(ctx, params, attachments, "ApplicationValues", basepath);
	hasValue |= m_ExceptionSeverity.unmarshall(ctx, params, attachments, "ExceptionSeverity", basepath);
	return hasValue;
}

const char * CWURunRequest::getQuerySet() { return m_QuerySet.query();}
const char * CWURunRequest::getQuery() { return m_Query.query();}
const char * CWURunRequest::getWuid() { return m_Wuid.query();}
bool CWURunRequest::getCloneWorkunit() { return m_CloneWorkunit;}
const char * CWURunRequest::getCluster() { return m_Cluster.query();}
int CWURunRequest::getWait() { return m_Wait;}
const char * CWURunRequest::getInput() { return m_Input.query();}
bool CWURunRequest::getNoRootTag() { return m_NoRootTag;}
IArrayOf<IConstNamedValue> & CWURunRequest::getDebugValues() { return (IArrayOf<IConstNamedValue> &) m_DebugValues; }
IArrayOf<IConstNamedValue> & CWURunRequest::getVariables() { return (IArrayOf<IConstNamedValue> &) m_Variables; }
IArrayOf<IConstApplicationValue> & CWURunRequest::getApplicationValues() { return (IArrayOf<IConstApplicationValue> &) m_ApplicationValues; }
CWUExceptionSeverity CWURunRequest::getExceptionSeverity() { return m_ExceptionSeverity.getValue(); }
const char* CWURunRequest::getExceptionSeverityAsString() {  return (const char*)m_ExceptionSeverity; }
void CWURunRequest::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWURunRequest::setQuery(const char * val){ m_Query.set(val); }
void CWURunRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWURunRequest::setCloneWorkunit(bool val){ m_CloneWorkunit=val; }
void CWURunRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWURunRequest::setWait(int val){ m_Wait=val; }
void CWURunRequest::setInput(const char * val){ m_Input.set(val); }
void CWURunRequest::setNoRootTag(bool val){ m_NoRootTag=val; }
void CWURunRequest::setDebugValues(IArrayOf<IEspNamedValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstNamedValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNamedValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURunRequest::setDebugValues(IArrayOf<IConstNamedValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstNamedValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNamedValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURunRequest::setVariables(IArrayOf<IEspNamedValue> &val)
{
	m_Variables->kill();
	IArrayOf<IConstNamedValue> &target = m_Variables.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNamedValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURunRequest::setVariables(IArrayOf<IConstNamedValue> &val)
{
	m_Variables->kill();
	IArrayOf<IConstNamedValue> &target = m_Variables.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNamedValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURunRequest::setApplicationValues(IArrayOf<IEspApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspApplicationValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURunRequest::setApplicationValues(IArrayOf<IConstApplicationValue> &val)
{
	m_ApplicationValues->kill();
	IArrayOf<IConstApplicationValue> &target = m_ApplicationValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstApplicationValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWURunRequest::setExceptionSeverity(CWUExceptionSeverity val) { m_ExceptionSeverity.setValue(val); }
void CWURunRequest::setExceptionSeverity(const char* val) { m_ExceptionSeverity.setValue(val); }
extern "C"  IEspWURunRequest *createWURunRequest(const char *serv){return ((IEspWURunRequest *)new CWURunRequest(serv));}
extern "C"  IClientWURunRequest *createClientWURunRequest(const char *serv){return ((IClientWURunRequest *)new CWURunRequest(serv));}

//=======================================================
// class CWURunResponse Implementation
//=======================================================

CWURunResponse::CWURunResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_State(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWURunResponse::CWURunResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_State(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunResponse");
}

CWURunResponse::CWURunResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_State(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWURunResponse::CWURunResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_State(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WURunResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWURunResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Results\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWURunResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWURunResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWURunResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Results");
	form.appendf("  <tr><td><b>Results: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWURunResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWURunResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_State.marshall(rpc_resp, "State", "", "", "");
		m_Results.marshall(rpc_resp, "Results", "", "", "");
	}
}


void CWURunResponse::copy(CWURunResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_State.copy(from.m_State);
	m_Results.copy(from.m_Results);
}


void CWURunResponse::copy(IConstWURunResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setState(ifrom.getState());
	setResults(ifrom.getResults());
}


void CWURunResponse::getAttributes(IProperties &attributes)
{
}


void CWURunResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_State.toStr(ctx, buffer, "State", "", true, "", "");
		m_Results.toStr(ctx, buffer, "Results", "", true, "", "");
	}
}


void CWURunResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWURunResponse::serializer(IEspContext* ctx, IConstWURunResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WURunResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field Results
	{
		const char* s = src.getResults();
		if (s && *s)
		{
			buffer.append("<Results>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Results>");
		}
	}
	if (keepRootTag)
		buffer.append("</WURunResponse>");
}

bool CWURunResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
		hasValue |= m_Results.unmarshall(rpc_request, "Results", basepath);
	}
	return hasValue;
}

bool CWURunResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_Results.unmarshall(ctx, soapval, "Results");
	return hasValue;
}

bool CWURunResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_Results.unmarshall(ctx, params, attachments, "Results", basepath);
	return hasValue;
}

const char * CWURunResponse::getWuid() { return m_Wuid.query();}
const char * CWURunResponse::getState() { return m_State.query();}
const char * CWURunResponse::getResults() { return m_Results.query();}
void CWURunResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWURunResponse::setState(const char * val){ m_State.set(val); }
void CWURunResponse::setResults(const char * val){ m_Results.set(val); }
extern "C"  IEspWURunResponse *createWURunResponse(const char *serv){return ((IEspWURunResponse *)new CWURunResponse(serv));}
extern "C"  IClientWURunResponse *createClientWURunResponse(const char *serv){return ((IClientWURunResponse *)new CWURunResponse(serv));}

//=======================================================
// class CWUSubmitRequest Implementation
//=======================================================

CWUSubmitRequest::CWUSubmitRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_MaxRunTime(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_SyntaxCheck(0, nilIgnore,false),m_NotifyCluster(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUSubmitRequest::CWUSubmitRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_MaxRunTime(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_SyntaxCheck(0, nilIgnore,false),m_NotifyCluster(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitRequest");
}

CWUSubmitRequest::CWUSubmitRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_MaxRunTime(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_SyntaxCheck(0, nilIgnore,false),m_NotifyCluster(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUSubmitRequest::CWUSubmitRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_MaxRunTime(nilIgnore),m_BlockTillFinishTimer(0, nilIgnore,false),m_SyntaxCheck(0, nilIgnore,false),m_NotifyCluster(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUSubmitRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Snapshot\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxRunTime\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("WUSubmitRequest","BlockTillFinishTimer")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BlockTillFinishTimer\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("WUSubmitRequest","SyntaxCheck")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"SyntaxCheck\" type=\"xsd:boolean\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NotifyCluster\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUSubmitRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUSubmitRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUSubmitRequest","BlockTillFinishTimer",1.02);
	info.addMinVersion("WUSubmitRequest","SyntaxCheck",1.19);
}

StringBuffer &CWUSubmitRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queue");
	form.appendf("  <tr><td><b>Queue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Snapshot");
	form.appendf("  <tr><td><b>Snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxRunTime");
	form.appendf("  <tr><td><b>MaxRunTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUSubmitRequest","BlockTillFinishTimer")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BlockTillFinishTimer");
		form.appendf("  <tr><td><b>BlockTillFinishTimer: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUSubmitRequest","SyntaxCheck")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SyntaxCheck");
		
	form.appendf("  <tr><td><b>SyntaxCheck? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NotifyCluster");
	
	form.appendf("  <tr><td><b>NotifyCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUSubmitRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUSubmitRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Queue.marshall(rpc_resp, "Queue", "", "", "");
	m_Snapshot.marshall(rpc_resp, "Snapshot", "", "", "");
	m_MaxRunTime.marshall(rpc_resp, "MaxRunTime", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.marshall(rpc_resp, "BlockTillFinishTimer", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_SyntaxCheck.marshall(rpc_resp, "SyntaxCheck", "", "", "");
	m_NotifyCluster.marshall(rpc_resp, "NotifyCluster", "", "", "");
}


void CWUSubmitRequest::copy(CWUSubmitRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Cluster.copy(from.m_Cluster);
	m_Queue.copy(from.m_Queue);
	m_Snapshot.copy(from.m_Snapshot);
	m_MaxRunTime.copy(from.m_MaxRunTime);
	m_BlockTillFinishTimer.copy(from.m_BlockTillFinishTimer);
	m_SyntaxCheck.copy(from.m_SyntaxCheck);
	m_NotifyCluster.copy(from.m_NotifyCluster);
}


void CWUSubmitRequest::copy(IConstWUSubmitRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setCluster(ifrom.getCluster());
	setQueue(ifrom.getQueue());
	setSnapshot(ifrom.getSnapshot());
	setMaxRunTime(ifrom.getMaxRunTime());
	setBlockTillFinishTimer(ifrom.getBlockTillFinishTimer());
	setSyntaxCheck(ifrom.getSyntaxCheck());
	setNotifyCluster(ifrom.getNotifyCluster());
}


void CWUSubmitRequest::getAttributes(IProperties &attributes)
{
}


void CWUSubmitRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Queue.toStr(ctx, buffer, "Queue", "", true, "", "");
	m_Snapshot.toStr(ctx, buffer, "Snapshot", "", true, "", "");
	m_MaxRunTime.toStr(ctx, buffer, "MaxRunTime", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_BlockTillFinishTimer.toStr(ctx, buffer, "BlockTillFinishTimer", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_SyntaxCheck.toStr(ctx, buffer, "SyntaxCheck", "", true, "", "");
	m_NotifyCluster.toStr(ctx, buffer, "NotifyCluster", "", true, "", "");
}


void CWUSubmitRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUSubmitRequest::serializer(IEspContext* ctx, IConstWUSubmitRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUSubmitRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Queue
	{
		const char* s = src.getQueue();
		if (s && *s)
		{
			buffer.append("<Queue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Queue>");
		}
	}
	// field Snapshot
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<Snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Snapshot>");
		}
	}
	// field MaxRunTime
	{
		int n = src.getMaxRunTime();
		if (n)
			buffer.appendf("<MaxRunTime>%d</MaxRunTime>", n);
	}
	// field BlockTillFinishTimer
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		int n = src.getBlockTillFinishTimer();
		if (n)
			buffer.appendf("<BlockTillFinishTimer>%d</BlockTillFinishTimer>", n);
	}
	// field SyntaxCheck
	if ((clientVer==-1.0 || clientVer>=1.19))
	{
		bool b = src.getSyntaxCheck();
		if (b)
			buffer.appendf("<SyntaxCheck>1</SyntaxCheck>");
	}
	// field NotifyCluster
	{
		bool b = src.getNotifyCluster();
		if (b)
			buffer.appendf("<NotifyCluster>1</NotifyCluster>");
	}
	if (keepRootTag)
		buffer.append("</WUSubmitRequest>");
}

bool CWUSubmitRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Queue.unmarshall(rpc_request, "Queue", basepath);
	hasValue |= m_Snapshot.unmarshall(rpc_request, "Snapshot", basepath);
	hasValue |= m_MaxRunTime.unmarshall(rpc_request, "MaxRunTime", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(rpc_request, "BlockTillFinishTimer", basepath);
	hasValue |= m_SyntaxCheck.unmarshall(rpc_request, "SyntaxCheck", basepath);
	hasValue |= m_NotifyCluster.unmarshall(rpc_request, "NotifyCluster", basepath);
	return hasValue;
}

bool CWUSubmitRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Queue.unmarshall(ctx, soapval, "Queue");
	hasValue |= m_Snapshot.unmarshall(ctx, soapval, "Snapshot");
	hasValue |= m_MaxRunTime.unmarshall(ctx, soapval, "MaxRunTime");
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, soapval, "BlockTillFinishTimer");
	hasValue |= m_SyntaxCheck.unmarshall(ctx, soapval, "SyntaxCheck");
	hasValue |= m_NotifyCluster.unmarshall(ctx, soapval, "NotifyCluster");
	return hasValue;
}

bool CWUSubmitRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Queue.unmarshall(ctx, params, attachments, "Queue", basepath);
	hasValue |= m_Snapshot.unmarshall(ctx, params, attachments, "Snapshot", basepath);
	hasValue |= m_MaxRunTime.unmarshall(ctx, params, attachments, "MaxRunTime", basepath);
	hasValue |= m_BlockTillFinishTimer.unmarshall(ctx, params, attachments, "BlockTillFinishTimer", basepath);
	hasValue |= m_SyntaxCheck.unmarshall(ctx, params, attachments, "SyntaxCheck", basepath);
	hasValue |= m_NotifyCluster.unmarshall(ctx, params, attachments, "NotifyCluster", basepath);
	return hasValue;
}

const char * CWUSubmitRequest::getWuid() { return m_Wuid.query();}
const char * CWUSubmitRequest::getCluster() { return m_Cluster.query();}
const char * CWUSubmitRequest::getQueue() { return m_Queue.query();}
const char * CWUSubmitRequest::getSnapshot() { return m_Snapshot.query();}
int CWUSubmitRequest::getMaxRunTime() { return m_MaxRunTime;}
int CWUSubmitRequest::getBlockTillFinishTimer() { return m_BlockTillFinishTimer;}
bool CWUSubmitRequest::getSyntaxCheck() { return m_SyntaxCheck;}
bool CWUSubmitRequest::getNotifyCluster() { return m_NotifyCluster;}
void CWUSubmitRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUSubmitRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUSubmitRequest::setQueue(const char * val){ m_Queue.set(val); }
void CWUSubmitRequest::setSnapshot(const char * val){ m_Snapshot.set(val); }
void CWUSubmitRequest::setMaxRunTime(int val){ m_MaxRunTime=val; }
void CWUSubmitRequest::setBlockTillFinishTimer(int val){ m_BlockTillFinishTimer=val; }
void CWUSubmitRequest::setSyntaxCheck(bool val){ m_SyntaxCheck=val; }
void CWUSubmitRequest::setNotifyCluster(bool val){ m_NotifyCluster=val; }
extern "C"  IEspWUSubmitRequest *createWUSubmitRequest(const char *serv){return ((IEspWUSubmitRequest *)new CWUSubmitRequest(serv));}
extern "C"  IClientWUSubmitRequest *createClientWUSubmitRequest(const char *serv){return ((IClientWUSubmitRequest *)new CWUSubmitRequest(serv));}

//=======================================================
// class CWUSubmitResponse Implementation
//=======================================================

CWUSubmitResponse::CWUSubmitResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUSubmitResponse::CWUSubmitResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitResponse");
}

CWUSubmitResponse::CWUSubmitResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUSubmitResponse::CWUSubmitResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSubmitResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUSubmitResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUSubmitResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUSubmitResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUSubmitResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUSubmitResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUSubmitResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWUSubmitResponse::copy(CWUSubmitResponse &from)
{
}


void CWUSubmitResponse::copy(IConstWUSubmitResponse &ifrom)
{
}


void CWUSubmitResponse::getAttributes(IProperties &attributes)
{
}


void CWUSubmitResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWUSubmitResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUSubmitResponse::serializer(IEspContext* ctx, IConstWUSubmitResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUSubmitResponse>");
	if (keepRootTag)
		buffer.append("</WUSubmitResponse>");
}

bool CWUSubmitResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWUSubmitResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWUSubmitResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWUSubmitResponse *createWUSubmitResponse(const char *serv){return ((IEspWUSubmitResponse *)new CWUSubmitResponse(serv));}
extern "C"  IClientWUSubmitResponse *createClientWUSubmitResponse(const char *serv){return ((IClientWUSubmitResponse *)new CWUSubmitResponse(serv));}

//=======================================================
// class CWUScheduleRequest Implementation
//=======================================================

CWUScheduleRequest::CWUScheduleRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_When(nilIgnore),m_MaxRunTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUScheduleRequest::CWUScheduleRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_When(nilIgnore),m_MaxRunTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleRequest");
}

CWUScheduleRequest::CWUScheduleRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_When(nilIgnore),m_MaxRunTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUScheduleRequest::CWUScheduleRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_When(nilIgnore),m_MaxRunTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUScheduleRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Snapshot\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"When\" type=\"xsd:dateTime\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxRunTime\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUScheduleRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUScheduleRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUScheduleRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queue");
	form.appendf("  <tr><td><b>Queue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Snapshot");
	form.appendf("  <tr><td><b>Snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("When");
	form.appendf("  <tr><td><b>When: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxRunTime");
	form.appendf("  <tr><td><b>MaxRunTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUScheduleRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUScheduleRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Queue.marshall(rpc_resp, "Queue", "", "", "");
	m_Snapshot.marshall(rpc_resp, "Snapshot", "", "", "");
	m_When.marshall(rpc_resp, "When", "", "", "");
	m_MaxRunTime.marshall(rpc_resp, "MaxRunTime", "", "", "");
}


void CWUScheduleRequest::copy(CWUScheduleRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Cluster.copy(from.m_Cluster);
	m_Queue.copy(from.m_Queue);
	m_Snapshot.copy(from.m_Snapshot);
	m_When.copy(from.m_When);
	m_MaxRunTime.copy(from.m_MaxRunTime);
}


void CWUScheduleRequest::copy(IConstWUScheduleRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setCluster(ifrom.getCluster());
	setQueue(ifrom.getQueue());
	setSnapshot(ifrom.getSnapshot());
	setWhen(ifrom.getWhen());
	setMaxRunTime(ifrom.getMaxRunTime());
}


void CWUScheduleRequest::getAttributes(IProperties &attributes)
{
}


void CWUScheduleRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Queue.toStr(ctx, buffer, "Queue", "", true, "", "");
	m_Snapshot.toStr(ctx, buffer, "Snapshot", "", true, "", "");
	m_When.toStr(ctx, buffer, "When", "", true, "", "");
	m_MaxRunTime.toStr(ctx, buffer, "MaxRunTime", "", true, "", "");
}


void CWUScheduleRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUScheduleRequest::serializer(IEspContext* ctx, IConstWUScheduleRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUScheduleRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Queue
	{
		const char* s = src.getQueue();
		if (s && *s)
		{
			buffer.append("<Queue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Queue>");
		}
	}
	// field Snapshot
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<Snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Snapshot>");
		}
	}
	// field When
	{
		const char* s = src.getWhen();
		if (s && *s)
		{
			buffer.append("<When>");
			encodeUtf8XML(s,buffer);
			buffer.append("</When>");
		}
	}
	// field MaxRunTime
	{
		int n = src.getMaxRunTime();
		if (n)
			buffer.appendf("<MaxRunTime>%d</MaxRunTime>", n);
	}
	if (keepRootTag)
		buffer.append("</WUScheduleRequest>");
}

bool CWUScheduleRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Queue.unmarshall(rpc_request, "Queue", basepath);
	hasValue |= m_Snapshot.unmarshall(rpc_request, "Snapshot", basepath);
	hasValue |= m_When.unmarshall(rpc_request, "When", basepath);
	hasValue |= m_MaxRunTime.unmarshall(rpc_request, "MaxRunTime", basepath);
	return hasValue;
}

bool CWUScheduleRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Queue.unmarshall(ctx, soapval, "Queue");
	hasValue |= m_Snapshot.unmarshall(ctx, soapval, "Snapshot");
	hasValue |= m_When.unmarshall(ctx, soapval, "When");
	hasValue |= m_MaxRunTime.unmarshall(ctx, soapval, "MaxRunTime");
	return hasValue;
}

bool CWUScheduleRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Queue.unmarshall(ctx, params, attachments, "Queue", basepath);
	hasValue |= m_Snapshot.unmarshall(ctx, params, attachments, "Snapshot", basepath);
	hasValue |= m_When.unmarshall(ctx, params, attachments, "When", basepath);
	hasValue |= m_MaxRunTime.unmarshall(ctx, params, attachments, "MaxRunTime", basepath);
	return hasValue;
}

const char * CWUScheduleRequest::getWuid() { return m_Wuid.query();}
const char * CWUScheduleRequest::getCluster() { return m_Cluster.query();}
const char * CWUScheduleRequest::getQueue() { return m_Queue.query();}
const char * CWUScheduleRequest::getSnapshot() { return m_Snapshot.query();}
const char * CWUScheduleRequest::getWhen() { return m_When.query();}
int CWUScheduleRequest::getMaxRunTime() { return m_MaxRunTime;}
void CWUScheduleRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUScheduleRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUScheduleRequest::setQueue(const char * val){ m_Queue.set(val); }
void CWUScheduleRequest::setSnapshot(const char * val){ m_Snapshot.set(val); }
void CWUScheduleRequest::setWhen(const char * val){ m_When.set(val); }
void CWUScheduleRequest::setMaxRunTime(int val){ m_MaxRunTime=val; }
extern "C"  IEspWUScheduleRequest *createWUScheduleRequest(const char *serv){return ((IEspWUScheduleRequest *)new CWUScheduleRequest(serv));}
extern "C"  IClientWUScheduleRequest *createClientWUScheduleRequest(const char *serv){return ((IClientWUScheduleRequest *)new CWUScheduleRequest(serv));}

//=======================================================
// class CWUScheduleResponse Implementation
//=======================================================

CWUScheduleResponse::CWUScheduleResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUScheduleResponse::CWUScheduleResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleResponse");
}

CWUScheduleResponse::CWUScheduleResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUScheduleResponse::CWUScheduleResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScheduleResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUScheduleResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUScheduleResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUScheduleResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUScheduleResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUScheduleResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUScheduleResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWUScheduleResponse::copy(CWUScheduleResponse &from)
{
}


void CWUScheduleResponse::copy(IConstWUScheduleResponse &ifrom)
{
}


void CWUScheduleResponse::getAttributes(IProperties &attributes)
{
}


void CWUScheduleResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWUScheduleResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUScheduleResponse::serializer(IEspContext* ctx, IConstWUScheduleResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUScheduleResponse>");
	if (keepRootTag)
		buffer.append("</WUScheduleResponse>");
}

bool CWUScheduleResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWUScheduleResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWUScheduleResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWUScheduleResponse *createWUScheduleResponse(const char *serv){return ((IEspWUScheduleResponse *)new CWUScheduleResponse(serv));}
extern "C"  IClientWUScheduleResponse *createClientWUScheduleResponse(const char *serv){return ((IClientWUScheduleResponse *)new CWUScheduleResponse(serv));}

//=======================================================
// class CWUPushEventRequest Implementation
//=======================================================

CWUPushEventRequest::CWUPushEventRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_EventName("", nilRemove),m_EventText("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUPushEventRequest::CWUPushEventRequest(const char *serviceName, const char *bc)
	: m_EventName("", nilRemove),m_EventText("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventRequest");
}

CWUPushEventRequest::CWUPushEventRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EventName("", nilRemove),m_EventText("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUPushEventRequest::CWUPushEventRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EventName("", nilRemove),m_EventText("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUPushEventRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventText\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUPushEventRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUPushEventRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUPushEventRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventName");
	form.appendf("  <tr><td><b>EventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventText");
	form.appendf("  <tr><td><b>EventText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUPushEventRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUPushEventRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_EventName.marshall(rpc_resp, "EventName", "", "", "");
	m_EventText.marshall(rpc_resp, "EventText", "", "", "");
}


void CWUPushEventRequest::copy(CWUPushEventRequest &from)
{
	m_EventName.copy(from.m_EventName);
	m_EventText.copy(from.m_EventText);
}


void CWUPushEventRequest::copy(IConstWUPushEventRequest &ifrom)
{
	setEventName(ifrom.getEventName());
	setEventText(ifrom.getEventText());
}


void CWUPushEventRequest::getAttributes(IProperties &attributes)
{
}


void CWUPushEventRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_EventName.toStr(ctx, buffer, "EventName", "", true, "", "");
	m_EventText.toStr(ctx, buffer, "EventText", "", true, "", "");
}


void CWUPushEventRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUPushEventRequest::serializer(IEspContext* ctx, IConstWUPushEventRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUPushEventRequest>");
	// field EventName
	{
		const char* s = src.getEventName();
		if (s && *s)
		{
			buffer.append("<EventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventName>");
		}
	}
	// field EventText
	{
		const char* s = src.getEventText();
		if (s && *s)
		{
			buffer.append("<EventText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventText>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUPushEventRequest>");
}

bool CWUPushEventRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_EventName.unmarshall(rpc_request, "EventName", basepath);
	hasValue |= m_EventText.unmarshall(rpc_request, "EventText", basepath);
	return hasValue;
}

bool CWUPushEventRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EventName.unmarshall(ctx, soapval, "EventName");
	hasValue |= m_EventText.unmarshall(ctx, soapval, "EventText");
	return hasValue;
}

bool CWUPushEventRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EventName.unmarshall(ctx, params, attachments, "EventName", basepath);
	hasValue |= m_EventText.unmarshall(ctx, params, attachments, "EventText", basepath);
	return hasValue;
}

const char * CWUPushEventRequest::getEventName() { return m_EventName.query();}
const char * CWUPushEventRequest::getEventText() { return m_EventText.query();}
void CWUPushEventRequest::setEventName(const char * val){ m_EventName.set(val); }
void CWUPushEventRequest::setEventText(const char * val){ m_EventText.set(val); }
extern "C"  IEspWUPushEventRequest *createWUPushEventRequest(const char *serv){return ((IEspWUPushEventRequest *)new CWUPushEventRequest(serv));}
extern "C"  IClientWUPushEventRequest *createClientWUPushEventRequest(const char *serv){return ((IClientWUPushEventRequest *)new CWUPushEventRequest(serv));}

//=======================================================
// class CWUPushEventResponse Implementation
//=======================================================

CWUPushEventResponse::CWUPushEventResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUPushEventResponse::CWUPushEventResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventResponse");
}

CWUPushEventResponse::CWUPushEventResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUPushEventResponse::CWUPushEventResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPushEventResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUPushEventResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUPushEventResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUPushEventResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUPushEventResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUPushEventResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUPushEventResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWUPushEventResponse::copy(CWUPushEventResponse &from)
{
}


void CWUPushEventResponse::copy(IConstWUPushEventResponse &ifrom)
{
}


void CWUPushEventResponse::getAttributes(IProperties &attributes)
{
}


void CWUPushEventResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWUPushEventResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUPushEventResponse::serializer(IEspContext* ctx, IConstWUPushEventResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUPushEventResponse>");
	if (keepRootTag)
		buffer.append("</WUPushEventResponse>");
}

bool CWUPushEventResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWUPushEventResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWUPushEventResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWUPushEventResponse *createWUPushEventResponse(const char *serv){return ((IEspWUPushEventResponse *)new CWUPushEventResponse(serv));}
extern "C"  IClientWUPushEventResponse *createClientWUPushEventResponse(const char *serv){return ((IClientWUPushEventResponse *)new CWUPushEventResponse(serv));}

//=======================================================
// class CWUInfoRequest Implementation
//=======================================================

CWUInfoRequest::CWUInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_TruncateEclTo64k(1, nilIgnore,false),m_Type(nilIgnore),m_IncludeExceptions(1, nilIgnore,false),m_IncludeGraphs(1, nilIgnore,false),m_IncludeSourceFiles(1, nilIgnore,false),m_IncludeResults(1, nilIgnore,false),m_IncludeResultsViewNames(0, nilIgnore,false),m_IncludeVariables(1, nilIgnore,false),m_IncludeTimers(1, nilIgnore,false),m_IncludeDebugValues(1, nilIgnore,false),m_IncludeApplicationValues(1, nilIgnore,false),m_IncludeWorkflows(1, nilIgnore,false),m_IncludeXmlSchemas(0, nilIgnore,false),m_IncludeResourceURLs(0, nilIgnore,false),m_IncludeECL(1, nilIgnore,false),m_IncludeHelpers(1, nilIgnore,false),m_IncludeAllowedClusters(1, nilIgnore,false),m_IncludeTotalClusterTime(1, nilIgnore,false),m_SuppressResultSchemas(0, nilIgnore,false),m_ThorSlaveIP(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUInfoRequest::CWUInfoRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_TruncateEclTo64k(1, nilIgnore,false),m_Type(nilIgnore),m_IncludeExceptions(1, nilIgnore,false),m_IncludeGraphs(1, nilIgnore,false),m_IncludeSourceFiles(1, nilIgnore,false),m_IncludeResults(1, nilIgnore,false),m_IncludeResultsViewNames(0, nilIgnore,false),m_IncludeVariables(1, nilIgnore,false),m_IncludeTimers(1, nilIgnore,false),m_IncludeDebugValues(1, nilIgnore,false),m_IncludeApplicationValues(1, nilIgnore,false),m_IncludeWorkflows(1, nilIgnore,false),m_IncludeXmlSchemas(0, nilIgnore,false),m_IncludeResourceURLs(0, nilIgnore,false),m_IncludeECL(1, nilIgnore,false),m_IncludeHelpers(1, nilIgnore,false),m_IncludeAllowedClusters(1, nilIgnore,false),m_IncludeTotalClusterTime(1, nilIgnore,false),m_SuppressResultSchemas(0, nilIgnore,false),m_ThorSlaveIP(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoRequest");
}

CWUInfoRequest::CWUInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_TruncateEclTo64k(1, nilIgnore,false),m_Type(nilIgnore),m_IncludeExceptions(1, nilIgnore,false),m_IncludeGraphs(1, nilIgnore,false),m_IncludeSourceFiles(1, nilIgnore,false),m_IncludeResults(1, nilIgnore,false),m_IncludeResultsViewNames(0, nilIgnore,false),m_IncludeVariables(1, nilIgnore,false),m_IncludeTimers(1, nilIgnore,false),m_IncludeDebugValues(1, nilIgnore,false),m_IncludeApplicationValues(1, nilIgnore,false),m_IncludeWorkflows(1, nilIgnore,false),m_IncludeXmlSchemas(0, nilIgnore,false),m_IncludeResourceURLs(0, nilIgnore,false),m_IncludeECL(1, nilIgnore,false),m_IncludeHelpers(1, nilIgnore,false),m_IncludeAllowedClusters(1, nilIgnore,false),m_IncludeTotalClusterTime(1, nilIgnore,false),m_SuppressResultSchemas(0, nilIgnore,false),m_ThorSlaveIP(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUInfoRequest::CWUInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_TruncateEclTo64k(1, nilIgnore,false),m_Type(nilIgnore),m_IncludeExceptions(1, nilIgnore,false),m_IncludeGraphs(1, nilIgnore,false),m_IncludeSourceFiles(1, nilIgnore,false),m_IncludeResults(1, nilIgnore,false),m_IncludeResultsViewNames(0, nilIgnore,false),m_IncludeVariables(1, nilIgnore,false),m_IncludeTimers(1, nilIgnore,false),m_IncludeDebugValues(1, nilIgnore,false),m_IncludeApplicationValues(1, nilIgnore,false),m_IncludeWorkflows(1, nilIgnore,false),m_IncludeXmlSchemas(0, nilIgnore,false),m_IncludeResourceURLs(0, nilIgnore,false),m_IncludeECL(1, nilIgnore,false),m_IncludeHelpers(1, nilIgnore,false),m_IncludeAllowedClusters(1, nilIgnore,false),m_IncludeTotalClusterTime(1, nilIgnore,false),m_SuppressResultSchemas(0, nilIgnore,false),m_ThorSlaveIP(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"TruncateEclTo64k\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUInfoRequest","Type")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeExceptions")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeExceptions\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeGraphs")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeGraphs\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeSourceFiles")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeSourceFiles\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeResults")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeResults\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeResultsViewNames")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeResultsViewNames\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeVariables")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeVariables\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeTimers")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeTimers\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeDebugValues")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeDebugValues\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeApplicationValues")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeApplicationValues\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeWorkflows")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeWorkflows\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeXmlSchemas")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeXmlSchemas\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeResourceURLs")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeResourceURLs\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeECL")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeECL\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeHelpers")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeHelpers\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeAllowedClusters")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeAllowedClusters\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","IncludeTotalClusterTime")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeTotalClusterTime\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","SuppressResultSchemas")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"SuppressResultSchemas\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUInfoRequest","ThorSlaveIP")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ThorSlaveIP\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUInfoRequest","Type",1.01);
	info.addMinVersion("WUInfoRequest","IncludeExceptions",1.16);
	info.addMinVersion("WUInfoRequest","IncludeGraphs",1.16);
	info.addMinVersion("WUInfoRequest","IncludeSourceFiles",1.16);
	info.addMinVersion("WUInfoRequest","IncludeResults",1.16);
	info.addMinVersion("WUInfoRequest","IncludeResultsViewNames",1.34);
	info.addMinVersion("WUInfoRequest","IncludeVariables",1.16);
	info.addMinVersion("WUInfoRequest","IncludeTimers",1.16);
	info.addMinVersion("WUInfoRequest","IncludeDebugValues",1.16);
	info.addMinVersion("WUInfoRequest","IncludeApplicationValues",1.16);
	info.addMinVersion("WUInfoRequest","IncludeWorkflows",1.16);
	info.addMinVersion("WUInfoRequest","IncludeXmlSchemas",1.39);
	info.addMinVersion("WUInfoRequest","IncludeResourceURLs",1.47);
	info.addMinVersion("WUInfoRequest","IncludeECL",1.66);
	info.addMinVersion("WUInfoRequest","IncludeHelpers",1.66);
	info.addMinVersion("WUInfoRequest","IncludeAllowedClusters",1.66);
	info.addMinVersion("WUInfoRequest","IncludeTotalClusterTime",1.73);
	info.addMinVersion("WUInfoRequest","SuppressResultSchemas",1.16);
	info.addMinVersion("WUInfoRequest","ThorSlaveIP",1.25);
}

StringBuffer &CWUInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TruncateEclTo64k");
	
	form.appendf("  <tr><td><b>TruncateEclTo64k? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUInfoRequest","Type")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Type");
		form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUInfoRequest","IncludeExceptions")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeExceptions");
		
	form.appendf("  <tr><td><b>IncludeExceptions? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeGraphs")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeGraphs");
		
	form.appendf("  <tr><td><b>IncludeGraphs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeSourceFiles")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeSourceFiles");
		
	form.appendf("  <tr><td><b>IncludeSourceFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeResults")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeResults");
		
	form.appendf("  <tr><td><b>IncludeResults? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeResultsViewNames")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeResultsViewNames");
		
	form.appendf("  <tr><td><b>IncludeResultsViewNames? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeVariables")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeVariables");
		
	form.appendf("  <tr><td><b>IncludeVariables? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeTimers")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeTimers");
		
	form.appendf("  <tr><td><b>IncludeTimers? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeDebugValues")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeDebugValues");
		
	form.appendf("  <tr><td><b>IncludeDebugValues? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeApplicationValues")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeApplicationValues");
		
	form.appendf("  <tr><td><b>IncludeApplicationValues? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeWorkflows")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeWorkflows");
		
	form.appendf("  <tr><td><b>IncludeWorkflows? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeXmlSchemas")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeXmlSchemas");
		
	form.appendf("  <tr><td><b>IncludeXmlSchemas? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeResourceURLs")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeResourceURLs");
		
	form.appendf("  <tr><td><b>IncludeResourceURLs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeECL")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeECL");
		
	form.appendf("  <tr><td><b>IncludeECL? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeHelpers")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeHelpers");
		
	form.appendf("  <tr><td><b>IncludeHelpers? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeAllowedClusters")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeAllowedClusters");
		
	form.appendf("  <tr><td><b>IncludeAllowedClusters? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","IncludeTotalClusterTime")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeTotalClusterTime");
		
	form.appendf("  <tr><td><b>IncludeTotalClusterTime? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","SuppressResultSchemas")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SuppressResultSchemas");
		
	form.appendf("  <tr><td><b>SuppressResultSchemas? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUInfoRequest","ThorSlaveIP")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ThorSlaveIP");
		form.appendf("  <tr><td><b>ThorSlaveIP: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_TruncateEclTo64k.marshall(rpc_resp, "TruncateEclTo64k", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Type.marshall(rpc_resp, "Type", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeExceptions.marshall(rpc_resp, "IncludeExceptions", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeGraphs.marshall(rpc_resp, "IncludeGraphs", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeSourceFiles.marshall(rpc_resp, "IncludeSourceFiles", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeResults.marshall(rpc_resp, "IncludeResults", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_IncludeResultsViewNames.marshall(rpc_resp, "IncludeResultsViewNames", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeVariables.marshall(rpc_resp, "IncludeVariables", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeTimers.marshall(rpc_resp, "IncludeTimers", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeDebugValues.marshall(rpc_resp, "IncludeDebugValues", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeApplicationValues.marshall(rpc_resp, "IncludeApplicationValues", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeWorkflows.marshall(rpc_resp, "IncludeWorkflows", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_IncludeXmlSchemas.marshall(rpc_resp, "IncludeXmlSchemas", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.47))
		m_IncludeResourceURLs.marshall(rpc_resp, "IncludeResourceURLs", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.66))
		m_IncludeECL.marshall(rpc_resp, "IncludeECL", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.66))
		m_IncludeHelpers.marshall(rpc_resp, "IncludeHelpers", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.66))
		m_IncludeAllowedClusters.marshall(rpc_resp, "IncludeAllowedClusters", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_IncludeTotalClusterTime.marshall(rpc_resp, "IncludeTotalClusterTime", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_SuppressResultSchemas.marshall(rpc_resp, "SuppressResultSchemas", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.25))
		m_ThorSlaveIP.marshall(rpc_resp, "ThorSlaveIP", "", "", "");
}


void CWUInfoRequest::copy(CWUInfoRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_TruncateEclTo64k.copy(from.m_TruncateEclTo64k);
	m_Type.copy(from.m_Type);
	m_IncludeExceptions.copy(from.m_IncludeExceptions);
	m_IncludeGraphs.copy(from.m_IncludeGraphs);
	m_IncludeSourceFiles.copy(from.m_IncludeSourceFiles);
	m_IncludeResults.copy(from.m_IncludeResults);
	m_IncludeResultsViewNames.copy(from.m_IncludeResultsViewNames);
	m_IncludeVariables.copy(from.m_IncludeVariables);
	m_IncludeTimers.copy(from.m_IncludeTimers);
	m_IncludeDebugValues.copy(from.m_IncludeDebugValues);
	m_IncludeApplicationValues.copy(from.m_IncludeApplicationValues);
	m_IncludeWorkflows.copy(from.m_IncludeWorkflows);
	m_IncludeXmlSchemas.copy(from.m_IncludeXmlSchemas);
	m_IncludeResourceURLs.copy(from.m_IncludeResourceURLs);
	m_IncludeECL.copy(from.m_IncludeECL);
	m_IncludeHelpers.copy(from.m_IncludeHelpers);
	m_IncludeAllowedClusters.copy(from.m_IncludeAllowedClusters);
	m_IncludeTotalClusterTime.copy(from.m_IncludeTotalClusterTime);
	m_SuppressResultSchemas.copy(from.m_SuppressResultSchemas);
	m_ThorSlaveIP.copy(from.m_ThorSlaveIP);
}


void CWUInfoRequest::copy(IConstWUInfoRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setTruncateEclTo64k(ifrom.getTruncateEclTo64k());
	setType(ifrom.getType());
	setIncludeExceptions(ifrom.getIncludeExceptions());
	setIncludeGraphs(ifrom.getIncludeGraphs());
	setIncludeSourceFiles(ifrom.getIncludeSourceFiles());
	setIncludeResults(ifrom.getIncludeResults());
	setIncludeResultsViewNames(ifrom.getIncludeResultsViewNames());
	setIncludeVariables(ifrom.getIncludeVariables());
	setIncludeTimers(ifrom.getIncludeTimers());
	setIncludeDebugValues(ifrom.getIncludeDebugValues());
	setIncludeApplicationValues(ifrom.getIncludeApplicationValues());
	setIncludeWorkflows(ifrom.getIncludeWorkflows());
	setIncludeXmlSchemas(ifrom.getIncludeXmlSchemas());
	setIncludeResourceURLs(ifrom.getIncludeResourceURLs());
	setIncludeECL(ifrom.getIncludeECL());
	setIncludeHelpers(ifrom.getIncludeHelpers());
	setIncludeAllowedClusters(ifrom.getIncludeAllowedClusters());
	setIncludeTotalClusterTime(ifrom.getIncludeTotalClusterTime());
	setSuppressResultSchemas(ifrom.getSuppressResultSchemas());
	setThorSlaveIP(ifrom.getThorSlaveIP());
}


void CWUInfoRequest::getAttributes(IProperties &attributes)
{
}


void CWUInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_TruncateEclTo64k.toStr(ctx, buffer, "TruncateEclTo64k", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.01))
		m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeExceptions.toStr(ctx, buffer, "IncludeExceptions", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeGraphs.toStr(ctx, buffer, "IncludeGraphs", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeSourceFiles.toStr(ctx, buffer, "IncludeSourceFiles", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeResults.toStr(ctx, buffer, "IncludeResults", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.34))
		m_IncludeResultsViewNames.toStr(ctx, buffer, "IncludeResultsViewNames", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeVariables.toStr(ctx, buffer, "IncludeVariables", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeTimers.toStr(ctx, buffer, "IncludeTimers", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeDebugValues.toStr(ctx, buffer, "IncludeDebugValues", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeApplicationValues.toStr(ctx, buffer, "IncludeApplicationValues", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_IncludeWorkflows.toStr(ctx, buffer, "IncludeWorkflows", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.39))
		m_IncludeXmlSchemas.toStr(ctx, buffer, "IncludeXmlSchemas", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.47))
		m_IncludeResourceURLs.toStr(ctx, buffer, "IncludeResourceURLs", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.66))
		m_IncludeECL.toStr(ctx, buffer, "IncludeECL", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.66))
		m_IncludeHelpers.toStr(ctx, buffer, "IncludeHelpers", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.66))
		m_IncludeAllowedClusters.toStr(ctx, buffer, "IncludeAllowedClusters", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_IncludeTotalClusterTime.toStr(ctx, buffer, "IncludeTotalClusterTime", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.16))
		m_SuppressResultSchemas.toStr(ctx, buffer, "SuppressResultSchemas", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.25))
		m_ThorSlaveIP.toStr(ctx, buffer, "ThorSlaveIP", "", true, "", "");
}


void CWUInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUInfoRequest::serializer(IEspContext* ctx, IConstWUInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUInfoRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field TruncateEclTo64k
	{
		bool b = src.getTruncateEclTo64k();
		if (b)
			buffer.appendf("<TruncateEclTo64k>1</TruncateEclTo64k>");
	}
	// field Type
	if ((clientVer==-1.0 || clientVer>=1.01))
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field IncludeExceptions
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeExceptions();
		if (b)
			buffer.appendf("<IncludeExceptions>1</IncludeExceptions>");
	}
	// field IncludeGraphs
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeGraphs();
		if (b)
			buffer.appendf("<IncludeGraphs>1</IncludeGraphs>");
	}
	// field IncludeSourceFiles
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeSourceFiles();
		if (b)
			buffer.appendf("<IncludeSourceFiles>1</IncludeSourceFiles>");
	}
	// field IncludeResults
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeResults();
		if (b)
			buffer.appendf("<IncludeResults>1</IncludeResults>");
	}
	// field IncludeResultsViewNames
	if ((clientVer==-1.0 || clientVer>=1.34))
	{
		bool b = src.getIncludeResultsViewNames();
		if (b)
			buffer.appendf("<IncludeResultsViewNames>1</IncludeResultsViewNames>");
	}
	// field IncludeVariables
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeVariables();
		if (b)
			buffer.appendf("<IncludeVariables>1</IncludeVariables>");
	}
	// field IncludeTimers
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeTimers();
		if (b)
			buffer.appendf("<IncludeTimers>1</IncludeTimers>");
	}
	// field IncludeDebugValues
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeDebugValues();
		if (b)
			buffer.appendf("<IncludeDebugValues>1</IncludeDebugValues>");
	}
	// field IncludeApplicationValues
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeApplicationValues();
		if (b)
			buffer.appendf("<IncludeApplicationValues>1</IncludeApplicationValues>");
	}
	// field IncludeWorkflows
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getIncludeWorkflows();
		if (b)
			buffer.appendf("<IncludeWorkflows>1</IncludeWorkflows>");
	}
	// field IncludeXmlSchemas
	if ((clientVer==-1.0 || clientVer>=1.39))
	{
		bool b = src.getIncludeXmlSchemas();
		if (b)
			buffer.appendf("<IncludeXmlSchemas>1</IncludeXmlSchemas>");
	}
	// field IncludeResourceURLs
	if ((clientVer==-1.0 || clientVer>=1.47))
	{
		bool b = src.getIncludeResourceURLs();
		if (b)
			buffer.appendf("<IncludeResourceURLs>1</IncludeResourceURLs>");
	}
	// field IncludeECL
	if ((clientVer==-1.0 || clientVer>=1.66))
	{
		bool b = src.getIncludeECL();
		if (b)
			buffer.appendf("<IncludeECL>1</IncludeECL>");
	}
	// field IncludeHelpers
	if ((clientVer==-1.0 || clientVer>=1.66))
	{
		bool b = src.getIncludeHelpers();
		if (b)
			buffer.appendf("<IncludeHelpers>1</IncludeHelpers>");
	}
	// field IncludeAllowedClusters
	if ((clientVer==-1.0 || clientVer>=1.66))
	{
		bool b = src.getIncludeAllowedClusters();
		if (b)
			buffer.appendf("<IncludeAllowedClusters>1</IncludeAllowedClusters>");
	}
	// field IncludeTotalClusterTime
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		bool b = src.getIncludeTotalClusterTime();
		if (b)
			buffer.appendf("<IncludeTotalClusterTime>1</IncludeTotalClusterTime>");
	}
	// field SuppressResultSchemas
	if ((clientVer==-1.0 || clientVer>=1.16))
	{
		bool b = src.getSuppressResultSchemas();
		if (b)
			buffer.appendf("<SuppressResultSchemas>1</SuppressResultSchemas>");
	}
	// field ThorSlaveIP
	if ((clientVer==-1.0 || clientVer>=1.25))
	{
		const char* s = src.getThorSlaveIP();
		if (s && *s)
		{
			buffer.append("<ThorSlaveIP>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ThorSlaveIP>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUInfoRequest>");
}

bool CWUInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_TruncateEclTo64k.unmarshall(rpc_request, "TruncateEclTo64k", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_IncludeExceptions.unmarshall(rpc_request, "IncludeExceptions", basepath);
	hasValue |= m_IncludeGraphs.unmarshall(rpc_request, "IncludeGraphs", basepath);
	hasValue |= m_IncludeSourceFiles.unmarshall(rpc_request, "IncludeSourceFiles", basepath);
	hasValue |= m_IncludeResults.unmarshall(rpc_request, "IncludeResults", basepath);
	hasValue |= m_IncludeResultsViewNames.unmarshall(rpc_request, "IncludeResultsViewNames", basepath);
	hasValue |= m_IncludeVariables.unmarshall(rpc_request, "IncludeVariables", basepath);
	hasValue |= m_IncludeTimers.unmarshall(rpc_request, "IncludeTimers", basepath);
	hasValue |= m_IncludeDebugValues.unmarshall(rpc_request, "IncludeDebugValues", basepath);
	hasValue |= m_IncludeApplicationValues.unmarshall(rpc_request, "IncludeApplicationValues", basepath);
	hasValue |= m_IncludeWorkflows.unmarshall(rpc_request, "IncludeWorkflows", basepath);
	hasValue |= m_IncludeXmlSchemas.unmarshall(rpc_request, "IncludeXmlSchemas", basepath);
	hasValue |= m_IncludeResourceURLs.unmarshall(rpc_request, "IncludeResourceURLs", basepath);
	hasValue |= m_IncludeECL.unmarshall(rpc_request, "IncludeECL", basepath);
	hasValue |= m_IncludeHelpers.unmarshall(rpc_request, "IncludeHelpers", basepath);
	hasValue |= m_IncludeAllowedClusters.unmarshall(rpc_request, "IncludeAllowedClusters", basepath);
	hasValue |= m_IncludeTotalClusterTime.unmarshall(rpc_request, "IncludeTotalClusterTime", basepath);
	hasValue |= m_SuppressResultSchemas.unmarshall(rpc_request, "SuppressResultSchemas", basepath);
	hasValue |= m_ThorSlaveIP.unmarshall(rpc_request, "ThorSlaveIP", basepath);
	return hasValue;
}

bool CWUInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_TruncateEclTo64k.unmarshall(ctx, soapval, "TruncateEclTo64k");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_IncludeExceptions.unmarshall(ctx, soapval, "IncludeExceptions");
	hasValue |= m_IncludeGraphs.unmarshall(ctx, soapval, "IncludeGraphs");
	hasValue |= m_IncludeSourceFiles.unmarshall(ctx, soapval, "IncludeSourceFiles");
	hasValue |= m_IncludeResults.unmarshall(ctx, soapval, "IncludeResults");
	hasValue |= m_IncludeResultsViewNames.unmarshall(ctx, soapval, "IncludeResultsViewNames");
	hasValue |= m_IncludeVariables.unmarshall(ctx, soapval, "IncludeVariables");
	hasValue |= m_IncludeTimers.unmarshall(ctx, soapval, "IncludeTimers");
	hasValue |= m_IncludeDebugValues.unmarshall(ctx, soapval, "IncludeDebugValues");
	hasValue |= m_IncludeApplicationValues.unmarshall(ctx, soapval, "IncludeApplicationValues");
	hasValue |= m_IncludeWorkflows.unmarshall(ctx, soapval, "IncludeWorkflows");
	hasValue |= m_IncludeXmlSchemas.unmarshall(ctx, soapval, "IncludeXmlSchemas");
	hasValue |= m_IncludeResourceURLs.unmarshall(ctx, soapval, "IncludeResourceURLs");
	hasValue |= m_IncludeECL.unmarshall(ctx, soapval, "IncludeECL");
	hasValue |= m_IncludeHelpers.unmarshall(ctx, soapval, "IncludeHelpers");
	hasValue |= m_IncludeAllowedClusters.unmarshall(ctx, soapval, "IncludeAllowedClusters");
	hasValue |= m_IncludeTotalClusterTime.unmarshall(ctx, soapval, "IncludeTotalClusterTime");
	hasValue |= m_SuppressResultSchemas.unmarshall(ctx, soapval, "SuppressResultSchemas");
	hasValue |= m_ThorSlaveIP.unmarshall(ctx, soapval, "ThorSlaveIP");
	return hasValue;
}

bool CWUInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_TruncateEclTo64k.unmarshall(ctx, params, attachments, "TruncateEclTo64k", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_IncludeExceptions.unmarshall(ctx, params, attachments, "IncludeExceptions", basepath);
	hasValue |= m_IncludeGraphs.unmarshall(ctx, params, attachments, "IncludeGraphs", basepath);
	hasValue |= m_IncludeSourceFiles.unmarshall(ctx, params, attachments, "IncludeSourceFiles", basepath);
	hasValue |= m_IncludeResults.unmarshall(ctx, params, attachments, "IncludeResults", basepath);
	hasValue |= m_IncludeResultsViewNames.unmarshall(ctx, params, attachments, "IncludeResultsViewNames", basepath);
	hasValue |= m_IncludeVariables.unmarshall(ctx, params, attachments, "IncludeVariables", basepath);
	hasValue |= m_IncludeTimers.unmarshall(ctx, params, attachments, "IncludeTimers", basepath);
	hasValue |= m_IncludeDebugValues.unmarshall(ctx, params, attachments, "IncludeDebugValues", basepath);
	hasValue |= m_IncludeApplicationValues.unmarshall(ctx, params, attachments, "IncludeApplicationValues", basepath);
	hasValue |= m_IncludeWorkflows.unmarshall(ctx, params, attachments, "IncludeWorkflows", basepath);
	hasValue |= m_IncludeXmlSchemas.unmarshall(ctx, params, attachments, "IncludeXmlSchemas", basepath);
	hasValue |= m_IncludeResourceURLs.unmarshall(ctx, params, attachments, "IncludeResourceURLs", basepath);
	hasValue |= m_IncludeECL.unmarshall(ctx, params, attachments, "IncludeECL", basepath);
	hasValue |= m_IncludeHelpers.unmarshall(ctx, params, attachments, "IncludeHelpers", basepath);
	hasValue |= m_IncludeAllowedClusters.unmarshall(ctx, params, attachments, "IncludeAllowedClusters", basepath);
	hasValue |= m_IncludeTotalClusterTime.unmarshall(ctx, params, attachments, "IncludeTotalClusterTime", basepath);
	hasValue |= m_SuppressResultSchemas.unmarshall(ctx, params, attachments, "SuppressResultSchemas", basepath);
	hasValue |= m_ThorSlaveIP.unmarshall(ctx, params, attachments, "ThorSlaveIP", basepath);
	return hasValue;
}

const char * CWUInfoRequest::getWuid() { return m_Wuid.query();}
bool CWUInfoRequest::getTruncateEclTo64k() { return m_TruncateEclTo64k;}
const char * CWUInfoRequest::getType() { return m_Type.query();}
bool CWUInfoRequest::getIncludeExceptions() { return m_IncludeExceptions;}
bool CWUInfoRequest::getIncludeGraphs() { return m_IncludeGraphs;}
bool CWUInfoRequest::getIncludeSourceFiles() { return m_IncludeSourceFiles;}
bool CWUInfoRequest::getIncludeResults() { return m_IncludeResults;}
bool CWUInfoRequest::getIncludeResultsViewNames() { return m_IncludeResultsViewNames;}
bool CWUInfoRequest::getIncludeVariables() { return m_IncludeVariables;}
bool CWUInfoRequest::getIncludeTimers() { return m_IncludeTimers;}
bool CWUInfoRequest::getIncludeDebugValues() { return m_IncludeDebugValues;}
bool CWUInfoRequest::getIncludeApplicationValues() { return m_IncludeApplicationValues;}
bool CWUInfoRequest::getIncludeWorkflows() { return m_IncludeWorkflows;}
bool CWUInfoRequest::getIncludeXmlSchemas() { return m_IncludeXmlSchemas;}
bool CWUInfoRequest::getIncludeResourceURLs() { return m_IncludeResourceURLs;}
bool CWUInfoRequest::getIncludeECL() { return m_IncludeECL;}
bool CWUInfoRequest::getIncludeHelpers() { return m_IncludeHelpers;}
bool CWUInfoRequest::getIncludeAllowedClusters() { return m_IncludeAllowedClusters;}
bool CWUInfoRequest::getIncludeTotalClusterTime() { return m_IncludeTotalClusterTime;}
bool CWUInfoRequest::getSuppressResultSchemas() { return m_SuppressResultSchemas;}
const char * CWUInfoRequest::getThorSlaveIP() { return m_ThorSlaveIP.query();}
void CWUInfoRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUInfoRequest::setTruncateEclTo64k(bool val){ m_TruncateEclTo64k=val; }
void CWUInfoRequest::setType(const char * val){ m_Type.set(val); }
void CWUInfoRequest::setIncludeExceptions(bool val){ m_IncludeExceptions=val; }
void CWUInfoRequest::setIncludeGraphs(bool val){ m_IncludeGraphs=val; }
void CWUInfoRequest::setIncludeSourceFiles(bool val){ m_IncludeSourceFiles=val; }
void CWUInfoRequest::setIncludeResults(bool val){ m_IncludeResults=val; }
void CWUInfoRequest::setIncludeResultsViewNames(bool val){ m_IncludeResultsViewNames=val; }
void CWUInfoRequest::setIncludeVariables(bool val){ m_IncludeVariables=val; }
void CWUInfoRequest::setIncludeTimers(bool val){ m_IncludeTimers=val; }
void CWUInfoRequest::setIncludeDebugValues(bool val){ m_IncludeDebugValues=val; }
void CWUInfoRequest::setIncludeApplicationValues(bool val){ m_IncludeApplicationValues=val; }
void CWUInfoRequest::setIncludeWorkflows(bool val){ m_IncludeWorkflows=val; }
void CWUInfoRequest::setIncludeXmlSchemas(bool val){ m_IncludeXmlSchemas=val; }
void CWUInfoRequest::setIncludeResourceURLs(bool val){ m_IncludeResourceURLs=val; }
void CWUInfoRequest::setIncludeECL(bool val){ m_IncludeECL=val; }
void CWUInfoRequest::setIncludeHelpers(bool val){ m_IncludeHelpers=val; }
void CWUInfoRequest::setIncludeAllowedClusters(bool val){ m_IncludeAllowedClusters=val; }
void CWUInfoRequest::setIncludeTotalClusterTime(bool val){ m_IncludeTotalClusterTime=val; }
void CWUInfoRequest::setSuppressResultSchemas(bool val){ m_SuppressResultSchemas=val; }
void CWUInfoRequest::setThorSlaveIP(const char * val){ m_ThorSlaveIP.set(val); }
extern "C"  IEspWUInfoRequest *createWUInfoRequest(const char *serv){return ((IEspWUInfoRequest *)new CWUInfoRequest(serv));}
extern "C"  IClientWUInfoRequest *createClientWUInfoRequest(const char *serv){return ((IClientWUInfoRequest *)new CWUInfoRequest(serv));}

//=======================================================
// class CWUInfoResponse Implementation
//=======================================================

CWUInfoResponse::CWUInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Workunit(serviceName, nilIgnore),m_AutoRefresh(0, nilIgnore,false),m_CanCompile(nilIgnore),m_ThorSlaveIP(nilIgnore),m_ResultViews(nilIgnore),m_SecMethod(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUInfoResponse::CWUInfoResponse(const char *serviceName, const char *bc)
	: m_Workunit(serviceName, nilIgnore),m_AutoRefresh(0, nilIgnore,false),m_CanCompile(nilIgnore),m_ThorSlaveIP(nilIgnore),m_ResultViews(nilIgnore),m_SecMethod(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoResponse");
}

CWUInfoResponse::CWUInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Workunit(serviceName, nilIgnore),m_AutoRefresh(0, nilIgnore,false),m_CanCompile(nilIgnore),m_ThorSlaveIP(nilIgnore),m_ResultViews(nilIgnore),m_SecMethod(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUInfoResponse::CWUInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Workunit(serviceName, nilIgnore),m_AutoRefresh(0, nilIgnore,false),m_CanCompile(nilIgnore),m_ThorSlaveIP(nilIgnore),m_ResultViews(nilIgnore),m_SecMethod(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunit\" type=\"tns:ECLWorkunit\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AutoRefresh\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CanCompile\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUInfoResponse","ThorSlaveIP")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ThorSlaveIP\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUInfoResponse","ResultViews")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ResultViews\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"View\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("WUInfoResponse","SecMethod")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SecMethod\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLWorkunit::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUInfoResponse","ThorSlaveIP",1.25);
	info.addMinVersion("WUInfoResponse","ResultViews",1.34);
	info.addMinVersion("WUInfoResponse","SecMethod",1.54);
	if (!added.getValue("ECLWorkunit"))
	{
		added.setValue("ECLWorkunit",1);
		CECLWorkunit::getMapInfo(info,added);
	}
}

StringBuffer &CWUInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunit");
	form.append("<tr>").append("<td><b>Workunit: </b></td><td><hr/>");
	CECLWorkunit::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("AutoRefresh");
	form.appendf("  <tr><td><b>AutoRefresh: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CanCompile");
	
	form.appendf("  <tr><td><b>CanCompile? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUInfoResponse","ThorSlaveIP")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ThorSlaveIP");
		form.appendf("  <tr><td><b>ThorSlaveIP: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUInfoResponse","ResultViews")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ResultViews");
		form.appendf("<tr><td><b>ResultViews: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("WUInfoResponse","SecMethod")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SecMethod");
		form.appendf("  <tr><td><b>SecMethod: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Workunit.marshall(rpc_resp, "Workunit", "", "", "");
		m_AutoRefresh.marshall(rpc_resp, "AutoRefresh", "", "", "");
		m_CanCompile.marshall(rpc_resp, "CanCompile", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.25))
			m_ThorSlaveIP.marshall(rpc_resp, "ThorSlaveIP", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.34))
			m_ResultViews.marshall(rpc_resp, "ResultViews", "View");
		if ((clientVer==-1.0 || clientVer>=1.54))
			m_SecMethod.marshall(rpc_resp, "SecMethod", "", "", "");
	}
}


void CWUInfoResponse::copy(CWUInfoResponse &from)
{
	m_Workunit.copy(from.m_Workunit);
	m_AutoRefresh.copy(from.m_AutoRefresh);
	m_CanCompile.copy(from.m_CanCompile);
	m_ThorSlaveIP.copy(from.m_ThorSlaveIP);
	m_ResultViews.copy(from.m_ResultViews);
	m_SecMethod.copy(from.m_SecMethod);
}


void CWUInfoResponse::copy(IConstWUInfoResponse &ifrom)
{
	setWorkunit(ifrom.getWorkunit());
	setAutoRefresh(ifrom.getAutoRefresh());
	setCanCompile(ifrom.getCanCompile());
	setThorSlaveIP(ifrom.getThorSlaveIP());
	setResultViews(ifrom.getResultViews());
	setSecMethod(ifrom.getSecMethod());
}


void CWUInfoResponse::getAttributes(IProperties &attributes)
{
}


void CWUInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Workunit.toStr(ctx, buffer, "Workunit", "", false, "", "");
		m_AutoRefresh.toStr(ctx, buffer, "AutoRefresh", "", true, "", "");
		m_CanCompile.toStr(ctx, buffer, "CanCompile", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.25))
			m_ThorSlaveIP.toStr(ctx, buffer, "ThorSlaveIP", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.34))
			m_ResultViews.toStr(ctx, buffer, "ResultViews", "View");
		if ((clientVer==-1.0 || clientVer>=1.54))
			m_SecMethod.toStr(ctx, buffer, "SecMethod", "", true, "", "");
	}
}


void CWUInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUInfoResponse::serializer(IEspContext* ctx, IConstWUInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUInfoResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Workunit
	{
		StringBuffer tmp;
		CECLWorkunit::serializer(ctx,src.getWorkunit(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Workunit>%s</Workunit>",tmp.str());
	}
	// field AutoRefresh
	{
		int n = src.getAutoRefresh();
		if (n)
			buffer.appendf("<AutoRefresh>%d</AutoRefresh>", n);
	}
	// field CanCompile
	{
		bool b = src.getCanCompile();
		if (b)
			buffer.appendf("<CanCompile>1</CanCompile>");
	}
	// field ThorSlaveIP
	if ((clientVer==-1.0 || clientVer>=1.25))
	{
		const char* s = src.getThorSlaveIP();
		if (s && *s)
		{
			buffer.append("<ThorSlaveIP>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ThorSlaveIP>");
		}
	}
	// field ResultViews
	if ((clientVer==-1.0 || clientVer>=1.34))
	{
		StringArray& v = src.getResultViews();
		if (v.length()>0)
			buffer.append("<ResultViews>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<View>%s</View>",v.item(i));
		if (v.length()>0)
			buffer.append("</ResultViews>");
	}
	// field SecMethod
	if ((clientVer==-1.0 || clientVer>=1.54))
	{
		const char* s = src.getSecMethod();
		if (s && *s)
		{
			buffer.append("<SecMethod>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SecMethod>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUInfoResponse>");
}

bool CWUInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Workunit.unmarshall(rpc_request, "Workunit", basepath);
		hasValue |= m_AutoRefresh.unmarshall(rpc_request, "AutoRefresh", basepath);
		hasValue |= m_CanCompile.unmarshall(rpc_request, "CanCompile", basepath);
		hasValue |= m_ThorSlaveIP.unmarshall(rpc_request, "ThorSlaveIP", basepath);
		hasValue |= m_ResultViews.unmarshall(rpc_request, "ResultViews", basepath);
		hasValue |= m_SecMethod.unmarshall(rpc_request, "SecMethod", basepath);
	}
	return hasValue;
}

bool CWUInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, soapval, "Workunit");
	hasValue |= m_AutoRefresh.unmarshall(ctx, soapval, "AutoRefresh");
	hasValue |= m_CanCompile.unmarshall(ctx, soapval, "CanCompile");
	hasValue |= m_ThorSlaveIP.unmarshall(ctx, soapval, "ThorSlaveIP");
	hasValue |= m_ResultViews.unmarshall(ctx, soapval, "ResultViews");
	hasValue |= m_SecMethod.unmarshall(ctx, soapval, "SecMethod");
	return hasValue;
}

bool CWUInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, params, attachments, "Workunit", basepath);
	hasValue |= m_AutoRefresh.unmarshall(ctx, params, attachments, "AutoRefresh", basepath);
	hasValue |= m_CanCompile.unmarshall(ctx, params, attachments, "CanCompile", basepath);
	hasValue |= m_ThorSlaveIP.unmarshall(ctx, params, attachments, "ThorSlaveIP", basepath);
	hasValue |= m_ResultViews.unmarshall(ctx, params, attachments, "ResultViews", basepath);
	hasValue |= m_SecMethod.unmarshall(ctx, params, attachments, "SecMethod", basepath);
	return hasValue;
}

IConstECLWorkunit & CWUInfoResponse::getWorkunit() { return (IConstECLWorkunit &) m_Workunit.getValue();}
int CWUInfoResponse::getAutoRefresh() { return m_AutoRefresh;}
bool CWUInfoResponse::getCanCompile() { return m_CanCompile;}
const char * CWUInfoResponse::getThorSlaveIP() { return m_ThorSlaveIP.query();}
StringArray & CWUInfoResponse::getResultViews() { return (StringArray &) m_ResultViews; }
const char * CWUInfoResponse::getSecMethod() { return m_SecMethod.query();}
IEspECLWorkunit & CWUInfoResponse::updateWorkunit(){ return (IEspECLWorkunit &) m_Workunit.getValue(); }
void CWUInfoResponse::setWorkunit(IConstECLWorkunit &ifrom){ m_Workunit.copy(ifrom); }
void CWUInfoResponse::setAutoRefresh(int val){ m_AutoRefresh=val; }
void CWUInfoResponse::setCanCompile(bool val){ m_CanCompile=val; }
void CWUInfoResponse::setThorSlaveIP(const char * val){ m_ThorSlaveIP.set(val); }
void CWUInfoResponse::setResultViews(StringArray &val){ m_ResultViews->kill();  CloneArray(m_ResultViews.getValue(), val); }
void CWUInfoResponse::setSecMethod(const char * val){ m_SecMethod.set(val); }
extern "C"  IEspWUInfoResponse *createWUInfoResponse(const char *serv){return ((IEspWUInfoResponse *)new CWUInfoResponse(serv));}
extern "C"  IClientWUInfoResponse *createClientWUInfoResponse(const char *serv){return ((IClientWUInfoResponse *)new CWUInfoResponse(serv));}

//=======================================================
// class CWUResultSummaryRequest Implementation
//=======================================================

CWUResultSummaryRequest::CWUResultSummaryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultSummaryRequest::CWUResultSummaryRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryRequest");
}

CWUResultSummaryRequest::CWUResultSummaryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultSummaryRequest::CWUResultSummaryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultSummaryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUResultSummaryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultSummaryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUResultSummaryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultSummaryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultSummaryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
}


void CWUResultSummaryRequest::copy(CWUResultSummaryRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Sequence.copy(from.m_Sequence);
}


void CWUResultSummaryRequest::copy(IConstWUResultSummaryRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setSequence(ifrom.getSequence());
}


void CWUResultSummaryRequest::getAttributes(IProperties &attributes)
{
}


void CWUResultSummaryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Sequence.toStr(ctx, buffer, "Sequence", "", true, "", "");
}


void CWUResultSummaryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultSummaryRequest::serializer(IEspContext* ctx, IConstWUResultSummaryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultSummaryRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	if (keepRootTag)
		buffer.append("</WUResultSummaryRequest>");
}

bool CWUResultSummaryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
	return hasValue;
}

bool CWUResultSummaryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	return hasValue;
}

bool CWUResultSummaryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	return hasValue;
}

const char * CWUResultSummaryRequest::getWuid() { return m_Wuid.query();}
int CWUResultSummaryRequest::getSequence() { return m_Sequence;}
void CWUResultSummaryRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultSummaryRequest::setSequence(int val){ m_Sequence=val; }
extern "C"  IEspWUResultSummaryRequest *createWUResultSummaryRequest(const char *serv){return ((IEspWUResultSummaryRequest *)new CWUResultSummaryRequest(serv));}
extern "C"  IClientWUResultSummaryRequest *createClientWUResultSummaryRequest(const char *serv){return ((IClientWUResultSummaryRequest *)new CWUResultSummaryRequest(serv));}

//=======================================================
// class CWUResultSummaryResponse Implementation
//=======================================================

CWUResultSummaryResponse::CWUResultSummaryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Format(nilIgnore),m_Result(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultSummaryResponse::CWUResultSummaryResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Format(nilIgnore),m_Result(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryResponse");
}

CWUResultSummaryResponse::CWUResultSummaryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Format(nilIgnore),m_Result(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultSummaryResponse::CWUResultSummaryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Format(nilIgnore),m_Result(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultSummaryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultSummaryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Format\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"tns:ECLResult\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLResult::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUResultSummaryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultSummaryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLResult"))
	{
		added.setValue("ECLResult",1);
		CECLResult::getMapInfo(info,added);
	}
}

StringBuffer &CWUResultSummaryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Format");
	form.appendf("  <tr><td><b>Format: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.append("<tr>").append("<td><b>Result: </b></td><td><hr/>");
	CECLResult::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultSummaryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultSummaryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
		m_Format.marshall(rpc_resp, "Format", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUResultSummaryResponse::copy(CWUResultSummaryResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Sequence.copy(from.m_Sequence);
	m_Format.copy(from.m_Format);
	m_Result.copy(from.m_Result);
}


void CWUResultSummaryResponse::copy(IConstWUResultSummaryResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setSequence(ifrom.getSequence());
	setFormat(ifrom.getFormat());
	setResult(ifrom.getResult());
}


void CWUResultSummaryResponse::getAttributes(IProperties &attributes)
{
}


void CWUResultSummaryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_Sequence.toStr(ctx, buffer, "Sequence", "", true, "", "");
		m_Format.toStr(ctx, buffer, "Format", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", false, "", "");
	}
}


void CWUResultSummaryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultSummaryResponse::serializer(IEspContext* ctx, IConstWUResultSummaryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultSummaryResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	// field Format
	{
		int n = src.getFormat();
		if (n)
			buffer.appendf("<Format>%d</Format>", n);
	}
	// field Result
	{
		StringBuffer tmp;
		CECLResult::serializer(ctx,src.getResult(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Result>%s</Result>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUResultSummaryResponse>");
}

bool CWUResultSummaryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
		hasValue |= m_Format.unmarshall(rpc_request, "Format", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUResultSummaryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	hasValue |= m_Format.unmarshall(ctx, soapval, "Format");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUResultSummaryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	hasValue |= m_Format.unmarshall(ctx, params, attachments, "Format", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWUResultSummaryResponse::getWuid() { return m_Wuid.query();}
int CWUResultSummaryResponse::getSequence() { return m_Sequence;}
int CWUResultSummaryResponse::getFormat() { return m_Format;}
IConstECLResult & CWUResultSummaryResponse::getResult() { return (IConstECLResult &) m_Result.getValue();}
void CWUResultSummaryResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultSummaryResponse::setSequence(int val){ m_Sequence=val; }
void CWUResultSummaryResponse::setFormat(int val){ m_Format=val; }
IEspECLResult & CWUResultSummaryResponse::updateResult(){ return (IEspECLResult &) m_Result.getValue(); }
void CWUResultSummaryResponse::setResult(IConstECLResult &ifrom){ m_Result.copy(ifrom); }
extern "C"  IEspWUResultSummaryResponse *createWUResultSummaryResponse(const char *serv){return ((IEspWUResultSummaryResponse *)new CWUResultSummaryResponse(serv));}
extern "C"  IClientWUResultSummaryResponse *createClientWUResultSummaryResponse(const char *serv){return ((IClientWUResultSummaryResponse *)new CWUResultSummaryResponse(serv));}

//=======================================================
// class CWULogFileRequest Implementation
//=======================================================

CWULogFileRequest::CWULogFileRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Wuid(nilIgnore),m_Type(nilIgnore),m_Option(nilIgnore),m_SlaveIP(nilIgnore),m_IPAddress(nilIgnore),m_Description(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Process(nilIgnore),m_ClusterGroup(nilIgnore),m_LogDate(nilIgnore),m_SlaveNumber(1, nilIgnore,false),m_SizeLimit(0, nilIgnore,false),m_PlainText(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWULogFileRequest::CWULogFileRequest(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Wuid(nilIgnore),m_Type(nilIgnore),m_Option(nilIgnore),m_SlaveIP(nilIgnore),m_IPAddress(nilIgnore),m_Description(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Process(nilIgnore),m_ClusterGroup(nilIgnore),m_LogDate(nilIgnore),m_SlaveNumber(1, nilIgnore,false),m_SizeLimit(0, nilIgnore,false),m_PlainText(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileRequest");
}

CWULogFileRequest::CWULogFileRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore),m_Wuid(nilIgnore),m_Type(nilIgnore),m_Option(nilIgnore),m_SlaveIP(nilIgnore),m_IPAddress(nilIgnore),m_Description(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Process(nilIgnore),m_ClusterGroup(nilIgnore),m_LogDate(nilIgnore),m_SlaveNumber(1, nilIgnore,false),m_SizeLimit(0, nilIgnore,false),m_PlainText(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWULogFileRequest::CWULogFileRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore),m_Wuid(nilIgnore),m_Type(nilIgnore),m_Option(nilIgnore),m_SlaveIP(nilIgnore),m_IPAddress(nilIgnore),m_Description(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_Process(nilIgnore),m_ClusterGroup(nilIgnore),m_LogDate(nilIgnore),m_SlaveNumber(1, nilIgnore,false),m_SizeLimit(0, nilIgnore,false),m_PlainText(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWULogFileRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Option\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("WULogFileRequest","SlaveIP")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SlaveIP\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","IPAddress")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IPAddress\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","Description")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","QuerySet")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","Query")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Query\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","Process")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Process\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","ClusterGroup")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterGroup\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","LogDate")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"LogDate\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","SlaveNumber")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"1\" name=\"SlaveNumber\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("WULogFileRequest","SizeLimit")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SizeLimit\" type=\"xsd:long\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"PlainText\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWULogFileRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWULogFileRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WULogFileRequest","SlaveIP",1.1);
	info.addMinVersion("WULogFileRequest","IPAddress",1.32);
	info.addMinVersion("WULogFileRequest","Description",1.32);
	info.addMinVersion("WULogFileRequest","QuerySet",1.36);
	info.addMinVersion("WULogFileRequest","Query",1.36);
	info.addMinVersion("WULogFileRequest","Process",1.38);
	info.addMinVersion("WULogFileRequest","ClusterGroup",1.38);
	info.addMinVersion("WULogFileRequest","LogDate",1.38);
	info.addMinVersion("WULogFileRequest","SlaveNumber",1.38);
	info.addMinVersion("WULogFileRequest","SizeLimit",1.55);
}

StringBuffer &CWULogFileRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Option");
	form.appendf("  <tr><td><b>Option: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WULogFileRequest","SlaveIP")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SlaveIP");
		form.appendf("  <tr><td><b>SlaveIP: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","IPAddress")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IPAddress");
		form.appendf("  <tr><td><b>IPAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","Description")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Description");
		form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","QuerySet")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QuerySet");
		form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","Query")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Query");
		form.appendf("  <tr><td><b>Query: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","Process")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Process");
		form.appendf("  <tr><td><b>Process: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","ClusterGroup")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterGroup");
		form.appendf("  <tr><td><b>ClusterGroup: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","LogDate")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("LogDate");
		form.appendf("  <tr><td><b>LogDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","SlaveNumber")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("SlaveNumber");
		form.appendf("  <tr><td><b>SlaveNumber: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"		 value=\"1\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileRequest","SizeLimit")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SizeLimit");
		form.appendf("  <tr><td><b>SizeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PlainText");
	form.appendf("  <tr><td><b>PlainText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWULogFileRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWULogFileRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Option.marshall(rpc_resp, "Option", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_SlaveIP.marshall(rpc_resp, "SlaveIP", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_IPAddress.marshall(rpc_resp, "IPAddress", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_Description.marshall(rpc_resp, "Description", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.36))
		m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.36))
		m_Query.marshall(rpc_resp, "Query", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_Process.marshall(rpc_resp, "Process", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_ClusterGroup.marshall(rpc_resp, "ClusterGroup", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_LogDate.marshall(rpc_resp, "LogDate", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_SlaveNumber.marshall(rpc_resp, "SlaveNumber", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.55))
		m_SizeLimit.marshall(rpc_resp, "SizeLimit", "", "", "");
	m_PlainText.marshall(rpc_resp, "PlainText", "", "", "");
}


void CWULogFileRequest::copy(CWULogFileRequest &from)
{
	m_Name.copy(from.m_Name);
	m_Wuid.copy(from.m_Wuid);
	m_Type.copy(from.m_Type);
	m_Option.copy(from.m_Option);
	m_SlaveIP.copy(from.m_SlaveIP);
	m_IPAddress.copy(from.m_IPAddress);
	m_Description.copy(from.m_Description);
	m_QuerySet.copy(from.m_QuerySet);
	m_Query.copy(from.m_Query);
	m_Process.copy(from.m_Process);
	m_ClusterGroup.copy(from.m_ClusterGroup);
	m_LogDate.copy(from.m_LogDate);
	m_SlaveNumber.copy(from.m_SlaveNumber);
	m_SizeLimit.copy(from.m_SizeLimit);
	m_PlainText.copy(from.m_PlainText);
}


void CWULogFileRequest::copy(IConstWULogFileRequest &ifrom)
{
	setName(ifrom.getName());
	setWuid(ifrom.getWuid());
	setType(ifrom.getType());
	setOption(ifrom.getOption());
	setSlaveIP(ifrom.getSlaveIP());
	setIPAddress(ifrom.getIPAddress());
	setDescription(ifrom.getDescription());
	setQuerySet(ifrom.getQuerySet());
	setQuery(ifrom.getQuery());
	setProcess(ifrom.getProcess());
	setClusterGroup(ifrom.getClusterGroup());
	setLogDate(ifrom.getLogDate());
	setSlaveNumber(ifrom.getSlaveNumber());
	setSizeLimit(ifrom.getSizeLimit());
	setPlainText(ifrom.getPlainText());
}


void CWULogFileRequest::getAttributes(IProperties &attributes)
{
}


void CWULogFileRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Option.toStr(ctx, buffer, "Option", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.1))
		m_SlaveIP.toStr(ctx, buffer, "SlaveIP", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_IPAddress.toStr(ctx, buffer, "IPAddress", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.32))
		m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.36))
		m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.36))
		m_Query.toStr(ctx, buffer, "Query", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_Process.toStr(ctx, buffer, "Process", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_ClusterGroup.toStr(ctx, buffer, "ClusterGroup", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_LogDate.toStr(ctx, buffer, "LogDate", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.38))
		m_SlaveNumber.toStr(ctx, buffer, "SlaveNumber", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.55))
		m_SizeLimit.toStr(ctx, buffer, "SizeLimit", "", true, "", "");
	m_PlainText.toStr(ctx, buffer, "PlainText", "", true, "", "");
}


void CWULogFileRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWULogFileRequest::serializer(IEspContext* ctx, IConstWULogFileRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WULogFileRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	// field Option
	{
		int n = src.getOption();
		if (n)
			buffer.appendf("<Option>%d</Option>", n);
	}
	// field SlaveIP
	if ((clientVer==-1.0 || clientVer>=1.1))
	{
		const char* s = src.getSlaveIP();
		if (s && *s)
		{
			buffer.append("<SlaveIP>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SlaveIP>");
		}
	}
	// field IPAddress
	if ((clientVer==-1.0 || clientVer>=1.32))
	{
		const char* s = src.getIPAddress();
		if (s && *s)
		{
			buffer.append("<IPAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</IPAddress>");
		}
	}
	// field Description
	if ((clientVer==-1.0 || clientVer>=1.32))
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field QuerySet
	if ((clientVer==-1.0 || clientVer>=1.36))
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field Query
	if ((clientVer==-1.0 || clientVer>=1.36))
	{
		const char* s = src.getQuery();
		if (s && *s)
		{
			buffer.append("<Query>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Query>");
		}
	}
	// field Process
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		const char* s = src.getProcess();
		if (s && *s)
		{
			buffer.append("<Process>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Process>");
		}
	}
	// field ClusterGroup
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		const char* s = src.getClusterGroup();
		if (s && *s)
		{
			buffer.append("<ClusterGroup>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterGroup>");
		}
	}
	// field LogDate
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		const char* s = src.getLogDate();
		if (s && *s)
		{
			buffer.append("<LogDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogDate>");
		}
	}
	// field SlaveNumber
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		int n = src.getSlaveNumber();
		if (n)
			buffer.appendf("<SlaveNumber>%d</SlaveNumber>", n);
	}
	// field SizeLimit
	if ((clientVer==-1.0 || clientVer>=1.55))
	{
		//*** default kind: TK_INT; type=int64, name=SizeLimit
		buffer.append("<SizeLimit>");
		buffer.append(src.getSizeLimit());
		buffer.append("</SizeLimit>");
	}
	// field PlainText
	{
		const char* s = src.getPlainText();
		if (s && *s)
		{
			buffer.append("<PlainText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PlainText>");
		}
	}
	if (keepRootTag)
		buffer.append("</WULogFileRequest>");
}

bool CWULogFileRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Option.unmarshall(rpc_request, "Option", basepath);
	hasValue |= m_SlaveIP.unmarshall(rpc_request, "SlaveIP", basepath);
	hasValue |= m_IPAddress.unmarshall(rpc_request, "IPAddress", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(rpc_request, "Query", basepath);
	hasValue |= m_Process.unmarshall(rpc_request, "Process", basepath);
	hasValue |= m_ClusterGroup.unmarshall(rpc_request, "ClusterGroup", basepath);
	hasValue |= m_LogDate.unmarshall(rpc_request, "LogDate", basepath);
	hasValue |= m_SlaveNumber.unmarshall(rpc_request, "SlaveNumber", basepath);
	hasValue |= m_SizeLimit.unmarshall(rpc_request, "SizeLimit", basepath);
	hasValue |= m_PlainText.unmarshall(rpc_request, "PlainText", basepath);
	return hasValue;
}

bool CWULogFileRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Option.unmarshall(ctx, soapval, "Option");
	hasValue |= m_SlaveIP.unmarshall(ctx, soapval, "SlaveIP");
	hasValue |= m_IPAddress.unmarshall(ctx, soapval, "IPAddress");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_Query.unmarshall(ctx, soapval, "Query");
	hasValue |= m_Process.unmarshall(ctx, soapval, "Process");
	hasValue |= m_ClusterGroup.unmarshall(ctx, soapval, "ClusterGroup");
	hasValue |= m_LogDate.unmarshall(ctx, soapval, "LogDate");
	hasValue |= m_SlaveNumber.unmarshall(ctx, soapval, "SlaveNumber");
	hasValue |= m_SizeLimit.unmarshall(ctx, soapval, "SizeLimit");
	hasValue |= m_PlainText.unmarshall(ctx, soapval, "PlainText");
	return hasValue;
}

bool CWULogFileRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Option.unmarshall(ctx, params, attachments, "Option", basepath);
	hasValue |= m_SlaveIP.unmarshall(ctx, params, attachments, "SlaveIP", basepath);
	hasValue |= m_IPAddress.unmarshall(ctx, params, attachments, "IPAddress", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(ctx, params, attachments, "Query", basepath);
	hasValue |= m_Process.unmarshall(ctx, params, attachments, "Process", basepath);
	hasValue |= m_ClusterGroup.unmarshall(ctx, params, attachments, "ClusterGroup", basepath);
	hasValue |= m_LogDate.unmarshall(ctx, params, attachments, "LogDate", basepath);
	hasValue |= m_SlaveNumber.unmarshall(ctx, params, attachments, "SlaveNumber", basepath);
	hasValue |= m_SizeLimit.unmarshall(ctx, params, attachments, "SizeLimit", basepath);
	hasValue |= m_PlainText.unmarshall(ctx, params, attachments, "PlainText", basepath);
	return hasValue;
}

const char * CWULogFileRequest::getName() { return m_Name.query();}
const char * CWULogFileRequest::getWuid() { return m_Wuid.query();}
const char * CWULogFileRequest::getType() { return m_Type.query();}
int CWULogFileRequest::getOption() { return m_Option;}
const char * CWULogFileRequest::getSlaveIP() { return m_SlaveIP.query();}
const char * CWULogFileRequest::getIPAddress() { return m_IPAddress.query();}
const char * CWULogFileRequest::getDescription() { return m_Description.query();}
const char * CWULogFileRequest::getQuerySet() { return m_QuerySet.query();}
const char * CWULogFileRequest::getQuery() { return m_Query.query();}
const char * CWULogFileRequest::getProcess() { return m_Process.query();}
const char * CWULogFileRequest::getClusterGroup() { return m_ClusterGroup.query();}
const char * CWULogFileRequest::getLogDate() { return m_LogDate.query();}
int CWULogFileRequest::getSlaveNumber() { return m_SlaveNumber;}
__int64 CWULogFileRequest::getSizeLimit() { return m_SizeLimit;}
const char * CWULogFileRequest::getPlainText() { return m_PlainText.query();}
void CWULogFileRequest::setName(const char * val){ m_Name.set(val); }
void CWULogFileRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWULogFileRequest::setType(const char * val){ m_Type.set(val); }
void CWULogFileRequest::setOption(int val){ m_Option=val; }
void CWULogFileRequest::setSlaveIP(const char * val){ m_SlaveIP.set(val); }
void CWULogFileRequest::setIPAddress(const char * val){ m_IPAddress.set(val); }
void CWULogFileRequest::setDescription(const char * val){ m_Description.set(val); }
void CWULogFileRequest::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWULogFileRequest::setQuery(const char * val){ m_Query.set(val); }
void CWULogFileRequest::setProcess(const char * val){ m_Process.set(val); }
void CWULogFileRequest::setClusterGroup(const char * val){ m_ClusterGroup.set(val); }
void CWULogFileRequest::setLogDate(const char * val){ m_LogDate.set(val); }
void CWULogFileRequest::setSlaveNumber(int val){ m_SlaveNumber=val; }
void CWULogFileRequest::setSizeLimit(__int64 val){ m_SizeLimit=val; }
void CWULogFileRequest::setPlainText(const char * val){ m_PlainText.set(val); }
extern "C"  IEspWULogFileRequest *createWULogFileRequest(const char *serv){return ((IEspWULogFileRequest *)new CWULogFileRequest(serv));}
extern "C"  IClientWULogFileRequest *createClientWULogFileRequest(const char *serv){return ((IClientWULogFileRequest *)new CWULogFileRequest(serv));}

//=======================================================
// class CWULogFileResponse Implementation
//=======================================================

CWULogFileResponse::CWULogFileResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_FileName(nilIgnore),m_DaliServer(nilIgnore),m_thefile(nilIgnore),m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWULogFileResponse::CWULogFileResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_FileName(nilIgnore),m_DaliServer(nilIgnore),m_thefile(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileResponse");
}

CWULogFileResponse::CWULogFileResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_FileName(nilIgnore),m_DaliServer(nilIgnore),m_thefile(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWULogFileResponse::CWULogFileResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_FileName(nilIgnore),m_DaliServer(nilIgnore),m_thefile(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogFileResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWULogFileResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!context.suppressed("WULogFileResponse","Wuid")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileResponse","QuerySet")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileResponse","QueryName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QueryName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileResponse","QueryId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileResponse","FileName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WULogFileResponse","DaliServer")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DaliServer\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"thefile\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWULogFileResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWULogFileResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WULogFileResponse","Wuid",1.36);
	info.addMinVersion("WULogFileResponse","QuerySet",1.36);
	info.addMinVersion("WULogFileResponse","QueryName",1.36);
	info.addMinVersion("WULogFileResponse","QueryId",1.36);
	info.addMinVersion("WULogFileResponse","FileName",1.36);
	info.addMinVersion("WULogFileResponse","DaliServer",1.38);
}

StringBuffer &CWULogFileResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (!context.suppressed("WULogFileResponse","Wuid")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Wuid");
		form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileResponse","QuerySet")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QuerySet");
		form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileResponse","QueryName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QueryName");
		form.appendf("  <tr><td><b>QueryName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileResponse","QueryId")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QueryId");
		form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileResponse","FileName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileName");
		form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WULogFileResponse","DaliServer")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DaliServer");
		form.appendf("  <tr><td><b>DaliServer: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("thefile");
	form.appendf("  <tr><td><b>thefile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWULogFileResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWULogFileResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_QueryName.marshall(rpc_resp, "QueryName", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_FileName.marshall(rpc_resp, "FileName", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.38))
			m_DaliServer.marshall(rpc_resp, "DaliServer", "", "", "");
		m_thefile.marshall(rpc_resp, "thefile", "", "", "");
	}
}


void CWULogFileResponse::copy(CWULogFileResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_QuerySet.copy(from.m_QuerySet);
	m_QueryName.copy(from.m_QueryName);
	m_QueryId.copy(from.m_QueryId);
	m_FileName.copy(from.m_FileName);
	m_DaliServer.copy(from.m_DaliServer);
	m_thefile.copy(from.m_thefile);
}


void CWULogFileResponse::copy(IConstWULogFileResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setQuerySet(ifrom.getQuerySet());
	setQueryName(ifrom.getQueryName());
	setQueryId(ifrom.getQueryId());
	setFileName(ifrom.getFileName());
	setDaliServer(ifrom.getDaliServer());
	setThefile(ifrom.getThefile());
}


void CWULogFileResponse::getAttributes(IProperties &attributes)
{
}


void CWULogFileResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_QueryName.toStr(ctx, buffer, "QueryName", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.36))
			m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.38))
			m_DaliServer.toStr(ctx, buffer, "DaliServer", "", true, "", "");
		m_thefile.toStr(ctx, buffer, "thefile", "", true, "", "");
	}
}


void CWULogFileResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWULogFileResponse::serializer(IEspContext* ctx, IConstWULogFileResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WULogFileResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	if ((clientVer==-1.0 || clientVer>=1.36))
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field QuerySet
	if ((clientVer==-1.0 || clientVer>=1.36))
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field QueryName
	if ((clientVer==-1.0 || clientVer>=1.36))
	{
		const char* s = src.getQueryName();
		if (s && *s)
		{
			buffer.append("<QueryName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryName>");
		}
	}
	// field QueryId
	if ((clientVer==-1.0 || clientVer>=1.36))
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field FileName
	if ((clientVer==-1.0 || clientVer>=1.36))
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field DaliServer
	if ((clientVer==-1.0 || clientVer>=1.38))
	{
		const char* s = src.getDaliServer();
		if (s && *s)
		{
			buffer.append("<DaliServer>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DaliServer>");
		}
	}
	// field thefile
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getThefile().toByteArray(), src.getThefile().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<thefile>%s</thefile>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WULogFileResponse>");
}

void CWULogFileResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_thefile.getValue());
	mimetype.set(m_thefile_mimetype.str());
}

bool CWULogFileResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
		hasValue |= m_QueryName.unmarshall(rpc_request, "QueryName", basepath);
		hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
		hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
		hasValue |= m_DaliServer.unmarshall(rpc_request, "DaliServer", basepath);
		hasValue |= m_thefile.unmarshall(rpc_request, "thefile", basepath);
	}
	return hasValue;
}

bool CWULogFileResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_QueryName.unmarshall(ctx, soapval, "QueryName");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_DaliServer.unmarshall(ctx, soapval, "DaliServer");
	hasValue |= m_thefile.unmarshall(ctx, soapval, "thefile");
	return hasValue;
}

bool CWULogFileResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_QueryName.unmarshall(ctx, params, attachments, "QueryName", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_DaliServer.unmarshall(ctx, params, attachments, "DaliServer", basepath);
	hasValue |= m_thefile.unmarshall(ctx, params, attachments, "thefile", basepath);
	return hasValue;
}

const char * CWULogFileResponse::getWuid() { return m_Wuid.query();}
const char * CWULogFileResponse::getQuerySet() { return m_QuerySet.query();}
const char * CWULogFileResponse::getQueryName() { return m_QueryName.query();}
const char * CWULogFileResponse::getQueryId() { return m_QueryId.query();}
const char * CWULogFileResponse::getFileName() { return m_FileName.query();}
const char * CWULogFileResponse::getDaliServer() { return m_DaliServer.query();}
const char *CWULogFileResponse::getThefile_mimetype(){ return m_thefile_mimetype.str(); }
const MemoryBuffer & CWULogFileResponse::getThefile() { return m_thefile.getValue();}
void CWULogFileResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWULogFileResponse::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWULogFileResponse::setQueryName(const char * val){ m_QueryName.set(val); }
void CWULogFileResponse::setQueryId(const char * val){ m_QueryId.set(val); }
void CWULogFileResponse::setFileName(const char * val){ m_FileName.set(val); }
void CWULogFileResponse::setDaliServer(const char * val){ m_DaliServer.set(val); }
void CWULogFileResponse::setThefile_mimetype(const char *  val){ m_thefile_mimetype.set(val); }
void CWULogFileResponse::setThefile(const MemoryBuffer & val){ m_thefile->clear().append(val); }
extern "C"  IEspWULogFileResponse *createWULogFileResponse(const char *serv){return ((IEspWULogFileResponse *)new CWULogFileResponse(serv));}
extern "C"  IClientWULogFileResponse *createClientWULogFileResponse(const char *serv){return ((IClientWULogFileResponse *)new CWULogFileResponse(serv));}

//=======================================================
// class CWUDownloadFilesRequest Implementation
//=======================================================

CWUDownloadFilesRequest::CWUDownloadFilesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_DownloadOption(nilIgnore),m_WUFileOptions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDownloadFilesRequest::CWUDownloadFilesRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_DownloadOption(nilIgnore),m_WUFileOptions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesRequest");
}

CWUDownloadFilesRequest::CWUDownloadFilesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_DownloadOption(nilIgnore),m_WUFileOptions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDownloadFilesRequest::CWUDownloadFilesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_QuerySet(nilIgnore),m_Query(nilIgnore),m_DownloadOption(nilIgnore),m_WUFileOptions(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDownloadFilesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Query\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DownloadOption\" type=\"tns:WUFileDownloadOption\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUFileOptions\" type=\"tns:ArrayOfWUFileOption\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXWUFileDownloadOption::getXsdDefinition(context, request, schema, added);
		CWUFileOption::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUFileOption") && added.getValue("ArrayOfWUFileOption")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUFileOption\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUFileOption\" type=\"tns:WUFileOption\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUFileOption",1);
	}
	return schema;
}

void CWUDownloadFilesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDownloadFilesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUFileDownloadOption"))
	{
		added.setValue("WUFileDownloadOption",1);
		CXWUFileDownloadOption::getMapInfo(info,added);
	}
	if (!added.getValue("WUFileOption"))
	{
		added.setValue("WUFileOption",1);
		CWUFileOption::getMapInfo(info,added);
	}
}

StringBuffer &CWUDownloadFilesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySet");
	form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Query");
	form.appendf("  <tr><td><b>Query: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DownloadOption");
	form.appendf("  <tr><td><b>DownloadOption: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUFileOptions");
	form.appendf("<tr><td><b>WUFileOptions: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDownloadFilesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDownloadFilesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
	m_Query.marshall(rpc_resp, "Query", "", "", "");
	m_DownloadOption.marshall(rpc_resp, "DownloadOption", "", "", "");
	m_WUFileOptions.marshall(rpc_resp, "WUFileOptions", "WUFileOption");
}


void CWUDownloadFilesRequest::copy(CWUDownloadFilesRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_QuerySet.copy(from.m_QuerySet);
	m_Query.copy(from.m_Query);
	m_DownloadOption.copy(from.m_DownloadOption);
	m_WUFileOptions.copy(from.m_WUFileOptions);
}


void CWUDownloadFilesRequest::copy(IConstWUDownloadFilesRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setQuerySet(ifrom.getQuerySet());
	setQuery(ifrom.getQuery());
	setDownloadOption(ifrom.getDownloadOption());
	setWUFileOptions(ifrom.getWUFileOptions());
}


void CWUDownloadFilesRequest::getAttributes(IProperties &attributes)
{
}


void CWUDownloadFilesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
	m_Query.toStr(ctx, buffer, "Query", "", true, "", "");
	m_DownloadOption.toStr(ctx, buffer, "DownloadOption", "", true, "", "");
	m_WUFileOptions.toStr(ctx, buffer, "WUFileOptions", "WUFileOption");
}


void CWUDownloadFilesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDownloadFilesRequest::serializer(IEspContext* ctx, IConstWUDownloadFilesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDownloadFilesRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field QuerySet
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field Query
	{
		const char* s = src.getQuery();
		if (s && *s)
		{
			buffer.append("<Query>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Query>");
		}
	}
	// field DownloadOption
	{
		const char* s = src.getDownloadOptionAsString();
		buffer.append("<DownloadOption>");
		encodeUtf8XML(s,buffer);
		buffer.append("</DownloadOption>");
	}
	// field WUFileOptions
	{
		IArrayOf<IConstWUFileOption>& v = src.getWUFileOptions();
		int size = v.length();
		if (size>0)
			buffer.append("<WUFileOptions>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUFileOption::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</WUFileOptions>");
	}
	if (keepRootTag)
		buffer.append("</WUDownloadFilesRequest>");
}

bool CWUDownloadFilesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(rpc_request, "Query", basepath);
	hasValue |= m_DownloadOption.unmarshall(rpc_request, "DownloadOption", basepath);
	hasValue |= m_WUFileOptions.unmarshall(rpc_request, "WUFileOptions", basepath);
	return hasValue;
}

bool CWUDownloadFilesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_Query.unmarshall(ctx, soapval, "Query");
	hasValue |= m_DownloadOption.unmarshall(ctx, soapval, "DownloadOption");
	hasValue |= m_WUFileOptions.unmarshall(ctx, soapval, "WUFileOptions");
	return hasValue;
}

bool CWUDownloadFilesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_Query.unmarshall(ctx, params, attachments, "Query", basepath);
	hasValue |= m_DownloadOption.unmarshall(ctx, params, attachments, "DownloadOption", basepath);
	hasValue |= m_WUFileOptions.unmarshall(ctx, params, attachments, "WUFileOptions", basepath);
	return hasValue;
}

const char * CWUDownloadFilesRequest::getWuid() { return m_Wuid.query();}
const char * CWUDownloadFilesRequest::getQuerySet() { return m_QuerySet.query();}
const char * CWUDownloadFilesRequest::getQuery() { return m_Query.query();}
CWUFileDownloadOption CWUDownloadFilesRequest::getDownloadOption() { return m_DownloadOption.getValue(); }
const char* CWUDownloadFilesRequest::getDownloadOptionAsString() {  return (const char*)m_DownloadOption; }
IArrayOf<IConstWUFileOption> & CWUDownloadFilesRequest::getWUFileOptions() { return (IArrayOf<IConstWUFileOption> &) m_WUFileOptions; }
void CWUDownloadFilesRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUDownloadFilesRequest::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWUDownloadFilesRequest::setQuery(const char * val){ m_Query.set(val); }
void CWUDownloadFilesRequest::setDownloadOption(CWUFileDownloadOption val) { m_DownloadOption.setValue(val); }
void CWUDownloadFilesRequest::setDownloadOption(const char* val) { m_DownloadOption.setValue(val); }
void CWUDownloadFilesRequest::setWUFileOptions(IArrayOf<IEspWUFileOption> &val)
{
	m_WUFileOptions->kill();
	IArrayOf<IConstWUFileOption> &target = m_WUFileOptions.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUFileOption &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUDownloadFilesRequest::setWUFileOptions(IArrayOf<IConstWUFileOption> &val)
{
	m_WUFileOptions->kill();
	IArrayOf<IConstWUFileOption> &target = m_WUFileOptions.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUFileOption &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUDownloadFilesRequest *createWUDownloadFilesRequest(const char *serv){return ((IEspWUDownloadFilesRequest *)new CWUDownloadFilesRequest(serv));}
extern "C"  IClientWUDownloadFilesRequest *createClientWUDownloadFilesRequest(const char *serv){return ((IClientWUDownloadFilesRequest *)new CWUDownloadFilesRequest(serv));}

//=======================================================
// class CWUDownloadFilesResponse Implementation
//=======================================================

CWUDownloadFilesResponse::CWUDownloadFilesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_thefile(nilIgnore),m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDownloadFilesResponse::CWUDownloadFilesResponse(const char *serviceName, const char *bc)
	: m_thefile(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesResponse");
}

CWUDownloadFilesResponse::CWUDownloadFilesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_thefile(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDownloadFilesResponse::CWUDownloadFilesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_thefile(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDownloadFilesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDownloadFilesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"thefile\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUDownloadFilesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDownloadFilesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUDownloadFilesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("thefile");
	form.appendf("  <tr><td><b>thefile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDownloadFilesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDownloadFilesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_thefile.marshall(rpc_resp, "thefile", "", "", "");
	}
}


void CWUDownloadFilesResponse::copy(CWUDownloadFilesResponse &from)
{
	m_thefile.copy(from.m_thefile);
}


void CWUDownloadFilesResponse::copy(IConstWUDownloadFilesResponse &ifrom)
{
	setThefile(ifrom.getThefile());
}


void CWUDownloadFilesResponse::getAttributes(IProperties &attributes)
{
}


void CWUDownloadFilesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_thefile.toStr(ctx, buffer, "thefile", "", true, "", "");
	}
}


void CWUDownloadFilesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDownloadFilesResponse::serializer(IEspContext* ctx, IConstWUDownloadFilesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDownloadFilesResponse>");
	// field thefile
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getThefile().toByteArray(), src.getThefile().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<thefile>%s</thefile>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUDownloadFilesResponse>");
}

void CWUDownloadFilesResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_thefile.getValue());
	mimetype.set(m_thefile_mimetype.str());
}

bool CWUDownloadFilesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_thefile.unmarshall(rpc_request, "thefile", basepath);
	}
	return hasValue;
}

bool CWUDownloadFilesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_thefile.unmarshall(ctx, soapval, "thefile");
	return hasValue;
}

bool CWUDownloadFilesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_thefile.unmarshall(ctx, params, attachments, "thefile", basepath);
	return hasValue;
}

const char *CWUDownloadFilesResponse::getThefile_mimetype(){ return m_thefile_mimetype.str(); }
const MemoryBuffer & CWUDownloadFilesResponse::getThefile() { return m_thefile.getValue();}
void CWUDownloadFilesResponse::setThefile_mimetype(const char *  val){ m_thefile_mimetype.set(val); }
void CWUDownloadFilesResponse::setThefile(const MemoryBuffer & val){ m_thefile->clear().append(val); }
extern "C"  IEspWUDownloadFilesResponse *createWUDownloadFilesResponse(const char *serv){return ((IEspWUDownloadFilesResponse *)new CWUDownloadFilesResponse(serv));}
extern "C"  IClientWUDownloadFilesResponse *createClientWUDownloadFilesResponse(const char *serv){return ((IClientWUDownloadFilesResponse *)new CWUDownloadFilesResponse(serv));}

//=======================================================
// class CWUResultBinRequest Implementation
//=======================================================

CWUResultBinRequest::CWUResultBinRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_LogicalName(nilIgnore),m_Wuid(nilIgnore),m_ResultName(nilIgnore),m_Sequence(nilIgnore),m_Format("raw", nilIgnore),m_Cluster(nilIgnore),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultBinRequest::CWUResultBinRequest(const char *serviceName, const char *bc)
	: m_LogicalName(nilIgnore),m_Wuid(nilIgnore),m_ResultName(nilIgnore),m_Sequence(nilIgnore),m_Format("raw", nilIgnore),m_Cluster(nilIgnore),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinRequest");
}

CWUResultBinRequest::CWUResultBinRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_LogicalName(nilIgnore),m_Wuid(nilIgnore),m_ResultName(nilIgnore),m_Sequence(nilIgnore),m_Format("raw", nilIgnore),m_Cluster(nilIgnore),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultBinRequest::CWUResultBinRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_LogicalName(nilIgnore),m_Wuid(nilIgnore),m_ResultName(nilIgnore),m_Sequence(nilIgnore),m_Format("raw", nilIgnore),m_Cluster(nilIgnore),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultBinRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResultName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"raw\" name=\"Format\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUResultBinRequest","Cluster")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUResultBinRequest","FilterBy")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FilterBy\" type=\"tns:ArrayOfNamedValue\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUResultBinRequest","FilterBy"))
			CNamedValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("NamedValue") && added.getValue("ArrayOfNamedValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfNamedValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"NamedValue\" type=\"tns:NamedValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfNamedValue",1);
	}
	return schema;
}

void CWUResultBinRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultBinRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUResultBinRequest","Cluster",1.73);
	info.addMinVersion("WUResultBinRequest","FilterBy",1.5);
	if (!added.getValue("NamedValue"))
	{
		added.setValue("NamedValue",1);
		CNamedValue::getMapInfo(info,added);
	}
}

StringBuffer &CWUResultBinRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ResultName");
	form.appendf("  <tr><td><b>ResultName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Format");
	form.appendf("  <tr><td><b>Format: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"raw\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUResultBinRequest","Cluster")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Cluster");
		form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUResultBinRequest","FilterBy")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FilterBy");
		form.appendf("<tr><td><b>FilterBy: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultBinRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultBinRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_ResultName.marshall(rpc_resp, "ResultName", "", "", "");
	m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
	m_Format.marshall(rpc_resp, "Format", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_FilterBy.marshall(rpc_resp, "FilterBy", "NamedValue");
	m_Start.marshall(rpc_resp, "Start", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
}


void CWUResultBinRequest::copy(CWUResultBinRequest &from)
{
	m_LogicalName.copy(from.m_LogicalName);
	m_Wuid.copy(from.m_Wuid);
	m_ResultName.copy(from.m_ResultName);
	m_Sequence.copy(from.m_Sequence);
	m_Format.copy(from.m_Format);
	m_Cluster.copy(from.m_Cluster);
	m_FilterBy.copy(from.m_FilterBy);
	m_Start.copy(from.m_Start);
	m_Count.copy(from.m_Count);
}


void CWUResultBinRequest::copy(IConstWUResultBinRequest &ifrom)
{
	setLogicalName(ifrom.getLogicalName());
	setWuid(ifrom.getWuid());
	setResultName(ifrom.getResultName());
	setSequence(ifrom.getSequence());
	setFormat(ifrom.getFormat());
	setCluster(ifrom.getCluster());
	setFilterBy(ifrom.getFilterBy());
	setStart(ifrom.getStart());
	setCount(ifrom.getCount());
}


void CWUResultBinRequest::getAttributes(IProperties &attributes)
{
}


void CWUResultBinRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_ResultName.toStr(ctx, buffer, "ResultName", "", true, "", "");
	m_Sequence.toStr(ctx, buffer, "Sequence", "", true, "", "");
	m_Format.toStr(ctx, buffer, "Format", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_FilterBy.toStr(ctx, buffer, "FilterBy", "NamedValue");
	m_Start.toStr(ctx, buffer, "Start", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
}


void CWUResultBinRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultBinRequest::serializer(IEspContext* ctx, IConstWUResultBinRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultBinRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field ResultName
	{
		const char* s = src.getResultName();
		if (s && *s)
		{
			buffer.append("<ResultName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ResultName>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	// field Format
	{
		const char* s = src.getFormat();
		if (s && *s)
		{
			buffer.append("<Format>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Format>");
		}
	}
	// field Cluster
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field FilterBy
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		IArrayOf<IConstNamedValue>& v = src.getFilterBy();
		int size = v.length();
		if (size>0)
			buffer.append("<FilterBy>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CNamedValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</FilterBy>");
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	if (keepRootTag)
		buffer.append("</WUResultBinRequest>");
}

bool CWUResultBinRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_ResultName.unmarshall(rpc_request, "ResultName", basepath);
	hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
	hasValue |= m_Format.unmarshall(rpc_request, "Format", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_FilterBy.unmarshall(rpc_request, "FilterBy", basepath);
	hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	return hasValue;
}

bool CWUResultBinRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_ResultName.unmarshall(ctx, soapval, "ResultName");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	hasValue |= m_Format.unmarshall(ctx, soapval, "Format");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_FilterBy.unmarshall(ctx, soapval, "FilterBy");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	return hasValue;
}

bool CWUResultBinRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_ResultName.unmarshall(ctx, params, attachments, "ResultName", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	hasValue |= m_Format.unmarshall(ctx, params, attachments, "Format", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_FilterBy.unmarshall(ctx, params, attachments, "FilterBy", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	return hasValue;
}

const char * CWUResultBinRequest::getLogicalName() { return m_LogicalName.query();}
const char * CWUResultBinRequest::getWuid() { return m_Wuid.query();}
const char * CWUResultBinRequest::getResultName() { return m_ResultName.query();}
int CWUResultBinRequest::getSequence() { return m_Sequence;}
const char * CWUResultBinRequest::getFormat() { return m_Format.query();}
const char * CWUResultBinRequest::getCluster() { return m_Cluster.query();}
IArrayOf<IConstNamedValue> & CWUResultBinRequest::getFilterBy() { return (IArrayOf<IConstNamedValue> &) m_FilterBy; }
__int64 CWUResultBinRequest::getStart() { return m_Start;}
int CWUResultBinRequest::getCount() { return m_Count;}
void CWUResultBinRequest::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CWUResultBinRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultBinRequest::setResultName(const char * val){ m_ResultName.set(val); }
void CWUResultBinRequest::setSequence(int val){ m_Sequence=val; }
void CWUResultBinRequest::setFormat(const char * val){ m_Format.set(val); }
void CWUResultBinRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUResultBinRequest::setFilterBy(IArrayOf<IEspNamedValue> &val)
{
	m_FilterBy->kill();
	IArrayOf<IConstNamedValue> &target = m_FilterBy.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNamedValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUResultBinRequest::setFilterBy(IArrayOf<IConstNamedValue> &val)
{
	m_FilterBy->kill();
	IArrayOf<IConstNamedValue> &target = m_FilterBy.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNamedValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUResultBinRequest::setStart(__int64 val){ m_Start=val; }
void CWUResultBinRequest::setCount(int val){ m_Count=val; }
extern "C"  IEspWUResultBinRequest *createWUResultBinRequest(const char *serv){return ((IEspWUResultBinRequest *)new CWUResultBinRequest(serv));}
extern "C"  IClientWUResultBinRequest *createClientWUResultBinRequest(const char *serv){return ((IClientWUResultBinRequest *)new CWUResultBinRequest(serv));}

//=======================================================
// class CWUResultBinResponse Implementation
//=======================================================

CWUResultBinResponse::CWUResultBinResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Count(nilIgnore),m_Requested(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore),m_Format(nilIgnore),m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultBinResponse::CWUResultBinResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Count(nilIgnore),m_Requested(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore),m_Format(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinResponse");
}

CWUResultBinResponse::CWUResultBinResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Count(nilIgnore),m_Requested(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore),m_Format(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultBinResponse::CWUResultBinResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Count(nilIgnore),m_Requested(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore),m_Format(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultBinResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultBinResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Requested\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Total\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:base64Binary\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Format\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUResultBinResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultBinResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUResultBinResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Requested");
	form.appendf("  <tr><td><b>Requested: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Total");
	form.appendf("  <tr><td><b>Total: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Format");
	form.appendf("  <tr><td><b>Format: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultBinResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultBinResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		m_Start.marshall(rpc_resp, "Start", "", "", "");
		m_Count.marshall(rpc_resp, "Count", "", "", "");
		m_Requested.marshall(rpc_resp, "Requested", "", "", "");
		m_Total.marshall(rpc_resp, "Total", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
		m_Format.marshall(rpc_resp, "Format", "", "", "");
	}
}


void CWUResultBinResponse::copy(CWUResultBinResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Sequence.copy(from.m_Sequence);
	m_Name.copy(from.m_Name);
	m_Start.copy(from.m_Start);
	m_Count.copy(from.m_Count);
	m_Requested.copy(from.m_Requested);
	m_Total.copy(from.m_Total);
	m_Result.copy(from.m_Result);
	m_Format.copy(from.m_Format);
}


void CWUResultBinResponse::copy(IConstWUResultBinResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setSequence(ifrom.getSequence());
	setName(ifrom.getName());
	setStart(ifrom.getStart());
	setCount(ifrom.getCount());
	setRequested(ifrom.getRequested());
	setTotal(ifrom.getTotal());
	setResult(ifrom.getResult());
	setFormat(ifrom.getFormat());
}


void CWUResultBinResponse::getAttributes(IProperties &attributes)
{
}


void CWUResultBinResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_Sequence.toStr(ctx, buffer, "Sequence", "", true, "", "");
		m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
		m_Start.toStr(ctx, buffer, "Start", "", true, "", "");
		m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
		m_Requested.toStr(ctx, buffer, "Requested", "", true, "", "");
		m_Total.toStr(ctx, buffer, "Total", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
		m_Format.toStr(ctx, buffer, "Format", "", true, "", "");
	}
}


void CWUResultBinResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultBinResponse::serializer(IEspContext* ctx, IConstWUResultBinResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultBinResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field Requested
	{
		int n = src.getRequested();
		if (n)
			buffer.appendf("<Requested>%d</Requested>", n);
	}
	// field Total
	{
		//*** default kind: TK_INT; type=int64, name=Total
		buffer.append("<Total>");
		buffer.append(src.getTotal());
		buffer.append("</Total>");
	}
	// field Result
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getResult().toByteArray(), src.getResult().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Result>%s</Result>",tmp.str());
	}
	// field Format
	{
		const char* s = src.getFormat();
		if (s && *s)
		{
			buffer.append("<Format>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Format>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUResultBinResponse>");
}

void CWUResultBinResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_Result.getValue());
	mimetype.set(m_Result_mimetype.str());
}

bool CWUResultBinResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
		hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
		hasValue |= m_Requested.unmarshall(rpc_request, "Requested", basepath);
		hasValue |= m_Total.unmarshall(rpc_request, "Total", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
		hasValue |= m_Format.unmarshall(rpc_request, "Format", basepath);
	}
	return hasValue;
}

bool CWUResultBinResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_Requested.unmarshall(ctx, soapval, "Requested");
	hasValue |= m_Total.unmarshall(ctx, soapval, "Total");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	hasValue |= m_Format.unmarshall(ctx, soapval, "Format");
	return hasValue;
}

bool CWUResultBinResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_Requested.unmarshall(ctx, params, attachments, "Requested", basepath);
	hasValue |= m_Total.unmarshall(ctx, params, attachments, "Total", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	hasValue |= m_Format.unmarshall(ctx, params, attachments, "Format", basepath);
	return hasValue;
}

const char * CWUResultBinResponse::getWuid() { return m_Wuid.query();}
int CWUResultBinResponse::getSequence() { return m_Sequence;}
const char * CWUResultBinResponse::getName() { return m_Name.query();}
__int64 CWUResultBinResponse::getStart() { return m_Start;}
int CWUResultBinResponse::getCount() { return m_Count;}
int CWUResultBinResponse::getRequested() { return m_Requested;}
__int64 CWUResultBinResponse::getTotal() { return m_Total;}
const char *CWUResultBinResponse::getResult_mimetype(){ return m_Result_mimetype.str(); }
const MemoryBuffer & CWUResultBinResponse::getResult() { return m_Result.getValue();}
const char * CWUResultBinResponse::getFormat() { return m_Format.query();}
void CWUResultBinResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultBinResponse::setSequence(int val){ m_Sequence=val; }
void CWUResultBinResponse::setName(const char * val){ m_Name.set(val); }
void CWUResultBinResponse::setStart(__int64 val){ m_Start=val; }
void CWUResultBinResponse::setCount(int val){ m_Count=val; }
void CWUResultBinResponse::setRequested(int val){ m_Requested=val; }
void CWUResultBinResponse::setTotal(__int64 val){ m_Total=val; }
void CWUResultBinResponse::setResult_mimetype(const char *  val){ m_Result_mimetype.set(val); }
void CWUResultBinResponse::setResult(const MemoryBuffer & val){ m_Result->clear().append(val); }
void CWUResultBinResponse::setFormat(const char * val){ m_Format.set(val); }
extern "C"  IEspWUResultBinResponse *createWUResultBinResponse(const char *serv){return ((IEspWUResultBinResponse *)new CWUResultBinResponse(serv));}
extern "C"  IClientWUResultBinResponse *createClientWUResultBinResponse(const char *serv){return ((IClientWUResultBinResponse *)new CWUResultBinResponse(serv));}

//=======================================================
// class CWUResultRequest Implementation
//=======================================================

CWUResultRequest::CWUResultRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_SuppressXmlSchema(0, nilIgnore,false),m_BypassCachedResult(0, nilIgnore,false),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultRequest::CWUResultRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_SuppressXmlSchema(0, nilIgnore,false),m_BypassCachedResult(0, nilIgnore,false),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultRequest");
}

CWUResultRequest::CWUResultRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_SuppressXmlSchema(0, nilIgnore,false),m_BypassCachedResult(0, nilIgnore,false),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultRequest::CWUResultRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_SuppressXmlSchema(0, nilIgnore,false),m_BypassCachedResult(0, nilIgnore,false),m_FilterBy(nilIgnore),m_Start(0, nilIgnore,false),m_Count(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResultName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"SuppressXmlSchema\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUResultRequest","BypassCachedResult")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"BypassCachedResult\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUResultRequest","FilterBy")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FilterBy\" type=\"tns:ArrayOfNamedValue\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUResultRequest","FilterBy"))
			CNamedValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("NamedValue") && added.getValue("ArrayOfNamedValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfNamedValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"NamedValue\" type=\"tns:NamedValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfNamedValue",1);
	}
	return schema;
}

void CWUResultRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUResultRequest","BypassCachedResult",1.6);
	info.addMinVersion("WUResultRequest","FilterBy",1.5);
	if (!added.getValue("NamedValue"))
	{
		added.setValue("NamedValue",1);
		CNamedValue::getMapInfo(info,added);
	}
}

StringBuffer &CWUResultRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ResultName");
	form.appendf("  <tr><td><b>ResultName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SuppressXmlSchema");
	
	form.appendf("  <tr><td><b>SuppressXmlSchema? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUResultRequest","BypassCachedResult")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("BypassCachedResult");
		
	form.appendf("  <tr><td><b>BypassCachedResult? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUResultRequest","FilterBy")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FilterBy");
		form.appendf("<tr><td><b>FilterBy: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
	m_ResultName.marshall(rpc_resp, "ResultName", "", "", "");
	m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_SuppressXmlSchema.marshall(rpc_resp, "SuppressXmlSchema", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.6))
		m_BypassCachedResult.marshall(rpc_resp, "BypassCachedResult", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_FilterBy.marshall(rpc_resp, "FilterBy", "NamedValue");
	m_Start.marshall(rpc_resp, "Start", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
}


void CWUResultRequest::copy(CWUResultRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Sequence.copy(from.m_Sequence);
	m_ResultName.copy(from.m_ResultName);
	m_LogicalName.copy(from.m_LogicalName);
	m_Cluster.copy(from.m_Cluster);
	m_SuppressXmlSchema.copy(from.m_SuppressXmlSchema);
	m_BypassCachedResult.copy(from.m_BypassCachedResult);
	m_FilterBy.copy(from.m_FilterBy);
	m_Start.copy(from.m_Start);
	m_Count.copy(from.m_Count);
}


void CWUResultRequest::copy(IConstWUResultRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setSequence(ifrom.getSequence());
	setResultName(ifrom.getResultName());
	setLogicalName(ifrom.getLogicalName());
	setCluster(ifrom.getCluster());
	setSuppressXmlSchema(ifrom.getSuppressXmlSchema());
	setBypassCachedResult(ifrom.getBypassCachedResult());
	setFilterBy(ifrom.getFilterBy());
	setStart(ifrom.getStart());
	setCount(ifrom.getCount());
}


void CWUResultRequest::getAttributes(IProperties &attributes)
{
}


void CWUResultRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Sequence.toStr(ctx, buffer, "Sequence", "", true, "", "");
	m_ResultName.toStr(ctx, buffer, "ResultName", "", true, "", "");
	m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_SuppressXmlSchema.toStr(ctx, buffer, "SuppressXmlSchema", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.6))
		m_BypassCachedResult.toStr(ctx, buffer, "BypassCachedResult", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_FilterBy.toStr(ctx, buffer, "FilterBy", "NamedValue");
	m_Start.toStr(ctx, buffer, "Start", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
}


void CWUResultRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultRequest::serializer(IEspContext* ctx, IConstWUResultRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	// field ResultName
	{
		const char* s = src.getResultName();
		if (s && *s)
		{
			buffer.append("<ResultName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ResultName>");
		}
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field SuppressXmlSchema
	{
		bool b = src.getSuppressXmlSchema();
		if (b)
			buffer.appendf("<SuppressXmlSchema>1</SuppressXmlSchema>");
	}
	// field BypassCachedResult
	if ((clientVer==-1.0 || clientVer>=1.6))
	{
		bool b = src.getBypassCachedResult();
		if (b)
			buffer.appendf("<BypassCachedResult>1</BypassCachedResult>");
	}
	// field FilterBy
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		IArrayOf<IConstNamedValue>& v = src.getFilterBy();
		int size = v.length();
		if (size>0)
			buffer.append("<FilterBy>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CNamedValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</FilterBy>");
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	if (keepRootTag)
		buffer.append("</WUResultRequest>");
}

bool CWUResultRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
	hasValue |= m_ResultName.unmarshall(rpc_request, "ResultName", basepath);
	hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_SuppressXmlSchema.unmarshall(rpc_request, "SuppressXmlSchema", basepath);
	hasValue |= m_BypassCachedResult.unmarshall(rpc_request, "BypassCachedResult", basepath);
	hasValue |= m_FilterBy.unmarshall(rpc_request, "FilterBy", basepath);
	hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	return hasValue;
}

bool CWUResultRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	hasValue |= m_ResultName.unmarshall(ctx, soapval, "ResultName");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_SuppressXmlSchema.unmarshall(ctx, soapval, "SuppressXmlSchema");
	hasValue |= m_BypassCachedResult.unmarshall(ctx, soapval, "BypassCachedResult");
	hasValue |= m_FilterBy.unmarshall(ctx, soapval, "FilterBy");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	return hasValue;
}

bool CWUResultRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	hasValue |= m_ResultName.unmarshall(ctx, params, attachments, "ResultName", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_SuppressXmlSchema.unmarshall(ctx, params, attachments, "SuppressXmlSchema", basepath);
	hasValue |= m_BypassCachedResult.unmarshall(ctx, params, attachments, "BypassCachedResult", basepath);
	hasValue |= m_FilterBy.unmarshall(ctx, params, attachments, "FilterBy", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	return hasValue;
}

const char * CWUResultRequest::getWuid() { return m_Wuid.query();}
int CWUResultRequest::getSequence() { return m_Sequence;}
const char * CWUResultRequest::getResultName() { return m_ResultName.query();}
const char * CWUResultRequest::getLogicalName() { return m_LogicalName.query();}
const char * CWUResultRequest::getCluster() { return m_Cluster.query();}
bool CWUResultRequest::getSuppressXmlSchema() { return m_SuppressXmlSchema;}
bool CWUResultRequest::getBypassCachedResult() { return m_BypassCachedResult;}
IArrayOf<IConstNamedValue> & CWUResultRequest::getFilterBy() { return (IArrayOf<IConstNamedValue> &) m_FilterBy; }
__int64 CWUResultRequest::getStart() { return m_Start;}
int CWUResultRequest::getCount() { return m_Count;}
void CWUResultRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultRequest::setSequence(int val){ m_Sequence=val; }
void CWUResultRequest::setResultName(const char * val){ m_ResultName.set(val); }
void CWUResultRequest::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CWUResultRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUResultRequest::setSuppressXmlSchema(bool val){ m_SuppressXmlSchema=val; }
void CWUResultRequest::setBypassCachedResult(bool val){ m_BypassCachedResult=val; }
void CWUResultRequest::setFilterBy(IArrayOf<IEspNamedValue> &val)
{
	m_FilterBy->kill();
	IArrayOf<IConstNamedValue> &target = m_FilterBy.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNamedValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUResultRequest::setFilterBy(IArrayOf<IConstNamedValue> &val)
{
	m_FilterBy->kill();
	IArrayOf<IConstNamedValue> &target = m_FilterBy.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNamedValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUResultRequest::setStart(__int64 val){ m_Start=val; }
void CWUResultRequest::setCount(int val){ m_Count=val; }
extern "C"  IEspWUResultRequest *createWUResultRequest(const char *serv){return ((IEspWUResultRequest *)new CWUResultRequest(serv));}
extern "C"  IClientWUResultRequest *createClientWUResultRequest(const char *serv){return ((IClientWUResultRequest *)new CWUResultRequest(serv));}

//=======================================================
// class CWUResultResponse Implementation
//=======================================================

CWUResultResponse::CWUResultResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Requested(nilIgnore),m_Count(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultResponse::CWUResultResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Requested(nilIgnore),m_Count(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultResponse");
}

CWUResultResponse::CWUResultResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Requested(nilIgnore),m_Count(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultResponse::CWUResultResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Sequence(nilIgnore),m_LogicalName(nilIgnore),m_Cluster(nilIgnore),m_Name(nilIgnore),m_Start(nilIgnore),m_Requested(nilIgnore),m_Count(nilIgnore),m_Total(nilIgnore),m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Start\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Requested\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Total\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUResultResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUResultResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Start");
	form.appendf("  <tr><td><b>Start: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Requested");
	form.appendf("  <tr><td><b>Requested: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Total");
	form.appendf("  <tr><td><b>Total: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
		m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
		m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		m_Start.marshall(rpc_resp, "Start", "", "", "");
		m_Requested.marshall(rpc_resp, "Requested", "", "", "");
		m_Count.marshall(rpc_resp, "Count", "", "", "");
		m_Total.marshall(rpc_resp, "Total", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUResultResponse::copy(CWUResultResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Sequence.copy(from.m_Sequence);
	m_LogicalName.copy(from.m_LogicalName);
	m_Cluster.copy(from.m_Cluster);
	m_Name.copy(from.m_Name);
	m_Start.copy(from.m_Start);
	m_Requested.copy(from.m_Requested);
	m_Count.copy(from.m_Count);
	m_Total.copy(from.m_Total);
	m_Result.copy(from.m_Result);
}


void CWUResultResponse::copy(IConstWUResultResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setSequence(ifrom.getSequence());
	setLogicalName(ifrom.getLogicalName());
	setCluster(ifrom.getCluster());
	setName(ifrom.getName());
	setStart(ifrom.getStart());
	setRequested(ifrom.getRequested());
	setCount(ifrom.getCount());
	setTotal(ifrom.getTotal());
	setResult(ifrom.getResult());
}


void CWUResultResponse::getAttributes(IProperties &attributes)
{
}


void CWUResultResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", false, "", "");
		m_Sequence.toStr(ctx, buffer, "Sequence", "", false, "", "");
		m_LogicalName.toStr(ctx, buffer, "LogicalName", "", false, "", "");
		m_Cluster.toStr(ctx, buffer, "Cluster", "", false, "", "");
		m_Name.toStr(ctx, buffer, "Name", "", false, "", "");
		m_Start.toStr(ctx, buffer, "Start", "", false, "", "");
		m_Requested.toStr(ctx, buffer, "Requested", "", false, "", "");
		m_Count.toStr(ctx, buffer, "Count", "", false, "", "");
		m_Total.toStr(ctx, buffer, "Total", "", false, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", false, "", "", false);
	}
}


void CWUResultResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultResponse::serializer(IEspContext* ctx, IConstWUResultResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Start
	{
		//*** default kind: TK_INT; type=int64, name=Start
		buffer.append("<Start>");
		buffer.append(src.getStart());
		buffer.append("</Start>");
	}
	// field Requested
	{
		int n = src.getRequested();
		if (n)
			buffer.appendf("<Requested>%d</Requested>", n);
	}
	// field Count
	{
		int n = src.getCount();
		if (n)
			buffer.appendf("<Count>%d</Count>", n);
	}
	// field Total
	{
		//*** default kind: TK_INT; type=int64, name=Total
		buffer.append("<Total>");
		buffer.append(src.getTotal());
		buffer.append("</Total>");
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUResultResponse>");
}

bool CWUResultResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
		hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
		hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_Start.unmarshall(rpc_request, "Start", basepath);
		hasValue |= m_Requested.unmarshall(rpc_request, "Requested", basepath);
		hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
		hasValue |= m_Total.unmarshall(rpc_request, "Total", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUResultResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Start.unmarshall(ctx, soapval, "Start");
	hasValue |= m_Requested.unmarshall(ctx, soapval, "Requested");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_Total.unmarshall(ctx, soapval, "Total");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUResultResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Start.unmarshall(ctx, params, attachments, "Start", basepath);
	hasValue |= m_Requested.unmarshall(ctx, params, attachments, "Requested", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_Total.unmarshall(ctx, params, attachments, "Total", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWUResultResponse::getWuid() { return m_Wuid.query();}
int CWUResultResponse::getSequence() { return m_Sequence;}
const char * CWUResultResponse::getLogicalName() { return m_LogicalName.query();}
const char * CWUResultResponse::getCluster() { return m_Cluster.query();}
const char * CWUResultResponse::getName() { return m_Name.query();}
__int64 CWUResultResponse::getStart() { return m_Start;}
int CWUResultResponse::getRequested() { return m_Requested;}
int CWUResultResponse::getCount() { return m_Count;}
__int64 CWUResultResponse::getTotal() { return m_Total;}
const char * CWUResultResponse::getResult() { return m_Result.query();}
void CWUResultResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultResponse::setSequence(int val){ m_Sequence=val; }
void CWUResultResponse::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CWUResultResponse::setCluster(const char * val){ m_Cluster.set(val); }
void CWUResultResponse::setName(const char * val){ m_Name.set(val); }
void CWUResultResponse::setStart(__int64 val){ m_Start=val; }
void CWUResultResponse::setRequested(int val){ m_Requested=val; }
void CWUResultResponse::setCount(int val){ m_Count=val; }
void CWUResultResponse::setTotal(__int64 val){ m_Total=val; }
void CWUResultResponse::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspWUResultResponse *createWUResultResponse(const char *serv){return ((IEspWUResultResponse *)new CWUResultResponse(serv));}
extern "C"  IClientWUResultResponse *createClientWUResultResponse(const char *serv){return ((IClientWUResultResponse *)new CWUResultResponse(serv));}

//=======================================================
// class CWUFullResultRequest Implementation
//=======================================================

CWUFullResultRequest::CWUFullResultRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUFullResultRequest::CWUFullResultRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultRequest");
}

CWUFullResultRequest::CWUFullResultRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUFullResultRequest::CWUFullResultRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_NoRootTag(0, nilIgnore,false),m_ExceptionSeverity("info")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUFullResultRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoRootTag\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"info\" name=\"ExceptionSeverity\" type=\"tns:WUExceptionSeverity\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXWUExceptionSeverity::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUFullResultRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUFullResultRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUExceptionSeverity"))
	{
		added.setValue("WUExceptionSeverity",1);
		CXWUExceptionSeverity::getMapInfo(info,added);
	}
}

StringBuffer &CWUFullResultRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoRootTag");
	
	form.appendf("  <tr><td><b>NoRootTag? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExceptionSeverity");
	form.appendf("  <tr><td><b>ExceptionSeverity: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"info\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUFullResultRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUFullResultRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_NoRootTag.marshall(rpc_resp, "NoRootTag", "", "", "");
	m_ExceptionSeverity.marshall(rpc_resp, "ExceptionSeverity", "", "", "");
}


void CWUFullResultRequest::copy(CWUFullResultRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_NoRootTag.copy(from.m_NoRootTag);
	m_ExceptionSeverity.copy(from.m_ExceptionSeverity);
}


void CWUFullResultRequest::copy(IConstWUFullResultRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setNoRootTag(ifrom.getNoRootTag());
	setExceptionSeverity(ifrom.getExceptionSeverity());
}


void CWUFullResultRequest::getAttributes(IProperties &attributes)
{
}


void CWUFullResultRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_NoRootTag.toStr(ctx, buffer, "NoRootTag", "", true, "", "");
	m_ExceptionSeverity.toStr(ctx, buffer, "ExceptionSeverity", "", true, "", "");
}


void CWUFullResultRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUFullResultRequest::serializer(IEspContext* ctx, IConstWUFullResultRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUFullResultRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field NoRootTag
	{
		bool b = src.getNoRootTag();
		if (b)
			buffer.appendf("<NoRootTag>1</NoRootTag>");
	}
	// field ExceptionSeverity
	{
		const char* s = src.getExceptionSeverityAsString();
		buffer.append("<ExceptionSeverity>");
		encodeUtf8XML(s,buffer);
		buffer.append("</ExceptionSeverity>");
	}
	if (keepRootTag)
		buffer.append("</WUFullResultRequest>");
}

bool CWUFullResultRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_NoRootTag.unmarshall(rpc_request, "NoRootTag", basepath);
	hasValue |= m_ExceptionSeverity.unmarshall(rpc_request, "ExceptionSeverity", basepath);
	return hasValue;
}

bool CWUFullResultRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_NoRootTag.unmarshall(ctx, soapval, "NoRootTag");
	hasValue |= m_ExceptionSeverity.unmarshall(ctx, soapval, "ExceptionSeverity");
	return hasValue;
}

bool CWUFullResultRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_NoRootTag.unmarshall(ctx, params, attachments, "NoRootTag", basepath);
	hasValue |= m_ExceptionSeverity.unmarshall(ctx, params, attachments, "ExceptionSeverity", basepath);
	return hasValue;
}

const char * CWUFullResultRequest::getWuid() { return m_Wuid.query();}
bool CWUFullResultRequest::getNoRootTag() { return m_NoRootTag;}
CWUExceptionSeverity CWUFullResultRequest::getExceptionSeverity() { return m_ExceptionSeverity.getValue(); }
const char* CWUFullResultRequest::getExceptionSeverityAsString() {  return (const char*)m_ExceptionSeverity; }
void CWUFullResultRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUFullResultRequest::setNoRootTag(bool val){ m_NoRootTag=val; }
void CWUFullResultRequest::setExceptionSeverity(CWUExceptionSeverity val) { m_ExceptionSeverity.setValue(val); }
void CWUFullResultRequest::setExceptionSeverity(const char* val) { m_ExceptionSeverity.setValue(val); }
extern "C"  IEspWUFullResultRequest *createWUFullResultRequest(const char *serv){return ((IEspWUFullResultRequest *)new CWUFullResultRequest(serv));}
extern "C"  IClientWUFullResultRequest *createClientWUFullResultRequest(const char *serv){return ((IClientWUFullResultRequest *)new CWUFullResultRequest(serv));}

//=======================================================
// class CWUFullResultResponse Implementation
//=======================================================

CWUFullResultResponse::CWUFullResultResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUFullResultResponse::CWUFullResultResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultResponse");
}

CWUFullResultResponse::CWUFullResultResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUFullResultResponse::CWUFullResultResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUFullResultResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUFullResultResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Results\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUFullResultResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUFullResultResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUFullResultResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Results");
	form.appendf("  <tr><td><b>Results: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUFullResultResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUFullResultResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Results.marshall(rpc_resp, "Results", "", "", "");
	}
}


void CWUFullResultResponse::copy(CWUFullResultResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Results.copy(from.m_Results);
}


void CWUFullResultResponse::copy(IConstWUFullResultResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setResults(ifrom.getResults());
}


void CWUFullResultResponse::getAttributes(IProperties &attributes)
{
}


void CWUFullResultResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", false, "", "");
		m_Results.toStr(ctx, buffer, "Results", "", false, "", "", false);
	}
}


void CWUFullResultResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUFullResultResponse::serializer(IEspContext* ctx, IConstWUFullResultResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUFullResultResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Results
	{
		const char* s = src.getResults();
		if (s && *s)
		{
			buffer.append("<Results>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Results>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUFullResultResponse>");
}

bool CWUFullResultResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Results.unmarshall(rpc_request, "Results", basepath);
	}
	return hasValue;
}

bool CWUFullResultResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Results.unmarshall(ctx, soapval, "Results");
	return hasValue;
}

bool CWUFullResultResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Results.unmarshall(ctx, params, attachments, "Results", basepath);
	return hasValue;
}

const char * CWUFullResultResponse::getWuid() { return m_Wuid.query();}
const char * CWUFullResultResponse::getResults() { return m_Results.query();}
void CWUFullResultResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUFullResultResponse::setResults(const char * val){ m_Results.set(val); }
extern "C"  IEspWUFullResultResponse *createWUFullResultResponse(const char *serv){return ((IEspWUFullResultResponse *)new CWUFullResultResponse(serv));}
extern "C"  IClientWUFullResultResponse *createClientWUFullResultResponse(const char *serv){return ((IClientWUFullResultResponse *)new CWUFullResultResponse(serv));}

//=======================================================
// class CWUResultViewRequest Implementation
//=======================================================

CWUResultViewRequest::CWUResultViewRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultViewRequest::CWUResultViewRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewRequest");
}

CWUResultViewRequest::CWUResultViewRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultViewRequest::CWUResultViewRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Sequence(nilIgnore),m_ResultName(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultViewRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ViewName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sequence\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ResultName\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUResultViewRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultViewRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUResultViewRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ViewName");
	form.appendf("  <tr><td><b>ViewName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Sequence");
	form.appendf("  <tr><td><b>Sequence: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ResultName");
	form.appendf("  <tr><td><b>ResultName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultViewRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultViewRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_ViewName.marshall(rpc_resp, "ViewName", "", "", "");
	m_Sequence.marshall(rpc_resp, "Sequence", "", "", "");
	m_ResultName.marshall(rpc_resp, "ResultName", "", "", "");
}


void CWUResultViewRequest::copy(CWUResultViewRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_ViewName.copy(from.m_ViewName);
	m_Sequence.copy(from.m_Sequence);
	m_ResultName.copy(from.m_ResultName);
}


void CWUResultViewRequest::copy(IConstWUResultViewRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setViewName(ifrom.getViewName());
	setSequence(ifrom.getSequence());
	setResultName(ifrom.getResultName());
}


void CWUResultViewRequest::getAttributes(IProperties &attributes)
{
}


void CWUResultViewRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_ViewName.toStr(ctx, buffer, "ViewName", "", true, "", "");
	m_Sequence.toStr(ctx, buffer, "Sequence", "", true, "", "");
	m_ResultName.toStr(ctx, buffer, "ResultName", "", true, "", "");
}


void CWUResultViewRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultViewRequest::serializer(IEspContext* ctx, IConstWUResultViewRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultViewRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field ViewName
	{
		const char* s = src.getViewName();
		if (s && *s)
		{
			buffer.append("<ViewName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ViewName>");
		}
	}
	// field Sequence
	{
		int n = src.getSequence();
		if (n)
			buffer.appendf("<Sequence>%d</Sequence>", n);
	}
	// field ResultName
	{
		const char* s = src.getResultName();
		if (s && *s)
		{
			buffer.append("<ResultName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ResultName>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUResultViewRequest>");
}

bool CWUResultViewRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_ViewName.unmarshall(rpc_request, "ViewName", basepath);
	hasValue |= m_Sequence.unmarshall(rpc_request, "Sequence", basepath);
	hasValue |= m_ResultName.unmarshall(rpc_request, "ResultName", basepath);
	return hasValue;
}

bool CWUResultViewRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_ViewName.unmarshall(ctx, soapval, "ViewName");
	hasValue |= m_Sequence.unmarshall(ctx, soapval, "Sequence");
	hasValue |= m_ResultName.unmarshall(ctx, soapval, "ResultName");
	return hasValue;
}

bool CWUResultViewRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_ViewName.unmarshall(ctx, params, attachments, "ViewName", basepath);
	hasValue |= m_Sequence.unmarshall(ctx, params, attachments, "Sequence", basepath);
	hasValue |= m_ResultName.unmarshall(ctx, params, attachments, "ResultName", basepath);
	return hasValue;
}

const char * CWUResultViewRequest::getWuid() { return m_Wuid.query();}
const char * CWUResultViewRequest::getViewName() { return m_ViewName.query();}
int CWUResultViewRequest::getSequence() { return m_Sequence;}
const char * CWUResultViewRequest::getResultName() { return m_ResultName.query();}
void CWUResultViewRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultViewRequest::setViewName(const char * val){ m_ViewName.set(val); }
void CWUResultViewRequest::setSequence(int val){ m_Sequence=val; }
void CWUResultViewRequest::setResultName(const char * val){ m_ResultName.set(val); }
extern "C"  IEspWUResultViewRequest *createWUResultViewRequest(const char *serv){return ((IEspWUResultViewRequest *)new CWUResultViewRequest(serv));}
extern "C"  IClientWUResultViewRequest *createClientWUResultViewRequest(const char *serv){return ((IClientWUResultViewRequest *)new CWUResultViewRequest(serv));}

//=======================================================
// class CWUResultViewResponse Implementation
//=======================================================

CWUResultViewResponse::CWUResultViewResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Result(nilIgnore),m_Result_mimetype("text/html")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResultViewResponse::CWUResultViewResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Result(nilIgnore), m_Result_mimetype("text/html")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewResponse");
}

CWUResultViewResponse::CWUResultViewResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Result(nilIgnore), m_Result_mimetype("text/html")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUResultViewResponse::CWUResultViewResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_ViewName(nilIgnore),m_Result(nilIgnore), m_Result_mimetype("text/html")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResultViewResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUResultViewResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ViewName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUResultViewResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResultViewResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUResultViewResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ViewName");
	form.appendf("  <tr><td><b>ViewName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResultViewResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResultViewResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_ViewName.marshall(rpc_resp, "ViewName", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUResultViewResponse::copy(CWUResultViewResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_ViewName.copy(from.m_ViewName);
	m_Result.copy(from.m_Result);
}


void CWUResultViewResponse::copy(IConstWUResultViewResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setViewName(ifrom.getViewName());
	setResult(ifrom.getResult());
}


void CWUResultViewResponse::getAttributes(IProperties &attributes)
{
}


void CWUResultViewResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_ViewName.toStr(ctx, buffer, "ViewName", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CWUResultViewResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResultViewResponse::serializer(IEspContext* ctx, IConstWUResultViewResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResultViewResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field ViewName
	{
		const char* s = src.getViewName();
		if (s && *s)
		{
			buffer.append("<ViewName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ViewName>");
		}
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUResultViewResponse>");
}

void CWUResultViewResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_Result.getValue().length(), m_Result.getValue().str());
	mimetype.set(m_Result_mimetype.str());
}

bool CWUResultViewResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_ViewName.unmarshall(rpc_request, "ViewName", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUResultViewResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_ViewName.unmarshall(ctx, soapval, "ViewName");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUResultViewResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_ViewName.unmarshall(ctx, params, attachments, "ViewName", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWUResultViewResponse::getWuid() { return m_Wuid.query();}
const char * CWUResultViewResponse::getViewName() { return m_ViewName.query();}
const char *CWUResultViewResponse::getResult_mimetype(){ return m_Result_mimetype.str(); }
const char * CWUResultViewResponse::getResult() { return m_Result.query();}
void CWUResultViewResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUResultViewResponse::setViewName(const char * val){ m_ViewName.set(val); }
void CWUResultViewResponse::setResult_mimetype(const char *  val){ m_Result_mimetype.set(val); }
void CWUResultViewResponse::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspWUResultViewResponse *createWUResultViewResponse(const char *serv){return ((IEspWUResultViewResponse *)new CWUResultViewResponse(serv));}
extern "C"  IClientWUResultViewResponse *createClientWUResultViewResponse(const char *serv){return ((IClientWUResultViewResponse *)new CWUResultViewResponse(serv));}

//=======================================================
// class CWUClusterJobQueueXLSRequest Implementation
//=======================================================

CWUClusterJobQueueXLSRequest::CWUClusterJobQueueXLSRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobQueueXLSRequest::CWUClusterJobQueueXLSRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSRequest");
}

CWUClusterJobQueueXLSRequest::CWUClusterJobQueueXLSRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobQueueXLSRequest::CWUClusterJobQueueXLSRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobQueueXLSRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowType\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobQueueXLSRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobQueueXLSRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobQueueXLSRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowType");
	form.appendf("  <tr><td><b>ShowType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobQueueXLSRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobQueueXLSRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_ShowType.marshall(rpc_resp, "ShowType", "", "", "");
}


void CWUClusterJobQueueXLSRequest::copy(CWUClusterJobQueueXLSRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ShowType.copy(from.m_ShowType);
}


void CWUClusterJobQueueXLSRequest::copy(IConstWUClusterJobQueueXLSRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setShowType(ifrom.getShowType());
}


void CWUClusterJobQueueXLSRequest::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobQueueXLSRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_ShowType.toStr(ctx, buffer, "ShowType", "", true, "", "");
}


void CWUClusterJobQueueXLSRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobQueueXLSRequest::serializer(IEspContext* ctx, IConstWUClusterJobQueueXLSRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobQueueXLSRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ShowType
	{
		const char* s = src.getShowType();
		if (s && *s)
		{
			buffer.append("<ShowType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ShowType>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobQueueXLSRequest>");
}

bool CWUClusterJobQueueXLSRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_ShowType.unmarshall(rpc_request, "ShowType", basepath);
	return hasValue;
}

bool CWUClusterJobQueueXLSRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ShowType.unmarshall(ctx, soapval, "ShowType");
	return hasValue;
}

bool CWUClusterJobQueueXLSRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ShowType.unmarshall(ctx, params, attachments, "ShowType", basepath);
	return hasValue;
}

const char * CWUClusterJobQueueXLSRequest::getCluster() { return m_Cluster.query();}
const char * CWUClusterJobQueueXLSRequest::getStartDate() { return m_StartDate.query();}
const char * CWUClusterJobQueueXLSRequest::getEndDate() { return m_EndDate.query();}
const char * CWUClusterJobQueueXLSRequest::getShowType() { return m_ShowType.query();}
void CWUClusterJobQueueXLSRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUClusterJobQueueXLSRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUClusterJobQueueXLSRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUClusterJobQueueXLSRequest::setShowType(const char * val){ m_ShowType.set(val); }
extern "C"  IEspWUClusterJobQueueXLSRequest *createWUClusterJobQueueXLSRequest(const char *serv){return ((IEspWUClusterJobQueueXLSRequest *)new CWUClusterJobQueueXLSRequest(serv));}
extern "C"  IClientWUClusterJobQueueXLSRequest *createClientWUClusterJobQueueXLSRequest(const char *serv){return ((IClientWUClusterJobQueueXLSRequest *)new CWUClusterJobQueueXLSRequest(serv));}

//=======================================================
// class CWUClusterJobQueueXLSResponse Implementation
//=======================================================

CWUClusterJobQueueXLSResponse::CWUClusterJobQueueXLSResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Result(nilIgnore),m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobQueueXLSResponse::CWUClusterJobQueueXLSResponse(const char *serviceName, const char *bc)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSResponse");
}

CWUClusterJobQueueXLSResponse::CWUClusterJobQueueXLSResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobQueueXLSResponse::CWUClusterJobQueueXLSResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueXLSResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobQueueXLSResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobQueueXLSResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobQueueXLSResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobQueueXLSResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobQueueXLSResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobQueueXLSResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUClusterJobQueueXLSResponse::copy(CWUClusterJobQueueXLSResponse &from)
{
	m_Result.copy(from.m_Result);
}


void CWUClusterJobQueueXLSResponse::copy(IConstWUClusterJobQueueXLSResponse &ifrom)
{
	setResult(ifrom.getResult());
}


void CWUClusterJobQueueXLSResponse::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobQueueXLSResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CWUClusterJobQueueXLSResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobQueueXLSResponse::serializer(IEspContext* ctx, IConstWUClusterJobQueueXLSResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobQueueXLSResponse>");
	// field Result
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getResult().toByteArray(), src.getResult().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Result>%s</Result>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobQueueXLSResponse>");
}

void CWUClusterJobQueueXLSResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_Result.getValue());
	mimetype.set(m_Result_mimetype.str());
}

bool CWUClusterJobQueueXLSResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUClusterJobQueueXLSResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUClusterJobQueueXLSResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char *CWUClusterJobQueueXLSResponse::getResult_mimetype(){ return m_Result_mimetype.str(); }
const MemoryBuffer & CWUClusterJobQueueXLSResponse::getResult() { return m_Result.getValue();}
void CWUClusterJobQueueXLSResponse::setResult_mimetype(const char *  val){ m_Result_mimetype.set(val); }
void CWUClusterJobQueueXLSResponse::setResult(const MemoryBuffer & val){ m_Result->clear().append(val); }
extern "C"  IEspWUClusterJobQueueXLSResponse *createWUClusterJobQueueXLSResponse(const char *serv){return ((IEspWUClusterJobQueueXLSResponse *)new CWUClusterJobQueueXLSResponse(serv));}
extern "C"  IClientWUClusterJobQueueXLSResponse *createClientWUClusterJobQueueXLSResponse(const char *serv){return ((IClientWUClusterJobQueueXLSResponse *)new CWUClusterJobQueueXLSResponse(serv));}

//=======================================================
// class CWUClusterJobQueueLOGRequest Implementation
//=======================================================

CWUClusterJobQueueLOGRequest::CWUClusterJobQueueLOGRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobQueueLOGRequest::CWUClusterJobQueueLOGRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGRequest");
}

CWUClusterJobQueueLOGRequest::CWUClusterJobQueueLOGRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobQueueLOGRequest::CWUClusterJobQueueLOGRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobQueueLOGRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobQueueLOGRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobQueueLOGRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobQueueLOGRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobQueueLOGRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobQueueLOGRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
}


void CWUClusterJobQueueLOGRequest::copy(CWUClusterJobQueueLOGRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
}


void CWUClusterJobQueueLOGRequest::copy(IConstWUClusterJobQueueLOGRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
}


void CWUClusterJobQueueLOGRequest::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobQueueLOGRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
}


void CWUClusterJobQueueLOGRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobQueueLOGRequest::serializer(IEspContext* ctx, IConstWUClusterJobQueueLOGRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobQueueLOGRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobQueueLOGRequest>");
}

bool CWUClusterJobQueueLOGRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	return hasValue;
}

bool CWUClusterJobQueueLOGRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	return hasValue;
}

bool CWUClusterJobQueueLOGRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	return hasValue;
}

const char * CWUClusterJobQueueLOGRequest::getCluster() { return m_Cluster.query();}
const char * CWUClusterJobQueueLOGRequest::getStartDate() { return m_StartDate.query();}
const char * CWUClusterJobQueueLOGRequest::getEndDate() { return m_EndDate.query();}
void CWUClusterJobQueueLOGRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUClusterJobQueueLOGRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUClusterJobQueueLOGRequest::setEndDate(const char * val){ m_EndDate.set(val); }
extern "C"  IEspWUClusterJobQueueLOGRequest *createWUClusterJobQueueLOGRequest(const char *serv){return ((IEspWUClusterJobQueueLOGRequest *)new CWUClusterJobQueueLOGRequest(serv));}
extern "C"  IClientWUClusterJobQueueLOGRequest *createClientWUClusterJobQueueLOGRequest(const char *serv){return ((IClientWUClusterJobQueueLOGRequest *)new CWUClusterJobQueueLOGRequest(serv));}

//=======================================================
// class CWUClusterJobQueueLOGResponse Implementation
//=======================================================

CWUClusterJobQueueLOGResponse::CWUClusterJobQueueLOGResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_thefile(nilIgnore),m_thefile_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobQueueLOGResponse::CWUClusterJobQueueLOGResponse(const char *serviceName, const char *bc)
	: m_thefile(nilIgnore), m_thefile_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGResponse");
}

CWUClusterJobQueueLOGResponse::CWUClusterJobQueueLOGResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_thefile(nilIgnore), m_thefile_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobQueueLOGResponse::CWUClusterJobQueueLOGResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_thefile(nilIgnore), m_thefile_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobQueueLOGResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobQueueLOGResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"thefile\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobQueueLOGResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobQueueLOGResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobQueueLOGResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("thefile");
	form.appendf("  <tr><td><b>thefile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobQueueLOGResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobQueueLOGResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_thefile.marshall(rpc_resp, "thefile", "", "", "");
	}
}


void CWUClusterJobQueueLOGResponse::copy(CWUClusterJobQueueLOGResponse &from)
{
	m_thefile.copy(from.m_thefile);
}


void CWUClusterJobQueueLOGResponse::copy(IConstWUClusterJobQueueLOGResponse &ifrom)
{
	setThefile(ifrom.getThefile());
}


void CWUClusterJobQueueLOGResponse::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobQueueLOGResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_thefile.toStr(ctx, buffer, "thefile", "", true, "", "");
	}
}


void CWUClusterJobQueueLOGResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobQueueLOGResponse::serializer(IEspContext* ctx, IConstWUClusterJobQueueLOGResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobQueueLOGResponse>");
	// field thefile
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getThefile().toByteArray(), src.getThefile().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<thefile>%s</thefile>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobQueueLOGResponse>");
}

void CWUClusterJobQueueLOGResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_thefile.getValue());
	mimetype.set(m_thefile_mimetype.str());
}

bool CWUClusterJobQueueLOGResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_thefile.unmarshall(rpc_request, "thefile", basepath);
	}
	return hasValue;
}

bool CWUClusterJobQueueLOGResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_thefile.unmarshall(ctx, soapval, "thefile");
	return hasValue;
}

bool CWUClusterJobQueueLOGResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_thefile.unmarshall(ctx, params, attachments, "thefile", basepath);
	return hasValue;
}

const char *CWUClusterJobQueueLOGResponse::getThefile_mimetype(){ return m_thefile_mimetype.str(); }
const MemoryBuffer & CWUClusterJobQueueLOGResponse::getThefile() { return m_thefile.getValue();}
void CWUClusterJobQueueLOGResponse::setThefile_mimetype(const char *  val){ m_thefile_mimetype.set(val); }
void CWUClusterJobQueueLOGResponse::setThefile(const MemoryBuffer & val){ m_thefile->clear().append(val); }
extern "C"  IEspWUClusterJobQueueLOGResponse *createWUClusterJobQueueLOGResponse(const char *serv){return ((IEspWUClusterJobQueueLOGResponse *)new CWUClusterJobQueueLOGResponse(serv));}
extern "C"  IClientWUClusterJobQueueLOGResponse *createClientWUClusterJobQueueLOGResponse(const char *serv){return ((IClientWUClusterJobQueueLOGResponse *)new CWUClusterJobQueueLOGResponse(serv));}

//=======================================================
// class CWUClusterJobXLSRequest Implementation
//=======================================================

CWUClusterJobXLSRequest::CWUClusterJobXLSRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobXLSRequest::CWUClusterJobXLSRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSRequest");
}

CWUClusterJobXLSRequest::CWUClusterJobXLSRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobXLSRequest::CWUClusterJobXLSRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobXLSRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowAll\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BusinessStartTime\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BusinessEndTime\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobXLSRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobXLSRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobXLSRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowAll");
	
	form.appendf("  <tr><td><b>ShowAll? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BusinessStartTime");
	form.appendf("  <tr><td><b>BusinessStartTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BusinessEndTime");
	form.appendf("  <tr><td><b>BusinessEndTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobXLSRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobXLSRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_ShowAll.marshall(rpc_resp, "ShowAll", "", "", "");
	m_BusinessStartTime.marshall(rpc_resp, "BusinessStartTime", "", "", "");
	m_BusinessEndTime.marshall(rpc_resp, "BusinessEndTime", "", "", "");
}


void CWUClusterJobXLSRequest::copy(CWUClusterJobXLSRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ShowAll.copy(from.m_ShowAll);
	m_BusinessStartTime.copy(from.m_BusinessStartTime);
	m_BusinessEndTime.copy(from.m_BusinessEndTime);
}


void CWUClusterJobXLSRequest::copy(IConstWUClusterJobXLSRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setShowAll(ifrom.getShowAll());
	setBusinessStartTime(ifrom.getBusinessStartTime());
	setBusinessEndTime(ifrom.getBusinessEndTime());
}


void CWUClusterJobXLSRequest::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobXLSRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_ShowAll.toStr(ctx, buffer, "ShowAll", "", true, "", "");
	m_BusinessStartTime.toStr(ctx, buffer, "BusinessStartTime", "", true, "", "");
	m_BusinessEndTime.toStr(ctx, buffer, "BusinessEndTime", "", true, "", "");
}


void CWUClusterJobXLSRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobXLSRequest::serializer(IEspContext* ctx, IConstWUClusterJobXLSRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobXLSRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ShowAll
	{
		bool b = src.getShowAll();
		if (b)
			buffer.appendf("<ShowAll>1</ShowAll>");
	}
	// field BusinessStartTime
	{
		const char* s = src.getBusinessStartTime();
		if (s && *s)
		{
			buffer.append("<BusinessStartTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BusinessStartTime>");
		}
	}
	// field BusinessEndTime
	{
		const char* s = src.getBusinessEndTime();
		if (s && *s)
		{
			buffer.append("<BusinessEndTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BusinessEndTime>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobXLSRequest>");
}

bool CWUClusterJobXLSRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_ShowAll.unmarshall(rpc_request, "ShowAll", basepath);
	hasValue |= m_BusinessStartTime.unmarshall(rpc_request, "BusinessStartTime", basepath);
	hasValue |= m_BusinessEndTime.unmarshall(rpc_request, "BusinessEndTime", basepath);
	return hasValue;
}

bool CWUClusterJobXLSRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ShowAll.unmarshall(ctx, soapval, "ShowAll");
	hasValue |= m_BusinessStartTime.unmarshall(ctx, soapval, "BusinessStartTime");
	hasValue |= m_BusinessEndTime.unmarshall(ctx, soapval, "BusinessEndTime");
	return hasValue;
}

bool CWUClusterJobXLSRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ShowAll.unmarshall(ctx, params, attachments, "ShowAll", basepath);
	hasValue |= m_BusinessStartTime.unmarshall(ctx, params, attachments, "BusinessStartTime", basepath);
	hasValue |= m_BusinessEndTime.unmarshall(ctx, params, attachments, "BusinessEndTime", basepath);
	return hasValue;
}

const char * CWUClusterJobXLSRequest::getCluster() { return m_Cluster.query();}
const char * CWUClusterJobXLSRequest::getStartDate() { return m_StartDate.query();}
const char * CWUClusterJobXLSRequest::getEndDate() { return m_EndDate.query();}
bool CWUClusterJobXLSRequest::getShowAll() { return m_ShowAll;}
const char * CWUClusterJobXLSRequest::getBusinessStartTime() { return m_BusinessStartTime.query();}
const char * CWUClusterJobXLSRequest::getBusinessEndTime() { return m_BusinessEndTime.query();}
void CWUClusterJobXLSRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUClusterJobXLSRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUClusterJobXLSRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUClusterJobXLSRequest::setShowAll(bool val){ m_ShowAll=val; }
void CWUClusterJobXLSRequest::setBusinessStartTime(const char * val){ m_BusinessStartTime.set(val); }
void CWUClusterJobXLSRequest::setBusinessEndTime(const char * val){ m_BusinessEndTime.set(val); }
extern "C"  IEspWUClusterJobXLSRequest *createWUClusterJobXLSRequest(const char *serv){return ((IEspWUClusterJobXLSRequest *)new CWUClusterJobXLSRequest(serv));}
extern "C"  IClientWUClusterJobXLSRequest *createClientWUClusterJobXLSRequest(const char *serv){return ((IClientWUClusterJobXLSRequest *)new CWUClusterJobXLSRequest(serv));}

//=======================================================
// class CWUClusterJobXLSResponse Implementation
//=======================================================

CWUClusterJobXLSResponse::CWUClusterJobXLSResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Result(nilIgnore),m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobXLSResponse::CWUClusterJobXLSResponse(const char *serviceName, const char *bc)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSResponse");
}

CWUClusterJobXLSResponse::CWUClusterJobXLSResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobXLSResponse::CWUClusterJobXLSResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobXLSResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobXLSResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobXLSResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobXLSResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobXLSResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobXLSResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobXLSResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUClusterJobXLSResponse::copy(CWUClusterJobXLSResponse &from)
{
	m_Result.copy(from.m_Result);
}


void CWUClusterJobXLSResponse::copy(IConstWUClusterJobXLSResponse &ifrom)
{
	setResult(ifrom.getResult());
}


void CWUClusterJobXLSResponse::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobXLSResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CWUClusterJobXLSResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobXLSResponse::serializer(IEspContext* ctx, IConstWUClusterJobXLSResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobXLSResponse>");
	// field Result
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getResult().toByteArray(), src.getResult().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Result>%s</Result>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobXLSResponse>");
}

void CWUClusterJobXLSResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_Result.getValue());
	mimetype.set(m_Result_mimetype.str());
}

bool CWUClusterJobXLSResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUClusterJobXLSResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUClusterJobXLSResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char *CWUClusterJobXLSResponse::getResult_mimetype(){ return m_Result_mimetype.str(); }
const MemoryBuffer & CWUClusterJobXLSResponse::getResult() { return m_Result.getValue();}
void CWUClusterJobXLSResponse::setResult_mimetype(const char *  val){ m_Result_mimetype.set(val); }
void CWUClusterJobXLSResponse::setResult(const MemoryBuffer & val){ m_Result->clear().append(val); }
extern "C"  IEspWUClusterJobXLSResponse *createWUClusterJobXLSResponse(const char *serv){return ((IEspWUClusterJobXLSResponse *)new CWUClusterJobXLSResponse(serv));}
extern "C"  IClientWUClusterJobXLSResponse *createClientWUClusterJobXLSResponse(const char *serv){return ((IClientWUClusterJobXLSResponse *)new CWUClusterJobXLSResponse(serv));}

//=======================================================
// class CWUClusterJobSummaryXLSRequest Implementation
//=======================================================

CWUClusterJobSummaryXLSRequest::CWUClusterJobSummaryXLSRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobSummaryXLSRequest::CWUClusterJobSummaryXLSRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSRequest");
}

CWUClusterJobSummaryXLSRequest::CWUClusterJobSummaryXLSRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobSummaryXLSRequest::CWUClusterJobSummaryXLSRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartTime(nilIgnore),m_BusinessEndTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobSummaryXLSRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowAll\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BusinessStartTime\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BusinessEndTime\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobSummaryXLSRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobSummaryXLSRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobSummaryXLSRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowAll");
	
	form.appendf("  <tr><td><b>ShowAll? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BusinessStartTime");
	form.appendf("  <tr><td><b>BusinessStartTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BusinessEndTime");
	form.appendf("  <tr><td><b>BusinessEndTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobSummaryXLSRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobSummaryXLSRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_ShowAll.marshall(rpc_resp, "ShowAll", "", "", "");
	m_BusinessStartTime.marshall(rpc_resp, "BusinessStartTime", "", "", "");
	m_BusinessEndTime.marshall(rpc_resp, "BusinessEndTime", "", "", "");
}


void CWUClusterJobSummaryXLSRequest::copy(CWUClusterJobSummaryXLSRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ShowAll.copy(from.m_ShowAll);
	m_BusinessStartTime.copy(from.m_BusinessStartTime);
	m_BusinessEndTime.copy(from.m_BusinessEndTime);
}


void CWUClusterJobSummaryXLSRequest::copy(IConstWUClusterJobSummaryXLSRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setShowAll(ifrom.getShowAll());
	setBusinessStartTime(ifrom.getBusinessStartTime());
	setBusinessEndTime(ifrom.getBusinessEndTime());
}


void CWUClusterJobSummaryXLSRequest::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobSummaryXLSRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_ShowAll.toStr(ctx, buffer, "ShowAll", "", true, "", "");
	m_BusinessStartTime.toStr(ctx, buffer, "BusinessStartTime", "", true, "", "");
	m_BusinessEndTime.toStr(ctx, buffer, "BusinessEndTime", "", true, "", "");
}


void CWUClusterJobSummaryXLSRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobSummaryXLSRequest::serializer(IEspContext* ctx, IConstWUClusterJobSummaryXLSRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobSummaryXLSRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ShowAll
	{
		bool b = src.getShowAll();
		if (b)
			buffer.appendf("<ShowAll>1</ShowAll>");
	}
	// field BusinessStartTime
	{
		const char* s = src.getBusinessStartTime();
		if (s && *s)
		{
			buffer.append("<BusinessStartTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BusinessStartTime>");
		}
	}
	// field BusinessEndTime
	{
		const char* s = src.getBusinessEndTime();
		if (s && *s)
		{
			buffer.append("<BusinessEndTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BusinessEndTime>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobSummaryXLSRequest>");
}

bool CWUClusterJobSummaryXLSRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_ShowAll.unmarshall(rpc_request, "ShowAll", basepath);
	hasValue |= m_BusinessStartTime.unmarshall(rpc_request, "BusinessStartTime", basepath);
	hasValue |= m_BusinessEndTime.unmarshall(rpc_request, "BusinessEndTime", basepath);
	return hasValue;
}

bool CWUClusterJobSummaryXLSRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ShowAll.unmarshall(ctx, soapval, "ShowAll");
	hasValue |= m_BusinessStartTime.unmarshall(ctx, soapval, "BusinessStartTime");
	hasValue |= m_BusinessEndTime.unmarshall(ctx, soapval, "BusinessEndTime");
	return hasValue;
}

bool CWUClusterJobSummaryXLSRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ShowAll.unmarshall(ctx, params, attachments, "ShowAll", basepath);
	hasValue |= m_BusinessStartTime.unmarshall(ctx, params, attachments, "BusinessStartTime", basepath);
	hasValue |= m_BusinessEndTime.unmarshall(ctx, params, attachments, "BusinessEndTime", basepath);
	return hasValue;
}

const char * CWUClusterJobSummaryXLSRequest::getCluster() { return m_Cluster.query();}
const char * CWUClusterJobSummaryXLSRequest::getStartDate() { return m_StartDate.query();}
const char * CWUClusterJobSummaryXLSRequest::getEndDate() { return m_EndDate.query();}
bool CWUClusterJobSummaryXLSRequest::getShowAll() { return m_ShowAll;}
const char * CWUClusterJobSummaryXLSRequest::getBusinessStartTime() { return m_BusinessStartTime.query();}
const char * CWUClusterJobSummaryXLSRequest::getBusinessEndTime() { return m_BusinessEndTime.query();}
void CWUClusterJobSummaryXLSRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUClusterJobSummaryXLSRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUClusterJobSummaryXLSRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUClusterJobSummaryXLSRequest::setShowAll(bool val){ m_ShowAll=val; }
void CWUClusterJobSummaryXLSRequest::setBusinessStartTime(const char * val){ m_BusinessStartTime.set(val); }
void CWUClusterJobSummaryXLSRequest::setBusinessEndTime(const char * val){ m_BusinessEndTime.set(val); }
extern "C"  IEspWUClusterJobSummaryXLSRequest *createWUClusterJobSummaryXLSRequest(const char *serv){return ((IEspWUClusterJobSummaryXLSRequest *)new CWUClusterJobSummaryXLSRequest(serv));}
extern "C"  IClientWUClusterJobSummaryXLSRequest *createClientWUClusterJobSummaryXLSRequest(const char *serv){return ((IClientWUClusterJobSummaryXLSRequest *)new CWUClusterJobSummaryXLSRequest(serv));}

//=======================================================
// class CWUClusterJobSummaryXLSResponse Implementation
//=======================================================

CWUClusterJobSummaryXLSResponse::CWUClusterJobSummaryXLSResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Result(nilIgnore),m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUClusterJobSummaryXLSResponse::CWUClusterJobSummaryXLSResponse(const char *serviceName, const char *bc)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSResponse");
}

CWUClusterJobSummaryXLSResponse::CWUClusterJobSummaryXLSResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUClusterJobSummaryXLSResponse::CWUClusterJobSummaryXLSResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Result(nilIgnore), m_Result_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUClusterJobSummaryXLSResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUClusterJobSummaryXLSResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUClusterJobSummaryXLSResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUClusterJobSummaryXLSResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUClusterJobSummaryXLSResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUClusterJobSummaryXLSResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUClusterJobSummaryXLSResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUClusterJobSummaryXLSResponse::copy(CWUClusterJobSummaryXLSResponse &from)
{
	m_Result.copy(from.m_Result);
}


void CWUClusterJobSummaryXLSResponse::copy(IConstWUClusterJobSummaryXLSResponse &ifrom)
{
	setResult(ifrom.getResult());
}


void CWUClusterJobSummaryXLSResponse::getAttributes(IProperties &attributes)
{
}


void CWUClusterJobSummaryXLSResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CWUClusterJobSummaryXLSResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUClusterJobSummaryXLSResponse::serializer(IEspContext* ctx, IConstWUClusterJobSummaryXLSResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUClusterJobSummaryXLSResponse>");
	// field Result
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getResult().toByteArray(), src.getResult().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Result>%s</Result>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUClusterJobSummaryXLSResponse>");
}

void CWUClusterJobSummaryXLSResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_Result.getValue());
	mimetype.set(m_Result_mimetype.str());
}

bool CWUClusterJobSummaryXLSResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUClusterJobSummaryXLSResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUClusterJobSummaryXLSResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char *CWUClusterJobSummaryXLSResponse::getResult_mimetype(){ return m_Result_mimetype.str(); }
const MemoryBuffer & CWUClusterJobSummaryXLSResponse::getResult() { return m_Result.getValue();}
void CWUClusterJobSummaryXLSResponse::setResult_mimetype(const char *  val){ m_Result_mimetype.set(val); }
void CWUClusterJobSummaryXLSResponse::setResult(const MemoryBuffer & val){ m_Result->clear().append(val); }
extern "C"  IEspWUClusterJobSummaryXLSResponse *createWUClusterJobSummaryXLSResponse(const char *serv){return ((IEspWUClusterJobSummaryXLSResponse *)new CWUClusterJobSummaryXLSResponse(serv));}
extern "C"  IClientWUClusterJobSummaryXLSResponse *createClientWUClusterJobSummaryXLSResponse(const char *serv){return ((IClientWUClusterJobSummaryXLSResponse *)new CWUClusterJobSummaryXLSResponse(serv));}

//=======================================================
// class CWUGetThorJobQueueRequest Implementation
//=======================================================

CWUGetThorJobQueueRequest::CWUGetThorJobQueueRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobQueueItemsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetThorJobQueueRequest::CWUGetThorJobQueueRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobQueueItemsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueRequest");
}

CWUGetThorJobQueueRequest::CWUGetThorJobQueueRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobQueueItemsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetThorJobQueueRequest::CWUGetThorJobQueueRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobQueueItemsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetThorJobQueueRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxJobQueueItemsToReturn\" type=\"xsd:unsignedInt\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetThorJobQueueRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetThorJobQueueRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUGetThorJobQueueRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxJobQueueItemsToReturn");
	form.appendf("  <tr><td><b>MaxJobQueueItemsToReturn: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetThorJobQueueRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetThorJobQueueRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_MaxJobQueueItemsToReturn.marshall(rpc_resp, "MaxJobQueueItemsToReturn", "", "", "");
}


void CWUGetThorJobQueueRequest::copy(CWUGetThorJobQueueRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_MaxJobQueueItemsToReturn.copy(from.m_MaxJobQueueItemsToReturn);
}


void CWUGetThorJobQueueRequest::copy(IConstWUGetThorJobQueueRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setMaxJobQueueItemsToReturn(ifrom.getMaxJobQueueItemsToReturn());
}


void CWUGetThorJobQueueRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetThorJobQueueRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_MaxJobQueueItemsToReturn.toStr(ctx, buffer, "MaxJobQueueItemsToReturn", "", true, "", "");
}


void CWUGetThorJobQueueRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetThorJobQueueRequest::serializer(IEspContext* ctx, IConstWUGetThorJobQueueRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetThorJobQueueRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field MaxJobQueueItemsToReturn
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=MaxJobQueueItemsToReturn
		buffer.append("<MaxJobQueueItemsToReturn>");
		buffer.append(src.getMaxJobQueueItemsToReturn());
		buffer.append("</MaxJobQueueItemsToReturn>");
	}
	if (keepRootTag)
		buffer.append("</WUGetThorJobQueueRequest>");
}

bool CWUGetThorJobQueueRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_MaxJobQueueItemsToReturn.unmarshall(rpc_request, "MaxJobQueueItemsToReturn", basepath);
	return hasValue;
}

bool CWUGetThorJobQueueRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_MaxJobQueueItemsToReturn.unmarshall(ctx, soapval, "MaxJobQueueItemsToReturn");
	return hasValue;
}

bool CWUGetThorJobQueueRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_MaxJobQueueItemsToReturn.unmarshall(ctx, params, attachments, "MaxJobQueueItemsToReturn", basepath);
	return hasValue;
}

const char * CWUGetThorJobQueueRequest::getCluster() { return m_Cluster.query();}
const char * CWUGetThorJobQueueRequest::getStartDate() { return m_StartDate.query();}
const char * CWUGetThorJobQueueRequest::getEndDate() { return m_EndDate.query();}
bool CWUGetThorJobQueueRequest::getMaxJobQueueItemsToReturn_isNull(){return m_MaxJobQueueItemsToReturn.is_nil();}
unsigned int CWUGetThorJobQueueRequest::getMaxJobQueueItemsToReturn() { return m_MaxJobQueueItemsToReturn;}
void CWUGetThorJobQueueRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUGetThorJobQueueRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUGetThorJobQueueRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUGetThorJobQueueRequest::setMaxJobQueueItemsToReturn_null(){ m_MaxJobQueueItemsToReturn.Nil(); }void CWUGetThorJobQueueRequest::setMaxJobQueueItemsToReturn(unsigned int val){ m_MaxJobQueueItemsToReturn=val; }
extern "C"  IEspWUGetThorJobQueueRequest *createWUGetThorJobQueueRequest(const char *serv){return ((IEspWUGetThorJobQueueRequest *)new CWUGetThorJobQueueRequest(serv));}
extern "C"  IClientWUGetThorJobQueueRequest *createClientWUGetThorJobQueueRequest(const char *serv){return ((IClientWUGetThorJobQueueRequest *)new CWUGetThorJobQueueRequest(serv));}

//=======================================================
// class CWUGetThorJobQueueResponse Implementation
//=======================================================

CWUGetThorJobQueueResponse::CWUGetThorJobQueueResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_LongestQueue(nilIgnore),m_MaxThorConnected(nilIgnore),m_QueueList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetThorJobQueueResponse::CWUGetThorJobQueueResponse(const char *serviceName, const char *bc)
	: m_LongestQueue(nilIgnore),m_MaxThorConnected(nilIgnore),m_QueueList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueResponse");
}

CWUGetThorJobQueueResponse::CWUGetThorJobQueueResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_LongestQueue(nilIgnore),m_MaxThorConnected(nilIgnore),m_QueueList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetThorJobQueueResponse::CWUGetThorJobQueueResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_LongestQueue(nilIgnore),m_MaxThorConnected(nilIgnore),m_QueueList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobQueueResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetThorJobQueueResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LongestQueue\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxThorConnected\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueueList\" type=\"tns:ArrayOfThorQueue\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Warning\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CThorQueue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ThorQueue") && added.getValue("ArrayOfThorQueue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfThorQueue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ThorQueue\" type=\"tns:ThorQueue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfThorQueue",1);
	}
	return schema;
}

void CWUGetThorJobQueueResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetThorJobQueueResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ThorQueue"))
	{
		added.setValue("ThorQueue",1);
		CThorQueue::getMapInfo(info,added);
	}
}

StringBuffer &CWUGetThorJobQueueResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("LongestQueue");
	form.appendf("  <tr><td><b>LongestQueue: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxThorConnected");
	form.appendf("  <tr><td><b>MaxThorConnected: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueueList");
	form.appendf("<tr><td><b>QueueList: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Warning");
	form.appendf("  <tr><td><b>Warning: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetThorJobQueueResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetThorJobQueueResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_LongestQueue.marshall(rpc_resp, "LongestQueue", "", "", "");
		m_MaxThorConnected.marshall(rpc_resp, "MaxThorConnected", "", "", "");
		m_QueueList.marshall(rpc_resp, "QueueList", "ThorQueue");
		m_Warning.marshall(rpc_resp, "Warning", "", "", "");
	}
}


void CWUGetThorJobQueueResponse::copy(CWUGetThorJobQueueResponse &from)
{
	m_LongestQueue.copy(from.m_LongestQueue);
	m_MaxThorConnected.copy(from.m_MaxThorConnected);
	m_QueueList.copy(from.m_QueueList);
	m_Warning.copy(from.m_Warning);
}


void CWUGetThorJobQueueResponse::copy(IConstWUGetThorJobQueueResponse &ifrom)
{
	setLongestQueue(ifrom.getLongestQueue());
	setMaxThorConnected(ifrom.getMaxThorConnected());
	setQueueList(ifrom.getQueueList());
	setWarning(ifrom.getWarning());
}


void CWUGetThorJobQueueResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetThorJobQueueResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_LongestQueue.toStr(ctx, buffer, "LongestQueue", "", true, "", "");
		m_MaxThorConnected.toStr(ctx, buffer, "MaxThorConnected", "", true, "", "");
		m_QueueList.toStr(ctx, buffer, "QueueList", "ThorQueue");
		m_Warning.toStr(ctx, buffer, "Warning", "", true, "", "");
	}
}


void CWUGetThorJobQueueResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetThorJobQueueResponse::serializer(IEspContext* ctx, IConstWUGetThorJobQueueResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetThorJobQueueResponse>");
	// field LongestQueue
	{
		int n = src.getLongestQueue();
		if (n)
			buffer.appendf("<LongestQueue>%d</LongestQueue>", n);
	}
	// field MaxThorConnected
	{
		int n = src.getMaxThorConnected();
		if (n)
			buffer.appendf("<MaxThorConnected>%d</MaxThorConnected>", n);
	}
	// field QueueList
	{
		IArrayOf<IConstThorQueue>& v = src.getQueueList();
		int size = v.length();
		if (size>0)
			buffer.append("<QueueList>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CThorQueue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</QueueList>");
	}
	// field Warning
	{
		const char* s = src.getWarning();
		if (s && *s)
		{
			buffer.append("<Warning>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Warning>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetThorJobQueueResponse>");
}

bool CWUGetThorJobQueueResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_LongestQueue.unmarshall(rpc_request, "LongestQueue", basepath);
		hasValue |= m_MaxThorConnected.unmarshall(rpc_request, "MaxThorConnected", basepath);
		hasValue |= m_QueueList.unmarshall(rpc_request, "QueueList", basepath);
		hasValue |= m_Warning.unmarshall(rpc_request, "Warning", basepath);
	}
	return hasValue;
}

bool CWUGetThorJobQueueResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_LongestQueue.unmarshall(ctx, soapval, "LongestQueue");
	hasValue |= m_MaxThorConnected.unmarshall(ctx, soapval, "MaxThorConnected");
	hasValue |= m_QueueList.unmarshall(ctx, soapval, "QueueList");
	hasValue |= m_Warning.unmarshall(ctx, soapval, "Warning");
	return hasValue;
}

bool CWUGetThorJobQueueResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_LongestQueue.unmarshall(ctx, params, attachments, "LongestQueue", basepath);
	hasValue |= m_MaxThorConnected.unmarshall(ctx, params, attachments, "MaxThorConnected", basepath);
	hasValue |= m_QueueList.unmarshall(ctx, params, attachments, "QueueList", basepath);
	hasValue |= m_Warning.unmarshall(ctx, params, attachments, "Warning", basepath);
	return hasValue;
}

int CWUGetThorJobQueueResponse::getLongestQueue() { return m_LongestQueue;}
int CWUGetThorJobQueueResponse::getMaxThorConnected() { return m_MaxThorConnected;}
IArrayOf<IConstThorQueue> & CWUGetThorJobQueueResponse::getQueueList() { return (IArrayOf<IConstThorQueue> &) m_QueueList; }
const char * CWUGetThorJobQueueResponse::getWarning() { return m_Warning.query();}
void CWUGetThorJobQueueResponse::setLongestQueue(int val){ m_LongestQueue=val; }
void CWUGetThorJobQueueResponse::setMaxThorConnected(int val){ m_MaxThorConnected=val; }
void CWUGetThorJobQueueResponse::setQueueList(IArrayOf<IEspThorQueue> &val)
{
	m_QueueList->kill();
	IArrayOf<IConstThorQueue> &target = m_QueueList.getValue();
	ForEachItemIn(idx, val)
	{
		IEspThorQueue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetThorJobQueueResponse::setQueueList(IArrayOf<IConstThorQueue> &val)
{
	m_QueueList->kill();
	IArrayOf<IConstThorQueue> &target = m_QueueList.getValue();
	ForEachItemIn(idx, val)
	{
		IConstThorQueue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetThorJobQueueResponse::setWarning(const char * val){ m_Warning.set(val); }
extern "C"  IEspWUGetThorJobQueueResponse *createWUGetThorJobQueueResponse(const char *serv){return ((IEspWUGetThorJobQueueResponse *)new CWUGetThorJobQueueResponse(serv));}
extern "C"  IClientWUGetThorJobQueueResponse *createClientWUGetThorJobQueueResponse(const char *serv){return ((IClientWUGetThorJobQueueResponse *)new CWUGetThorJobQueueResponse(serv));}

//=======================================================
// class CWUGetThorJobListRequest Implementation
//=======================================================

CWUGetThorJobListRequest::CWUGetThorJobListRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetThorJobListRequest::CWUGetThorJobListRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListRequest");
}

CWUGetThorJobListRequest::CWUGetThorJobListRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetThorJobListRequest::CWUGetThorJobListRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilRemove),m_StartDate(nilRemove),m_EndDate(nilRemove),m_MaxJobsToReturn(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetThorJobListRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxJobsToReturn\" type=\"xsd:unsignedInt\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetThorJobListRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetThorJobListRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUGetThorJobListRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxJobsToReturn");
	form.appendf("  <tr><td><b>MaxJobsToReturn: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetThorJobListRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetThorJobListRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_MaxJobsToReturn.marshall(rpc_resp, "MaxJobsToReturn", "", "", "");
}


void CWUGetThorJobListRequest::copy(CWUGetThorJobListRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_MaxJobsToReturn.copy(from.m_MaxJobsToReturn);
}


void CWUGetThorJobListRequest::copy(IConstWUGetThorJobListRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setMaxJobsToReturn(ifrom.getMaxJobsToReturn());
}


void CWUGetThorJobListRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetThorJobListRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_MaxJobsToReturn.toStr(ctx, buffer, "MaxJobsToReturn", "", true, "", "");
}


void CWUGetThorJobListRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetThorJobListRequest::serializer(IEspContext* ctx, IConstWUGetThorJobListRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetThorJobListRequest>");
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field MaxJobsToReturn
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=MaxJobsToReturn
		buffer.append("<MaxJobsToReturn>");
		buffer.append(src.getMaxJobsToReturn());
		buffer.append("</MaxJobsToReturn>");
	}
	if (keepRootTag)
		buffer.append("</WUGetThorJobListRequest>");
}

bool CWUGetThorJobListRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_MaxJobsToReturn.unmarshall(rpc_request, "MaxJobsToReturn", basepath);
	return hasValue;
}

bool CWUGetThorJobListRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_MaxJobsToReturn.unmarshall(ctx, soapval, "MaxJobsToReturn");
	return hasValue;
}

bool CWUGetThorJobListRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_MaxJobsToReturn.unmarshall(ctx, params, attachments, "MaxJobsToReturn", basepath);
	return hasValue;
}

const char * CWUGetThorJobListRequest::getCluster() { return m_Cluster.query();}
const char * CWUGetThorJobListRequest::getStartDate() { return m_StartDate.query();}
const char * CWUGetThorJobListRequest::getEndDate() { return m_EndDate.query();}
bool CWUGetThorJobListRequest::getMaxJobsToReturn_isNull(){return m_MaxJobsToReturn.is_nil();}
unsigned int CWUGetThorJobListRequest::getMaxJobsToReturn() { return m_MaxJobsToReturn;}
void CWUGetThorJobListRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUGetThorJobListRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUGetThorJobListRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUGetThorJobListRequest::setMaxJobsToReturn_null(){ m_MaxJobsToReturn.Nil(); }void CWUGetThorJobListRequest::setMaxJobsToReturn(unsigned int val){ m_MaxJobsToReturn=val; }
extern "C"  IEspWUGetThorJobListRequest *createWUGetThorJobListRequest(const char *serv){return ((IEspWUGetThorJobListRequest *)new CWUGetThorJobListRequest(serv));}
extern "C"  IClientWUGetThorJobListRequest *createClientWUGetThorJobListRequest(const char *serv){return ((IClientWUGetThorJobListRequest *)new CWUGetThorJobListRequest(serv));}

//=======================================================
// class CWUGetThorJobListResponse Implementation
//=======================================================

CWUGetThorJobListResponse::CWUGetThorJobListResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_JobList(nilIgnore),m_InProgressJobList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetThorJobListResponse::CWUGetThorJobListResponse(const char *serviceName, const char *bc)
	: m_JobList(nilIgnore),m_InProgressJobList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListResponse");
}

CWUGetThorJobListResponse::CWUGetThorJobListResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_JobList(nilIgnore),m_InProgressJobList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetThorJobListResponse::CWUGetThorJobListResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_JobList(nilIgnore),m_InProgressJobList(nilIgnore),m_Warning(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetThorJobListResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetThorJobListResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"JobList\" type=\"tns:ArrayOfECLJob\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"InProgressJobList\" type=\"tns:ArrayOfECLJob\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Warning\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLJob::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLJob") && added.getValue("ArrayOfECLJob")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLJob\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLJob\" type=\"tns:ECLJob\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLJob",1);
	}
	return schema;
}

void CWUGetThorJobListResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetThorJobListResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLJob"))
	{
		added.setValue("ECLJob",1);
		CECLJob::getMapInfo(info,added);
	}
}

StringBuffer &CWUGetThorJobListResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobList");
	form.appendf("<tr><td><b>JobList: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("InProgressJobList");
	form.appendf("<tr><td><b>InProgressJobList: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Warning");
	form.appendf("  <tr><td><b>Warning: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetThorJobListResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetThorJobListResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_JobList.marshall(rpc_resp, "JobList", "ECLJob");
		m_InProgressJobList.marshall(rpc_resp, "InProgressJobList", "ECLJob");
		m_Warning.marshall(rpc_resp, "Warning", "", "", "");
	}
}


void CWUGetThorJobListResponse::copy(CWUGetThorJobListResponse &from)
{
	m_JobList.copy(from.m_JobList);
	m_InProgressJobList.copy(from.m_InProgressJobList);
	m_Warning.copy(from.m_Warning);
}


void CWUGetThorJobListResponse::copy(IConstWUGetThorJobListResponse &ifrom)
{
	setJobList(ifrom.getJobList());
	setInProgressJobList(ifrom.getInProgressJobList());
	setWarning(ifrom.getWarning());
}


void CWUGetThorJobListResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetThorJobListResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_JobList.toStr(ctx, buffer, "JobList", "ECLJob");
		m_InProgressJobList.toStr(ctx, buffer, "InProgressJobList", "ECLJob");
		m_Warning.toStr(ctx, buffer, "Warning", "", true, "", "");
	}
}


void CWUGetThorJobListResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetThorJobListResponse::serializer(IEspContext* ctx, IConstWUGetThorJobListResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetThorJobListResponse>");
	// field JobList
	{
		IArrayOf<IConstECLJob>& v = src.getJobList();
		int size = v.length();
		if (size>0)
			buffer.append("<JobList>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLJob::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</JobList>");
	}
	// field InProgressJobList
	{
		IArrayOf<IConstECLJob>& v = src.getInProgressJobList();
		int size = v.length();
		if (size>0)
			buffer.append("<InProgressJobList>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLJob::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</InProgressJobList>");
	}
	// field Warning
	{
		const char* s = src.getWarning();
		if (s && *s)
		{
			buffer.append("<Warning>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Warning>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetThorJobListResponse>");
}

bool CWUGetThorJobListResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_JobList.unmarshall(rpc_request, "JobList", basepath);
		hasValue |= m_InProgressJobList.unmarshall(rpc_request, "InProgressJobList", basepath);
		hasValue |= m_Warning.unmarshall(rpc_request, "Warning", basepath);
	}
	return hasValue;
}

bool CWUGetThorJobListResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_JobList.unmarshall(ctx, soapval, "JobList");
	hasValue |= m_InProgressJobList.unmarshall(ctx, soapval, "InProgressJobList");
	hasValue |= m_Warning.unmarshall(ctx, soapval, "Warning");
	return hasValue;
}

bool CWUGetThorJobListResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_JobList.unmarshall(ctx, params, attachments, "JobList", basepath);
	hasValue |= m_InProgressJobList.unmarshall(ctx, params, attachments, "InProgressJobList", basepath);
	hasValue |= m_Warning.unmarshall(ctx, params, attachments, "Warning", basepath);
	return hasValue;
}

IArrayOf<IConstECLJob> & CWUGetThorJobListResponse::getJobList() { return (IArrayOf<IConstECLJob> &) m_JobList; }
IArrayOf<IConstECLJob> & CWUGetThorJobListResponse::getInProgressJobList() { return (IArrayOf<IConstECLJob> &) m_InProgressJobList; }
const char * CWUGetThorJobListResponse::getWarning() { return m_Warning.query();}
void CWUGetThorJobListResponse::setJobList(IArrayOf<IEspECLJob> &val)
{
	m_JobList->kill();
	IArrayOf<IConstECLJob> &target = m_JobList.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLJob &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetThorJobListResponse::setJobList(IArrayOf<IConstECLJob> &val)
{
	m_JobList->kill();
	IArrayOf<IConstECLJob> &target = m_JobList.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLJob &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetThorJobListResponse::setInProgressJobList(IArrayOf<IEspECLJob> &val)
{
	m_InProgressJobList->kill();
	IArrayOf<IConstECLJob> &target = m_InProgressJobList.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLJob &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetThorJobListResponse::setInProgressJobList(IArrayOf<IConstECLJob> &val)
{
	m_InProgressJobList->kill();
	IArrayOf<IConstECLJob> &target = m_InProgressJobList.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLJob &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetThorJobListResponse::setWarning(const char * val){ m_Warning.set(val); }
extern "C"  IEspWUGetThorJobListResponse *createWUGetThorJobListResponse(const char *serv){return ((IEspWUGetThorJobListResponse *)new CWUGetThorJobListResponse(serv));}
extern "C"  IClientWUGetThorJobListResponse *createClientWUGetThorJobListResponse(const char *serv){return ((IClientWUGetThorJobListResponse *)new CWUGetThorJobListResponse(serv));}

//=======================================================
// class CGVCAjaxGraphRequest Implementation
//=======================================================

CGVCAjaxGraphRequest::CGVCAjaxGraphRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CGVCAjaxGraphRequest::CGVCAjaxGraphRequest(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphRequest");
}

CGVCAjaxGraphRequest::CGVCAjaxGraphRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CGVCAjaxGraphRequest::CGVCAjaxGraphRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CGVCAjaxGraphRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"GraphName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("GVCAjaxGraphRequest","SubGraphId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphId\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("GVCAjaxGraphRequest","SubGraphOnly")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphOnly\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CGVCAjaxGraphRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CGVCAjaxGraphRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("GVCAjaxGraphRequest","SubGraphId",1.2);
	info.addMinVersion("GVCAjaxGraphRequest","SubGraphOnly",1.21);
}

StringBuffer &CGVCAjaxGraphRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("GraphName");
	form.appendf("  <tr><td><b>GraphName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("GVCAjaxGraphRequest","SubGraphId")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("SubGraphId");
		form.appendf("  <tr><td><b>SubGraphId: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("GVCAjaxGraphRequest","SubGraphOnly")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SubGraphOnly");
		
	form.appendf("  <tr><td><b>SubGraphOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CGVCAjaxGraphRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CGVCAjaxGraphRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_GraphName.marshall(rpc_resp, "GraphName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_SubGraphId.marshall(rpc_resp, "SubGraphId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_SubGraphOnly.marshall(rpc_resp, "SubGraphOnly", "", "", "");
}


void CGVCAjaxGraphRequest::copy(CGVCAjaxGraphRequest &from)
{
	m_Name.copy(from.m_Name);
	m_GraphName.copy(from.m_GraphName);
	m_SubGraphId.copy(from.m_SubGraphId);
	m_SubGraphOnly.copy(from.m_SubGraphOnly);
}


void CGVCAjaxGraphRequest::copy(IConstGVCAjaxGraphRequest &ifrom)
{
	setName(ifrom.getName());
	setGraphName(ifrom.getGraphName());
	setSubGraphId(ifrom.getSubGraphId());
	setSubGraphOnly(ifrom.getSubGraphOnly());
}


void CGVCAjaxGraphRequest::getAttributes(IProperties &attributes)
{
}


void CGVCAjaxGraphRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_GraphName.toStr(ctx, buffer, "GraphName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.2))
		m_SubGraphId.toStr(ctx, buffer, "SubGraphId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.21))
		m_SubGraphOnly.toStr(ctx, buffer, "SubGraphOnly", "", true, "", "");
}


void CGVCAjaxGraphRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CGVCAjaxGraphRequest::serializer(IEspContext* ctx, IConstGVCAjaxGraphRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<GVCAjaxGraphRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field GraphName
	{
		const char* s = src.getGraphName();
		if (s && *s)
		{
			buffer.append("<GraphName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphName>");
		}
	}
	// field SubGraphId
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		int n = src.getSubGraphId();
		if (n)
			buffer.appendf("<SubGraphId>%d</SubGraphId>", n);
	}
	// field SubGraphOnly
	if ((clientVer==-1.0 || clientVer>=1.21))
	{
		bool b = src.getSubGraphOnly();
		if (b)
			buffer.appendf("<SubGraphOnly>1</SubGraphOnly>");
	}
	if (keepRootTag)
		buffer.append("</GVCAjaxGraphRequest>");
}

bool CGVCAjaxGraphRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_GraphName.unmarshall(rpc_request, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(rpc_request, "SubGraphId", basepath);
	hasValue |= m_SubGraphOnly.unmarshall(rpc_request, "SubGraphOnly", basepath);
	return hasValue;
}

bool CGVCAjaxGraphRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_GraphName.unmarshall(ctx, soapval, "GraphName");
	hasValue |= m_SubGraphId.unmarshall(ctx, soapval, "SubGraphId");
	hasValue |= m_SubGraphOnly.unmarshall(ctx, soapval, "SubGraphOnly");
	return hasValue;
}

bool CGVCAjaxGraphRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_GraphName.unmarshall(ctx, params, attachments, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(ctx, params, attachments, "SubGraphId", basepath);
	hasValue |= m_SubGraphOnly.unmarshall(ctx, params, attachments, "SubGraphOnly", basepath);
	return hasValue;
}

const char * CGVCAjaxGraphRequest::getName() { return m_Name.query();}
const char * CGVCAjaxGraphRequest::getGraphName() { return m_GraphName.query();}
int CGVCAjaxGraphRequest::getSubGraphId() { return m_SubGraphId;}
bool CGVCAjaxGraphRequest::getSubGraphOnly() { return m_SubGraphOnly;}
void CGVCAjaxGraphRequest::setName(const char * val){ m_Name.set(val); }
void CGVCAjaxGraphRequest::setGraphName(const char * val){ m_GraphName.set(val); }
void CGVCAjaxGraphRequest::setSubGraphId(int val){ m_SubGraphId=val; }
void CGVCAjaxGraphRequest::setSubGraphOnly(bool val){ m_SubGraphOnly=val; }
extern "C"  IEspGVCAjaxGraphRequest *createGVCAjaxGraphRequest(const char *serv){return ((IEspGVCAjaxGraphRequest *)new CGVCAjaxGraphRequest(serv));}
extern "C"  IClientGVCAjaxGraphRequest *createClientGVCAjaxGraphRequest(const char *serv){return ((IClientGVCAjaxGraphRequest *)new CGVCAjaxGraphRequest(serv));}

//=======================================================
// class CGVCAjaxGraphResponse Implementation
//=======================================================

CGVCAjaxGraphResponse::CGVCAjaxGraphResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_GraphType(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CGVCAjaxGraphResponse::CGVCAjaxGraphResponse(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_GraphType(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphResponse");
}

CGVCAjaxGraphResponse::CGVCAjaxGraphResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_GraphType(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CGVCAjaxGraphResponse::CGVCAjaxGraphResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Name(nilIgnore),m_GraphName(nilIgnore),m_GraphType(nilIgnore),m_SubGraphId(nilIgnore),m_SubGraphOnly(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("GVCAjaxGraphResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CGVCAjaxGraphResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"GraphName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"GraphType\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("GVCAjaxGraphResponse","SubGraphId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphId\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("GVCAjaxGraphResponse","SubGraphOnly")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphOnly\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CGVCAjaxGraphResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CGVCAjaxGraphResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("GVCAjaxGraphResponse","SubGraphId",1.2);
	info.addMinVersion("GVCAjaxGraphResponse","SubGraphOnly",1.21);
}

StringBuffer &CGVCAjaxGraphResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("GraphName");
	form.appendf("  <tr><td><b>GraphName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("GraphType");
	form.appendf("  <tr><td><b>GraphType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("GVCAjaxGraphResponse","SubGraphId")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("SubGraphId");
		form.appendf("  <tr><td><b>SubGraphId: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("GVCAjaxGraphResponse","SubGraphOnly")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SubGraphOnly");
		
	form.appendf("  <tr><td><b>SubGraphOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CGVCAjaxGraphResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CGVCAjaxGraphResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		m_GraphName.marshall(rpc_resp, "GraphName", "", "", "");
		m_GraphType.marshall(rpc_resp, "GraphType", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_SubGraphId.marshall(rpc_resp, "SubGraphId", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.21))
			m_SubGraphOnly.marshall(rpc_resp, "SubGraphOnly", "", "", "");
	}
}


void CGVCAjaxGraphResponse::copy(CGVCAjaxGraphResponse &from)
{
	m_Name.copy(from.m_Name);
	m_GraphName.copy(from.m_GraphName);
	m_GraphType.copy(from.m_GraphType);
	m_SubGraphId.copy(from.m_SubGraphId);
	m_SubGraphOnly.copy(from.m_SubGraphOnly);
}


void CGVCAjaxGraphResponse::copy(IConstGVCAjaxGraphResponse &ifrom)
{
	setName(ifrom.getName());
	setGraphName(ifrom.getGraphName());
	setGraphType(ifrom.getGraphType());
	setSubGraphId(ifrom.getSubGraphId());
	setSubGraphOnly(ifrom.getSubGraphOnly());
}


void CGVCAjaxGraphResponse::getAttributes(IProperties &attributes)
{
}


void CGVCAjaxGraphResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
		m_GraphName.toStr(ctx, buffer, "GraphName", "", true, "", "");
		m_GraphType.toStr(ctx, buffer, "GraphType", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.2))
			m_SubGraphId.toStr(ctx, buffer, "SubGraphId", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.21))
			m_SubGraphOnly.toStr(ctx, buffer, "SubGraphOnly", "", true, "", "");
	}
}


void CGVCAjaxGraphResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CGVCAjaxGraphResponse::serializer(IEspContext* ctx, IConstGVCAjaxGraphResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<GVCAjaxGraphResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field GraphName
	{
		const char* s = src.getGraphName();
		if (s && *s)
		{
			buffer.append("<GraphName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphName>");
		}
	}
	// field GraphType
	{
		const char* s = src.getGraphType();
		if (s && *s)
		{
			buffer.append("<GraphType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphType>");
		}
	}
	// field SubGraphId
	if ((clientVer==-1.0 || clientVer>=1.2))
	{
		int n = src.getSubGraphId();
		if (n)
			buffer.appendf("<SubGraphId>%d</SubGraphId>", n);
	}
	// field SubGraphOnly
	if ((clientVer==-1.0 || clientVer>=1.21))
	{
		bool b = src.getSubGraphOnly();
		if (b)
			buffer.appendf("<SubGraphOnly>1</SubGraphOnly>");
	}
	if (keepRootTag)
		buffer.append("</GVCAjaxGraphResponse>");
}

bool CGVCAjaxGraphResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_GraphName.unmarshall(rpc_request, "GraphName", basepath);
		hasValue |= m_GraphType.unmarshall(rpc_request, "GraphType", basepath);
		hasValue |= m_SubGraphId.unmarshall(rpc_request, "SubGraphId", basepath);
		hasValue |= m_SubGraphOnly.unmarshall(rpc_request, "SubGraphOnly", basepath);
	}
	return hasValue;
}

bool CGVCAjaxGraphResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_GraphName.unmarshall(ctx, soapval, "GraphName");
	hasValue |= m_GraphType.unmarshall(ctx, soapval, "GraphType");
	hasValue |= m_SubGraphId.unmarshall(ctx, soapval, "SubGraphId");
	hasValue |= m_SubGraphOnly.unmarshall(ctx, soapval, "SubGraphOnly");
	return hasValue;
}

bool CGVCAjaxGraphResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_GraphName.unmarshall(ctx, params, attachments, "GraphName", basepath);
	hasValue |= m_GraphType.unmarshall(ctx, params, attachments, "GraphType", basepath);
	hasValue |= m_SubGraphId.unmarshall(ctx, params, attachments, "SubGraphId", basepath);
	hasValue |= m_SubGraphOnly.unmarshall(ctx, params, attachments, "SubGraphOnly", basepath);
	return hasValue;
}

const char * CGVCAjaxGraphResponse::getName() { return m_Name.query();}
const char * CGVCAjaxGraphResponse::getGraphName() { return m_GraphName.query();}
const char * CGVCAjaxGraphResponse::getGraphType() { return m_GraphType.query();}
int CGVCAjaxGraphResponse::getSubGraphId() { return m_SubGraphId;}
bool CGVCAjaxGraphResponse::getSubGraphOnly() { return m_SubGraphOnly;}
void CGVCAjaxGraphResponse::setName(const char * val){ m_Name.set(val); }
void CGVCAjaxGraphResponse::setGraphName(const char * val){ m_GraphName.set(val); }
void CGVCAjaxGraphResponse::setGraphType(const char * val){ m_GraphType.set(val); }
void CGVCAjaxGraphResponse::setSubGraphId(int val){ m_SubGraphId=val; }
void CGVCAjaxGraphResponse::setSubGraphOnly(bool val){ m_SubGraphOnly=val; }
extern "C"  IEspGVCAjaxGraphResponse *createGVCAjaxGraphResponse(const char *serv){return ((IEspGVCAjaxGraphResponse *)new CGVCAjaxGraphResponse(serv));}
extern "C"  IClientGVCAjaxGraphResponse *createClientGVCAjaxGraphResponse(const char *serv){return ((IClientGVCAjaxGraphResponse *)new CGVCAjaxGraphResponse(serv));}

//=======================================================
// class CWUGraphInfoRequest Implementation
//=======================================================

CWUGraphInfoRequest::CWUGraphInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGraphInfoRequest::CWUGraphInfoRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoRequest");
}

CWUGraphInfoRequest::CWUGraphInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGraphInfoRequest::CWUGraphInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGraphInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGraphInfoRequest","GID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GID\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUGraphInfoRequest","BatchWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BatchWU\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGraphInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGraphInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGraphInfoRequest","GID",1.02);
	info.addMinVersion("WUGraphInfoRequest","BatchWU",1.15);
}

StringBuffer &CWUGraphInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGraphInfoRequest","GID")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GID");
		form.appendf("  <tr><td><b>GID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGraphInfoRequest","BatchWU")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BatchWU");
		form.appendf("  <tr><td><b>BatchWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGraphInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGraphInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_GID.marshall(rpc_resp, "GID", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.15))
		m_BatchWU.marshall(rpc_resp, "BatchWU", "", "", "");
}


void CWUGraphInfoRequest::copy(CWUGraphInfoRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Name.copy(from.m_Name);
	m_GID.copy(from.m_GID);
	m_BatchWU.copy(from.m_BatchWU);
}


void CWUGraphInfoRequest::copy(IConstWUGraphInfoRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setName(ifrom.getName());
	setGID(ifrom.getGID());
	setBatchWU(ifrom.getBatchWU());
}


void CWUGraphInfoRequest::getAttributes(IProperties &attributes)
{
}


void CWUGraphInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.02))
		m_GID.toStr(ctx, buffer, "GID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.15))
		m_BatchWU.toStr(ctx, buffer, "BatchWU", "", true, "", "");
}


void CWUGraphInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGraphInfoRequest::serializer(IEspContext* ctx, IConstWUGraphInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGraphInfoRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field GID
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		const char* s = src.getGID();
		if (s && *s)
		{
			buffer.append("<GID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GID>");
		}
	}
	// field BatchWU
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		int n = src.getBatchWU();
		if (n)
			buffer.appendf("<BatchWU>%d</BatchWU>", n);
	}
	if (keepRootTag)
		buffer.append("</WUGraphInfoRequest>");
}

bool CWUGraphInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_GID.unmarshall(rpc_request, "GID", basepath);
	hasValue |= m_BatchWU.unmarshall(rpc_request, "BatchWU", basepath);
	return hasValue;
}

bool CWUGraphInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_GID.unmarshall(ctx, soapval, "GID");
	hasValue |= m_BatchWU.unmarshall(ctx, soapval, "BatchWU");
	return hasValue;
}

bool CWUGraphInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_GID.unmarshall(ctx, params, attachments, "GID", basepath);
	hasValue |= m_BatchWU.unmarshall(ctx, params, attachments, "BatchWU", basepath);
	return hasValue;
}

const char * CWUGraphInfoRequest::getWuid() { return m_Wuid.query();}
const char * CWUGraphInfoRequest::getName() { return m_Name.query();}
const char * CWUGraphInfoRequest::getGID() { return m_GID.query();}
bool CWUGraphInfoRequest::getBatchWU_isNull(){return m_BatchWU.is_nil();}
int CWUGraphInfoRequest::getBatchWU() { return m_BatchWU;}
void CWUGraphInfoRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUGraphInfoRequest::setName(const char * val){ m_Name.set(val); }
void CWUGraphInfoRequest::setGID(const char * val){ m_GID.set(val); }
void CWUGraphInfoRequest::setBatchWU_null(){ m_BatchWU.Nil(); }void CWUGraphInfoRequest::setBatchWU(int val){ m_BatchWU=val; }
extern "C"  IEspWUGraphInfoRequest *createWUGraphInfoRequest(const char *serv){return ((IEspWUGraphInfoRequest *)new CWUGraphInfoRequest(serv));}
extern "C"  IClientWUGraphInfoRequest *createClientWUGraphInfoRequest(const char *serv){return ((IClientWUGraphInfoRequest *)new CWUGraphInfoRequest(serv));}

//=======================================================
// class CWUGraphInfoResponse Implementation
//=======================================================

CWUGraphInfoResponse::CWUGraphInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_BatchWU(nilIgnore),m_Running(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGraphInfoResponse::CWUGraphInfoResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_BatchWU(nilIgnore),m_Running(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoResponse");
}

CWUGraphInfoResponse::CWUGraphInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_BatchWU(nilIgnore),m_Running(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGraphInfoResponse::CWUGraphInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_BatchWU(nilIgnore),m_Running(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGraphInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGraphInfoResponse","GID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GID\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUGraphInfoResponse","BatchWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BatchWU\" type=\"xsd:int\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Running\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGraphInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGraphInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGraphInfoResponse","GID",1.02);
	info.addMinVersion("WUGraphInfoResponse","BatchWU",1.15);
}

StringBuffer &CWUGraphInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGraphInfoResponse","GID")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GID");
		form.appendf("  <tr><td><b>GID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGraphInfoResponse","BatchWU")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BatchWU");
		form.appendf("  <tr><td><b>BatchWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Running");
	
	form.appendf("  <tr><td><b>Running? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGraphInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGraphInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.02))
			m_GID.marshall(rpc_resp, "GID", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_BatchWU.marshall(rpc_resp, "BatchWU", "", "", "");
		m_Running.marshall(rpc_resp, "Running", "", "", "");
	}
}


void CWUGraphInfoResponse::copy(CWUGraphInfoResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Name.copy(from.m_Name);
	m_GID.copy(from.m_GID);
	m_BatchWU.copy(from.m_BatchWU);
	m_Running.copy(from.m_Running);
}


void CWUGraphInfoResponse::copy(IConstWUGraphInfoResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setName(ifrom.getName());
	setGID(ifrom.getGID());
	setBatchWU(ifrom.getBatchWU());
	setRunning(ifrom.getRunning());
}


void CWUGraphInfoResponse::getAttributes(IProperties &attributes)
{
}


void CWUGraphInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.02))
			m_GID.toStr(ctx, buffer, "GID", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_BatchWU.toStr(ctx, buffer, "BatchWU", "", true, "", "");
		m_Running.toStr(ctx, buffer, "Running", "", true, "", "");
	}
}


void CWUGraphInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGraphInfoResponse::serializer(IEspContext* ctx, IConstWUGraphInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGraphInfoResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field GID
	if ((clientVer==-1.0 || clientVer>=1.02))
	{
		const char* s = src.getGID();
		if (s && *s)
		{
			buffer.append("<GID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GID>");
		}
	}
	// field BatchWU
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		int n = src.getBatchWU();
		if (n)
			buffer.appendf("<BatchWU>%d</BatchWU>", n);
	}
	// field Running
	{
		bool b = src.getRunning();
		if (b)
			buffer.appendf("<Running>1</Running>");
	}
	if (keepRootTag)
		buffer.append("</WUGraphInfoResponse>");
}

bool CWUGraphInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_GID.unmarshall(rpc_request, "GID", basepath);
		hasValue |= m_BatchWU.unmarshall(rpc_request, "BatchWU", basepath);
		hasValue |= m_Running.unmarshall(rpc_request, "Running", basepath);
	}
	return hasValue;
}

bool CWUGraphInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_GID.unmarshall(ctx, soapval, "GID");
	hasValue |= m_BatchWU.unmarshall(ctx, soapval, "BatchWU");
	hasValue |= m_Running.unmarshall(ctx, soapval, "Running");
	return hasValue;
}

bool CWUGraphInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_GID.unmarshall(ctx, params, attachments, "GID", basepath);
	hasValue |= m_BatchWU.unmarshall(ctx, params, attachments, "BatchWU", basepath);
	hasValue |= m_Running.unmarshall(ctx, params, attachments, "Running", basepath);
	return hasValue;
}

const char * CWUGraphInfoResponse::getWuid() { return m_Wuid.query();}
const char * CWUGraphInfoResponse::getName() { return m_Name.query();}
const char * CWUGraphInfoResponse::getGID() { return m_GID.query();}
int CWUGraphInfoResponse::getBatchWU() { return m_BatchWU;}
bool CWUGraphInfoResponse::getRunning() { return m_Running;}
void CWUGraphInfoResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUGraphInfoResponse::setName(const char * val){ m_Name.set(val); }
void CWUGraphInfoResponse::setGID(const char * val){ m_GID.set(val); }
void CWUGraphInfoResponse::setBatchWU(int val){ m_BatchWU=val; }
void CWUGraphInfoResponse::setRunning(bool val){ m_Running=val; }
extern "C"  IEspWUGraphInfoResponse *createWUGraphInfoResponse(const char *serv){return ((IEspWUGraphInfoResponse *)new CWUGraphInfoResponse(serv));}
extern "C"  IClientWUGraphInfoResponse *createClientWUGraphInfoResponse(const char *serv){return ((IClientWUGraphInfoResponse *)new CWUGraphInfoResponse(serv));}

//=======================================================
// class CWUGVCGraphInfoRequest Implementation
//=======================================================

CWUGVCGraphInfoRequest::CWUGVCGraphInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove),m_SubgraphId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGVCGraphInfoRequest::CWUGVCGraphInfoRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove),m_SubgraphId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoRequest");
}

CWUGVCGraphInfoRequest::CWUGVCGraphInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove),m_SubgraphId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGVCGraphInfoRequest::CWUGVCGraphInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_GID(nilRemove),m_BatchWU(nilRemove),m_SubgraphId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGVCGraphInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"GID\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGVCGraphInfoRequest","BatchWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BatchWU\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("WUGVCGraphInfoRequest","SubgraphId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SubgraphId\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGVCGraphInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGVCGraphInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGVCGraphInfoRequest","BatchWU",1.15);
	info.addMinVersion("WUGVCGraphInfoRequest","SubgraphId",1.18);
}

StringBuffer &CWUGVCGraphInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("GID");
	form.appendf("  <tr><td><b>GID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGVCGraphInfoRequest","BatchWU")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BatchWU");
		form.appendf("  <tr><td><b>BatchWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGVCGraphInfoRequest","SubgraphId")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("SubgraphId");
		form.appendf("  <tr><td><b>SubgraphId: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGVCGraphInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGVCGraphInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_GID.marshall(rpc_resp, "GID", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.15))
		m_BatchWU.marshall(rpc_resp, "BatchWU", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.18))
		m_SubgraphId.marshall(rpc_resp, "SubgraphId", "", "", "");
}


void CWUGVCGraphInfoRequest::copy(CWUGVCGraphInfoRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Name.copy(from.m_Name);
	m_GID.copy(from.m_GID);
	m_BatchWU.copy(from.m_BatchWU);
	m_SubgraphId.copy(from.m_SubgraphId);
}


void CWUGVCGraphInfoRequest::copy(IConstWUGVCGraphInfoRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setName(ifrom.getName());
	setGID(ifrom.getGID());
	setBatchWU(ifrom.getBatchWU());
	setSubgraphId(ifrom.getSubgraphId());
}


void CWUGVCGraphInfoRequest::getAttributes(IProperties &attributes)
{
}


void CWUGVCGraphInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_GID.toStr(ctx, buffer, "GID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.15))
		m_BatchWU.toStr(ctx, buffer, "BatchWU", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.18))
		m_SubgraphId.toStr(ctx, buffer, "SubgraphId", "", true, "", "");
}


void CWUGVCGraphInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGVCGraphInfoRequest::serializer(IEspContext* ctx, IConstWUGVCGraphInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGVCGraphInfoRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field GID
	{
		const char* s = src.getGID();
		if (s && *s)
		{
			buffer.append("<GID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GID>");
		}
	}
	// field BatchWU
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		int n = src.getBatchWU();
		if (n)
			buffer.appendf("<BatchWU>%d</BatchWU>", n);
	}
	// field SubgraphId
	if ((clientVer==-1.0 || clientVer>=1.18))
	{
		int n = src.getSubgraphId();
		if (n)
			buffer.appendf("<SubgraphId>%d</SubgraphId>", n);
	}
	if (keepRootTag)
		buffer.append("</WUGVCGraphInfoRequest>");
}

bool CWUGVCGraphInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_GID.unmarshall(rpc_request, "GID", basepath);
	hasValue |= m_BatchWU.unmarshall(rpc_request, "BatchWU", basepath);
	hasValue |= m_SubgraphId.unmarshall(rpc_request, "SubgraphId", basepath);
	return hasValue;
}

bool CWUGVCGraphInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_GID.unmarshall(ctx, soapval, "GID");
	hasValue |= m_BatchWU.unmarshall(ctx, soapval, "BatchWU");
	hasValue |= m_SubgraphId.unmarshall(ctx, soapval, "SubgraphId");
	return hasValue;
}

bool CWUGVCGraphInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_GID.unmarshall(ctx, params, attachments, "GID", basepath);
	hasValue |= m_BatchWU.unmarshall(ctx, params, attachments, "BatchWU", basepath);
	hasValue |= m_SubgraphId.unmarshall(ctx, params, attachments, "SubgraphId", basepath);
	return hasValue;
}

const char * CWUGVCGraphInfoRequest::getWuid() { return m_Wuid.query();}
const char * CWUGVCGraphInfoRequest::getName() { return m_Name.query();}
const char * CWUGVCGraphInfoRequest::getGID() { return m_GID.query();}
bool CWUGVCGraphInfoRequest::getBatchWU_isNull(){return m_BatchWU.is_nil();}
int CWUGVCGraphInfoRequest::getBatchWU() { return m_BatchWU;}
bool CWUGVCGraphInfoRequest::getSubgraphId_isNull(){return m_SubgraphId.is_nil();}
int CWUGVCGraphInfoRequest::getSubgraphId() { return m_SubgraphId;}
void CWUGVCGraphInfoRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUGVCGraphInfoRequest::setName(const char * val){ m_Name.set(val); }
void CWUGVCGraphInfoRequest::setGID(const char * val){ m_GID.set(val); }
void CWUGVCGraphInfoRequest::setBatchWU_null(){ m_BatchWU.Nil(); }void CWUGVCGraphInfoRequest::setBatchWU(int val){ m_BatchWU=val; }
void CWUGVCGraphInfoRequest::setSubgraphId_null(){ m_SubgraphId.Nil(); }void CWUGVCGraphInfoRequest::setSubgraphId(int val){ m_SubgraphId=val; }
extern "C"  IEspWUGVCGraphInfoRequest *createWUGVCGraphInfoRequest(const char *serv){return ((IEspWUGVCGraphInfoRequest *)new CWUGVCGraphInfoRequest(serv));}
extern "C"  IClientWUGVCGraphInfoRequest *createClientWUGVCGraphInfoRequest(const char *serv){return ((IClientWUGVCGraphInfoRequest *)new CWUGVCGraphInfoRequest(serv));}

//=======================================================
// class CWUGVCGraphInfoResponse Implementation
//=======================================================

CWUGVCGraphInfoResponse::CWUGVCGraphInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_Running(nilIgnore),m_TheGraph(nilIgnore),m_BatchWU(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGVCGraphInfoResponse::CWUGVCGraphInfoResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_Running(nilIgnore),m_TheGraph(nilIgnore),m_BatchWU(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoResponse");
}

CWUGVCGraphInfoResponse::CWUGVCGraphInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_Running(nilIgnore),m_TheGraph(nilIgnore),m_BatchWU(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGVCGraphInfoResponse::CWUGVCGraphInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_GID(nilIgnore),m_Running(nilIgnore),m_TheGraph(nilIgnore),m_BatchWU(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGVCGraphInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGVCGraphInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"GID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Running\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TheGraph\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGVCGraphInfoResponse","BatchWU")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"BatchWU\" type=\"xsd:int\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGVCGraphInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGVCGraphInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGVCGraphInfoResponse","BatchWU",1.15);
}

StringBuffer &CWUGVCGraphInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("GID");
	form.appendf("  <tr><td><b>GID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Running");
	
	form.appendf("  <tr><td><b>Running? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TheGraph");
	form.appendf("  <tr><td><b>TheGraph: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGVCGraphInfoResponse","BatchWU")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("BatchWU");
		form.appendf("  <tr><td><b>BatchWU: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGVCGraphInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGVCGraphInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		m_GID.marshall(rpc_resp, "GID", "", "", "");
		m_Running.marshall(rpc_resp, "Running", "", "", "");
		m_TheGraph.marshall(rpc_resp, "TheGraph", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_BatchWU.marshall(rpc_resp, "BatchWU", "", "", "");
	}
}


void CWUGVCGraphInfoResponse::copy(CWUGVCGraphInfoResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Name.copy(from.m_Name);
	m_GID.copy(from.m_GID);
	m_Running.copy(from.m_Running);
	m_TheGraph.copy(from.m_TheGraph);
	m_BatchWU.copy(from.m_BatchWU);
}


void CWUGVCGraphInfoResponse::copy(IConstWUGVCGraphInfoResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setName(ifrom.getName());
	setGID(ifrom.getGID());
	setRunning(ifrom.getRunning());
	setTheGraph(ifrom.getTheGraph());
	setBatchWU(ifrom.getBatchWU());
}


void CWUGVCGraphInfoResponse::getAttributes(IProperties &attributes)
{
}


void CWUGVCGraphInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Wuid.toStr(ctx, buffer, "Wuid", "", false, "", "");
		m_Name.toStr(ctx, buffer, "Name", "", false, "", "");
		m_GID.toStr(ctx, buffer, "GID", "", false, "", "");
		m_Running.toStr(ctx, buffer, "Running", "", false, "", "");
		m_TheGraph.toStr(ctx, buffer, "TheGraph", "", false, "", "");
		if ((clientVer==-1.0 || clientVer>=1.15))
			m_BatchWU.toStr(ctx, buffer, "BatchWU", "", false, "", "");
	}
}


void CWUGVCGraphInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGVCGraphInfoResponse::serializer(IEspContext* ctx, IConstWUGVCGraphInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGVCGraphInfoResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field GID
	{
		const char* s = src.getGID();
		if (s && *s)
		{
			buffer.append("<GID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GID>");
		}
	}
	// field Running
	{
		bool b = src.getRunning();
		if (b)
			buffer.appendf("<Running>1</Running>");
	}
	// field TheGraph
	{
		const char* s = src.getTheGraph();
		if (s && *s)
		{
			buffer.append("<TheGraph>");
			encodeUtf8XML(s,buffer);
			buffer.append("</TheGraph>");
		}
	}
	// field BatchWU
	if ((clientVer==-1.0 || clientVer>=1.15))
	{
		int n = src.getBatchWU();
		if (n)
			buffer.appendf("<BatchWU>%d</BatchWU>", n);
	}
	if (keepRootTag)
		buffer.append("</WUGVCGraphInfoResponse>");
}

bool CWUGVCGraphInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_GID.unmarshall(rpc_request, "GID", basepath);
		hasValue |= m_Running.unmarshall(rpc_request, "Running", basepath);
		hasValue |= m_TheGraph.unmarshall(rpc_request, "TheGraph", basepath);
		hasValue |= m_BatchWU.unmarshall(rpc_request, "BatchWU", basepath);
	}
	return hasValue;
}

bool CWUGVCGraphInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_GID.unmarshall(ctx, soapval, "GID");
	hasValue |= m_Running.unmarshall(ctx, soapval, "Running");
	hasValue |= m_TheGraph.unmarshall(ctx, soapval, "TheGraph");
	hasValue |= m_BatchWU.unmarshall(ctx, soapval, "BatchWU");
	return hasValue;
}

bool CWUGVCGraphInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_GID.unmarshall(ctx, params, attachments, "GID", basepath);
	hasValue |= m_Running.unmarshall(ctx, params, attachments, "Running", basepath);
	hasValue |= m_TheGraph.unmarshall(ctx, params, attachments, "TheGraph", basepath);
	hasValue |= m_BatchWU.unmarshall(ctx, params, attachments, "BatchWU", basepath);
	return hasValue;
}

const char * CWUGVCGraphInfoResponse::getWuid() { return m_Wuid.query();}
const char * CWUGVCGraphInfoResponse::getName() { return m_Name.query();}
const char * CWUGVCGraphInfoResponse::getGID() { return m_GID.query();}
bool CWUGVCGraphInfoResponse::getRunning() { return m_Running;}
const char * CWUGVCGraphInfoResponse::getTheGraph() { return m_TheGraph.query();}
int CWUGVCGraphInfoResponse::getBatchWU() { return m_BatchWU;}
void CWUGVCGraphInfoResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUGVCGraphInfoResponse::setName(const char * val){ m_Name.set(val); }
void CWUGVCGraphInfoResponse::setGID(const char * val){ m_GID.set(val); }
void CWUGVCGraphInfoResponse::setRunning(bool val){ m_Running=val; }
void CWUGVCGraphInfoResponse::setTheGraph(const char * val){ m_TheGraph.set(val); }
void CWUGVCGraphInfoResponse::setBatchWU(int val){ m_BatchWU=val; }
extern "C"  IEspWUGVCGraphInfoResponse *createWUGVCGraphInfoResponse(const char *serv){return ((IEspWUGVCGraphInfoResponse *)new CWUGVCGraphInfoResponse(serv));}
extern "C"  IClientWUGVCGraphInfoResponse *createClientWUGVCGraphInfoResponse(const char *serv){return ((IClientWUGVCGraphInfoResponse *)new CWUGVCGraphInfoResponse(serv));}

//=======================================================
// class CWUGraphTimingRequest Implementation
//=======================================================

CWUGraphTimingRequest::CWUGraphTimingRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGraphTimingRequest::CWUGraphTimingRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingRequest");
}

CWUGraphTimingRequest::CWUGraphTimingRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGraphTimingRequest::CWUGraphTimingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGraphTimingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGraphTimingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGraphTimingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUGraphTimingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGraphTimingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGraphTimingRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
}


void CWUGraphTimingRequest::copy(CWUGraphTimingRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
}


void CWUGraphTimingRequest::copy(IConstWUGraphTimingRequest &ifrom)
{
	setWuid(ifrom.getWuid());
}


void CWUGraphTimingRequest::getAttributes(IProperties &attributes)
{
}


void CWUGraphTimingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
}


void CWUGraphTimingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGraphTimingRequest::serializer(IEspContext* ctx, IConstWUGraphTimingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGraphTimingRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGraphTimingRequest>");
}

bool CWUGraphTimingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	return hasValue;
}

bool CWUGraphTimingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	return hasValue;
}

bool CWUGraphTimingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	return hasValue;
}

const char * CWUGraphTimingRequest::getWuid() { return m_Wuid.query();}
void CWUGraphTimingRequest::setWuid(const char * val){ m_Wuid.set(val); }
extern "C"  IEspWUGraphTimingRequest *createWUGraphTimingRequest(const char *serv){return ((IEspWUGraphTimingRequest *)new CWUGraphTimingRequest(serv));}
extern "C"  IClientWUGraphTimingRequest *createClientWUGraphTimingRequest(const char *serv){return ((IClientWUGraphTimingRequest *)new CWUGraphTimingRequest(serv));}

//=======================================================
// class CWUGraphTimingResponse Implementation
//=======================================================

CWUGraphTimingResponse::CWUGraphTimingResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGraphTimingResponse::CWUGraphTimingResponse(const char *serviceName, const char *bc)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingResponse");
}

CWUGraphTimingResponse::CWUGraphTimingResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGraphTimingResponse::CWUGraphTimingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Workunit(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGraphTimingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGraphTimingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunit\" type=\"tns:ECLWorkunit\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLWorkunit::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUGraphTimingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGraphTimingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLWorkunit"))
	{
		added.setValue("ECLWorkunit",1);
		CECLWorkunit::getMapInfo(info,added);
	}
}

StringBuffer &CWUGraphTimingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunit");
	form.append("<tr>").append("<td><b>Workunit: </b></td><td><hr/>");
	CECLWorkunit::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGraphTimingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGraphTimingResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Workunit.marshall(rpc_resp, "Workunit", "", "", "");
	}
}


void CWUGraphTimingResponse::copy(CWUGraphTimingResponse &from)
{
	m_Workunit.copy(from.m_Workunit);
}


void CWUGraphTimingResponse::copy(IConstWUGraphTimingResponse &ifrom)
{
	setWorkunit(ifrom.getWorkunit());
}


void CWUGraphTimingResponse::getAttributes(IProperties &attributes)
{
}


void CWUGraphTimingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Workunit.toStr(ctx, buffer, "Workunit", "", false, "", "");
	}
}


void CWUGraphTimingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGraphTimingResponse::serializer(IEspContext* ctx, IConstWUGraphTimingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGraphTimingResponse>");
	// field Workunit
	{
		StringBuffer tmp;
		CECLWorkunit::serializer(ctx,src.getWorkunit(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Workunit>%s</Workunit>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUGraphTimingResponse>");
}

bool CWUGraphTimingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Workunit.unmarshall(rpc_request, "Workunit", basepath);
	}
	return hasValue;
}

bool CWUGraphTimingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, soapval, "Workunit");
	return hasValue;
}

bool CWUGraphTimingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Workunit.unmarshall(ctx, params, attachments, "Workunit", basepath);
	return hasValue;
}

IConstECLWorkunit & CWUGraphTimingResponse::getWorkunit() { return (IConstECLWorkunit &) m_Workunit.getValue();}
IEspECLWorkunit & CWUGraphTimingResponse::updateWorkunit(){ return (IEspECLWorkunit &) m_Workunit.getValue(); }
void CWUGraphTimingResponse::setWorkunit(IConstECLWorkunit &ifrom){ m_Workunit.copy(ifrom); }
extern "C"  IEspWUGraphTimingResponse *createWUGraphTimingResponse(const char *serv){return ((IEspWUGraphTimingResponse *)new CWUGraphTimingResponse(serv));}
extern "C"  IClientWUGraphTimingResponse *createClientWUGraphTimingResponse(const char *serv){return ((IClientWUGraphTimingResponse *)new CWUGraphTimingResponse(serv));}

//=======================================================
// class CWUGetGraphNameAndTypesRequest Implementation
//=======================================================

CWUGetGraphNameAndTypesRequest::CWUGetGraphNameAndTypesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Type(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetGraphNameAndTypesRequest::CWUGetGraphNameAndTypesRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Type(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesRequest");
}

CWUGetGraphNameAndTypesRequest::CWUGetGraphNameAndTypesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Type(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetGraphNameAndTypesRequest::CWUGetGraphNameAndTypesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Type(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetGraphNameAndTypesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetGraphNameAndTypesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetGraphNameAndTypesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUGetGraphNameAndTypesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetGraphNameAndTypesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetGraphNameAndTypesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
}


void CWUGetGraphNameAndTypesRequest::copy(CWUGetGraphNameAndTypesRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Type.copy(from.m_Type);
}


void CWUGetGraphNameAndTypesRequest::copy(IConstWUGetGraphNameAndTypesRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setType(ifrom.getType());
}


void CWUGetGraphNameAndTypesRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetGraphNameAndTypesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
}


void CWUGetGraphNameAndTypesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetGraphNameAndTypesRequest::serializer(IEspContext* ctx, IConstWUGetGraphNameAndTypesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetGraphNameAndTypesRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Type
	{
		const char* s = src.getType();
		if (s && *s)
		{
			buffer.append("<Type>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Type>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetGraphNameAndTypesRequest>");
}

bool CWUGetGraphNameAndTypesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	return hasValue;
}

bool CWUGetGraphNameAndTypesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	return hasValue;
}

bool CWUGetGraphNameAndTypesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	return hasValue;
}

const char * CWUGetGraphNameAndTypesRequest::getWuid() { return m_Wuid.query();}
const char * CWUGetGraphNameAndTypesRequest::getType() { return m_Type.query();}
void CWUGetGraphNameAndTypesRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUGetGraphNameAndTypesRequest::setType(const char * val){ m_Type.set(val); }
extern "C"  IEspWUGetGraphNameAndTypesRequest *createWUGetGraphNameAndTypesRequest(const char *serv){return ((IEspWUGetGraphNameAndTypesRequest *)new CWUGetGraphNameAndTypesRequest(serv));}
extern "C"  IClientWUGetGraphNameAndTypesRequest *createClientWUGetGraphNameAndTypesRequest(const char *serv){return ((IClientWUGetGraphNameAndTypesRequest *)new CWUGetGraphNameAndTypesRequest(serv));}

//=======================================================
// class CWUGetGraphNameAndTypesResponse Implementation
//=======================================================

CWUGetGraphNameAndTypesResponse::CWUGetGraphNameAndTypesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_GraphNameAndTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetGraphNameAndTypesResponse::CWUGetGraphNameAndTypesResponse(const char *serviceName, const char *bc)
	: m_GraphNameAndTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesResponse");
}

CWUGetGraphNameAndTypesResponse::CWUGetGraphNameAndTypesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_GraphNameAndTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetGraphNameAndTypesResponse::CWUGetGraphNameAndTypesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_GraphNameAndTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphNameAndTypesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetGraphNameAndTypesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"GraphNameAndTypes\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"GraphNameAndType\" type=\"tns:NameAndType\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CNameAndType::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUGetGraphNameAndTypesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetGraphNameAndTypesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("NameAndType"))
	{
		added.setValue("NameAndType",1);
		CNameAndType::getMapInfo(info,added);
	}
}

StringBuffer &CWUGetGraphNameAndTypesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("GraphNameAndTypes");
	form.appendf("<tr><td><b>GraphNameAndTypes: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetGraphNameAndTypesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetGraphNameAndTypesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_GraphNameAndTypes.marshall(rpc_resp, "GraphNameAndTypes", "GraphNameAndType");
	}
}


void CWUGetGraphNameAndTypesResponse::copy(CWUGetGraphNameAndTypesResponse &from)
{
	m_GraphNameAndTypes.copy(from.m_GraphNameAndTypes);
}


void CWUGetGraphNameAndTypesResponse::copy(IConstWUGetGraphNameAndTypesResponse &ifrom)
{
	setGraphNameAndTypes(ifrom.getGraphNameAndTypes());
}


void CWUGetGraphNameAndTypesResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetGraphNameAndTypesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_GraphNameAndTypes.toStr(ctx, buffer, "GraphNameAndTypes", "GraphNameAndType");
	}
}


void CWUGetGraphNameAndTypesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetGraphNameAndTypesResponse::serializer(IEspContext* ctx, IConstWUGetGraphNameAndTypesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetGraphNameAndTypesResponse>");
	// field GraphNameAndTypes
	{
		IArrayOf<IConstNameAndType>& v = src.getGraphNameAndTypes();
		int size = v.length();
		if (size>0)
			buffer.append("<GraphNameAndTypes>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<GraphNameAndType>");
			CNameAndType::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</GraphNameAndType>");
		}
		if (size>0)
			buffer.append("</GraphNameAndTypes>");
	}
	if (keepRootTag)
		buffer.append("</WUGetGraphNameAndTypesResponse>");
}

bool CWUGetGraphNameAndTypesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_GraphNameAndTypes.unmarshall(rpc_request, "GraphNameAndTypes", basepath);
	}
	return hasValue;
}

bool CWUGetGraphNameAndTypesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_GraphNameAndTypes.unmarshall(ctx, soapval, "GraphNameAndTypes");
	return hasValue;
}

bool CWUGetGraphNameAndTypesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_GraphNameAndTypes.unmarshall(ctx, params, attachments, "GraphNameAndTypes", basepath);
	return hasValue;
}

IArrayOf<IConstNameAndType> & CWUGetGraphNameAndTypesResponse::getGraphNameAndTypes() { return (IArrayOf<IConstNameAndType> &) m_GraphNameAndTypes; }
void CWUGetGraphNameAndTypesResponse::setGraphNameAndTypes(IArrayOf<IEspNameAndType> &val)
{
	m_GraphNameAndTypes->kill();
	IArrayOf<IConstNameAndType> &target = m_GraphNameAndTypes.getValue();
	ForEachItemIn(idx, val)
	{
		IEspNameAndType &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetGraphNameAndTypesResponse::setGraphNameAndTypes(IArrayOf<IConstNameAndType> &val)
{
	m_GraphNameAndTypes->kill();
	IArrayOf<IConstNameAndType> &target = m_GraphNameAndTypes.getValue();
	ForEachItemIn(idx, val)
	{
		IConstNameAndType &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUGetGraphNameAndTypesResponse *createWUGetGraphNameAndTypesResponse(const char *serv){return ((IEspWUGetGraphNameAndTypesResponse *)new CWUGetGraphNameAndTypesResponse(serv));}
extern "C"  IClientWUGetGraphNameAndTypesResponse *createClientWUGetGraphNameAndTypesResponse(const char *serv){return ((IClientWUGetGraphNameAndTypesResponse *)new CWUGetGraphNameAndTypesResponse(serv));}

//=======================================================
// class CWUProcessGraphRequest Implementation
//=======================================================

CWUProcessGraphRequest::CWUProcessGraphRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUProcessGraphRequest::CWUProcessGraphRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphRequest");
}

CWUProcessGraphRequest::CWUProcessGraphRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUProcessGraphRequest::CWUProcessGraphRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUProcessGraphRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUProcessGraphRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUProcessGraphRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUProcessGraphRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUProcessGraphRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUProcessGraphRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
}


void CWUProcessGraphRequest::copy(CWUProcessGraphRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Name.copy(from.m_Name);
}


void CWUProcessGraphRequest::copy(IConstWUProcessGraphRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setName(ifrom.getName());
}


void CWUProcessGraphRequest::getAttributes(IProperties &attributes)
{
}


void CWUProcessGraphRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
}


void CWUProcessGraphRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUProcessGraphRequest::serializer(IEspContext* ctx, IConstWUProcessGraphRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUProcessGraphRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUProcessGraphRequest>");
}

bool CWUProcessGraphRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	return hasValue;
}

bool CWUProcessGraphRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	return hasValue;
}

bool CWUProcessGraphRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	return hasValue;
}

const char * CWUProcessGraphRequest::getWuid() { return m_Wuid.query();}
const char * CWUProcessGraphRequest::getName() { return m_Name.query();}
void CWUProcessGraphRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUProcessGraphRequest::setName(const char * val){ m_Name.set(val); }
extern "C"  IEspWUProcessGraphRequest *createWUProcessGraphRequest(const char *serv){return ((IEspWUProcessGraphRequest *)new CWUProcessGraphRequest(serv));}
extern "C"  IClientWUProcessGraphRequest *createClientWUProcessGraphRequest(const char *serv){return ((IClientWUProcessGraphRequest *)new CWUProcessGraphRequest(serv));}

//=======================================================
// class CWUProcessGraphResponse Implementation
//=======================================================

CWUProcessGraphResponse::CWUProcessGraphResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_theGraph(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUProcessGraphResponse::CWUProcessGraphResponse(const char *serviceName, const char *bc)
	: m_theGraph(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphResponse");
}

CWUProcessGraphResponse::CWUProcessGraphResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_theGraph(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUProcessGraphResponse::CWUProcessGraphResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_theGraph(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUProcessGraphResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUProcessGraphResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"theGraph\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUProcessGraphResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUProcessGraphResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUProcessGraphResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("theGraph");
	form.appendf("  <tr><td><b>theGraph: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUProcessGraphResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUProcessGraphResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	rpc_resp.setEncodeXml(false);
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_theGraph.marshall(rpc_resp, "theGraph", "", "", "");
	}
}


void CWUProcessGraphResponse::copy(CWUProcessGraphResponse &from)
{
	m_theGraph.copy(from.m_theGraph);
}


void CWUProcessGraphResponse::copy(IConstWUProcessGraphResponse &ifrom)
{
	setTheGraph(ifrom.getTheGraph());
}


void CWUProcessGraphResponse::getAttributes(IProperties &attributes)
{
}


void CWUProcessGraphResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_theGraph.toStr(ctx, buffer, "theGraph", "", false, "", "");
	}
}


void CWUProcessGraphResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUProcessGraphResponse::serializer(IEspContext* ctx, IConstWUProcessGraphResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUProcessGraphResponse>");
	// field theGraph
	{
		const char* s = src.getTheGraph();
		if (s && *s)
		buffer.appendf("<theGraph>%s</theGraph>",s);
	}
	if (keepRootTag)
		buffer.append("</WUProcessGraphResponse>");
}

bool CWUProcessGraphResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_theGraph.unmarshall(rpc_request, "theGraph", basepath);
	}
	return hasValue;
}

bool CWUProcessGraphResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_theGraph.unmarshall(ctx, soapval, "theGraph");
	return hasValue;
}

bool CWUProcessGraphResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_theGraph.unmarshall(ctx, params, attachments, "theGraph", basepath);
	return hasValue;
}

const char * CWUProcessGraphResponse::getTheGraph() { return m_theGraph.query();}
void CWUProcessGraphResponse::setTheGraph(const char * val){ m_theGraph.set(val); }
extern "C"  IEspWUProcessGraphResponse *createWUProcessGraphResponse(const char *serv){return ((IEspWUProcessGraphResponse *)new CWUProcessGraphResponse(serv));}
extern "C"  IClientWUProcessGraphResponse *createClientWUProcessGraphResponse(const char *serv){return ((IClientWUProcessGraphResponse *)new CWUProcessGraphResponse(serv));}

//=======================================================
// class CWUGetGraphRequest Implementation
//=======================================================

CWUGetGraphRequest::CWUGetGraphRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetGraphRequest::CWUGetGraphRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphRequest");
}

CWUGetGraphRequest::CWUGetGraphRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetGraphRequest::CWUGetGraphRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetGraphRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGetGraphRequest","GraphName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GraphName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphId\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetGraphRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetGraphRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGetGraphRequest","GraphName",1.19);
}

StringBuffer &CWUGetGraphRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGetGraphRequest","GraphName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GraphName");
		form.appendf("  <tr><td><b>GraphName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SubGraphId");
	form.appendf("  <tr><td><b>SubGraphId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetGraphRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetGraphRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_GraphName.marshall(rpc_resp, "GraphName", "", "", "");
	m_SubGraphId.marshall(rpc_resp, "SubGraphId", "", "", "");
}


void CWUGetGraphRequest::copy(CWUGetGraphRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_GraphName.copy(from.m_GraphName);
	m_SubGraphId.copy(from.m_SubGraphId);
}


void CWUGetGraphRequest::copy(IConstWUGetGraphRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setGraphName(ifrom.getGraphName());
	setSubGraphId(ifrom.getSubGraphId());
}


void CWUGetGraphRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetGraphRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_GraphName.toStr(ctx, buffer, "GraphName", "", true, "", "");
	m_SubGraphId.toStr(ctx, buffer, "SubGraphId", "", true, "", "");
}


void CWUGetGraphRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetGraphRequest::serializer(IEspContext* ctx, IConstWUGetGraphRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetGraphRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field GraphName
	if ((clientVer==-1.0 || clientVer>=1.19))
	{
		const char* s = src.getGraphName();
		if (s && *s)
		{
			buffer.append("<GraphName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphName>");
		}
	}
	// field SubGraphId
	{
		const char* s = src.getSubGraphId();
		if (s && *s)
		{
			buffer.append("<SubGraphId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SubGraphId>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetGraphRequest>");
}

bool CWUGetGraphRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_GraphName.unmarshall(rpc_request, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(rpc_request, "SubGraphId", basepath);
	return hasValue;
}

bool CWUGetGraphRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_GraphName.unmarshall(ctx, soapval, "GraphName");
	hasValue |= m_SubGraphId.unmarshall(ctx, soapval, "SubGraphId");
	return hasValue;
}

bool CWUGetGraphRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_GraphName.unmarshall(ctx, params, attachments, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(ctx, params, attachments, "SubGraphId", basepath);
	return hasValue;
}

const char * CWUGetGraphRequest::getWuid() { return m_Wuid.query();}
const char * CWUGetGraphRequest::getGraphName() { return m_GraphName.query();}
const char * CWUGetGraphRequest::getSubGraphId() { return m_SubGraphId.query();}
void CWUGetGraphRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUGetGraphRequest::setGraphName(const char * val){ m_GraphName.set(val); }
void CWUGetGraphRequest::setSubGraphId(const char * val){ m_SubGraphId.set(val); }
extern "C"  IEspWUGetGraphRequest *createWUGetGraphRequest(const char *serv){return ((IEspWUGetGraphRequest *)new CWUGetGraphRequest(serv));}
extern "C"  IClientWUGetGraphRequest *createClientWUGetGraphRequest(const char *serv){return ((IClientWUGetGraphRequest *)new CWUGetGraphRequest(serv));}

//=======================================================
// class CWUGetGraphResponse Implementation
//=======================================================

CWUGetGraphResponse::CWUGetGraphResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetGraphResponse::CWUGetGraphResponse(const char *serviceName, const char *bc)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphResponse");
}

CWUGetGraphResponse::CWUGetGraphResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetGraphResponse::CWUGetGraphResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetGraphResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetGraphResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Graphs\" type=\"tns:ArrayOfECLGraphEx\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLGraphEx::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLGraphEx") && added.getValue("ArrayOfECLGraphEx")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLGraphEx\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLGraphEx\" type=\"tns:ECLGraphEx\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLGraphEx",1);
	}
	return schema;
}

void CWUGetGraphResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetGraphResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLGraphEx"))
	{
		added.setValue("ECLGraphEx",1);
		CECLGraphEx::getMapInfo(info,added);
	}
}

StringBuffer &CWUGetGraphResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Graphs");
	form.appendf("<tr><td><b>Graphs: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetGraphResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetGraphResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Graphs.marshall(rpc_resp, "Graphs", "ECLGraphEx");
	}
}


void CWUGetGraphResponse::copy(CWUGetGraphResponse &from)
{
	m_Graphs.copy(from.m_Graphs);
}


void CWUGetGraphResponse::copy(IConstWUGetGraphResponse &ifrom)
{
	setGraphs(ifrom.getGraphs());
}


void CWUGetGraphResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetGraphResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Graphs.toStr(ctx, buffer, "Graphs", "ECLGraphEx");
	}
}


void CWUGetGraphResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetGraphResponse::serializer(IEspContext* ctx, IConstWUGetGraphResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetGraphResponse>");
	// field Graphs
	{
		IArrayOf<IConstECLGraphEx>& v = src.getGraphs();
		int size = v.length();
		if (size>0)
			buffer.append("<Graphs>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLGraphEx::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Graphs>");
	}
	if (keepRootTag)
		buffer.append("</WUGetGraphResponse>");
}

bool CWUGetGraphResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Graphs.unmarshall(rpc_request, "Graphs", basepath);
	}
	return hasValue;
}

bool CWUGetGraphResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Graphs.unmarshall(ctx, soapval, "Graphs");
	return hasValue;
}

bool CWUGetGraphResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Graphs.unmarshall(ctx, params, attachments, "Graphs", basepath);
	return hasValue;
}

IArrayOf<IConstECLGraphEx> & CWUGetGraphResponse::getGraphs() { return (IArrayOf<IConstECLGraphEx> &) m_Graphs; }
void CWUGetGraphResponse::setGraphs(IArrayOf<IEspECLGraphEx> &val)
{
	m_Graphs->kill();
	IArrayOf<IConstECLGraphEx> &target = m_Graphs.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLGraphEx &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetGraphResponse::setGraphs(IArrayOf<IConstECLGraphEx> &val)
{
	m_Graphs->kill();
	IArrayOf<IConstECLGraphEx> &target = m_Graphs.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLGraphEx &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUGetGraphResponse *createWUGetGraphResponse(const char *serv){return ((IEspWUGetGraphResponse *)new CWUGetGraphResponse(serv));}
extern "C"  IClientWUGetGraphResponse *createClientWUGetGraphResponse(const char *serv){return ((IClientWUGetGraphResponse *)new CWUGetGraphResponse(serv));}

//=======================================================
// class CWUQueryGetGraphRequest Implementation
//=======================================================

CWUQueryGetGraphRequest::CWUQueryGetGraphRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryGetGraphRequest::CWUQueryGetGraphRequest(const char *serviceName, const char *bc)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphRequest");
}

CWUQueryGetGraphRequest::CWUQueryGetGraphRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryGetGraphRequest::CWUQueryGetGraphRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_GraphName(nilIgnore),m_SubGraphId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryGetGraphRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryGetGraphRequest","GraphName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GraphName\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"SubGraphId\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQueryGetGraphRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryGetGraphRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQueryGetGraphRequest","GraphName",1.19);
}

StringBuffer &CWUQueryGetGraphRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryGetGraphRequest","GraphName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GraphName");
		form.appendf("  <tr><td><b>GraphName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SubGraphId");
	form.appendf("  <tr><td><b>SubGraphId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryGetGraphRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryGetGraphRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_GraphName.marshall(rpc_resp, "GraphName", "", "", "");
	m_SubGraphId.marshall(rpc_resp, "SubGraphId", "", "", "");
}


void CWUQueryGetGraphRequest::copy(CWUQueryGetGraphRequest &from)
{
	m_Target.copy(from.m_Target);
	m_QueryId.copy(from.m_QueryId);
	m_GraphName.copy(from.m_GraphName);
	m_SubGraphId.copy(from.m_SubGraphId);
}


void CWUQueryGetGraphRequest::copy(IConstWUQueryGetGraphRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setQueryId(ifrom.getQueryId());
	setGraphName(ifrom.getGraphName());
	setSubGraphId(ifrom.getSubGraphId());
}


void CWUQueryGetGraphRequest::getAttributes(IProperties &attributes)
{
}


void CWUQueryGetGraphRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.19))
		m_GraphName.toStr(ctx, buffer, "GraphName", "", true, "", "");
	m_SubGraphId.toStr(ctx, buffer, "SubGraphId", "", true, "", "");
}


void CWUQueryGetGraphRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryGetGraphRequest::serializer(IEspContext* ctx, IConstWUQueryGetGraphRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryGetGraphRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field GraphName
	if ((clientVer==-1.0 || clientVer>=1.19))
	{
		const char* s = src.getGraphName();
		if (s && *s)
		{
			buffer.append("<GraphName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</GraphName>");
		}
	}
	// field SubGraphId
	{
		const char* s = src.getSubGraphId();
		if (s && *s)
		{
			buffer.append("<SubGraphId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SubGraphId>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUQueryGetGraphRequest>");
}

bool CWUQueryGetGraphRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_GraphName.unmarshall(rpc_request, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(rpc_request, "SubGraphId", basepath);
	return hasValue;
}

bool CWUQueryGetGraphRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_GraphName.unmarshall(ctx, soapval, "GraphName");
	hasValue |= m_SubGraphId.unmarshall(ctx, soapval, "SubGraphId");
	return hasValue;
}

bool CWUQueryGetGraphRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_GraphName.unmarshall(ctx, params, attachments, "GraphName", basepath);
	hasValue |= m_SubGraphId.unmarshall(ctx, params, attachments, "SubGraphId", basepath);
	return hasValue;
}

const char * CWUQueryGetGraphRequest::getTarget() { return m_Target.query();}
const char * CWUQueryGetGraphRequest::getQueryId() { return m_QueryId.query();}
const char * CWUQueryGetGraphRequest::getGraphName() { return m_GraphName.query();}
const char * CWUQueryGetGraphRequest::getSubGraphId() { return m_SubGraphId.query();}
void CWUQueryGetGraphRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUQueryGetGraphRequest::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUQueryGetGraphRequest::setGraphName(const char * val){ m_GraphName.set(val); }
void CWUQueryGetGraphRequest::setSubGraphId(const char * val){ m_SubGraphId.set(val); }
extern "C"  IEspWUQueryGetGraphRequest *createWUQueryGetGraphRequest(const char *serv){return ((IEspWUQueryGetGraphRequest *)new CWUQueryGetGraphRequest(serv));}
extern "C"  IClientWUQueryGetGraphRequest *createClientWUQueryGetGraphRequest(const char *serv){return ((IClientWUQueryGetGraphRequest *)new CWUQueryGetGraphRequest(serv));}

//=======================================================
// class CWUQueryGetGraphResponse Implementation
//=======================================================

CWUQueryGetGraphResponse::CWUQueryGetGraphResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryGetGraphResponse::CWUQueryGetGraphResponse(const char *serviceName, const char *bc)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphResponse");
}

CWUQueryGetGraphResponse::CWUQueryGetGraphResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryGetGraphResponse::CWUQueryGetGraphResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Graphs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetGraphResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryGetGraphResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Graphs\" type=\"tns:ArrayOfECLGraphEx\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLGraphEx::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLGraphEx") && added.getValue("ArrayOfECLGraphEx")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLGraphEx\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLGraphEx\" type=\"tns:ECLGraphEx\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLGraphEx",1);
	}
	return schema;
}

void CWUQueryGetGraphResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryGetGraphResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLGraphEx"))
	{
		added.setValue("ECLGraphEx",1);
		CECLGraphEx::getMapInfo(info,added);
	}
}

StringBuffer &CWUQueryGetGraphResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Graphs");
	form.appendf("<tr><td><b>Graphs: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryGetGraphResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryGetGraphResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Graphs.marshall(rpc_resp, "Graphs", "ECLGraphEx");
	}
}


void CWUQueryGetGraphResponse::copy(CWUQueryGetGraphResponse &from)
{
	m_Graphs.copy(from.m_Graphs);
}


void CWUQueryGetGraphResponse::copy(IConstWUQueryGetGraphResponse &ifrom)
{
	setGraphs(ifrom.getGraphs());
}


void CWUQueryGetGraphResponse::getAttributes(IProperties &attributes)
{
}


void CWUQueryGetGraphResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Graphs.toStr(ctx, buffer, "Graphs", "ECLGraphEx");
	}
}


void CWUQueryGetGraphResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryGetGraphResponse::serializer(IEspContext* ctx, IConstWUQueryGetGraphResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryGetGraphResponse>");
	// field Graphs
	{
		IArrayOf<IConstECLGraphEx>& v = src.getGraphs();
		int size = v.length();
		if (size>0)
			buffer.append("<Graphs>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLGraphEx::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Graphs>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryGetGraphResponse>");
}

bool CWUQueryGetGraphResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Graphs.unmarshall(rpc_request, "Graphs", basepath);
	}
	return hasValue;
}

bool CWUQueryGetGraphResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Graphs.unmarshall(ctx, soapval, "Graphs");
	return hasValue;
}

bool CWUQueryGetGraphResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Graphs.unmarshall(ctx, params, attachments, "Graphs", basepath);
	return hasValue;
}

IArrayOf<IConstECLGraphEx> & CWUQueryGetGraphResponse::getGraphs() { return (IArrayOf<IConstECLGraphEx> &) m_Graphs; }
void CWUQueryGetGraphResponse::setGraphs(IArrayOf<IEspECLGraphEx> &val)
{
	m_Graphs->kill();
	IArrayOf<IConstECLGraphEx> &target = m_Graphs.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLGraphEx &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryGetGraphResponse::setGraphs(IArrayOf<IConstECLGraphEx> &val)
{
	m_Graphs->kill();
	IArrayOf<IConstECLGraphEx> &target = m_Graphs.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLGraphEx &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQueryGetGraphResponse *createWUQueryGetGraphResponse(const char *serv){return ((IEspWUQueryGetGraphResponse *)new CWUQueryGetGraphResponse(serv));}
extern "C"  IClientWUQueryGetGraphResponse *createClientWUQueryGetGraphResponse(const char *serv){return ((IClientWUQueryGetGraphResponse *)new CWUQueryGetGraphResponse(serv));}

//=======================================================
// class CWUQueryGetSummaryStatsRequest Implementation
//=======================================================

CWUQueryGetSummaryStatsRequest::CWUQueryGetSummaryStatsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_FromTime(nilIgnore),m_ToTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryGetSummaryStatsRequest::CWUQueryGetSummaryStatsRequest(const char *serviceName, const char *bc)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_FromTime(nilIgnore),m_ToTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsRequest");
}

CWUQueryGetSummaryStatsRequest::CWUQueryGetSummaryStatsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_FromTime(nilIgnore),m_ToTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryGetSummaryStatsRequest::CWUQueryGetSummaryStatsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilIgnore),m_QueryId(nilIgnore),m_FromTime(nilIgnore),m_ToTime(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryGetSummaryStatsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FromTime\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ToTime\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQueryGetSummaryStatsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryGetSummaryStatsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQueryGetSummaryStatsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FromTime");
	form.appendf("  <tr><td><b>FromTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ToTime");
	form.appendf("  <tr><td><b>ToTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryGetSummaryStatsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryGetSummaryStatsRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	m_FromTime.marshall(rpc_resp, "FromTime", "", "", "");
	m_ToTime.marshall(rpc_resp, "ToTime", "", "", "");
}


void CWUQueryGetSummaryStatsRequest::copy(CWUQueryGetSummaryStatsRequest &from)
{
	m_Target.copy(from.m_Target);
	m_QueryId.copy(from.m_QueryId);
	m_FromTime.copy(from.m_FromTime);
	m_ToTime.copy(from.m_ToTime);
}


void CWUQueryGetSummaryStatsRequest::copy(IConstWUQueryGetSummaryStatsRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setQueryId(ifrom.getQueryId());
	setFromTime(ifrom.getFromTime());
	setToTime(ifrom.getToTime());
}


void CWUQueryGetSummaryStatsRequest::getAttributes(IProperties &attributes)
{
}


void CWUQueryGetSummaryStatsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	m_FromTime.toStr(ctx, buffer, "FromTime", "", true, "", "");
	m_ToTime.toStr(ctx, buffer, "ToTime", "", true, "", "");
}


void CWUQueryGetSummaryStatsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryGetSummaryStatsRequest::serializer(IEspContext* ctx, IConstWUQueryGetSummaryStatsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryGetSummaryStatsRequest>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field FromTime
	{
		const char* s = src.getFromTime();
		if (s && *s)
		{
			buffer.append("<FromTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FromTime>");
		}
	}
	// field ToTime
	{
		const char* s = src.getToTime();
		if (s && *s)
		{
			buffer.append("<ToTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ToTime>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUQueryGetSummaryStatsRequest>");
}

bool CWUQueryGetSummaryStatsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_FromTime.unmarshall(rpc_request, "FromTime", basepath);
	hasValue |= m_ToTime.unmarshall(rpc_request, "ToTime", basepath);
	return hasValue;
}

bool CWUQueryGetSummaryStatsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_FromTime.unmarshall(ctx, soapval, "FromTime");
	hasValue |= m_ToTime.unmarshall(ctx, soapval, "ToTime");
	return hasValue;
}

bool CWUQueryGetSummaryStatsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_FromTime.unmarshall(ctx, params, attachments, "FromTime", basepath);
	hasValue |= m_ToTime.unmarshall(ctx, params, attachments, "ToTime", basepath);
	return hasValue;
}

const char * CWUQueryGetSummaryStatsRequest::getTarget() { return m_Target.query();}
const char * CWUQueryGetSummaryStatsRequest::getQueryId() { return m_QueryId.query();}
const char * CWUQueryGetSummaryStatsRequest::getFromTime() { return m_FromTime.query();}
const char * CWUQueryGetSummaryStatsRequest::getToTime() { return m_ToTime.query();}
void CWUQueryGetSummaryStatsRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUQueryGetSummaryStatsRequest::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUQueryGetSummaryStatsRequest::setFromTime(const char * val){ m_FromTime.set(val); }
void CWUQueryGetSummaryStatsRequest::setToTime(const char * val){ m_ToTime.set(val); }
extern "C"  IEspWUQueryGetSummaryStatsRequest *createWUQueryGetSummaryStatsRequest(const char *serv){return ((IEspWUQueryGetSummaryStatsRequest *)new CWUQueryGetSummaryStatsRequest(serv));}
extern "C"  IClientWUQueryGetSummaryStatsRequest *createClientWUQueryGetSummaryStatsRequest(const char *serv){return ((IClientWUQueryGetSummaryStatsRequest *)new CWUQueryGetSummaryStatsRequest(serv));}

//=======================================================
// class CWUQueryGetSummaryStatsResponse Implementation
//=======================================================

CWUQueryGetSummaryStatsResponse::CWUQueryGetSummaryStatsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_StatsList(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryGetSummaryStatsResponse::CWUQueryGetSummaryStatsResponse(const char *serviceName, const char *bc)
	: m_StatsList(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsResponse");
}

CWUQueryGetSummaryStatsResponse::CWUQueryGetSummaryStatsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_StatsList(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryGetSummaryStatsResponse::CWUQueryGetSummaryStatsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_StatsList(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryGetSummaryStatsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryGetSummaryStatsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"StatsList\" type=\"tns:ArrayOfQuerySummaryStats\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CQuerySummaryStats::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("QuerySummaryStats") && added.getValue("ArrayOfQuerySummaryStats")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQuerySummaryStats\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QuerySummaryStats\" type=\"tns:QuerySummaryStats\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQuerySummaryStats",1);
	}
	return schema;
}

void CWUQueryGetSummaryStatsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryGetSummaryStatsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySummaryStats"))
	{
		added.setValue("QuerySummaryStats",1);
		CQuerySummaryStats::getMapInfo(info,added);
	}
}

StringBuffer &CWUQueryGetSummaryStatsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StatsList");
	form.appendf("<tr><td><b>StatsList: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryGetSummaryStatsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryGetSummaryStatsResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_StatsList.marshall(rpc_resp, "StatsList", "QuerySummaryStats");
	}
}


void CWUQueryGetSummaryStatsResponse::copy(CWUQueryGetSummaryStatsResponse &from)
{
	m_StatsList.copy(from.m_StatsList);
}


void CWUQueryGetSummaryStatsResponse::copy(IConstWUQueryGetSummaryStatsResponse &ifrom)
{
	setStatsList(ifrom.getStatsList());
}


void CWUQueryGetSummaryStatsResponse::getAttributes(IProperties &attributes)
{
}


void CWUQueryGetSummaryStatsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_StatsList.toStr(ctx, buffer, "StatsList", "QuerySummaryStats");
	}
}


void CWUQueryGetSummaryStatsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryGetSummaryStatsResponse::serializer(IEspContext* ctx, IConstWUQueryGetSummaryStatsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryGetSummaryStatsResponse>");
	// field StatsList
	{
		IArrayOf<IConstQuerySummaryStats>& v = src.getStatsList();
		int size = v.length();
		if (size>0)
			buffer.append("<StatsList>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQuerySummaryStats::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</StatsList>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryGetSummaryStatsResponse>");
}

bool CWUQueryGetSummaryStatsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_StatsList.unmarshall(rpc_request, "StatsList", basepath);
	}
	return hasValue;
}

bool CWUQueryGetSummaryStatsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_StatsList.unmarshall(ctx, soapval, "StatsList");
	return hasValue;
}

bool CWUQueryGetSummaryStatsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_StatsList.unmarshall(ctx, params, attachments, "StatsList", basepath);
	return hasValue;
}

IArrayOf<IConstQuerySummaryStats> & CWUQueryGetSummaryStatsResponse::getStatsList() { return (IArrayOf<IConstQuerySummaryStats> &) m_StatsList; }
void CWUQueryGetSummaryStatsResponse::setStatsList(IArrayOf<IEspQuerySummaryStats> &val)
{
	m_StatsList->kill();
	IArrayOf<IConstQuerySummaryStats> &target = m_StatsList.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySummaryStats &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryGetSummaryStatsResponse::setStatsList(IArrayOf<IConstQuerySummaryStats> &val)
{
	m_StatsList->kill();
	IArrayOf<IConstQuerySummaryStats> &target = m_StatsList.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySummaryStats &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQueryGetSummaryStatsResponse *createWUQueryGetSummaryStatsResponse(const char *serv){return ((IEspWUQueryGetSummaryStatsResponse *)new CWUQueryGetSummaryStatsResponse(serv));}
extern "C"  IClientWUQueryGetSummaryStatsResponse *createClientWUQueryGetSummaryStatsResponse(const char *serv){return ((IClientWUQueryGetSummaryStatsResponse *)new CWUQueryGetSummaryStatsResponse(serv));}

//=======================================================
// class CWUExportRequest Implementation
//=======================================================

CWUExportRequest::CWUExportRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_Owner(nilIgnore),m_State(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ECL(nilIgnore),m_Jobname(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUExportRequest::CWUExportRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_Owner(nilIgnore),m_State(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ECL(nilIgnore),m_Jobname(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportRequest");
}

CWUExportRequest::CWUExportRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore),m_Owner(nilIgnore),m_State(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ECL(nilIgnore),m_Jobname(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUExportRequest::CWUExportRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore),m_Owner(nilIgnore),m_State(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ECL(nilIgnore),m_Jobname(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUExportRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Owner\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUExportRequest","ECL")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ECL\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Jobname\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUExportRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUExportRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMaxVersion("WUExportRequest","ECL",1.57);
}

StringBuffer &CWUExportRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Owner");
	form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUExportRequest","ECL")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ECL");
		form.appendf("  <tr><td><b>ECL: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Jobname");
	form.appendf("  <tr><td><b>Jobname: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUExportRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUExportRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Owner.marshall(rpc_resp, "Owner", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	if ((clientVer==-1.0 || clientVer<=1.57))
		m_ECL.marshall(rpc_resp, "ECL", "", "", "");
	m_Jobname.marshall(rpc_resp, "Jobname", "", "", "");
}


void CWUExportRequest::copy(CWUExportRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_Owner.copy(from.m_Owner);
	m_State.copy(from.m_State);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ECL.copy(from.m_ECL);
	m_Jobname.copy(from.m_Jobname);
}


void CWUExportRequest::copy(IConstWUExportRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setOwner(ifrom.getOwner());
	setState(ifrom.getState());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setECL(ifrom.getECL());
	setJobname(ifrom.getJobname());
}


void CWUExportRequest::getAttributes(IProperties &attributes)
{
}


void CWUExportRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	if ((clientVer==-1.0 || clientVer<=1.57))
		m_ECL.toStr(ctx, buffer, "ECL", "", true, "", "");
	m_Jobname.toStr(ctx, buffer, "Jobname", "", true, "", "");
}


void CWUExportRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUExportRequest::serializer(IEspContext* ctx, IConstWUExportRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUExportRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Owner
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ECL
	if ((clientVer==-1.0 || clientVer<=1.57))
	{
		const char* s = src.getECL();
		if (s && *s)
		{
			buffer.append("<ECL>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECL>");
		}
	}
	// field Jobname
	{
		const char* s = src.getJobname();
		if (s && *s)
		{
			buffer.append("<Jobname>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Jobname>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUExportRequest>");
}

bool CWUExportRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_ECL.unmarshall(rpc_request, "ECL", basepath);
	hasValue |= m_Jobname.unmarshall(rpc_request, "Jobname", basepath);
	return hasValue;
}

bool CWUExportRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ECL.unmarshall(ctx, soapval, "ECL");
	hasValue |= m_Jobname.unmarshall(ctx, soapval, "Jobname");
	return hasValue;
}

bool CWUExportRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ECL.unmarshall(ctx, params, attachments, "ECL", basepath);
	hasValue |= m_Jobname.unmarshall(ctx, params, attachments, "Jobname", basepath);
	return hasValue;
}

const char * CWUExportRequest::getCluster() { return m_Cluster.query();}
const char * CWUExportRequest::getOwner() { return m_Owner.query();}
const char * CWUExportRequest::getState() { return m_State.query();}
const char * CWUExportRequest::getStartDate() { return m_StartDate.query();}
const char * CWUExportRequest::getEndDate() { return m_EndDate.query();}
const char * CWUExportRequest::getECL() { return m_ECL.query();}
const char * CWUExportRequest::getJobname() { return m_Jobname.query();}
void CWUExportRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUExportRequest::setOwner(const char * val){ m_Owner.set(val); }
void CWUExportRequest::setState(const char * val){ m_State.set(val); }
void CWUExportRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUExportRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUExportRequest::setECL(const char * val){ m_ECL.set(val); }
void CWUExportRequest::setJobname(const char * val){ m_Jobname.set(val); }
extern "C"  IEspWUExportRequest *createWUExportRequest(const char *serv){return ((IEspWUExportRequest *)new CWUExportRequest(serv));}
extern "C"  IClientWUExportRequest *createClientWUExportRequest(const char *serv){return ((IClientWUExportRequest *)new CWUExportRequest(serv));}

//=======================================================
// class CWUExportResponse Implementation
//=======================================================

CWUExportResponse::CWUExportResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ExportData(nilIgnore),m_ExportData_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUExportResponse::CWUExportResponse(const char *serviceName, const char *bc)
	: m_ExportData(nilIgnore), m_ExportData_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportResponse");
}

CWUExportResponse::CWUExportResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ExportData(nilIgnore), m_ExportData_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUExportResponse::CWUExportResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ExportData(nilIgnore), m_ExportData_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExportResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUExportResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ExportData\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUExportResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUExportResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUExportResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExportData");
	form.appendf("  <tr><td><b>ExportData: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUExportResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUExportResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ExportData.marshall(rpc_resp, "ExportData", "", "", "");
	}
}


void CWUExportResponse::copy(CWUExportResponse &from)
{
	m_ExportData.copy(from.m_ExportData);
}


void CWUExportResponse::copy(IConstWUExportResponse &ifrom)
{
	setExportData(ifrom.getExportData());
}


void CWUExportResponse::getAttributes(IProperties &attributes)
{
}


void CWUExportResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ExportData.toStr(ctx, buffer, "ExportData", "", true, "", "");
	}
}


void CWUExportResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUExportResponse::serializer(IEspContext* ctx, IConstWUExportResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUExportResponse>");
	// field ExportData
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getExportData().toByteArray(), src.getExportData().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<ExportData>%s</ExportData>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUExportResponse>");
}

void CWUExportResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_ExportData.getValue());
	mimetype.set(m_ExportData_mimetype.str());
}

bool CWUExportResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ExportData.unmarshall(rpc_request, "ExportData", basepath);
	}
	return hasValue;
}

bool CWUExportResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ExportData.unmarshall(ctx, soapval, "ExportData");
	return hasValue;
}

bool CWUExportResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ExportData.unmarshall(ctx, params, attachments, "ExportData", basepath);
	return hasValue;
}

const char *CWUExportResponse::getExportData_mimetype(){ return m_ExportData_mimetype.str(); }
const MemoryBuffer & CWUExportResponse::getExportData() { return m_ExportData.getValue();}
void CWUExportResponse::setExportData_mimetype(const char *  val){ m_ExportData_mimetype.set(val); }
void CWUExportResponse::setExportData(const MemoryBuffer & val){ m_ExportData->clear().append(val); }
extern "C"  IEspWUExportResponse *createWUExportResponse(const char *serv){return ((IEspWUExportResponse *)new CWUExportResponse(serv));}
extern "C"  IClientWUExportResponse *createClientWUExportResponse(const char *serv){return ((IClientWUExportResponse *)new CWUExportResponse(serv));}

//=======================================================
// class CWUWaitRequest Implementation
//=======================================================

CWUWaitRequest::CWUWaitRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Wait(-1, nilIgnore,false),m_ReturnOnWait(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUWaitRequest::CWUWaitRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Wait(-1, nilIgnore,false),m_ReturnOnWait(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitRequest");
}

CWUWaitRequest::CWUWaitRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Wait(-1, nilIgnore,false),m_ReturnOnWait(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUWaitRequest::CWUWaitRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Wait(-1, nilIgnore,false),m_ReturnOnWait(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUWaitRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"Wait\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ReturnOnWait\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUWaitRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUWaitRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUWaitRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Wait");
	form.appendf("  <tr><td><b>Wait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReturnOnWait");
	
	form.appendf("  <tr><td><b>ReturnOnWait? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUWaitRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUWaitRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Wait.marshall(rpc_resp, "Wait", "", "", "");
	m_ReturnOnWait.marshall(rpc_resp, "ReturnOnWait", "", "", "");
}


void CWUWaitRequest::copy(CWUWaitRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Wait.copy(from.m_Wait);
	m_ReturnOnWait.copy(from.m_ReturnOnWait);
}


void CWUWaitRequest::copy(IConstWUWaitRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setWait(ifrom.getWait());
	setReturnOnWait(ifrom.getReturnOnWait());
}


void CWUWaitRequest::getAttributes(IProperties &attributes)
{
}


void CWUWaitRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Wait.toStr(ctx, buffer, "Wait", "", true, "", "");
	m_ReturnOnWait.toStr(ctx, buffer, "ReturnOnWait", "", true, "", "");
}


void CWUWaitRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUWaitRequest::serializer(IEspContext* ctx, IConstWUWaitRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUWaitRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Wait
	{
		int n = src.getWait();
		if (n)
			buffer.appendf("<Wait>%d</Wait>", n);
	}
	// field ReturnOnWait
	{
		bool b = src.getReturnOnWait();
		if (b)
			buffer.appendf("<ReturnOnWait>1</ReturnOnWait>");
	}
	if (keepRootTag)
		buffer.append("</WUWaitRequest>");
}

bool CWUWaitRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Wait.unmarshall(rpc_request, "Wait", basepath);
	hasValue |= m_ReturnOnWait.unmarshall(rpc_request, "ReturnOnWait", basepath);
	return hasValue;
}

bool CWUWaitRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Wait.unmarshall(ctx, soapval, "Wait");
	hasValue |= m_ReturnOnWait.unmarshall(ctx, soapval, "ReturnOnWait");
	return hasValue;
}

bool CWUWaitRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Wait.unmarshall(ctx, params, attachments, "Wait", basepath);
	hasValue |= m_ReturnOnWait.unmarshall(ctx, params, attachments, "ReturnOnWait", basepath);
	return hasValue;
}

const char * CWUWaitRequest::getWuid() { return m_Wuid.query();}
int CWUWaitRequest::getWait() { return m_Wait;}
bool CWUWaitRequest::getReturnOnWait() { return m_ReturnOnWait;}
void CWUWaitRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUWaitRequest::setWait(int val){ m_Wait=val; }
void CWUWaitRequest::setReturnOnWait(bool val){ m_ReturnOnWait=val; }
extern "C"  IEspWUWaitRequest *createWUWaitRequest(const char *serv){return ((IEspWUWaitRequest *)new CWUWaitRequest(serv));}
extern "C"  IClientWUWaitRequest *createClientWUWaitRequest(const char *serv){return ((IClientWUWaitRequest *)new CWUWaitRequest(serv));}

//=======================================================
// class CWUWaitResponse Implementation
//=======================================================

CWUWaitResponse::CWUWaitResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_StateID(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUWaitResponse::CWUWaitResponse(const char *serviceName, const char *bc)
	: m_StateID(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitResponse");
}

CWUWaitResponse::CWUWaitResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_StateID(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUWaitResponse::CWUWaitResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_StateID(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUWaitResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUWaitResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"StateID\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUWaitResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUWaitResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUWaitResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("StateID");
	form.appendf("  <tr><td><b>StateID: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUWaitResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUWaitResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_StateID.marshall(rpc_resp, "StateID", "", "", "");
	}
}


void CWUWaitResponse::copy(CWUWaitResponse &from)
{
	m_StateID.copy(from.m_StateID);
}


void CWUWaitResponse::copy(IConstWUWaitResponse &ifrom)
{
	setStateID(ifrom.getStateID());
}


void CWUWaitResponse::getAttributes(IProperties &attributes)
{
}


void CWUWaitResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_StateID.toStr(ctx, buffer, "StateID", "", true, "", "");
	}
}


void CWUWaitResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUWaitResponse::serializer(IEspContext* ctx, IConstWUWaitResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUWaitResponse>");
	// field StateID
	{
		int n = src.getStateID();
		if (n)
			buffer.appendf("<StateID>%d</StateID>", n);
	}
	if (keepRootTag)
		buffer.append("</WUWaitResponse>");
}

bool CWUWaitResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_StateID.unmarshall(rpc_request, "StateID", basepath);
	}
	return hasValue;
}

bool CWUWaitResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_StateID.unmarshall(ctx, soapval, "StateID");
	return hasValue;
}

bool CWUWaitResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_StateID.unmarshall(ctx, params, attachments, "StateID", basepath);
	return hasValue;
}

int CWUWaitResponse::getStateID() { return m_StateID;}
void CWUWaitResponse::setStateID(int val){ m_StateID=val; }
extern "C"  IEspWUWaitResponse *createWUWaitResponse(const char *serv){return ((IEspWUWaitResponse *)new CWUWaitResponse(serv));}
extern "C"  IClientWUWaitResponse *createClientWUWaitResponse(const char *serv){return ((IClientWUWaitResponse *)new CWUWaitResponse(serv));}

//=======================================================
// class CWUSyntaxCheckRequest Implementation
//=======================================================

CWUSyntaxCheckRequest::CWUSyntaxCheckRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_TimeToWait(60000, nilIgnore,false),m_DebugValues(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUSyntaxCheckRequest::CWUSyntaxCheckRequest(const char *serviceName, const char *bc)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_TimeToWait(60000, nilIgnore,false),m_DebugValues(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckRequest");
}

CWUSyntaxCheckRequest::CWUSyntaxCheckRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_TimeToWait(60000, nilIgnore,false),m_DebugValues(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUSyntaxCheckRequest::CWUSyntaxCheckRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_TimeToWait(60000, nilIgnore,false),m_DebugValues(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUSyntaxCheckRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECL\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ModuleName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AttributeName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Snapshot\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"60000\" name=\"TimeToWait\" type=\"xsd:int\"/>\n");
		if (!context.suppressed("WUSyntaxCheckRequest","DebugValues")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"DebugValues\" type=\"tns:ArrayOfDebugValue\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUSyntaxCheckRequest","DebugValues"))
			CDebugValue::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("DebugValue") && added.getValue("ArrayOfDebugValue")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfDebugValue\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DebugValue\" type=\"tns:DebugValue\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfDebugValue",1);
	}
	return schema;
}

void CWUSyntaxCheckRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUSyntaxCheckRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUSyntaxCheckRequest","DebugValues",1.04);
	if (!added.getValue("DebugValue"))
	{
		added.setValue("DebugValue",1);
		CDebugValue::getMapInfo(info,added);
	}
}

StringBuffer &CWUSyntaxCheckRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECL");
	form.appendf("  <tr><td><b>ECL: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ModuleName");
	form.appendf("  <tr><td><b>ModuleName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AttributeName");
	form.appendf("  <tr><td><b>AttributeName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queue");
	form.appendf("  <tr><td><b>Queue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Snapshot");
	form.appendf("  <tr><td><b>Snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeToWait");
	form.appendf("  <tr><td><b>TimeToWait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"60000\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUSyntaxCheckRequest","DebugValues")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("DebugValues");
		form.appendf("<tr><td><b>DebugValues: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUSyntaxCheckRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUSyntaxCheckRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ECL.marshall(rpc_resp, "ECL", "", "", "");
	m_ModuleName.marshall(rpc_resp, "ModuleName", "", "", "");
	m_AttributeName.marshall(rpc_resp, "AttributeName", "", "", "");
	m_Queue.marshall(rpc_resp, "Queue", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Snapshot.marshall(rpc_resp, "Snapshot", "", "", "");
	m_TimeToWait.marshall(rpc_resp, "TimeToWait", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.04))
		m_DebugValues.marshall(rpc_resp, "DebugValues", "DebugValue");
}


void CWUSyntaxCheckRequest::copy(CWUSyntaxCheckRequest &from)
{
	m_ECL.copy(from.m_ECL);
	m_ModuleName.copy(from.m_ModuleName);
	m_AttributeName.copy(from.m_AttributeName);
	m_Queue.copy(from.m_Queue);
	m_Cluster.copy(from.m_Cluster);
	m_Snapshot.copy(from.m_Snapshot);
	m_TimeToWait.copy(from.m_TimeToWait);
	m_DebugValues.copy(from.m_DebugValues);
}


void CWUSyntaxCheckRequest::copy(IConstWUSyntaxCheckRequest &ifrom)
{
	setECL(ifrom.getECL());
	setModuleName(ifrom.getModuleName());
	setAttributeName(ifrom.getAttributeName());
	setQueue(ifrom.getQueue());
	setCluster(ifrom.getCluster());
	setSnapshot(ifrom.getSnapshot());
	setTimeToWait(ifrom.getTimeToWait());
	setDebugValues(ifrom.getDebugValues());
}


void CWUSyntaxCheckRequest::getAttributes(IProperties &attributes)
{
}


void CWUSyntaxCheckRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_ECL.toStr(ctx, buffer, "ECL", "", true, "", "");
	m_ModuleName.toStr(ctx, buffer, "ModuleName", "", true, "", "");
	m_AttributeName.toStr(ctx, buffer, "AttributeName", "", true, "", "");
	m_Queue.toStr(ctx, buffer, "Queue", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Snapshot.toStr(ctx, buffer, "Snapshot", "", true, "", "");
	m_TimeToWait.toStr(ctx, buffer, "TimeToWait", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.04))
		m_DebugValues.toStr(ctx, buffer, "DebugValues", "DebugValue");
}


void CWUSyntaxCheckRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUSyntaxCheckRequest::serializer(IEspContext* ctx, IConstWUSyntaxCheckRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUSyntaxCheckRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field ECL
	{
		const char* s = src.getECL();
		if (s && *s)
		{
			buffer.append("<ECL>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECL>");
		}
	}
	// field ModuleName
	{
		const char* s = src.getModuleName();
		if (s && *s)
		{
			buffer.append("<ModuleName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ModuleName>");
		}
	}
	// field AttributeName
	{
		const char* s = src.getAttributeName();
		if (s && *s)
		{
			buffer.append("<AttributeName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</AttributeName>");
		}
	}
	// field Queue
	{
		const char* s = src.getQueue();
		if (s && *s)
		{
			buffer.append("<Queue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Queue>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Snapshot
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<Snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Snapshot>");
		}
	}
	// field TimeToWait
	{
		int n = src.getTimeToWait();
		if (n)
			buffer.appendf("<TimeToWait>%d</TimeToWait>", n);
	}
	// field DebugValues
	if ((clientVer==-1.0 || clientVer>=1.04))
	{
		IArrayOf<IConstDebugValue>& v = src.getDebugValues();
		int size = v.length();
		if (size>0)
			buffer.append("<DebugValues>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CDebugValue::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</DebugValues>");
	}
	if (keepRootTag)
		buffer.append("</WUSyntaxCheckRequest>");
}

bool CWUSyntaxCheckRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ECL.unmarshall(rpc_request, "ECL", basepath);
	hasValue |= m_ModuleName.unmarshall(rpc_request, "ModuleName", basepath);
	hasValue |= m_AttributeName.unmarshall(rpc_request, "AttributeName", basepath);
	hasValue |= m_Queue.unmarshall(rpc_request, "Queue", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Snapshot.unmarshall(rpc_request, "Snapshot", basepath);
	hasValue |= m_TimeToWait.unmarshall(rpc_request, "TimeToWait", basepath);
	hasValue |= m_DebugValues.unmarshall(rpc_request, "DebugValues", basepath);
	return hasValue;
}

bool CWUSyntaxCheckRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ECL.unmarshall(ctx, soapval, "ECL");
	hasValue |= m_ModuleName.unmarshall(ctx, soapval, "ModuleName");
	hasValue |= m_AttributeName.unmarshall(ctx, soapval, "AttributeName");
	hasValue |= m_Queue.unmarshall(ctx, soapval, "Queue");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Snapshot.unmarshall(ctx, soapval, "Snapshot");
	hasValue |= m_TimeToWait.unmarshall(ctx, soapval, "TimeToWait");
	hasValue |= m_DebugValues.unmarshall(ctx, soapval, "DebugValues");
	return hasValue;
}

bool CWUSyntaxCheckRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ECL.unmarshall(ctx, params, attachments, "ECL", basepath);
	hasValue |= m_ModuleName.unmarshall(ctx, params, attachments, "ModuleName", basepath);
	hasValue |= m_AttributeName.unmarshall(ctx, params, attachments, "AttributeName", basepath);
	hasValue |= m_Queue.unmarshall(ctx, params, attachments, "Queue", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Snapshot.unmarshall(ctx, params, attachments, "Snapshot", basepath);
	hasValue |= m_TimeToWait.unmarshall(ctx, params, attachments, "TimeToWait", basepath);
	hasValue |= m_DebugValues.unmarshall(ctx, params, attachments, "DebugValues", basepath);
	return hasValue;
}

const char * CWUSyntaxCheckRequest::getECL() { return m_ECL.query();}
const char * CWUSyntaxCheckRequest::getModuleName() { return m_ModuleName.query();}
const char * CWUSyntaxCheckRequest::getAttributeName() { return m_AttributeName.query();}
const char * CWUSyntaxCheckRequest::getQueue() { return m_Queue.query();}
const char * CWUSyntaxCheckRequest::getCluster() { return m_Cluster.query();}
const char * CWUSyntaxCheckRequest::getSnapshot() { return m_Snapshot.query();}
int CWUSyntaxCheckRequest::getTimeToWait() { return m_TimeToWait;}
IArrayOf<IConstDebugValue> & CWUSyntaxCheckRequest::getDebugValues() { return (IArrayOf<IConstDebugValue> &) m_DebugValues; }
void CWUSyntaxCheckRequest::setECL(const char * val){ m_ECL.set(val); }
void CWUSyntaxCheckRequest::setModuleName(const char * val){ m_ModuleName.set(val); }
void CWUSyntaxCheckRequest::setAttributeName(const char * val){ m_AttributeName.set(val); }
void CWUSyntaxCheckRequest::setQueue(const char * val){ m_Queue.set(val); }
void CWUSyntaxCheckRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUSyntaxCheckRequest::setSnapshot(const char * val){ m_Snapshot.set(val); }
void CWUSyntaxCheckRequest::setTimeToWait(int val){ m_TimeToWait=val; }
void CWUSyntaxCheckRequest::setDebugValues(IArrayOf<IEspDebugValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstDebugValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IEspDebugValue &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUSyntaxCheckRequest::setDebugValues(IArrayOf<IConstDebugValue> &val)
{
	m_DebugValues->kill();
	IArrayOf<IConstDebugValue> &target = m_DebugValues.getValue();
	ForEachItemIn(idx, val)
	{
		IConstDebugValue &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUSyntaxCheckRequest *createWUSyntaxCheckRequest(const char *serv){return ((IEspWUSyntaxCheckRequest *)new CWUSyntaxCheckRequest(serv));}
extern "C"  IClientWUSyntaxCheckRequest *createClientWUSyntaxCheckRequest(const char *serv){return ((IClientWUSyntaxCheckRequest *)new CWUSyntaxCheckRequest(serv));}

//=======================================================
// class CWUSyntaxCheckResponse Implementation
//=======================================================

CWUSyntaxCheckResponse::CWUSyntaxCheckResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Errors(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUSyntaxCheckResponse::CWUSyntaxCheckResponse(const char *serviceName, const char *bc)
	: m_Errors(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckResponse");
}

CWUSyntaxCheckResponse::CWUSyntaxCheckResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Errors(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUSyntaxCheckResponse::CWUSyntaxCheckResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Errors(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUSyntaxCheckResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUSyntaxCheckResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Errors\" type=\"tns:ArrayOfECLException\"/>\n");
		if (!context.suppressed("WUSyntaxCheckResponse","Message")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Message\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLException::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLException") && added.getValue("ArrayOfECLException")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLException\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLException\" type=\"tns:ECLException\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLException",1);
	}
	return schema;
}

void CWUSyntaxCheckResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUSyntaxCheckResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUSyntaxCheckResponse","Message",1.57);
	if (!added.getValue("ECLException"))
	{
		added.setValue("ECLException",1);
		CECLException::getMapInfo(info,added);
	}
}

StringBuffer &CWUSyntaxCheckResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Errors");
	form.appendf("<tr><td><b>Errors: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("WUSyntaxCheckResponse","Message")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Message");
		form.appendf("  <tr><td><b>Message: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUSyntaxCheckResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUSyntaxCheckResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Errors.marshall(rpc_resp, "Errors", "ECLException");
		if ((clientVer==-1.0 || clientVer>=1.57))
			m_Message.marshall(rpc_resp, "Message", "", "", "");
	}
}


void CWUSyntaxCheckResponse::copy(CWUSyntaxCheckResponse &from)
{
	m_Errors.copy(from.m_Errors);
	m_Message.copy(from.m_Message);
}


void CWUSyntaxCheckResponse::copy(IConstWUSyntaxCheckResponse &ifrom)
{
	setErrors(ifrom.getErrors());
	setMessage(ifrom.getMessage());
}


void CWUSyntaxCheckResponse::getAttributes(IProperties &attributes)
{
}


void CWUSyntaxCheckResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Errors.toStr(ctx, buffer, "Errors", "ECLException");
		if ((clientVer==-1.0 || clientVer>=1.57))
			m_Message.toStr(ctx, buffer, "Message", "", true, "", "");
	}
}


void CWUSyntaxCheckResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUSyntaxCheckResponse::serializer(IEspContext* ctx, IConstWUSyntaxCheckResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUSyntaxCheckResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Errors
	{
		IArrayOf<IConstECLException>& v = src.getErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<Errors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLException::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Errors>");
	}
	// field Message
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		const char* s = src.getMessage();
		if (s && *s)
		{
			buffer.append("<Message>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Message>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUSyntaxCheckResponse>");
}

bool CWUSyntaxCheckResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Errors.unmarshall(rpc_request, "Errors", basepath);
		hasValue |= m_Message.unmarshall(rpc_request, "Message", basepath);
	}
	return hasValue;
}

bool CWUSyntaxCheckResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Errors.unmarshall(ctx, soapval, "Errors");
	hasValue |= m_Message.unmarshall(ctx, soapval, "Message");
	return hasValue;
}

bool CWUSyntaxCheckResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Errors.unmarshall(ctx, params, attachments, "Errors", basepath);
	hasValue |= m_Message.unmarshall(ctx, params, attachments, "Message", basepath);
	return hasValue;
}

IArrayOf<IConstECLException> & CWUSyntaxCheckResponse::getErrors() { return (IArrayOf<IConstECLException> &) m_Errors; }
const char * CWUSyntaxCheckResponse::getMessage() { return m_Message.query();}
void CWUSyntaxCheckResponse::setErrors(IArrayOf<IEspECLException> &val)
{
	m_Errors->kill();
	IArrayOf<IConstECLException> &target = m_Errors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLException &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUSyntaxCheckResponse::setErrors(IArrayOf<IConstECLException> &val)
{
	m_Errors->kill();
	IArrayOf<IConstECLException> &target = m_Errors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLException &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUSyntaxCheckResponse::setMessage(const char * val){ m_Message.set(val); }
extern "C"  IEspWUSyntaxCheckResponse *createWUSyntaxCheckResponse(const char *serv){return ((IEspWUSyntaxCheckResponse *)new CWUSyntaxCheckResponse(serv));}
extern "C"  IClientWUSyntaxCheckResponse *createClientWUSyntaxCheckResponse(const char *serv){return ((IClientWUSyntaxCheckResponse *)new CWUSyntaxCheckResponse(serv));}

//=======================================================
// class CWUCompileECLRequest Implementation
//=======================================================

CWUCompileECLRequest::CWUCompileECLRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_IncludeDependencies(0, nilIgnore,false),m_IncludeComplexity(nilIgnore),m_TimeToWait(60000, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCompileECLRequest::CWUCompileECLRequest(const char *serviceName, const char *bc)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_IncludeDependencies(0, nilIgnore,false),m_IncludeComplexity(nilIgnore),m_TimeToWait(60000, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLRequest");
}

CWUCompileECLRequest::CWUCompileECLRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_IncludeDependencies(0, nilIgnore,false),m_IncludeComplexity(nilIgnore),m_TimeToWait(60000, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCompileECLRequest::CWUCompileECLRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ECL(nilIgnore),m_ModuleName(nilIgnore),m_AttributeName(nilIgnore),m_Queue(nilIgnore),m_Cluster(nilIgnore),m_Snapshot(nilIgnore),m_IncludeDependencies(0, nilIgnore,false),m_IncludeComplexity(nilIgnore),m_TimeToWait(60000, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCompileECLRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ECL\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ModuleName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"AttributeName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Snapshot\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeDependencies\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IncludeComplexity\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"60000\" name=\"TimeToWait\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUCompileECLRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCompileECLRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUCompileECLRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ECL");
	form.appendf("  <tr><td><b>ECL: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ModuleName");
	form.appendf("  <tr><td><b>ModuleName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AttributeName");
	form.appendf("  <tr><td><b>AttributeName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queue");
	form.appendf("  <tr><td><b>Queue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Snapshot");
	form.appendf("  <tr><td><b>Snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeDependencies");
	
	form.appendf("  <tr><td><b>IncludeDependencies? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeComplexity");
	
	form.appendf("  <tr><td><b>IncludeComplexity? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeToWait");
	form.appendf("  <tr><td><b>TimeToWait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"60000\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCompileECLRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCompileECLRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ECL.marshall(rpc_resp, "ECL", "", "", "");
	m_ModuleName.marshall(rpc_resp, "ModuleName", "", "", "");
	m_AttributeName.marshall(rpc_resp, "AttributeName", "", "", "");
	m_Queue.marshall(rpc_resp, "Queue", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Snapshot.marshall(rpc_resp, "Snapshot", "", "", "");
	m_IncludeDependencies.marshall(rpc_resp, "IncludeDependencies", "", "", "");
	m_IncludeComplexity.marshall(rpc_resp, "IncludeComplexity", "", "", "");
	m_TimeToWait.marshall(rpc_resp, "TimeToWait", "", "", "");
}


void CWUCompileECLRequest::copy(CWUCompileECLRequest &from)
{
	m_ECL.copy(from.m_ECL);
	m_ModuleName.copy(from.m_ModuleName);
	m_AttributeName.copy(from.m_AttributeName);
	m_Queue.copy(from.m_Queue);
	m_Cluster.copy(from.m_Cluster);
	m_Snapshot.copy(from.m_Snapshot);
	m_IncludeDependencies.copy(from.m_IncludeDependencies);
	m_IncludeComplexity.copy(from.m_IncludeComplexity);
	m_TimeToWait.copy(from.m_TimeToWait);
}


void CWUCompileECLRequest::copy(IConstWUCompileECLRequest &ifrom)
{
	setECL(ifrom.getECL());
	setModuleName(ifrom.getModuleName());
	setAttributeName(ifrom.getAttributeName());
	setQueue(ifrom.getQueue());
	setCluster(ifrom.getCluster());
	setSnapshot(ifrom.getSnapshot());
	setIncludeDependencies(ifrom.getIncludeDependencies());
	setIncludeComplexity(ifrom.getIncludeComplexity());
	setTimeToWait(ifrom.getTimeToWait());
}


void CWUCompileECLRequest::getAttributes(IProperties &attributes)
{
}


void CWUCompileECLRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ECL.toStr(ctx, buffer, "ECL", "", true, "", "");
	m_ModuleName.toStr(ctx, buffer, "ModuleName", "", true, "", "");
	m_AttributeName.toStr(ctx, buffer, "AttributeName", "", true, "", "");
	m_Queue.toStr(ctx, buffer, "Queue", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Snapshot.toStr(ctx, buffer, "Snapshot", "", true, "", "");
	m_IncludeDependencies.toStr(ctx, buffer, "IncludeDependencies", "", true, "", "");
	m_IncludeComplexity.toStr(ctx, buffer, "IncludeComplexity", "", true, "", "");
	m_TimeToWait.toStr(ctx, buffer, "TimeToWait", "", true, "", "");
}


void CWUCompileECLRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCompileECLRequest::serializer(IEspContext* ctx, IConstWUCompileECLRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCompileECLRequest>");
	// field ECL
	{
		const char* s = src.getECL();
		if (s && *s)
		{
			buffer.append("<ECL>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ECL>");
		}
	}
	// field ModuleName
	{
		const char* s = src.getModuleName();
		if (s && *s)
		{
			buffer.append("<ModuleName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ModuleName>");
		}
	}
	// field AttributeName
	{
		const char* s = src.getAttributeName();
		if (s && *s)
		{
			buffer.append("<AttributeName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</AttributeName>");
		}
	}
	// field Queue
	{
		const char* s = src.getQueue();
		if (s && *s)
		{
			buffer.append("<Queue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Queue>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Snapshot
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<Snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Snapshot>");
		}
	}
	// field IncludeDependencies
	{
		bool b = src.getIncludeDependencies();
		if (b)
			buffer.appendf("<IncludeDependencies>1</IncludeDependencies>");
	}
	// field IncludeComplexity
	{
		bool b = src.getIncludeComplexity();
		if (b)
			buffer.appendf("<IncludeComplexity>1</IncludeComplexity>");
	}
	// field TimeToWait
	{
		int n = src.getTimeToWait();
		if (n)
			buffer.appendf("<TimeToWait>%d</TimeToWait>", n);
	}
	if (keepRootTag)
		buffer.append("</WUCompileECLRequest>");
}

bool CWUCompileECLRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ECL.unmarshall(rpc_request, "ECL", basepath);
	hasValue |= m_ModuleName.unmarshall(rpc_request, "ModuleName", basepath);
	hasValue |= m_AttributeName.unmarshall(rpc_request, "AttributeName", basepath);
	hasValue |= m_Queue.unmarshall(rpc_request, "Queue", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Snapshot.unmarshall(rpc_request, "Snapshot", basepath);
	hasValue |= m_IncludeDependencies.unmarshall(rpc_request, "IncludeDependencies", basepath);
	hasValue |= m_IncludeComplexity.unmarshall(rpc_request, "IncludeComplexity", basepath);
	hasValue |= m_TimeToWait.unmarshall(rpc_request, "TimeToWait", basepath);
	return hasValue;
}

bool CWUCompileECLRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ECL.unmarshall(ctx, soapval, "ECL");
	hasValue |= m_ModuleName.unmarshall(ctx, soapval, "ModuleName");
	hasValue |= m_AttributeName.unmarshall(ctx, soapval, "AttributeName");
	hasValue |= m_Queue.unmarshall(ctx, soapval, "Queue");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Snapshot.unmarshall(ctx, soapval, "Snapshot");
	hasValue |= m_IncludeDependencies.unmarshall(ctx, soapval, "IncludeDependencies");
	hasValue |= m_IncludeComplexity.unmarshall(ctx, soapval, "IncludeComplexity");
	hasValue |= m_TimeToWait.unmarshall(ctx, soapval, "TimeToWait");
	return hasValue;
}

bool CWUCompileECLRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ECL.unmarshall(ctx, params, attachments, "ECL", basepath);
	hasValue |= m_ModuleName.unmarshall(ctx, params, attachments, "ModuleName", basepath);
	hasValue |= m_AttributeName.unmarshall(ctx, params, attachments, "AttributeName", basepath);
	hasValue |= m_Queue.unmarshall(ctx, params, attachments, "Queue", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Snapshot.unmarshall(ctx, params, attachments, "Snapshot", basepath);
	hasValue |= m_IncludeDependencies.unmarshall(ctx, params, attachments, "IncludeDependencies", basepath);
	hasValue |= m_IncludeComplexity.unmarshall(ctx, params, attachments, "IncludeComplexity", basepath);
	hasValue |= m_TimeToWait.unmarshall(ctx, params, attachments, "TimeToWait", basepath);
	return hasValue;
}

const char * CWUCompileECLRequest::getECL() { return m_ECL.query();}
const char * CWUCompileECLRequest::getModuleName() { return m_ModuleName.query();}
const char * CWUCompileECLRequest::getAttributeName() { return m_AttributeName.query();}
const char * CWUCompileECLRequest::getQueue() { return m_Queue.query();}
const char * CWUCompileECLRequest::getCluster() { return m_Cluster.query();}
const char * CWUCompileECLRequest::getSnapshot() { return m_Snapshot.query();}
bool CWUCompileECLRequest::getIncludeDependencies() { return m_IncludeDependencies;}
bool CWUCompileECLRequest::getIncludeComplexity() { return m_IncludeComplexity;}
int CWUCompileECLRequest::getTimeToWait() { return m_TimeToWait;}
void CWUCompileECLRequest::setECL(const char * val){ m_ECL.set(val); }
void CWUCompileECLRequest::setModuleName(const char * val){ m_ModuleName.set(val); }
void CWUCompileECLRequest::setAttributeName(const char * val){ m_AttributeName.set(val); }
void CWUCompileECLRequest::setQueue(const char * val){ m_Queue.set(val); }
void CWUCompileECLRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUCompileECLRequest::setSnapshot(const char * val){ m_Snapshot.set(val); }
void CWUCompileECLRequest::setIncludeDependencies(bool val){ m_IncludeDependencies=val; }
void CWUCompileECLRequest::setIncludeComplexity(bool val){ m_IncludeComplexity=val; }
void CWUCompileECLRequest::setTimeToWait(int val){ m_TimeToWait=val; }
extern "C"  IEspWUCompileECLRequest *createWUCompileECLRequest(const char *serv){return ((IEspWUCompileECLRequest *)new CWUCompileECLRequest(serv));}
extern "C"  IClientWUCompileECLRequest *createClientWUCompileECLRequest(const char *serv){return ((IClientWUCompileECLRequest *)new CWUCompileECLRequest(serv));}

//=======================================================
// class CWUCompileECLResponse Implementation
//=======================================================

CWUCompileECLResponse::CWUCompileECLResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Complexity(nilIgnore),m_Errors(nilIgnore),m_Dependencies(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCompileECLResponse::CWUCompileECLResponse(const char *serviceName, const char *bc)
	: m_Complexity(nilIgnore),m_Errors(nilIgnore),m_Dependencies(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLResponse");
}

CWUCompileECLResponse::CWUCompileECLResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Complexity(nilIgnore),m_Errors(nilIgnore),m_Dependencies(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCompileECLResponse::CWUCompileECLResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Complexity(nilIgnore),m_Errors(nilIgnore),m_Dependencies(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCompileECLResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCompileECLResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Complexity\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Errors\" type=\"tns:ArrayOfECLException\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Dependencies\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLAttribute\" type=\"tns:WUECLAttribute\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLException::getXsdDefinition(context, request, schema, added);
		CWUECLAttribute::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLException") && added.getValue("ArrayOfECLException")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLException\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLException\" type=\"tns:ECLException\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLException",1);
	}
	return schema;
}

void CWUCompileECLResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCompileECLResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLException"))
	{
		added.setValue("ECLException",1);
		CECLException::getMapInfo(info,added);
	}
	if (!added.getValue("WUECLAttribute"))
	{
		added.setValue("WUECLAttribute",1);
		CWUECLAttribute::getMapInfo(info,added);
	}
}

StringBuffer &CWUCompileECLResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Complexity");
	form.appendf("  <tr><td><b>Complexity: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Errors");
	form.appendf("<tr><td><b>Errors: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Dependencies");
	form.appendf("<tr><td><b>Dependencies: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCompileECLResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCompileECLResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Complexity.marshall(rpc_resp, "Complexity", "", "", "");
		m_Errors.marshall(rpc_resp, "Errors", "ECLException");
		m_Dependencies.marshall(rpc_resp, "Dependencies", "ECLAttribute");
	}
}


void CWUCompileECLResponse::copy(CWUCompileECLResponse &from)
{
	m_Complexity.copy(from.m_Complexity);
	m_Errors.copy(from.m_Errors);
	m_Dependencies.copy(from.m_Dependencies);
}


void CWUCompileECLResponse::copy(IConstWUCompileECLResponse &ifrom)
{
	setComplexity(ifrom.getComplexity());
	setErrors(ifrom.getErrors());
	setDependencies(ifrom.getDependencies());
}


void CWUCompileECLResponse::getAttributes(IProperties &attributes)
{
}


void CWUCompileECLResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Complexity.toStr(ctx, buffer, "Complexity", "", true, "", "");
		m_Errors.toStr(ctx, buffer, "Errors", "ECLException");
		m_Dependencies.toStr(ctx, buffer, "Dependencies", "ECLAttribute");
	}
}


void CWUCompileECLResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCompileECLResponse::serializer(IEspContext* ctx, IConstWUCompileECLResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCompileECLResponse>");
	// field Complexity
	{
		const char* s = src.getComplexity();
		if (s && *s)
		{
			buffer.append("<Complexity>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Complexity>");
		}
	}
	// field Errors
	{
		IArrayOf<IConstECLException>& v = src.getErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<Errors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLException::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Errors>");
	}
	// field Dependencies
	{
		IArrayOf<IConstWUECLAttribute>& v = src.getDependencies();
		int size = v.length();
		if (size>0)
			buffer.append("<Dependencies>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<ECLAttribute>");
			CWUECLAttribute::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</ECLAttribute>");
		}
		if (size>0)
			buffer.append("</Dependencies>");
	}
	if (keepRootTag)
		buffer.append("</WUCompileECLResponse>");
}

bool CWUCompileECLResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Complexity.unmarshall(rpc_request, "Complexity", basepath);
		hasValue |= m_Errors.unmarshall(rpc_request, "Errors", basepath);
		hasValue |= m_Dependencies.unmarshall(rpc_request, "Dependencies", basepath);
	}
	return hasValue;
}

bool CWUCompileECLResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Complexity.unmarshall(ctx, soapval, "Complexity");
	hasValue |= m_Errors.unmarshall(ctx, soapval, "Errors");
	hasValue |= m_Dependencies.unmarshall(ctx, soapval, "Dependencies");
	return hasValue;
}

bool CWUCompileECLResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Complexity.unmarshall(ctx, params, attachments, "Complexity", basepath);
	hasValue |= m_Errors.unmarshall(ctx, params, attachments, "Errors", basepath);
	hasValue |= m_Dependencies.unmarshall(ctx, params, attachments, "Dependencies", basepath);
	return hasValue;
}

const char * CWUCompileECLResponse::getComplexity() { return m_Complexity.query();}
IArrayOf<IConstECLException> & CWUCompileECLResponse::getErrors() { return (IArrayOf<IConstECLException> &) m_Errors; }
IArrayOf<IConstWUECLAttribute> & CWUCompileECLResponse::getDependencies() { return (IArrayOf<IConstWUECLAttribute> &) m_Dependencies; }
void CWUCompileECLResponse::setComplexity(const char * val){ m_Complexity.set(val); }
void CWUCompileECLResponse::setErrors(IArrayOf<IEspECLException> &val)
{
	m_Errors->kill();
	IArrayOf<IConstECLException> &target = m_Errors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLException &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCompileECLResponse::setErrors(IArrayOf<IConstECLException> &val)
{
	m_Errors->kill();
	IArrayOf<IConstECLException> &target = m_Errors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLException &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCompileECLResponse::setDependencies(IArrayOf<IEspWUECLAttribute> &val)
{
	m_Dependencies->kill();
	IArrayOf<IConstWUECLAttribute> &target = m_Dependencies.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUECLAttribute &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCompileECLResponse::setDependencies(IArrayOf<IConstWUECLAttribute> &val)
{
	m_Dependencies->kill();
	IArrayOf<IConstWUECLAttribute> &target = m_Dependencies.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUECLAttribute &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUCompileECLResponse *createWUCompileECLResponse(const char *serv){return ((IEspWUCompileECLResponse *)new CWUCompileECLResponse(serv));}
extern "C"  IClientWUCompileECLResponse *createClientWUCompileECLResponse(const char *serv){return ((IClientWUCompileECLResponse *)new CWUCompileECLResponse(serv));}

//=======================================================
// class CWUJobListRequest Implementation
//=======================================================

CWUJobListRequest::CWUJobListRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_Process(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartHour(nilIgnore),m_BusinessEndHour(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUJobListRequest::CWUJobListRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_Process(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartHour(nilIgnore),m_BusinessEndHour(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListRequest");
}

CWUJobListRequest::CWUJobListRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore),m_Process(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartHour(nilIgnore),m_BusinessEndHour(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUJobListRequest::CWUJobListRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore),m_Process(nilIgnore),m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_ShowAll(nilIgnore),m_BusinessStartHour(nilIgnore),m_BusinessEndHour(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUJobListRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUJobListRequest","Process")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Process\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ShowAll\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BusinessStartHour\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BusinessEndHour\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUJobListRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUJobListRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUJobListRequest","Process",1.5);
}

StringBuffer &CWUJobListRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUJobListRequest","Process")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Process");
		form.appendf("  <tr><td><b>Process: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ShowAll");
	
	form.appendf("  <tr><td><b>ShowAll? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("BusinessStartHour");
	form.appendf("  <tr><td><b>BusinessStartHour: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("BusinessEndHour");
	form.appendf("  <tr><td><b>BusinessEndHour: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUJobListRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUJobListRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_Process.marshall(rpc_resp, "Process", "", "", "");
	m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
	m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
	m_ShowAll.marshall(rpc_resp, "ShowAll", "", "", "");
	m_BusinessStartHour.marshall(rpc_resp, "BusinessStartHour", "", "", "");
	m_BusinessEndHour.marshall(rpc_resp, "BusinessEndHour", "", "", "");
}


void CWUJobListRequest::copy(CWUJobListRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_Process.copy(from.m_Process);
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_ShowAll.copy(from.m_ShowAll);
	m_BusinessStartHour.copy(from.m_BusinessStartHour);
	m_BusinessEndHour.copy(from.m_BusinessEndHour);
}


void CWUJobListRequest::copy(IConstWUJobListRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setProcess(ifrom.getProcess());
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setShowAll(ifrom.getShowAll());
	setBusinessStartHour(ifrom.getBusinessStartHour());
	setBusinessEndHour(ifrom.getBusinessEndHour());
}


void CWUJobListRequest::getAttributes(IProperties &attributes)
{
}


void CWUJobListRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_Process.toStr(ctx, buffer, "Process", "", true, "", "");
	m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
	m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
	m_ShowAll.toStr(ctx, buffer, "ShowAll", "", true, "", "");
	m_BusinessStartHour.toStr(ctx, buffer, "BusinessStartHour", "", true, "", "");
	m_BusinessEndHour.toStr(ctx, buffer, "BusinessEndHour", "", true, "", "");
}


void CWUJobListRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUJobListRequest::serializer(IEspContext* ctx, IConstWUJobListRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUJobListRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Process
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		const char* s = src.getProcess();
		if (s && *s)
		{
			buffer.append("<Process>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Process>");
		}
	}
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field ShowAll
	{
		bool b = src.getShowAll();
		if (b)
			buffer.appendf("<ShowAll>1</ShowAll>");
	}
	// field BusinessStartHour
	{
		int n = src.getBusinessStartHour();
		if (n)
			buffer.appendf("<BusinessStartHour>%d</BusinessStartHour>", n);
	}
	// field BusinessEndHour
	{
		int n = src.getBusinessEndHour();
		if (n)
			buffer.appendf("<BusinessEndHour>%d</BusinessEndHour>", n);
	}
	if (keepRootTag)
		buffer.append("</WUJobListRequest>");
}

bool CWUJobListRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Process.unmarshall(rpc_request, "Process", basepath);
	hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
	hasValue |= m_ShowAll.unmarshall(rpc_request, "ShowAll", basepath);
	hasValue |= m_BusinessStartHour.unmarshall(rpc_request, "BusinessStartHour", basepath);
	hasValue |= m_BusinessEndHour.unmarshall(rpc_request, "BusinessEndHour", basepath);
	return hasValue;
}

bool CWUJobListRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Process.unmarshall(ctx, soapval, "Process");
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_ShowAll.unmarshall(ctx, soapval, "ShowAll");
	hasValue |= m_BusinessStartHour.unmarshall(ctx, soapval, "BusinessStartHour");
	hasValue |= m_BusinessEndHour.unmarshall(ctx, soapval, "BusinessEndHour");
	return hasValue;
}

bool CWUJobListRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Process.unmarshall(ctx, params, attachments, "Process", basepath);
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_ShowAll.unmarshall(ctx, params, attachments, "ShowAll", basepath);
	hasValue |= m_BusinessStartHour.unmarshall(ctx, params, attachments, "BusinessStartHour", basepath);
	hasValue |= m_BusinessEndHour.unmarshall(ctx, params, attachments, "BusinessEndHour", basepath);
	return hasValue;
}

const char * CWUJobListRequest::getCluster() { return m_Cluster.query();}
const char * CWUJobListRequest::getProcess() { return m_Process.query();}
const char * CWUJobListRequest::getStartDate() { return m_StartDate.query();}
const char * CWUJobListRequest::getEndDate() { return m_EndDate.query();}
bool CWUJobListRequest::getShowAll() { return m_ShowAll;}
int CWUJobListRequest::getBusinessStartHour() { return m_BusinessStartHour;}
int CWUJobListRequest::getBusinessEndHour() { return m_BusinessEndHour;}
void CWUJobListRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUJobListRequest::setProcess(const char * val){ m_Process.set(val); }
void CWUJobListRequest::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUJobListRequest::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUJobListRequest::setShowAll(bool val){ m_ShowAll=val; }
void CWUJobListRequest::setBusinessStartHour(int val){ m_BusinessStartHour=val; }
void CWUJobListRequest::setBusinessEndHour(int val){ m_BusinessEndHour=val; }
extern "C"  IEspWUJobListRequest *createWUJobListRequest(const char *serv){return ((IEspWUJobListRequest *)new CWUJobListRequest(serv));}
extern "C"  IClientWUJobListRequest *createClientWUJobListRequest(const char *serv){return ((IClientWUJobListRequest *)new CWUJobListRequest(serv));}

//=======================================================
// class CWUJobListResponse Implementation
//=======================================================

CWUJobListResponse::CWUJobListResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_Jobs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUJobListResponse::CWUJobListResponse(const char *serviceName, const char *bc)
	: m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_Jobs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListResponse");
}

CWUJobListResponse::CWUJobListResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_Jobs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUJobListResponse::CWUJobListResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_StartDate(nilIgnore),m_EndDate(nilIgnore),m_Jobs(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUJobListResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUJobListResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"StartDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"EndDate\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Jobs\" type=\"tns:ArrayOfECLJob\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLJob::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLJob") && added.getValue("ArrayOfECLJob")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLJob\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLJob\" type=\"tns:ECLJob\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLJob",1);
	}
	return schema;
}

void CWUJobListResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUJobListResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLJob"))
	{
		added.setValue("ECLJob",1);
		CECLJob::getMapInfo(info,added);
	}
}

StringBuffer &CWUJobListResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("StartDate");
	form.appendf("  <tr><td><b>StartDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EndDate");
	form.appendf("  <tr><td><b>EndDate: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Jobs");
	form.appendf("<tr><td><b>Jobs: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUJobListResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUJobListResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_StartDate.marshall(rpc_resp, "StartDate", "", "", "");
		m_EndDate.marshall(rpc_resp, "EndDate", "", "", "");
		m_Jobs.marshall(rpc_resp, "Jobs", "ECLJob");
	}
}


void CWUJobListResponse::copy(CWUJobListResponse &from)
{
	m_StartDate.copy(from.m_StartDate);
	m_EndDate.copy(from.m_EndDate);
	m_Jobs.copy(from.m_Jobs);
}


void CWUJobListResponse::copy(IConstWUJobListResponse &ifrom)
{
	setStartDate(ifrom.getStartDate());
	setEndDate(ifrom.getEndDate());
	setJobs(ifrom.getJobs());
}


void CWUJobListResponse::getAttributes(IProperties &attributes)
{
}


void CWUJobListResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_StartDate.toStr(ctx, buffer, "StartDate", "", true, "", "");
		m_EndDate.toStr(ctx, buffer, "EndDate", "", true, "", "");
		m_Jobs.toStr(ctx, buffer, "Jobs", "ECLJob");
	}
}


void CWUJobListResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUJobListResponse::serializer(IEspContext* ctx, IConstWUJobListResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUJobListResponse>");
	// field StartDate
	{
		const char* s = src.getStartDate();
		if (s && *s)
		{
			buffer.append("<StartDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</StartDate>");
		}
	}
	// field EndDate
	{
		const char* s = src.getEndDate();
		if (s && *s)
		{
			buffer.append("<EndDate>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EndDate>");
		}
	}
	// field Jobs
	{
		IArrayOf<IConstECLJob>& v = src.getJobs();
		int size = v.length();
		if (size>0)
			buffer.append("<Jobs>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLJob::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Jobs>");
	}
	if (keepRootTag)
		buffer.append("</WUJobListResponse>");
}

bool CWUJobListResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_StartDate.unmarshall(rpc_request, "StartDate", basepath);
		hasValue |= m_EndDate.unmarshall(rpc_request, "EndDate", basepath);
		hasValue |= m_Jobs.unmarshall(rpc_request, "Jobs", basepath);
	}
	return hasValue;
}

bool CWUJobListResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_StartDate.unmarshall(ctx, soapval, "StartDate");
	hasValue |= m_EndDate.unmarshall(ctx, soapval, "EndDate");
	hasValue |= m_Jobs.unmarshall(ctx, soapval, "Jobs");
	return hasValue;
}

bool CWUJobListResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_StartDate.unmarshall(ctx, params, attachments, "StartDate", basepath);
	hasValue |= m_EndDate.unmarshall(ctx, params, attachments, "EndDate", basepath);
	hasValue |= m_Jobs.unmarshall(ctx, params, attachments, "Jobs", basepath);
	return hasValue;
}

const char * CWUJobListResponse::getStartDate() { return m_StartDate.query();}
const char * CWUJobListResponse::getEndDate() { return m_EndDate.query();}
IArrayOf<IConstECLJob> & CWUJobListResponse::getJobs() { return (IArrayOf<IConstECLJob> &) m_Jobs; }
void CWUJobListResponse::setStartDate(const char * val){ m_StartDate.set(val); }
void CWUJobListResponse::setEndDate(const char * val){ m_EndDate.set(val); }
void CWUJobListResponse::setJobs(IArrayOf<IEspECLJob> &val)
{
	m_Jobs->kill();
	IArrayOf<IConstECLJob> &target = m_Jobs.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLJob &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUJobListResponse::setJobs(IArrayOf<IConstECLJob> &val)
{
	m_Jobs->kill();
	IArrayOf<IConstECLJob> &target = m_Jobs.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLJob &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUJobListResponse *createWUJobListResponse(const char *serv){return ((IEspWUJobListResponse *)new CWUJobListResponse(serv));}
extern "C"  IClientWUJobListResponse *createClientWUJobListResponse(const char *serv){return ((IClientWUJobListResponse *)new CWUJobListResponse(serv));}

//=======================================================
// class CWUShowScheduledRequest Implementation
//=======================================================

CWUShowScheduledRequest::CWUShowScheduledRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster("", nilRemove),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_State("", nilRemove),m_JobName("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUShowScheduledRequest::CWUShowScheduledRequest(const char *serviceName, const char *bc)
	: m_Cluster("", nilRemove),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_State("", nilRemove),m_JobName("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledRequest");
}

CWUShowScheduledRequest::CWUShowScheduledRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster("", nilRemove),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_State("", nilRemove),m_JobName("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUShowScheduledRequest::CWUShowScheduledRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster("", nilRemove),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_State("", nilRemove),m_JobName("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUShowScheduledRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"PushEventName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"PushEventText\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUShowScheduledRequest","State")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"State\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUShowScheduledRequest","JobName")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"JobName\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUShowScheduledRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUShowScheduledRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUShowScheduledRequest","State",1.51);
	info.addMinVersion("WUShowScheduledRequest","JobName",1.71);
}

StringBuffer &CWUShowScheduledRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventName");
	form.appendf("  <tr><td><b>EventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PushEventName");
	form.appendf("  <tr><td><b>PushEventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PushEventText");
	form.appendf("  <tr><td><b>PushEventText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUShowScheduledRequest","State")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("State");
		form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUShowScheduledRequest","JobName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("JobName");
		form.appendf("  <tr><td><b>JobName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUShowScheduledRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUShowScheduledRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_EventName.marshall(rpc_resp, "EventName", "", "", "");
	m_PushEventName.marshall(rpc_resp, "PushEventName", "", "", "");
	m_PushEventText.marshall(rpc_resp, "PushEventText", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_State.marshall(rpc_resp, "State", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.71))
		m_JobName.marshall(rpc_resp, "JobName", "", "", "");
}


void CWUShowScheduledRequest::copy(CWUShowScheduledRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_EventName.copy(from.m_EventName);
	m_PushEventName.copy(from.m_PushEventName);
	m_PushEventText.copy(from.m_PushEventText);
	m_State.copy(from.m_State);
	m_JobName.copy(from.m_JobName);
}


void CWUShowScheduledRequest::copy(IConstWUShowScheduledRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setEventName(ifrom.getEventName());
	setPushEventName(ifrom.getPushEventName());
	setPushEventText(ifrom.getPushEventText());
	setState(ifrom.getState());
	setJobName(ifrom.getJobName());
}


void CWUShowScheduledRequest::getAttributes(IProperties &attributes)
{
}


void CWUShowScheduledRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_EventName.toStr(ctx, buffer, "EventName", "", true, "", "");
	m_PushEventName.toStr(ctx, buffer, "PushEventName", "", true, "", "");
	m_PushEventText.toStr(ctx, buffer, "PushEventText", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_State.toStr(ctx, buffer, "State", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.71))
		m_JobName.toStr(ctx, buffer, "JobName", "", true, "", "");
}


void CWUShowScheduledRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUShowScheduledRequest::serializer(IEspContext* ctx, IConstWUShowScheduledRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUShowScheduledRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field EventName
	{
		const char* s = src.getEventName();
		if (s && *s)
		{
			buffer.append("<EventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventName>");
		}
	}
	// field PushEventName
	{
		const char* s = src.getPushEventName();
		if (s && *s)
		{
			buffer.append("<PushEventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PushEventName>");
		}
	}
	// field PushEventText
	{
		const char* s = src.getPushEventText();
		if (s && *s)
		{
			buffer.append("<PushEventText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PushEventText>");
		}
	}
	// field State
	if ((clientVer==-1.0 || clientVer>=1.51))
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field JobName
	if ((clientVer==-1.0 || clientVer>=1.71))
	{
		const char* s = src.getJobName();
		if (s && *s)
		{
			buffer.append("<JobName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobName>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUShowScheduledRequest>");
}

bool CWUShowScheduledRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_EventName.unmarshall(rpc_request, "EventName", basepath);
	hasValue |= m_PushEventName.unmarshall(rpc_request, "PushEventName", basepath);
	hasValue |= m_PushEventText.unmarshall(rpc_request, "PushEventText", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_JobName.unmarshall(rpc_request, "JobName", basepath);
	return hasValue;
}

bool CWUShowScheduledRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_EventName.unmarshall(ctx, soapval, "EventName");
	hasValue |= m_PushEventName.unmarshall(ctx, soapval, "PushEventName");
	hasValue |= m_PushEventText.unmarshall(ctx, soapval, "PushEventText");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_JobName.unmarshall(ctx, soapval, "JobName");
	return hasValue;
}

bool CWUShowScheduledRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_EventName.unmarshall(ctx, params, attachments, "EventName", basepath);
	hasValue |= m_PushEventName.unmarshall(ctx, params, attachments, "PushEventName", basepath);
	hasValue |= m_PushEventText.unmarshall(ctx, params, attachments, "PushEventText", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_JobName.unmarshall(ctx, params, attachments, "JobName", basepath);
	return hasValue;
}

const char * CWUShowScheduledRequest::getCluster() { return m_Cluster.query();}
const char * CWUShowScheduledRequest::getEventName() { return m_EventName.query();}
const char * CWUShowScheduledRequest::getPushEventName() { return m_PushEventName.query();}
const char * CWUShowScheduledRequest::getPushEventText() { return m_PushEventText.query();}
const char * CWUShowScheduledRequest::getState() { return m_State.query();}
const char * CWUShowScheduledRequest::getJobName() { return m_JobName.query();}
void CWUShowScheduledRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUShowScheduledRequest::setEventName(const char * val){ m_EventName.set(val); }
void CWUShowScheduledRequest::setPushEventName(const char * val){ m_PushEventName.set(val); }
void CWUShowScheduledRequest::setPushEventText(const char * val){ m_PushEventText.set(val); }
void CWUShowScheduledRequest::setState(const char * val){ m_State.set(val); }
void CWUShowScheduledRequest::setJobName(const char * val){ m_JobName.set(val); }
extern "C"  IEspWUShowScheduledRequest *createWUShowScheduledRequest(const char *serv){return ((IEspWUShowScheduledRequest *)new CWUShowScheduledRequest(serv));}
extern "C"  IClientWUShowScheduledRequest *createClientWUShowScheduledRequest(const char *serv){return ((IClientWUShowScheduledRequest *)new CWUShowScheduledRequest(serv));}

//=======================================================
// class CScheduledWU Implementation
//=======================================================

CScheduledWU::CScheduledWU(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Cluster("", nilRemove),m_EventName("", nilRemove),m_EventText("", nilRemove),m_JobName("", nilRemove),m_StateID(nilRemove),m_State("", nilRemove),m_Owner("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ScheduledWU");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CScheduledWU::CScheduledWU(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Cluster("", nilRemove),m_EventName("", nilRemove),m_EventText("", nilRemove),m_JobName("", nilRemove),m_StateID(nilRemove),m_State("", nilRemove),m_Owner("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ScheduledWU");
}

StringBuffer &CScheduledWU::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventText\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"JobName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ScheduledWU","StateID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"StateID\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("ScheduledWU","State")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"State\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ScheduledWU","Owner")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"Owner\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CScheduledWU::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CScheduledWU::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ScheduledWU","StateID",1.51);
	info.addMinVersion("ScheduledWU","State",1.51);
	info.addMinVersion("ScheduledWU","Owner",1.51);
}

StringBuffer &CScheduledWU::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventName");
	form.appendf("  <tr><td><b>EventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventText");
	form.appendf("  <tr><td><b>EventText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobName");
	form.appendf("  <tr><td><b>JobName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ScheduledWU","StateID")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("StateID");
		form.appendf("  <tr><td><b>StateID: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ScheduledWU","State")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("State");
		form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ScheduledWU","Owner")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Owner");
		form.appendf("  <tr><td><b>Owner: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CScheduledWU::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CScheduledWU::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_EventName.marshall(rpc_resp, "EventName", "", "", "");
	m_EventText.marshall(rpc_resp, "EventText", "", "", "");
	m_JobName.marshall(rpc_resp, "JobName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_StateID.marshall(rpc_resp, "StateID", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_State.marshall(rpc_resp, "State", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_Owner.marshall(rpc_resp, "Owner", "", "", "");
}


void CScheduledWU::copy(CScheduledWU &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Cluster.copy(from.m_Cluster);
	m_EventName.copy(from.m_EventName);
	m_EventText.copy(from.m_EventText);
	m_JobName.copy(from.m_JobName);
	m_StateID.copy(from.m_StateID);
	m_State.copy(from.m_State);
	m_Owner.copy(from.m_Owner);
}


void CScheduledWU::copy(IConstScheduledWU &ifrom)
{
	setWuid(ifrom.getWuid());
	setCluster(ifrom.getCluster());
	setEventName(ifrom.getEventName());
	setEventText(ifrom.getEventText());
	setJobName(ifrom.getJobName());
	setStateID(ifrom.getStateID());
	setState(ifrom.getState());
	setOwner(ifrom.getOwner());
}


void CScheduledWU::getAttributes(IProperties &attributes)
{
}


void CScheduledWU::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_EventName.toStr(ctx, buffer, "EventName", "", true, "", "");
	m_EventText.toStr(ctx, buffer, "EventText", "", true, "", "");
	m_JobName.toStr(ctx, buffer, "JobName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_StateID.toStr(ctx, buffer, "StateID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_State.toStr(ctx, buffer, "State", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_Owner.toStr(ctx, buffer, "Owner", "", true, "", "");
}


void CScheduledWU::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CScheduledWU::serializer(IEspContext* ctx, IConstScheduledWU &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ScheduledWU>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field EventName
	{
		const char* s = src.getEventName();
		if (s && *s)
		{
			buffer.append("<EventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventName>");
		}
	}
	// field EventText
	{
		const char* s = src.getEventText();
		if (s && *s)
		{
			buffer.append("<EventText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventText>");
		}
	}
	// field JobName
	{
		const char* s = src.getJobName();
		if (s && *s)
		{
			buffer.append("<JobName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobName>");
		}
	}
	// field StateID
	if ((clientVer==-1.0 || clientVer>=1.51))
	{
		int n = src.getStateID();
		if (n)
			buffer.appendf("<StateID>%d</StateID>", n);
	}
	// field State
	if ((clientVer==-1.0 || clientVer>=1.51))
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field Owner
	if ((clientVer==-1.0 || clientVer>=1.51))
	{
		const char* s = src.getOwner();
		if (s && *s)
		{
			buffer.append("<Owner>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Owner>");
		}
	}
	if (keepRootTag)
		buffer.append("</ScheduledWU>");
}

bool CScheduledWU::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_EventName.unmarshall(rpc_request, "EventName", basepath);
	hasValue |= m_EventText.unmarshall(rpc_request, "EventText", basepath);
	hasValue |= m_JobName.unmarshall(rpc_request, "JobName", basepath);
	hasValue |= m_StateID.unmarshall(rpc_request, "StateID", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_Owner.unmarshall(rpc_request, "Owner", basepath);
	return hasValue;
}

bool CScheduledWU::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_EventName.unmarshall(ctx, soapval, "EventName");
	hasValue |= m_EventText.unmarshall(ctx, soapval, "EventText");
	hasValue |= m_JobName.unmarshall(ctx, soapval, "JobName");
	hasValue |= m_StateID.unmarshall(ctx, soapval, "StateID");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_Owner.unmarshall(ctx, soapval, "Owner");
	return hasValue;
}

bool CScheduledWU::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_EventName.unmarshall(ctx, params, attachments, "EventName", basepath);
	hasValue |= m_EventText.unmarshall(ctx, params, attachments, "EventText", basepath);
	hasValue |= m_JobName.unmarshall(ctx, params, attachments, "JobName", basepath);
	hasValue |= m_StateID.unmarshall(ctx, params, attachments, "StateID", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_Owner.unmarshall(ctx, params, attachments, "Owner", basepath);
	return hasValue;
}

const char * CScheduledWU::getWuid() { return m_Wuid.query();}
const char * CScheduledWU::getCluster() { return m_Cluster.query();}
const char * CScheduledWU::getEventName() { return m_EventName.query();}
const char * CScheduledWU::getEventText() { return m_EventText.query();}
const char * CScheduledWU::getJobName() { return m_JobName.query();}
bool CScheduledWU::getStateID_isNull(){return m_StateID.is_nil();}
int CScheduledWU::getStateID() { return m_StateID;}
const char * CScheduledWU::getState() { return m_State.query();}
const char * CScheduledWU::getOwner() { return m_Owner.query();}
void CScheduledWU::setWuid(const char * val){ m_Wuid.set(val); }
void CScheduledWU::setCluster(const char * val){ m_Cluster.set(val); }
void CScheduledWU::setEventName(const char * val){ m_EventName.set(val); }
void CScheduledWU::setEventText(const char * val){ m_EventText.set(val); }
void CScheduledWU::setJobName(const char * val){ m_JobName.set(val); }
void CScheduledWU::setStateID_null(){ m_StateID.Nil(); }void CScheduledWU::setStateID(int val){ m_StateID=val; }
void CScheduledWU::setState(const char * val){ m_State.set(val); }
void CScheduledWU::setOwner(const char * val){ m_Owner.set(val); }
extern "C"  IEspScheduledWU *createScheduledWU(const char *serv, const char *msgname){return ((IEspScheduledWU *)new CScheduledWU(serv /*, msgname*/));}
extern "C"  IClientScheduledWU *createClientScheduledWU(const char *serv, const char *msgname){return ((IClientScheduledWU *)new CScheduledWU(serv /*, msgname*/));}

//=======================================================
// class CServerInfo Implementation
//=======================================================

CServerInfo::CServerInfo(const char *serviceName, IRpcMessageBinding *init)
	: m_Name("", nilRemove),m_NetAddress("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ServerInfo");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CServerInfo::CServerInfo(const char *serviceName, const char *bc)
	: m_Name("", nilRemove),m_NetAddress("", nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ServerInfo");
}

StringBuffer &CServerInfo::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"NetAddress\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CServerInfo::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CServerInfo::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CServerInfo::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NetAddress");
	form.appendf("  <tr><td><b>NetAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CServerInfo::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CServerInfo::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_NetAddress.marshall(rpc_resp, "NetAddress", "", "", "");
}


void CServerInfo::copy(CServerInfo &from)
{
	m_Name.copy(from.m_Name);
	m_NetAddress.copy(from.m_NetAddress);
}


void CServerInfo::copy(IConstServerInfo &ifrom)
{
	setName(ifrom.getName());
	setNetAddress(ifrom.getNetAddress());
}


void CServerInfo::getAttributes(IProperties &attributes)
{
}


void CServerInfo::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_NetAddress.toStr(ctx, buffer, "NetAddress", "", true, "", "");
}


void CServerInfo::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CServerInfo::serializer(IEspContext* ctx, IConstServerInfo &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ServerInfo>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field NetAddress
	{
		const char* s = src.getNetAddress();
		if (s && *s)
		{
			buffer.append("<NetAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</NetAddress>");
		}
	}
	if (keepRootTag)
		buffer.append("</ServerInfo>");
}

bool CServerInfo::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_NetAddress.unmarshall(rpc_request, "NetAddress", basepath);
	return hasValue;
}

bool CServerInfo::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_NetAddress.unmarshall(ctx, soapval, "NetAddress");
	return hasValue;
}

bool CServerInfo::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_NetAddress.unmarshall(ctx, params, attachments, "NetAddress", basepath);
	return hasValue;
}

const char * CServerInfo::getName() { return m_Name.query();}
const char * CServerInfo::getNetAddress() { return m_NetAddress.query();}
void CServerInfo::setName(const char * val){ m_Name.set(val); }
void CServerInfo::setNetAddress(const char * val){ m_NetAddress.set(val); }
extern "C"  IEspServerInfo *createServerInfo(const char *serv, const char *msgname){return ((IEspServerInfo *)new CServerInfo(serv /*, msgname*/));}
extern "C"  IClientServerInfo *createClientServerInfo(const char *serv, const char *msgname){return ((IClientServerInfo *)new CServerInfo(serv /*, msgname*/));}

//=======================================================
// class CWUShowScheduledResponse Implementation
//=======================================================

CWUShowScheduledResponse::CWUShowScheduledResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ClusterSelected(0, nilRemove,false),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_Query("", nilRemove),m_Clusters(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUShowScheduledResponse::CWUShowScheduledResponse(const char *serviceName, const char *bc)
	: m_ClusterSelected(0, nilRemove,false),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_Query("", nilRemove),m_Clusters(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledResponse");
}

CWUShowScheduledResponse::CWUShowScheduledResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ClusterSelected(0, nilRemove,false),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_Query("", nilRemove),m_Clusters(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUShowScheduledResponse::CWUShowScheduledResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ClusterSelected(0, nilRemove,false),m_EventName("", nilRemove),m_PushEventName("", nilRemove),m_PushEventText("", nilRemove),m_Query("", nilRemove),m_Clusters(nilRemove),m_Workunits(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUShowScheduledResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUShowScheduledResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterSelected\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"EventName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"PushEventName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"PushEventText\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"\" name=\"Query\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Clusters\" type=\"tns:ArrayOfServerInfo\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Workunits\" type=\"tns:ArrayOfScheduledWU\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CServerInfo::getXsdDefinition(context, request, schema, added);
		CScheduledWU::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ScheduledWU") && added.getValue("ArrayOfScheduledWU")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfScheduledWU\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ScheduledWU\" type=\"tns:ScheduledWU\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfScheduledWU",1);
	}
	if (added.getValue("ServerInfo") && added.getValue("ArrayOfServerInfo")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfServerInfo\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ServerInfo\" type=\"tns:ServerInfo\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfServerInfo",1);
	}
	return schema;
}

void CWUShowScheduledResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUShowScheduledResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ScheduledWU"))
	{
		added.setValue("ScheduledWU",1);
		CScheduledWU::getMapInfo(info,added);
	}
	if (!added.getValue("ServerInfo"))
	{
		added.setValue("ServerInfo",1);
		CServerInfo::getMapInfo(info,added);
	}
}

StringBuffer &CWUShowScheduledResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("ClusterSelected");
	form.appendf("  <tr><td><b>ClusterSelected: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EventName");
	form.appendf("  <tr><td><b>EventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PushEventName");
	form.appendf("  <tr><td><b>PushEventName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PushEventText");
	form.appendf("  <tr><td><b>PushEventText: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Query");
	form.appendf("  <tr><td><b>Query: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Clusters");
	form.appendf("<tr><td><b>Clusters: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Workunits");
	form.appendf("<tr><td><b>Workunits: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUShowScheduledResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUShowScheduledResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ClusterSelected.marshall(rpc_resp, "ClusterSelected", "", "", "");
		m_EventName.marshall(rpc_resp, "EventName", "", "", "");
		m_PushEventName.marshall(rpc_resp, "PushEventName", "", "", "");
		m_PushEventText.marshall(rpc_resp, "PushEventText", "", "", "");
		m_Query.marshall(rpc_resp, "Query", "", "", "");
		m_Clusters.marshall(rpc_resp, "Clusters", "ServerInfo");
		m_Workunits.marshall(rpc_resp, "Workunits", "ScheduledWU");
	}
}


void CWUShowScheduledResponse::copy(CWUShowScheduledResponse &from)
{
	m_ClusterSelected.copy(from.m_ClusterSelected);
	m_EventName.copy(from.m_EventName);
	m_PushEventName.copy(from.m_PushEventName);
	m_PushEventText.copy(from.m_PushEventText);
	m_Query.copy(from.m_Query);
	m_Clusters.copy(from.m_Clusters);
	m_Workunits.copy(from.m_Workunits);
}


void CWUShowScheduledResponse::copy(IConstWUShowScheduledResponse &ifrom)
{
	setClusterSelected(ifrom.getClusterSelected());
	setEventName(ifrom.getEventName());
	setPushEventName(ifrom.getPushEventName());
	setPushEventText(ifrom.getPushEventText());
	setQuery(ifrom.getQuery());
	setClusters(ifrom.getClusters());
	setWorkunits(ifrom.getWorkunits());
}


void CWUShowScheduledResponse::getAttributes(IProperties &attributes)
{
}


void CWUShowScheduledResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ClusterSelected.toStr(ctx, buffer, "ClusterSelected", "", true, "", "");
		m_EventName.toStr(ctx, buffer, "EventName", "", true, "", "");
		m_PushEventName.toStr(ctx, buffer, "PushEventName", "", true, "", "");
		m_PushEventText.toStr(ctx, buffer, "PushEventText", "", true, "", "");
		m_Query.toStr(ctx, buffer, "Query", "", true, "", "");
		m_Clusters.toStr(ctx, buffer, "Clusters", "ServerInfo");
		m_Workunits.toStr(ctx, buffer, "Workunits", "ScheduledWU");
	}
}


void CWUShowScheduledResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUShowScheduledResponse::serializer(IEspContext* ctx, IConstWUShowScheduledResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUShowScheduledResponse>");
	// field ClusterSelected
	{
		int n = src.getClusterSelected();
		if (n)
			buffer.appendf("<ClusterSelected>%d</ClusterSelected>", n);
	}
	// field EventName
	{
		const char* s = src.getEventName();
		if (s && *s)
		{
			buffer.append("<EventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EventName>");
		}
	}
	// field PushEventName
	{
		const char* s = src.getPushEventName();
		if (s && *s)
		{
			buffer.append("<PushEventName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PushEventName>");
		}
	}
	// field PushEventText
	{
		const char* s = src.getPushEventText();
		if (s && *s)
		{
			buffer.append("<PushEventText>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PushEventText>");
		}
	}
	// field Query
	{
		const char* s = src.getQuery();
		if (s && *s)
		{
			buffer.append("<Query>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Query>");
		}
	}
	// field Clusters
	{
		IArrayOf<IConstServerInfo>& v = src.getClusters();
		int size = v.length();
		if (size>0)
			buffer.append("<Clusters>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CServerInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Clusters>");
	}
	// field Workunits
	{
		IArrayOf<IConstScheduledWU>& v = src.getWorkunits();
		int size = v.length();
		if (size>0)
			buffer.append("<Workunits>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CScheduledWU::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Workunits>");
	}
	if (keepRootTag)
		buffer.append("</WUShowScheduledResponse>");
}

bool CWUShowScheduledResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ClusterSelected.unmarshall(rpc_request, "ClusterSelected", basepath);
		hasValue |= m_EventName.unmarshall(rpc_request, "EventName", basepath);
		hasValue |= m_PushEventName.unmarshall(rpc_request, "PushEventName", basepath);
		hasValue |= m_PushEventText.unmarshall(rpc_request, "PushEventText", basepath);
		hasValue |= m_Query.unmarshall(rpc_request, "Query", basepath);
		hasValue |= m_Clusters.unmarshall(rpc_request, "Clusters", basepath);
		hasValue |= m_Workunits.unmarshall(rpc_request, "Workunits", basepath);
	}
	return hasValue;
}

bool CWUShowScheduledResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ClusterSelected.unmarshall(ctx, soapval, "ClusterSelected");
	hasValue |= m_EventName.unmarshall(ctx, soapval, "EventName");
	hasValue |= m_PushEventName.unmarshall(ctx, soapval, "PushEventName");
	hasValue |= m_PushEventText.unmarshall(ctx, soapval, "PushEventText");
	hasValue |= m_Query.unmarshall(ctx, soapval, "Query");
	hasValue |= m_Clusters.unmarshall(ctx, soapval, "Clusters");
	hasValue |= m_Workunits.unmarshall(ctx, soapval, "Workunits");
	return hasValue;
}

bool CWUShowScheduledResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ClusterSelected.unmarshall(ctx, params, attachments, "ClusterSelected", basepath);
	hasValue |= m_EventName.unmarshall(ctx, params, attachments, "EventName", basepath);
	hasValue |= m_PushEventName.unmarshall(ctx, params, attachments, "PushEventName", basepath);
	hasValue |= m_PushEventText.unmarshall(ctx, params, attachments, "PushEventText", basepath);
	hasValue |= m_Query.unmarshall(ctx, params, attachments, "Query", basepath);
	hasValue |= m_Clusters.unmarshall(ctx, params, attachments, "Clusters", basepath);
	hasValue |= m_Workunits.unmarshall(ctx, params, attachments, "Workunits", basepath);
	return hasValue;
}

bool CWUShowScheduledResponse::getClusterSelected_isNull(){return m_ClusterSelected.is_nil();}
int CWUShowScheduledResponse::getClusterSelected() { return m_ClusterSelected;}
const char * CWUShowScheduledResponse::getEventName() { return m_EventName.query();}
const char * CWUShowScheduledResponse::getPushEventName() { return m_PushEventName.query();}
const char * CWUShowScheduledResponse::getPushEventText() { return m_PushEventText.query();}
const char * CWUShowScheduledResponse::getQuery() { return m_Query.query();}
IArrayOf<IConstServerInfo> & CWUShowScheduledResponse::getClusters() { return (IArrayOf<IConstServerInfo> &) m_Clusters; }
IArrayOf<IConstScheduledWU> & CWUShowScheduledResponse::getWorkunits() { return (IArrayOf<IConstScheduledWU> &) m_Workunits; }
void CWUShowScheduledResponse::setClusterSelected_null(){ m_ClusterSelected.Nil(); }void CWUShowScheduledResponse::setClusterSelected(int val){ m_ClusterSelected=val; }
void CWUShowScheduledResponse::setEventName(const char * val){ m_EventName.set(val); }
void CWUShowScheduledResponse::setPushEventName(const char * val){ m_PushEventName.set(val); }
void CWUShowScheduledResponse::setPushEventText(const char * val){ m_PushEventText.set(val); }
void CWUShowScheduledResponse::setQuery(const char * val){ m_Query.set(val); }
void CWUShowScheduledResponse::setClusters(IArrayOf<IEspServerInfo> &val)
{
	m_Clusters->kill();
	IArrayOf<IConstServerInfo> &target = m_Clusters.getValue();
	ForEachItemIn(idx, val)
	{
		IEspServerInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUShowScheduledResponse::setClusters(IArrayOf<IConstServerInfo> &val)
{
	m_Clusters->kill();
	IArrayOf<IConstServerInfo> &target = m_Clusters.getValue();
	ForEachItemIn(idx, val)
	{
		IConstServerInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUShowScheduledResponse::setWorkunits(IArrayOf<IEspScheduledWU> &val)
{
	m_Workunits->kill();
	IArrayOf<IConstScheduledWU> &target = m_Workunits.getValue();
	ForEachItemIn(idx, val)
	{
		IEspScheduledWU &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUShowScheduledResponse::setWorkunits(IArrayOf<IConstScheduledWU> &val)
{
	m_Workunits->kill();
	IArrayOf<IConstScheduledWU> &target = m_Workunits.getValue();
	ForEachItemIn(idx, val)
	{
		IConstScheduledWU &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUShowScheduledResponse *createWUShowScheduledResponse(const char *serv){return ((IEspWUShowScheduledResponse *)new CWUShowScheduledResponse(serv));}
extern "C"  IClientWUShowScheduledResponse *createClientWUShowScheduledResponse(const char *serv){return ((IClientWUShowScheduledResponse *)new CWUShowScheduledResponse(serv));}

//=======================================================
// class CWUGetDependancyTreesRequest Implementation
//=======================================================

CWUGetDependancyTreesRequest::CWUGetDependancyTreesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_Items(nilIgnore),m_TimeoutMilliSec(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetDependancyTreesRequest::CWUGetDependancyTreesRequest(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_Items(nilIgnore),m_TimeoutMilliSec(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesRequest");
}

CWUGetDependancyTreesRequest::CWUGetDependancyTreesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_Items(nilIgnore),m_TimeoutMilliSec(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetDependancyTreesRequest::CWUGetDependancyTreesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Cluster(nilIgnore),m_Queue(nilIgnore),m_Snapshot(nilIgnore),m_Items(nilIgnore),m_TimeoutMilliSec(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetDependancyTreesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Snapshot\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Items\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGetDependancyTreesRequest","TimeoutMilliSec")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"TimeoutMilliSec\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetDependancyTreesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetDependancyTreesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGetDependancyTreesRequest","TimeoutMilliSec",1.12);
}

StringBuffer &CWUGetDependancyTreesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queue");
	form.appendf("  <tr><td><b>Queue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Snapshot");
	form.appendf("  <tr><td><b>Snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Items");
	form.appendf("  <tr><td><b>Items: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGetDependancyTreesRequest","TimeoutMilliSec")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("TimeoutMilliSec");
		form.appendf("  <tr><td><b>TimeoutMilliSec: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetDependancyTreesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetDependancyTreesRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_Queue.marshall(rpc_resp, "Queue", "", "", "");
	m_Snapshot.marshall(rpc_resp, "Snapshot", "", "", "");
	m_Items.marshall(rpc_resp, "Items", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_TimeoutMilliSec.marshall(rpc_resp, "TimeoutMilliSec", "", "", "");
}


void CWUGetDependancyTreesRequest::copy(CWUGetDependancyTreesRequest &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_Queue.copy(from.m_Queue);
	m_Snapshot.copy(from.m_Snapshot);
	m_Items.copy(from.m_Items);
	m_TimeoutMilliSec.copy(from.m_TimeoutMilliSec);
}


void CWUGetDependancyTreesRequest::copy(IConstWUGetDependancyTreesRequest &ifrom)
{
	setCluster(ifrom.getCluster());
	setQueue(ifrom.getQueue());
	setSnapshot(ifrom.getSnapshot());
	setItems(ifrom.getItems());
	setTimeoutMilliSec(ifrom.getTimeoutMilliSec());
}


void CWUGetDependancyTreesRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetDependancyTreesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_Queue.toStr(ctx, buffer, "Queue", "", true, "", "");
	m_Snapshot.toStr(ctx, buffer, "Snapshot", "", true, "", "");
	m_Items.toStr(ctx, buffer, "Items", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.12))
		m_TimeoutMilliSec.toStr(ctx, buffer, "TimeoutMilliSec", "", true, "", "");
}


void CWUGetDependancyTreesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetDependancyTreesRequest::serializer(IEspContext* ctx, IConstWUGetDependancyTreesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetDependancyTreesRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field Queue
	{
		const char* s = src.getQueue();
		if (s && *s)
		{
			buffer.append("<Queue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Queue>");
		}
	}
	// field Snapshot
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<Snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Snapshot>");
		}
	}
	// field Items
	{
		const char* s = src.getItems();
		if (s && *s)
		{
			buffer.append("<Items>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Items>");
		}
	}
	// field TimeoutMilliSec
	if ((clientVer==-1.0 || clientVer>=1.12))
	{
		const char* s = src.getTimeoutMilliSec();
		if (s && *s)
		{
			buffer.append("<TimeoutMilliSec>");
			encodeUtf8XML(s,buffer);
			buffer.append("</TimeoutMilliSec>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetDependancyTreesRequest>");
}

bool CWUGetDependancyTreesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_Queue.unmarshall(rpc_request, "Queue", basepath);
	hasValue |= m_Snapshot.unmarshall(rpc_request, "Snapshot", basepath);
	hasValue |= m_Items.unmarshall(rpc_request, "Items", basepath);
	hasValue |= m_TimeoutMilliSec.unmarshall(rpc_request, "TimeoutMilliSec", basepath);
	return hasValue;
}

bool CWUGetDependancyTreesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_Queue.unmarshall(ctx, soapval, "Queue");
	hasValue |= m_Snapshot.unmarshall(ctx, soapval, "Snapshot");
	hasValue |= m_Items.unmarshall(ctx, soapval, "Items");
	hasValue |= m_TimeoutMilliSec.unmarshall(ctx, soapval, "TimeoutMilliSec");
	return hasValue;
}

bool CWUGetDependancyTreesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_Queue.unmarshall(ctx, params, attachments, "Queue", basepath);
	hasValue |= m_Snapshot.unmarshall(ctx, params, attachments, "Snapshot", basepath);
	hasValue |= m_Items.unmarshall(ctx, params, attachments, "Items", basepath);
	hasValue |= m_TimeoutMilliSec.unmarshall(ctx, params, attachments, "TimeoutMilliSec", basepath);
	return hasValue;
}

const char * CWUGetDependancyTreesRequest::getCluster() { return m_Cluster.query();}
const char * CWUGetDependancyTreesRequest::getQueue() { return m_Queue.query();}
const char * CWUGetDependancyTreesRequest::getSnapshot() { return m_Snapshot.query();}
const char * CWUGetDependancyTreesRequest::getItems() { return m_Items.query();}
const char * CWUGetDependancyTreesRequest::getTimeoutMilliSec() { return m_TimeoutMilliSec.query();}
void CWUGetDependancyTreesRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUGetDependancyTreesRequest::setQueue(const char * val){ m_Queue.set(val); }
void CWUGetDependancyTreesRequest::setSnapshot(const char * val){ m_Snapshot.set(val); }
void CWUGetDependancyTreesRequest::setItems(const char * val){ m_Items.set(val); }
void CWUGetDependancyTreesRequest::setTimeoutMilliSec(const char * val){ m_TimeoutMilliSec.set(val); }
extern "C"  IEspWUGetDependancyTreesRequest *createWUGetDependancyTreesRequest(const char *serv){return ((IEspWUGetDependancyTreesRequest *)new CWUGetDependancyTreesRequest(serv));}
extern "C"  IClientWUGetDependancyTreesRequest *createClientWUGetDependancyTreesRequest(const char *serv){return ((IClientWUGetDependancyTreesRequest *)new CWUGetDependancyTreesRequest(serv));}

//=======================================================
// class CWUGetDependancyTreesResponse Implementation
//=======================================================

CWUGetDependancyTreesResponse::CWUGetDependancyTreesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Errors(nilRemove),m_DependancyTrees(nilRemove),m_DependancyTrees_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetDependancyTreesResponse::CWUGetDependancyTreesResponse(const char *serviceName, const char *bc)
	: m_Errors(nilRemove),m_DependancyTrees(nilRemove), m_DependancyTrees_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesResponse");
}

CWUGetDependancyTreesResponse::CWUGetDependancyTreesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Errors(nilRemove),m_DependancyTrees(nilRemove), m_DependancyTrees_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetDependancyTreesResponse::CWUGetDependancyTreesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Errors(nilRemove),m_DependancyTrees(nilRemove), m_DependancyTrees_mimetype("text/xml")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetDependancyTreesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetDependancyTreesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Errors\" type=\"tns:ArrayOfECLException\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DependancyTrees\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CECLException::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ECLException") && added.getValue("ArrayOfECLException")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLException\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLException\" type=\"tns:ECLException\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLException",1);
	}
	return schema;
}

void CWUGetDependancyTreesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetDependancyTreesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("ECLException"))
	{
		added.setValue("ECLException",1);
		CECLException::getMapInfo(info,added);
	}
}

StringBuffer &CWUGetDependancyTreesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Errors");
	form.appendf("<tr><td><b>Errors: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DependancyTrees");
	form.appendf("  <tr><td><b>DependancyTrees: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetDependancyTreesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetDependancyTreesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Errors.marshall(rpc_resp, "Errors", "ECLException");
		m_DependancyTrees.marshall(rpc_resp, "DependancyTrees", "", "", "");
	}
}


void CWUGetDependancyTreesResponse::copy(CWUGetDependancyTreesResponse &from)
{
	m_Errors.copy(from.m_Errors);
	m_DependancyTrees.copy(from.m_DependancyTrees);
}


void CWUGetDependancyTreesResponse::copy(IConstWUGetDependancyTreesResponse &ifrom)
{
	setErrors(ifrom.getErrors());
	setDependancyTrees(ifrom.getDependancyTrees());
}


void CWUGetDependancyTreesResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetDependancyTreesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Errors.toStr(ctx, buffer, "Errors", "ECLException");
		m_DependancyTrees.toStr(ctx, buffer, "DependancyTrees", "", true, "", "");
	}
}


void CWUGetDependancyTreesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetDependancyTreesResponse::serializer(IEspContext* ctx, IConstWUGetDependancyTreesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetDependancyTreesResponse>");
	// field Errors
	{
		IArrayOf<IConstECLException>& v = src.getErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<Errors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLException::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Errors>");
	}
	// field DependancyTrees
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getDependancyTrees().toByteArray(), src.getDependancyTrees().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<DependancyTrees>%s</DependancyTrees>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUGetDependancyTreesResponse>");
}

void CWUGetDependancyTreesResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_DependancyTrees.getValue());
	mimetype.set(m_DependancyTrees_mimetype.str());
}

bool CWUGetDependancyTreesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Errors.unmarshall(rpc_request, "Errors", basepath);
		hasValue |= m_DependancyTrees.unmarshall(rpc_request, "DependancyTrees", basepath);
	}
	return hasValue;
}

bool CWUGetDependancyTreesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Errors.unmarshall(ctx, soapval, "Errors");
	hasValue |= m_DependancyTrees.unmarshall(ctx, soapval, "DependancyTrees");
	return hasValue;
}

bool CWUGetDependancyTreesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Errors.unmarshall(ctx, params, attachments, "Errors", basepath);
	hasValue |= m_DependancyTrees.unmarshall(ctx, params, attachments, "DependancyTrees", basepath);
	return hasValue;
}

IArrayOf<IConstECLException> & CWUGetDependancyTreesResponse::getErrors() { return (IArrayOf<IConstECLException> &) m_Errors; }
const char *CWUGetDependancyTreesResponse::getDependancyTrees_mimetype(){ return m_DependancyTrees_mimetype.str(); }
const MemoryBuffer & CWUGetDependancyTreesResponse::getDependancyTrees() { return m_DependancyTrees.getValue();}
void CWUGetDependancyTreesResponse::setErrors(IArrayOf<IEspECLException> &val)
{
	m_Errors->kill();
	IArrayOf<IConstECLException> &target = m_Errors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLException &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetDependancyTreesResponse::setErrors(IArrayOf<IConstECLException> &val)
{
	m_Errors->kill();
	IArrayOf<IConstECLException> &target = m_Errors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLException &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetDependancyTreesResponse::setDependancyTrees_mimetype(const char *  val){ m_DependancyTrees_mimetype.set(val); }
void CWUGetDependancyTreesResponse::setDependancyTrees(const MemoryBuffer & val){ m_DependancyTrees->clear().append(val); }
extern "C"  IEspWUGetDependancyTreesResponse *createWUGetDependancyTreesResponse(const char *serv){return ((IEspWUGetDependancyTreesResponse *)new CWUGetDependancyTreesResponse(serv));}
extern "C"  IClientWUGetDependancyTreesResponse *createClientWUGetDependancyTreesResponse(const char *serv){return ((IClientWUGetDependancyTreesResponse *)new CWUGetDependancyTreesResponse(serv));}

//=======================================================
// class CWUListLocalFileRequiredRequest Implementation
//=======================================================

CWUListLocalFileRequiredRequest::CWUListLocalFileRequiredRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListLocalFileRequiredRequest::CWUListLocalFileRequiredRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredRequest");
}

CWUListLocalFileRequiredRequest::CWUListLocalFileRequiredRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListLocalFileRequiredRequest::CWUListLocalFileRequiredRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListLocalFileRequiredRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUListLocalFileRequiredRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListLocalFileRequiredRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUListLocalFileRequiredRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListLocalFileRequiredRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListLocalFileRequiredRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
}


void CWUListLocalFileRequiredRequest::copy(CWUListLocalFileRequiredRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
}


void CWUListLocalFileRequiredRequest::copy(IConstWUListLocalFileRequiredRequest &ifrom)
{
	setWuid(ifrom.getWuid());
}


void CWUListLocalFileRequiredRequest::getAttributes(IProperties &attributes)
{
}


void CWUListLocalFileRequiredRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
}


void CWUListLocalFileRequiredRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListLocalFileRequiredRequest::serializer(IEspContext* ctx, IConstWUListLocalFileRequiredRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListLocalFileRequiredRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUListLocalFileRequiredRequest>");
}

bool CWUListLocalFileRequiredRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	return hasValue;
}

bool CWUListLocalFileRequiredRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	return hasValue;
}

bool CWUListLocalFileRequiredRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	return hasValue;
}

const char * CWUListLocalFileRequiredRequest::getWuid() { return m_Wuid.query();}
void CWUListLocalFileRequiredRequest::setWuid(const char * val){ m_Wuid.set(val); }
extern "C"  IEspWUListLocalFileRequiredRequest *createWUListLocalFileRequiredRequest(const char *serv){return ((IEspWUListLocalFileRequiredRequest *)new CWUListLocalFileRequiredRequest(serv));}
extern "C"  IClientWUListLocalFileRequiredRequest *createClientWUListLocalFileRequiredRequest(const char *serv){return ((IClientWUListLocalFileRequiredRequest *)new CWUListLocalFileRequiredRequest(serv));}

//=======================================================
// class CWUListLocalFileRequiredResponse Implementation
//=======================================================

CWUListLocalFileRequiredResponse::CWUListLocalFileRequiredResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_LocalFileUploads(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListLocalFileRequiredResponse::CWUListLocalFileRequiredResponse(const char *serviceName, const char *bc)
	: m_LocalFileUploads(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredResponse");
}

CWUListLocalFileRequiredResponse::CWUListLocalFileRequiredResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_LocalFileUploads(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListLocalFileRequiredResponse::CWUListLocalFileRequiredResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_LocalFileUploads(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListLocalFileRequiredResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListLocalFileRequiredResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"LocalFileUploads\" type=\"tns:ArrayOfLogicalFileUpload\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CLogicalFileUpload::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("LogicalFileUpload") && added.getValue("ArrayOfLogicalFileUpload")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfLogicalFileUpload\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"LogicalFileUpload\" type=\"tns:LogicalFileUpload\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfLogicalFileUpload",1);
	}
	return schema;
}

void CWUListLocalFileRequiredResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListLocalFileRequiredResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("LogicalFileUpload"))
	{
		added.setValue("LogicalFileUpload",1);
		CLogicalFileUpload::getMapInfo(info,added);
	}
}

StringBuffer &CWUListLocalFileRequiredResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LocalFileUploads");
	form.appendf("<tr><td><b>LocalFileUploads: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListLocalFileRequiredResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListLocalFileRequiredResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_LocalFileUploads.marshall(rpc_resp, "LocalFileUploads", "LogicalFileUpload");
	}
}


void CWUListLocalFileRequiredResponse::copy(CWUListLocalFileRequiredResponse &from)
{
	m_LocalFileUploads.copy(from.m_LocalFileUploads);
}


void CWUListLocalFileRequiredResponse::copy(IConstWUListLocalFileRequiredResponse &ifrom)
{
	setLocalFileUploads(ifrom.getLocalFileUploads());
}


void CWUListLocalFileRequiredResponse::getAttributes(IProperties &attributes)
{
}


void CWUListLocalFileRequiredResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_LocalFileUploads.toStr(ctx, buffer, "LocalFileUploads", "LogicalFileUpload");
	}
}


void CWUListLocalFileRequiredResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListLocalFileRequiredResponse::serializer(IEspContext* ctx, IConstWUListLocalFileRequiredResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListLocalFileRequiredResponse>");
	// field LocalFileUploads
	{
		IArrayOf<IConstLogicalFileUpload>& v = src.getLocalFileUploads();
		int size = v.length();
		if (size>0)
			buffer.append("<LocalFileUploads>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CLogicalFileUpload::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</LocalFileUploads>");
	}
	if (keepRootTag)
		buffer.append("</WUListLocalFileRequiredResponse>");
}

bool CWUListLocalFileRequiredResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_LocalFileUploads.unmarshall(rpc_request, "LocalFileUploads", basepath);
	}
	return hasValue;
}

bool CWUListLocalFileRequiredResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_LocalFileUploads.unmarshall(ctx, soapval, "LocalFileUploads");
	return hasValue;
}

bool CWUListLocalFileRequiredResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_LocalFileUploads.unmarshall(ctx, params, attachments, "LocalFileUploads", basepath);
	return hasValue;
}

IArrayOf<IConstLogicalFileUpload> & CWUListLocalFileRequiredResponse::getLocalFileUploads() { return (IArrayOf<IConstLogicalFileUpload> &) m_LocalFileUploads; }
void CWUListLocalFileRequiredResponse::setLocalFileUploads(IArrayOf<IEspLogicalFileUpload> &val)
{
	m_LocalFileUploads->kill();
	IArrayOf<IConstLogicalFileUpload> &target = m_LocalFileUploads.getValue();
	ForEachItemIn(idx, val)
	{
		IEspLogicalFileUpload &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUListLocalFileRequiredResponse::setLocalFileUploads(IArrayOf<IConstLogicalFileUpload> &val)
{
	m_LocalFileUploads->kill();
	IArrayOf<IConstLogicalFileUpload> &target = m_LocalFileUploads.getValue();
	ForEachItemIn(idx, val)
	{
		IConstLogicalFileUpload &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUListLocalFileRequiredResponse *createWUListLocalFileRequiredResponse(const char *serv){return ((IEspWUListLocalFileRequiredResponse *)new CWUListLocalFileRequiredResponse(serv));}
extern "C"  IClientWUListLocalFileRequiredResponse *createClientWUListLocalFileRequiredResponse(const char *serv){return ((IClientWUListLocalFileRequiredResponse *)new CWUListLocalFileRequiredResponse(serv));}

//=======================================================
// class CWUAddLocalFileToWorkunitRequest Implementation
//=======================================================

CWUAddLocalFileToWorkunitRequest::CWUAddLocalFileToWorkunitRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_Val(nilIgnore),m_DefVal(nilIgnore),m_Type(nilIgnore),m_Length(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUAddLocalFileToWorkunitRequest::CWUAddLocalFileToWorkunitRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_Val(nilIgnore),m_DefVal(nilIgnore),m_Type(nilIgnore),m_Length(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitRequest");
}

CWUAddLocalFileToWorkunitRequest::CWUAddLocalFileToWorkunitRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_Val(nilIgnore),m_DefVal(nilIgnore),m_Type(nilIgnore),m_Length(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUAddLocalFileToWorkunitRequest::CWUAddLocalFileToWorkunitRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Name(nilIgnore),m_Val(nilIgnore),m_DefVal(nilIgnore),m_Type(nilIgnore),m_Length(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUAddLocalFileToWorkunitRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Val\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DefVal\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Type\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Length\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUAddLocalFileToWorkunitRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUAddLocalFileToWorkunitRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUAddLocalFileToWorkunitRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Val");
	form.appendf("  <tr><td><b>Val: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DefVal");
	form.appendf("  <tr><td><b>DefVal: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Type");
	form.appendf("  <tr><td><b>Type: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Length");
	form.appendf("  <tr><td><b>Length: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUAddLocalFileToWorkunitRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUAddLocalFileToWorkunitRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Val.marshall(rpc_resp, "Val", "", "", "");
	m_DefVal.marshall(rpc_resp, "DefVal", "", "", "");
	m_Type.marshall(rpc_resp, "Type", "", "", "");
	m_Length.marshall(rpc_resp, "Length", "", "", "");
}


void CWUAddLocalFileToWorkunitRequest::copy(CWUAddLocalFileToWorkunitRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Name.copy(from.m_Name);
	m_Val.copy(from.m_Val);
	m_DefVal.copy(from.m_DefVal);
	m_Type.copy(from.m_Type);
	m_Length.copy(from.m_Length);
}


void CWUAddLocalFileToWorkunitRequest::copy(IConstWUAddLocalFileToWorkunitRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setName(ifrom.getName());
	setVal(ifrom.getVal());
	setDefVal(ifrom.getDefVal());
	setType(ifrom.getType());
	setLength(ifrom.getLength());
}


void CWUAddLocalFileToWorkunitRequest::getAttributes(IProperties &attributes)
{
}


void CWUAddLocalFileToWorkunitRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Val.toStr(ctx, buffer, "Val", "", true, "", "");
	m_DefVal.toStr(ctx, buffer, "DefVal", "", true, "", "");
	m_Type.toStr(ctx, buffer, "Type", "", true, "", "");
	m_Length.toStr(ctx, buffer, "Length", "", true, "", "");
}


void CWUAddLocalFileToWorkunitRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUAddLocalFileToWorkunitRequest::serializer(IEspContext* ctx, IConstWUAddLocalFileToWorkunitRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUAddLocalFileToWorkunitRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Val
	{
		const char* s = src.getVal();
		if (s && *s)
		{
			buffer.append("<Val>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Val>");
		}
	}
	// field DefVal
	{
		const char* s = src.getDefVal();
		if (s && *s)
		{
			buffer.append("<DefVal>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DefVal>");
		}
	}
	// field Type
	{
		int n = src.getType();
		if (n)
			buffer.appendf("<Type>%d</Type>", n);
	}
	// field Length
	{
		int n = src.getLength();
		if (n)
			buffer.appendf("<Length>%d</Length>", n);
	}
	if (keepRootTag)
		buffer.append("</WUAddLocalFileToWorkunitRequest>");
}

bool CWUAddLocalFileToWorkunitRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Val.unmarshall(rpc_request, "Val", basepath);
	hasValue |= m_DefVal.unmarshall(rpc_request, "DefVal", basepath);
	hasValue |= m_Type.unmarshall(rpc_request, "Type", basepath);
	hasValue |= m_Length.unmarshall(rpc_request, "Length", basepath);
	return hasValue;
}

bool CWUAddLocalFileToWorkunitRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Val.unmarshall(ctx, soapval, "Val");
	hasValue |= m_DefVal.unmarshall(ctx, soapval, "DefVal");
	hasValue |= m_Type.unmarshall(ctx, soapval, "Type");
	hasValue |= m_Length.unmarshall(ctx, soapval, "Length");
	return hasValue;
}

bool CWUAddLocalFileToWorkunitRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Val.unmarshall(ctx, params, attachments, "Val", basepath);
	hasValue |= m_DefVal.unmarshall(ctx, params, attachments, "DefVal", basepath);
	hasValue |= m_Type.unmarshall(ctx, params, attachments, "Type", basepath);
	hasValue |= m_Length.unmarshall(ctx, params, attachments, "Length", basepath);
	return hasValue;
}

const char * CWUAddLocalFileToWorkunitRequest::getWuid() { return m_Wuid.query();}
const char * CWUAddLocalFileToWorkunitRequest::getName() { return m_Name.query();}
const char * CWUAddLocalFileToWorkunitRequest::getVal() { return m_Val.query();}
const char * CWUAddLocalFileToWorkunitRequest::getDefVal() { return m_DefVal.query();}
int CWUAddLocalFileToWorkunitRequest::getType() { return m_Type;}
int CWUAddLocalFileToWorkunitRequest::getLength() { return m_Length;}
void CWUAddLocalFileToWorkunitRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUAddLocalFileToWorkunitRequest::setName(const char * val){ m_Name.set(val); }
void CWUAddLocalFileToWorkunitRequest::setVal(const char * val){ m_Val.set(val); }
void CWUAddLocalFileToWorkunitRequest::setDefVal(const char * val){ m_DefVal.set(val); }
void CWUAddLocalFileToWorkunitRequest::setType(int val){ m_Type=val; }
void CWUAddLocalFileToWorkunitRequest::setLength(int val){ m_Length=val; }
extern "C"  IEspWUAddLocalFileToWorkunitRequest *createWUAddLocalFileToWorkunitRequest(const char *serv){return ((IEspWUAddLocalFileToWorkunitRequest *)new CWUAddLocalFileToWorkunitRequest(serv));}
extern "C"  IClientWUAddLocalFileToWorkunitRequest *createClientWUAddLocalFileToWorkunitRequest(const char *serv){return ((IClientWUAddLocalFileToWorkunitRequest *)new CWUAddLocalFileToWorkunitRequest(serv));}

//=======================================================
// class CWUAddLocalFileToWorkunitResponse Implementation
//=======================================================

CWUAddLocalFileToWorkunitResponse::CWUAddLocalFileToWorkunitResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUAddLocalFileToWorkunitResponse::CWUAddLocalFileToWorkunitResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitResponse");
}

CWUAddLocalFileToWorkunitResponse::CWUAddLocalFileToWorkunitResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUAddLocalFileToWorkunitResponse::CWUAddLocalFileToWorkunitResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_Name(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUAddLocalFileToWorkunitResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUAddLocalFileToWorkunitResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUAddLocalFileToWorkunitResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUAddLocalFileToWorkunitResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUAddLocalFileToWorkunitResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUAddLocalFileToWorkunitResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUAddLocalFileToWorkunitResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Name.marshall(rpc_resp, "Name", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUAddLocalFileToWorkunitResponse::copy(CWUAddLocalFileToWorkunitResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Name.copy(from.m_Name);
	m_Result.copy(from.m_Result);
}


void CWUAddLocalFileToWorkunitResponse::copy(IConstWUAddLocalFileToWorkunitResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setName(ifrom.getName());
	setResult(ifrom.getResult());
}


void CWUAddLocalFileToWorkunitResponse::getAttributes(IProperties &attributes)
{
}


void CWUAddLocalFileToWorkunitResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CWUAddLocalFileToWorkunitResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUAddLocalFileToWorkunitResponse::serializer(IEspContext* ctx, IConstWUAddLocalFileToWorkunitResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUAddLocalFileToWorkunitResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUAddLocalFileToWorkunitResponse>");
}

bool CWUAddLocalFileToWorkunitResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUAddLocalFileToWorkunitResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUAddLocalFileToWorkunitResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWUAddLocalFileToWorkunitResponse::getWuid() { return m_Wuid.query();}
const char * CWUAddLocalFileToWorkunitResponse::getName() { return m_Name.query();}
const char * CWUAddLocalFileToWorkunitResponse::getResult() { return m_Result.query();}
void CWUAddLocalFileToWorkunitResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUAddLocalFileToWorkunitResponse::setName(const char * val){ m_Name.set(val); }
void CWUAddLocalFileToWorkunitResponse::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspWUAddLocalFileToWorkunitResponse *createWUAddLocalFileToWorkunitResponse(const char *serv){return ((IEspWUAddLocalFileToWorkunitResponse *)new CWUAddLocalFileToWorkunitResponse(serv));}
extern "C"  IClientWUAddLocalFileToWorkunitResponse *createClientWUAddLocalFileToWorkunitResponse(const char *serv){return ((IClientWUAddLocalFileToWorkunitResponse *)new CWUAddLocalFileToWorkunitResponse(serv));}

//=======================================================
// class CWUDebugRequest Implementation
//=======================================================

CWUDebugRequest::CWUDebugRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Command(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDebugRequest::CWUDebugRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Command(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugRequest");
}

CWUDebugRequest::CWUDebugRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Command(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDebugRequest::CWUDebugRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Command(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDebugRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Command\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUDebugRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDebugRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUDebugRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Command");
	form.appendf("  <tr><td><b>Command: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDebugRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDebugRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Command.marshall(rpc_resp, "Command", "", "", "");
}


void CWUDebugRequest::copy(CWUDebugRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Command.copy(from.m_Command);
}


void CWUDebugRequest::copy(IConstWUDebugRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setCommand(ifrom.getCommand());
}


void CWUDebugRequest::getAttributes(IProperties &attributes)
{
}


void CWUDebugRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Command.toStr(ctx, buffer, "Command", "", true, "", "");
}


void CWUDebugRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDebugRequest::serializer(IEspContext* ctx, IConstWUDebugRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDebugRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Command
	{
		const char* s = src.getCommand();
		if (s && *s)
		{
			buffer.append("<Command>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Command>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUDebugRequest>");
}

bool CWUDebugRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Command.unmarshall(rpc_request, "Command", basepath);
	return hasValue;
}

bool CWUDebugRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Command.unmarshall(ctx, soapval, "Command");
	return hasValue;
}

bool CWUDebugRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Command.unmarshall(ctx, params, attachments, "Command", basepath);
	return hasValue;
}

const char * CWUDebugRequest::getWuid() { return m_Wuid.query();}
const char * CWUDebugRequest::getCommand() { return m_Command.query();}
void CWUDebugRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUDebugRequest::setCommand(const char * val){ m_Command.set(val); }
extern "C"  IEspWUDebugRequest *createWUDebugRequest(const char *serv){return ((IEspWUDebugRequest *)new CWUDebugRequest(serv));}
extern "C"  IClientWUDebugRequest *createClientWUDebugRequest(const char *serv){return ((IClientWUDebugRequest *)new CWUDebugRequest(serv));}

//=======================================================
// class CWUDebugResponse Implementation
//=======================================================

CWUDebugResponse::CWUDebugResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDebugResponse::CWUDebugResponse(const char *serviceName, const char *bc)
	: m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugResponse");
}

CWUDebugResponse::CWUDebugResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDebugResponse::CWUDebugResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Result(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDebugResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDebugResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUDebugResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDebugResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUDebugResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDebugResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDebugResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWUDebugResponse::copy(CWUDebugResponse &from)
{
	m_Result.copy(from.m_Result);
}


void CWUDebugResponse::copy(IConstWUDebugResponse &ifrom)
{
	setResult(ifrom.getResult());
}


void CWUDebugResponse::getAttributes(IProperties &attributes)
{
}


void CWUDebugResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CWUDebugResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDebugResponse::serializer(IEspContext* ctx, IConstWUDebugResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDebugResponse>");
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUDebugResponse>");
}

bool CWUDebugResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWUDebugResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUDebugResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWUDebugResponse::getResult() { return m_Result.query();}
void CWUDebugResponse::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspWUDebugResponse *createWUDebugResponse(const char *serv){return ((IEspWUDebugResponse *)new CWUDebugResponse(serv));}
extern "C"  IClientWUDebugResponse *createClientWUDebugResponse(const char *serv){return ((IClientWUDebugResponse *)new CWUDebugResponse(serv));}

//=======================================================
// class CWUCopyLogicalFilesRequest Implementation
//=======================================================

CWUCopyLogicalFilesRequest::CWUCopyLogicalFilesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_CopyLocal(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCopyLogicalFilesRequest::CWUCopyLogicalFilesRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_CopyLocal(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesRequest");
}

CWUCopyLogicalFilesRequest::CWUCopyLogicalFilesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_CopyLocal(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCopyLogicalFilesRequest::CWUCopyLogicalFilesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Cluster(nilIgnore),m_CopyLocal(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCopyLogicalFilesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CopyLocal\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUCopyLogicalFilesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCopyLogicalFilesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUCopyLogicalFilesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CopyLocal");
	
	form.appendf("  <tr><td><b>CopyLocal? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCopyLogicalFilesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCopyLogicalFilesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_CopyLocal.marshall(rpc_resp, "CopyLocal", "", "", "");
}


void CWUCopyLogicalFilesRequest::copy(CWUCopyLogicalFilesRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Cluster.copy(from.m_Cluster);
	m_CopyLocal.copy(from.m_CopyLocal);
}


void CWUCopyLogicalFilesRequest::copy(IConstWUCopyLogicalFilesRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setCluster(ifrom.getCluster());
	setCopyLocal(ifrom.getCopyLocal());
}


void CWUCopyLogicalFilesRequest::getAttributes(IProperties &attributes)
{
}


void CWUCopyLogicalFilesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_CopyLocal.toStr(ctx, buffer, "CopyLocal", "", true, "", "");
}


void CWUCopyLogicalFilesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCopyLogicalFilesRequest::serializer(IEspContext* ctx, IConstWUCopyLogicalFilesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCopyLogicalFilesRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field CopyLocal
	{
		bool b = src.getCopyLocal();
		if (b)
			buffer.appendf("<CopyLocal>1</CopyLocal>");
	}
	if (keepRootTag)
		buffer.append("</WUCopyLogicalFilesRequest>");
}

bool CWUCopyLogicalFilesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_CopyLocal.unmarshall(rpc_request, "CopyLocal", basepath);
	return hasValue;
}

bool CWUCopyLogicalFilesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_CopyLocal.unmarshall(ctx, soapval, "CopyLocal");
	return hasValue;
}

bool CWUCopyLogicalFilesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_CopyLocal.unmarshall(ctx, params, attachments, "CopyLocal", basepath);
	return hasValue;
}

const char * CWUCopyLogicalFilesRequest::getWuid() { return m_Wuid.query();}
const char * CWUCopyLogicalFilesRequest::getCluster() { return m_Cluster.query();}
bool CWUCopyLogicalFilesRequest::getCopyLocal() { return m_CopyLocal;}
void CWUCopyLogicalFilesRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUCopyLogicalFilesRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUCopyLogicalFilesRequest::setCopyLocal(bool val){ m_CopyLocal=val; }
extern "C"  IEspWUCopyLogicalFilesRequest *createWUCopyLogicalFilesRequest(const char *serv){return ((IEspWUCopyLogicalFilesRequest *)new CWUCopyLogicalFilesRequest(serv));}
extern "C"  IClientWUCopyLogicalFilesRequest *createClientWUCopyLogicalFilesRequest(const char *serv){return ((IClientWUCopyLogicalFilesRequest *)new CWUCopyLogicalFilesRequest(serv));}

//=======================================================
// class CWULogicalFileCopyInfo Implementation
//=======================================================

CWULogicalFileCopyInfo::CWULogicalFileCopyInfo(const char *serviceName, IRpcMessageBinding *init)
	: m_IsIndex(nilIgnore),m_LogicalName(nilIgnore),m_DfuCopyWuid(nilIgnore),m_DfuCopyError(nilIgnore),m_Clusters(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogicalFileCopyInfo");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWULogicalFileCopyInfo::CWULogicalFileCopyInfo(const char *serviceName, const char *bc)
	: m_IsIndex(nilIgnore),m_LogicalName(nilIgnore),m_DfuCopyWuid(nilIgnore),m_DfuCopyError(nilIgnore),m_Clusters(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WULogicalFileCopyInfo");
}

StringBuffer &CWULogicalFileCopyInfo::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsIndex\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DfuCopyWuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DfuCopyError\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Clusters\" type=\"tns:EspStringArray\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CWULogicalFileCopyInfo::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWULogicalFileCopyInfo::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWULogicalFileCopyInfo::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsIndex");
	
	form.appendf("  <tr><td><b>IsIndex? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalName");
	form.appendf("  <tr><td><b>LogicalName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DfuCopyWuid");
	form.appendf("  <tr><td><b>DfuCopyWuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DfuCopyError");
	form.appendf("  <tr><td><b>DfuCopyError: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Clusters");
	form.appendf("<tr><td><b>Clusters: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWULogicalFileCopyInfo::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWULogicalFileCopyInfo::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_IsIndex.marshall(rpc_resp, "IsIndex", "", "", "");
	m_LogicalName.marshall(rpc_resp, "LogicalName", "", "", "");
	m_DfuCopyWuid.marshall(rpc_resp, "DfuCopyWuid", "", "", "");
	m_DfuCopyError.marshall(rpc_resp, "DfuCopyError", "", "", "");
	m_Clusters.marshall(rpc_resp, "Clusters", "Item");
}


void CWULogicalFileCopyInfo::copy(CWULogicalFileCopyInfo &from)
{
	m_IsIndex.copy(from.m_IsIndex);
	m_LogicalName.copy(from.m_LogicalName);
	m_DfuCopyWuid.copy(from.m_DfuCopyWuid);
	m_DfuCopyError.copy(from.m_DfuCopyError);
	m_Clusters.copy(from.m_Clusters);
}


void CWULogicalFileCopyInfo::copy(IConstWULogicalFileCopyInfo &ifrom)
{
	setIsIndex(ifrom.getIsIndex());
	setLogicalName(ifrom.getLogicalName());
	setDfuCopyWuid(ifrom.getDfuCopyWuid());
	setDfuCopyError(ifrom.getDfuCopyError());
	setClusters(ifrom.getClusters());
}


void CWULogicalFileCopyInfo::getAttributes(IProperties &attributes)
{
}


void CWULogicalFileCopyInfo::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_IsIndex.toStr(ctx, buffer, "IsIndex", "", true, "", "");
	m_LogicalName.toStr(ctx, buffer, "LogicalName", "", true, "", "");
	m_DfuCopyWuid.toStr(ctx, buffer, "DfuCopyWuid", "", true, "", "");
	m_DfuCopyError.toStr(ctx, buffer, "DfuCopyError", "", true, "", "");
	m_Clusters.toStr(ctx, buffer, "Clusters", "Item");
}


void CWULogicalFileCopyInfo::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWULogicalFileCopyInfo::serializer(IEspContext* ctx, IConstWULogicalFileCopyInfo &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WULogicalFileCopyInfo>");
	// field IsIndex
	{
		bool b = src.getIsIndex();
		if (b)
			buffer.appendf("<IsIndex>1</IsIndex>");
	}
	// field LogicalName
	{
		const char* s = src.getLogicalName();
		if (s && *s)
		{
			buffer.append("<LogicalName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LogicalName>");
		}
	}
	// field DfuCopyWuid
	{
		const char* s = src.getDfuCopyWuid();
		if (s && *s)
		{
			buffer.append("<DfuCopyWuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DfuCopyWuid>");
		}
	}
	// field DfuCopyError
	{
		const char* s = src.getDfuCopyError();
		if (s && *s)
		{
			buffer.append("<DfuCopyError>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DfuCopyError>");
		}
	}
	// field Clusters
	{
		StringArray& v = src.getClusters();
		if (v.length()>0)
			buffer.append("<Clusters>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</Clusters>");
	}
	if (keepRootTag)
		buffer.append("</WULogicalFileCopyInfo>");
}

bool CWULogicalFileCopyInfo::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_IsIndex.unmarshall(rpc_request, "IsIndex", basepath);
	hasValue |= m_LogicalName.unmarshall(rpc_request, "LogicalName", basepath);
	hasValue |= m_DfuCopyWuid.unmarshall(rpc_request, "DfuCopyWuid", basepath);
	hasValue |= m_DfuCopyError.unmarshall(rpc_request, "DfuCopyError", basepath);
	hasValue |= m_Clusters.unmarshall(rpc_request, "Clusters", basepath);
	return hasValue;
}

bool CWULogicalFileCopyInfo::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_IsIndex.unmarshall(ctx, soapval, "IsIndex");
	hasValue |= m_LogicalName.unmarshall(ctx, soapval, "LogicalName");
	hasValue |= m_DfuCopyWuid.unmarshall(ctx, soapval, "DfuCopyWuid");
	hasValue |= m_DfuCopyError.unmarshall(ctx, soapval, "DfuCopyError");
	hasValue |= m_Clusters.unmarshall(ctx, soapval, "Clusters");
	return hasValue;
}

bool CWULogicalFileCopyInfo::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_IsIndex.unmarshall(ctx, params, attachments, "IsIndex", basepath);
	hasValue |= m_LogicalName.unmarshall(ctx, params, attachments, "LogicalName", basepath);
	hasValue |= m_DfuCopyWuid.unmarshall(ctx, params, attachments, "DfuCopyWuid", basepath);
	hasValue |= m_DfuCopyError.unmarshall(ctx, params, attachments, "DfuCopyError", basepath);
	hasValue |= m_Clusters.unmarshall(ctx, params, attachments, "Clusters", basepath);
	return hasValue;
}

bool CWULogicalFileCopyInfo::getIsIndex() { return m_IsIndex;}
const char * CWULogicalFileCopyInfo::getLogicalName() { return m_LogicalName.query();}
const char * CWULogicalFileCopyInfo::getDfuCopyWuid() { return m_DfuCopyWuid.query();}
const char * CWULogicalFileCopyInfo::getDfuCopyError() { return m_DfuCopyError.query();}
StringArray & CWULogicalFileCopyInfo::getClusters() { return (StringArray &) m_Clusters; }
void CWULogicalFileCopyInfo::setIsIndex(bool val){ m_IsIndex=val; }
void CWULogicalFileCopyInfo::setLogicalName(const char * val){ m_LogicalName.set(val); }
void CWULogicalFileCopyInfo::setDfuCopyWuid(const char * val){ m_DfuCopyWuid.set(val); }
void CWULogicalFileCopyInfo::setDfuCopyError(const char * val){ m_DfuCopyError.set(val); }
void CWULogicalFileCopyInfo::setClusters(StringArray &val){ m_Clusters->kill();  CloneArray(m_Clusters.getValue(), val); }
extern "C"  IEspWULogicalFileCopyInfo *createWULogicalFileCopyInfo(const char *serv, const char *msgname){return ((IEspWULogicalFileCopyInfo *)new CWULogicalFileCopyInfo(serv /*, msgname*/));}
extern "C"  IClientWULogicalFileCopyInfo *createClientWULogicalFileCopyInfo(const char *serv, const char *msgname){return ((IClientWULogicalFileCopyInfo *)new CWULogicalFileCopyInfo(serv /*, msgname*/));}

//=======================================================
// class CWUCopyLogicalClusterFileSections Implementation
//=======================================================

CWUCopyLogicalClusterFileSections::CWUCopyLogicalClusterFileSections(const char *serviceName, IRpcMessageBinding *init)
	: m_ClusterName(nilIgnore),m_OnCluster(nilIgnore),m_NotOnCluster(nilIgnore),m_Foreign(nilIgnore),m_NotFound(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalClusterFileSections");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCopyLogicalClusterFileSections::CWUCopyLogicalClusterFileSections(const char *serviceName, const char *bc)
	: m_ClusterName(nilIgnore),m_OnCluster(nilIgnore),m_NotOnCluster(nilIgnore),m_Foreign(nilIgnore),m_NotFound(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalClusterFileSections");
}

StringBuffer &CWUCopyLogicalClusterFileSections::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"OnCluster\" type=\"tns:ArrayOfWULogicalFileCopyInfo\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NotOnCluster\" type=\"tns:ArrayOfWULogicalFileCopyInfo\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Foreign\" type=\"tns:ArrayOfWULogicalFileCopyInfo\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NotFound\" type=\"tns:ArrayOfWULogicalFileCopyInfo\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWULogicalFileCopyInfo::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WULogicalFileCopyInfo") && added.getValue("ArrayOfWULogicalFileCopyInfo")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWULogicalFileCopyInfo\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WULogicalFileCopyInfo\" type=\"tns:WULogicalFileCopyInfo\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWULogicalFileCopyInfo",1);
	}
	return schema;
}

void CWUCopyLogicalClusterFileSections::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCopyLogicalClusterFileSections::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WULogicalFileCopyInfo"))
	{
		added.setValue("WULogicalFileCopyInfo",1);
		CWULogicalFileCopyInfo::getMapInfo(info,added);
	}
}

StringBuffer &CWUCopyLogicalClusterFileSections::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OnCluster");
	form.appendf("<tr><td><b>OnCluster: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NotOnCluster");
	form.appendf("<tr><td><b>NotOnCluster: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Foreign");
	form.appendf("<tr><td><b>Foreign: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NotFound");
	form.appendf("<tr><td><b>NotFound: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCopyLogicalClusterFileSections::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCopyLogicalClusterFileSections::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	m_OnCluster.marshall(rpc_resp, "OnCluster", "WULogicalFileCopyInfo");
	m_NotOnCluster.marshall(rpc_resp, "NotOnCluster", "WULogicalFileCopyInfo");
	m_Foreign.marshall(rpc_resp, "Foreign", "WULogicalFileCopyInfo");
	m_NotFound.marshall(rpc_resp, "NotFound", "WULogicalFileCopyInfo");
}


void CWUCopyLogicalClusterFileSections::copy(CWUCopyLogicalClusterFileSections &from)
{
	m_ClusterName.copy(from.m_ClusterName);
	m_OnCluster.copy(from.m_OnCluster);
	m_NotOnCluster.copy(from.m_NotOnCluster);
	m_Foreign.copy(from.m_Foreign);
	m_NotFound.copy(from.m_NotFound);
}


void CWUCopyLogicalClusterFileSections::copy(IConstWUCopyLogicalClusterFileSections &ifrom)
{
	setClusterName(ifrom.getClusterName());
	setOnCluster(ifrom.getOnCluster());
	setNotOnCluster(ifrom.getNotOnCluster());
	setForeign(ifrom.getForeign());
	setNotFound(ifrom.getNotFound());
}


void CWUCopyLogicalClusterFileSections::getAttributes(IProperties &attributes)
{
}


void CWUCopyLogicalClusterFileSections::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	m_OnCluster.toStr(ctx, buffer, "OnCluster", "WULogicalFileCopyInfo");
	m_NotOnCluster.toStr(ctx, buffer, "NotOnCluster", "WULogicalFileCopyInfo");
	m_Foreign.toStr(ctx, buffer, "Foreign", "WULogicalFileCopyInfo");
	m_NotFound.toStr(ctx, buffer, "NotFound", "WULogicalFileCopyInfo");
}


void CWUCopyLogicalClusterFileSections::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCopyLogicalClusterFileSections::serializer(IEspContext* ctx, IConstWUCopyLogicalClusterFileSections &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCopyLogicalClusterFileSections>");
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field OnCluster
	{
		IArrayOf<IConstWULogicalFileCopyInfo>& v = src.getOnCluster();
		int size = v.length();
		if (size>0)
			buffer.append("<OnCluster>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWULogicalFileCopyInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</OnCluster>");
	}
	// field NotOnCluster
	{
		IArrayOf<IConstWULogicalFileCopyInfo>& v = src.getNotOnCluster();
		int size = v.length();
		if (size>0)
			buffer.append("<NotOnCluster>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWULogicalFileCopyInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</NotOnCluster>");
	}
	// field Foreign
	{
		IArrayOf<IConstWULogicalFileCopyInfo>& v = src.getForeign();
		int size = v.length();
		if (size>0)
			buffer.append("<Foreign>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWULogicalFileCopyInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Foreign>");
	}
	// field NotFound
	{
		IArrayOf<IConstWULogicalFileCopyInfo>& v = src.getNotFound();
		int size = v.length();
		if (size>0)
			buffer.append("<NotFound>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWULogicalFileCopyInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</NotFound>");
	}
	if (keepRootTag)
		buffer.append("</WUCopyLogicalClusterFileSections>");
}

bool CWUCopyLogicalClusterFileSections::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_OnCluster.unmarshall(rpc_request, "OnCluster", basepath);
	hasValue |= m_NotOnCluster.unmarshall(rpc_request, "NotOnCluster", basepath);
	hasValue |= m_Foreign.unmarshall(rpc_request, "Foreign", basepath);
	hasValue |= m_NotFound.unmarshall(rpc_request, "NotFound", basepath);
	return hasValue;
}

bool CWUCopyLogicalClusterFileSections::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_OnCluster.unmarshall(ctx, soapval, "OnCluster");
	hasValue |= m_NotOnCluster.unmarshall(ctx, soapval, "NotOnCluster");
	hasValue |= m_Foreign.unmarshall(ctx, soapval, "Foreign");
	hasValue |= m_NotFound.unmarshall(ctx, soapval, "NotFound");
	return hasValue;
}

bool CWUCopyLogicalClusterFileSections::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_OnCluster.unmarshall(ctx, params, attachments, "OnCluster", basepath);
	hasValue |= m_NotOnCluster.unmarshall(ctx, params, attachments, "NotOnCluster", basepath);
	hasValue |= m_Foreign.unmarshall(ctx, params, attachments, "Foreign", basepath);
	hasValue |= m_NotFound.unmarshall(ctx, params, attachments, "NotFound", basepath);
	return hasValue;
}

const char * CWUCopyLogicalClusterFileSections::getClusterName() { return m_ClusterName.query();}
IArrayOf<IConstWULogicalFileCopyInfo> & CWUCopyLogicalClusterFileSections::getOnCluster() { return (IArrayOf<IConstWULogicalFileCopyInfo> &) m_OnCluster; }
IArrayOf<IConstWULogicalFileCopyInfo> & CWUCopyLogicalClusterFileSections::getNotOnCluster() { return (IArrayOf<IConstWULogicalFileCopyInfo> &) m_NotOnCluster; }
IArrayOf<IConstWULogicalFileCopyInfo> & CWUCopyLogicalClusterFileSections::getForeign() { return (IArrayOf<IConstWULogicalFileCopyInfo> &) m_Foreign; }
IArrayOf<IConstWULogicalFileCopyInfo> & CWUCopyLogicalClusterFileSections::getNotFound() { return (IArrayOf<IConstWULogicalFileCopyInfo> &) m_NotFound; }
void CWUCopyLogicalClusterFileSections::setClusterName(const char * val){ m_ClusterName.set(val); }
void CWUCopyLogicalClusterFileSections::setOnCluster(IArrayOf<IEspWULogicalFileCopyInfo> &val)
{
	m_OnCluster->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_OnCluster.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWULogicalFileCopyInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalClusterFileSections::setOnCluster(IArrayOf<IConstWULogicalFileCopyInfo> &val)
{
	m_OnCluster->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_OnCluster.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWULogicalFileCopyInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalClusterFileSections::setNotOnCluster(IArrayOf<IEspWULogicalFileCopyInfo> &val)
{
	m_NotOnCluster->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_NotOnCluster.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWULogicalFileCopyInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalClusterFileSections::setNotOnCluster(IArrayOf<IConstWULogicalFileCopyInfo> &val)
{
	m_NotOnCluster->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_NotOnCluster.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWULogicalFileCopyInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalClusterFileSections::setForeign(IArrayOf<IEspWULogicalFileCopyInfo> &val)
{
	m_Foreign->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_Foreign.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWULogicalFileCopyInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalClusterFileSections::setForeign(IArrayOf<IConstWULogicalFileCopyInfo> &val)
{
	m_Foreign->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_Foreign.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWULogicalFileCopyInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalClusterFileSections::setNotFound(IArrayOf<IEspWULogicalFileCopyInfo> &val)
{
	m_NotFound->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_NotFound.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWULogicalFileCopyInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalClusterFileSections::setNotFound(IArrayOf<IConstWULogicalFileCopyInfo> &val)
{
	m_NotFound->kill();
	IArrayOf<IConstWULogicalFileCopyInfo> &target = m_NotFound.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWULogicalFileCopyInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUCopyLogicalClusterFileSections *createWUCopyLogicalClusterFileSections(const char *serv, const char *msgname){return ((IEspWUCopyLogicalClusterFileSections *)new CWUCopyLogicalClusterFileSections(serv /*, msgname*/));}
extern "C"  IClientWUCopyLogicalClusterFileSections *createClientWUCopyLogicalClusterFileSections(const char *serv, const char *msgname){return ((IClientWUCopyLogicalClusterFileSections *)new CWUCopyLogicalClusterFileSections(serv /*, msgname*/));}

//=======================================================
// class CWUCopyLogicalFilesResponse Implementation
//=======================================================

CWUCopyLogicalFilesResponse::CWUCopyLogicalFilesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_ClusterFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCopyLogicalFilesResponse::CWUCopyLogicalFilesResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_ClusterFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesResponse");
}

CWUCopyLogicalFilesResponse::CWUCopyLogicalFilesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_ClusterFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCopyLogicalFilesResponse::CWUCopyLogicalFilesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_ClusterFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyLogicalFilesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCopyLogicalFilesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterFiles\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Cluster\" type=\"tns:WUCopyLogicalClusterFileSections\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUCopyLogicalClusterFileSections::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUCopyLogicalFilesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCopyLogicalFilesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUCopyLogicalClusterFileSections"))
	{
		added.setValue("WUCopyLogicalClusterFileSections",1);
		CWUCopyLogicalClusterFileSections::getMapInfo(info,added);
	}
}

StringBuffer &CWUCopyLogicalFilesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterFiles");
	form.appendf("<tr><td><b>ClusterFiles: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCopyLogicalFilesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCopyLogicalFilesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_ClusterFiles.marshall(rpc_resp, "ClusterFiles", "Cluster");
	}
}


void CWUCopyLogicalFilesResponse::copy(CWUCopyLogicalFilesResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_ClusterFiles.copy(from.m_ClusterFiles);
}


void CWUCopyLogicalFilesResponse::copy(IConstWUCopyLogicalFilesResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setClusterFiles(ifrom.getClusterFiles());
}


void CWUCopyLogicalFilesResponse::getAttributes(IProperties &attributes)
{
}


void CWUCopyLogicalFilesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_ClusterFiles.toStr(ctx, buffer, "ClusterFiles", "Cluster");
	}
}


void CWUCopyLogicalFilesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCopyLogicalFilesResponse::serializer(IEspContext* ctx, IConstWUCopyLogicalFilesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCopyLogicalFilesResponse>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field ClusterFiles
	{
		IArrayOf<IConstWUCopyLogicalClusterFileSections>& v = src.getClusterFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<ClusterFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Cluster>");
			CWUCopyLogicalClusterFileSections::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Cluster>");
		}
		if (size>0)
			buffer.append("</ClusterFiles>");
	}
	if (keepRootTag)
		buffer.append("</WUCopyLogicalFilesResponse>");
}

bool CWUCopyLogicalFilesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_ClusterFiles.unmarshall(rpc_request, "ClusterFiles", basepath);
	}
	return hasValue;
}

bool CWUCopyLogicalFilesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_ClusterFiles.unmarshall(ctx, soapval, "ClusterFiles");
	return hasValue;
}

bool CWUCopyLogicalFilesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_ClusterFiles.unmarshall(ctx, params, attachments, "ClusterFiles", basepath);
	return hasValue;
}

const char * CWUCopyLogicalFilesResponse::getWuid() { return m_Wuid.query();}
IArrayOf<IConstWUCopyLogicalClusterFileSections> & CWUCopyLogicalFilesResponse::getClusterFiles() { return (IArrayOf<IConstWUCopyLogicalClusterFileSections> &) m_ClusterFiles; }
void CWUCopyLogicalFilesResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUCopyLogicalFilesResponse::setClusterFiles(IArrayOf<IEspWUCopyLogicalClusterFileSections> &val)
{
	m_ClusterFiles->kill();
	IArrayOf<IConstWUCopyLogicalClusterFileSections> &target = m_ClusterFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUCopyLogicalClusterFileSections &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyLogicalFilesResponse::setClusterFiles(IArrayOf<IConstWUCopyLogicalClusterFileSections> &val)
{
	m_ClusterFiles->kill();
	IArrayOf<IConstWUCopyLogicalClusterFileSections> &target = m_ClusterFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUCopyLogicalClusterFileSections &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUCopyLogicalFilesResponse *createWUCopyLogicalFilesResponse(const char *serv){return ((IEspWUCopyLogicalFilesResponse *)new CWUCopyLogicalFilesResponse(serv));}
extern "C"  IClientWUCopyLogicalFilesResponse *createClientWUCopyLogicalFilesResponse(const char *serv){return ((IClientWUCopyLogicalFilesResponse *)new CWUCopyLogicalFilesResponse(serv));}

//=======================================================
// class CWUPublishWorkunitRequest Implementation
//=======================================================

CWUPublishWorkunitRequest::CWUPublishWorkunitRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_Cluster(nilRemove),m_JobName(nilRemove),m_Activate(nilRemove),m_NotifyCluster(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_UpdateWorkUnitName(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_RemoteDali(nilRemove),m_Comment(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUPublishWorkunitRequest::CWUPublishWorkunitRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_Cluster(nilRemove),m_JobName(nilRemove),m_Activate(nilRemove),m_NotifyCluster(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_UpdateWorkUnitName(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_RemoteDali(nilRemove),m_Comment(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitRequest");
}

CWUPublishWorkunitRequest::CWUPublishWorkunitRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_Cluster(nilRemove),m_JobName(nilRemove),m_Activate(nilRemove),m_NotifyCluster(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_UpdateWorkUnitName(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_RemoteDali(nilRemove),m_Comment(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUPublishWorkunitRequest::CWUPublishWorkunitRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_Cluster(nilRemove),m_JobName(nilRemove),m_Activate(nilRemove),m_NotifyCluster(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_UpdateWorkUnitName(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_RemoteDali(nilRemove),m_Comment(nilRemove),m_DontCopyFiles(0, nilRemove,false),m_SourceProcess(nilRemove),m_AllowForeignFiles(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUPublishWorkunitRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"JobName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Activate\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NotifyCluster\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"10000\" name=\"Wait\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoReload\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateWorkUnitName\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"memoryLimit\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WarnTimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RemoteDali\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"DontCopyFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourceProcess\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllowForeignFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateDfs\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateSuperFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateCloneFrom\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AppendCluster\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeFileErrors\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUPublishWorkunitRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUPublishWorkunitRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUPublishWorkunitRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("JobName");
	form.appendf("  <tr><td><b>JobName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Activate");
	form.appendf("  <tr><td><b>Activate: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NotifyCluster");
	
	form.appendf("  <tr><td><b>NotifyCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Wait");
	form.appendf("  <tr><td><b>Wait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"10000\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoReload");
	
	form.appendf("  <tr><td><b>NoReload? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateWorkUnitName");
	
	form.appendf("  <tr><td><b>UpdateWorkUnitName? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("memoryLimit");
	form.appendf("  <tr><td><b>memoryLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimit");
	form.appendf("  <tr><td><b>TimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimit");
	form.appendf("  <tr><td><b>WarnTimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Priority");
	form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RemoteDali");
	form.appendf("  <tr><td><b>RemoteDali: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DontCopyFiles");
	
	form.appendf("  <tr><td><b>DontCopyFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourceProcess");
	form.appendf("  <tr><td><b>SourceProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllowForeignFiles");
	
	form.appendf("  <tr><td><b>AllowForeignFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateDfs");
	
	form.appendf("  <tr><td><b>UpdateDfs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateSuperFiles");
	
	form.appendf("  <tr><td><b>UpdateSuperFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateCloneFrom");
	
	form.appendf("  <tr><td><b>UpdateCloneFrom? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AppendCluster");
	
	form.appendf("  <tr><td><b>AppendCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeFileErrors");
	
	form.appendf("  <tr><td><b>IncludeFileErrors? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUPublishWorkunitRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUPublishWorkunitRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_JobName.marshall(rpc_resp, "JobName", "", "", "");
	m_Activate.marshall(rpc_resp, "Activate", "", "", "");
	m_NotifyCluster.marshall(rpc_resp, "NotifyCluster", "", "", "");
	m_Wait.marshall(rpc_resp, "Wait", "", "", "");
	m_NoReload.marshall(rpc_resp, "NoReload", "", "", "");
	m_UpdateWorkUnitName.marshall(rpc_resp, "UpdateWorkUnitName", "", "", "");
	m_memoryLimit.marshall(rpc_resp, "memoryLimit", "", "", "");
	m_TimeLimit.marshall(rpc_resp, "TimeLimit", "", "", "");
	m_WarnTimeLimit.marshall(rpc_resp, "WarnTimeLimit", "", "", "");
	m_Priority.marshall(rpc_resp, "Priority", "", "", "");
	m_RemoteDali.marshall(rpc_resp, "RemoteDali", "", "", "");
	m_Comment.marshall(rpc_resp, "Comment", "", "", "");
	m_DontCopyFiles.marshall(rpc_resp, "DontCopyFiles", "", "", "");
	m_SourceProcess.marshall(rpc_resp, "SourceProcess", "", "", "");
	m_AllowForeignFiles.marshall(rpc_resp, "AllowForeignFiles", "", "", "");
	m_UpdateDfs.marshall(rpc_resp, "UpdateDfs", "", "", "");
	m_UpdateSuperFiles.marshall(rpc_resp, "UpdateSuperFiles", "", "", "");
	m_UpdateCloneFrom.marshall(rpc_resp, "UpdateCloneFrom", "", "", "");
	m_AppendCluster.marshall(rpc_resp, "AppendCluster", "", "", "");
	m_IncludeFileErrors.marshall(rpc_resp, "IncludeFileErrors", "", "", "");
}


void CWUPublishWorkunitRequest::copy(CWUPublishWorkunitRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Cluster.copy(from.m_Cluster);
	m_JobName.copy(from.m_JobName);
	m_Activate.copy(from.m_Activate);
	m_NotifyCluster.copy(from.m_NotifyCluster);
	m_Wait.copy(from.m_Wait);
	m_NoReload.copy(from.m_NoReload);
	m_UpdateWorkUnitName.copy(from.m_UpdateWorkUnitName);
	m_memoryLimit.copy(from.m_memoryLimit);
	m_TimeLimit.copy(from.m_TimeLimit);
	m_WarnTimeLimit.copy(from.m_WarnTimeLimit);
	m_Priority.copy(from.m_Priority);
	m_RemoteDali.copy(from.m_RemoteDali);
	m_Comment.copy(from.m_Comment);
	m_DontCopyFiles.copy(from.m_DontCopyFiles);
	m_SourceProcess.copy(from.m_SourceProcess);
	m_AllowForeignFiles.copy(from.m_AllowForeignFiles);
	m_UpdateDfs.copy(from.m_UpdateDfs);
	m_UpdateSuperFiles.copy(from.m_UpdateSuperFiles);
	m_UpdateCloneFrom.copy(from.m_UpdateCloneFrom);
	m_AppendCluster.copy(from.m_AppendCluster);
	m_IncludeFileErrors.copy(from.m_IncludeFileErrors);
}


void CWUPublishWorkunitRequest::copy(IConstWUPublishWorkunitRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setCluster(ifrom.getCluster());
	setJobName(ifrom.getJobName());
	setActivate(ifrom.getActivate());
	setNotifyCluster(ifrom.getNotifyCluster());
	setWait(ifrom.getWait());
	setNoReload(ifrom.getNoReload());
	setUpdateWorkUnitName(ifrom.getUpdateWorkUnitName());
	setMemoryLimit(ifrom.getMemoryLimit());
	setTimeLimit(ifrom.getTimeLimit());
	setWarnTimeLimit(ifrom.getWarnTimeLimit());
	setPriority(ifrom.getPriority());
	setRemoteDali(ifrom.getRemoteDali());
	setComment(ifrom.getComment());
	setDontCopyFiles(ifrom.getDontCopyFiles());
	setSourceProcess(ifrom.getSourceProcess());
	setAllowForeignFiles(ifrom.getAllowForeignFiles());
	setUpdateDfs(ifrom.getUpdateDfs());
	setUpdateSuperFiles(ifrom.getUpdateSuperFiles());
	setUpdateCloneFrom(ifrom.getUpdateCloneFrom());
	setAppendCluster(ifrom.getAppendCluster());
	setIncludeFileErrors(ifrom.getIncludeFileErrors());
}


void CWUPublishWorkunitRequest::getAttributes(IProperties &attributes)
{
}


void CWUPublishWorkunitRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_JobName.toStr(ctx, buffer, "JobName", "", true, "", "");
	m_Activate.toStr(ctx, buffer, "Activate", "", true, "", "");
	m_NotifyCluster.toStr(ctx, buffer, "NotifyCluster", "", true, "", "");
	m_Wait.toStr(ctx, buffer, "Wait", "", true, "", "");
	m_NoReload.toStr(ctx, buffer, "NoReload", "", true, "", "");
	m_UpdateWorkUnitName.toStr(ctx, buffer, "UpdateWorkUnitName", "", true, "", "");
	m_memoryLimit.toStr(ctx, buffer, "memoryLimit", "", true, "", "");
	m_TimeLimit.toStr(ctx, buffer, "TimeLimit", "", true, "", "");
	m_WarnTimeLimit.toStr(ctx, buffer, "WarnTimeLimit", "", true, "", "");
	m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
	m_RemoteDali.toStr(ctx, buffer, "RemoteDali", "", true, "", "");
	m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
	m_DontCopyFiles.toStr(ctx, buffer, "DontCopyFiles", "", true, "", "");
	m_SourceProcess.toStr(ctx, buffer, "SourceProcess", "", true, "", "");
	m_AllowForeignFiles.toStr(ctx, buffer, "AllowForeignFiles", "", true, "", "");
	m_UpdateDfs.toStr(ctx, buffer, "UpdateDfs", "", true, "", "");
	m_UpdateSuperFiles.toStr(ctx, buffer, "UpdateSuperFiles", "", true, "", "");
	m_UpdateCloneFrom.toStr(ctx, buffer, "UpdateCloneFrom", "", true, "", "");
	m_AppendCluster.toStr(ctx, buffer, "AppendCluster", "", true, "", "");
	m_IncludeFileErrors.toStr(ctx, buffer, "IncludeFileErrors", "", true, "", "");
}


void CWUPublishWorkunitRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUPublishWorkunitRequest::serializer(IEspContext* ctx, IConstWUPublishWorkunitRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUPublishWorkunitRequest>");
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field JobName
	{
		const char* s = src.getJobName();
		if (s && *s)
		{
			buffer.append("<JobName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</JobName>");
		}
	}
	// field Activate
	{
		int n = src.getActivate();
		if (n)
			buffer.appendf("<Activate>%d</Activate>", n);
	}
	// field NotifyCluster
	{
		bool b = src.getNotifyCluster();
		if (b)
			buffer.appendf("<NotifyCluster>1</NotifyCluster>");
	}
	// field Wait
	{
		int n = src.getWait();
		if (n)
			buffer.appendf("<Wait>%d</Wait>", n);
	}
	// field NoReload
	{
		bool b = src.getNoReload();
		if (b)
			buffer.appendf("<NoReload>1</NoReload>");
	}
	// field UpdateWorkUnitName
	{
		bool b = src.getUpdateWorkUnitName();
		if (b)
			buffer.appendf("<UpdateWorkUnitName>1</UpdateWorkUnitName>");
	}
	// field memoryLimit
	{
		const char* s = src.getMemoryLimit();
		if (s && *s)
		{
			buffer.append("<memoryLimit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</memoryLimit>");
		}
	}
	// field TimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimit
		buffer.append("<TimeLimit>");
		buffer.append(src.getTimeLimit());
		buffer.append("</TimeLimit>");
	}
	// field WarnTimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimit
		buffer.append("<WarnTimeLimit>");
		buffer.append(src.getWarnTimeLimit());
		buffer.append("</WarnTimeLimit>");
	}
	// field Priority
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<Priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Priority>");
		}
	}
	// field RemoteDali
	{
		const char* s = src.getRemoteDali();
		if (s && *s)
		{
			buffer.append("<RemoteDali>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RemoteDali>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	// field DontCopyFiles
	{
		bool b = src.getDontCopyFiles();
		if (b)
			buffer.appendf("<DontCopyFiles>1</DontCopyFiles>");
	}
	// field SourceProcess
	{
		const char* s = src.getSourceProcess();
		if (s && *s)
		{
			buffer.append("<SourceProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourceProcess>");
		}
	}
	// field AllowForeignFiles
	{
		bool b = src.getAllowForeignFiles();
		if (b)
			buffer.appendf("<AllowForeignFiles>1</AllowForeignFiles>");
	}
	// field UpdateDfs
	{
		bool b = src.getUpdateDfs();
		if (b)
			buffer.appendf("<UpdateDfs>1</UpdateDfs>");
	}
	// field UpdateSuperFiles
	{
		bool b = src.getUpdateSuperFiles();
		if (b)
			buffer.appendf("<UpdateSuperFiles>1</UpdateSuperFiles>");
	}
	// field UpdateCloneFrom
	{
		bool b = src.getUpdateCloneFrom();
		if (b)
			buffer.appendf("<UpdateCloneFrom>1</UpdateCloneFrom>");
	}
	// field AppendCluster
	{
		bool b = src.getAppendCluster();
		if (b)
			buffer.appendf("<AppendCluster>1</AppendCluster>");
	}
	// field IncludeFileErrors
	{
		bool b = src.getIncludeFileErrors();
		if (b)
			buffer.appendf("<IncludeFileErrors>1</IncludeFileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUPublishWorkunitRequest>");
}

bool CWUPublishWorkunitRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_JobName.unmarshall(rpc_request, "JobName", basepath);
	hasValue |= m_Activate.unmarshall(rpc_request, "Activate", basepath);
	hasValue |= m_NotifyCluster.unmarshall(rpc_request, "NotifyCluster", basepath);
	hasValue |= m_Wait.unmarshall(rpc_request, "Wait", basepath);
	hasValue |= m_NoReload.unmarshall(rpc_request, "NoReload", basepath);
	hasValue |= m_UpdateWorkUnitName.unmarshall(rpc_request, "UpdateWorkUnitName", basepath);
	hasValue |= m_memoryLimit.unmarshall(rpc_request, "memoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(rpc_request, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(rpc_request, "WarnTimeLimit", basepath);
	hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
	hasValue |= m_RemoteDali.unmarshall(rpc_request, "RemoteDali", basepath);
	hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(rpc_request, "DontCopyFiles", basepath);
	hasValue |= m_SourceProcess.unmarshall(rpc_request, "SourceProcess", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(rpc_request, "AllowForeignFiles", basepath);
	hasValue |= m_UpdateDfs.unmarshall(rpc_request, "UpdateDfs", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(rpc_request, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(rpc_request, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(rpc_request, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(rpc_request, "IncludeFileErrors", basepath);
	return hasValue;
}

bool CWUPublishWorkunitRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_JobName.unmarshall(ctx, soapval, "JobName");
	hasValue |= m_Activate.unmarshall(ctx, soapval, "Activate");
	hasValue |= m_NotifyCluster.unmarshall(ctx, soapval, "NotifyCluster");
	hasValue |= m_Wait.unmarshall(ctx, soapval, "Wait");
	hasValue |= m_NoReload.unmarshall(ctx, soapval, "NoReload");
	hasValue |= m_UpdateWorkUnitName.unmarshall(ctx, soapval, "UpdateWorkUnitName");
	hasValue |= m_memoryLimit.unmarshall(ctx, soapval, "memoryLimit");
	hasValue |= m_TimeLimit.unmarshall(ctx, soapval, "TimeLimit");
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, soapval, "WarnTimeLimit");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	hasValue |= m_RemoteDali.unmarshall(ctx, soapval, "RemoteDali");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	hasValue |= m_DontCopyFiles.unmarshall(ctx, soapval, "DontCopyFiles");
	hasValue |= m_SourceProcess.unmarshall(ctx, soapval, "SourceProcess");
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, soapval, "AllowForeignFiles");
	hasValue |= m_UpdateDfs.unmarshall(ctx, soapval, "UpdateDfs");
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, soapval, "UpdateSuperFiles");
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, soapval, "UpdateCloneFrom");
	hasValue |= m_AppendCluster.unmarshall(ctx, soapval, "AppendCluster");
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, soapval, "IncludeFileErrors");
	return hasValue;
}

bool CWUPublishWorkunitRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_JobName.unmarshall(ctx, params, attachments, "JobName", basepath);
	hasValue |= m_Activate.unmarshall(ctx, params, attachments, "Activate", basepath);
	hasValue |= m_NotifyCluster.unmarshall(ctx, params, attachments, "NotifyCluster", basepath);
	hasValue |= m_Wait.unmarshall(ctx, params, attachments, "Wait", basepath);
	hasValue |= m_NoReload.unmarshall(ctx, params, attachments, "NoReload", basepath);
	hasValue |= m_UpdateWorkUnitName.unmarshall(ctx, params, attachments, "UpdateWorkUnitName", basepath);
	hasValue |= m_memoryLimit.unmarshall(ctx, params, attachments, "memoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(ctx, params, attachments, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, params, attachments, "WarnTimeLimit", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	hasValue |= m_RemoteDali.unmarshall(ctx, params, attachments, "RemoteDali", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(ctx, params, attachments, "DontCopyFiles", basepath);
	hasValue |= m_SourceProcess.unmarshall(ctx, params, attachments, "SourceProcess", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, params, attachments, "AllowForeignFiles", basepath);
	hasValue |= m_UpdateDfs.unmarshall(ctx, params, attachments, "UpdateDfs", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, params, attachments, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, params, attachments, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(ctx, params, attachments, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, params, attachments, "IncludeFileErrors", basepath);
	return hasValue;
}

const char * CWUPublishWorkunitRequest::getWuid() { return m_Wuid.query();}
const char * CWUPublishWorkunitRequest::getCluster() { return m_Cluster.query();}
const char * CWUPublishWorkunitRequest::getJobName() { return m_JobName.query();}
bool CWUPublishWorkunitRequest::getActivate_isNull(){return m_Activate.is_nil();}
int CWUPublishWorkunitRequest::getActivate() { return m_Activate;}
bool CWUPublishWorkunitRequest::getNotifyCluster_isNull(){return m_NotifyCluster.is_nil();}
bool CWUPublishWorkunitRequest::getNotifyCluster() { return m_NotifyCluster;}
bool CWUPublishWorkunitRequest::getWait_isNull(){return m_Wait.is_nil();}
int CWUPublishWorkunitRequest::getWait() { return m_Wait;}
bool CWUPublishWorkunitRequest::getNoReload_isNull(){return m_NoReload.is_nil();}
bool CWUPublishWorkunitRequest::getNoReload() { return m_NoReload;}
bool CWUPublishWorkunitRequest::getUpdateWorkUnitName_isNull(){return m_UpdateWorkUnitName.is_nil();}
bool CWUPublishWorkunitRequest::getUpdateWorkUnitName() { return m_UpdateWorkUnitName;}
const char * CWUPublishWorkunitRequest::getMemoryLimit() { return m_memoryLimit.query();}
bool CWUPublishWorkunitRequest::getTimeLimit_isNull(){return m_TimeLimit.is_nil();}
unsigned int CWUPublishWorkunitRequest::getTimeLimit() { return m_TimeLimit;}
bool CWUPublishWorkunitRequest::getWarnTimeLimit_isNull(){return m_WarnTimeLimit.is_nil();}
unsigned int CWUPublishWorkunitRequest::getWarnTimeLimit() { return m_WarnTimeLimit;}
const char * CWUPublishWorkunitRequest::getPriority() { return m_Priority.query();}
const char * CWUPublishWorkunitRequest::getRemoteDali() { return m_RemoteDali.query();}
const char * CWUPublishWorkunitRequest::getComment() { return m_Comment.query();}
bool CWUPublishWorkunitRequest::getDontCopyFiles_isNull(){return m_DontCopyFiles.is_nil();}
bool CWUPublishWorkunitRequest::getDontCopyFiles() { return m_DontCopyFiles;}
const char * CWUPublishWorkunitRequest::getSourceProcess() { return m_SourceProcess.query();}
bool CWUPublishWorkunitRequest::getAllowForeignFiles_isNull(){return m_AllowForeignFiles.is_nil();}
bool CWUPublishWorkunitRequest::getAllowForeignFiles() { return m_AllowForeignFiles;}
bool CWUPublishWorkunitRequest::getUpdateDfs_isNull(){return m_UpdateDfs.is_nil();}
bool CWUPublishWorkunitRequest::getUpdateDfs() { return m_UpdateDfs;}
bool CWUPublishWorkunitRequest::getUpdateSuperFiles_isNull(){return m_UpdateSuperFiles.is_nil();}
bool CWUPublishWorkunitRequest::getUpdateSuperFiles() { return m_UpdateSuperFiles;}
bool CWUPublishWorkunitRequest::getUpdateCloneFrom_isNull(){return m_UpdateCloneFrom.is_nil();}
bool CWUPublishWorkunitRequest::getUpdateCloneFrom() { return m_UpdateCloneFrom;}
bool CWUPublishWorkunitRequest::getAppendCluster_isNull(){return m_AppendCluster.is_nil();}
bool CWUPublishWorkunitRequest::getAppendCluster() { return m_AppendCluster;}
bool CWUPublishWorkunitRequest::getIncludeFileErrors_isNull(){return m_IncludeFileErrors.is_nil();}
bool CWUPublishWorkunitRequest::getIncludeFileErrors() { return m_IncludeFileErrors;}
void CWUPublishWorkunitRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUPublishWorkunitRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUPublishWorkunitRequest::setJobName(const char * val){ m_JobName.set(val); }
void CWUPublishWorkunitRequest::setActivate_null(){ m_Activate.Nil(); }void CWUPublishWorkunitRequest::setActivate(int val){ m_Activate=val; }
void CWUPublishWorkunitRequest::setNotifyCluster_null(){ m_NotifyCluster.Nil(); }void CWUPublishWorkunitRequest::setNotifyCluster(bool val){ m_NotifyCluster=val; }
void CWUPublishWorkunitRequest::setWait_null(){ m_Wait.Nil(); }void CWUPublishWorkunitRequest::setWait(int val){ m_Wait=val; }
void CWUPublishWorkunitRequest::setNoReload_null(){ m_NoReload.Nil(); }void CWUPublishWorkunitRequest::setNoReload(bool val){ m_NoReload=val; }
void CWUPublishWorkunitRequest::setUpdateWorkUnitName_null(){ m_UpdateWorkUnitName.Nil(); }void CWUPublishWorkunitRequest::setUpdateWorkUnitName(bool val){ m_UpdateWorkUnitName=val; }
void CWUPublishWorkunitRequest::setMemoryLimit(const char * val){ m_memoryLimit.set(val); }
void CWUPublishWorkunitRequest::setTimeLimit_null(){ m_TimeLimit.Nil(); }void CWUPublishWorkunitRequest::setTimeLimit(unsigned int val){ m_TimeLimit=val; }
void CWUPublishWorkunitRequest::setWarnTimeLimit_null(){ m_WarnTimeLimit.Nil(); }void CWUPublishWorkunitRequest::setWarnTimeLimit(unsigned int val){ m_WarnTimeLimit=val; }
void CWUPublishWorkunitRequest::setPriority(const char * val){ m_Priority.set(val); }
void CWUPublishWorkunitRequest::setRemoteDali(const char * val){ m_RemoteDali.set(val); }
void CWUPublishWorkunitRequest::setComment(const char * val){ m_Comment.set(val); }
void CWUPublishWorkunitRequest::setDontCopyFiles_null(){ m_DontCopyFiles.Nil(); }void CWUPublishWorkunitRequest::setDontCopyFiles(bool val){ m_DontCopyFiles=val; }
void CWUPublishWorkunitRequest::setSourceProcess(const char * val){ m_SourceProcess.set(val); }
void CWUPublishWorkunitRequest::setAllowForeignFiles_null(){ m_AllowForeignFiles.Nil(); }void CWUPublishWorkunitRequest::setAllowForeignFiles(bool val){ m_AllowForeignFiles=val; }
void CWUPublishWorkunitRequest::setUpdateDfs_null(){ m_UpdateDfs.Nil(); }void CWUPublishWorkunitRequest::setUpdateDfs(bool val){ m_UpdateDfs=val; }
void CWUPublishWorkunitRequest::setUpdateSuperFiles_null(){ m_UpdateSuperFiles.Nil(); }void CWUPublishWorkunitRequest::setUpdateSuperFiles(bool val){ m_UpdateSuperFiles=val; }
void CWUPublishWorkunitRequest::setUpdateCloneFrom_null(){ m_UpdateCloneFrom.Nil(); }void CWUPublishWorkunitRequest::setUpdateCloneFrom(bool val){ m_UpdateCloneFrom=val; }
void CWUPublishWorkunitRequest::setAppendCluster_null(){ m_AppendCluster.Nil(); }void CWUPublishWorkunitRequest::setAppendCluster(bool val){ m_AppendCluster=val; }
void CWUPublishWorkunitRequest::setIncludeFileErrors_null(){ m_IncludeFileErrors.Nil(); }void CWUPublishWorkunitRequest::setIncludeFileErrors(bool val){ m_IncludeFileErrors=val; }
extern "C"  IEspWUPublishWorkunitRequest *createWUPublishWorkunitRequest(const char *serv){return ((IEspWUPublishWorkunitRequest *)new CWUPublishWorkunitRequest(serv));}
extern "C"  IClientWUPublishWorkunitRequest *createClientWUPublishWorkunitRequest(const char *serv){return ((IClientWUPublishWorkunitRequest *)new CWUPublishWorkunitRequest(serv));}

//=======================================================
// class CWUPublishWorkunitResponse Implementation
//=======================================================

CWUPublishWorkunitResponse::CWUPublishWorkunitResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilIgnore),m_Result(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_ReloadFailed(nilIgnore),m_Suspended(nilIgnore),m_ErrorMessage(nilIgnore),m_ClusterFiles(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUPublishWorkunitResponse::CWUPublishWorkunitResponse(const char *serviceName, const char *bc)
	: m_Wuid(nilIgnore),m_Result(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_ReloadFailed(nilIgnore),m_Suspended(nilIgnore),m_ErrorMessage(nilIgnore),m_ClusterFiles(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitResponse");
}

CWUPublishWorkunitResponse::CWUPublishWorkunitResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilIgnore),m_Result(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_ReloadFailed(nilIgnore),m_Suspended(nilIgnore),m_ErrorMessage(nilIgnore),m_ClusterFiles(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUPublishWorkunitResponse::CWUPublishWorkunitResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilIgnore),m_Result(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_QueryId(nilIgnore),m_ReloadFailed(nilIgnore),m_Suspended(nilIgnore),m_ErrorMessage(nilIgnore),m_ClusterFiles(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPublishWorkunitResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUPublishWorkunitResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ReloadFailed\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUPublishWorkunitResponse","Suspended")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Suspended\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUPublishWorkunitResponse","ErrorMessage")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ErrorMessage\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterFiles\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Cluster\" type=\"tns:WUCopyLogicalClusterFileSections\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!context.suppressed("WUPublishWorkunitResponse","FileErrors")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileErrors\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:LogicalFileError\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUCopyLogicalClusterFileSections::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("WUPublishWorkunitResponse","FileErrors"))
			CLogicalFileError::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUPublishWorkunitResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUPublishWorkunitResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUPublishWorkunitResponse","Suspended",1.39);
	info.addMinVersion("WUPublishWorkunitResponse","ErrorMessage",1.39);
	info.addMinVersion("WUPublishWorkunitResponse","FileErrors",1.68);
	if (!added.getValue("LogicalFileError"))
	{
		added.setValue("LogicalFileError",1);
		CLogicalFileError::getMapInfo(info,added);
	}
	if (!added.getValue("WUCopyLogicalClusterFileSections"))
	{
		added.setValue("WUCopyLogicalClusterFileSections",1);
		CWUCopyLogicalClusterFileSections::getMapInfo(info,added);
	}
}

StringBuffer &CWUPublishWorkunitResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySet");
	form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryName");
	form.appendf("  <tr><td><b>QueryName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReloadFailed");
	
	form.appendf("  <tr><td><b>ReloadFailed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUPublishWorkunitResponse","Suspended")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Suspended");
		
	form.appendf("  <tr><td><b>Suspended? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUPublishWorkunitResponse","ErrorMessage")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ErrorMessage");
		form.appendf("  <tr><td><b>ErrorMessage: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterFiles");
	form.appendf("<tr><td><b>ClusterFiles: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("WUPublishWorkunitResponse","FileErrors")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileErrors");
		form.appendf("<tr><td><b>FileErrors: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUPublishWorkunitResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUPublishWorkunitResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
		m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
		m_QueryName.marshall(rpc_resp, "QueryName", "", "", "");
		m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
		m_ReloadFailed.marshall(rpc_resp, "ReloadFailed", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.39))
			m_Suspended.marshall(rpc_resp, "Suspended", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.39))
			m_ErrorMessage.marshall(rpc_resp, "ErrorMessage", "", "", "");
		m_ClusterFiles.marshall(rpc_resp, "ClusterFiles", "Cluster");
		if ((clientVer==-1.0 || clientVer>=1.68))
			m_FileErrors.marshall(rpc_resp, "FileErrors", "File");
	}
}


void CWUPublishWorkunitResponse::copy(CWUPublishWorkunitResponse &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_Result.copy(from.m_Result);
	m_QuerySet.copy(from.m_QuerySet);
	m_QueryName.copy(from.m_QueryName);
	m_QueryId.copy(from.m_QueryId);
	m_ReloadFailed.copy(from.m_ReloadFailed);
	m_Suspended.copy(from.m_Suspended);
	m_ErrorMessage.copy(from.m_ErrorMessage);
	m_ClusterFiles.copy(from.m_ClusterFiles);
	m_FileErrors.copy(from.m_FileErrors);
}


void CWUPublishWorkunitResponse::copy(IConstWUPublishWorkunitResponse &ifrom)
{
	setWuid(ifrom.getWuid());
	setResult(ifrom.getResult());
	setQuerySet(ifrom.getQuerySet());
	setQueryName(ifrom.getQueryName());
	setQueryId(ifrom.getQueryId());
	setReloadFailed(ifrom.getReloadFailed());
	setSuspended(ifrom.getSuspended());
	setErrorMessage(ifrom.getErrorMessage());
	setClusterFiles(ifrom.getClusterFiles());
	setFileErrors(ifrom.getFileErrors());
}


void CWUPublishWorkunitResponse::getAttributes(IProperties &attributes)
{
}


void CWUPublishWorkunitResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
		m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
		m_QueryName.toStr(ctx, buffer, "QueryName", "", true, "", "");
		m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
		m_ReloadFailed.toStr(ctx, buffer, "ReloadFailed", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.39))
			m_Suspended.toStr(ctx, buffer, "Suspended", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.39))
			m_ErrorMessage.toStr(ctx, buffer, "ErrorMessage", "", true, "", "");
		m_ClusterFiles.toStr(ctx, buffer, "ClusterFiles", "Cluster");
		if ((clientVer==-1.0 || clientVer>=1.68))
			m_FileErrors.toStr(ctx, buffer, "FileErrors", "File");
	}
}


void CWUPublishWorkunitResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUPublishWorkunitResponse::serializer(IEspContext* ctx, IConstWUPublishWorkunitResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUPublishWorkunitResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	// field QuerySet
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field QueryName
	{
		const char* s = src.getQueryName();
		if (s && *s)
		{
			buffer.append("<QueryName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryName>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field ReloadFailed
	{
		bool b = src.getReloadFailed();
		if (b)
			buffer.appendf("<ReloadFailed>1</ReloadFailed>");
	}
	// field Suspended
	if ((clientVer==-1.0 || clientVer>=1.39))
	{
		bool b = src.getSuspended();
		if (b)
			buffer.appendf("<Suspended>1</Suspended>");
	}
	// field ErrorMessage
	if ((clientVer==-1.0 || clientVer>=1.39))
	{
		const char* s = src.getErrorMessage();
		if (s && *s)
		{
			buffer.append("<ErrorMessage>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ErrorMessage>");
		}
	}
	// field ClusterFiles
	{
		IArrayOf<IConstWUCopyLogicalClusterFileSections>& v = src.getClusterFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<ClusterFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Cluster>");
			CWUCopyLogicalClusterFileSections::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Cluster>");
		}
		if (size>0)
			buffer.append("</ClusterFiles>");
	}
	// field FileErrors
	if ((clientVer==-1.0 || clientVer>=1.68))
	{
		IArrayOf<IConstLogicalFileError>& v = src.getFileErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<FileErrors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CLogicalFileError::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</FileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUPublishWorkunitResponse>");
}

bool CWUPublishWorkunitResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
		hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
		hasValue |= m_QueryName.unmarshall(rpc_request, "QueryName", basepath);
		hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
		hasValue |= m_ReloadFailed.unmarshall(rpc_request, "ReloadFailed", basepath);
		hasValue |= m_Suspended.unmarshall(rpc_request, "Suspended", basepath);
		hasValue |= m_ErrorMessage.unmarshall(rpc_request, "ErrorMessage", basepath);
		hasValue |= m_ClusterFiles.unmarshall(rpc_request, "ClusterFiles", basepath);
		hasValue |= m_FileErrors.unmarshall(rpc_request, "FileErrors", basepath);
	}
	return hasValue;
}

bool CWUPublishWorkunitResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_QueryName.unmarshall(ctx, soapval, "QueryName");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_ReloadFailed.unmarshall(ctx, soapval, "ReloadFailed");
	hasValue |= m_Suspended.unmarshall(ctx, soapval, "Suspended");
	hasValue |= m_ErrorMessage.unmarshall(ctx, soapval, "ErrorMessage");
	hasValue |= m_ClusterFiles.unmarshall(ctx, soapval, "ClusterFiles");
	hasValue |= m_FileErrors.unmarshall(ctx, soapval, "FileErrors");
	return hasValue;
}

bool CWUPublishWorkunitResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_QueryName.unmarshall(ctx, params, attachments, "QueryName", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_ReloadFailed.unmarshall(ctx, params, attachments, "ReloadFailed", basepath);
	hasValue |= m_Suspended.unmarshall(ctx, params, attachments, "Suspended", basepath);
	hasValue |= m_ErrorMessage.unmarshall(ctx, params, attachments, "ErrorMessage", basepath);
	hasValue |= m_ClusterFiles.unmarshall(ctx, params, attachments, "ClusterFiles", basepath);
	hasValue |= m_FileErrors.unmarshall(ctx, params, attachments, "FileErrors", basepath);
	return hasValue;
}

const char * CWUPublishWorkunitResponse::getWuid() { return m_Wuid.query();}
const char * CWUPublishWorkunitResponse::getResult() { return m_Result.query();}
const char * CWUPublishWorkunitResponse::getQuerySet() { return m_QuerySet.query();}
const char * CWUPublishWorkunitResponse::getQueryName() { return m_QueryName.query();}
const char * CWUPublishWorkunitResponse::getQueryId() { return m_QueryId.query();}
bool CWUPublishWorkunitResponse::getReloadFailed() { return m_ReloadFailed;}
bool CWUPublishWorkunitResponse::getSuspended() { return m_Suspended;}
const char * CWUPublishWorkunitResponse::getErrorMessage() { return m_ErrorMessage.query();}
IArrayOf<IConstWUCopyLogicalClusterFileSections> & CWUPublishWorkunitResponse::getClusterFiles() { return (IArrayOf<IConstWUCopyLogicalClusterFileSections> &) m_ClusterFiles; }
IArrayOf<IConstLogicalFileError> & CWUPublishWorkunitResponse::getFileErrors() { return (IArrayOf<IConstLogicalFileError> &) m_FileErrors; }
void CWUPublishWorkunitResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUPublishWorkunitResponse::setResult(const char * val){ m_Result.set(val); }
void CWUPublishWorkunitResponse::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWUPublishWorkunitResponse::setQueryName(const char * val){ m_QueryName.set(val); }
void CWUPublishWorkunitResponse::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUPublishWorkunitResponse::setReloadFailed(bool val){ m_ReloadFailed=val; }
void CWUPublishWorkunitResponse::setSuspended(bool val){ m_Suspended=val; }
void CWUPublishWorkunitResponse::setErrorMessage(const char * val){ m_ErrorMessage.set(val); }
void CWUPublishWorkunitResponse::setClusterFiles(IArrayOf<IEspWUCopyLogicalClusterFileSections> &val)
{
	m_ClusterFiles->kill();
	IArrayOf<IConstWUCopyLogicalClusterFileSections> &target = m_ClusterFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUCopyLogicalClusterFileSections &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUPublishWorkunitResponse::setClusterFiles(IArrayOf<IConstWUCopyLogicalClusterFileSections> &val)
{
	m_ClusterFiles->kill();
	IArrayOf<IConstWUCopyLogicalClusterFileSections> &target = m_ClusterFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUCopyLogicalClusterFileSections &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUPublishWorkunitResponse::setFileErrors(IArrayOf<IEspLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspLogicalFileError &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUPublishWorkunitResponse::setFileErrors(IArrayOf<IConstLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstLogicalFileError &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUPublishWorkunitResponse *createWUPublishWorkunitResponse(const char *serv){return ((IEspWUPublishWorkunitResponse *)new CWUPublishWorkunitResponse(serv));}
extern "C"  IClientWUPublishWorkunitResponse *createClientWUPublishWorkunitResponse(const char *serv){return ((IClientWUPublishWorkunitResponse *)new CWUPublishWorkunitResponse(serv));}

//=======================================================
// class CWUQueryConfigRequest Implementation
//=======================================================

CWUQueryConfigRequest::CWUQueryConfigRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryConfigRequest::CWUQueryConfigRequest(const char *serviceName, const char *bc)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigRequest");
}

CWUQueryConfigRequest::CWUQueryConfigRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryConfigRequest::CWUQueryConfigRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilRemove),m_QueryId(nilRemove),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryConfigRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"10000\" name=\"Wait\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoReload\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"memoryLimit\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WarnTimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQueryConfigRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryConfigRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQueryConfigRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Wait");
	form.appendf("  <tr><td><b>Wait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"10000\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoReload");
	
	form.appendf("  <tr><td><b>NoReload? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("memoryLimit");
	form.appendf("  <tr><td><b>memoryLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimit");
	form.appendf("  <tr><td><b>TimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimit");
	form.appendf("  <tr><td><b>WarnTimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Priority");
	form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryConfigRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryConfigRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	m_Wait.marshall(rpc_resp, "Wait", "", "", "");
	m_NoReload.marshall(rpc_resp, "NoReload", "", "", "");
	m_memoryLimit.marshall(rpc_resp, "memoryLimit", "", "", "");
	m_TimeLimit.marshall(rpc_resp, "TimeLimit", "", "", "");
	m_WarnTimeLimit.marshall(rpc_resp, "WarnTimeLimit", "", "", "");
	m_Priority.marshall(rpc_resp, "Priority", "", "", "");
	m_Comment.marshall(rpc_resp, "Comment", "", "", "");
}


void CWUQueryConfigRequest::copy(CWUQueryConfigRequest &from)
{
	m_Target.copy(from.m_Target);
	m_QueryId.copy(from.m_QueryId);
	m_Wait.copy(from.m_Wait);
	m_NoReload.copy(from.m_NoReload);
	m_memoryLimit.copy(from.m_memoryLimit);
	m_TimeLimit.copy(from.m_TimeLimit);
	m_WarnTimeLimit.copy(from.m_WarnTimeLimit);
	m_Priority.copy(from.m_Priority);
	m_Comment.copy(from.m_Comment);
}


void CWUQueryConfigRequest::copy(IConstWUQueryConfigRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setQueryId(ifrom.getQueryId());
	setWait(ifrom.getWait());
	setNoReload(ifrom.getNoReload());
	setMemoryLimit(ifrom.getMemoryLimit());
	setTimeLimit(ifrom.getTimeLimit());
	setWarnTimeLimit(ifrom.getWarnTimeLimit());
	setPriority(ifrom.getPriority());
	setComment(ifrom.getComment());
}


void CWUQueryConfigRequest::getAttributes(IProperties &attributes)
{
}


void CWUQueryConfigRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	m_Wait.toStr(ctx, buffer, "Wait", "", true, "", "");
	m_NoReload.toStr(ctx, buffer, "NoReload", "", true, "", "");
	m_memoryLimit.toStr(ctx, buffer, "memoryLimit", "", true, "", "");
	m_TimeLimit.toStr(ctx, buffer, "TimeLimit", "", true, "", "");
	m_WarnTimeLimit.toStr(ctx, buffer, "WarnTimeLimit", "", true, "", "");
	m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
	m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
}


void CWUQueryConfigRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryConfigRequest::serializer(IEspContext* ctx, IConstWUQueryConfigRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryConfigRequest>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field Wait
	{
		int n = src.getWait();
		if (n)
			buffer.appendf("<Wait>%d</Wait>", n);
	}
	// field NoReload
	{
		bool b = src.getNoReload();
		if (b)
			buffer.appendf("<NoReload>1</NoReload>");
	}
	// field memoryLimit
	{
		const char* s = src.getMemoryLimit();
		if (s && *s)
		{
			buffer.append("<memoryLimit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</memoryLimit>");
		}
	}
	// field TimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimit
		buffer.append("<TimeLimit>");
		buffer.append(src.getTimeLimit());
		buffer.append("</TimeLimit>");
	}
	// field WarnTimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimit
		buffer.append("<WarnTimeLimit>");
		buffer.append(src.getWarnTimeLimit());
		buffer.append("</WarnTimeLimit>");
	}
	// field Priority
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<Priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Priority>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUQueryConfigRequest>");
}

bool CWUQueryConfigRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_Wait.unmarshall(rpc_request, "Wait", basepath);
	hasValue |= m_NoReload.unmarshall(rpc_request, "NoReload", basepath);
	hasValue |= m_memoryLimit.unmarshall(rpc_request, "memoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(rpc_request, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(rpc_request, "WarnTimeLimit", basepath);
	hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
	hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
	return hasValue;
}

bool CWUQueryConfigRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_Wait.unmarshall(ctx, soapval, "Wait");
	hasValue |= m_NoReload.unmarshall(ctx, soapval, "NoReload");
	hasValue |= m_memoryLimit.unmarshall(ctx, soapval, "memoryLimit");
	hasValue |= m_TimeLimit.unmarshall(ctx, soapval, "TimeLimit");
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, soapval, "WarnTimeLimit");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	return hasValue;
}

bool CWUQueryConfigRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_Wait.unmarshall(ctx, params, attachments, "Wait", basepath);
	hasValue |= m_NoReload.unmarshall(ctx, params, attachments, "NoReload", basepath);
	hasValue |= m_memoryLimit.unmarshall(ctx, params, attachments, "memoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(ctx, params, attachments, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, params, attachments, "WarnTimeLimit", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	return hasValue;
}

const char * CWUQueryConfigRequest::getTarget() { return m_Target.query();}
const char * CWUQueryConfigRequest::getQueryId() { return m_QueryId.query();}
bool CWUQueryConfigRequest::getWait_isNull(){return m_Wait.is_nil();}
int CWUQueryConfigRequest::getWait() { return m_Wait;}
bool CWUQueryConfigRequest::getNoReload_isNull(){return m_NoReload.is_nil();}
bool CWUQueryConfigRequest::getNoReload() { return m_NoReload;}
const char * CWUQueryConfigRequest::getMemoryLimit() { return m_memoryLimit.query();}
bool CWUQueryConfigRequest::getTimeLimit_isNull(){return m_TimeLimit.is_nil();}
unsigned int CWUQueryConfigRequest::getTimeLimit() { return m_TimeLimit;}
bool CWUQueryConfigRequest::getWarnTimeLimit_isNull(){return m_WarnTimeLimit.is_nil();}
unsigned int CWUQueryConfigRequest::getWarnTimeLimit() { return m_WarnTimeLimit;}
const char * CWUQueryConfigRequest::getPriority() { return m_Priority.query();}
const char * CWUQueryConfigRequest::getComment() { return m_Comment.query();}
void CWUQueryConfigRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUQueryConfigRequest::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUQueryConfigRequest::setWait_null(){ m_Wait.Nil(); }void CWUQueryConfigRequest::setWait(int val){ m_Wait=val; }
void CWUQueryConfigRequest::setNoReload_null(){ m_NoReload.Nil(); }void CWUQueryConfigRequest::setNoReload(bool val){ m_NoReload=val; }
void CWUQueryConfigRequest::setMemoryLimit(const char * val){ m_memoryLimit.set(val); }
void CWUQueryConfigRequest::setTimeLimit_null(){ m_TimeLimit.Nil(); }void CWUQueryConfigRequest::setTimeLimit(unsigned int val){ m_TimeLimit=val; }
void CWUQueryConfigRequest::setWarnTimeLimit_null(){ m_WarnTimeLimit.Nil(); }void CWUQueryConfigRequest::setWarnTimeLimit(unsigned int val){ m_WarnTimeLimit=val; }
void CWUQueryConfigRequest::setPriority(const char * val){ m_Priority.set(val); }
void CWUQueryConfigRequest::setComment(const char * val){ m_Comment.set(val); }
extern "C"  IEspWUQueryConfigRequest *createWUQueryConfigRequest(const char *serv){return ((IEspWUQueryConfigRequest *)new CWUQueryConfigRequest(serv));}
extern "C"  IClientWUQueryConfigRequest *createClientWUQueryConfigRequest(const char *serv){return ((IClientWUQueryConfigRequest *)new CWUQueryConfigRequest(serv));}

//=======================================================
// class CWUQueryConfigResult Implementation
//=======================================================

CWUQueryConfigResult::CWUQueryConfigResult(const char *serviceName, IRpcMessageBinding *init)
	: m_QueryId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigResult");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryConfigResult::CWUQueryConfigResult(const char *serviceName, const char *bc)
	: m_QueryId(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigResult");
}

StringBuffer &CWUQueryConfigResult::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUQueryConfigResult::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryConfigResult::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQueryConfigResult::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryConfigResult::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryConfigResult::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
}


void CWUQueryConfigResult::copy(CWUQueryConfigResult &from)
{
	m_QueryId.copy(from.m_QueryId);
}


void CWUQueryConfigResult::copy(IConstWUQueryConfigResult &ifrom)
{
	setQueryId(ifrom.getQueryId());
}


void CWUQueryConfigResult::getAttributes(IProperties &attributes)
{
}


void CWUQueryConfigResult::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
}


void CWUQueryConfigResult::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryConfigResult::serializer(IEspContext* ctx, IConstWUQueryConfigResult &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryConfigResult>");
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUQueryConfigResult>");
}

bool CWUQueryConfigResult::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	return hasValue;
}

bool CWUQueryConfigResult::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	return hasValue;
}

bool CWUQueryConfigResult::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	return hasValue;
}

const char * CWUQueryConfigResult::getQueryId() { return m_QueryId.query();}
void CWUQueryConfigResult::setQueryId(const char * val){ m_QueryId.set(val); }
extern "C"  IEspWUQueryConfigResult *createWUQueryConfigResult(const char *serv, const char *msgname){return ((IEspWUQueryConfigResult *)new CWUQueryConfigResult(serv /*, msgname*/));}
extern "C"  IClientWUQueryConfigResult *createClientWUQueryConfigResult(const char *serv, const char *msgname){return ((IClientWUQueryConfigResult *)new CWUQueryConfigResult(serv /*, msgname*/));}

//=======================================================
// class CWUQueryConfigResponse Implementation
//=======================================================

CWUQueryConfigResponse::CWUQueryConfigResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ReloadFailed(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryConfigResponse::CWUQueryConfigResponse(const char *serviceName, const char *bc)
	: m_ReloadFailed(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigResponse");
}

CWUQueryConfigResponse::CWUQueryConfigResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ReloadFailed(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryConfigResponse::CWUQueryConfigResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ReloadFailed(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryConfigResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryConfigResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ReloadFailed\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Results\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Result\" type=\"tns:WUQueryConfigResult\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUQueryConfigResult::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQueryConfigResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryConfigResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUQueryConfigResult"))
	{
		added.setValue("WUQueryConfigResult",1);
		CWUQueryConfigResult::getMapInfo(info,added);
	}
}

StringBuffer &CWUQueryConfigResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ReloadFailed");
	
	form.appendf("  <tr><td><b>ReloadFailed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Results");
	form.appendf("<tr><td><b>Results: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryConfigResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryConfigResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ReloadFailed.marshall(rpc_resp, "ReloadFailed", "", "", "");
		m_Results.marshall(rpc_resp, "Results", "Result");
	}
}


void CWUQueryConfigResponse::copy(CWUQueryConfigResponse &from)
{
	m_ReloadFailed.copy(from.m_ReloadFailed);
	m_Results.copy(from.m_Results);
}


void CWUQueryConfigResponse::copy(IConstWUQueryConfigResponse &ifrom)
{
	setReloadFailed(ifrom.getReloadFailed());
	setResults(ifrom.getResults());
}


void CWUQueryConfigResponse::getAttributes(IProperties &attributes)
{
}


void CWUQueryConfigResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ReloadFailed.toStr(ctx, buffer, "ReloadFailed", "", true, "", "");
		m_Results.toStr(ctx, buffer, "Results", "Result");
	}
}


void CWUQueryConfigResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryConfigResponse::serializer(IEspContext* ctx, IConstWUQueryConfigResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryConfigResponse>");
	// field ReloadFailed
	{
		bool b = src.getReloadFailed();
		if (b)
			buffer.appendf("<ReloadFailed>1</ReloadFailed>");
	}
	// field Results
	{
		IArrayOf<IConstWUQueryConfigResult>& v = src.getResults();
		int size = v.length();
		if (size>0)
			buffer.append("<Results>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Result>");
			CWUQueryConfigResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Result>");
		}
		if (size>0)
			buffer.append("</Results>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryConfigResponse>");
}

bool CWUQueryConfigResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ReloadFailed.unmarshall(rpc_request, "ReloadFailed", basepath);
		hasValue |= m_Results.unmarshall(rpc_request, "Results", basepath);
	}
	return hasValue;
}

bool CWUQueryConfigResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ReloadFailed.unmarshall(ctx, soapval, "ReloadFailed");
	hasValue |= m_Results.unmarshall(ctx, soapval, "Results");
	return hasValue;
}

bool CWUQueryConfigResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ReloadFailed.unmarshall(ctx, params, attachments, "ReloadFailed", basepath);
	hasValue |= m_Results.unmarshall(ctx, params, attachments, "Results", basepath);
	return hasValue;
}

bool CWUQueryConfigResponse::getReloadFailed() { return m_ReloadFailed;}
IArrayOf<IConstWUQueryConfigResult> & CWUQueryConfigResponse::getResults() { return (IArrayOf<IConstWUQueryConfigResult> &) m_Results; }
void CWUQueryConfigResponse::setReloadFailed(bool val){ m_ReloadFailed=val; }
void CWUQueryConfigResponse::setResults(IArrayOf<IEspWUQueryConfigResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstWUQueryConfigResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUQueryConfigResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryConfigResponse::setResults(IArrayOf<IConstWUQueryConfigResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstWUQueryConfigResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUQueryConfigResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQueryConfigResponse *createWUQueryConfigResponse(const char *serv){return ((IEspWUQueryConfigResponse *)new CWUQueryConfigResponse(serv));}
extern "C"  IClientWUQueryConfigResponse *createClientWUQueryConfigResponse(const char *serv){return ((IClientWUQueryConfigResponse *)new CWUQueryConfigResponse(serv));}

//=======================================================
// class CQuerySet Implementation
//=======================================================

CQuerySet::CQuerySet(const char *serviceName, IRpcMessageBinding *init)
	: m_QuerySetName(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySet");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySet::CQuerySet(const char *serviceName, const char *bc)
	: m_QuerySetName(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySet");
}

StringBuffer &CQuerySet::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySet::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySet::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQuerySet::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySet::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySet::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
}


void CQuerySet::copy(CQuerySet &from)
{
	m_QuerySetName.copy(from.m_QuerySetName);
}


void CQuerySet::copy(IConstQuerySet &ifrom)
{
	setQuerySetName(ifrom.getQuerySetName());
}


void CQuerySet::getAttributes(IProperties &attributes)
{
}


void CQuerySet::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
}


void CQuerySet::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySet::serializer(IEspContext* ctx, IConstQuerySet &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySet>");
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	if (keepRootTag)
		buffer.append("</QuerySet>");
}

bool CQuerySet::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
	return hasValue;
}

bool CQuerySet::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	return hasValue;
}

bool CQuerySet::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	return hasValue;
}

const char * CQuerySet::getQuerySetName() { return m_QuerySetName.query();}
void CQuerySet::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
extern "C"  IEspQuerySet *createQuerySet(const char *serv, const char *msgname){return ((IEspQuerySet *)new CQuerySet(serv /*, msgname*/));}
extern "C"  IClientQuerySet *createClientQuerySet(const char *serv, const char *msgname){return ((IClientQuerySet *)new CQuerySet(serv /*, msgname*/));}

//=======================================================
// class CWUQuerysetsRequest Implementation
//=======================================================

CWUQuerysetsRequest::CWUQuerysetsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_test(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerysetsRequest::CWUQuerysetsRequest(const char *serviceName, const char *bc)
	: m_test(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsRequest");
}

CWUQuerysetsRequest::CWUQuerysetsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_test(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerysetsRequest::CWUQuerysetsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_test(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerysetsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"test\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQuerysetsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerysetsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQuerysetsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("test");
	
	form.appendf("  <tr><td><b>test? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerysetsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerysetsRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_test.marshall(rpc_resp, "test", "", "", "");
}


void CWUQuerysetsRequest::copy(CWUQuerysetsRequest &from)
{
	m_test.copy(from.m_test);
}


void CWUQuerysetsRequest::copy(IConstWUQuerysetsRequest &ifrom)
{
	setTest(ifrom.getTest());
}


void CWUQuerysetsRequest::getAttributes(IProperties &attributes)
{
}


void CWUQuerysetsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_test.toStr(ctx, buffer, "test", "", true, "", "");
}


void CWUQuerysetsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerysetsRequest::serializer(IEspContext* ctx, IConstWUQuerysetsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerysetsRequest>");
	// field test
	{
		bool b = src.getTest();
		if (b)
			buffer.appendf("<test>1</test>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerysetsRequest>");
}

bool CWUQuerysetsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_test.unmarshall(rpc_request, "test", basepath);
	return hasValue;
}

bool CWUQuerysetsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_test.unmarshall(ctx, soapval, "test");
	return hasValue;
}

bool CWUQuerysetsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_test.unmarshall(ctx, params, attachments, "test", basepath);
	return hasValue;
}

bool CWUQuerysetsRequest::getTest() { return m_test;}
void CWUQuerysetsRequest::setTest(bool val){ m_test=val; }
extern "C"  IEspWUQuerysetsRequest *createWUQuerysetsRequest(const char *serv){return ((IEspWUQuerysetsRequest *)new CWUQuerysetsRequest(serv));}
extern "C"  IClientWUQuerysetsRequest *createClientWUQuerysetsRequest(const char *serv){return ((IClientWUQuerysetsRequest *)new CWUQuerysetsRequest(serv));}

//=======================================================
// class CWUQuerysetsResponse Implementation
//=======================================================

CWUQuerysetsResponse::CWUQuerysetsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerysetsResponse::CWUQuerysetsResponse(const char *serviceName, const char *bc)
	: m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsResponse");
}

CWUQuerysetsResponse::CWUQuerysetsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerysetsResponse::CWUQuerysetsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerysetsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Querysets\" type=\"tns:ArrayOfQuerySet\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CQuerySet::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("QuerySet") && added.getValue("ArrayOfQuerySet")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQuerySet\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QuerySet\" type=\"tns:QuerySet\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQuerySet",1);
	}
	return schema;
}

void CWUQuerysetsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerysetsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySet"))
	{
		added.setValue("QuerySet",1);
		CQuerySet::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerysetsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Querysets");
	form.appendf("<tr><td><b>Querysets: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerysetsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerysetsResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Querysets.marshall(rpc_resp, "Querysets", "QuerySet");
	}
}


void CWUQuerysetsResponse::copy(CWUQuerysetsResponse &from)
{
	m_Querysets.copy(from.m_Querysets);
}


void CWUQuerysetsResponse::copy(IConstWUQuerysetsResponse &ifrom)
{
	setQuerysets(ifrom.getQuerysets());
}


void CWUQuerysetsResponse::getAttributes(IProperties &attributes)
{
}


void CWUQuerysetsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Querysets.toStr(ctx, buffer, "Querysets", "QuerySet");
	}
}


void CWUQuerysetsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerysetsResponse::serializer(IEspContext* ctx, IConstWUQuerysetsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerysetsResponse>");
	// field Querysets
	{
		IArrayOf<IConstQuerySet>& v = src.getQuerysets();
		int size = v.length();
		if (size>0)
			buffer.append("<Querysets>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQuerySet::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Querysets>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerysetsResponse>");
}

bool CWUQuerysetsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Querysets.unmarshall(rpc_request, "Querysets", basepath);
	}
	return hasValue;
}

bool CWUQuerysetsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Querysets.unmarshall(ctx, soapval, "Querysets");
	return hasValue;
}

bool CWUQuerysetsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Querysets.unmarshall(ctx, params, attachments, "Querysets", basepath);
	return hasValue;
}

IArrayOf<IConstQuerySet> & CWUQuerysetsResponse::getQuerysets() { return (IArrayOf<IConstQuerySet> &) m_Querysets; }
void CWUQuerysetsResponse::setQuerysets(IArrayOf<IEspQuerySet> &val)
{
	m_Querysets->kill();
	IArrayOf<IConstQuerySet> &target = m_Querysets.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySet &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerysetsResponse::setQuerysets(IArrayOf<IConstQuerySet> &val)
{
	m_Querysets->kill();
	IArrayOf<IConstQuerySet> &target = m_Querysets.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySet &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerysetsResponse *createWUQuerysetsResponse(const char *serv){return ((IEspWUQuerysetsResponse *)new CWUQuerysetsResponse(serv));}
extern "C"  IClientWUQuerysetsResponse *createClientWUQuerysetsResponse(const char *serv){return ((IClientWUQuerysetsResponse *)new CWUQuerysetsResponse(serv));}

//=======================================================
// class CClusterQueryState Implementation
//=======================================================

CClusterQueryState::CClusterQueryState(const char *serviceName, IRpcMessageBinding *init)
	: m_Cluster(nilIgnore),m_State(nilIgnore),m_Errors(nilIgnore),m_MixedNodeStates(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ClusterQueryState");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CClusterQueryState::CClusterQueryState(const char *serviceName, const char *bc)
	: m_Cluster(nilIgnore),m_State(nilIgnore),m_Errors(nilIgnore),m_MixedNodeStates(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ClusterQueryState");
}

StringBuffer &CClusterQueryState::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"State\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("ClusterQueryState","Errors")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Errors\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("ClusterQueryState","MixedNodeStates")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MixedNodeStates\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CClusterQueryState::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CClusterQueryState::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("ClusterQueryState","Errors",1.46);
	info.addMinVersion("ClusterQueryState","MixedNodeStates",1.47);
}

StringBuffer &CClusterQueryState::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("State");
	form.appendf("  <tr><td><b>State: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("ClusterQueryState","Errors")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Errors");
		form.appendf("  <tr><td><b>Errors: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("ClusterQueryState","MixedNodeStates")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MixedNodeStates");
		
	form.appendf("  <tr><td><b>MixedNodeStates? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CClusterQueryState::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CClusterQueryState::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_State.marshall(rpc_resp, "State", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_Errors.marshall(rpc_resp, "Errors", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.47))
		m_MixedNodeStates.marshall(rpc_resp, "MixedNodeStates", "", "", "");
}


void CClusterQueryState::copy(CClusterQueryState &from)
{
	m_Cluster.copy(from.m_Cluster);
	m_State.copy(from.m_State);
	m_Errors.copy(from.m_Errors);
	m_MixedNodeStates.copy(from.m_MixedNodeStates);
}


void CClusterQueryState::copy(IConstClusterQueryState &ifrom)
{
	setCluster(ifrom.getCluster());
	setState(ifrom.getState());
	setErrors(ifrom.getErrors());
	setMixedNodeStates(ifrom.getMixedNodeStates());
}


void CClusterQueryState::getAttributes(IProperties &attributes)
{
}


void CClusterQueryState::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_State.toStr(ctx, buffer, "State", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_Errors.toStr(ctx, buffer, "Errors", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.47))
		m_MixedNodeStates.toStr(ctx, buffer, "MixedNodeStates", "", true, "", "");
}


void CClusterQueryState::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CClusterQueryState::serializer(IEspContext* ctx, IConstClusterQueryState &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ClusterQueryState>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field State
	{
		const char* s = src.getState();
		if (s && *s)
		{
			buffer.append("<State>");
			encodeUtf8XML(s,buffer);
			buffer.append("</State>");
		}
	}
	// field Errors
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		const char* s = src.getErrors();
		if (s && *s)
		{
			buffer.append("<Errors>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Errors>");
		}
	}
	// field MixedNodeStates
	if ((clientVer==-1.0 || clientVer>=1.47))
	{
		bool b = src.getMixedNodeStates();
		if (b)
			buffer.appendf("<MixedNodeStates>1</MixedNodeStates>");
	}
	if (keepRootTag)
		buffer.append("</ClusterQueryState>");
}

bool CClusterQueryState::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_State.unmarshall(rpc_request, "State", basepath);
	hasValue |= m_Errors.unmarshall(rpc_request, "Errors", basepath);
	hasValue |= m_MixedNodeStates.unmarshall(rpc_request, "MixedNodeStates", basepath);
	return hasValue;
}

bool CClusterQueryState::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_State.unmarshall(ctx, soapval, "State");
	hasValue |= m_Errors.unmarshall(ctx, soapval, "Errors");
	hasValue |= m_MixedNodeStates.unmarshall(ctx, soapval, "MixedNodeStates");
	return hasValue;
}

bool CClusterQueryState::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_State.unmarshall(ctx, params, attachments, "State", basepath);
	hasValue |= m_Errors.unmarshall(ctx, params, attachments, "Errors", basepath);
	hasValue |= m_MixedNodeStates.unmarshall(ctx, params, attachments, "MixedNodeStates", basepath);
	return hasValue;
}

const char * CClusterQueryState::getCluster() { return m_Cluster.query();}
const char * CClusterQueryState::getState() { return m_State.query();}
const char * CClusterQueryState::getErrors() { return m_Errors.query();}
bool CClusterQueryState::getMixedNodeStates() { return m_MixedNodeStates;}
void CClusterQueryState::setCluster(const char * val){ m_Cluster.set(val); }
void CClusterQueryState::setState(const char * val){ m_State.set(val); }
void CClusterQueryState::setErrors(const char * val){ m_Errors.set(val); }
void CClusterQueryState::setMixedNodeStates(bool val){ m_MixedNodeStates=val; }
extern "C"  IEspClusterQueryState *createClusterQueryState(const char *serv, const char *msgname){return ((IEspClusterQueryState *)new CClusterQueryState(serv /*, msgname*/));}
extern "C"  IClientClusterQueryState *createClientClusterQueryState(const char *serv, const char *msgname){return ((IClientClusterQueryState *)new CClusterQueryState(serv /*, msgname*/));}

//=======================================================
// class CQuerySetQuery Implementation
//=======================================================

CQuerySetQuery::CQuerySetQuery(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilRemove),m_Name(nilRemove),m_Wuid(nilRemove),m_Dll(nilRemove),m_Suspended(nilRemove),m_Clusters(nilRemove),m_memoryLimit(nilRemove),m_timeLimit(nilRemove),m_warnTimeLimit(nilRemove),m_priority(nilRemove),m_Comment(nilRemove),m_QuerySetId(nilRemove),m_IsLibrary(nilRemove),m_Activated(nilRemove),m_PublishedBy(nilRemove),m_snapshot(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQuery");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySetQuery::CQuerySetQuery(const char *serviceName, const char *bc)
	: m_Id(nilRemove),m_Name(nilRemove),m_Wuid(nilRemove),m_Dll(nilRemove),m_Suspended(nilRemove),m_Clusters(nilRemove),m_memoryLimit(nilRemove),m_timeLimit(nilRemove),m_warnTimeLimit(nilRemove),m_priority(nilRemove),m_Comment(nilRemove),m_QuerySetId(nilRemove),m_IsLibrary(nilRemove),m_Activated(nilRemove),m_PublishedBy(nilRemove),m_snapshot(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQuery");
}

StringBuffer &CQuerySetQuery::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Dll\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Suspended\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Clusters\" type=\"tns:ArrayOfClusterQueryState\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"memoryLimit\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"timeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"warnTimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"priority\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("QuerySetQuery","QuerySetId")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetId\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("QuerySetQuery","IsLibrary")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsLibrary\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("QuerySetQuery","Activated")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Activated\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("QuerySetQuery","PublishedBy")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PublishedBy\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("QuerySetQuery","snapshot")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"snapshot\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CClusterQueryState::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("ClusterQueryState") && added.getValue("ArrayOfClusterQueryState")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfClusterQueryState\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ClusterQueryState\" type=\"tns:ClusterQueryState\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfClusterQueryState",1);
	}
	return schema;
}

void CQuerySetQuery::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySetQuery::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("QuerySetQuery","QuerySetId",1.45);
	info.addMinVersion("QuerySetQuery","IsLibrary",1.46);
	info.addMinVersion("QuerySetQuery","Activated",1.46);
	info.addMinVersion("QuerySetQuery","PublishedBy",1.46);
	info.addMinVersion("QuerySetQuery","snapshot",1.48);
	if (!added.getValue("ClusterQueryState"))
	{
		added.setValue("ClusterQueryState",1);
		CClusterQueryState::getMapInfo(info,added);
	}
}

StringBuffer &CQuerySetQuery::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Dll");
	form.appendf("  <tr><td><b>Dll: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Suspended");
	
	form.appendf("  <tr><td><b>Suspended? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Clusters");
	form.appendf("<tr><td><b>Clusters: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("memoryLimit");
	form.appendf("  <tr><td><b>memoryLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("timeLimit");
	form.appendf("  <tr><td><b>timeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("warnTimeLimit");
	form.appendf("  <tr><td><b>warnTimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("priority");
	form.appendf("  <tr><td><b>priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("QuerySetQuery","QuerySetId")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QuerySetId");
		form.appendf("  <tr><td><b>QuerySetId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("QuerySetQuery","IsLibrary")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsLibrary");
		
	form.appendf("  <tr><td><b>IsLibrary? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("QuerySetQuery","Activated")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Activated");
		
	form.appendf("  <tr><td><b>Activated? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("QuerySetQuery","PublishedBy")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PublishedBy");
		form.appendf("  <tr><td><b>PublishedBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("QuerySetQuery","snapshot")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("snapshot");
		form.appendf("  <tr><td><b>snapshot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySetQuery::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySetQuery::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_Dll.marshall(rpc_resp, "Dll", "", "", "");
	m_Suspended.marshall(rpc_resp, "Suspended", "", "", "");
	m_Clusters.marshall(rpc_resp, "Clusters", "ClusterQueryState");
	m_memoryLimit.marshall(rpc_resp, "memoryLimit", "", "", "");
	m_timeLimit.marshall(rpc_resp, "timeLimit", "", "", "");
	m_warnTimeLimit.marshall(rpc_resp, "warnTimeLimit", "", "", "");
	m_priority.marshall(rpc_resp, "priority", "", "", "");
	m_Comment.marshall(rpc_resp, "Comment", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.45))
		m_QuerySetId.marshall(rpc_resp, "QuerySetId", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_IsLibrary.marshall(rpc_resp, "IsLibrary", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_Activated.marshall(rpc_resp, "Activated", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_PublishedBy.marshall(rpc_resp, "PublishedBy", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.48))
		m_snapshot.marshall(rpc_resp, "snapshot", "", "", "");
}


void CQuerySetQuery::copy(CQuerySetQuery &from)
{
	m_Id.copy(from.m_Id);
	m_Name.copy(from.m_Name);
	m_Wuid.copy(from.m_Wuid);
	m_Dll.copy(from.m_Dll);
	m_Suspended.copy(from.m_Suspended);
	m_Clusters.copy(from.m_Clusters);
	m_memoryLimit.copy(from.m_memoryLimit);
	m_timeLimit.copy(from.m_timeLimit);
	m_warnTimeLimit.copy(from.m_warnTimeLimit);
	m_priority.copy(from.m_priority);
	m_Comment.copy(from.m_Comment);
	m_QuerySetId.copy(from.m_QuerySetId);
	m_IsLibrary.copy(from.m_IsLibrary);
	m_Activated.copy(from.m_Activated);
	m_PublishedBy.copy(from.m_PublishedBy);
	m_snapshot.copy(from.m_snapshot);
}


void CQuerySetQuery::copy(IConstQuerySetQuery &ifrom)
{
	setId(ifrom.getId());
	setName(ifrom.getName());
	setWuid(ifrom.getWuid());
	setDll(ifrom.getDll());
	setSuspended(ifrom.getSuspended());
	setClusters(ifrom.getClusters());
	setMemoryLimit(ifrom.getMemoryLimit());
	setTimeLimit(ifrom.getTimeLimit());
	setWarnTimeLimit(ifrom.getWarnTimeLimit());
	setPriority(ifrom.getPriority());
	setComment(ifrom.getComment());
	setQuerySetId(ifrom.getQuerySetId());
	setIsLibrary(ifrom.getIsLibrary());
	setActivated(ifrom.getActivated());
	setPublishedBy(ifrom.getPublishedBy());
	setSnapshot(ifrom.getSnapshot());
}


void CQuerySetQuery::getAttributes(IProperties &attributes)
{
}


void CQuerySetQuery::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_Dll.toStr(ctx, buffer, "Dll", "", true, "", "");
	m_Suspended.toStr(ctx, buffer, "Suspended", "", true, "", "");
	m_Clusters.toStr(ctx, buffer, "Clusters", "ClusterQueryState");
	m_memoryLimit.toStr(ctx, buffer, "memoryLimit", "", true, "", "");
	m_timeLimit.toStr(ctx, buffer, "timeLimit", "", true, "", "");
	m_warnTimeLimit.toStr(ctx, buffer, "warnTimeLimit", "", true, "", "");
	m_priority.toStr(ctx, buffer, "priority", "", true, "", "");
	m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.45))
		m_QuerySetId.toStr(ctx, buffer, "QuerySetId", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_IsLibrary.toStr(ctx, buffer, "IsLibrary", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_Activated.toStr(ctx, buffer, "Activated", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.46))
		m_PublishedBy.toStr(ctx, buffer, "PublishedBy", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.48))
		m_snapshot.toStr(ctx, buffer, "snapshot", "", true, "", "");
}


void CQuerySetQuery::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySetQuery::serializer(IEspContext* ctx, IConstQuerySetQuery &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySetQuery>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Dll
	{
		const char* s = src.getDll();
		if (s && *s)
		{
			buffer.append("<Dll>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Dll>");
		}
	}
	// field Suspended
	{
		bool b = src.getSuspended();
		if (b)
			buffer.appendf("<Suspended>1</Suspended>");
	}
	// field Clusters
	{
		IArrayOf<IConstClusterQueryState>& v = src.getClusters();
		int size = v.length();
		if (size>0)
			buffer.append("<Clusters>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CClusterQueryState::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Clusters>");
	}
	// field memoryLimit
	{
		const char* s = src.getMemoryLimit();
		if (s && *s)
		{
			buffer.append("<memoryLimit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</memoryLimit>");
		}
	}
	// field timeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimit
		buffer.append("<timeLimit>");
		buffer.append(src.getTimeLimit());
		buffer.append("</timeLimit>");
	}
	// field warnTimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimit
		buffer.append("<warnTimeLimit>");
		buffer.append(src.getWarnTimeLimit());
		buffer.append("</warnTimeLimit>");
	}
	// field priority
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</priority>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	// field QuerySetId
	if ((clientVer==-1.0 || clientVer>=1.45))
	{
		const char* s = src.getQuerySetId();
		if (s && *s)
		{
			buffer.append("<QuerySetId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetId>");
		}
	}
	// field IsLibrary
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		bool b = src.getIsLibrary();
		if (b)
			buffer.appendf("<IsLibrary>1</IsLibrary>");
	}
	// field Activated
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		bool b = src.getActivated();
		if (b)
			buffer.appendf("<Activated>1</Activated>");
	}
	// field PublishedBy
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		const char* s = src.getPublishedBy();
		if (s && *s)
		{
			buffer.append("<PublishedBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PublishedBy>");
		}
	}
	// field snapshot
	if ((clientVer==-1.0 || clientVer>=1.48))
	{
		const char* s = src.getSnapshot();
		if (s && *s)
		{
			buffer.append("<snapshot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</snapshot>");
		}
	}
	if (keepRootTag)
		buffer.append("</QuerySetQuery>");
}

bool CQuerySetQuery::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_Dll.unmarshall(rpc_request, "Dll", basepath);
	hasValue |= m_Suspended.unmarshall(rpc_request, "Suspended", basepath);
	hasValue |= m_Clusters.unmarshall(rpc_request, "Clusters", basepath);
	hasValue |= m_memoryLimit.unmarshall(rpc_request, "memoryLimit", basepath);
	hasValue |= m_timeLimit.unmarshall(rpc_request, "timeLimit", basepath);
	hasValue |= m_warnTimeLimit.unmarshall(rpc_request, "warnTimeLimit", basepath);
	hasValue |= m_priority.unmarshall(rpc_request, "priority", basepath);
	hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
	hasValue |= m_QuerySetId.unmarshall(rpc_request, "QuerySetId", basepath);
	hasValue |= m_IsLibrary.unmarshall(rpc_request, "IsLibrary", basepath);
	hasValue |= m_Activated.unmarshall(rpc_request, "Activated", basepath);
	hasValue |= m_PublishedBy.unmarshall(rpc_request, "PublishedBy", basepath);
	hasValue |= m_snapshot.unmarshall(rpc_request, "snapshot", basepath);
	return hasValue;
}

bool CQuerySetQuery::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Dll.unmarshall(ctx, soapval, "Dll");
	hasValue |= m_Suspended.unmarshall(ctx, soapval, "Suspended");
	hasValue |= m_Clusters.unmarshall(ctx, soapval, "Clusters");
	hasValue |= m_memoryLimit.unmarshall(ctx, soapval, "memoryLimit");
	hasValue |= m_timeLimit.unmarshall(ctx, soapval, "timeLimit");
	hasValue |= m_warnTimeLimit.unmarshall(ctx, soapval, "warnTimeLimit");
	hasValue |= m_priority.unmarshall(ctx, soapval, "priority");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	hasValue |= m_QuerySetId.unmarshall(ctx, soapval, "QuerySetId");
	hasValue |= m_IsLibrary.unmarshall(ctx, soapval, "IsLibrary");
	hasValue |= m_Activated.unmarshall(ctx, soapval, "Activated");
	hasValue |= m_PublishedBy.unmarshall(ctx, soapval, "PublishedBy");
	hasValue |= m_snapshot.unmarshall(ctx, soapval, "snapshot");
	return hasValue;
}

bool CQuerySetQuery::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Dll.unmarshall(ctx, params, attachments, "Dll", basepath);
	hasValue |= m_Suspended.unmarshall(ctx, params, attachments, "Suspended", basepath);
	hasValue |= m_Clusters.unmarshall(ctx, params, attachments, "Clusters", basepath);
	hasValue |= m_memoryLimit.unmarshall(ctx, params, attachments, "memoryLimit", basepath);
	hasValue |= m_timeLimit.unmarshall(ctx, params, attachments, "timeLimit", basepath);
	hasValue |= m_warnTimeLimit.unmarshall(ctx, params, attachments, "warnTimeLimit", basepath);
	hasValue |= m_priority.unmarshall(ctx, params, attachments, "priority", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	hasValue |= m_QuerySetId.unmarshall(ctx, params, attachments, "QuerySetId", basepath);
	hasValue |= m_IsLibrary.unmarshall(ctx, params, attachments, "IsLibrary", basepath);
	hasValue |= m_Activated.unmarshall(ctx, params, attachments, "Activated", basepath);
	hasValue |= m_PublishedBy.unmarshall(ctx, params, attachments, "PublishedBy", basepath);
	hasValue |= m_snapshot.unmarshall(ctx, params, attachments, "snapshot", basepath);
	return hasValue;
}

const char * CQuerySetQuery::getId() { return m_Id.query();}
const char * CQuerySetQuery::getName() { return m_Name.query();}
const char * CQuerySetQuery::getWuid() { return m_Wuid.query();}
const char * CQuerySetQuery::getDll() { return m_Dll.query();}
bool CQuerySetQuery::getSuspended_isNull(){return m_Suspended.is_nil();}
bool CQuerySetQuery::getSuspended() { return m_Suspended;}
IArrayOf<IConstClusterQueryState> & CQuerySetQuery::getClusters() { return (IArrayOf<IConstClusterQueryState> &) m_Clusters; }
const char * CQuerySetQuery::getMemoryLimit() { return m_memoryLimit.query();}
bool CQuerySetQuery::getTimeLimit_isNull(){return m_timeLimit.is_nil();}
unsigned int CQuerySetQuery::getTimeLimit() { return m_timeLimit;}
bool CQuerySetQuery::getWarnTimeLimit_isNull(){return m_warnTimeLimit.is_nil();}
unsigned int CQuerySetQuery::getWarnTimeLimit() { return m_warnTimeLimit;}
const char * CQuerySetQuery::getPriority() { return m_priority.query();}
const char * CQuerySetQuery::getComment() { return m_Comment.query();}
const char * CQuerySetQuery::getQuerySetId() { return m_QuerySetId.query();}
bool CQuerySetQuery::getIsLibrary_isNull(){return m_IsLibrary.is_nil();}
bool CQuerySetQuery::getIsLibrary() { return m_IsLibrary;}
bool CQuerySetQuery::getActivated_isNull(){return m_Activated.is_nil();}
bool CQuerySetQuery::getActivated() { return m_Activated;}
const char * CQuerySetQuery::getPublishedBy() { return m_PublishedBy.query();}
const char * CQuerySetQuery::getSnapshot() { return m_snapshot.query();}
void CQuerySetQuery::setId(const char * val){ m_Id.set(val); }
void CQuerySetQuery::setName(const char * val){ m_Name.set(val); }
void CQuerySetQuery::setWuid(const char * val){ m_Wuid.set(val); }
void CQuerySetQuery::setDll(const char * val){ m_Dll.set(val); }
void CQuerySetQuery::setSuspended_null(){ m_Suspended.Nil(); }void CQuerySetQuery::setSuspended(bool val){ m_Suspended=val; }
void CQuerySetQuery::setClusters(IArrayOf<IEspClusterQueryState> &val)
{
	m_Clusters->kill();
	IArrayOf<IConstClusterQueryState> &target = m_Clusters.getValue();
	ForEachItemIn(idx, val)
	{
		IEspClusterQueryState &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CQuerySetQuery::setClusters(IArrayOf<IConstClusterQueryState> &val)
{
	m_Clusters->kill();
	IArrayOf<IConstClusterQueryState> &target = m_Clusters.getValue();
	ForEachItemIn(idx, val)
	{
		IConstClusterQueryState &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CQuerySetQuery::setMemoryLimit(const char * val){ m_memoryLimit.set(val); }
void CQuerySetQuery::setTimeLimit_null(){ m_timeLimit.Nil(); }void CQuerySetQuery::setTimeLimit(unsigned int val){ m_timeLimit=val; }
void CQuerySetQuery::setWarnTimeLimit_null(){ m_warnTimeLimit.Nil(); }void CQuerySetQuery::setWarnTimeLimit(unsigned int val){ m_warnTimeLimit=val; }
void CQuerySetQuery::setPriority(const char * val){ m_priority.set(val); }
void CQuerySetQuery::setComment(const char * val){ m_Comment.set(val); }
void CQuerySetQuery::setQuerySetId(const char * val){ m_QuerySetId.set(val); }
void CQuerySetQuery::setIsLibrary_null(){ m_IsLibrary.Nil(); }void CQuerySetQuery::setIsLibrary(bool val){ m_IsLibrary=val; }
void CQuerySetQuery::setActivated_null(){ m_Activated.Nil(); }void CQuerySetQuery::setActivated(bool val){ m_Activated=val; }
void CQuerySetQuery::setPublishedBy(const char * val){ m_PublishedBy.set(val); }
void CQuerySetQuery::setSnapshot(const char * val){ m_snapshot.set(val); }
extern "C"  IEspQuerySetQuery *createQuerySetQuery(const char *serv, const char *msgname){return ((IEspQuerySetQuery *)new CQuerySetQuery(serv /*, msgname*/));}
extern "C"  IClientQuerySetQuery *createClientQuerySetQuery(const char *serv, const char *msgname){return ((IClientQuerySetQuery *)new CQuerySetQuery(serv /*, msgname*/));}

//=======================================================
// class CQuerySetAlias Implementation
//=======================================================

CQuerySetAlias::CQuerySetAlias(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetAlias");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySetAlias::CQuerySetAlias(const char *serviceName, const char *bc)
	: m_Id(nilIgnore),m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetAlias");
}

StringBuffer &CQuerySetAlias::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySetAlias::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySetAlias::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQuerySetAlias::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySetAlias::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySetAlias::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
}


void CQuerySetAlias::copy(CQuerySetAlias &from)
{
	m_Id.copy(from.m_Id);
	m_Name.copy(from.m_Name);
}


void CQuerySetAlias::copy(IConstQuerySetAlias &ifrom)
{
	setId(ifrom.getId());
	setName(ifrom.getName());
}


void CQuerySetAlias::getAttributes(IProperties &attributes)
{
}


void CQuerySetAlias::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
}


void CQuerySetAlias::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySetAlias::serializer(IEspContext* ctx, IConstQuerySetAlias &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySetAlias>");
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	if (keepRootTag)
		buffer.append("</QuerySetAlias>");
}

bool CQuerySetAlias::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	return hasValue;
}

bool CQuerySetAlias::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	return hasValue;
}

bool CQuerySetAlias::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	return hasValue;
}

const char * CQuerySetAlias::getId() { return m_Id.query();}
const char * CQuerySetAlias::getName() { return m_Name.query();}
void CQuerySetAlias::setId(const char * val){ m_Id.set(val); }
void CQuerySetAlias::setName(const char * val){ m_Name.set(val); }
extern "C"  IEspQuerySetAlias *createQuerySetAlias(const char *serv, const char *msgname){return ((IEspQuerySetAlias *)new CQuerySetAlias(serv /*, msgname*/));}
extern "C"  IClientQuerySetAlias *createClientQuerySetAlias(const char *serv, const char *msgname){return ((IClientQuerySetAlias *)new CQuerySetAlias(serv /*, msgname*/));}

//=======================================================
// class CWUQuerySetDetailsRequest Implementation
//=======================================================

CWUQuerySetDetailsRequest::CWUQuerySetDetailsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_ClusterName(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetDetailsRequest::CWUQuerySetDetailsRequest(const char *serviceName, const char *bc)
	: m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_ClusterName(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsRequest");
}

CWUQuerySetDetailsRequest::CWUQuerySetDetailsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_ClusterName(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetDetailsRequest::CWUQuerySetDetailsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_ClusterName(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetDetailsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Filter\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"All\" name=\"FilterType\" type=\"tns:WUQuerySetFilterType\"/>\n");
		if (!context.suppressed("WUQuerySetDetailsRequest","CheckAllNodes")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"CheckAllNodes\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXWUQuerySetFilterType::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerySetDetailsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetDetailsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQuerySetDetailsRequest","CheckAllNodes",1.57);
	if (!added.getValue("WUQuerySetFilterType"))
	{
		added.setValue("WUQuerySetFilterType",1);
		CXWUQuerySetFilterType::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetDetailsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Filter");
	form.appendf("  <tr><td><b>Filter: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FilterType");
	form.appendf("  <tr><td><b>FilterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"All\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQuerySetDetailsRequest","CheckAllNodes")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CheckAllNodes");
		
	form.appendf("  <tr><td><b>CheckAllNodes? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetDetailsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetDetailsRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
	m_Filter.marshall(rpc_resp, "Filter", "", "", "");
	m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	m_FilterType.marshall(rpc_resp, "FilterType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.marshall(rpc_resp, "CheckAllNodes", "", "", "");
}


void CWUQuerySetDetailsRequest::copy(CWUQuerySetDetailsRequest &from)
{
	m_QuerySetName.copy(from.m_QuerySetName);
	m_Filter.copy(from.m_Filter);
	m_ClusterName.copy(from.m_ClusterName);
	m_FilterType.copy(from.m_FilterType);
	m_CheckAllNodes.copy(from.m_CheckAllNodes);
}


void CWUQuerySetDetailsRequest::copy(IConstWUQuerySetDetailsRequest &ifrom)
{
	setQuerySetName(ifrom.getQuerySetName());
	setFilter(ifrom.getFilter());
	setClusterName(ifrom.getClusterName());
	setFilterType(ifrom.getFilterType());
	setCheckAllNodes(ifrom.getCheckAllNodes());
}


void CWUQuerySetDetailsRequest::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetDetailsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
	m_Filter.toStr(ctx, buffer, "Filter", "", true, "", "");
	m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	m_FilterType.toStr(ctx, buffer, "FilterType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.toStr(ctx, buffer, "CheckAllNodes", "", true, "", "");
}


void CWUQuerySetDetailsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetDetailsRequest::serializer(IEspContext* ctx, IConstWUQuerySetDetailsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetDetailsRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field Filter
	{
		const char* s = src.getFilter();
		if (s && *s)
		{
			buffer.append("<Filter>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filter>");
		}
	}
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field FilterType
	{
		const char* s = src.getFilterTypeAsString();
		buffer.append("<FilterType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</FilterType>");
	}
	// field CheckAllNodes
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		bool b = src.getCheckAllNodes();
		if (b)
			buffer.appendf("<CheckAllNodes>1</CheckAllNodes>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetDetailsRequest>");
}

bool CWUQuerySetDetailsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
	hasValue |= m_Filter.unmarshall(rpc_request, "Filter", basepath);
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_FilterType.unmarshall(rpc_request, "FilterType", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(rpc_request, "CheckAllNodes", basepath);
	return hasValue;
}

bool CWUQuerySetDetailsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_Filter.unmarshall(ctx, soapval, "Filter");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_FilterType.unmarshall(ctx, soapval, "FilterType");
	hasValue |= m_CheckAllNodes.unmarshall(ctx, soapval, "CheckAllNodes");
	return hasValue;
}

bool CWUQuerySetDetailsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_Filter.unmarshall(ctx, params, attachments, "Filter", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_FilterType.unmarshall(ctx, params, attachments, "FilterType", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(ctx, params, attachments, "CheckAllNodes", basepath);
	return hasValue;
}

const char * CWUQuerySetDetailsRequest::getQuerySetName() { return m_QuerySetName.query();}
const char * CWUQuerySetDetailsRequest::getFilter() { return m_Filter.query();}
const char * CWUQuerySetDetailsRequest::getClusterName() { return m_ClusterName.query();}
CWUQuerySetFilterType CWUQuerySetDetailsRequest::getFilterType() { return m_FilterType.getValue(); }
const char* CWUQuerySetDetailsRequest::getFilterTypeAsString() {  return (const char*)m_FilterType; }
bool CWUQuerySetDetailsRequest::getCheckAllNodes() { return m_CheckAllNodes;}
void CWUQuerySetDetailsRequest::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUQuerySetDetailsRequest::setFilter(const char * val){ m_Filter.set(val); }
void CWUQuerySetDetailsRequest::setClusterName(const char * val){ m_ClusterName.set(val); }
void CWUQuerySetDetailsRequest::setFilterType(CWUQuerySetFilterType val) { m_FilterType.setValue(val); }
void CWUQuerySetDetailsRequest::setFilterType(const char* val) { m_FilterType.setValue(val); }
void CWUQuerySetDetailsRequest::setCheckAllNodes(bool val){ m_CheckAllNodes=val; }
extern "C"  IEspWUQuerySetDetailsRequest *createWUQuerySetDetailsRequest(const char *serv){return ((IEspWUQuerySetDetailsRequest *)new CWUQuerySetDetailsRequest(serv));}
extern "C"  IClientWUQuerySetDetailsRequest *createClientWUQuerySetDetailsRequest(const char *serv){return ((IClientWUQuerySetDetailsRequest *)new CWUQuerySetDetailsRequest(serv));}

//=======================================================
// class CWUQuerySetDetailsResponse Implementation
//=======================================================

CWUQuerySetDetailsResponse::CWUQuerySetDetailsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_QuerySetName(nilIgnore),m_QuerysetQueries(nilIgnore),m_QuerysetAliases(nilIgnore),m_ClusterName(nilIgnore),m_Filter(nilIgnore),m_FilterType(nilIgnore),m_ClusterNames(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetDetailsResponse::CWUQuerySetDetailsResponse(const char *serviceName, const char *bc)
	: m_QuerySetName(nilIgnore),m_QuerysetQueries(nilIgnore),m_QuerysetAliases(nilIgnore),m_ClusterName(nilIgnore),m_Filter(nilIgnore),m_FilterType(nilIgnore),m_ClusterNames(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsResponse");
}

CWUQuerySetDetailsResponse::CWUQuerySetDetailsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QuerySetName(nilIgnore),m_QuerysetQueries(nilIgnore),m_QuerysetAliases(nilIgnore),m_ClusterName(nilIgnore),m_Filter(nilIgnore),m_FilterType(nilIgnore),m_ClusterNames(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetDetailsResponse::CWUQuerySetDetailsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QuerySetName(nilIgnore),m_QuerysetQueries(nilIgnore),m_QuerysetAliases(nilIgnore),m_ClusterName(nilIgnore),m_Filter(nilIgnore),m_FilterType(nilIgnore),m_ClusterNames(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetailsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetDetailsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerysetQueries\" type=\"tns:ArrayOfQuerySetQuery\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerysetAliases\" type=\"tns:ArrayOfQuerySetAlias\"/>\n");
		if (!context.suppressed("WUQuerySetDetailsResponse","ClusterName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQuerySetDetailsResponse","Filter")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Filter\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQuerySetDetailsResponse","FilterType")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FilterType\" type=\"tns:WUQuerySetFilterType\"/>\n");
		}
		if (!context.suppressed("WUQuerySetDetailsResponse","ClusterNames")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterNames\" type=\"tns:EspStringArray\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CQuerySetQuery::getXsdDefinition(context, request, schema, added);
		CQuerySetAlias::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("WUQuerySetDetailsResponse","FilterType"))
			CXWUQuerySetFilterType::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	if (added.getValue("QuerySetAlias") && added.getValue("ArrayOfQuerySetAlias")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQuerySetAlias\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QuerySetAlias\" type=\"tns:QuerySetAlias\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQuerySetAlias",1);
	}
	if (added.getValue("QuerySetQuery") && added.getValue("ArrayOfQuerySetQuery")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQuerySetQuery\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QuerySetQuery\" type=\"tns:QuerySetQuery\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQuerySetQuery",1);
	}
	return schema;
}

void CWUQuerySetDetailsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetDetailsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQuerySetDetailsResponse","ClusterName",1.37);
	info.addMinVersion("WUQuerySetDetailsResponse","Filter",1.37);
	info.addMinVersion("WUQuerySetDetailsResponse","FilterType",1.37);
	info.addMinVersion("WUQuerySetDetailsResponse","ClusterNames",1.37);
	if (!added.getValue("QuerySetAlias"))
	{
		added.setValue("QuerySetAlias",1);
		CQuerySetAlias::getMapInfo(info,added);
	}
	if (!added.getValue("QuerySetQuery"))
	{
		added.setValue("QuerySetQuery",1);
		CQuerySetQuery::getMapInfo(info,added);
	}
	if (!added.getValue("WUQuerySetFilterType"))
	{
		added.setValue("WUQuerySetFilterType",1);
		CXWUQuerySetFilterType::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetDetailsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerysetQueries");
	form.appendf("<tr><td><b>QuerysetQueries: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerysetAliases");
	form.appendf("<tr><td><b>QuerysetAliases: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("WUQuerySetDetailsResponse","ClusterName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterName");
		form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQuerySetDetailsResponse","Filter")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Filter");
		form.appendf("  <tr><td><b>Filter: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQuerySetDetailsResponse","FilterType")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FilterType");
		form.appendf("  <tr><td><b>FilterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQuerySetDetailsResponse","ClusterNames")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ClusterNames");
		form.appendf("<tr><td><b>ClusterNames: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetDetailsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetDetailsResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
		m_QuerysetQueries.marshall(rpc_resp, "QuerysetQueries", "QuerySetQuery");
		m_QuerysetAliases.marshall(rpc_resp, "QuerysetAliases", "QuerySetAlias");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_Filter.marshall(rpc_resp, "Filter", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_FilterType.marshall(rpc_resp, "FilterType", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_ClusterNames.marshall(rpc_resp, "ClusterNames", "Item");
	}
}


void CWUQuerySetDetailsResponse::copy(CWUQuerySetDetailsResponse &from)
{
	m_QuerySetName.copy(from.m_QuerySetName);
	m_QuerysetQueries.copy(from.m_QuerysetQueries);
	m_QuerysetAliases.copy(from.m_QuerysetAliases);
	m_ClusterName.copy(from.m_ClusterName);
	m_Filter.copy(from.m_Filter);
	m_FilterType.copy(from.m_FilterType);
	m_ClusterNames.copy(from.m_ClusterNames);
}


void CWUQuerySetDetailsResponse::copy(IConstWUQuerySetDetailsResponse &ifrom)
{
	setQuerySetName(ifrom.getQuerySetName());
	setQuerysetQueries(ifrom.getQuerysetQueries());
	setQuerysetAliases(ifrom.getQuerysetAliases());
	setClusterName(ifrom.getClusterName());
	setFilter(ifrom.getFilter());
	setFilterType(ifrom.getFilterType());
	setClusterNames(ifrom.getClusterNames());
}


void CWUQuerySetDetailsResponse::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetDetailsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
		m_QuerysetQueries.toStr(ctx, buffer, "QuerysetQueries", "QuerySetQuery");
		m_QuerysetAliases.toStr(ctx, buffer, "QuerysetAliases", "QuerySetAlias");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_Filter.toStr(ctx, buffer, "Filter", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_FilterType.toStr(ctx, buffer, "FilterType", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.37))
			m_ClusterNames.toStr(ctx, buffer, "ClusterNames", "Item");
	}
}


void CWUQuerySetDetailsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetDetailsResponse::serializer(IEspContext* ctx, IConstWUQuerySetDetailsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetDetailsResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field QuerysetQueries
	{
		IArrayOf<IConstQuerySetQuery>& v = src.getQuerysetQueries();
		int size = v.length();
		if (size>0)
			buffer.append("<QuerysetQueries>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQuerySetQuery::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</QuerysetQueries>");
	}
	// field QuerysetAliases
	{
		IArrayOf<IConstQuerySetAlias>& v = src.getQuerysetAliases();
		int size = v.length();
		if (size>0)
			buffer.append("<QuerysetAliases>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQuerySetAlias::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</QuerysetAliases>");
	}
	// field ClusterName
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field Filter
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		const char* s = src.getFilter();
		if (s && *s)
		{
			buffer.append("<Filter>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filter>");
		}
	}
	// field FilterType
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		const char* s = src.getFilterTypeAsString();
		buffer.append("<FilterType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</FilterType>");
	}
	// field ClusterNames
	if ((clientVer==-1.0 || clientVer>=1.37))
	{
		StringArray& v = src.getClusterNames();
		if (v.length()>0)
			buffer.append("<ClusterNames>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</ClusterNames>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetDetailsResponse>");
}

bool CWUQuerySetDetailsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
		hasValue |= m_QuerysetQueries.unmarshall(rpc_request, "QuerysetQueries", basepath);
		hasValue |= m_QuerysetAliases.unmarshall(rpc_request, "QuerysetAliases", basepath);
		hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
		hasValue |= m_Filter.unmarshall(rpc_request, "Filter", basepath);
		hasValue |= m_FilterType.unmarshall(rpc_request, "FilterType", basepath);
		hasValue |= m_ClusterNames.unmarshall(rpc_request, "ClusterNames", basepath);
	}
	return hasValue;
}

bool CWUQuerySetDetailsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_QuerysetQueries.unmarshall(ctx, soapval, "QuerysetQueries");
	hasValue |= m_QuerysetAliases.unmarshall(ctx, soapval, "QuerysetAliases");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_Filter.unmarshall(ctx, soapval, "Filter");
	hasValue |= m_FilterType.unmarshall(ctx, soapval, "FilterType");
	hasValue |= m_ClusterNames.unmarshall(ctx, soapval, "ClusterNames");
	return hasValue;
}

bool CWUQuerySetDetailsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_QuerysetQueries.unmarshall(ctx, params, attachments, "QuerysetQueries", basepath);
	hasValue |= m_QuerysetAliases.unmarshall(ctx, params, attachments, "QuerysetAliases", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_Filter.unmarshall(ctx, params, attachments, "Filter", basepath);
	hasValue |= m_FilterType.unmarshall(ctx, params, attachments, "FilterType", basepath);
	hasValue |= m_ClusterNames.unmarshall(ctx, params, attachments, "ClusterNames", basepath);
	return hasValue;
}

const char * CWUQuerySetDetailsResponse::getQuerySetName() { return m_QuerySetName.query();}
IArrayOf<IConstQuerySetQuery> & CWUQuerySetDetailsResponse::getQuerysetQueries() { return (IArrayOf<IConstQuerySetQuery> &) m_QuerysetQueries; }
IArrayOf<IConstQuerySetAlias> & CWUQuerySetDetailsResponse::getQuerysetAliases() { return (IArrayOf<IConstQuerySetAlias> &) m_QuerysetAliases; }
const char * CWUQuerySetDetailsResponse::getClusterName() { return m_ClusterName.query();}
const char * CWUQuerySetDetailsResponse::getFilter() { return m_Filter.query();}
CWUQuerySetFilterType CWUQuerySetDetailsResponse::getFilterType() { return m_FilterType.getValue(); }
const char* CWUQuerySetDetailsResponse::getFilterTypeAsString() {  return (const char*)m_FilterType; }
StringArray & CWUQuerySetDetailsResponse::getClusterNames() { return (StringArray &) m_ClusterNames; }
void CWUQuerySetDetailsResponse::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUQuerySetDetailsResponse::setQuerysetQueries(IArrayOf<IEspQuerySetQuery> &val)
{
	m_QuerysetQueries->kill();
	IArrayOf<IConstQuerySetQuery> &target = m_QuerysetQueries.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetQuery &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetDetailsResponse::setQuerysetQueries(IArrayOf<IConstQuerySetQuery> &val)
{
	m_QuerysetQueries->kill();
	IArrayOf<IConstQuerySetQuery> &target = m_QuerysetQueries.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetQuery &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetDetailsResponse::setQuerysetAliases(IArrayOf<IEspQuerySetAlias> &val)
{
	m_QuerysetAliases->kill();
	IArrayOf<IConstQuerySetAlias> &target = m_QuerysetAliases.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetAlias &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetDetailsResponse::setQuerysetAliases(IArrayOf<IConstQuerySetAlias> &val)
{
	m_QuerysetAliases->kill();
	IArrayOf<IConstQuerySetAlias> &target = m_QuerysetAliases.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetAlias &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetDetailsResponse::setClusterName(const char * val){ m_ClusterName.set(val); }
void CWUQuerySetDetailsResponse::setFilter(const char * val){ m_Filter.set(val); }
void CWUQuerySetDetailsResponse::setFilterType(CWUQuerySetFilterType val) { m_FilterType.setValue(val); }
void CWUQuerySetDetailsResponse::setFilterType(const char* val) { m_FilterType.setValue(val); }
void CWUQuerySetDetailsResponse::setClusterNames(StringArray &val){ m_ClusterNames->kill();  CloneArray(m_ClusterNames.getValue(), val); }
extern "C"  IEspWUQuerySetDetailsResponse *createWUQuerySetDetailsResponse(const char *serv){return ((IEspWUQuerySetDetailsResponse *)new CWUQuerySetDetailsResponse(serv));}
extern "C"  IClientWUQuerySetDetailsResponse *createClientWUQuerySetDetailsResponse(const char *serv){return ((IClientWUQuerySetDetailsResponse *)new CWUQuerySetDetailsResponse(serv));}

//=======================================================
// class CWUListQueriesRequest Implementation
//=======================================================

CWUListQueriesRequest::CWUListQueriesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_QuerySetName(nilRemove),m_ClusterName(nilRemove),m_LibraryName(nilRemove),m_MemoryLimitLow(nilRemove),m_MemoryLimitHigh(nilRemove),m_TimeLimitLow(nilRemove),m_TimeLimitHigh(nilRemove),m_WarnTimeLimitLow(nilRemove),m_WarnTimeLimitHigh(nilRemove),m_PriorityLow(nilRemove),m_PriorityHigh(nilRemove),m_Activated(nilRemove),m_SuspendedByUser(nilRemove),m_WUID(nilRemove),m_QueryID(nilRemove),m_QueryName(nilRemove),m_PublishedBy(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove),m_FileName(nilRemove),m_CheckAllNodes(1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListQueriesRequest::CWUListQueriesRequest(const char *serviceName, const char *bc)
	: m_QuerySetName(nilRemove),m_ClusterName(nilRemove),m_LibraryName(nilRemove),m_MemoryLimitLow(nilRemove),m_MemoryLimitHigh(nilRemove),m_TimeLimitLow(nilRemove),m_TimeLimitHigh(nilRemove),m_WarnTimeLimitLow(nilRemove),m_WarnTimeLimitHigh(nilRemove),m_PriorityLow(nilRemove),m_PriorityHigh(nilRemove),m_Activated(nilRemove),m_SuspendedByUser(nilRemove),m_WUID(nilRemove),m_QueryID(nilRemove),m_QueryName(nilRemove),m_PublishedBy(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove),m_FileName(nilRemove),m_CheckAllNodes(1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesRequest");
}

CWUListQueriesRequest::CWUListQueriesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QuerySetName(nilRemove),m_ClusterName(nilRemove),m_LibraryName(nilRemove),m_MemoryLimitLow(nilRemove),m_MemoryLimitHigh(nilRemove),m_TimeLimitLow(nilRemove),m_TimeLimitHigh(nilRemove),m_WarnTimeLimitLow(nilRemove),m_WarnTimeLimitHigh(nilRemove),m_PriorityLow(nilRemove),m_PriorityHigh(nilRemove),m_Activated(nilRemove),m_SuspendedByUser(nilRemove),m_WUID(nilRemove),m_QueryID(nilRemove),m_QueryName(nilRemove),m_PublishedBy(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove),m_FileName(nilRemove),m_CheckAllNodes(1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListQueriesRequest::CWUListQueriesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QuerySetName(nilRemove),m_ClusterName(nilRemove),m_LibraryName(nilRemove),m_MemoryLimitLow(nilRemove),m_MemoryLimitHigh(nilRemove),m_TimeLimitLow(nilRemove),m_TimeLimitHigh(nilRemove),m_WarnTimeLimitLow(nilRemove),m_WarnTimeLimitHigh(nilRemove),m_PriorityLow(nilRemove),m_PriorityHigh(nilRemove),m_Activated(nilRemove),m_SuspendedByUser(nilRemove),m_WUID(nilRemove),m_QueryID(nilRemove),m_QueryName(nilRemove),m_PublishedBy(nilRemove),m_PageSize(nilRemove),m_PageStartFrom(nilRemove),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove),m_FileName(nilRemove),m_CheckAllNodes(1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListQueriesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LibraryName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MemoryLimitLow\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MemoryLimitHigh\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeLimitLow\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeLimitHigh\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WarnTimeLimitLow\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WarnTimeLimitHigh\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityLow\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PriorityHigh\" type=\"xsd:nonNegativeInteger\"/>\n");
		if (!context.suppressed("WUListQueriesRequest","Activated")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Activated\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUListQueriesRequest","SuspendedByUser")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SuspendedByUser\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUListQueriesRequest","WUID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUListQueriesRequest","QueryID")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QueryID\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUListQueriesRequest","QueryName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"QueryName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUListQueriesRequest","PublishedBy")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PublishedBy\" type=\"xsd:string\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PageStartFrom\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Sortby\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUListQueriesRequest","CheckAllNodes")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"CheckAllNodes\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUListQueriesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListQueriesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUListQueriesRequest","Activated",1.48);
	info.addMinVersion("WUListQueriesRequest","SuspendedByUser",1.48);
	info.addMinVersion("WUListQueriesRequest","WUID",1.5);
	info.addMinVersion("WUListQueriesRequest","QueryID",1.51);
	info.addMinVersion("WUListQueriesRequest","QueryName",1.51);
	info.addMinVersion("WUListQueriesRequest","PublishedBy",1.56);
	info.addMinVersion("WUListQueriesRequest","CheckAllNodes",1.57);
}

StringBuffer &CWUListQueriesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LibraryName");
	form.appendf("  <tr><td><b>LibraryName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MemoryLimitLow");
	form.appendf("  <tr><td><b>MemoryLimitLow: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MemoryLimitHigh");
	form.appendf("  <tr><td><b>MemoryLimitHigh: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimitLow");
	form.appendf("  <tr><td><b>TimeLimitLow: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimitHigh");
	form.appendf("  <tr><td><b>TimeLimitHigh: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimitLow");
	form.appendf("  <tr><td><b>WarnTimeLimitLow: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimitHigh");
	form.appendf("  <tr><td><b>WarnTimeLimitHigh: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PriorityLow");
	form.appendf("  <tr><td><b>PriorityLow: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PriorityHigh");
	form.appendf("  <tr><td><b>PriorityHigh: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUListQueriesRequest","Activated")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Activated");
		
	form.appendf("  <tr><td><b>Activated? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUListQueriesRequest","SuspendedByUser")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SuspendedByUser");
		
	form.appendf("  <tr><td><b>SuspendedByUser? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUListQueriesRequest","WUID")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WUID");
		form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUListQueriesRequest","QueryID")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QueryID");
		form.appendf("  <tr><td><b>QueryID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUListQueriesRequest","QueryName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("QueryName");
		form.appendf("  <tr><td><b>QueryName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUListQueriesRequest","PublishedBy")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PublishedBy");
		form.appendf("  <tr><td><b>PublishedBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PageSize");
	form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("PageStartFrom");
	form.appendf("  <tr><td><b>PageStartFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Sortby");
	form.appendf("  <tr><td><b>Sortby: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Descending");
	
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CacheHint");
	form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUListQueriesRequest","CheckAllNodes")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CheckAllNodes");
		
	form.appendf("  <tr><td><b>CheckAllNodes? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListQueriesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListQueriesRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
	m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	m_LibraryName.marshall(rpc_resp, "LibraryName", "", "", "");
	m_MemoryLimitLow.marshall(rpc_resp, "MemoryLimitLow", "", "", "");
	m_MemoryLimitHigh.marshall(rpc_resp, "MemoryLimitHigh", "", "", "");
	m_TimeLimitLow.marshall(rpc_resp, "TimeLimitLow", "", "", "");
	m_TimeLimitHigh.marshall(rpc_resp, "TimeLimitHigh", "", "", "");
	m_WarnTimeLimitLow.marshall(rpc_resp, "WarnTimeLimitLow", "", "", "");
	m_WarnTimeLimitHigh.marshall(rpc_resp, "WarnTimeLimitHigh", "", "", "");
	m_PriorityLow.marshall(rpc_resp, "PriorityLow", "", "", "");
	m_PriorityHigh.marshall(rpc_resp, "PriorityHigh", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.48))
		m_Activated.marshall(rpc_resp, "Activated", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.48))
		m_SuspendedByUser.marshall(rpc_resp, "SuspendedByUser", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_WUID.marshall(rpc_resp, "WUID", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_QueryID.marshall(rpc_resp, "QueryID", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_QueryName.marshall(rpc_resp, "QueryName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.56))
		m_PublishedBy.marshall(rpc_resp, "PublishedBy", "", "", "");
	m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
	m_PageStartFrom.marshall(rpc_resp, "PageStartFrom", "", "", "");
	m_Sortby.marshall(rpc_resp, "Sortby", "", "", "");
	m_Descending.marshall(rpc_resp, "Descending", "", "", "");
	m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.marshall(rpc_resp, "CheckAllNodes", "", "", "");
}


void CWUListQueriesRequest::copy(CWUListQueriesRequest &from)
{
	m_QuerySetName.copy(from.m_QuerySetName);
	m_ClusterName.copy(from.m_ClusterName);
	m_LibraryName.copy(from.m_LibraryName);
	m_MemoryLimitLow.copy(from.m_MemoryLimitLow);
	m_MemoryLimitHigh.copy(from.m_MemoryLimitHigh);
	m_TimeLimitLow.copy(from.m_TimeLimitLow);
	m_TimeLimitHigh.copy(from.m_TimeLimitHigh);
	m_WarnTimeLimitLow.copy(from.m_WarnTimeLimitLow);
	m_WarnTimeLimitHigh.copy(from.m_WarnTimeLimitHigh);
	m_PriorityLow.copy(from.m_PriorityLow);
	m_PriorityHigh.copy(from.m_PriorityHigh);
	m_Activated.copy(from.m_Activated);
	m_SuspendedByUser.copy(from.m_SuspendedByUser);
	m_WUID.copy(from.m_WUID);
	m_QueryID.copy(from.m_QueryID);
	m_QueryName.copy(from.m_QueryName);
	m_PublishedBy.copy(from.m_PublishedBy);
	m_PageSize.copy(from.m_PageSize);
	m_PageStartFrom.copy(from.m_PageStartFrom);
	m_Sortby.copy(from.m_Sortby);
	m_Descending.copy(from.m_Descending);
	m_CacheHint.copy(from.m_CacheHint);
	m_FileName.copy(from.m_FileName);
	m_CheckAllNodes.copy(from.m_CheckAllNodes);
}


void CWUListQueriesRequest::copy(IConstWUListQueriesRequest &ifrom)
{
	setQuerySetName(ifrom.getQuerySetName());
	setClusterName(ifrom.getClusterName());
	setLibraryName(ifrom.getLibraryName());
	setMemoryLimitLow(ifrom.getMemoryLimitLow());
	setMemoryLimitHigh(ifrom.getMemoryLimitHigh());
	setTimeLimitLow(ifrom.getTimeLimitLow());
	setTimeLimitHigh(ifrom.getTimeLimitHigh());
	setWarnTimeLimitLow(ifrom.getWarnTimeLimitLow());
	setWarnTimeLimitHigh(ifrom.getWarnTimeLimitHigh());
	setPriorityLow(ifrom.getPriorityLow());
	setPriorityHigh(ifrom.getPriorityHigh());
	setActivated(ifrom.getActivated());
	setSuspendedByUser(ifrom.getSuspendedByUser());
	setWUID(ifrom.getWUID());
	setQueryID(ifrom.getQueryID());
	setQueryName(ifrom.getQueryName());
	setPublishedBy(ifrom.getPublishedBy());
	setPageSize(ifrom.getPageSize());
	setPageStartFrom(ifrom.getPageStartFrom());
	setSortby(ifrom.getSortby());
	setDescending(ifrom.getDescending());
	setCacheHint(ifrom.getCacheHint());
	setFileName(ifrom.getFileName());
	setCheckAllNodes(ifrom.getCheckAllNodes());
}


void CWUListQueriesRequest::getAttributes(IProperties &attributes)
{
}


void CWUListQueriesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
	m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	m_LibraryName.toStr(ctx, buffer, "LibraryName", "", true, "", "");
	m_MemoryLimitLow.toStr(ctx, buffer, "MemoryLimitLow", "", true, "", "");
	m_MemoryLimitHigh.toStr(ctx, buffer, "MemoryLimitHigh", "", true, "", "");
	m_TimeLimitLow.toStr(ctx, buffer, "TimeLimitLow", "", true, "", "");
	m_TimeLimitHigh.toStr(ctx, buffer, "TimeLimitHigh", "", true, "", "");
	m_WarnTimeLimitLow.toStr(ctx, buffer, "WarnTimeLimitLow", "", true, "", "");
	m_WarnTimeLimitHigh.toStr(ctx, buffer, "WarnTimeLimitHigh", "", true, "", "");
	m_PriorityLow.toStr(ctx, buffer, "PriorityLow", "", true, "", "");
	m_PriorityHigh.toStr(ctx, buffer, "PriorityHigh", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.48))
		m_Activated.toStr(ctx, buffer, "Activated", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.48))
		m_SuspendedByUser.toStr(ctx, buffer, "SuspendedByUser", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.5))
		m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_QueryID.toStr(ctx, buffer, "QueryID", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.51))
		m_QueryName.toStr(ctx, buffer, "QueryName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.56))
		m_PublishedBy.toStr(ctx, buffer, "PublishedBy", "", true, "", "");
	m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
	m_PageStartFrom.toStr(ctx, buffer, "PageStartFrom", "", true, "", "");
	m_Sortby.toStr(ctx, buffer, "Sortby", "", true, "", "");
	m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
	m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.toStr(ctx, buffer, "CheckAllNodes", "", true, "", "");
}


void CWUListQueriesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListQueriesRequest::serializer(IEspContext* ctx, IConstWUListQueriesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListQueriesRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field LibraryName
	{
		const char* s = src.getLibraryName();
		if (s && *s)
		{
			buffer.append("<LibraryName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</LibraryName>");
		}
	}
	// field MemoryLimitLow
	{
		//*** default kind: TK_INT; type=int64, name=MemoryLimitLow
		buffer.append("<MemoryLimitLow>");
		buffer.append(src.getMemoryLimitLow());
		buffer.append("</MemoryLimitLow>");
	}
	// field MemoryLimitHigh
	{
		//*** default kind: TK_INT; type=int64, name=MemoryLimitHigh
		buffer.append("<MemoryLimitHigh>");
		buffer.append(src.getMemoryLimitHigh());
		buffer.append("</MemoryLimitHigh>");
	}
	// field TimeLimitLow
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimitLow
		buffer.append("<TimeLimitLow>");
		buffer.append(src.getTimeLimitLow());
		buffer.append("</TimeLimitLow>");
	}
	// field TimeLimitHigh
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimitHigh
		buffer.append("<TimeLimitHigh>");
		buffer.append(src.getTimeLimitHigh());
		buffer.append("</TimeLimitHigh>");
	}
	// field WarnTimeLimitLow
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimitLow
		buffer.append("<WarnTimeLimitLow>");
		buffer.append(src.getWarnTimeLimitLow());
		buffer.append("</WarnTimeLimitLow>");
	}
	// field WarnTimeLimitHigh
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimitHigh
		buffer.append("<WarnTimeLimitHigh>");
		buffer.append(src.getWarnTimeLimitHigh());
		buffer.append("</WarnTimeLimitHigh>");
	}
	// field PriorityLow
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=PriorityLow
		buffer.append("<PriorityLow>");
		buffer.append(src.getPriorityLow());
		buffer.append("</PriorityLow>");
	}
	// field PriorityHigh
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=PriorityHigh
		buffer.append("<PriorityHigh>");
		buffer.append(src.getPriorityHigh());
		buffer.append("</PriorityHigh>");
	}
	// field Activated
	if ((clientVer==-1.0 || clientVer>=1.48))
	{
		bool b = src.getActivated();
		if (b)
			buffer.appendf("<Activated>1</Activated>");
	}
	// field SuspendedByUser
	if ((clientVer==-1.0 || clientVer>=1.48))
	{
		bool b = src.getSuspendedByUser();
		if (b)
			buffer.appendf("<SuspendedByUser>1</SuspendedByUser>");
	}
	// field WUID
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field QueryID
	if ((clientVer==-1.0 || clientVer>=1.51))
	{
		const char* s = src.getQueryID();
		if (s && *s)
		{
			buffer.append("<QueryID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryID>");
		}
	}
	// field QueryName
	if ((clientVer==-1.0 || clientVer>=1.51))
	{
		const char* s = src.getQueryName();
		if (s && *s)
		{
			buffer.append("<QueryName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryName>");
		}
	}
	// field PublishedBy
	if ((clientVer==-1.0 || clientVer>=1.56))
	{
		const char* s = src.getPublishedBy();
		if (s && *s)
		{
			buffer.append("<PublishedBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PublishedBy>");
		}
	}
	// field PageSize
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=PageSize
		buffer.append("<PageSize>");
		buffer.append(src.getPageSize());
		buffer.append("</PageSize>");
	}
	// field PageStartFrom
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=PageStartFrom
		buffer.append("<PageStartFrom>");
		buffer.append(src.getPageStartFrom());
		buffer.append("</PageStartFrom>");
	}
	// field Sortby
	{
		const char* s = src.getSortby();
		if (s && *s)
		{
			buffer.append("<Sortby>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Sortby>");
		}
	}
	// field Descending
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field CacheHint
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field CheckAllNodes
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		bool b = src.getCheckAllNodes();
		if (b)
			buffer.appendf("<CheckAllNodes>1</CheckAllNodes>");
	}
	if (keepRootTag)
		buffer.append("</WUListQueriesRequest>");
}

bool CWUListQueriesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_LibraryName.unmarshall(rpc_request, "LibraryName", basepath);
	hasValue |= m_MemoryLimitLow.unmarshall(rpc_request, "MemoryLimitLow", basepath);
	hasValue |= m_MemoryLimitHigh.unmarshall(rpc_request, "MemoryLimitHigh", basepath);
	hasValue |= m_TimeLimitLow.unmarshall(rpc_request, "TimeLimitLow", basepath);
	hasValue |= m_TimeLimitHigh.unmarshall(rpc_request, "TimeLimitHigh", basepath);
	hasValue |= m_WarnTimeLimitLow.unmarshall(rpc_request, "WarnTimeLimitLow", basepath);
	hasValue |= m_WarnTimeLimitHigh.unmarshall(rpc_request, "WarnTimeLimitHigh", basepath);
	hasValue |= m_PriorityLow.unmarshall(rpc_request, "PriorityLow", basepath);
	hasValue |= m_PriorityHigh.unmarshall(rpc_request, "PriorityHigh", basepath);
	hasValue |= m_Activated.unmarshall(rpc_request, "Activated", basepath);
	hasValue |= m_SuspendedByUser.unmarshall(rpc_request, "SuspendedByUser", basepath);
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	hasValue |= m_QueryID.unmarshall(rpc_request, "QueryID", basepath);
	hasValue |= m_QueryName.unmarshall(rpc_request, "QueryName", basepath);
	hasValue |= m_PublishedBy.unmarshall(rpc_request, "PublishedBy", basepath);
	hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(rpc_request, "PageStartFrom", basepath);
	hasValue |= m_Sortby.unmarshall(rpc_request, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(rpc_request, "CheckAllNodes", basepath);
	return hasValue;
}

bool CWUListQueriesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_LibraryName.unmarshall(ctx, soapval, "LibraryName");
	hasValue |= m_MemoryLimitLow.unmarshall(ctx, soapval, "MemoryLimitLow");
	hasValue |= m_MemoryLimitHigh.unmarshall(ctx, soapval, "MemoryLimitHigh");
	hasValue |= m_TimeLimitLow.unmarshall(ctx, soapval, "TimeLimitLow");
	hasValue |= m_TimeLimitHigh.unmarshall(ctx, soapval, "TimeLimitHigh");
	hasValue |= m_WarnTimeLimitLow.unmarshall(ctx, soapval, "WarnTimeLimitLow");
	hasValue |= m_WarnTimeLimitHigh.unmarshall(ctx, soapval, "WarnTimeLimitHigh");
	hasValue |= m_PriorityLow.unmarshall(ctx, soapval, "PriorityLow");
	hasValue |= m_PriorityHigh.unmarshall(ctx, soapval, "PriorityHigh");
	hasValue |= m_Activated.unmarshall(ctx, soapval, "Activated");
	hasValue |= m_SuspendedByUser.unmarshall(ctx, soapval, "SuspendedByUser");
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_QueryID.unmarshall(ctx, soapval, "QueryID");
	hasValue |= m_QueryName.unmarshall(ctx, soapval, "QueryName");
	hasValue |= m_PublishedBy.unmarshall(ctx, soapval, "PublishedBy");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_PageStartFrom.unmarshall(ctx, soapval, "PageStartFrom");
	hasValue |= m_Sortby.unmarshall(ctx, soapval, "Sortby");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_CheckAllNodes.unmarshall(ctx, soapval, "CheckAllNodes");
	return hasValue;
}

bool CWUListQueriesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_LibraryName.unmarshall(ctx, params, attachments, "LibraryName", basepath);
	hasValue |= m_MemoryLimitLow.unmarshall(ctx, params, attachments, "MemoryLimitLow", basepath);
	hasValue |= m_MemoryLimitHigh.unmarshall(ctx, params, attachments, "MemoryLimitHigh", basepath);
	hasValue |= m_TimeLimitLow.unmarshall(ctx, params, attachments, "TimeLimitLow", basepath);
	hasValue |= m_TimeLimitHigh.unmarshall(ctx, params, attachments, "TimeLimitHigh", basepath);
	hasValue |= m_WarnTimeLimitLow.unmarshall(ctx, params, attachments, "WarnTimeLimitLow", basepath);
	hasValue |= m_WarnTimeLimitHigh.unmarshall(ctx, params, attachments, "WarnTimeLimitHigh", basepath);
	hasValue |= m_PriorityLow.unmarshall(ctx, params, attachments, "PriorityLow", basepath);
	hasValue |= m_PriorityHigh.unmarshall(ctx, params, attachments, "PriorityHigh", basepath);
	hasValue |= m_Activated.unmarshall(ctx, params, attachments, "Activated", basepath);
	hasValue |= m_SuspendedByUser.unmarshall(ctx, params, attachments, "SuspendedByUser", basepath);
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_QueryID.unmarshall(ctx, params, attachments, "QueryID", basepath);
	hasValue |= m_QueryName.unmarshall(ctx, params, attachments, "QueryName", basepath);
	hasValue |= m_PublishedBy.unmarshall(ctx, params, attachments, "PublishedBy", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(ctx, params, attachments, "PageStartFrom", basepath);
	hasValue |= m_Sortby.unmarshall(ctx, params, attachments, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(ctx, params, attachments, "CheckAllNodes", basepath);
	return hasValue;
}

const char * CWUListQueriesRequest::getQuerySetName() { return m_QuerySetName.query();}
const char * CWUListQueriesRequest::getClusterName() { return m_ClusterName.query();}
const char * CWUListQueriesRequest::getLibraryName() { return m_LibraryName.query();}
bool CWUListQueriesRequest::getMemoryLimitLow_isNull(){return m_MemoryLimitLow.is_nil();}
__int64 CWUListQueriesRequest::getMemoryLimitLow() { return m_MemoryLimitLow;}
bool CWUListQueriesRequest::getMemoryLimitHigh_isNull(){return m_MemoryLimitHigh.is_nil();}
__int64 CWUListQueriesRequest::getMemoryLimitHigh() { return m_MemoryLimitHigh;}
bool CWUListQueriesRequest::getTimeLimitLow_isNull(){return m_TimeLimitLow.is_nil();}
unsigned int CWUListQueriesRequest::getTimeLimitLow() { return m_TimeLimitLow;}
bool CWUListQueriesRequest::getTimeLimitHigh_isNull(){return m_TimeLimitHigh.is_nil();}
unsigned int CWUListQueriesRequest::getTimeLimitHigh() { return m_TimeLimitHigh;}
bool CWUListQueriesRequest::getWarnTimeLimitLow_isNull(){return m_WarnTimeLimitLow.is_nil();}
unsigned int CWUListQueriesRequest::getWarnTimeLimitLow() { return m_WarnTimeLimitLow;}
bool CWUListQueriesRequest::getWarnTimeLimitHigh_isNull(){return m_WarnTimeLimitHigh.is_nil();}
unsigned int CWUListQueriesRequest::getWarnTimeLimitHigh() { return m_WarnTimeLimitHigh;}
bool CWUListQueriesRequest::getPriorityLow_isNull(){return m_PriorityLow.is_nil();}
unsigned int CWUListQueriesRequest::getPriorityLow() { return m_PriorityLow;}
bool CWUListQueriesRequest::getPriorityHigh_isNull(){return m_PriorityHigh.is_nil();}
unsigned int CWUListQueriesRequest::getPriorityHigh() { return m_PriorityHigh;}
bool CWUListQueriesRequest::getActivated_isNull(){return m_Activated.is_nil();}
bool CWUListQueriesRequest::getActivated() { return m_Activated;}
bool CWUListQueriesRequest::getSuspendedByUser_isNull(){return m_SuspendedByUser.is_nil();}
bool CWUListQueriesRequest::getSuspendedByUser() { return m_SuspendedByUser;}
const char * CWUListQueriesRequest::getWUID() { return m_WUID.query();}
const char * CWUListQueriesRequest::getQueryID() { return m_QueryID.query();}
const char * CWUListQueriesRequest::getQueryName() { return m_QueryName.query();}
const char * CWUListQueriesRequest::getPublishedBy() { return m_PublishedBy.query();}
bool CWUListQueriesRequest::getPageSize_isNull(){return m_PageSize.is_nil();}
unsigned int CWUListQueriesRequest::getPageSize() { return m_PageSize;}
bool CWUListQueriesRequest::getPageStartFrom_isNull(){return m_PageStartFrom.is_nil();}
unsigned int CWUListQueriesRequest::getPageStartFrom() { return m_PageStartFrom;}
const char * CWUListQueriesRequest::getSortby() { return m_Sortby.query();}
bool CWUListQueriesRequest::getDescending_isNull(){return m_Descending.is_nil();}
bool CWUListQueriesRequest::getDescending() { return m_Descending;}
bool CWUListQueriesRequest::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CWUListQueriesRequest::getCacheHint() { return m_CacheHint;}
const char * CWUListQueriesRequest::getFileName() { return m_FileName.query();}
bool CWUListQueriesRequest::getCheckAllNodes_isNull(){return m_CheckAllNodes.is_nil();}
bool CWUListQueriesRequest::getCheckAllNodes() { return m_CheckAllNodes;}
void CWUListQueriesRequest::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUListQueriesRequest::setClusterName(const char * val){ m_ClusterName.set(val); }
void CWUListQueriesRequest::setLibraryName(const char * val){ m_LibraryName.set(val); }
void CWUListQueriesRequest::setMemoryLimitLow_null(){ m_MemoryLimitLow.Nil(); }void CWUListQueriesRequest::setMemoryLimitLow(__int64 val){ m_MemoryLimitLow=val; }
void CWUListQueriesRequest::setMemoryLimitHigh_null(){ m_MemoryLimitHigh.Nil(); }void CWUListQueriesRequest::setMemoryLimitHigh(__int64 val){ m_MemoryLimitHigh=val; }
void CWUListQueriesRequest::setTimeLimitLow_null(){ m_TimeLimitLow.Nil(); }void CWUListQueriesRequest::setTimeLimitLow(unsigned int val){ m_TimeLimitLow=val; }
void CWUListQueriesRequest::setTimeLimitHigh_null(){ m_TimeLimitHigh.Nil(); }void CWUListQueriesRequest::setTimeLimitHigh(unsigned int val){ m_TimeLimitHigh=val; }
void CWUListQueriesRequest::setWarnTimeLimitLow_null(){ m_WarnTimeLimitLow.Nil(); }void CWUListQueriesRequest::setWarnTimeLimitLow(unsigned int val){ m_WarnTimeLimitLow=val; }
void CWUListQueriesRequest::setWarnTimeLimitHigh_null(){ m_WarnTimeLimitHigh.Nil(); }void CWUListQueriesRequest::setWarnTimeLimitHigh(unsigned int val){ m_WarnTimeLimitHigh=val; }
void CWUListQueriesRequest::setPriorityLow_null(){ m_PriorityLow.Nil(); }void CWUListQueriesRequest::setPriorityLow(unsigned int val){ m_PriorityLow=val; }
void CWUListQueriesRequest::setPriorityHigh_null(){ m_PriorityHigh.Nil(); }void CWUListQueriesRequest::setPriorityHigh(unsigned int val){ m_PriorityHigh=val; }
void CWUListQueriesRequest::setActivated_null(){ m_Activated.Nil(); }void CWUListQueriesRequest::setActivated(bool val){ m_Activated=val; }
void CWUListQueriesRequest::setSuspendedByUser_null(){ m_SuspendedByUser.Nil(); }void CWUListQueriesRequest::setSuspendedByUser(bool val){ m_SuspendedByUser=val; }
void CWUListQueriesRequest::setWUID(const char * val){ m_WUID.set(val); }
void CWUListQueriesRequest::setQueryID(const char * val){ m_QueryID.set(val); }
void CWUListQueriesRequest::setQueryName(const char * val){ m_QueryName.set(val); }
void CWUListQueriesRequest::setPublishedBy(const char * val){ m_PublishedBy.set(val); }
void CWUListQueriesRequest::setPageSize_null(){ m_PageSize.Nil(); }void CWUListQueriesRequest::setPageSize(unsigned int val){ m_PageSize=val; }
void CWUListQueriesRequest::setPageStartFrom_null(){ m_PageStartFrom.Nil(); }void CWUListQueriesRequest::setPageStartFrom(unsigned int val){ m_PageStartFrom=val; }
void CWUListQueriesRequest::setSortby(const char * val){ m_Sortby.set(val); }
void CWUListQueriesRequest::setDescending_null(){ m_Descending.Nil(); }void CWUListQueriesRequest::setDescending(bool val){ m_Descending=val; }
void CWUListQueriesRequest::setCacheHint_null(){ m_CacheHint.Nil(); }void CWUListQueriesRequest::setCacheHint(__int64 val){ m_CacheHint=val; }
void CWUListQueriesRequest::setFileName(const char * val){ m_FileName.set(val); }
void CWUListQueriesRequest::setCheckAllNodes_null(){ m_CheckAllNodes.Nil(); }void CWUListQueriesRequest::setCheckAllNodes(bool val){ m_CheckAllNodes=val; }
extern "C"  IEspWUListQueriesRequest *createWUListQueriesRequest(const char *serv){return ((IEspWUListQueriesRequest *)new CWUListQueriesRequest(serv));}
extern "C"  IClientWUListQueriesRequest *createClientWUListQueriesRequest(const char *serv){return ((IClientWUListQueriesRequest *)new CWUListQueriesRequest(serv));}

//=======================================================
// class CWUListQueriesResponse Implementation
//=======================================================

CWUListQueriesResponse::CWUListQueriesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_NumberOfQueries(nilIgnore),m_CacheHint(nilIgnore),m_QuerysetQueries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListQueriesResponse::CWUListQueriesResponse(const char *serviceName, const char *bc)
	: m_NumberOfQueries(nilIgnore),m_CacheHint(nilIgnore),m_QuerysetQueries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesResponse");
}

CWUListQueriesResponse::CWUListQueriesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_NumberOfQueries(nilIgnore),m_CacheHint(nilIgnore),m_QuerysetQueries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListQueriesResponse::CWUListQueriesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_NumberOfQueries(nilIgnore),m_CacheHint(nilIgnore),m_QuerysetQueries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListQueriesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumberOfQueries\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerysetQueries\" type=\"tns:ArrayOfQuerySetQuery\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CQuerySetQuery::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("QuerySetQuery") && added.getValue("ArrayOfQuerySetQuery")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQuerySetQuery\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QuerySetQuery\" type=\"tns:QuerySetQuery\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQuerySetQuery",1);
	}
	return schema;
}

void CWUListQueriesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListQueriesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySetQuery"))
	{
		added.setValue("QuerySetQuery",1);
		CQuerySetQuery::getMapInfo(info,added);
	}
}

StringBuffer &CWUListQueriesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumberOfQueries");
	form.appendf("  <tr><td><b>NumberOfQueries: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CacheHint");
	form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerysetQueries");
	form.appendf("<tr><td><b>QuerysetQueries: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListQueriesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListQueriesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_NumberOfQueries.marshall(rpc_resp, "NumberOfQueries", "", "", "");
		m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
		m_QuerysetQueries.marshall(rpc_resp, "QuerysetQueries", "QuerySetQuery");
	}
}


void CWUListQueriesResponse::copy(CWUListQueriesResponse &from)
{
	m_NumberOfQueries.copy(from.m_NumberOfQueries);
	m_CacheHint.copy(from.m_CacheHint);
	m_QuerysetQueries.copy(from.m_QuerysetQueries);
}


void CWUListQueriesResponse::copy(IConstWUListQueriesResponse &ifrom)
{
	setNumberOfQueries(ifrom.getNumberOfQueries());
	setCacheHint(ifrom.getCacheHint());
	setQuerysetQueries(ifrom.getQuerysetQueries());
}


void CWUListQueriesResponse::getAttributes(IProperties &attributes)
{
}


void CWUListQueriesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_NumberOfQueries.toStr(ctx, buffer, "NumberOfQueries", "", true, "", "");
		m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
		m_QuerysetQueries.toStr(ctx, buffer, "QuerysetQueries", "QuerySetQuery");
	}
}


void CWUListQueriesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListQueriesResponse::serializer(IEspContext* ctx, IConstWUListQueriesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListQueriesResponse>");
	// field NumberOfQueries
	{
		int n = src.getNumberOfQueries();
		if (n)
			buffer.appendf("<NumberOfQueries>%d</NumberOfQueries>", n);
	}
	// field CacheHint
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	// field QuerysetQueries
	{
		IArrayOf<IConstQuerySetQuery>& v = src.getQuerysetQueries();
		int size = v.length();
		if (size>0)
			buffer.append("<QuerysetQueries>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQuerySetQuery::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</QuerysetQueries>");
	}
	if (keepRootTag)
		buffer.append("</WUListQueriesResponse>");
}

bool CWUListQueriesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_NumberOfQueries.unmarshall(rpc_request, "NumberOfQueries", basepath);
		hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
		hasValue |= m_QuerysetQueries.unmarshall(rpc_request, "QuerysetQueries", basepath);
	}
	return hasValue;
}

bool CWUListQueriesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_NumberOfQueries.unmarshall(ctx, soapval, "NumberOfQueries");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	hasValue |= m_QuerysetQueries.unmarshall(ctx, soapval, "QuerysetQueries");
	return hasValue;
}

bool CWUListQueriesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_NumberOfQueries.unmarshall(ctx, params, attachments, "NumberOfQueries", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	hasValue |= m_QuerysetQueries.unmarshall(ctx, params, attachments, "QuerysetQueries", basepath);
	return hasValue;
}

int CWUListQueriesResponse::getNumberOfQueries() { return m_NumberOfQueries;}
__int64 CWUListQueriesResponse::getCacheHint() { return m_CacheHint;}
IArrayOf<IConstQuerySetQuery> & CWUListQueriesResponse::getQuerysetQueries() { return (IArrayOf<IConstQuerySetQuery> &) m_QuerysetQueries; }
void CWUListQueriesResponse::setNumberOfQueries(int val){ m_NumberOfQueries=val; }
void CWUListQueriesResponse::setCacheHint(__int64 val){ m_CacheHint=val; }
void CWUListQueriesResponse::setQuerysetQueries(IArrayOf<IEspQuerySetQuery> &val)
{
	m_QuerysetQueries->kill();
	IArrayOf<IConstQuerySetQuery> &target = m_QuerysetQueries.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetQuery &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUListQueriesResponse::setQuerysetQueries(IArrayOf<IConstQuerySetQuery> &val)
{
	m_QuerysetQueries->kill();
	IArrayOf<IConstQuerySetQuery> &target = m_QuerysetQueries.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetQuery &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUListQueriesResponse *createWUListQueriesResponse(const char *serv){return ((IEspWUListQueriesResponse *)new CWUListQueriesResponse(serv));}
extern "C"  IClientWUListQueriesResponse *createClientWUListQueriesResponse(const char *serv){return ((IClientWUListQueriesResponse *)new CWUListQueriesResponse(serv));}

//=======================================================
// class CWUListQueriesUsingFileRequest Implementation
//=======================================================

CWUListQueriesUsingFileRequest::CWUListQueriesUsingFileRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilRemove),m_Process(nilRemove),m_FileName(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListQueriesUsingFileRequest::CWUListQueriesUsingFileRequest(const char *serviceName, const char *bc)
	: m_Target(nilRemove),m_Process(nilRemove),m_FileName(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileRequest");
}

CWUListQueriesUsingFileRequest::CWUListQueriesUsingFileRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilRemove),m_Process(nilRemove),m_FileName(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListQueriesUsingFileRequest::CWUListQueriesUsingFileRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilRemove),m_Process(nilRemove),m_FileName(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListQueriesUsingFileRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Process\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUListQueriesUsingFileRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListQueriesUsingFileRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUListQueriesUsingFileRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Process");
	form.appendf("  <tr><td><b>Process: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListQueriesUsingFileRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListQueriesUsingFileRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_Process.marshall(rpc_resp, "Process", "", "", "");
	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
}


void CWUListQueriesUsingFileRequest::copy(CWUListQueriesUsingFileRequest &from)
{
	m_Target.copy(from.m_Target);
	m_Process.copy(from.m_Process);
	m_FileName.copy(from.m_FileName);
}


void CWUListQueriesUsingFileRequest::copy(IConstWUListQueriesUsingFileRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setProcess(ifrom.getProcess());
	setFileName(ifrom.getFileName());
}


void CWUListQueriesUsingFileRequest::getAttributes(IProperties &attributes)
{
}


void CWUListQueriesUsingFileRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_Process.toStr(ctx, buffer, "Process", "", true, "", "");
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
}


void CWUListQueriesUsingFileRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListQueriesUsingFileRequest::serializer(IEspContext* ctx, IConstWUListQueriesUsingFileRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListQueriesUsingFileRequest>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field Process
	{
		const char* s = src.getProcess();
		if (s && *s)
		{
			buffer.append("<Process>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Process>");
		}
	}
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUListQueriesUsingFileRequest>");
}

bool CWUListQueriesUsingFileRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_Process.unmarshall(rpc_request, "Process", basepath);
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	return hasValue;
}

bool CWUListQueriesUsingFileRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_Process.unmarshall(ctx, soapval, "Process");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	return hasValue;
}

bool CWUListQueriesUsingFileRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_Process.unmarshall(ctx, params, attachments, "Process", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	return hasValue;
}

const char * CWUListQueriesUsingFileRequest::getTarget() { return m_Target.query();}
const char * CWUListQueriesUsingFileRequest::getProcess() { return m_Process.query();}
const char * CWUListQueriesUsingFileRequest::getFileName() { return m_FileName.query();}
void CWUListQueriesUsingFileRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUListQueriesUsingFileRequest::setProcess(const char * val){ m_Process.set(val); }
void CWUListQueriesUsingFileRequest::setFileName(const char * val){ m_FileName.set(val); }
extern "C"  IEspWUListQueriesUsingFileRequest *createWUListQueriesUsingFileRequest(const char *serv){return ((IEspWUListQueriesUsingFileRequest *)new CWUListQueriesUsingFileRequest(serv));}
extern "C"  IClientWUListQueriesUsingFileRequest *createClientWUListQueriesUsingFileRequest(const char *serv){return ((IClientWUListQueriesUsingFileRequest *)new CWUListQueriesUsingFileRequest(serv));}

//=======================================================
// class CQueryUsingFile Implementation
//=======================================================

CQueryUsingFile::CQueryUsingFile(const char *serviceName, IRpcMessageBinding *init)
	: m_Id(nilRemove),m_Package(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QueryUsingFile");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQueryUsingFile::CQueryUsingFile(const char *serviceName, const char *bc)
	: m_Id(nilRemove),m_Package(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QueryUsingFile");
}

StringBuffer &CQueryUsingFile::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Package\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQueryUsingFile::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQueryUsingFile::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQueryUsingFile::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Package");
	form.appendf("  <tr><td><b>Package: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQueryUsingFile::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQueryUsingFile::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_Package.marshall(rpc_resp, "Package", "", "", "");
}


void CQueryUsingFile::copy(CQueryUsingFile &from)
{
	m_Id.copy(from.m_Id);
	m_Package.copy(from.m_Package);
}


void CQueryUsingFile::copy(IConstQueryUsingFile &ifrom)
{
	setId(ifrom.getId());
	setPackage(ifrom.getPackage());
}


void CQueryUsingFile::getAttributes(IProperties &attributes)
{
}


void CQueryUsingFile::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_Package.toStr(ctx, buffer, "Package", "", true, "", "");
}


void CQueryUsingFile::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQueryUsingFile::serializer(IEspContext* ctx, IConstQueryUsingFile &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QueryUsingFile>");
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field Package
	{
		const char* s = src.getPackage();
		if (s && *s)
		{
			buffer.append("<Package>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Package>");
		}
	}
	if (keepRootTag)
		buffer.append("</QueryUsingFile>");
}

bool CQueryUsingFile::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_Package.unmarshall(rpc_request, "Package", basepath);
	return hasValue;
}

bool CQueryUsingFile::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_Package.unmarshall(ctx, soapval, "Package");
	return hasValue;
}

bool CQueryUsingFile::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_Package.unmarshall(ctx, params, attachments, "Package", basepath);
	return hasValue;
}

const char * CQueryUsingFile::getId() { return m_Id.query();}
const char * CQueryUsingFile::getPackage() { return m_Package.query();}
void CQueryUsingFile::setId(const char * val){ m_Id.set(val); }
void CQueryUsingFile::setPackage(const char * val){ m_Package.set(val); }
extern "C"  IEspQueryUsingFile *createQueryUsingFile(const char *serv, const char *msgname){return ((IEspQueryUsingFile *)new CQueryUsingFile(serv /*, msgname*/));}
extern "C"  IClientQueryUsingFile *createClientQueryUsingFile(const char *serv, const char *msgname){return ((IClientQueryUsingFile *)new CQueryUsingFile(serv /*, msgname*/));}

//=======================================================
// class CTargetQueriesUsingFile Implementation
//=======================================================

CTargetQueriesUsingFile::CTargetQueriesUsingFile(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilRemove),m_PackageMap(nilRemove),m_Queries(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("TargetQueriesUsingFile");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CTargetQueriesUsingFile::CTargetQueriesUsingFile(const char *serviceName, const char *bc)
	: m_Target(nilRemove),m_PackageMap(nilRemove),m_Queries(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("TargetQueriesUsingFile");
}

StringBuffer &CTargetQueriesUsingFile::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PackageMap\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queries\" type=\"tns:ArrayOfQueryUsingFile\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CQueryUsingFile::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("QueryUsingFile") && added.getValue("ArrayOfQueryUsingFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQueryUsingFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QueryUsingFile\" type=\"tns:QueryUsingFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQueryUsingFile",1);
	}
	return schema;
}

void CTargetQueriesUsingFile::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CTargetQueriesUsingFile::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QueryUsingFile"))
	{
		added.setValue("QueryUsingFile",1);
		CQueryUsingFile::getMapInfo(info,added);
	}
}

StringBuffer &CTargetQueriesUsingFile::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PackageMap");
	form.appendf("  <tr><td><b>PackageMap: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queries");
	form.appendf("<tr><td><b>Queries: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CTargetQueriesUsingFile::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CTargetQueriesUsingFile::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_PackageMap.marshall(rpc_resp, "PackageMap", "", "", "");
	m_Queries.marshall(rpc_resp, "Queries", "QueryUsingFile");
}


void CTargetQueriesUsingFile::copy(CTargetQueriesUsingFile &from)
{
	m_Target.copy(from.m_Target);
	m_PackageMap.copy(from.m_PackageMap);
	m_Queries.copy(from.m_Queries);
}


void CTargetQueriesUsingFile::copy(IConstTargetQueriesUsingFile &ifrom)
{
	setTarget(ifrom.getTarget());
	setPackageMap(ifrom.getPackageMap());
	setQueries(ifrom.getQueries());
}


void CTargetQueriesUsingFile::getAttributes(IProperties &attributes)
{
}


void CTargetQueriesUsingFile::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_PackageMap.toStr(ctx, buffer, "PackageMap", "", true, "", "");
	m_Queries.toStr(ctx, buffer, "Queries", "QueryUsingFile");
}


void CTargetQueriesUsingFile::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CTargetQueriesUsingFile::serializer(IEspContext* ctx, IConstTargetQueriesUsingFile &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<TargetQueriesUsingFile>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field PackageMap
	{
		const char* s = src.getPackageMap();
		if (s && *s)
		{
			buffer.append("<PackageMap>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PackageMap>");
		}
	}
	// field Queries
	{
		IArrayOf<IConstQueryUsingFile>& v = src.getQueries();
		int size = v.length();
		if (size>0)
			buffer.append("<Queries>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQueryUsingFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Queries>");
	}
	if (keepRootTag)
		buffer.append("</TargetQueriesUsingFile>");
}

bool CTargetQueriesUsingFile::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_PackageMap.unmarshall(rpc_request, "PackageMap", basepath);
	hasValue |= m_Queries.unmarshall(rpc_request, "Queries", basepath);
	return hasValue;
}

bool CTargetQueriesUsingFile::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_PackageMap.unmarshall(ctx, soapval, "PackageMap");
	hasValue |= m_Queries.unmarshall(ctx, soapval, "Queries");
	return hasValue;
}

bool CTargetQueriesUsingFile::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_PackageMap.unmarshall(ctx, params, attachments, "PackageMap", basepath);
	hasValue |= m_Queries.unmarshall(ctx, params, attachments, "Queries", basepath);
	return hasValue;
}

const char * CTargetQueriesUsingFile::getTarget() { return m_Target.query();}
const char * CTargetQueriesUsingFile::getPackageMap() { return m_PackageMap.query();}
IArrayOf<IConstQueryUsingFile> & CTargetQueriesUsingFile::getQueries() { return (IArrayOf<IConstQueryUsingFile> &) m_Queries; }
void CTargetQueriesUsingFile::setTarget(const char * val){ m_Target.set(val); }
void CTargetQueriesUsingFile::setPackageMap(const char * val){ m_PackageMap.set(val); }
void CTargetQueriesUsingFile::setQueries(IArrayOf<IEspQueryUsingFile> &val)
{
	m_Queries->kill();
	IArrayOf<IConstQueryUsingFile> &target = m_Queries.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQueryUsingFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CTargetQueriesUsingFile::setQueries(IArrayOf<IConstQueryUsingFile> &val)
{
	m_Queries->kill();
	IArrayOf<IConstQueryUsingFile> &target = m_Queries.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQueryUsingFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspTargetQueriesUsingFile *createTargetQueriesUsingFile(const char *serv, const char *msgname){return ((IEspTargetQueriesUsingFile *)new CTargetQueriesUsingFile(serv /*, msgname*/));}
extern "C"  IClientTargetQueriesUsingFile *createClientTargetQueriesUsingFile(const char *serv, const char *msgname){return ((IClientTargetQueriesUsingFile *)new CTargetQueriesUsingFile(serv /*, msgname*/));}

//=======================================================
// class CWUListQueriesUsingFileResponse Implementation
//=======================================================

CWUListQueriesUsingFileResponse::CWUListQueriesUsingFileResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Process(nilIgnore),m_FileName(nilIgnore),m_Targets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListQueriesUsingFileResponse::CWUListQueriesUsingFileResponse(const char *serviceName, const char *bc)
	: m_Process(nilIgnore),m_FileName(nilIgnore),m_Targets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileResponse");
}

CWUListQueriesUsingFileResponse::CWUListQueriesUsingFileResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Process(nilIgnore),m_FileName(nilIgnore),m_Targets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListQueriesUsingFileResponse::CWUListQueriesUsingFileResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Process(nilIgnore),m_FileName(nilIgnore),m_Targets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListQueriesUsingFileResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListQueriesUsingFileResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Process\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Targets\" type=\"tns:ArrayOfTargetQueriesUsingFile\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CTargetQueriesUsingFile::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("TargetQueriesUsingFile") && added.getValue("ArrayOfTargetQueriesUsingFile")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfTargetQueriesUsingFile\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TargetQueriesUsingFile\" type=\"tns:TargetQueriesUsingFile\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfTargetQueriesUsingFile",1);
	}
	return schema;
}

void CWUListQueriesUsingFileResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListQueriesUsingFileResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("TargetQueriesUsingFile"))
	{
		added.setValue("TargetQueriesUsingFile",1);
		CTargetQueriesUsingFile::getMapInfo(info,added);
	}
}

StringBuffer &CWUListQueriesUsingFileResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Process");
	form.appendf("  <tr><td><b>Process: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Targets");
	form.appendf("<tr><td><b>Targets: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListQueriesUsingFileResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListQueriesUsingFileResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Process.marshall(rpc_resp, "Process", "", "", "");
		m_FileName.marshall(rpc_resp, "FileName", "", "", "");
		m_Targets.marshall(rpc_resp, "Targets", "TargetQueriesUsingFile");
	}
}


void CWUListQueriesUsingFileResponse::copy(CWUListQueriesUsingFileResponse &from)
{
	m_Process.copy(from.m_Process);
	m_FileName.copy(from.m_FileName);
	m_Targets.copy(from.m_Targets);
}


void CWUListQueriesUsingFileResponse::copy(IConstWUListQueriesUsingFileResponse &ifrom)
{
	setProcess(ifrom.getProcess());
	setFileName(ifrom.getFileName());
	setTargets(ifrom.getTargets());
}


void CWUListQueriesUsingFileResponse::getAttributes(IProperties &attributes)
{
}


void CWUListQueriesUsingFileResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Process.toStr(ctx, buffer, "Process", "", true, "", "");
		m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
		m_Targets.toStr(ctx, buffer, "Targets", "TargetQueriesUsingFile");
	}
}


void CWUListQueriesUsingFileResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListQueriesUsingFileResponse::serializer(IEspContext* ctx, IConstWUListQueriesUsingFileResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListQueriesUsingFileResponse>");
	// field Process
	{
		const char* s = src.getProcess();
		if (s && *s)
		{
			buffer.append("<Process>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Process>");
		}
	}
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field Targets
	{
		IArrayOf<IConstTargetQueriesUsingFile>& v = src.getTargets();
		int size = v.length();
		if (size>0)
			buffer.append("<Targets>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CTargetQueriesUsingFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Targets>");
	}
	if (keepRootTag)
		buffer.append("</WUListQueriesUsingFileResponse>");
}

bool CWUListQueriesUsingFileResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Process.unmarshall(rpc_request, "Process", basepath);
		hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
		hasValue |= m_Targets.unmarshall(rpc_request, "Targets", basepath);
	}
	return hasValue;
}

bool CWUListQueriesUsingFileResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Process.unmarshall(ctx, soapval, "Process");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_Targets.unmarshall(ctx, soapval, "Targets");
	return hasValue;
}

bool CWUListQueriesUsingFileResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Process.unmarshall(ctx, params, attachments, "Process", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_Targets.unmarshall(ctx, params, attachments, "Targets", basepath);
	return hasValue;
}

const char * CWUListQueriesUsingFileResponse::getProcess() { return m_Process.query();}
const char * CWUListQueriesUsingFileResponse::getFileName() { return m_FileName.query();}
IArrayOf<IConstTargetQueriesUsingFile> & CWUListQueriesUsingFileResponse::getTargets() { return (IArrayOf<IConstTargetQueriesUsingFile> &) m_Targets; }
void CWUListQueriesUsingFileResponse::setProcess(const char * val){ m_Process.set(val); }
void CWUListQueriesUsingFileResponse::setFileName(const char * val){ m_FileName.set(val); }
void CWUListQueriesUsingFileResponse::setTargets(IArrayOf<IEspTargetQueriesUsingFile> &val)
{
	m_Targets->kill();
	IArrayOf<IConstTargetQueriesUsingFile> &target = m_Targets.getValue();
	ForEachItemIn(idx, val)
	{
		IEspTargetQueriesUsingFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUListQueriesUsingFileResponse::setTargets(IArrayOf<IConstTargetQueriesUsingFile> &val)
{
	m_Targets->kill();
	IArrayOf<IConstTargetQueriesUsingFile> &target = m_Targets.getValue();
	ForEachItemIn(idx, val)
	{
		IConstTargetQueriesUsingFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUListQueriesUsingFileResponse *createWUListQueriesUsingFileResponse(const char *serv){return ((IEspWUListQueriesUsingFileResponse *)new CWUListQueriesUsingFileResponse(serv));}
extern "C"  IClientWUListQueriesUsingFileResponse *createClientWUListQueriesUsingFileResponse(const char *serv){return ((IClientWUListQueriesUsingFileResponse *)new CWUListQueriesUsingFileResponse(serv));}

//=======================================================
// class CWUQueryFilesRequest Implementation
//=======================================================

CWUQueryFilesRequest::CWUQueryFilesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilRemove),m_QueryId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryFilesRequest::CWUQueryFilesRequest(const char *serviceName, const char *bc)
	: m_Target(nilRemove),m_QueryId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesRequest");
}

CWUQueryFilesRequest::CWUQueryFilesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilRemove),m_QueryId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryFilesRequest::CWUQueryFilesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilRemove),m_QueryId(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryFilesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQueryFilesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryFilesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQueryFilesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryFilesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryFilesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
}


void CWUQueryFilesRequest::copy(CWUQueryFilesRequest &from)
{
	m_Target.copy(from.m_Target);
	m_QueryId.copy(from.m_QueryId);
}


void CWUQueryFilesRequest::copy(IConstWUQueryFilesRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setQueryId(ifrom.getQueryId());
}


void CWUQueryFilesRequest::getAttributes(IProperties &attributes)
{
}


void CWUQueryFilesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
}


void CWUQueryFilesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryFilesRequest::serializer(IEspContext* ctx, IConstWUQueryFilesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryFilesRequest>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUQueryFilesRequest>");
}

bool CWUQueryFilesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	return hasValue;
}

bool CWUQueryFilesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	return hasValue;
}

bool CWUQueryFilesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	return hasValue;
}

const char * CWUQueryFilesRequest::getTarget() { return m_Target.query();}
const char * CWUQueryFilesRequest::getQueryId() { return m_QueryId.query();}
void CWUQueryFilesRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUQueryFilesRequest::setQueryId(const char * val){ m_QueryId.set(val); }
extern "C"  IEspWUQueryFilesRequest *createWUQueryFilesRequest(const char *serv){return ((IEspWUQueryFilesRequest *)new CWUQueryFilesRequest(serv));}
extern "C"  IClientWUQueryFilesRequest *createClientWUQueryFilesRequest(const char *serv){return ((IClientWUQueryFilesRequest *)new CWUQueryFilesRequest(serv));}

//=======================================================
// class CFileUsedByQuery Implementation
//=======================================================

CFileUsedByQuery::CFileUsedByQuery(const char *serviceName, IRpcMessageBinding *init)
	: m_FileName(nilRemove),m_FileSize(nilRemove),m_NumberOfParts(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("FileUsedByQuery");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CFileUsedByQuery::CFileUsedByQuery(const char *serviceName, const char *bc)
	: m_FileName(nilRemove),m_FileSize(nilRemove),m_NumberOfParts(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("FileUsedByQuery");
}

StringBuffer &CFileUsedByQuery::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileSize\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NumberOfParts\" type=\"xsd:unsignedInt\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CFileUsedByQuery::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CFileUsedByQuery::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CFileUsedByQuery::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileSize");
	form.appendf("  <tr><td><b>FileSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("NumberOfParts");
	form.appendf("  <tr><td><b>NumberOfParts: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CFileUsedByQuery::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CFileUsedByQuery::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	m_FileSize.marshall(rpc_resp, "FileSize", "", "", "");
	m_NumberOfParts.marshall(rpc_resp, "NumberOfParts", "", "", "");
}


void CFileUsedByQuery::copy(CFileUsedByQuery &from)
{
	m_FileName.copy(from.m_FileName);
	m_FileSize.copy(from.m_FileSize);
	m_NumberOfParts.copy(from.m_NumberOfParts);
}


void CFileUsedByQuery::copy(IConstFileUsedByQuery &ifrom)
{
	setFileName(ifrom.getFileName());
	setFileSize(ifrom.getFileSize());
	setNumberOfParts(ifrom.getNumberOfParts());
}


void CFileUsedByQuery::getAttributes(IProperties &attributes)
{
}


void CFileUsedByQuery::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	m_FileSize.toStr(ctx, buffer, "FileSize", "", true, "", "");
	m_NumberOfParts.toStr(ctx, buffer, "NumberOfParts", "", true, "", "");
}


void CFileUsedByQuery::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CFileUsedByQuery::serializer(IEspContext* ctx, IConstFileUsedByQuery &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<FileUsedByQuery>");
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field FileSize
	{
		//*** default kind: TK_INT; type=int64, name=FileSize
		buffer.append("<FileSize>");
		buffer.append(src.getFileSize());
		buffer.append("</FileSize>");
	}
	// field NumberOfParts
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=NumberOfParts
		buffer.append("<NumberOfParts>");
		buffer.append(src.getNumberOfParts());
		buffer.append("</NumberOfParts>");
	}
	if (keepRootTag)
		buffer.append("</FileUsedByQuery>");
}

bool CFileUsedByQuery::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_FileSize.unmarshall(rpc_request, "FileSize", basepath);
	hasValue |= m_NumberOfParts.unmarshall(rpc_request, "NumberOfParts", basepath);
	return hasValue;
}

bool CFileUsedByQuery::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_FileSize.unmarshall(ctx, soapval, "FileSize");
	hasValue |= m_NumberOfParts.unmarshall(ctx, soapval, "NumberOfParts");
	return hasValue;
}

bool CFileUsedByQuery::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_FileSize.unmarshall(ctx, params, attachments, "FileSize", basepath);
	hasValue |= m_NumberOfParts.unmarshall(ctx, params, attachments, "NumberOfParts", basepath);
	return hasValue;
}

const char * CFileUsedByQuery::getFileName() { return m_FileName.query();}
bool CFileUsedByQuery::getFileSize_isNull(){return m_FileSize.is_nil();}
__int64 CFileUsedByQuery::getFileSize() { return m_FileSize;}
bool CFileUsedByQuery::getNumberOfParts_isNull(){return m_NumberOfParts.is_nil();}
unsigned int CFileUsedByQuery::getNumberOfParts() { return m_NumberOfParts;}
void CFileUsedByQuery::setFileName(const char * val){ m_FileName.set(val); }
void CFileUsedByQuery::setFileSize_null(){ m_FileSize.Nil(); }void CFileUsedByQuery::setFileSize(__int64 val){ m_FileSize=val; }
void CFileUsedByQuery::setNumberOfParts_null(){ m_NumberOfParts.Nil(); }void CFileUsedByQuery::setNumberOfParts(unsigned int val){ m_NumberOfParts=val; }
extern "C"  IEspFileUsedByQuery *createFileUsedByQuery(const char *serv, const char *msgname){return ((IEspFileUsedByQuery *)new CFileUsedByQuery(serv /*, msgname*/));}
extern "C"  IClientFileUsedByQuery *createClientFileUsedByQuery(const char *serv, const char *msgname){return ((IClientFileUsedByQuery *)new CFileUsedByQuery(serv /*, msgname*/));}

//=======================================================
// class CWUQueryFilesResponse Implementation
//=======================================================

CWUQueryFilesResponse::CWUQueryFilesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Files(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryFilesResponse::CWUQueryFilesResponse(const char *serviceName, const char *bc)
	: m_Files(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesResponse");
}

CWUQueryFilesResponse::CWUQueryFilesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Files(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryFilesResponse::CWUQueryFilesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Files(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryFilesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryFilesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Files\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:FileUsedByQuery\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CFileUsedByQuery::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQueryFilesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryFilesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("FileUsedByQuery"))
	{
		added.setValue("FileUsedByQuery",1);
		CFileUsedByQuery::getMapInfo(info,added);
	}
}

StringBuffer &CWUQueryFilesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Files");
	form.appendf("<tr><td><b>Files: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryFilesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryFilesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Files.marshall(rpc_resp, "Files", "File");
	}
}


void CWUQueryFilesResponse::copy(CWUQueryFilesResponse &from)
{
	m_Files.copy(from.m_Files);
}


void CWUQueryFilesResponse::copy(IConstWUQueryFilesResponse &ifrom)
{
	setFiles(ifrom.getFiles());
}


void CWUQueryFilesResponse::getAttributes(IProperties &attributes)
{
}


void CWUQueryFilesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Files.toStr(ctx, buffer, "Files", "File");
	}
}


void CWUQueryFilesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryFilesResponse::serializer(IEspContext* ctx, IConstWUQueryFilesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryFilesResponse>");
	// field Files
	{
		IArrayOf<IConstFileUsedByQuery>& v = src.getFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<Files>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CFileUsedByQuery::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</Files>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryFilesResponse>");
}

bool CWUQueryFilesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Files.unmarshall(rpc_request, "Files", basepath);
	}
	return hasValue;
}

bool CWUQueryFilesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Files.unmarshall(ctx, soapval, "Files");
	return hasValue;
}

bool CWUQueryFilesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Files.unmarshall(ctx, params, attachments, "Files", basepath);
	return hasValue;
}

IArrayOf<IConstFileUsedByQuery> & CWUQueryFilesResponse::getFiles() { return (IArrayOf<IConstFileUsedByQuery> &) m_Files; }
void CWUQueryFilesResponse::setFiles(IArrayOf<IEspFileUsedByQuery> &val)
{
	m_Files->kill();
	IArrayOf<IConstFileUsedByQuery> &target = m_Files.getValue();
	ForEachItemIn(idx, val)
	{
		IEspFileUsedByQuery &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryFilesResponse::setFiles(IArrayOf<IConstFileUsedByQuery> &val)
{
	m_Files->kill();
	IArrayOf<IConstFileUsedByQuery> &target = m_Files.getValue();
	ForEachItemIn(idx, val)
	{
		IConstFileUsedByQuery &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQueryFilesResponse *createWUQueryFilesResponse(const char *serv){return ((IEspWUQueryFilesResponse *)new CWUQueryFilesResponse(serv));}
extern "C"  IClientWUQueryFilesResponse *createClientWUQueryFilesResponse(const char *serv){return ((IClientWUQueryFilesResponse *)new CWUQueryFilesResponse(serv));}

//=======================================================
// class CWUQueryDetailsRequest Implementation
//=======================================================

CWUQueryDetailsRequest::CWUQueryDetailsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_IncludeStateOnClusters(0, nilIgnore,false),m_IncludeSuperFiles(0, nilIgnore,false),m_IncludeWsEclAddresses(0, nilIgnore,false),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryDetailsRequest::CWUQueryDetailsRequest(const char *serviceName, const char *bc)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_IncludeStateOnClusters(0, nilIgnore,false),m_IncludeSuperFiles(0, nilIgnore,false),m_IncludeWsEclAddresses(0, nilIgnore,false),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsRequest");
}

CWUQueryDetailsRequest::CWUQueryDetailsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_IncludeStateOnClusters(0, nilIgnore,false),m_IncludeSuperFiles(0, nilIgnore,false),m_IncludeWsEclAddresses(0, nilIgnore,false),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryDetailsRequest::CWUQueryDetailsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_IncludeStateOnClusters(0, nilIgnore,false),m_IncludeSuperFiles(0, nilIgnore,false),m_IncludeWsEclAddresses(0, nilIgnore,false),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryDetailsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeStateOnClusters\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeSuperFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeWsEclAddresses\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUQueryDetailsRequest","CheckAllNodes")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"CheckAllNodes\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQueryDetailsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryDetailsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQueryDetailsRequest","CheckAllNodes",1.57);
}

StringBuffer &CWUQueryDetailsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySet");
	form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeStateOnClusters");
	
	form.appendf("  <tr><td><b>IncludeStateOnClusters? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeSuperFiles");
	
	form.appendf("  <tr><td><b>IncludeSuperFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeWsEclAddresses");
	
	form.appendf("  <tr><td><b>IncludeWsEclAddresses? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUQueryDetailsRequest","CheckAllNodes")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CheckAllNodes");
		
	form.appendf("  <tr><td><b>CheckAllNodes? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryDetailsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryDetailsRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
	m_IncludeStateOnClusters.marshall(rpc_resp, "IncludeStateOnClusters", "", "", "");
	m_IncludeSuperFiles.marshall(rpc_resp, "IncludeSuperFiles", "", "", "");
	m_IncludeWsEclAddresses.marshall(rpc_resp, "IncludeWsEclAddresses", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.marshall(rpc_resp, "CheckAllNodes", "", "", "");
}


void CWUQueryDetailsRequest::copy(CWUQueryDetailsRequest &from)
{
	m_QueryId.copy(from.m_QueryId);
	m_QuerySet.copy(from.m_QuerySet);
	m_IncludeStateOnClusters.copy(from.m_IncludeStateOnClusters);
	m_IncludeSuperFiles.copy(from.m_IncludeSuperFiles);
	m_IncludeWsEclAddresses.copy(from.m_IncludeWsEclAddresses);
	m_CheckAllNodes.copy(from.m_CheckAllNodes);
}


void CWUQueryDetailsRequest::copy(IConstWUQueryDetailsRequest &ifrom)
{
	setQueryId(ifrom.getQueryId());
	setQuerySet(ifrom.getQuerySet());
	setIncludeStateOnClusters(ifrom.getIncludeStateOnClusters());
	setIncludeSuperFiles(ifrom.getIncludeSuperFiles());
	setIncludeWsEclAddresses(ifrom.getIncludeWsEclAddresses());
	setCheckAllNodes(ifrom.getCheckAllNodes());
}


void CWUQueryDetailsRequest::getAttributes(IProperties &attributes)
{
}


void CWUQueryDetailsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
	m_IncludeStateOnClusters.toStr(ctx, buffer, "IncludeStateOnClusters", "", true, "", "");
	m_IncludeSuperFiles.toStr(ctx, buffer, "IncludeSuperFiles", "", true, "", "");
	m_IncludeWsEclAddresses.toStr(ctx, buffer, "IncludeWsEclAddresses", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.toStr(ctx, buffer, "CheckAllNodes", "", true, "", "");
}


void CWUQueryDetailsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryDetailsRequest::serializer(IEspContext* ctx, IConstWUQueryDetailsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryDetailsRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field QuerySet
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field IncludeStateOnClusters
	{
		bool b = src.getIncludeStateOnClusters();
		if (b)
			buffer.appendf("<IncludeStateOnClusters>1</IncludeStateOnClusters>");
	}
	// field IncludeSuperFiles
	{
		bool b = src.getIncludeSuperFiles();
		if (b)
			buffer.appendf("<IncludeSuperFiles>1</IncludeSuperFiles>");
	}
	// field IncludeWsEclAddresses
	{
		bool b = src.getIncludeWsEclAddresses();
		if (b)
			buffer.appendf("<IncludeWsEclAddresses>1</IncludeWsEclAddresses>");
	}
	// field CheckAllNodes
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		bool b = src.getCheckAllNodes();
		if (b)
			buffer.appendf("<CheckAllNodes>1</CheckAllNodes>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryDetailsRequest>");
}

bool CWUQueryDetailsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
	hasValue |= m_IncludeStateOnClusters.unmarshall(rpc_request, "IncludeStateOnClusters", basepath);
	hasValue |= m_IncludeSuperFiles.unmarshall(rpc_request, "IncludeSuperFiles", basepath);
	hasValue |= m_IncludeWsEclAddresses.unmarshall(rpc_request, "IncludeWsEclAddresses", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(rpc_request, "CheckAllNodes", basepath);
	return hasValue;
}

bool CWUQueryDetailsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_IncludeStateOnClusters.unmarshall(ctx, soapval, "IncludeStateOnClusters");
	hasValue |= m_IncludeSuperFiles.unmarshall(ctx, soapval, "IncludeSuperFiles");
	hasValue |= m_IncludeWsEclAddresses.unmarshall(ctx, soapval, "IncludeWsEclAddresses");
	hasValue |= m_CheckAllNodes.unmarshall(ctx, soapval, "CheckAllNodes");
	return hasValue;
}

bool CWUQueryDetailsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_IncludeStateOnClusters.unmarshall(ctx, params, attachments, "IncludeStateOnClusters", basepath);
	hasValue |= m_IncludeSuperFiles.unmarshall(ctx, params, attachments, "IncludeSuperFiles", basepath);
	hasValue |= m_IncludeWsEclAddresses.unmarshall(ctx, params, attachments, "IncludeWsEclAddresses", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(ctx, params, attachments, "CheckAllNodes", basepath);
	return hasValue;
}

const char * CWUQueryDetailsRequest::getQueryId() { return m_QueryId.query();}
const char * CWUQueryDetailsRequest::getQuerySet() { return m_QuerySet.query();}
bool CWUQueryDetailsRequest::getIncludeStateOnClusters() { return m_IncludeStateOnClusters;}
bool CWUQueryDetailsRequest::getIncludeSuperFiles() { return m_IncludeSuperFiles;}
bool CWUQueryDetailsRequest::getIncludeWsEclAddresses() { return m_IncludeWsEclAddresses;}
bool CWUQueryDetailsRequest::getCheckAllNodes() { return m_CheckAllNodes;}
void CWUQueryDetailsRequest::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUQueryDetailsRequest::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWUQueryDetailsRequest::setIncludeStateOnClusters(bool val){ m_IncludeStateOnClusters=val; }
void CWUQueryDetailsRequest::setIncludeSuperFiles(bool val){ m_IncludeSuperFiles=val; }
void CWUQueryDetailsRequest::setIncludeWsEclAddresses(bool val){ m_IncludeWsEclAddresses=val; }
void CWUQueryDetailsRequest::setCheckAllNodes(bool val){ m_CheckAllNodes=val; }
extern "C"  IEspWUQueryDetailsRequest *createWUQueryDetailsRequest(const char *serv){return ((IEspWUQueryDetailsRequest *)new CWUQueryDetailsRequest(serv));}
extern "C"  IClientWUQueryDetailsRequest *createClientWUQueryDetailsRequest(const char *serv){return ((IClientWUQueryDetailsRequest *)new CWUQueryDetailsRequest(serv));}

//=======================================================
// class CQuerySuperFile Implementation
//=======================================================

CQuerySuperFile::CQuerySuperFile(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_SubFiles(nilIgnore),m_SuperFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySuperFile");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySuperFile::CQuerySuperFile(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_SubFiles(nilIgnore),m_SuperFiles(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySuperFile");
}

StringBuffer &CQuerySuperFile::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SubFiles\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"File\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		if (!context.suppressed("QuerySuperFile","SuperFiles")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SuperFiles\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"SuperFile\" type=\"tns:QuerySuperFile\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySuperFile::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySuperFile::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("QuerySuperFile","SuperFiles",1.57);
}

StringBuffer &CQuerySuperFile::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SubFiles");
	form.appendf("<tr><td><b>SubFiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("QuerySuperFile","SuperFiles")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SuperFiles");
		form.appendf("<tr><td><b>SuperFiles: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySuperFile::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySuperFile::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_SubFiles.marshall(rpc_resp, "SubFiles", "File");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_SuperFiles.marshall(rpc_resp, "SuperFiles", "SuperFile");
}


void CQuerySuperFile::copy(CQuerySuperFile &from)
{
	m_Name.copy(from.m_Name);
	m_SubFiles.copy(from.m_SubFiles);
	m_SuperFiles.copy(from.m_SuperFiles);
}


void CQuerySuperFile::copy(IConstQuerySuperFile &ifrom)
{
	setName(ifrom.getName());
	setSubFiles(ifrom.getSubFiles());
	setSuperFiles(ifrom.getSuperFiles());
}


void CQuerySuperFile::getAttributes(IProperties &attributes)
{
}


void CQuerySuperFile::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_SubFiles.toStr(ctx, buffer, "SubFiles", "File");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_SuperFiles.toStr(ctx, buffer, "SuperFiles", "SuperFile");
}


void CQuerySuperFile::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySuperFile::serializer(IEspContext* ctx, IConstQuerySuperFile &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySuperFile>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field SubFiles
	{
		StringArray& v = src.getSubFiles();
		if (v.length()>0)
			buffer.append("<SubFiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<File>%s</File>",v.item(i));
		if (v.length()>0)
			buffer.append("</SubFiles>");
	}
	// field SuperFiles
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		IArrayOf<IConstQuerySuperFile>& v = src.getSuperFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<SuperFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<SuperFile>");
			CQuerySuperFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</SuperFile>");
		}
		if (size>0)
			buffer.append("</SuperFiles>");
	}
	if (keepRootTag)
		buffer.append("</QuerySuperFile>");
}

bool CQuerySuperFile::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_SubFiles.unmarshall(rpc_request, "SubFiles", basepath);
	hasValue |= m_SuperFiles.unmarshall(rpc_request, "SuperFiles", basepath);
	return hasValue;
}

bool CQuerySuperFile::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_SubFiles.unmarshall(ctx, soapval, "SubFiles");
	hasValue |= m_SuperFiles.unmarshall(ctx, soapval, "SuperFiles");
	return hasValue;
}

bool CQuerySuperFile::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_SubFiles.unmarshall(ctx, params, attachments, "SubFiles", basepath);
	hasValue |= m_SuperFiles.unmarshall(ctx, params, attachments, "SuperFiles", basepath);
	return hasValue;
}

const char * CQuerySuperFile::getName() { return m_Name.query();}
StringArray & CQuerySuperFile::getSubFiles() { return (StringArray &) m_SubFiles; }
IArrayOf<IConstQuerySuperFile> & CQuerySuperFile::getSuperFiles() { return (IArrayOf<IConstQuerySuperFile> &) m_SuperFiles; }
void CQuerySuperFile::setName(const char * val){ m_Name.set(val); }
void CQuerySuperFile::setSubFiles(StringArray &val){ m_SubFiles->kill();  CloneArray(m_SubFiles.getValue(), val); }
void CQuerySuperFile::setSuperFiles(IArrayOf<IEspQuerySuperFile> &val)
{
	m_SuperFiles->kill();
	IArrayOf<IConstQuerySuperFile> &target = m_SuperFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySuperFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CQuerySuperFile::setSuperFiles(IArrayOf<IConstQuerySuperFile> &val)
{
	m_SuperFiles->kill();
	IArrayOf<IConstQuerySuperFile> &target = m_SuperFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySuperFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspQuerySuperFile *createQuerySuperFile(const char *serv, const char *msgname){return ((IEspQuerySuperFile *)new CQuerySuperFile(serv /*, msgname*/));}
extern "C"  IClientQuerySuperFile *createClientQuerySuperFile(const char *serv, const char *msgname){return ((IClientQuerySuperFile *)new CQuerySuperFile(serv /*, msgname*/));}

//=======================================================
// class CWUQueryDetailsResponse Implementation
//=======================================================

CWUQueryDetailsResponse::CWUQueryDetailsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_Wuid(nilIgnore),m_Dll(nilIgnore),m_Suspended(nilIgnore),m_Activated(nilIgnore),m_SuspendedBy(nilIgnore),m_Clusters(nilIgnore),m_PublishedBy(nilIgnore),m_Comment(nilIgnore),m_LogicalFiles(nilIgnore),m_SuperFiles(nilIgnore),m_IsLibrary(nilIgnore),m_Priority(nilIgnore),m_WUSnapShot(nilIgnore),m_CompileTime(nilIgnore),m_LibrariesUsed(nilIgnore),m_CountGraphs(nilIgnore),m_GraphIds(nilIgnore),m_ResourceURLCount(nilIgnore),m_WsEclAddresses(nilIgnore),m_WUGraphs(nilIgnore),m_WUTimers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQueryDetailsResponse::CWUQueryDetailsResponse(const char *serviceName, const char *bc)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_Wuid(nilIgnore),m_Dll(nilIgnore),m_Suspended(nilIgnore),m_Activated(nilIgnore),m_SuspendedBy(nilIgnore),m_Clusters(nilIgnore),m_PublishedBy(nilIgnore),m_Comment(nilIgnore),m_LogicalFiles(nilIgnore),m_SuperFiles(nilIgnore),m_IsLibrary(nilIgnore),m_Priority(nilIgnore),m_WUSnapShot(nilIgnore),m_CompileTime(nilIgnore),m_LibrariesUsed(nilIgnore),m_CountGraphs(nilIgnore),m_GraphIds(nilIgnore),m_ResourceURLCount(nilIgnore),m_WsEclAddresses(nilIgnore),m_WUGraphs(nilIgnore),m_WUTimers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsResponse");
}

CWUQueryDetailsResponse::CWUQueryDetailsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_Wuid(nilIgnore),m_Dll(nilIgnore),m_Suspended(nilIgnore),m_Activated(nilIgnore),m_SuspendedBy(nilIgnore),m_Clusters(nilIgnore),m_PublishedBy(nilIgnore),m_Comment(nilIgnore),m_LogicalFiles(nilIgnore),m_SuperFiles(nilIgnore),m_IsLibrary(nilIgnore),m_Priority(nilIgnore),m_WUSnapShot(nilIgnore),m_CompileTime(nilIgnore),m_LibrariesUsed(nilIgnore),m_CountGraphs(nilIgnore),m_GraphIds(nilIgnore),m_ResourceURLCount(nilIgnore),m_WsEclAddresses(nilIgnore),m_WUGraphs(nilIgnore),m_WUTimers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQueryDetailsResponse::CWUQueryDetailsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QueryId(nilIgnore),m_QuerySet(nilIgnore),m_QueryName(nilIgnore),m_Wuid(nilIgnore),m_Dll(nilIgnore),m_Suspended(nilIgnore),m_Activated(nilIgnore),m_SuspendedBy(nilIgnore),m_Clusters(nilIgnore),m_PublishedBy(nilIgnore),m_Comment(nilIgnore),m_LogicalFiles(nilIgnore),m_SuperFiles(nilIgnore),m_IsLibrary(nilIgnore),m_Priority(nilIgnore),m_WUSnapShot(nilIgnore),m_CompileTime(nilIgnore),m_LibrariesUsed(nilIgnore),m_CountGraphs(nilIgnore),m_GraphIds(nilIgnore),m_ResourceURLCount(nilIgnore),m_WsEclAddresses(nilIgnore),m_WUGraphs(nilIgnore),m_WUTimers(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQueryDetailsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQueryDetailsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Dll\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Suspended\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUQueryDetailsResponse","Activated")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Activated\" type=\"xsd:boolean\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"SuspendedBy\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQueryDetailsResponse","Clusters")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Clusters\" type=\"tns:ArrayOfClusterQueryState\"/>\n");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"PublishedBy\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"LogicalFiles\" type=\"tns:EspStringArray\"/>\n");
		if (!context.suppressed("WUQueryDetailsResponse","SuperFiles")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"SuperFiles\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"SuperFile\" type=\"tns:QuerySuperFile\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!context.suppressed("WUQueryDetailsResponse","IsLibrary")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"IsLibrary\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","Priority")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","WUSnapShot")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WUSnapShot\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","CompileTime")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CompileTime\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","LibrariesUsed")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"LibrariesUsed\" type=\"tns:EspStringArray\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","CountGraphs")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CountGraphs\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","GraphIds")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"GraphIds\" type=\"tns:EspStringArray\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","ResourceURLCount")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ResourceURLCount\" type=\"xsd:int\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","WsEclAddresses")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WsEclAddresses\">");
			schema.append("<xsd:complexType><xsd:sequence>");
			schema.append("<xsd:element name=\"Address\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
			schema.append("</xsd:sequence></xsd:complexType>\n");
			schema.append("</xsd:element>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","WUGraphs")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WUGraphs\" type=\"tns:ArrayOfECLGraph\"/>\n");
		}
		if (!context.suppressed("WUQueryDetailsResponse","WUTimers")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"WUTimers\" type=\"tns:ArrayOfECLTimer\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUQueryDetailsResponse","Clusters"))
			CClusterQueryState::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("WUQueryDetailsResponse","SuperFiles"))
			CQuerySuperFile::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("WUQueryDetailsResponse","WUGraphs"))
			CECLGraph::getXsdDefinition(context, request, schema, added);
		if (!context.suppressed("WUQueryDetailsResponse","WUTimers"))
			CECLTimer::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	if (added.getValue("ClusterQueryState") && added.getValue("ArrayOfClusterQueryState")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfClusterQueryState\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ClusterQueryState\" type=\"tns:ClusterQueryState\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfClusterQueryState",1);
	}
	if (added.getValue("ECLGraph") && added.getValue("ArrayOfECLGraph")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLGraph\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLGraph\" type=\"tns:ECLGraph\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLGraph",1);
	}
	if (added.getValue("ECLTimer") && added.getValue("ArrayOfECLTimer")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfECLTimer\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ECLTimer\" type=\"tns:ECLTimer\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfECLTimer",1);
	}
	return schema;
}

void CWUQueryDetailsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQueryDetailsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQueryDetailsResponse","Activated",1.42);
	info.addMinVersion("WUQueryDetailsResponse","Clusters",1.43);
	info.addMinVersion("WUQueryDetailsResponse","SuperFiles",1.44);
	info.addMinVersion("WUQueryDetailsResponse","IsLibrary",1.46);
	info.addMinVersion("WUQueryDetailsResponse","Priority",1.46);
	info.addMinVersion("WUQueryDetailsResponse","WUSnapShot",1.46);
	info.addMinVersion("WUQueryDetailsResponse","CompileTime",1.46);
	info.addMinVersion("WUQueryDetailsResponse","LibrariesUsed",1.46);
	info.addMinVersion("WUQueryDetailsResponse","CountGraphs",1.46);
	info.addMinVersion("WUQueryDetailsResponse","GraphIds",1.46);
	info.addDeprVersion("WUQueryDetailsResponse","GraphIds",1.64);
	info.addMinVersion("WUQueryDetailsResponse","ResourceURLCount",1.5);
	info.addMinVersion("WUQueryDetailsResponse","WsEclAddresses",1.51);
	info.addMinVersion("WUQueryDetailsResponse","WUGraphs",1.64);
	info.addMinVersion("WUQueryDetailsResponse","WUTimers",1.64);
	if (!added.getValue("ClusterQueryState"))
	{
		added.setValue("ClusterQueryState",1);
		CClusterQueryState::getMapInfo(info,added);
	}
	if (!added.getValue("ECLGraph"))
	{
		added.setValue("ECLGraph",1);
		CECLGraph::getMapInfo(info,added);
	}
	if (!added.getValue("ECLTimer"))
	{
		added.setValue("ECLTimer",1);
		CECLTimer::getMapInfo(info,added);
	}
	if (!added.getValue("QuerySuperFile"))
	{
		added.setValue("QuerySuperFile",1);
		CQuerySuperFile::getMapInfo(info,added);
	}
}

StringBuffer &CWUQueryDetailsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySet");
	form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryName");
	form.appendf("  <tr><td><b>QueryName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Dll");
	form.appendf("  <tr><td><b>Dll: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Suspended");
	
	form.appendf("  <tr><td><b>Suspended? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUQueryDetailsResponse","Activated")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Activated");
		
	form.appendf("  <tr><td><b>Activated? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SuspendedBy");
	form.appendf("  <tr><td><b>SuspendedBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQueryDetailsResponse","Clusters")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Clusters");
		form.appendf("<tr><td><b>Clusters: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PublishedBy");
	form.appendf("  <tr><td><b>PublishedBy: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("LogicalFiles");
	form.appendf("<tr><td><b>LogicalFiles: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("WUQueryDetailsResponse","SuperFiles")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SuperFiles");
		form.appendf("<tr><td><b>SuperFiles: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("WUQueryDetailsResponse","IsLibrary")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IsLibrary");
		
	form.appendf("  <tr><td><b>IsLibrary? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUQueryDetailsResponse","Priority")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Priority");
		form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryDetailsResponse","WUSnapShot")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WUSnapShot");
		form.appendf("  <tr><td><b>WUSnapShot: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryDetailsResponse","CompileTime")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CompileTime");
		form.appendf("  <tr><td><b>CompileTime: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryDetailsResponse","LibrariesUsed")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("LibrariesUsed");
		form.appendf("<tr><td><b>LibrariesUsed: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("WUQueryDetailsResponse","CountGraphs")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("CountGraphs");
		form.appendf("  <tr><td><b>CountGraphs: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryDetailsResponse","GraphIds")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("GraphIds");
		form.appendf("<tr><td><b>GraphIds: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("WUQueryDetailsResponse","ResourceURLCount")) {
		extfix.clear();
		if (prefix && *prefix) extfix.append(prefix).append(".");
			extfix.append("ResourceURLCount");
		form.appendf("  <tr><td><b>ResourceURLCount: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUQueryDetailsResponse","WsEclAddresses")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WsEclAddresses");
		form.appendf("<tr><td><b>WsEclAddresses: </b></td><td>");
		form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
		form.append("</td></tr>");
	}
	if (!context.suppressed("WUQueryDetailsResponse","WUGraphs")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WUGraphs");
		form.appendf("<tr><td><b>WUGraphs: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (!context.suppressed("WUQueryDetailsResponse","WUTimers")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("WUTimers");
		form.appendf("<tr><td><b>WUTimers: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQueryDetailsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQueryDetailsResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
		m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
		m_QueryName.marshall(rpc_resp, "QueryName", "", "", "");
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
		m_Dll.marshall(rpc_resp, "Dll", "", "", "");
		m_Suspended.marshall(rpc_resp, "Suspended", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.42))
			m_Activated.marshall(rpc_resp, "Activated", "", "", "");
		m_SuspendedBy.marshall(rpc_resp, "SuspendedBy", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.43))
			m_Clusters.marshall(rpc_resp, "Clusters", "ClusterQueryState");
		m_PublishedBy.marshall(rpc_resp, "PublishedBy", "", "", "");
		m_Comment.marshall(rpc_resp, "Comment", "", "", "");
		m_LogicalFiles.marshall(rpc_resp, "LogicalFiles", "Item");
		if ((clientVer==-1.0 || clientVer>=1.44))
			m_SuperFiles.marshall(rpc_resp, "SuperFiles", "SuperFile");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_IsLibrary.marshall(rpc_resp, "IsLibrary", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_Priority.marshall(rpc_resp, "Priority", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_WUSnapShot.marshall(rpc_resp, "WUSnapShot", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_CompileTime.marshall(rpc_resp, "CompileTime", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_LibrariesUsed.marshall(rpc_resp, "LibrariesUsed", "Item");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_CountGraphs.marshall(rpc_resp, "CountGraphs", "", "", "");
		if ((clientVer==-1.0 || (clientVer>=1.46 && clientVer<1.64)))
			m_GraphIds.marshall(rpc_resp, "GraphIds", "Item");
		if ((clientVer==-1.0 || clientVer>=1.5))
			m_ResourceURLCount.marshall(rpc_resp, "ResourceURLCount", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.51))
			m_WsEclAddresses.marshall(rpc_resp, "WsEclAddresses", "Address");
		if ((clientVer==-1.0 || clientVer>=1.64))
			m_WUGraphs.marshall(rpc_resp, "WUGraphs", "ECLGraph");
		if ((clientVer==-1.0 || clientVer>=1.64))
			m_WUTimers.marshall(rpc_resp, "WUTimers", "ECLTimer");
	}
}


void CWUQueryDetailsResponse::copy(CWUQueryDetailsResponse &from)
{
	m_QueryId.copy(from.m_QueryId);
	m_QuerySet.copy(from.m_QuerySet);
	m_QueryName.copy(from.m_QueryName);
	m_Wuid.copy(from.m_Wuid);
	m_Dll.copy(from.m_Dll);
	m_Suspended.copy(from.m_Suspended);
	m_Activated.copy(from.m_Activated);
	m_SuspendedBy.copy(from.m_SuspendedBy);
	m_Clusters.copy(from.m_Clusters);
	m_PublishedBy.copy(from.m_PublishedBy);
	m_Comment.copy(from.m_Comment);
	m_LogicalFiles.copy(from.m_LogicalFiles);
	m_SuperFiles.copy(from.m_SuperFiles);
	m_IsLibrary.copy(from.m_IsLibrary);
	m_Priority.copy(from.m_Priority);
	m_WUSnapShot.copy(from.m_WUSnapShot);
	m_CompileTime.copy(from.m_CompileTime);
	m_LibrariesUsed.copy(from.m_LibrariesUsed);
	m_CountGraphs.copy(from.m_CountGraphs);
	m_GraphIds.copy(from.m_GraphIds);
	m_ResourceURLCount.copy(from.m_ResourceURLCount);
	m_WsEclAddresses.copy(from.m_WsEclAddresses);
	m_WUGraphs.copy(from.m_WUGraphs);
	m_WUTimers.copy(from.m_WUTimers);
}


void CWUQueryDetailsResponse::copy(IConstWUQueryDetailsResponse &ifrom)
{
	setQueryId(ifrom.getQueryId());
	setQuerySet(ifrom.getQuerySet());
	setQueryName(ifrom.getQueryName());
	setWuid(ifrom.getWuid());
	setDll(ifrom.getDll());
	setSuspended(ifrom.getSuspended());
	setActivated(ifrom.getActivated());
	setSuspendedBy(ifrom.getSuspendedBy());
	setClusters(ifrom.getClusters());
	setPublishedBy(ifrom.getPublishedBy());
	setComment(ifrom.getComment());
	setLogicalFiles(ifrom.getLogicalFiles());
	setSuperFiles(ifrom.getSuperFiles());
	setIsLibrary(ifrom.getIsLibrary());
	setPriority(ifrom.getPriority());
	setWUSnapShot(ifrom.getWUSnapShot());
	setCompileTime(ifrom.getCompileTime());
	setLibrariesUsed(ifrom.getLibrariesUsed());
	setCountGraphs(ifrom.getCountGraphs());
	setGraphIds(ifrom.getGraphIds());
	setResourceURLCount(ifrom.getResourceURLCount());
	setWsEclAddresses(ifrom.getWsEclAddresses());
	setWUGraphs(ifrom.getWUGraphs());
	setWUTimers(ifrom.getWUTimers());
}


void CWUQueryDetailsResponse::getAttributes(IProperties &attributes)
{
}


void CWUQueryDetailsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
		m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
		m_QueryName.toStr(ctx, buffer, "QueryName", "", true, "", "");
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
		m_Dll.toStr(ctx, buffer, "Dll", "", true, "", "");
		m_Suspended.toStr(ctx, buffer, "Suspended", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.42))
			m_Activated.toStr(ctx, buffer, "Activated", "", true, "", "");
		m_SuspendedBy.toStr(ctx, buffer, "SuspendedBy", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.43))
			m_Clusters.toStr(ctx, buffer, "Clusters", "ClusterQueryState");
		m_PublishedBy.toStr(ctx, buffer, "PublishedBy", "", true, "", "");
		m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
		m_LogicalFiles.toStr(ctx, buffer, "LogicalFiles", "Item");
		if ((clientVer==-1.0 || clientVer>=1.44))
			m_SuperFiles.toStr(ctx, buffer, "SuperFiles", "SuperFile");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_IsLibrary.toStr(ctx, buffer, "IsLibrary", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_WUSnapShot.toStr(ctx, buffer, "WUSnapShot", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_CompileTime.toStr(ctx, buffer, "CompileTime", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_LibrariesUsed.toStr(ctx, buffer, "LibrariesUsed", "Item");
		if ((clientVer==-1.0 || clientVer>=1.46))
			m_CountGraphs.toStr(ctx, buffer, "CountGraphs", "", true, "", "");
		if ((clientVer==-1.0 || (clientVer>=1.46 && clientVer<1.64)))
			m_GraphIds.toStr(ctx, buffer, "GraphIds", "Item");
		if ((clientVer==-1.0 || clientVer>=1.5))
			m_ResourceURLCount.toStr(ctx, buffer, "ResourceURLCount", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.51))
			m_WsEclAddresses.toStr(ctx, buffer, "WsEclAddresses", "Address");
		if ((clientVer==-1.0 || clientVer>=1.64))
			m_WUGraphs.toStr(ctx, buffer, "WUGraphs", "ECLGraph");
		if ((clientVer==-1.0 || clientVer>=1.64))
			m_WUTimers.toStr(ctx, buffer, "WUTimers", "ECLTimer");
	}
}


void CWUQueryDetailsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQueryDetailsResponse::serializer(IEspContext* ctx, IConstWUQueryDetailsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQueryDetailsResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field QuerySet
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field QueryName
	{
		const char* s = src.getQueryName();
		if (s && *s)
		{
			buffer.append("<QueryName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryName>");
		}
	}
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field Dll
	{
		const char* s = src.getDll();
		if (s && *s)
		{
			buffer.append("<Dll>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Dll>");
		}
	}
	// field Suspended
	{
		bool b = src.getSuspended();
		if (b)
			buffer.appendf("<Suspended>1</Suspended>");
	}
	// field Activated
	if ((clientVer==-1.0 || clientVer>=1.42))
	{
		bool b = src.getActivated();
		if (b)
			buffer.appendf("<Activated>1</Activated>");
	}
	// field SuspendedBy
	{
		const char* s = src.getSuspendedBy();
		if (s && *s)
		{
			buffer.append("<SuspendedBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SuspendedBy>");
		}
	}
	// field Clusters
	if ((clientVer==-1.0 || clientVer>=1.43))
	{
		IArrayOf<IConstClusterQueryState>& v = src.getClusters();
		int size = v.length();
		if (size>0)
			buffer.append("<Clusters>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CClusterQueryState::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Clusters>");
	}
	// field PublishedBy
	{
		const char* s = src.getPublishedBy();
		if (s && *s)
		{
			buffer.append("<PublishedBy>");
			encodeUtf8XML(s,buffer);
			buffer.append("</PublishedBy>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	// field LogicalFiles
	{
		StringArray& v = src.getLogicalFiles();
		if (v.length()>0)
			buffer.append("<LogicalFiles>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</LogicalFiles>");
	}
	// field SuperFiles
	if ((clientVer==-1.0 || clientVer>=1.44))
	{
		IArrayOf<IConstQuerySuperFile>& v = src.getSuperFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<SuperFiles>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<SuperFile>");
			CQuerySuperFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</SuperFile>");
		}
		if (size>0)
			buffer.append("</SuperFiles>");
	}
	// field IsLibrary
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		bool b = src.getIsLibrary();
		if (b)
			buffer.appendf("<IsLibrary>1</IsLibrary>");
	}
	// field Priority
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<Priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Priority>");
		}
	}
	// field WUSnapShot
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		const char* s = src.getWUSnapShot();
		if (s && *s)
		{
			buffer.append("<WUSnapShot>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUSnapShot>");
		}
	}
	// field CompileTime
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		const char* s = src.getCompileTime();
		if (s && *s)
		{
			buffer.append("<CompileTime>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CompileTime>");
		}
	}
	// field LibrariesUsed
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		StringArray& v = src.getLibrariesUsed();
		if (v.length()>0)
			buffer.append("<LibrariesUsed>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</LibrariesUsed>");
	}
	// field CountGraphs
	if ((clientVer==-1.0 || clientVer>=1.46))
	{
		int n = src.getCountGraphs();
		if (n)
			buffer.appendf("<CountGraphs>%d</CountGraphs>", n);
	}
	// field GraphIds
	if ((clientVer==-1.0 || (clientVer>=1.46 && clientVer<1.64)))
	{
		StringArray& v = src.getGraphIds();
		if (v.length()>0)
			buffer.append("<GraphIds>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</GraphIds>");
	}
	// field ResourceURLCount
	if ((clientVer==-1.0 || clientVer>=1.5))
	{
		int n = src.getResourceURLCount();
		if (n)
			buffer.appendf("<ResourceURLCount>%d</ResourceURLCount>", n);
	}
	// field WsEclAddresses
	if ((clientVer==-1.0 || clientVer>=1.51))
	{
		StringArray& v = src.getWsEclAddresses();
		if (v.length()>0)
			buffer.append("<WsEclAddresses>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Address>%s</Address>",v.item(i));
		if (v.length()>0)
			buffer.append("</WsEclAddresses>");
	}
	// field WUGraphs
	if ((clientVer==-1.0 || clientVer>=1.64))
	{
		IArrayOf<IConstECLGraph>& v = src.getWUGraphs();
		int size = v.length();
		if (size>0)
			buffer.append("<WUGraphs>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLGraph::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</WUGraphs>");
	}
	// field WUTimers
	if ((clientVer==-1.0 || clientVer>=1.64))
	{
		IArrayOf<IConstECLTimer>& v = src.getWUTimers();
		int size = v.length();
		if (size>0)
			buffer.append("<WUTimers>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CECLTimer::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</WUTimers>");
	}
	if (keepRootTag)
		buffer.append("</WUQueryDetailsResponse>");
}

bool CWUQueryDetailsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
		hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
		hasValue |= m_QueryName.unmarshall(rpc_request, "QueryName", basepath);
		hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
		hasValue |= m_Dll.unmarshall(rpc_request, "Dll", basepath);
		hasValue |= m_Suspended.unmarshall(rpc_request, "Suspended", basepath);
		hasValue |= m_Activated.unmarshall(rpc_request, "Activated", basepath);
		hasValue |= m_SuspendedBy.unmarshall(rpc_request, "SuspendedBy", basepath);
		hasValue |= m_Clusters.unmarshall(rpc_request, "Clusters", basepath);
		hasValue |= m_PublishedBy.unmarshall(rpc_request, "PublishedBy", basepath);
		hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
		hasValue |= m_LogicalFiles.unmarshall(rpc_request, "LogicalFiles", basepath);
		hasValue |= m_SuperFiles.unmarshall(rpc_request, "SuperFiles", basepath);
		hasValue |= m_IsLibrary.unmarshall(rpc_request, "IsLibrary", basepath);
		hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
		hasValue |= m_WUSnapShot.unmarshall(rpc_request, "WUSnapShot", basepath);
		hasValue |= m_CompileTime.unmarshall(rpc_request, "CompileTime", basepath);
		hasValue |= m_LibrariesUsed.unmarshall(rpc_request, "LibrariesUsed", basepath);
		hasValue |= m_CountGraphs.unmarshall(rpc_request, "CountGraphs", basepath);
		hasValue |= m_GraphIds.unmarshall(rpc_request, "GraphIds", basepath);
		hasValue |= m_ResourceURLCount.unmarshall(rpc_request, "ResourceURLCount", basepath);
		hasValue |= m_WsEclAddresses.unmarshall(rpc_request, "WsEclAddresses", basepath);
		hasValue |= m_WUGraphs.unmarshall(rpc_request, "WUGraphs", basepath);
		hasValue |= m_WUTimers.unmarshall(rpc_request, "WUTimers", basepath);
	}
	return hasValue;
}

bool CWUQueryDetailsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_QueryName.unmarshall(ctx, soapval, "QueryName");
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_Dll.unmarshall(ctx, soapval, "Dll");
	hasValue |= m_Suspended.unmarshall(ctx, soapval, "Suspended");
	hasValue |= m_Activated.unmarshall(ctx, soapval, "Activated");
	hasValue |= m_SuspendedBy.unmarshall(ctx, soapval, "SuspendedBy");
	hasValue |= m_Clusters.unmarshall(ctx, soapval, "Clusters");
	hasValue |= m_PublishedBy.unmarshall(ctx, soapval, "PublishedBy");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	hasValue |= m_LogicalFiles.unmarshall(ctx, soapval, "LogicalFiles");
	hasValue |= m_SuperFiles.unmarshall(ctx, soapval, "SuperFiles");
	hasValue |= m_IsLibrary.unmarshall(ctx, soapval, "IsLibrary");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	hasValue |= m_WUSnapShot.unmarshall(ctx, soapval, "WUSnapShot");
	hasValue |= m_CompileTime.unmarshall(ctx, soapval, "CompileTime");
	hasValue |= m_LibrariesUsed.unmarshall(ctx, soapval, "LibrariesUsed");
	hasValue |= m_CountGraphs.unmarshall(ctx, soapval, "CountGraphs");
	hasValue |= m_GraphIds.unmarshall(ctx, soapval, "GraphIds");
	hasValue |= m_ResourceURLCount.unmarshall(ctx, soapval, "ResourceURLCount");
	hasValue |= m_WsEclAddresses.unmarshall(ctx, soapval, "WsEclAddresses");
	hasValue |= m_WUGraphs.unmarshall(ctx, soapval, "WUGraphs");
	hasValue |= m_WUTimers.unmarshall(ctx, soapval, "WUTimers");
	return hasValue;
}

bool CWUQueryDetailsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_QueryName.unmarshall(ctx, params, attachments, "QueryName", basepath);
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_Dll.unmarshall(ctx, params, attachments, "Dll", basepath);
	hasValue |= m_Suspended.unmarshall(ctx, params, attachments, "Suspended", basepath);
	hasValue |= m_Activated.unmarshall(ctx, params, attachments, "Activated", basepath);
	hasValue |= m_SuspendedBy.unmarshall(ctx, params, attachments, "SuspendedBy", basepath);
	hasValue |= m_Clusters.unmarshall(ctx, params, attachments, "Clusters", basepath);
	hasValue |= m_PublishedBy.unmarshall(ctx, params, attachments, "PublishedBy", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	hasValue |= m_LogicalFiles.unmarshall(ctx, params, attachments, "LogicalFiles", basepath);
	hasValue |= m_SuperFiles.unmarshall(ctx, params, attachments, "SuperFiles", basepath);
	hasValue |= m_IsLibrary.unmarshall(ctx, params, attachments, "IsLibrary", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	hasValue |= m_WUSnapShot.unmarshall(ctx, params, attachments, "WUSnapShot", basepath);
	hasValue |= m_CompileTime.unmarshall(ctx, params, attachments, "CompileTime", basepath);
	hasValue |= m_LibrariesUsed.unmarshall(ctx, params, attachments, "LibrariesUsed", basepath);
	hasValue |= m_CountGraphs.unmarshall(ctx, params, attachments, "CountGraphs", basepath);
	hasValue |= m_GraphIds.unmarshall(ctx, params, attachments, "GraphIds", basepath);
	hasValue |= m_ResourceURLCount.unmarshall(ctx, params, attachments, "ResourceURLCount", basepath);
	hasValue |= m_WsEclAddresses.unmarshall(ctx, params, attachments, "WsEclAddresses", basepath);
	hasValue |= m_WUGraphs.unmarshall(ctx, params, attachments, "WUGraphs", basepath);
	hasValue |= m_WUTimers.unmarshall(ctx, params, attachments, "WUTimers", basepath);
	return hasValue;
}

const char * CWUQueryDetailsResponse::getQueryId() { return m_QueryId.query();}
const char * CWUQueryDetailsResponse::getQuerySet() { return m_QuerySet.query();}
const char * CWUQueryDetailsResponse::getQueryName() { return m_QueryName.query();}
const char * CWUQueryDetailsResponse::getWuid() { return m_Wuid.query();}
const char * CWUQueryDetailsResponse::getDll() { return m_Dll.query();}
bool CWUQueryDetailsResponse::getSuspended() { return m_Suspended;}
bool CWUQueryDetailsResponse::getActivated() { return m_Activated;}
const char * CWUQueryDetailsResponse::getSuspendedBy() { return m_SuspendedBy.query();}
IArrayOf<IConstClusterQueryState> & CWUQueryDetailsResponse::getClusters() { return (IArrayOf<IConstClusterQueryState> &) m_Clusters; }
const char * CWUQueryDetailsResponse::getPublishedBy() { return m_PublishedBy.query();}
const char * CWUQueryDetailsResponse::getComment() { return m_Comment.query();}
StringArray & CWUQueryDetailsResponse::getLogicalFiles() { return (StringArray &) m_LogicalFiles; }
IArrayOf<IConstQuerySuperFile> & CWUQueryDetailsResponse::getSuperFiles() { return (IArrayOf<IConstQuerySuperFile> &) m_SuperFiles; }
bool CWUQueryDetailsResponse::getIsLibrary() { return m_IsLibrary;}
const char * CWUQueryDetailsResponse::getPriority() { return m_Priority.query();}
const char * CWUQueryDetailsResponse::getWUSnapShot() { return m_WUSnapShot.query();}
const char * CWUQueryDetailsResponse::getCompileTime() { return m_CompileTime.query();}
StringArray & CWUQueryDetailsResponse::getLibrariesUsed() { return (StringArray &) m_LibrariesUsed; }
int CWUQueryDetailsResponse::getCountGraphs() { return m_CountGraphs;}
StringArray & CWUQueryDetailsResponse::getGraphIds() { return (StringArray &) m_GraphIds; }
int CWUQueryDetailsResponse::getResourceURLCount() { return m_ResourceURLCount;}
StringArray & CWUQueryDetailsResponse::getWsEclAddresses() { return (StringArray &) m_WsEclAddresses; }
IArrayOf<IConstECLGraph> & CWUQueryDetailsResponse::getWUGraphs() { return (IArrayOf<IConstECLGraph> &) m_WUGraphs; }
IArrayOf<IConstECLTimer> & CWUQueryDetailsResponse::getWUTimers() { return (IArrayOf<IConstECLTimer> &) m_WUTimers; }
void CWUQueryDetailsResponse::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUQueryDetailsResponse::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWUQueryDetailsResponse::setQueryName(const char * val){ m_QueryName.set(val); }
void CWUQueryDetailsResponse::setWuid(const char * val){ m_Wuid.set(val); }
void CWUQueryDetailsResponse::setDll(const char * val){ m_Dll.set(val); }
void CWUQueryDetailsResponse::setSuspended(bool val){ m_Suspended=val; }
void CWUQueryDetailsResponse::setActivated(bool val){ m_Activated=val; }
void CWUQueryDetailsResponse::setSuspendedBy(const char * val){ m_SuspendedBy.set(val); }
void CWUQueryDetailsResponse::setClusters(IArrayOf<IEspClusterQueryState> &val)
{
	m_Clusters->kill();
	IArrayOf<IConstClusterQueryState> &target = m_Clusters.getValue();
	ForEachItemIn(idx, val)
	{
		IEspClusterQueryState &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryDetailsResponse::setClusters(IArrayOf<IConstClusterQueryState> &val)
{
	m_Clusters->kill();
	IArrayOf<IConstClusterQueryState> &target = m_Clusters.getValue();
	ForEachItemIn(idx, val)
	{
		IConstClusterQueryState &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryDetailsResponse::setPublishedBy(const char * val){ m_PublishedBy.set(val); }
void CWUQueryDetailsResponse::setComment(const char * val){ m_Comment.set(val); }
void CWUQueryDetailsResponse::setLogicalFiles(StringArray &val){ m_LogicalFiles->kill();  CloneArray(m_LogicalFiles.getValue(), val); }
void CWUQueryDetailsResponse::setSuperFiles(IArrayOf<IEspQuerySuperFile> &val)
{
	m_SuperFiles->kill();
	IArrayOf<IConstQuerySuperFile> &target = m_SuperFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySuperFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryDetailsResponse::setSuperFiles(IArrayOf<IConstQuerySuperFile> &val)
{
	m_SuperFiles->kill();
	IArrayOf<IConstQuerySuperFile> &target = m_SuperFiles.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySuperFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryDetailsResponse::setIsLibrary(bool val){ m_IsLibrary=val; }
void CWUQueryDetailsResponse::setPriority(const char * val){ m_Priority.set(val); }
void CWUQueryDetailsResponse::setWUSnapShot(const char * val){ m_WUSnapShot.set(val); }
void CWUQueryDetailsResponse::setCompileTime(const char * val){ m_CompileTime.set(val); }
void CWUQueryDetailsResponse::setLibrariesUsed(StringArray &val){ m_LibrariesUsed->kill();  CloneArray(m_LibrariesUsed.getValue(), val); }
void CWUQueryDetailsResponse::setCountGraphs(int val){ m_CountGraphs=val; }
void CWUQueryDetailsResponse::setGraphIds(StringArray &val){ m_GraphIds->kill();  CloneArray(m_GraphIds.getValue(), val); }
void CWUQueryDetailsResponse::setResourceURLCount(int val){ m_ResourceURLCount=val; }
void CWUQueryDetailsResponse::setWsEclAddresses(StringArray &val){ m_WsEclAddresses->kill();  CloneArray(m_WsEclAddresses.getValue(), val); }
void CWUQueryDetailsResponse::setWUGraphs(IArrayOf<IEspECLGraph> &val)
{
	m_WUGraphs->kill();
	IArrayOf<IConstECLGraph> &target = m_WUGraphs.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLGraph &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryDetailsResponse::setWUGraphs(IArrayOf<IConstECLGraph> &val)
{
	m_WUGraphs->kill();
	IArrayOf<IConstECLGraph> &target = m_WUGraphs.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLGraph &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryDetailsResponse::setWUTimers(IArrayOf<IEspECLTimer> &val)
{
	m_WUTimers->kill();
	IArrayOf<IConstECLTimer> &target = m_WUTimers.getValue();
	ForEachItemIn(idx, val)
	{
		IEspECLTimer &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQueryDetailsResponse::setWUTimers(IArrayOf<IConstECLTimer> &val)
{
	m_WUTimers->kill();
	IArrayOf<IConstECLTimer> &target = m_WUTimers.getValue();
	ForEachItemIn(idx, val)
	{
		IConstECLTimer &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQueryDetailsResponse *createWUQueryDetailsResponse(const char *serv){return ((IEspWUQueryDetailsResponse *)new CWUQueryDetailsResponse(serv));}
extern "C"  IClientWUQueryDetailsResponse *createClientWUQueryDetailsResponse(const char *serv){return ((IClientWUQueryDetailsResponse *)new CWUQueryDetailsResponse(serv));}

//=======================================================
// class CWUMultiQuerySetDetailsRequest Implementation
//=======================================================

CWUMultiQuerySetDetailsRequest::CWUMultiQuerySetDetailsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ClusterName(nilIgnore),m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUMultiQuerySetDetailsRequest::CWUMultiQuerySetDetailsRequest(const char *serviceName, const char *bc)
	: m_ClusterName(nilIgnore),m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsRequest");
}

CWUMultiQuerySetDetailsRequest::CWUMultiQuerySetDetailsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ClusterName(nilIgnore),m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUMultiQuerySetDetailsRequest::CWUMultiQuerySetDetailsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ClusterName(nilIgnore),m_QuerySetName(nilIgnore),m_Filter(nilIgnore),m_FilterType("All"),m_CheckAllNodes(1, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUMultiQuerySetDetailsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Filter\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"All\" name=\"FilterType\" type=\"tns:WUQuerySetFilterType\"/>\n");
		if (!context.suppressed("WUMultiQuerySetDetailsRequest","CheckAllNodes")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"CheckAllNodes\" type=\"xsd:boolean\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXWUQuerySetFilterType::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUMultiQuerySetDetailsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUMultiQuerySetDetailsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUMultiQuerySetDetailsRequest","CheckAllNodes",1.57);
	if (!added.getValue("WUQuerySetFilterType"))
	{
		added.setValue("WUQuerySetFilterType",1);
		CXWUQuerySetFilterType::getMapInfo(info,added);
	}
}

StringBuffer &CWUMultiQuerySetDetailsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Filter");
	form.appendf("  <tr><td><b>Filter: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FilterType");
	form.appendf("  <tr><td><b>FilterType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"All\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUMultiQuerySetDetailsRequest","CheckAllNodes")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CheckAllNodes");
		
	form.appendf("  <tr><td><b>CheckAllNodes? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUMultiQuerySetDetailsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUMultiQuerySetDetailsRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
	m_Filter.marshall(rpc_resp, "Filter", "", "", "");
	m_FilterType.marshall(rpc_resp, "FilterType", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.marshall(rpc_resp, "CheckAllNodes", "", "", "");
}


void CWUMultiQuerySetDetailsRequest::copy(CWUMultiQuerySetDetailsRequest &from)
{
	m_ClusterName.copy(from.m_ClusterName);
	m_QuerySetName.copy(from.m_QuerySetName);
	m_Filter.copy(from.m_Filter);
	m_FilterType.copy(from.m_FilterType);
	m_CheckAllNodes.copy(from.m_CheckAllNodes);
}


void CWUMultiQuerySetDetailsRequest::copy(IConstWUMultiQuerySetDetailsRequest &ifrom)
{
	setClusterName(ifrom.getClusterName());
	setQuerySetName(ifrom.getQuerySetName());
	setFilter(ifrom.getFilter());
	setFilterType(ifrom.getFilterType());
	setCheckAllNodes(ifrom.getCheckAllNodes());
}


void CWUMultiQuerySetDetailsRequest::getAttributes(IProperties &attributes)
{
}


void CWUMultiQuerySetDetailsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
	m_Filter.toStr(ctx, buffer, "Filter", "", true, "", "");
	m_FilterType.toStr(ctx, buffer, "FilterType", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_CheckAllNodes.toStr(ctx, buffer, "CheckAllNodes", "", true, "", "");
}


void CWUMultiQuerySetDetailsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUMultiQuerySetDetailsRequest::serializer(IEspContext* ctx, IConstWUMultiQuerySetDetailsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUMultiQuerySetDetailsRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field Filter
	{
		const char* s = src.getFilter();
		if (s && *s)
		{
			buffer.append("<Filter>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filter>");
		}
	}
	// field FilterType
	{
		const char* s = src.getFilterTypeAsString();
		buffer.append("<FilterType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</FilterType>");
	}
	// field CheckAllNodes
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		bool b = src.getCheckAllNodes();
		if (b)
			buffer.appendf("<CheckAllNodes>1</CheckAllNodes>");
	}
	if (keepRootTag)
		buffer.append("</WUMultiQuerySetDetailsRequest>");
}

bool CWUMultiQuerySetDetailsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
	hasValue |= m_Filter.unmarshall(rpc_request, "Filter", basepath);
	hasValue |= m_FilterType.unmarshall(rpc_request, "FilterType", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(rpc_request, "CheckAllNodes", basepath);
	return hasValue;
}

bool CWUMultiQuerySetDetailsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_Filter.unmarshall(ctx, soapval, "Filter");
	hasValue |= m_FilterType.unmarshall(ctx, soapval, "FilterType");
	hasValue |= m_CheckAllNodes.unmarshall(ctx, soapval, "CheckAllNodes");
	return hasValue;
}

bool CWUMultiQuerySetDetailsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_Filter.unmarshall(ctx, params, attachments, "Filter", basepath);
	hasValue |= m_FilterType.unmarshall(ctx, params, attachments, "FilterType", basepath);
	hasValue |= m_CheckAllNodes.unmarshall(ctx, params, attachments, "CheckAllNodes", basepath);
	return hasValue;
}

const char * CWUMultiQuerySetDetailsRequest::getClusterName() { return m_ClusterName.query();}
const char * CWUMultiQuerySetDetailsRequest::getQuerySetName() { return m_QuerySetName.query();}
const char * CWUMultiQuerySetDetailsRequest::getFilter() { return m_Filter.query();}
CWUQuerySetFilterType CWUMultiQuerySetDetailsRequest::getFilterType() { return m_FilterType.getValue(); }
const char* CWUMultiQuerySetDetailsRequest::getFilterTypeAsString() {  return (const char*)m_FilterType; }
bool CWUMultiQuerySetDetailsRequest::getCheckAllNodes() { return m_CheckAllNodes;}
void CWUMultiQuerySetDetailsRequest::setClusterName(const char * val){ m_ClusterName.set(val); }
void CWUMultiQuerySetDetailsRequest::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUMultiQuerySetDetailsRequest::setFilter(const char * val){ m_Filter.set(val); }
void CWUMultiQuerySetDetailsRequest::setFilterType(CWUQuerySetFilterType val) { m_FilterType.setValue(val); }
void CWUMultiQuerySetDetailsRequest::setFilterType(const char* val) { m_FilterType.setValue(val); }
void CWUMultiQuerySetDetailsRequest::setCheckAllNodes(bool val){ m_CheckAllNodes=val; }
extern "C"  IEspWUMultiQuerySetDetailsRequest *createWUMultiQuerySetDetailsRequest(const char *serv){return ((IEspWUMultiQuerySetDetailsRequest *)new CWUMultiQuerySetDetailsRequest(serv));}
extern "C"  IClientWUMultiQuerySetDetailsRequest *createClientWUMultiQuerySetDetailsRequest(const char *serv){return ((IClientWUMultiQuerySetDetailsRequest *)new CWUMultiQuerySetDetailsRequest(serv));}

//=======================================================
// class CWUQuerySetDetail Implementation
//=======================================================

CWUQuerySetDetail::CWUQuerySetDetail(const char *serviceName, IRpcMessageBinding *init)
	: m_QuerySetName(nilIgnore),m_Queries(nilIgnore),m_Aliases(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetail");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetDetail::CWUQuerySetDetail(const char *serviceName, const char *bc)
	: m_QuerySetName(nilIgnore),m_Queries(nilIgnore),m_Aliases(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetDetail");
}

StringBuffer &CWUQuerySetDetail::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queries\" type=\"tns:ArrayOfQuerySetQuery\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Aliases\" type=\"tns:ArrayOfQuerySetAlias\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CQuerySetQuery::getXsdDefinition(context, request, schema, added);
		CQuerySetAlias::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("QuerySetAlias") && added.getValue("ArrayOfQuerySetAlias")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQuerySetAlias\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QuerySetAlias\" type=\"tns:QuerySetAlias\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQuerySetAlias",1);
	}
	if (added.getValue("QuerySetQuery") && added.getValue("ArrayOfQuerySetQuery")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfQuerySetQuery\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"QuerySetQuery\" type=\"tns:QuerySetQuery\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfQuerySetQuery",1);
	}
	return schema;
}

void CWUQuerySetDetail::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetDetail::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySetAlias"))
	{
		added.setValue("QuerySetAlias",1);
		CQuerySetAlias::getMapInfo(info,added);
	}
	if (!added.getValue("QuerySetQuery"))
	{
		added.setValue("QuerySetQuery",1);
		CQuerySetQuery::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetDetail::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queries");
	form.appendf("<tr><td><b>Queries: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Aliases");
	form.appendf("<tr><td><b>Aliases: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetDetail::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetDetail::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
	m_Queries.marshall(rpc_resp, "Queries", "QuerySetQuery");
	m_Aliases.marshall(rpc_resp, "Aliases", "QuerySetAlias");
}


void CWUQuerySetDetail::copy(CWUQuerySetDetail &from)
{
	m_QuerySetName.copy(from.m_QuerySetName);
	m_Queries.copy(from.m_Queries);
	m_Aliases.copy(from.m_Aliases);
}


void CWUQuerySetDetail::copy(IConstWUQuerySetDetail &ifrom)
{
	setQuerySetName(ifrom.getQuerySetName());
	setQueries(ifrom.getQueries());
	setAliases(ifrom.getAliases());
}


void CWUQuerySetDetail::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetDetail::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
	m_Queries.toStr(ctx, buffer, "Queries", "QuerySetQuery");
	m_Aliases.toStr(ctx, buffer, "Aliases", "QuerySetAlias");
}


void CWUQuerySetDetail::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetDetail::serializer(IEspContext* ctx, IConstWUQuerySetDetail &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetDetail>");
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field Queries
	{
		IArrayOf<IConstQuerySetQuery>& v = src.getQueries();
		int size = v.length();
		if (size>0)
			buffer.append("<Queries>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQuerySetQuery::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Queries>");
	}
	// field Aliases
	{
		IArrayOf<IConstQuerySetAlias>& v = src.getAliases();
		int size = v.length();
		if (size>0)
			buffer.append("<Aliases>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CQuerySetAlias::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Aliases>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetDetail>");
}

bool CWUQuerySetDetail::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
	hasValue |= m_Queries.unmarshall(rpc_request, "Queries", basepath);
	hasValue |= m_Aliases.unmarshall(rpc_request, "Aliases", basepath);
	return hasValue;
}

bool CWUQuerySetDetail::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_Queries.unmarshall(ctx, soapval, "Queries");
	hasValue |= m_Aliases.unmarshall(ctx, soapval, "Aliases");
	return hasValue;
}

bool CWUQuerySetDetail::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_Queries.unmarshall(ctx, params, attachments, "Queries", basepath);
	hasValue |= m_Aliases.unmarshall(ctx, params, attachments, "Aliases", basepath);
	return hasValue;
}

const char * CWUQuerySetDetail::getQuerySetName() { return m_QuerySetName.query();}
IArrayOf<IConstQuerySetQuery> & CWUQuerySetDetail::getQueries() { return (IArrayOf<IConstQuerySetQuery> &) m_Queries; }
IArrayOf<IConstQuerySetAlias> & CWUQuerySetDetail::getAliases() { return (IArrayOf<IConstQuerySetAlias> &) m_Aliases; }
void CWUQuerySetDetail::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUQuerySetDetail::setQueries(IArrayOf<IEspQuerySetQuery> &val)
{
	m_Queries->kill();
	IArrayOf<IConstQuerySetQuery> &target = m_Queries.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetQuery &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetDetail::setQueries(IArrayOf<IConstQuerySetQuery> &val)
{
	m_Queries->kill();
	IArrayOf<IConstQuerySetQuery> &target = m_Queries.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetQuery &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetDetail::setAliases(IArrayOf<IEspQuerySetAlias> &val)
{
	m_Aliases->kill();
	IArrayOf<IConstQuerySetAlias> &target = m_Aliases.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetAlias &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetDetail::setAliases(IArrayOf<IConstQuerySetAlias> &val)
{
	m_Aliases->kill();
	IArrayOf<IConstQuerySetAlias> &target = m_Aliases.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetAlias &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerySetDetail *createWUQuerySetDetail(const char *serv, const char *msgname){return ((IEspWUQuerySetDetail *)new CWUQuerySetDetail(serv /*, msgname*/));}
extern "C"  IClientWUQuerySetDetail *createClientWUQuerySetDetail(const char *serv, const char *msgname){return ((IClientWUQuerySetDetail *)new CWUQuerySetDetail(serv /*, msgname*/));}

//=======================================================
// class CWUMultiQuerySetDetailsResponse Implementation
//=======================================================

CWUMultiQuerySetDetailsResponse::CWUMultiQuerySetDetailsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ClusterName(nilIgnore),m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUMultiQuerySetDetailsResponse::CWUMultiQuerySetDetailsResponse(const char *serviceName, const char *bc)
	: m_ClusterName(nilIgnore),m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsResponse");
}

CWUMultiQuerySetDetailsResponse::CWUMultiQuerySetDetailsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ClusterName(nilIgnore),m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUMultiQuerySetDetailsResponse::CWUMultiQuerySetDetailsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ClusterName(nilIgnore),m_Querysets(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUMultiQuerySetDetailsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUMultiQuerySetDetailsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Querysets\" type=\"tns:ArrayOfWUQuerySetDetail\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUQuerySetDetail::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUQuerySetDetail") && added.getValue("ArrayOfWUQuerySetDetail")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUQuerySetDetail\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUQuerySetDetail\" type=\"tns:WUQuerySetDetail\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUQuerySetDetail",1);
	}
	return schema;
}

void CWUMultiQuerySetDetailsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUMultiQuerySetDetailsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUQuerySetDetail"))
	{
		added.setValue("WUQuerySetDetail",1);
		CWUQuerySetDetail::getMapInfo(info,added);
	}
}

StringBuffer &CWUMultiQuerySetDetailsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Querysets");
	form.appendf("<tr><td><b>Querysets: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUMultiQuerySetDetailsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUMultiQuerySetDetailsResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
		m_Querysets.marshall(rpc_resp, "Querysets", "WUQuerySetDetail");
	}
}


void CWUMultiQuerySetDetailsResponse::copy(CWUMultiQuerySetDetailsResponse &from)
{
	m_ClusterName.copy(from.m_ClusterName);
	m_Querysets.copy(from.m_Querysets);
}


void CWUMultiQuerySetDetailsResponse::copy(IConstWUMultiQuerySetDetailsResponse &ifrom)
{
	setClusterName(ifrom.getClusterName());
	setQuerysets(ifrom.getQuerysets());
}


void CWUMultiQuerySetDetailsResponse::getAttributes(IProperties &attributes)
{
}


void CWUMultiQuerySetDetailsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
		m_Querysets.toStr(ctx, buffer, "Querysets", "WUQuerySetDetail");
	}
}


void CWUMultiQuerySetDetailsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUMultiQuerySetDetailsResponse::serializer(IEspContext* ctx, IConstWUMultiQuerySetDetailsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUMultiQuerySetDetailsResponse>");
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field Querysets
	{
		IArrayOf<IConstWUQuerySetDetail>& v = src.getQuerysets();
		int size = v.length();
		if (size>0)
			buffer.append("<Querysets>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUQuerySetDetail::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Querysets>");
	}
	if (keepRootTag)
		buffer.append("</WUMultiQuerySetDetailsResponse>");
}

bool CWUMultiQuerySetDetailsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
		hasValue |= m_Querysets.unmarshall(rpc_request, "Querysets", basepath);
	}
	return hasValue;
}

bool CWUMultiQuerySetDetailsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_Querysets.unmarshall(ctx, soapval, "Querysets");
	return hasValue;
}

bool CWUMultiQuerySetDetailsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_Querysets.unmarshall(ctx, params, attachments, "Querysets", basepath);
	return hasValue;
}

const char * CWUMultiQuerySetDetailsResponse::getClusterName() { return m_ClusterName.query();}
IArrayOf<IConstWUQuerySetDetail> & CWUMultiQuerySetDetailsResponse::getQuerysets() { return (IArrayOf<IConstWUQuerySetDetail> &) m_Querysets; }
void CWUMultiQuerySetDetailsResponse::setClusterName(const char * val){ m_ClusterName.set(val); }
void CWUMultiQuerySetDetailsResponse::setQuerysets(IArrayOf<IEspWUQuerySetDetail> &val)
{
	m_Querysets->kill();
	IArrayOf<IConstWUQuerySetDetail> &target = m_Querysets.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUQuerySetDetail &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUMultiQuerySetDetailsResponse::setQuerysets(IArrayOf<IConstWUQuerySetDetail> &val)
{
	m_Querysets->kill();
	IArrayOf<IConstWUQuerySetDetail> &target = m_Querysets.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUQuerySetDetail &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUMultiQuerySetDetailsResponse *createWUMultiQuerySetDetailsResponse(const char *serv){return ((IEspWUMultiQuerySetDetailsResponse *)new CWUMultiQuerySetDetailsResponse(serv));}
extern "C"  IClientWUMultiQuerySetDetailsResponse *createClientWUMultiQuerySetDetailsResponse(const char *serv){return ((IClientWUMultiQuerySetDetailsResponse *)new CWUMultiQuerySetDetailsResponse(serv));}

//=======================================================
// class CWUQuerysetExportRequest Implementation
//=======================================================

CWUQuerysetExportRequest::CWUQuerysetExportRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilIgnore),m_Compress(1, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Protect(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerysetExportRequest::CWUQuerysetExportRequest(const char *serviceName, const char *bc)
	: m_Target(nilIgnore),m_Compress(1, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Protect(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportRequest");
}

CWUQuerysetExportRequest::CWUQuerysetExportRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilIgnore),m_Compress(1, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Protect(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerysetExportRequest::CWUQuerysetExportRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilIgnore),m_Compress(1, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Protect(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerysetExportRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"Compress\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ActiveOnly\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Protect\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQuerysetExportRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerysetExportRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQuerysetExportRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Compress");
	
	form.appendf("  <tr><td><b>Compress? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActiveOnly");
	
	form.appendf("  <tr><td><b>ActiveOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Protect");
	
	form.appendf("  <tr><td><b>Protect? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerysetExportRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerysetExportRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_Compress.marshall(rpc_resp, "Compress", "", "", "");
	m_ActiveOnly.marshall(rpc_resp, "ActiveOnly", "", "", "");
	m_Protect.marshall(rpc_resp, "Protect", "", "", "");
}


void CWUQuerysetExportRequest::copy(CWUQuerysetExportRequest &from)
{
	m_Target.copy(from.m_Target);
	m_Compress.copy(from.m_Compress);
	m_ActiveOnly.copy(from.m_ActiveOnly);
	m_Protect.copy(from.m_Protect);
}


void CWUQuerysetExportRequest::copy(IConstWUQuerysetExportRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setCompress(ifrom.getCompress());
	setActiveOnly(ifrom.getActiveOnly());
	setProtect(ifrom.getProtect());
}


void CWUQuerysetExportRequest::getAttributes(IProperties &attributes)
{
}


void CWUQuerysetExportRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_Compress.toStr(ctx, buffer, "Compress", "", true, "", "");
	m_ActiveOnly.toStr(ctx, buffer, "ActiveOnly", "", true, "", "");
	m_Protect.toStr(ctx, buffer, "Protect", "", true, "", "");
}


void CWUQuerysetExportRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerysetExportRequest::serializer(IEspContext* ctx, IConstWUQuerysetExportRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerysetExportRequest>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field Compress
	{
		bool b = src.getCompress();
		if (b)
			buffer.appendf("<Compress>1</Compress>");
	}
	// field ActiveOnly
	{
		bool b = src.getActiveOnly();
		if (b)
			buffer.appendf("<ActiveOnly>1</ActiveOnly>");
	}
	// field Protect
	{
		bool b = src.getProtect();
		if (b)
			buffer.appendf("<Protect>1</Protect>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerysetExportRequest>");
}

bool CWUQuerysetExportRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_Compress.unmarshall(rpc_request, "Compress", basepath);
	hasValue |= m_ActiveOnly.unmarshall(rpc_request, "ActiveOnly", basepath);
	hasValue |= m_Protect.unmarshall(rpc_request, "Protect", basepath);
	return hasValue;
}

bool CWUQuerysetExportRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_Compress.unmarshall(ctx, soapval, "Compress");
	hasValue |= m_ActiveOnly.unmarshall(ctx, soapval, "ActiveOnly");
	hasValue |= m_Protect.unmarshall(ctx, soapval, "Protect");
	return hasValue;
}

bool CWUQuerysetExportRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_Compress.unmarshall(ctx, params, attachments, "Compress", basepath);
	hasValue |= m_ActiveOnly.unmarshall(ctx, params, attachments, "ActiveOnly", basepath);
	hasValue |= m_Protect.unmarshall(ctx, params, attachments, "Protect", basepath);
	return hasValue;
}

const char * CWUQuerysetExportRequest::getTarget() { return m_Target.query();}
bool CWUQuerysetExportRequest::getCompress() { return m_Compress;}
bool CWUQuerysetExportRequest::getActiveOnly() { return m_ActiveOnly;}
bool CWUQuerysetExportRequest::getProtect() { return m_Protect;}
void CWUQuerysetExportRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUQuerysetExportRequest::setCompress(bool val){ m_Compress=val; }
void CWUQuerysetExportRequest::setActiveOnly(bool val){ m_ActiveOnly=val; }
void CWUQuerysetExportRequest::setProtect(bool val){ m_Protect=val; }
extern "C"  IEspWUQuerysetExportRequest *createWUQuerysetExportRequest(const char *serv){return ((IEspWUQuerysetExportRequest *)new CWUQuerysetExportRequest(serv));}
extern "C"  IClientWUQuerysetExportRequest *createClientWUQuerysetExportRequest(const char *serv){return ((IClientWUQuerysetExportRequest *)new CWUQuerysetExportRequest(serv));}

//=======================================================
// class CWUQuerysetExportResponse Implementation
//=======================================================

CWUQuerysetExportResponse::CWUQuerysetExportResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilIgnore),m_Compressed(nilIgnore),m_Data(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerysetExportResponse::CWUQuerysetExportResponse(const char *serviceName, const char *bc)
	: m_Target(nilIgnore),m_Compressed(nilIgnore),m_Data(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportResponse");
}

CWUQuerysetExportResponse::CWUQuerysetExportResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilIgnore),m_Compressed(nilIgnore),m_Data(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerysetExportResponse::CWUQuerysetExportResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilIgnore),m_Compressed(nilIgnore),m_Data(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetExportResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerysetExportResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Compressed\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Data\" type=\"xsd:base64Binary\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQuerysetExportResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerysetExportResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQuerysetExportResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Compressed");
	
	form.appendf("  <tr><td><b>Compressed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Data");
	form.appendf("  <tr><td><b>Data: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerysetExportResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerysetExportResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Target.marshall(rpc_resp, "Target", "", "", "");
		m_Compressed.marshall(rpc_resp, "Compressed", "", "", "");
		m_Data.marshall(rpc_resp, "Data", "", "", "");
	}
}


void CWUQuerysetExportResponse::copy(CWUQuerysetExportResponse &from)
{
	m_Target.copy(from.m_Target);
	m_Compressed.copy(from.m_Compressed);
	m_Data.copy(from.m_Data);
}


void CWUQuerysetExportResponse::copy(IConstWUQuerysetExportResponse &ifrom)
{
	setTarget(ifrom.getTarget());
	setCompressed(ifrom.getCompressed());
	setData(ifrom.getData());
}


void CWUQuerysetExportResponse::getAttributes(IProperties &attributes)
{
}


void CWUQuerysetExportResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
		m_Compressed.toStr(ctx, buffer, "Compressed", "", true, "", "");
		m_Data.toStr(ctx, buffer, "Data", "", true, "", "");
	}
}


void CWUQuerysetExportResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerysetExportResponse::serializer(IEspContext* ctx, IConstWUQuerysetExportResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerysetExportResponse>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field Compressed
	{
		bool b = src.getCompressed();
		if (b)
			buffer.appendf("<Compressed>1</Compressed>");
	}
	// field Data
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getData().toByteArray(), src.getData().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Data>%s</Data>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUQuerysetExportResponse>");
}

bool CWUQuerysetExportResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
		hasValue |= m_Compressed.unmarshall(rpc_request, "Compressed", basepath);
		hasValue |= m_Data.unmarshall(rpc_request, "Data", basepath);
	}
	return hasValue;
}

bool CWUQuerysetExportResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_Compressed.unmarshall(ctx, soapval, "Compressed");
	hasValue |= m_Data.unmarshall(ctx, soapval, "Data");
	return hasValue;
}

bool CWUQuerysetExportResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_Compressed.unmarshall(ctx, params, attachments, "Compressed", basepath);
	hasValue |= m_Data.unmarshall(ctx, params, attachments, "Data", basepath);
	return hasValue;
}

const char * CWUQuerysetExportResponse::getTarget() { return m_Target.query();}
bool CWUQuerysetExportResponse::getCompressed() { return m_Compressed;}
const MemoryBuffer & CWUQuerysetExportResponse::getData() { return m_Data.getValue();}
void CWUQuerysetExportResponse::setTarget(const char * val){ m_Target.set(val); }
void CWUQuerysetExportResponse::setCompressed(bool val){ m_Compressed=val; }
void CWUQuerysetExportResponse::setData(const MemoryBuffer & val){ m_Data->clear().append(val); }
extern "C"  IEspWUQuerysetExportResponse *createWUQuerysetExportResponse(const char *serv){return ((IEspWUQuerysetExportResponse *)new CWUQuerysetExportResponse(serv));}
extern "C"  IClientWUQuerysetExportResponse *createClientWUQuerysetExportResponse(const char *serv){return ((IClientWUQuerysetExportResponse *)new CWUQuerysetExportResponse(serv));}

//=======================================================
// class CWUQuerysetImportRequest Implementation
//=======================================================

CWUQuerysetImportRequest::CWUQuerysetImportRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilIgnore),m_QueryMask(nilIgnore),m_Replace(0, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Activation(nilIgnore),m_Compressed(1, nilIgnore,false),m_Data(nilIgnore),m_AllowForeignFiles(1, nilIgnore,false),m_DfsServer(nilIgnore),m_CopyFiles(1, nilIgnore,false),m_OverwriteDfs(0, nilIgnore,false),m_SourceProcess(nilIgnore),m_UpdateSuperFiles(0, nilIgnore,false),m_UpdateCloneFrom(0, nilIgnore,false),m_AppendCluster(1, nilIgnore,false),m_IncludeFileErrors(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerysetImportRequest::CWUQuerysetImportRequest(const char *serviceName, const char *bc)
	: m_Target(nilIgnore),m_QueryMask(nilIgnore),m_Replace(0, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Activation(nilIgnore),m_Compressed(1, nilIgnore,false),m_Data(nilIgnore),m_AllowForeignFiles(1, nilIgnore,false),m_DfsServer(nilIgnore),m_CopyFiles(1, nilIgnore,false),m_OverwriteDfs(0, nilIgnore,false),m_SourceProcess(nilIgnore),m_UpdateSuperFiles(0, nilIgnore,false),m_UpdateCloneFrom(0, nilIgnore,false),m_AppendCluster(1, nilIgnore,false),m_IncludeFileErrors(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportRequest");
}

CWUQuerysetImportRequest::CWUQuerysetImportRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilIgnore),m_QueryMask(nilIgnore),m_Replace(0, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Activation(nilIgnore),m_Compressed(1, nilIgnore,false),m_Data(nilIgnore),m_AllowForeignFiles(1, nilIgnore,false),m_DfsServer(nilIgnore),m_CopyFiles(1, nilIgnore,false),m_OverwriteDfs(0, nilIgnore,false),m_SourceProcess(nilIgnore),m_UpdateSuperFiles(0, nilIgnore,false),m_UpdateCloneFrom(0, nilIgnore,false),m_AppendCluster(1, nilIgnore,false),m_IncludeFileErrors(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerysetImportRequest::CWUQuerysetImportRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilIgnore),m_QueryMask(nilIgnore),m_Replace(0, nilIgnore,false),m_ActiveOnly(0, nilIgnore,false),m_Activation(nilIgnore),m_Compressed(1, nilIgnore,false),m_Data(nilIgnore),m_AllowForeignFiles(1, nilIgnore,false),m_DfsServer(nilIgnore),m_CopyFiles(1, nilIgnore,false),m_OverwriteDfs(0, nilIgnore,false),m_SourceProcess(nilIgnore),m_UpdateSuperFiles(0, nilIgnore,false),m_UpdateCloneFrom(0, nilIgnore,false),m_AppendCluster(1, nilIgnore,false),m_IncludeFileErrors(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerysetImportRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryMask\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Replace\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"ActiveOnly\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Activation\" type=\"tns:QuerysetImportActivation\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"Compressed\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Data\" type=\"xsd:base64Binary\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AllowForeignFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DfsServer\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"CopyFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"OverwriteDfs\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourceProcess\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateSuperFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateCloneFrom\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AppendCluster\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeFileErrors\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXQuerysetImportActivation::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerysetImportRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerysetImportRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerysetImportActivation"))
	{
		added.setValue("QuerysetImportActivation",1);
		CXQuerysetImportActivation::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerysetImportRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryMask");
	form.appendf("  <tr><td><b>QueryMask: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Replace");
	
	form.appendf("  <tr><td><b>Replace? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActiveOnly");
	
	form.appendf("  <tr><td><b>ActiveOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Activation");
	form.appendf("  <tr><td><b>Activation: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Compressed");
	
	form.appendf("  <tr><td><b>Compressed? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Data");
	form.appendf("  <tr><td><b>Data: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllowForeignFiles");
	
	form.appendf("  <tr><td><b>AllowForeignFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DfsServer");
	form.appendf("  <tr><td><b>DfsServer: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CopyFiles");
	
	form.appendf("  <tr><td><b>CopyFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OverwriteDfs");
	
	form.appendf("  <tr><td><b>OverwriteDfs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourceProcess");
	form.appendf("  <tr><td><b>SourceProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateSuperFiles");
	
	form.appendf("  <tr><td><b>UpdateSuperFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateCloneFrom");
	
	form.appendf("  <tr><td><b>UpdateCloneFrom? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AppendCluster");
	
	form.appendf("  <tr><td><b>AppendCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeFileErrors");
	
	form.appendf("  <tr><td><b>IncludeFileErrors? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerysetImportRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerysetImportRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_QueryMask.marshall(rpc_resp, "QueryMask", "", "", "");
	m_Replace.marshall(rpc_resp, "Replace", "", "", "");
	m_ActiveOnly.marshall(rpc_resp, "ActiveOnly", "", "", "");
	m_Activation.marshall(rpc_resp, "Activation", "", "", "");
	m_Compressed.marshall(rpc_resp, "Compressed", "", "", "");
	m_Data.marshall(rpc_resp, "Data", "", "", "");
	m_AllowForeignFiles.marshall(rpc_resp, "AllowForeignFiles", "", "", "");
	m_DfsServer.marshall(rpc_resp, "DfsServer", "", "", "");
	m_CopyFiles.marshall(rpc_resp, "CopyFiles", "", "", "");
	m_OverwriteDfs.marshall(rpc_resp, "OverwriteDfs", "", "", "");
	m_SourceProcess.marshall(rpc_resp, "SourceProcess", "", "", "");
	m_UpdateSuperFiles.marshall(rpc_resp, "UpdateSuperFiles", "", "", "");
	m_UpdateCloneFrom.marshall(rpc_resp, "UpdateCloneFrom", "", "", "");
	m_AppendCluster.marshall(rpc_resp, "AppendCluster", "", "", "");
	m_IncludeFileErrors.marshall(rpc_resp, "IncludeFileErrors", "", "", "");
}


void CWUQuerysetImportRequest::copy(CWUQuerysetImportRequest &from)
{
	m_Target.copy(from.m_Target);
	m_QueryMask.copy(from.m_QueryMask);
	m_Replace.copy(from.m_Replace);
	m_ActiveOnly.copy(from.m_ActiveOnly);
	m_Activation.copy(from.m_Activation);
	m_Compressed.copy(from.m_Compressed);
	m_Data.copy(from.m_Data);
	m_AllowForeignFiles.copy(from.m_AllowForeignFiles);
	m_DfsServer.copy(from.m_DfsServer);
	m_CopyFiles.copy(from.m_CopyFiles);
	m_OverwriteDfs.copy(from.m_OverwriteDfs);
	m_SourceProcess.copy(from.m_SourceProcess);
	m_UpdateSuperFiles.copy(from.m_UpdateSuperFiles);
	m_UpdateCloneFrom.copy(from.m_UpdateCloneFrom);
	m_AppendCluster.copy(from.m_AppendCluster);
	m_IncludeFileErrors.copy(from.m_IncludeFileErrors);
}


void CWUQuerysetImportRequest::copy(IConstWUQuerysetImportRequest &ifrom)
{
	setTarget(ifrom.getTarget());
	setQueryMask(ifrom.getQueryMask());
	setReplace(ifrom.getReplace());
	setActiveOnly(ifrom.getActiveOnly());
	setActivation(ifrom.getActivation());
	setCompressed(ifrom.getCompressed());
	setData(ifrom.getData());
	setAllowForeignFiles(ifrom.getAllowForeignFiles());
	setDfsServer(ifrom.getDfsServer());
	setCopyFiles(ifrom.getCopyFiles());
	setOverwriteDfs(ifrom.getOverwriteDfs());
	setSourceProcess(ifrom.getSourceProcess());
	setUpdateSuperFiles(ifrom.getUpdateSuperFiles());
	setUpdateCloneFrom(ifrom.getUpdateCloneFrom());
	setAppendCluster(ifrom.getAppendCluster());
	setIncludeFileErrors(ifrom.getIncludeFileErrors());
}


void CWUQuerysetImportRequest::getAttributes(IProperties &attributes)
{
}


void CWUQuerysetImportRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_QueryMask.toStr(ctx, buffer, "QueryMask", "", true, "", "");
	m_Replace.toStr(ctx, buffer, "Replace", "", true, "", "");
	m_ActiveOnly.toStr(ctx, buffer, "ActiveOnly", "", true, "", "");
	m_Activation.toStr(ctx, buffer, "Activation", "", true, "", "");
	m_Compressed.toStr(ctx, buffer, "Compressed", "", true, "", "");
	m_Data.toStr(ctx, buffer, "Data", "", true, "", "");
	m_AllowForeignFiles.toStr(ctx, buffer, "AllowForeignFiles", "", true, "", "");
	m_DfsServer.toStr(ctx, buffer, "DfsServer", "", true, "", "");
	m_CopyFiles.toStr(ctx, buffer, "CopyFiles", "", true, "", "");
	m_OverwriteDfs.toStr(ctx, buffer, "OverwriteDfs", "", true, "", "");
	m_SourceProcess.toStr(ctx, buffer, "SourceProcess", "", true, "", "");
	m_UpdateSuperFiles.toStr(ctx, buffer, "UpdateSuperFiles", "", true, "", "");
	m_UpdateCloneFrom.toStr(ctx, buffer, "UpdateCloneFrom", "", true, "", "");
	m_AppendCluster.toStr(ctx, buffer, "AppendCluster", "", true, "", "");
	m_IncludeFileErrors.toStr(ctx, buffer, "IncludeFileErrors", "", true, "", "");
}


void CWUQuerysetImportRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerysetImportRequest::serializer(IEspContext* ctx, IConstWUQuerysetImportRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerysetImportRequest>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field QueryMask
	{
		const char* s = src.getQueryMask();
		if (s && *s)
		{
			buffer.append("<QueryMask>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryMask>");
		}
	}
	// field Replace
	{
		bool b = src.getReplace();
		if (b)
			buffer.appendf("<Replace>1</Replace>");
	}
	// field ActiveOnly
	{
		bool b = src.getActiveOnly();
		if (b)
			buffer.appendf("<ActiveOnly>1</ActiveOnly>");
	}
	// field Activation
	{
		const char* s = src.getActivationAsString();
		buffer.append("<Activation>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Activation>");
	}
	// field Compressed
	{
		bool b = src.getCompressed();
		if (b)
			buffer.appendf("<Compressed>1</Compressed>");
	}
	// field Data
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getData().toByteArray(), src.getData().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Data>%s</Data>",tmp.str());
	}
	// field AllowForeignFiles
	{
		bool b = src.getAllowForeignFiles();
		if (b)
			buffer.appendf("<AllowForeignFiles>1</AllowForeignFiles>");
	}
	// field DfsServer
	{
		const char* s = src.getDfsServer();
		if (s && *s)
		{
			buffer.append("<DfsServer>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DfsServer>");
		}
	}
	// field CopyFiles
	{
		bool b = src.getCopyFiles();
		if (b)
			buffer.appendf("<CopyFiles>1</CopyFiles>");
	}
	// field OverwriteDfs
	{
		bool b = src.getOverwriteDfs();
		if (b)
			buffer.appendf("<OverwriteDfs>1</OverwriteDfs>");
	}
	// field SourceProcess
	{
		const char* s = src.getSourceProcess();
		if (s && *s)
		{
			buffer.append("<SourceProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourceProcess>");
		}
	}
	// field UpdateSuperFiles
	{
		bool b = src.getUpdateSuperFiles();
		if (b)
			buffer.appendf("<UpdateSuperFiles>1</UpdateSuperFiles>");
	}
	// field UpdateCloneFrom
	{
		bool b = src.getUpdateCloneFrom();
		if (b)
			buffer.appendf("<UpdateCloneFrom>1</UpdateCloneFrom>");
	}
	// field AppendCluster
	{
		bool b = src.getAppendCluster();
		if (b)
			buffer.appendf("<AppendCluster>1</AppendCluster>");
	}
	// field IncludeFileErrors
	{
		bool b = src.getIncludeFileErrors();
		if (b)
			buffer.appendf("<IncludeFileErrors>1</IncludeFileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerysetImportRequest>");
}

bool CWUQuerysetImportRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_QueryMask.unmarshall(rpc_request, "QueryMask", basepath);
	hasValue |= m_Replace.unmarshall(rpc_request, "Replace", basepath);
	hasValue |= m_ActiveOnly.unmarshall(rpc_request, "ActiveOnly", basepath);
	hasValue |= m_Activation.unmarshall(rpc_request, "Activation", basepath);
	hasValue |= m_Compressed.unmarshall(rpc_request, "Compressed", basepath);
	hasValue |= m_Data.unmarshall(rpc_request, "Data", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(rpc_request, "AllowForeignFiles", basepath);
	hasValue |= m_DfsServer.unmarshall(rpc_request, "DfsServer", basepath);
	hasValue |= m_CopyFiles.unmarshall(rpc_request, "CopyFiles", basepath);
	hasValue |= m_OverwriteDfs.unmarshall(rpc_request, "OverwriteDfs", basepath);
	hasValue |= m_SourceProcess.unmarshall(rpc_request, "SourceProcess", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(rpc_request, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(rpc_request, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(rpc_request, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(rpc_request, "IncludeFileErrors", basepath);
	return hasValue;
}

bool CWUQuerysetImportRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_QueryMask.unmarshall(ctx, soapval, "QueryMask");
	hasValue |= m_Replace.unmarshall(ctx, soapval, "Replace");
	hasValue |= m_ActiveOnly.unmarshall(ctx, soapval, "ActiveOnly");
	hasValue |= m_Activation.unmarshall(ctx, soapval, "Activation");
	hasValue |= m_Compressed.unmarshall(ctx, soapval, "Compressed");
	hasValue |= m_Data.unmarshall(ctx, soapval, "Data");
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, soapval, "AllowForeignFiles");
	hasValue |= m_DfsServer.unmarshall(ctx, soapval, "DfsServer");
	hasValue |= m_CopyFiles.unmarshall(ctx, soapval, "CopyFiles");
	hasValue |= m_OverwriteDfs.unmarshall(ctx, soapval, "OverwriteDfs");
	hasValue |= m_SourceProcess.unmarshall(ctx, soapval, "SourceProcess");
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, soapval, "UpdateSuperFiles");
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, soapval, "UpdateCloneFrom");
	hasValue |= m_AppendCluster.unmarshall(ctx, soapval, "AppendCluster");
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, soapval, "IncludeFileErrors");
	return hasValue;
}

bool CWUQuerysetImportRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_QueryMask.unmarshall(ctx, params, attachments, "QueryMask", basepath);
	hasValue |= m_Replace.unmarshall(ctx, params, attachments, "Replace", basepath);
	hasValue |= m_ActiveOnly.unmarshall(ctx, params, attachments, "ActiveOnly", basepath);
	hasValue |= m_Activation.unmarshall(ctx, params, attachments, "Activation", basepath);
	hasValue |= m_Compressed.unmarshall(ctx, params, attachments, "Compressed", basepath);
	hasValue |= m_Data.unmarshall(ctx, params, attachments, "Data", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, params, attachments, "AllowForeignFiles", basepath);
	hasValue |= m_DfsServer.unmarshall(ctx, params, attachments, "DfsServer", basepath);
	hasValue |= m_CopyFiles.unmarshall(ctx, params, attachments, "CopyFiles", basepath);
	hasValue |= m_OverwriteDfs.unmarshall(ctx, params, attachments, "OverwriteDfs", basepath);
	hasValue |= m_SourceProcess.unmarshall(ctx, params, attachments, "SourceProcess", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, params, attachments, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, params, attachments, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(ctx, params, attachments, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, params, attachments, "IncludeFileErrors", basepath);
	return hasValue;
}

const char * CWUQuerysetImportRequest::getTarget() { return m_Target.query();}
const char * CWUQuerysetImportRequest::getQueryMask() { return m_QueryMask.query();}
bool CWUQuerysetImportRequest::getReplace() { return m_Replace;}
bool CWUQuerysetImportRequest::getActiveOnly() { return m_ActiveOnly;}
CQuerysetImportActivation CWUQuerysetImportRequest::getActivation() { return m_Activation.getValue(); }
const char* CWUQuerysetImportRequest::getActivationAsString() {  return (const char*)m_Activation; }
bool CWUQuerysetImportRequest::getCompressed() { return m_Compressed;}
const MemoryBuffer & CWUQuerysetImportRequest::getData() { return m_Data.getValue();}
bool CWUQuerysetImportRequest::getAllowForeignFiles() { return m_AllowForeignFiles;}
const char * CWUQuerysetImportRequest::getDfsServer() { return m_DfsServer.query();}
bool CWUQuerysetImportRequest::getCopyFiles() { return m_CopyFiles;}
bool CWUQuerysetImportRequest::getOverwriteDfs() { return m_OverwriteDfs;}
const char * CWUQuerysetImportRequest::getSourceProcess() { return m_SourceProcess.query();}
bool CWUQuerysetImportRequest::getUpdateSuperFiles() { return m_UpdateSuperFiles;}
bool CWUQuerysetImportRequest::getUpdateCloneFrom() { return m_UpdateCloneFrom;}
bool CWUQuerysetImportRequest::getAppendCluster() { return m_AppendCluster;}
bool CWUQuerysetImportRequest::getIncludeFileErrors() { return m_IncludeFileErrors;}
void CWUQuerysetImportRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUQuerysetImportRequest::setQueryMask(const char * val){ m_QueryMask.set(val); }
void CWUQuerysetImportRequest::setReplace(bool val){ m_Replace=val; }
void CWUQuerysetImportRequest::setActiveOnly(bool val){ m_ActiveOnly=val; }
void CWUQuerysetImportRequest::setActivation(CQuerysetImportActivation val) { m_Activation.setValue(val); }
void CWUQuerysetImportRequest::setActivation(const char* val) { m_Activation.setValue(val); }
void CWUQuerysetImportRequest::setCompressed(bool val){ m_Compressed=val; }
void CWUQuerysetImportRequest::setData(const MemoryBuffer & val){ m_Data->clear().append(val); }
void CWUQuerysetImportRequest::setAllowForeignFiles(bool val){ m_AllowForeignFiles=val; }
void CWUQuerysetImportRequest::setDfsServer(const char * val){ m_DfsServer.set(val); }
void CWUQuerysetImportRequest::setCopyFiles(bool val){ m_CopyFiles=val; }
void CWUQuerysetImportRequest::setOverwriteDfs(bool val){ m_OverwriteDfs=val; }
void CWUQuerysetImportRequest::setSourceProcess(const char * val){ m_SourceProcess.set(val); }
void CWUQuerysetImportRequest::setUpdateSuperFiles(bool val){ m_UpdateSuperFiles=val; }
void CWUQuerysetImportRequest::setUpdateCloneFrom(bool val){ m_UpdateCloneFrom=val; }
void CWUQuerysetImportRequest::setAppendCluster(bool val){ m_AppendCluster=val; }
void CWUQuerysetImportRequest::setIncludeFileErrors(bool val){ m_IncludeFileErrors=val; }
extern "C"  IEspWUQuerysetImportRequest *createWUQuerysetImportRequest(const char *serv){return ((IEspWUQuerysetImportRequest *)new CWUQuerysetImportRequest(serv));}
extern "C"  IClientWUQuerysetImportRequest *createClientWUQuerysetImportRequest(const char *serv){return ((IClientWUQuerysetImportRequest *)new CWUQuerysetImportRequest(serv));}

//=======================================================
// class CWUQuerysetImportResponse Implementation
//=======================================================

CWUQuerysetImportResponse::CWUQuerysetImportResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Target(nilIgnore),m_ClearedExisting(1, nilIgnore,false),m_Success(0, nilIgnore,false),m_ImportedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_MissingWuids(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerysetImportResponse::CWUQuerysetImportResponse(const char *serviceName, const char *bc)
	: m_Target(nilIgnore),m_ClearedExisting(1, nilIgnore,false),m_Success(0, nilIgnore,false),m_ImportedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_MissingWuids(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportResponse");
}

CWUQuerysetImportResponse::CWUQuerysetImportResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Target(nilIgnore),m_ClearedExisting(1, nilIgnore,false),m_Success(0, nilIgnore,false),m_ImportedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_MissingWuids(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerysetImportResponse::CWUQuerysetImportResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Target(nilIgnore),m_ClearedExisting(1, nilIgnore,false),m_Success(0, nilIgnore,false),m_ImportedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_MissingWuids(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerysetImportResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerysetImportResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"ClearedExisting\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Success\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ImportedQueries\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"QueryId\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ExistingQueries\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"QueryId\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MissingWuids\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"QueryId\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileErrors\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:LogicalFileError\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CLogicalFileError::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerysetImportResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerysetImportResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("LogicalFileError"))
	{
		added.setValue("LogicalFileError",1);
		CLogicalFileError::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerysetImportResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClearedExisting");
	
	form.appendf("  <tr><td><b>ClearedExisting? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Success");
	
	form.appendf("  <tr><td><b>Success? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ImportedQueries");
	form.appendf("<tr><td><b>ImportedQueries: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExistingQueries");
	form.appendf("<tr><td><b>ExistingQueries: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MissingWuids");
	form.appendf("<tr><td><b>MissingWuids: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileErrors");
	form.appendf("<tr><td><b>FileErrors: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerysetImportResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerysetImportResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Target.marshall(rpc_resp, "Target", "", "", "");
		m_ClearedExisting.marshall(rpc_resp, "ClearedExisting", "", "", "");
		m_Success.marshall(rpc_resp, "Success", "", "", "");
		m_ImportedQueries.marshall(rpc_resp, "ImportedQueries", "QueryId");
		m_ExistingQueries.marshall(rpc_resp, "ExistingQueries", "QueryId");
		m_MissingWuids.marshall(rpc_resp, "MissingWuids", "QueryId");
		m_FileErrors.marshall(rpc_resp, "FileErrors", "File");
	}
}


void CWUQuerysetImportResponse::copy(CWUQuerysetImportResponse &from)
{
	m_Target.copy(from.m_Target);
	m_ClearedExisting.copy(from.m_ClearedExisting);
	m_Success.copy(from.m_Success);
	m_ImportedQueries.copy(from.m_ImportedQueries);
	m_ExistingQueries.copy(from.m_ExistingQueries);
	m_MissingWuids.copy(from.m_MissingWuids);
	m_FileErrors.copy(from.m_FileErrors);
}


void CWUQuerysetImportResponse::copy(IConstWUQuerysetImportResponse &ifrom)
{
	setTarget(ifrom.getTarget());
	setClearedExisting(ifrom.getClearedExisting());
	setSuccess(ifrom.getSuccess());
	setImportedQueries(ifrom.getImportedQueries());
	setExistingQueries(ifrom.getExistingQueries());
	setMissingWuids(ifrom.getMissingWuids());
	setFileErrors(ifrom.getFileErrors());
}


void CWUQuerysetImportResponse::getAttributes(IProperties &attributes)
{
}


void CWUQuerysetImportResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
		m_ClearedExisting.toStr(ctx, buffer, "ClearedExisting", "", true, "", "");
		m_Success.toStr(ctx, buffer, "Success", "", true, "", "");
		m_ImportedQueries.toStr(ctx, buffer, "ImportedQueries", "QueryId");
		m_ExistingQueries.toStr(ctx, buffer, "ExistingQueries", "QueryId");
		m_MissingWuids.toStr(ctx, buffer, "MissingWuids", "QueryId");
		m_FileErrors.toStr(ctx, buffer, "FileErrors", "File");
	}
}


void CWUQuerysetImportResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerysetImportResponse::serializer(IEspContext* ctx, IConstWUQuerysetImportResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerysetImportResponse>");
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field ClearedExisting
	{
		bool b = src.getClearedExisting();
		if (b)
			buffer.appendf("<ClearedExisting>1</ClearedExisting>");
	}
	// field Success
	{
		bool b = src.getSuccess();
		if (b)
			buffer.appendf("<Success>1</Success>");
	}
	// field ImportedQueries
	{
		StringArray& v = src.getImportedQueries();
		if (v.length()>0)
			buffer.append("<ImportedQueries>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<QueryId>%s</QueryId>",v.item(i));
		if (v.length()>0)
			buffer.append("</ImportedQueries>");
	}
	// field ExistingQueries
	{
		StringArray& v = src.getExistingQueries();
		if (v.length()>0)
			buffer.append("<ExistingQueries>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<QueryId>%s</QueryId>",v.item(i));
		if (v.length()>0)
			buffer.append("</ExistingQueries>");
	}
	// field MissingWuids
	{
		StringArray& v = src.getMissingWuids();
		if (v.length()>0)
			buffer.append("<MissingWuids>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<QueryId>%s</QueryId>",v.item(i));
		if (v.length()>0)
			buffer.append("</MissingWuids>");
	}
	// field FileErrors
	{
		IArrayOf<IConstLogicalFileError>& v = src.getFileErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<FileErrors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CLogicalFileError::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</FileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerysetImportResponse>");
}

bool CWUQuerysetImportResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
		hasValue |= m_ClearedExisting.unmarshall(rpc_request, "ClearedExisting", basepath);
		hasValue |= m_Success.unmarshall(rpc_request, "Success", basepath);
		hasValue |= m_ImportedQueries.unmarshall(rpc_request, "ImportedQueries", basepath);
		hasValue |= m_ExistingQueries.unmarshall(rpc_request, "ExistingQueries", basepath);
		hasValue |= m_MissingWuids.unmarshall(rpc_request, "MissingWuids", basepath);
		hasValue |= m_FileErrors.unmarshall(rpc_request, "FileErrors", basepath);
	}
	return hasValue;
}

bool CWUQuerysetImportResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_ClearedExisting.unmarshall(ctx, soapval, "ClearedExisting");
	hasValue |= m_Success.unmarshall(ctx, soapval, "Success");
	hasValue |= m_ImportedQueries.unmarshall(ctx, soapval, "ImportedQueries");
	hasValue |= m_ExistingQueries.unmarshall(ctx, soapval, "ExistingQueries");
	hasValue |= m_MissingWuids.unmarshall(ctx, soapval, "MissingWuids");
	hasValue |= m_FileErrors.unmarshall(ctx, soapval, "FileErrors");
	return hasValue;
}

bool CWUQuerysetImportResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_ClearedExisting.unmarshall(ctx, params, attachments, "ClearedExisting", basepath);
	hasValue |= m_Success.unmarshall(ctx, params, attachments, "Success", basepath);
	hasValue |= m_ImportedQueries.unmarshall(ctx, params, attachments, "ImportedQueries", basepath);
	hasValue |= m_ExistingQueries.unmarshall(ctx, params, attachments, "ExistingQueries", basepath);
	hasValue |= m_MissingWuids.unmarshall(ctx, params, attachments, "MissingWuids", basepath);
	hasValue |= m_FileErrors.unmarshall(ctx, params, attachments, "FileErrors", basepath);
	return hasValue;
}

const char * CWUQuerysetImportResponse::getTarget() { return m_Target.query();}
bool CWUQuerysetImportResponse::getClearedExisting() { return m_ClearedExisting;}
bool CWUQuerysetImportResponse::getSuccess() { return m_Success;}
StringArray & CWUQuerysetImportResponse::getImportedQueries() { return (StringArray &) m_ImportedQueries; }
StringArray & CWUQuerysetImportResponse::getExistingQueries() { return (StringArray &) m_ExistingQueries; }
StringArray & CWUQuerysetImportResponse::getMissingWuids() { return (StringArray &) m_MissingWuids; }
IArrayOf<IConstLogicalFileError> & CWUQuerysetImportResponse::getFileErrors() { return (IArrayOf<IConstLogicalFileError> &) m_FileErrors; }
void CWUQuerysetImportResponse::setTarget(const char * val){ m_Target.set(val); }
void CWUQuerysetImportResponse::setClearedExisting(bool val){ m_ClearedExisting=val; }
void CWUQuerysetImportResponse::setSuccess(bool val){ m_Success=val; }
void CWUQuerysetImportResponse::setImportedQueries(StringArray &val){ m_ImportedQueries->kill();  CloneArray(m_ImportedQueries.getValue(), val); }
void CWUQuerysetImportResponse::setExistingQueries(StringArray &val){ m_ExistingQueries->kill();  CloneArray(m_ExistingQueries.getValue(), val); }
void CWUQuerysetImportResponse::setMissingWuids(StringArray &val){ m_MissingWuids->kill();  CloneArray(m_MissingWuids.getValue(), val); }
void CWUQuerysetImportResponse::setFileErrors(IArrayOf<IEspLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspLogicalFileError &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerysetImportResponse::setFileErrors(IArrayOf<IConstLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstLogicalFileError &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerysetImportResponse *createWUQuerysetImportResponse(const char *serv){return ((IEspWUQuerysetImportResponse *)new CWUQuerysetImportResponse(serv));}
extern "C"  IClientWUQuerysetImportResponse *createClientWUQuerysetImportResponse(const char *serv){return ((IClientWUQuerysetImportResponse *)new CWUQuerysetImportResponse(serv));}

//=======================================================
// class CWUUpdateQueryEntryRequest Implementation
//=======================================================

CWUUpdateQueryEntryRequest::CWUUpdateQueryEntryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_QuerySet(nilRemove),m_QueryId(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUUpdateQueryEntryRequest::CWUUpdateQueryEntryRequest(const char *serviceName, const char *bc)
	: m_QuerySet(nilRemove),m_QueryId(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryRequest");
}

CWUUpdateQueryEntryRequest::CWUUpdateQueryEntryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QuerySet(nilRemove),m_QueryId(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUUpdateQueryEntryRequest::CWUUpdateQueryEntryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QuerySet(nilRemove),m_QueryId(nilRemove),m_Comment(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUUpdateQueryEntryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySet\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUUpdateQueryEntryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUUpdateQueryEntryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUUpdateQueryEntryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySet");
	form.appendf("  <tr><td><b>QuerySet: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUUpdateQueryEntryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUUpdateQueryEntryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QuerySet.marshall(rpc_resp, "QuerySet", "", "", "");
	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	m_Comment.marshall(rpc_resp, "Comment", "", "", "");
}


void CWUUpdateQueryEntryRequest::copy(CWUUpdateQueryEntryRequest &from)
{
	m_QuerySet.copy(from.m_QuerySet);
	m_QueryId.copy(from.m_QueryId);
	m_Comment.copy(from.m_Comment);
}


void CWUUpdateQueryEntryRequest::copy(IConstWUUpdateQueryEntryRequest &ifrom)
{
	setQuerySet(ifrom.getQuerySet());
	setQueryId(ifrom.getQueryId());
	setComment(ifrom.getComment());
}


void CWUUpdateQueryEntryRequest::getAttributes(IProperties &attributes)
{
}


void CWUUpdateQueryEntryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_QuerySet.toStr(ctx, buffer, "QuerySet", "", true, "", "");
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
}


void CWUUpdateQueryEntryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUUpdateQueryEntryRequest::serializer(IEspContext* ctx, IConstWUUpdateQueryEntryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUUpdateQueryEntryRequest>");
	// field QuerySet
	{
		const char* s = src.getQuerySet();
		if (s && *s)
		{
			buffer.append("<QuerySet>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySet>");
		}
	}
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUUpdateQueryEntryRequest>");
}

bool CWUUpdateQueryEntryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QuerySet.unmarshall(rpc_request, "QuerySet", basepath);
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
	return hasValue;
}

bool CWUUpdateQueryEntryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QuerySet.unmarshall(ctx, soapval, "QuerySet");
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	return hasValue;
}

bool CWUUpdateQueryEntryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QuerySet.unmarshall(ctx, params, attachments, "QuerySet", basepath);
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	return hasValue;
}

const char * CWUUpdateQueryEntryRequest::getQuerySet() { return m_QuerySet.query();}
const char * CWUUpdateQueryEntryRequest::getQueryId() { return m_QueryId.query();}
const char * CWUUpdateQueryEntryRequest::getComment() { return m_Comment.query();}
void CWUUpdateQueryEntryRequest::setQuerySet(const char * val){ m_QuerySet.set(val); }
void CWUUpdateQueryEntryRequest::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUUpdateQueryEntryRequest::setComment(const char * val){ m_Comment.set(val); }
extern "C"  IEspWUUpdateQueryEntryRequest *createWUUpdateQueryEntryRequest(const char *serv){return ((IEspWUUpdateQueryEntryRequest *)new CWUUpdateQueryEntryRequest(serv));}
extern "C"  IClientWUUpdateQueryEntryRequest *createClientWUUpdateQueryEntryRequest(const char *serv){return ((IClientWUUpdateQueryEntryRequest *)new CWUUpdateQueryEntryRequest(serv));}

//=======================================================
// class CWUUpdateQueryEntryResponse Implementation
//=======================================================

CWUUpdateQueryEntryResponse::CWUUpdateQueryEntryResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUUpdateQueryEntryResponse::CWUUpdateQueryEntryResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryResponse");
}

CWUUpdateQueryEntryResponse::CWUUpdateQueryEntryResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUUpdateQueryEntryResponse::CWUUpdateQueryEntryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUUpdateQueryEntryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUUpdateQueryEntryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUUpdateQueryEntryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUUpdateQueryEntryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUUpdateQueryEntryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUUpdateQueryEntryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUUpdateQueryEntryResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWUUpdateQueryEntryResponse::copy(CWUUpdateQueryEntryResponse &from)
{
}


void CWUUpdateQueryEntryResponse::copy(IConstWUUpdateQueryEntryResponse &ifrom)
{
}


void CWUUpdateQueryEntryResponse::getAttributes(IProperties &attributes)
{
}


void CWUUpdateQueryEntryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWUUpdateQueryEntryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUUpdateQueryEntryResponse::serializer(IEspContext* ctx, IConstWUUpdateQueryEntryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUUpdateQueryEntryResponse>");
	if (keepRootTag)
		buffer.append("</WUUpdateQueryEntryResponse>");
}

bool CWUUpdateQueryEntryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWUUpdateQueryEntryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWUUpdateQueryEntryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWUUpdateQueryEntryResponse *createWUUpdateQueryEntryResponse(const char *serv){return ((IEspWUUpdateQueryEntryResponse *)new CWUUpdateQueryEntryResponse(serv));}
extern "C"  IClientWUUpdateQueryEntryResponse *createClientWUUpdateQueryEntryResponse(const char *serv){return ((IClientWUUpdateQueryEntryResponse *)new CWUUpdateQueryEntryResponse(serv));}

//=======================================================
// class CQuerySetQueryClientState Implementation
//=======================================================

CQuerySetQueryClientState::CQuerySetQueryClientState(const char *serviceName, IRpcMessageBinding *init)
	: m_Suspended(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQueryClientState");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySetQueryClientState::CQuerySetQueryClientState(const char *serviceName, const char *bc)
	: m_Suspended(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQueryClientState");
}

StringBuffer &CQuerySetQueryClientState::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Suspended\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySetQueryClientState::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySetQueryClientState::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQuerySetQueryClientState::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Suspended");
	form.appendf("  <tr><td><b>Suspended: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySetQueryClientState::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySetQueryClientState::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Suspended.marshall(rpc_resp, "Suspended", "", "", "");
}


void CQuerySetQueryClientState::copy(CQuerySetQueryClientState &from)
{
	m_Suspended.copy(from.m_Suspended);
}


void CQuerySetQueryClientState::copy(IConstQuerySetQueryClientState &ifrom)
{
	setSuspended(ifrom.getSuspended());
}


void CQuerySetQueryClientState::getAttributes(IProperties &attributes)
{
}


void CQuerySetQueryClientState::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Suspended.toStr(ctx, buffer, "Suspended", "", true, "", "");
}


void CQuerySetQueryClientState::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySetQueryClientState::serializer(IEspContext* ctx, IConstQuerySetQueryClientState &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySetQueryClientState>");
	// field Suspended
	{
		const char* s = src.getSuspended();
		if (s && *s)
		{
			buffer.append("<Suspended>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Suspended>");
		}
	}
	if (keepRootTag)
		buffer.append("</QuerySetQueryClientState>");
}

bool CQuerySetQueryClientState::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Suspended.unmarshall(rpc_request, "Suspended", basepath);
	return hasValue;
}

bool CQuerySetQueryClientState::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Suspended.unmarshall(ctx, soapval, "Suspended");
	return hasValue;
}

bool CQuerySetQueryClientState::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Suspended.unmarshall(ctx, params, attachments, "Suspended", basepath);
	return hasValue;
}

const char * CQuerySetQueryClientState::getSuspended() { return m_Suspended.query();}
void CQuerySetQueryClientState::setSuspended(const char * val){ m_Suspended.set(val); }
extern "C"  IEspQuerySetQueryClientState *createQuerySetQueryClientState(const char *serv, const char *msgname){return ((IEspQuerySetQueryClientState *)new CQuerySetQueryClientState(serv /*, msgname*/));}
extern "C"  IClientQuerySetQueryClientState *createClientQuerySetQueryClientState(const char *serv, const char *msgname){return ((IClientQuerySetQueryClientState *)new CQuerySetQueryClientState(serv /*, msgname*/));}

//=======================================================
// class CQuerySetQueryActionItem Implementation
//=======================================================

CQuerySetQueryActionItem::CQuerySetQueryActionItem(const char *serviceName, IRpcMessageBinding *init)
	: m_QueryId(nilIgnore),m_ClientState(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQueryActionItem");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySetQueryActionItem::CQuerySetQueryActionItem(const char *serviceName, const char *bc)
	: m_QueryId(nilIgnore),m_ClientState(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQueryActionItem");
}

StringBuffer &CQuerySetQueryActionItem::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClientState\" type=\"tns:QuerySetQueryClientState\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CQuerySetQueryClientState::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CQuerySetQueryActionItem::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySetQueryActionItem::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySetQueryClientState"))
	{
		added.setValue("QuerySetQueryClientState",1);
		CQuerySetQueryClientState::getMapInfo(info,added);
	}
}

StringBuffer &CQuerySetQueryActionItem::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClientState");
	form.append("<tr>").append("<td><b>ClientState: </b></td><td><hr/>");
	CQuerySetQueryClientState::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySetQueryActionItem::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySetQueryActionItem::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	m_ClientState.marshall(rpc_resp, "ClientState", "", "", "");
}


void CQuerySetQueryActionItem::copy(CQuerySetQueryActionItem &from)
{
	m_QueryId.copy(from.m_QueryId);
	m_ClientState.copy(from.m_ClientState);
}


void CQuerySetQueryActionItem::copy(IConstQuerySetQueryActionItem &ifrom)
{
	setQueryId(ifrom.getQueryId());
	setClientState(ifrom.getClientState());
}


void CQuerySetQueryActionItem::getAttributes(IProperties &attributes)
{
}


void CQuerySetQueryActionItem::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	m_ClientState.toStr(ctx, buffer, "ClientState", "", false, "", "");
}


void CQuerySetQueryActionItem::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySetQueryActionItem::serializer(IEspContext* ctx, IConstQuerySetQueryActionItem &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySetQueryActionItem>");
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field ClientState
	{
		StringBuffer tmp;
		CQuerySetQueryClientState::serializer(ctx,src.getClientState(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ClientState>%s</ClientState>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</QuerySetQueryActionItem>");
}

bool CQuerySetQueryActionItem::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_ClientState.unmarshall(rpc_request, "ClientState", basepath);
	return hasValue;
}

bool CQuerySetQueryActionItem::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_ClientState.unmarshall(ctx, soapval, "ClientState");
	return hasValue;
}

bool CQuerySetQueryActionItem::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_ClientState.unmarshall(ctx, params, attachments, "ClientState", basepath);
	return hasValue;
}

const char * CQuerySetQueryActionItem::getQueryId() { return m_QueryId.query();}
IConstQuerySetQueryClientState & CQuerySetQueryActionItem::getClientState() { return (IConstQuerySetQueryClientState &) m_ClientState.getValue();}
void CQuerySetQueryActionItem::setQueryId(const char * val){ m_QueryId.set(val); }
IEspQuerySetQueryClientState & CQuerySetQueryActionItem::updateClientState(){ return (IEspQuerySetQueryClientState &) m_ClientState.getValue(); }
void CQuerySetQueryActionItem::setClientState(IConstQuerySetQueryClientState &ifrom){ m_ClientState.copy(ifrom); }
extern "C"  IEspQuerySetQueryActionItem *createQuerySetQueryActionItem(const char *serv, const char *msgname){return ((IEspQuerySetQueryActionItem *)new CQuerySetQueryActionItem(serv /*, msgname*/));}
extern "C"  IClientQuerySetQueryActionItem *createClientQuerySetQueryActionItem(const char *serv, const char *msgname){return ((IClientQuerySetQueryActionItem *)new CQuerySetQueryActionItem(serv /*, msgname*/));}

//=======================================================
// class CWUQuerySetQueryActionRequest Implementation
//=======================================================

CWUQuerySetQueryActionRequest::CWUQuerySetQueryActionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Queries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetQueryActionRequest::CWUQuerySetQueryActionRequest(const char *serviceName, const char *bc)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Queries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionRequest");
}

CWUQuerySetQueryActionRequest::CWUQuerySetQueryActionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Queries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetQueryActionRequest::CWUQuerySetQueryActionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Queries(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetQueryActionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"tns:QuerySetQueryActionTypes\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Queries\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Query\" type=\"tns:QuerySetQueryActionItem\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXQuerySetQueryActionTypes::getXsdDefinition(context, request, schema, added);
		CQuerySetQueryActionItem::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerySetQueryActionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetQueryActionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySetQueryActionItem"))
	{
		added.setValue("QuerySetQueryActionItem",1);
		CQuerySetQueryActionItem::getMapInfo(info,added);
	}
	if (!added.getValue("QuerySetQueryActionTypes"))
	{
		added.setValue("QuerySetQueryActionTypes",1);
		CXQuerySetQueryActionTypes::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetQueryActionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Queries");
	form.appendf("<tr><td><b>Queries: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetQueryActionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetQueryActionRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Action.marshall(rpc_resp, "Action", "", "", "");
	m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
	m_Queries.marshall(rpc_resp, "Queries", "Query");
}


void CWUQuerySetQueryActionRequest::copy(CWUQuerySetQueryActionRequest &from)
{
	m_Action.copy(from.m_Action);
	m_QuerySetName.copy(from.m_QuerySetName);
	m_Queries.copy(from.m_Queries);
}


void CWUQuerySetQueryActionRequest::copy(IConstWUQuerySetQueryActionRequest &ifrom)
{
	setAction(ifrom.getAction());
	setQuerySetName(ifrom.getQuerySetName());
	setQueries(ifrom.getQueries());
}


void CWUQuerySetQueryActionRequest::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetQueryActionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
	m_Queries.toStr(ctx, buffer, "Queries", "Query");
}


void CWUQuerySetQueryActionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetQueryActionRequest::serializer(IEspContext* ctx, IConstWUQuerySetQueryActionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetQueryActionRequest>");
	// field Action
	{
		const char* s = src.getActionAsString();
		buffer.append("<Action>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Action>");
	}
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field Queries
	{
		IArrayOf<IConstQuerySetQueryActionItem>& v = src.getQueries();
		int size = v.length();
		if (size>0)
			buffer.append("<Queries>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Query>");
			CQuerySetQueryActionItem::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Query>");
		}
		if (size>0)
			buffer.append("</Queries>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetQueryActionRequest>");
}

bool CWUQuerySetQueryActionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
	hasValue |= m_Queries.unmarshall(rpc_request, "Queries", basepath);
	return hasValue;
}

bool CWUQuerySetQueryActionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_Queries.unmarshall(ctx, soapval, "Queries");
	return hasValue;
}

bool CWUQuerySetQueryActionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_Queries.unmarshall(ctx, params, attachments, "Queries", basepath);
	return hasValue;
}

CQuerySetQueryActionTypes CWUQuerySetQueryActionRequest::getAction() { return m_Action.getValue(); }
const char* CWUQuerySetQueryActionRequest::getActionAsString() {  return (const char*)m_Action; }
const char * CWUQuerySetQueryActionRequest::getQuerySetName() { return m_QuerySetName.query();}
IArrayOf<IConstQuerySetQueryActionItem> & CWUQuerySetQueryActionRequest::getQueries() { return (IArrayOf<IConstQuerySetQueryActionItem> &) m_Queries; }
void CWUQuerySetQueryActionRequest::setAction(CQuerySetQueryActionTypes val) { m_Action.setValue(val); }
void CWUQuerySetQueryActionRequest::setAction(const char* val) { m_Action.setValue(val); }
void CWUQuerySetQueryActionRequest::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUQuerySetQueryActionRequest::setQueries(IArrayOf<IEspQuerySetQueryActionItem> &val)
{
	m_Queries->kill();
	IArrayOf<IConstQuerySetQueryActionItem> &target = m_Queries.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetQueryActionItem &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetQueryActionRequest::setQueries(IArrayOf<IConstQuerySetQueryActionItem> &val)
{
	m_Queries->kill();
	IArrayOf<IConstQuerySetQueryActionItem> &target = m_Queries.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetQueryActionItem &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerySetQueryActionRequest *createWUQuerySetQueryActionRequest(const char *serv){return ((IEspWUQuerySetQueryActionRequest *)new CWUQuerySetQueryActionRequest(serv));}
extern "C"  IClientWUQuerySetQueryActionRequest *createClientWUQuerySetQueryActionRequest(const char *serv){return ((IClientWUQuerySetQueryActionRequest *)new CWUQuerySetQueryActionRequest(serv));}

//=======================================================
// class CQuerySetQueryActionResult Implementation
//=======================================================

CQuerySetQueryActionResult::CQuerySetQueryActionResult(const char *serviceName, IRpcMessageBinding *init)
	: m_QueryId(nilIgnore),m_Suspended(nilIgnore),m_Success(nilIgnore),m_Code(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQueryActionResult");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySetQueryActionResult::CQuerySetQueryActionResult(const char *serviceName, const char *bc)
	: m_QueryId(nilIgnore),m_Suspended(nilIgnore),m_Success(nilIgnore),m_Code(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetQueryActionResult");
}

StringBuffer &CQuerySetQueryActionResult::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Suspended\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Success\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Code\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Message\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySetQueryActionResult::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySetQueryActionResult::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQuerySetQueryActionResult::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Suspended");
	
	form.appendf("  <tr><td><b>Suspended? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Success");
	
	form.appendf("  <tr><td><b>Success? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Code");
	form.appendf("  <tr><td><b>Code: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Message");
	form.appendf("  <tr><td><b>Message: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySetQueryActionResult::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySetQueryActionResult::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
	m_Suspended.marshall(rpc_resp, "Suspended", "", "", "");
	m_Success.marshall(rpc_resp, "Success", "", "", "");
	m_Code.marshall(rpc_resp, "Code", "", "", "");
	m_Message.marshall(rpc_resp, "Message", "", "", "");
}


void CQuerySetQueryActionResult::copy(CQuerySetQueryActionResult &from)
{
	m_QueryId.copy(from.m_QueryId);
	m_Suspended.copy(from.m_Suspended);
	m_Success.copy(from.m_Success);
	m_Code.copy(from.m_Code);
	m_Message.copy(from.m_Message);
}


void CQuerySetQueryActionResult::copy(IConstQuerySetQueryActionResult &ifrom)
{
	setQueryId(ifrom.getQueryId());
	setSuspended(ifrom.getSuspended());
	setSuccess(ifrom.getSuccess());
	setCode(ifrom.getCode());
	setMessage(ifrom.getMessage());
}


void CQuerySetQueryActionResult::getAttributes(IProperties &attributes)
{
}


void CQuerySetQueryActionResult::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
	m_Suspended.toStr(ctx, buffer, "Suspended", "", true, "", "");
	m_Success.toStr(ctx, buffer, "Success", "", true, "", "");
	m_Code.toStr(ctx, buffer, "Code", "", true, "", "");
	m_Message.toStr(ctx, buffer, "Message", "", true, "", "");
}


void CQuerySetQueryActionResult::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySetQueryActionResult::serializer(IEspContext* ctx, IConstQuerySetQueryActionResult &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySetQueryActionResult>");
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field Suspended
	{
		bool b = src.getSuspended();
		if (b)
			buffer.appendf("<Suspended>1</Suspended>");
	}
	// field Success
	{
		bool b = src.getSuccess();
		if (b)
			buffer.appendf("<Success>1</Success>");
	}
	// field Code
	{
		int n = src.getCode();
		if (n)
			buffer.appendf("<Code>%d</Code>", n);
	}
	// field Message
	{
		const char* s = src.getMessage();
		if (s && *s)
		{
			buffer.append("<Message>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Message>");
		}
	}
	if (keepRootTag)
		buffer.append("</QuerySetQueryActionResult>");
}

bool CQuerySetQueryActionResult::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
	hasValue |= m_Suspended.unmarshall(rpc_request, "Suspended", basepath);
	hasValue |= m_Success.unmarshall(rpc_request, "Success", basepath);
	hasValue |= m_Code.unmarshall(rpc_request, "Code", basepath);
	hasValue |= m_Message.unmarshall(rpc_request, "Message", basepath);
	return hasValue;
}

bool CQuerySetQueryActionResult::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_Suspended.unmarshall(ctx, soapval, "Suspended");
	hasValue |= m_Success.unmarshall(ctx, soapval, "Success");
	hasValue |= m_Code.unmarshall(ctx, soapval, "Code");
	hasValue |= m_Message.unmarshall(ctx, soapval, "Message");
	return hasValue;
}

bool CQuerySetQueryActionResult::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_Suspended.unmarshall(ctx, params, attachments, "Suspended", basepath);
	hasValue |= m_Success.unmarshall(ctx, params, attachments, "Success", basepath);
	hasValue |= m_Code.unmarshall(ctx, params, attachments, "Code", basepath);
	hasValue |= m_Message.unmarshall(ctx, params, attachments, "Message", basepath);
	return hasValue;
}

const char * CQuerySetQueryActionResult::getQueryId() { return m_QueryId.query();}
bool CQuerySetQueryActionResult::getSuspended() { return m_Suspended;}
bool CQuerySetQueryActionResult::getSuccess() { return m_Success;}
int CQuerySetQueryActionResult::getCode() { return m_Code;}
const char * CQuerySetQueryActionResult::getMessage() { return m_Message.query();}
void CQuerySetQueryActionResult::setQueryId(const char * val){ m_QueryId.set(val); }
void CQuerySetQueryActionResult::setSuspended(bool val){ m_Suspended=val; }
void CQuerySetQueryActionResult::setSuccess(bool val){ m_Success=val; }
void CQuerySetQueryActionResult::setCode(int val){ m_Code=val; }
void CQuerySetQueryActionResult::setMessage(const char * val){ m_Message.set(val); }
extern "C"  IEspQuerySetQueryActionResult *createQuerySetQueryActionResult(const char *serv, const char *msgname){return ((IEspQuerySetQueryActionResult *)new CQuerySetQueryActionResult(serv /*, msgname*/));}
extern "C"  IClientQuerySetQueryActionResult *createClientQuerySetQueryActionResult(const char *serv, const char *msgname){return ((IClientQuerySetQueryActionResult *)new CQuerySetQueryActionResult(serv /*, msgname*/));}

//=======================================================
// class CWUQuerySetQueryActionResponse Implementation
//=======================================================

CWUQuerySetQueryActionResponse::CWUQuerySetQueryActionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetQueryActionResponse::CWUQuerySetQueryActionResponse(const char *serviceName, const char *bc)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionResponse");
}

CWUQuerySetQueryActionResponse::CWUQuerySetQueryActionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetQueryActionResponse::CWUQuerySetQueryActionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetQueryActionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetQueryActionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"tns:QuerySetQueryActionTypes\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Results\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Result\" type=\"tns:QuerySetQueryActionResult\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXQuerySetQueryActionTypes::getXsdDefinition(context, request, schema, added);
		CQuerySetQueryActionResult::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerySetQueryActionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetQueryActionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySetQueryActionResult"))
	{
		added.setValue("QuerySetQueryActionResult",1);
		CQuerySetQueryActionResult::getMapInfo(info,added);
	}
	if (!added.getValue("QuerySetQueryActionTypes"))
	{
		added.setValue("QuerySetQueryActionTypes",1);
		CXQuerySetQueryActionTypes::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetQueryActionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Results");
	form.appendf("<tr><td><b>Results: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetQueryActionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetQueryActionResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Action.marshall(rpc_resp, "Action", "", "", "");
		m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
		m_Results.marshall(rpc_resp, "Results", "Result");
	}
}


void CWUQuerySetQueryActionResponse::copy(CWUQuerySetQueryActionResponse &from)
{
	m_Action.copy(from.m_Action);
	m_QuerySetName.copy(from.m_QuerySetName);
	m_Results.copy(from.m_Results);
}


void CWUQuerySetQueryActionResponse::copy(IConstWUQuerySetQueryActionResponse &ifrom)
{
	setAction(ifrom.getAction());
	setQuerySetName(ifrom.getQuerySetName());
	setResults(ifrom.getResults());
}


void CWUQuerySetQueryActionResponse::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetQueryActionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
		m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
		m_Results.toStr(ctx, buffer, "Results", "Result");
	}
}


void CWUQuerySetQueryActionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetQueryActionResponse::serializer(IEspContext* ctx, IConstWUQuerySetQueryActionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetQueryActionResponse>");
	// field Action
	{
		const char* s = src.getActionAsString();
		buffer.append("<Action>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Action>");
	}
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field Results
	{
		IArrayOf<IConstQuerySetQueryActionResult>& v = src.getResults();
		int size = v.length();
		if (size>0)
			buffer.append("<Results>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Result>");
			CQuerySetQueryActionResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Result>");
		}
		if (size>0)
			buffer.append("</Results>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetQueryActionResponse>");
}

bool CWUQuerySetQueryActionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
		hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
		hasValue |= m_Results.unmarshall(rpc_request, "Results", basepath);
	}
	return hasValue;
}

bool CWUQuerySetQueryActionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_Results.unmarshall(ctx, soapval, "Results");
	return hasValue;
}

bool CWUQuerySetQueryActionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_Results.unmarshall(ctx, params, attachments, "Results", basepath);
	return hasValue;
}

CQuerySetQueryActionTypes CWUQuerySetQueryActionResponse::getAction() { return m_Action.getValue(); }
const char* CWUQuerySetQueryActionResponse::getActionAsString() {  return (const char*)m_Action; }
const char * CWUQuerySetQueryActionResponse::getQuerySetName() { return m_QuerySetName.query();}
IArrayOf<IConstQuerySetQueryActionResult> & CWUQuerySetQueryActionResponse::getResults() { return (IArrayOf<IConstQuerySetQueryActionResult> &) m_Results; }
void CWUQuerySetQueryActionResponse::setAction(CQuerySetQueryActionTypes val) { m_Action.setValue(val); }
void CWUQuerySetQueryActionResponse::setAction(const char* val) { m_Action.setValue(val); }
void CWUQuerySetQueryActionResponse::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUQuerySetQueryActionResponse::setResults(IArrayOf<IEspQuerySetQueryActionResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstQuerySetQueryActionResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetQueryActionResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetQueryActionResponse::setResults(IArrayOf<IConstQuerySetQueryActionResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstQuerySetQueryActionResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetQueryActionResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerySetQueryActionResponse *createWUQuerySetQueryActionResponse(const char *serv){return ((IEspWUQuerySetQueryActionResponse *)new CWUQuerySetQueryActionResponse(serv));}
extern "C"  IClientWUQuerySetQueryActionResponse *createClientWUQuerySetQueryActionResponse(const char *serv){return ((IClientWUQuerySetQueryActionResponse *)new CWUQuerySetQueryActionResponse(serv));}

//=======================================================
// class CQuerySetAliasActionItem Implementation
//=======================================================

CQuerySetAliasActionItem::CQuerySetAliasActionItem(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetAliasActionItem");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySetAliasActionItem::CQuerySetAliasActionItem(const char *serviceName, const char *bc)
	: m_Name(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetAliasActionItem");
}

StringBuffer &CQuerySetAliasActionItem::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySetAliasActionItem::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySetAliasActionItem::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQuerySetAliasActionItem::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySetAliasActionItem::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySetAliasActionItem::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
}


void CQuerySetAliasActionItem::copy(CQuerySetAliasActionItem &from)
{
	m_Name.copy(from.m_Name);
}


void CQuerySetAliasActionItem::copy(IConstQuerySetAliasActionItem &ifrom)
{
	setName(ifrom.getName());
}


void CQuerySetAliasActionItem::getAttributes(IProperties &attributes)
{
}


void CQuerySetAliasActionItem::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
}


void CQuerySetAliasActionItem::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySetAliasActionItem::serializer(IEspContext* ctx, IConstQuerySetAliasActionItem &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySetAliasActionItem>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	if (keepRootTag)
		buffer.append("</QuerySetAliasActionItem>");
}

bool CQuerySetAliasActionItem::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	return hasValue;
}

bool CQuerySetAliasActionItem::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	return hasValue;
}

bool CQuerySetAliasActionItem::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	return hasValue;
}

const char * CQuerySetAliasActionItem::getName() { return m_Name.query();}
void CQuerySetAliasActionItem::setName(const char * val){ m_Name.set(val); }
extern "C"  IEspQuerySetAliasActionItem *createQuerySetAliasActionItem(const char *serv, const char *msgname){return ((IEspQuerySetAliasActionItem *)new CQuerySetAliasActionItem(serv /*, msgname*/));}
extern "C"  IClientQuerySetAliasActionItem *createClientQuerySetAliasActionItem(const char *serv, const char *msgname){return ((IClientQuerySetAliasActionItem *)new CQuerySetAliasActionItem(serv /*, msgname*/));}

//=======================================================
// class CWUQuerySetAliasActionRequest Implementation
//=======================================================

CWUQuerySetAliasActionRequest::CWUQuerySetAliasActionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Aliases(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetAliasActionRequest::CWUQuerySetAliasActionRequest(const char *serviceName, const char *bc)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Aliases(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionRequest");
}

CWUQuerySetAliasActionRequest::CWUQuerySetAliasActionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Aliases(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetAliasActionRequest::CWUQuerySetAliasActionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Aliases(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetAliasActionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"tns:QuerySetAliasActionTypes\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Aliases\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Alias\" type=\"tns:QuerySetAliasActionItem\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXQuerySetAliasActionTypes::getXsdDefinition(context, request, schema, added);
		CQuerySetAliasActionItem::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerySetAliasActionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetAliasActionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySetAliasActionItem"))
	{
		added.setValue("QuerySetAliasActionItem",1);
		CQuerySetAliasActionItem::getMapInfo(info,added);
	}
	if (!added.getValue("QuerySetAliasActionTypes"))
	{
		added.setValue("QuerySetAliasActionTypes",1);
		CXQuerySetAliasActionTypes::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetAliasActionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Aliases");
	form.appendf("<tr><td><b>Aliases: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetAliasActionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetAliasActionRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Action.marshall(rpc_resp, "Action", "", "", "");
	m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
	m_Aliases.marshall(rpc_resp, "Aliases", "Alias");
}


void CWUQuerySetAliasActionRequest::copy(CWUQuerySetAliasActionRequest &from)
{
	m_Action.copy(from.m_Action);
	m_QuerySetName.copy(from.m_QuerySetName);
	m_Aliases.copy(from.m_Aliases);
}


void CWUQuerySetAliasActionRequest::copy(IConstWUQuerySetAliasActionRequest &ifrom)
{
	setAction(ifrom.getAction());
	setQuerySetName(ifrom.getQuerySetName());
	setAliases(ifrom.getAliases());
}


void CWUQuerySetAliasActionRequest::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetAliasActionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
	m_Aliases.toStr(ctx, buffer, "Aliases", "Alias");
}


void CWUQuerySetAliasActionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetAliasActionRequest::serializer(IEspContext* ctx, IConstWUQuerySetAliasActionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetAliasActionRequest>");
	// field Action
	{
		const char* s = src.getActionAsString();
		buffer.append("<Action>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Action>");
	}
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field Aliases
	{
		IArrayOf<IConstQuerySetAliasActionItem>& v = src.getAliases();
		int size = v.length();
		if (size>0)
			buffer.append("<Aliases>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Alias>");
			CQuerySetAliasActionItem::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Alias>");
		}
		if (size>0)
			buffer.append("</Aliases>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetAliasActionRequest>");
}

bool CWUQuerySetAliasActionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
	hasValue |= m_Aliases.unmarshall(rpc_request, "Aliases", basepath);
	return hasValue;
}

bool CWUQuerySetAliasActionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_Aliases.unmarshall(ctx, soapval, "Aliases");
	return hasValue;
}

bool CWUQuerySetAliasActionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_Aliases.unmarshall(ctx, params, attachments, "Aliases", basepath);
	return hasValue;
}

CQuerySetAliasActionTypes CWUQuerySetAliasActionRequest::getAction() { return m_Action.getValue(); }
const char* CWUQuerySetAliasActionRequest::getActionAsString() {  return (const char*)m_Action; }
const char * CWUQuerySetAliasActionRequest::getQuerySetName() { return m_QuerySetName.query();}
IArrayOf<IConstQuerySetAliasActionItem> & CWUQuerySetAliasActionRequest::getAliases() { return (IArrayOf<IConstQuerySetAliasActionItem> &) m_Aliases; }
void CWUQuerySetAliasActionRequest::setAction(CQuerySetAliasActionTypes val) { m_Action.setValue(val); }
void CWUQuerySetAliasActionRequest::setAction(const char* val) { m_Action.setValue(val); }
void CWUQuerySetAliasActionRequest::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUQuerySetAliasActionRequest::setAliases(IArrayOf<IEspQuerySetAliasActionItem> &val)
{
	m_Aliases->kill();
	IArrayOf<IConstQuerySetAliasActionItem> &target = m_Aliases.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetAliasActionItem &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetAliasActionRequest::setAliases(IArrayOf<IConstQuerySetAliasActionItem> &val)
{
	m_Aliases->kill();
	IArrayOf<IConstQuerySetAliasActionItem> &target = m_Aliases.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetAliasActionItem &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerySetAliasActionRequest *createWUQuerySetAliasActionRequest(const char *serv){return ((IEspWUQuerySetAliasActionRequest *)new CWUQuerySetAliasActionRequest(serv));}
extern "C"  IClientWUQuerySetAliasActionRequest *createClientWUQuerySetAliasActionRequest(const char *serv){return ((IClientWUQuerySetAliasActionRequest *)new CWUQuerySetAliasActionRequest(serv));}

//=======================================================
// class CQuerySetAliasActionResult Implementation
//=======================================================

CQuerySetAliasActionResult::CQuerySetAliasActionResult(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_Success(nilIgnore),m_Code(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetAliasActionResult");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CQuerySetAliasActionResult::CQuerySetAliasActionResult(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_Success(nilIgnore),m_Code(nilIgnore),m_Message(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("QuerySetAliasActionResult");
}

StringBuffer &CQuerySetAliasActionResult::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Success\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Code\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Message\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CQuerySetAliasActionResult::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CQuerySetAliasActionResult::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CQuerySetAliasActionResult::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Success");
	
	form.appendf("  <tr><td><b>Success? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Code");
	form.appendf("  <tr><td><b>Code: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Message");
	form.appendf("  <tr><td><b>Message: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CQuerySetAliasActionResult::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CQuerySetAliasActionResult::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Success.marshall(rpc_resp, "Success", "", "", "");
	m_Code.marshall(rpc_resp, "Code", "", "", "");
	m_Message.marshall(rpc_resp, "Message", "", "", "");
}


void CQuerySetAliasActionResult::copy(CQuerySetAliasActionResult &from)
{
	m_Name.copy(from.m_Name);
	m_Success.copy(from.m_Success);
	m_Code.copy(from.m_Code);
	m_Message.copy(from.m_Message);
}


void CQuerySetAliasActionResult::copy(IConstQuerySetAliasActionResult &ifrom)
{
	setName(ifrom.getName());
	setSuccess(ifrom.getSuccess());
	setCode(ifrom.getCode());
	setMessage(ifrom.getMessage());
}


void CQuerySetAliasActionResult::getAttributes(IProperties &attributes)
{
}


void CQuerySetAliasActionResult::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Success.toStr(ctx, buffer, "Success", "", true, "", "");
	m_Code.toStr(ctx, buffer, "Code", "", true, "", "");
	m_Message.toStr(ctx, buffer, "Message", "", true, "", "");
}


void CQuerySetAliasActionResult::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CQuerySetAliasActionResult::serializer(IEspContext* ctx, IConstQuerySetAliasActionResult &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<QuerySetAliasActionResult>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Success
	{
		bool b = src.getSuccess();
		if (b)
			buffer.appendf("<Success>1</Success>");
	}
	// field Code
	{
		int n = src.getCode();
		if (n)
			buffer.appendf("<Code>%d</Code>", n);
	}
	// field Message
	{
		const char* s = src.getMessage();
		if (s && *s)
		{
			buffer.append("<Message>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Message>");
		}
	}
	if (keepRootTag)
		buffer.append("</QuerySetAliasActionResult>");
}

bool CQuerySetAliasActionResult::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Success.unmarshall(rpc_request, "Success", basepath);
	hasValue |= m_Code.unmarshall(rpc_request, "Code", basepath);
	hasValue |= m_Message.unmarshall(rpc_request, "Message", basepath);
	return hasValue;
}

bool CQuerySetAliasActionResult::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Success.unmarshall(ctx, soapval, "Success");
	hasValue |= m_Code.unmarshall(ctx, soapval, "Code");
	hasValue |= m_Message.unmarshall(ctx, soapval, "Message");
	return hasValue;
}

bool CQuerySetAliasActionResult::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Success.unmarshall(ctx, params, attachments, "Success", basepath);
	hasValue |= m_Code.unmarshall(ctx, params, attachments, "Code", basepath);
	hasValue |= m_Message.unmarshall(ctx, params, attachments, "Message", basepath);
	return hasValue;
}

const char * CQuerySetAliasActionResult::getName() { return m_Name.query();}
bool CQuerySetAliasActionResult::getSuccess() { return m_Success;}
int CQuerySetAliasActionResult::getCode() { return m_Code;}
const char * CQuerySetAliasActionResult::getMessage() { return m_Message.query();}
void CQuerySetAliasActionResult::setName(const char * val){ m_Name.set(val); }
void CQuerySetAliasActionResult::setSuccess(bool val){ m_Success=val; }
void CQuerySetAliasActionResult::setCode(int val){ m_Code=val; }
void CQuerySetAliasActionResult::setMessage(const char * val){ m_Message.set(val); }
extern "C"  IEspQuerySetAliasActionResult *createQuerySetAliasActionResult(const char *serv, const char *msgname){return ((IEspQuerySetAliasActionResult *)new CQuerySetAliasActionResult(serv /*, msgname*/));}
extern "C"  IClientQuerySetAliasActionResult *createClientQuerySetAliasActionResult(const char *serv, const char *msgname){return ((IClientQuerySetAliasActionResult *)new CQuerySetAliasActionResult(serv /*, msgname*/));}

//=======================================================
// class CWUQuerySetAliasActionResponse Implementation
//=======================================================

CWUQuerySetAliasActionResponse::CWUQuerySetAliasActionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetAliasActionResponse::CWUQuerySetAliasActionResponse(const char *serviceName, const char *bc)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionResponse");
}

CWUQuerySetAliasActionResponse::CWUQuerySetAliasActionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetAliasActionResponse::CWUQuerySetAliasActionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Action(nilIgnore),m_QuerySetName(nilIgnore),m_Results(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetAliasActionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetAliasActionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"tns:QuerySetAliasActionTypes\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QuerySetName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Results\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Result\" type=\"tns:QuerySetAliasActionResult\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXQuerySetAliasActionTypes::getXsdDefinition(context, request, schema, added);
		CQuerySetAliasActionResult::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerySetAliasActionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetAliasActionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("QuerySetAliasActionResult"))
	{
		added.setValue("QuerySetAliasActionResult",1);
		CQuerySetAliasActionResult::getMapInfo(info,added);
	}
	if (!added.getValue("QuerySetAliasActionTypes"))
	{
		added.setValue("QuerySetAliasActionTypes",1);
		CXQuerySetAliasActionTypes::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetAliasActionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QuerySetName");
	form.appendf("  <tr><td><b>QuerySetName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Results");
	form.appendf("<tr><td><b>Results: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetAliasActionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetAliasActionResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Action.marshall(rpc_resp, "Action", "", "", "");
		m_QuerySetName.marshall(rpc_resp, "QuerySetName", "", "", "");
		m_Results.marshall(rpc_resp, "Results", "Result");
	}
}


void CWUQuerySetAliasActionResponse::copy(CWUQuerySetAliasActionResponse &from)
{
	m_Action.copy(from.m_Action);
	m_QuerySetName.copy(from.m_QuerySetName);
	m_Results.copy(from.m_Results);
}


void CWUQuerySetAliasActionResponse::copy(IConstWUQuerySetAliasActionResponse &ifrom)
{
	setAction(ifrom.getAction());
	setQuerySetName(ifrom.getQuerySetName());
	setResults(ifrom.getResults());
}


void CWUQuerySetAliasActionResponse::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetAliasActionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
		m_QuerySetName.toStr(ctx, buffer, "QuerySetName", "", true, "", "");
		m_Results.toStr(ctx, buffer, "Results", "Result");
	}
}


void CWUQuerySetAliasActionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetAliasActionResponse::serializer(IEspContext* ctx, IConstWUQuerySetAliasActionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetAliasActionResponse>");
	// field Action
	{
		const char* s = src.getActionAsString();
		buffer.append("<Action>");
		encodeUtf8XML(s,buffer);
		buffer.append("</Action>");
	}
	// field QuerySetName
	{
		const char* s = src.getQuerySetName();
		if (s && *s)
		{
			buffer.append("<QuerySetName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QuerySetName>");
		}
	}
	// field Results
	{
		IArrayOf<IConstQuerySetAliasActionResult>& v = src.getResults();
		int size = v.length();
		if (size>0)
			buffer.append("<Results>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Result>");
			CQuerySetAliasActionResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Result>");
		}
		if (size>0)
			buffer.append("</Results>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetAliasActionResponse>");
}

bool CWUQuerySetAliasActionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
		hasValue |= m_QuerySetName.unmarshall(rpc_request, "QuerySetName", basepath);
		hasValue |= m_Results.unmarshall(rpc_request, "Results", basepath);
	}
	return hasValue;
}

bool CWUQuerySetAliasActionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_QuerySetName.unmarshall(ctx, soapval, "QuerySetName");
	hasValue |= m_Results.unmarshall(ctx, soapval, "Results");
	return hasValue;
}

bool CWUQuerySetAliasActionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_QuerySetName.unmarshall(ctx, params, attachments, "QuerySetName", basepath);
	hasValue |= m_Results.unmarshall(ctx, params, attachments, "Results", basepath);
	return hasValue;
}

CQuerySetAliasActionTypes CWUQuerySetAliasActionResponse::getAction() { return m_Action.getValue(); }
const char* CWUQuerySetAliasActionResponse::getActionAsString() {  return (const char*)m_Action; }
const char * CWUQuerySetAliasActionResponse::getQuerySetName() { return m_QuerySetName.query();}
IArrayOf<IConstQuerySetAliasActionResult> & CWUQuerySetAliasActionResponse::getResults() { return (IArrayOf<IConstQuerySetAliasActionResult> &) m_Results; }
void CWUQuerySetAliasActionResponse::setAction(CQuerySetAliasActionTypes val) { m_Action.setValue(val); }
void CWUQuerySetAliasActionResponse::setAction(const char* val) { m_Action.setValue(val); }
void CWUQuerySetAliasActionResponse::setQuerySetName(const char * val){ m_QuerySetName.set(val); }
void CWUQuerySetAliasActionResponse::setResults(IArrayOf<IEspQuerySetAliasActionResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstQuerySetAliasActionResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IEspQuerySetAliasActionResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetAliasActionResponse::setResults(IArrayOf<IConstQuerySetAliasActionResult> &val)
{
	m_Results->kill();
	IArrayOf<IConstQuerySetAliasActionResult> &target = m_Results.getValue();
	ForEachItemIn(idx, val)
	{
		IConstQuerySetAliasActionResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerySetAliasActionResponse *createWUQuerySetAliasActionResponse(const char *serv){return ((IEspWUQuerySetAliasActionResponse *)new CWUQuerySetAliasActionResponse(serv));}
extern "C"  IClientWUQuerySetAliasActionResponse *createClientWUQuerySetAliasActionResponse(const char *serv){return ((IClientWUQuerySetAliasActionResponse *)new CWUQuerySetAliasActionResponse(serv));}

//=======================================================
// class CWUQuerySetCopyQueryRequest Implementation
//=======================================================

CWUQuerySetCopyQueryRequest::CWUQuerySetCopyQueryRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Source(nilRemove),m_Target(nilRemove),m_Cluster(nilRemove),m_DaliServer(nilRemove),m_Activate(nilRemove),m_Overwrite(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_priority(nilRemove),m_Comment(nilRemove),m_SourceProcess(nilRemove),m_DestName(nilRemove),m_AllowForeignFiles(1, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetCopyQueryRequest::CWUQuerySetCopyQueryRequest(const char *serviceName, const char *bc)
	: m_Source(nilRemove),m_Target(nilRemove),m_Cluster(nilRemove),m_DaliServer(nilRemove),m_Activate(nilRemove),m_Overwrite(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_priority(nilRemove),m_Comment(nilRemove),m_SourceProcess(nilRemove),m_DestName(nilRemove),m_AllowForeignFiles(1, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryRequest");
}

CWUQuerySetCopyQueryRequest::CWUQuerySetCopyQueryRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Source(nilRemove),m_Target(nilRemove),m_Cluster(nilRemove),m_DaliServer(nilRemove),m_Activate(nilRemove),m_Overwrite(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_priority(nilRemove),m_Comment(nilRemove),m_SourceProcess(nilRemove),m_DestName(nilRemove),m_AllowForeignFiles(1, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetCopyQueryRequest::CWUQuerySetCopyQueryRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Source(nilRemove),m_Target(nilRemove),m_Cluster(nilRemove),m_DaliServer(nilRemove),m_Activate(nilRemove),m_Overwrite(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_Wait(10000, nilRemove,false),m_NoReload(0, nilRemove,false),m_memoryLimit(nilRemove),m_TimeLimit(nilRemove),m_WarnTimeLimit(nilRemove),m_priority(nilRemove),m_Comment(nilRemove),m_SourceProcess(nilRemove),m_DestName(nilRemove),m_AllowForeignFiles(1, nilRemove,false),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetCopyQueryRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Source\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Cluster\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DaliServer\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Activate\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"DontCopyFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"10000\" name=\"Wait\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoReload\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"memoryLimit\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WarnTimeLimit\" type=\"xsd:nonNegativeInteger\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"priority\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourceProcess\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AllowForeignFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateSuperFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateCloneFrom\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AppendCluster\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeFileErrors\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUQuerySetCopyQueryRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetCopyQueryRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUQuerySetCopyQueryRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Source");
	form.appendf("  <tr><td><b>Source: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Cluster");
	form.appendf("  <tr><td><b>Cluster: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DaliServer");
	form.appendf("  <tr><td><b>DaliServer: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Activate");
	form.appendf("  <tr><td><b>Activate: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Overwrite");
	
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DontCopyFiles");
	
	form.appendf("  <tr><td><b>DontCopyFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Wait");
	form.appendf("  <tr><td><b>Wait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"10000\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoReload");
	
	form.appendf("  <tr><td><b>NoReload? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("memoryLimit");
	form.appendf("  <tr><td><b>memoryLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimit");
	form.appendf("  <tr><td><b>TimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimit");
	form.appendf("  <tr><td><b>WarnTimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("priority");
	form.appendf("  <tr><td><b>priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourceProcess");
	form.appendf("  <tr><td><b>SourceProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestName");
	form.appendf("  <tr><td><b>DestName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllowForeignFiles");
	
	form.appendf("  <tr><td><b>AllowForeignFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateSuperFiles");
	
	form.appendf("  <tr><td><b>UpdateSuperFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateCloneFrom");
	
	form.appendf("  <tr><td><b>UpdateCloneFrom? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AppendCluster");
	
	form.appendf("  <tr><td><b>AppendCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeFileErrors");
	
	form.appendf("  <tr><td><b>IncludeFileErrors? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetCopyQueryRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetCopyQueryRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Source.marshall(rpc_resp, "Source", "", "", "");
	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_Cluster.marshall(rpc_resp, "Cluster", "", "", "");
	m_DaliServer.marshall(rpc_resp, "DaliServer", "", "", "");
	m_Activate.marshall(rpc_resp, "Activate", "", "", "");
	m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
	m_DontCopyFiles.marshall(rpc_resp, "DontCopyFiles", "", "", "");
	m_Wait.marshall(rpc_resp, "Wait", "", "", "");
	m_NoReload.marshall(rpc_resp, "NoReload", "", "", "");
	m_memoryLimit.marshall(rpc_resp, "memoryLimit", "", "", "");
	m_TimeLimit.marshall(rpc_resp, "TimeLimit", "", "", "");
	m_WarnTimeLimit.marshall(rpc_resp, "WarnTimeLimit", "", "", "");
	m_priority.marshall(rpc_resp, "priority", "", "", "");
	m_Comment.marshall(rpc_resp, "Comment", "", "", "");
	m_SourceProcess.marshall(rpc_resp, "SourceProcess", "", "", "");
	m_DestName.marshall(rpc_resp, "DestName", "", "", "");
	m_AllowForeignFiles.marshall(rpc_resp, "AllowForeignFiles", "", "", "");
	m_UpdateSuperFiles.marshall(rpc_resp, "UpdateSuperFiles", "", "", "");
	m_UpdateCloneFrom.marshall(rpc_resp, "UpdateCloneFrom", "", "", "");
	m_AppendCluster.marshall(rpc_resp, "AppendCluster", "", "", "");
	m_IncludeFileErrors.marshall(rpc_resp, "IncludeFileErrors", "", "", "");
}


void CWUQuerySetCopyQueryRequest::copy(CWUQuerySetCopyQueryRequest &from)
{
	m_Source.copy(from.m_Source);
	m_Target.copy(from.m_Target);
	m_Cluster.copy(from.m_Cluster);
	m_DaliServer.copy(from.m_DaliServer);
	m_Activate.copy(from.m_Activate);
	m_Overwrite.copy(from.m_Overwrite);
	m_DontCopyFiles.copy(from.m_DontCopyFiles);
	m_Wait.copy(from.m_Wait);
	m_NoReload.copy(from.m_NoReload);
	m_memoryLimit.copy(from.m_memoryLimit);
	m_TimeLimit.copy(from.m_TimeLimit);
	m_WarnTimeLimit.copy(from.m_WarnTimeLimit);
	m_priority.copy(from.m_priority);
	m_Comment.copy(from.m_Comment);
	m_SourceProcess.copy(from.m_SourceProcess);
	m_DestName.copy(from.m_DestName);
	m_AllowForeignFiles.copy(from.m_AllowForeignFiles);
	m_UpdateSuperFiles.copy(from.m_UpdateSuperFiles);
	m_UpdateCloneFrom.copy(from.m_UpdateCloneFrom);
	m_AppendCluster.copy(from.m_AppendCluster);
	m_IncludeFileErrors.copy(from.m_IncludeFileErrors);
}


void CWUQuerySetCopyQueryRequest::copy(IConstWUQuerySetCopyQueryRequest &ifrom)
{
	setSource(ifrom.getSource());
	setTarget(ifrom.getTarget());
	setCluster(ifrom.getCluster());
	setDaliServer(ifrom.getDaliServer());
	setActivate(ifrom.getActivate());
	setOverwrite(ifrom.getOverwrite());
	setDontCopyFiles(ifrom.getDontCopyFiles());
	setWait(ifrom.getWait());
	setNoReload(ifrom.getNoReload());
	setMemoryLimit(ifrom.getMemoryLimit());
	setTimeLimit(ifrom.getTimeLimit());
	setWarnTimeLimit(ifrom.getWarnTimeLimit());
	setPriority(ifrom.getPriority());
	setComment(ifrom.getComment());
	setSourceProcess(ifrom.getSourceProcess());
	setDestName(ifrom.getDestName());
	setAllowForeignFiles(ifrom.getAllowForeignFiles());
	setUpdateSuperFiles(ifrom.getUpdateSuperFiles());
	setUpdateCloneFrom(ifrom.getUpdateCloneFrom());
	setAppendCluster(ifrom.getAppendCluster());
	setIncludeFileErrors(ifrom.getIncludeFileErrors());
}


void CWUQuerySetCopyQueryRequest::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetCopyQueryRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Source.toStr(ctx, buffer, "Source", "", true, "", "");
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_Cluster.toStr(ctx, buffer, "Cluster", "", true, "", "");
	m_DaliServer.toStr(ctx, buffer, "DaliServer", "", true, "", "");
	m_Activate.toStr(ctx, buffer, "Activate", "", true, "", "");
	m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
	m_DontCopyFiles.toStr(ctx, buffer, "DontCopyFiles", "", true, "", "");
	m_Wait.toStr(ctx, buffer, "Wait", "", true, "", "");
	m_NoReload.toStr(ctx, buffer, "NoReload", "", true, "", "");
	m_memoryLimit.toStr(ctx, buffer, "memoryLimit", "", true, "", "");
	m_TimeLimit.toStr(ctx, buffer, "TimeLimit", "", true, "", "");
	m_WarnTimeLimit.toStr(ctx, buffer, "WarnTimeLimit", "", true, "", "");
	m_priority.toStr(ctx, buffer, "priority", "", true, "", "");
	m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
	m_SourceProcess.toStr(ctx, buffer, "SourceProcess", "", true, "", "");
	m_DestName.toStr(ctx, buffer, "DestName", "", true, "", "");
	m_AllowForeignFiles.toStr(ctx, buffer, "AllowForeignFiles", "", true, "", "");
	m_UpdateSuperFiles.toStr(ctx, buffer, "UpdateSuperFiles", "", true, "", "");
	m_UpdateCloneFrom.toStr(ctx, buffer, "UpdateCloneFrom", "", true, "", "");
	m_AppendCluster.toStr(ctx, buffer, "AppendCluster", "", true, "", "");
	m_IncludeFileErrors.toStr(ctx, buffer, "IncludeFileErrors", "", true, "", "");
}


void CWUQuerySetCopyQueryRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetCopyQueryRequest::serializer(IEspContext* ctx, IConstWUQuerySetCopyQueryRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetCopyQueryRequest>");
	// field Source
	{
		const char* s = src.getSource();
		if (s && *s)
		{
			buffer.append("<Source>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Source>");
		}
	}
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field Cluster
	{
		const char* s = src.getCluster();
		if (s && *s)
		{
			buffer.append("<Cluster>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Cluster>");
		}
	}
	// field DaliServer
	{
		const char* s = src.getDaliServer();
		if (s && *s)
		{
			buffer.append("<DaliServer>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DaliServer>");
		}
	}
	// field Activate
	{
		int n = src.getActivate();
		if (n)
			buffer.appendf("<Activate>%d</Activate>", n);
	}
	// field Overwrite
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	// field DontCopyFiles
	{
		bool b = src.getDontCopyFiles();
		if (b)
			buffer.appendf("<DontCopyFiles>1</DontCopyFiles>");
	}
	// field Wait
	{
		int n = src.getWait();
		if (n)
			buffer.appendf("<Wait>%d</Wait>", n);
	}
	// field NoReload
	{
		bool b = src.getNoReload();
		if (b)
			buffer.appendf("<NoReload>1</NoReload>");
	}
	// field memoryLimit
	{
		const char* s = src.getMemoryLimit();
		if (s && *s)
		{
			buffer.append("<memoryLimit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</memoryLimit>");
		}
	}
	// field TimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=TimeLimit
		buffer.append("<TimeLimit>");
		buffer.append(src.getTimeLimit());
		buffer.append("</TimeLimit>");
	}
	// field WarnTimeLimit
	{
		//*** default kind: TK_STRUCT; type=nonNegativeInteger, name=WarnTimeLimit
		buffer.append("<WarnTimeLimit>");
		buffer.append(src.getWarnTimeLimit());
		buffer.append("</WarnTimeLimit>");
	}
	// field priority
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</priority>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	// field SourceProcess
	{
		const char* s = src.getSourceProcess();
		if (s && *s)
		{
			buffer.append("<SourceProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourceProcess>");
		}
	}
	// field DestName
	{
		const char* s = src.getDestName();
		if (s && *s)
		{
			buffer.append("<DestName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestName>");
		}
	}
	// field AllowForeignFiles
	{
		bool b = src.getAllowForeignFiles();
		if (b)
			buffer.appendf("<AllowForeignFiles>1</AllowForeignFiles>");
	}
	// field UpdateSuperFiles
	{
		bool b = src.getUpdateSuperFiles();
		if (b)
			buffer.appendf("<UpdateSuperFiles>1</UpdateSuperFiles>");
	}
	// field UpdateCloneFrom
	{
		bool b = src.getUpdateCloneFrom();
		if (b)
			buffer.appendf("<UpdateCloneFrom>1</UpdateCloneFrom>");
	}
	// field AppendCluster
	{
		bool b = src.getAppendCluster();
		if (b)
			buffer.appendf("<AppendCluster>1</AppendCluster>");
	}
	// field IncludeFileErrors
	{
		bool b = src.getIncludeFileErrors();
		if (b)
			buffer.appendf("<IncludeFileErrors>1</IncludeFileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetCopyQueryRequest>");
}

bool CWUQuerySetCopyQueryRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(rpc_request, "Source", basepath);
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_Cluster.unmarshall(rpc_request, "Cluster", basepath);
	hasValue |= m_DaliServer.unmarshall(rpc_request, "DaliServer", basepath);
	hasValue |= m_Activate.unmarshall(rpc_request, "Activate", basepath);
	hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(rpc_request, "DontCopyFiles", basepath);
	hasValue |= m_Wait.unmarshall(rpc_request, "Wait", basepath);
	hasValue |= m_NoReload.unmarshall(rpc_request, "NoReload", basepath);
	hasValue |= m_memoryLimit.unmarshall(rpc_request, "memoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(rpc_request, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(rpc_request, "WarnTimeLimit", basepath);
	hasValue |= m_priority.unmarshall(rpc_request, "priority", basepath);
	hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
	hasValue |= m_SourceProcess.unmarshall(rpc_request, "SourceProcess", basepath);
	hasValue |= m_DestName.unmarshall(rpc_request, "DestName", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(rpc_request, "AllowForeignFiles", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(rpc_request, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(rpc_request, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(rpc_request, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(rpc_request, "IncludeFileErrors", basepath);
	return hasValue;
}

bool CWUQuerySetCopyQueryRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(ctx, soapval, "Source");
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_Cluster.unmarshall(ctx, soapval, "Cluster");
	hasValue |= m_DaliServer.unmarshall(ctx, soapval, "DaliServer");
	hasValue |= m_Activate.unmarshall(ctx, soapval, "Activate");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	hasValue |= m_DontCopyFiles.unmarshall(ctx, soapval, "DontCopyFiles");
	hasValue |= m_Wait.unmarshall(ctx, soapval, "Wait");
	hasValue |= m_NoReload.unmarshall(ctx, soapval, "NoReload");
	hasValue |= m_memoryLimit.unmarshall(ctx, soapval, "memoryLimit");
	hasValue |= m_TimeLimit.unmarshall(ctx, soapval, "TimeLimit");
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, soapval, "WarnTimeLimit");
	hasValue |= m_priority.unmarshall(ctx, soapval, "priority");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	hasValue |= m_SourceProcess.unmarshall(ctx, soapval, "SourceProcess");
	hasValue |= m_DestName.unmarshall(ctx, soapval, "DestName");
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, soapval, "AllowForeignFiles");
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, soapval, "UpdateSuperFiles");
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, soapval, "UpdateCloneFrom");
	hasValue |= m_AppendCluster.unmarshall(ctx, soapval, "AppendCluster");
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, soapval, "IncludeFileErrors");
	return hasValue;
}

bool CWUQuerySetCopyQueryRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(ctx, params, attachments, "Source", basepath);
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_Cluster.unmarshall(ctx, params, attachments, "Cluster", basepath);
	hasValue |= m_DaliServer.unmarshall(ctx, params, attachments, "DaliServer", basepath);
	hasValue |= m_Activate.unmarshall(ctx, params, attachments, "Activate", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(ctx, params, attachments, "DontCopyFiles", basepath);
	hasValue |= m_Wait.unmarshall(ctx, params, attachments, "Wait", basepath);
	hasValue |= m_NoReload.unmarshall(ctx, params, attachments, "NoReload", basepath);
	hasValue |= m_memoryLimit.unmarshall(ctx, params, attachments, "memoryLimit", basepath);
	hasValue |= m_TimeLimit.unmarshall(ctx, params, attachments, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, params, attachments, "WarnTimeLimit", basepath);
	hasValue |= m_priority.unmarshall(ctx, params, attachments, "priority", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	hasValue |= m_SourceProcess.unmarshall(ctx, params, attachments, "SourceProcess", basepath);
	hasValue |= m_DestName.unmarshall(ctx, params, attachments, "DestName", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, params, attachments, "AllowForeignFiles", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, params, attachments, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, params, attachments, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(ctx, params, attachments, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, params, attachments, "IncludeFileErrors", basepath);
	return hasValue;
}

const char * CWUQuerySetCopyQueryRequest::getSource() { return m_Source.query();}
const char * CWUQuerySetCopyQueryRequest::getTarget() { return m_Target.query();}
const char * CWUQuerySetCopyQueryRequest::getCluster() { return m_Cluster.query();}
const char * CWUQuerySetCopyQueryRequest::getDaliServer() { return m_DaliServer.query();}
bool CWUQuerySetCopyQueryRequest::getActivate_isNull(){return m_Activate.is_nil();}
int CWUQuerySetCopyQueryRequest::getActivate() { return m_Activate;}
bool CWUQuerySetCopyQueryRequest::getOverwrite_isNull(){return m_Overwrite.is_nil();}
bool CWUQuerySetCopyQueryRequest::getOverwrite() { return m_Overwrite;}
bool CWUQuerySetCopyQueryRequest::getDontCopyFiles_isNull(){return m_DontCopyFiles.is_nil();}
bool CWUQuerySetCopyQueryRequest::getDontCopyFiles() { return m_DontCopyFiles;}
bool CWUQuerySetCopyQueryRequest::getWait_isNull(){return m_Wait.is_nil();}
int CWUQuerySetCopyQueryRequest::getWait() { return m_Wait;}
bool CWUQuerySetCopyQueryRequest::getNoReload_isNull(){return m_NoReload.is_nil();}
bool CWUQuerySetCopyQueryRequest::getNoReload() { return m_NoReload;}
const char * CWUQuerySetCopyQueryRequest::getMemoryLimit() { return m_memoryLimit.query();}
bool CWUQuerySetCopyQueryRequest::getTimeLimit_isNull(){return m_TimeLimit.is_nil();}
unsigned int CWUQuerySetCopyQueryRequest::getTimeLimit() { return m_TimeLimit;}
bool CWUQuerySetCopyQueryRequest::getWarnTimeLimit_isNull(){return m_WarnTimeLimit.is_nil();}
unsigned int CWUQuerySetCopyQueryRequest::getWarnTimeLimit() { return m_WarnTimeLimit;}
const char * CWUQuerySetCopyQueryRequest::getPriority() { return m_priority.query();}
const char * CWUQuerySetCopyQueryRequest::getComment() { return m_Comment.query();}
const char * CWUQuerySetCopyQueryRequest::getSourceProcess() { return m_SourceProcess.query();}
const char * CWUQuerySetCopyQueryRequest::getDestName() { return m_DestName.query();}
bool CWUQuerySetCopyQueryRequest::getAllowForeignFiles_isNull(){return m_AllowForeignFiles.is_nil();}
bool CWUQuerySetCopyQueryRequest::getAllowForeignFiles() { return m_AllowForeignFiles;}
bool CWUQuerySetCopyQueryRequest::getUpdateSuperFiles_isNull(){return m_UpdateSuperFiles.is_nil();}
bool CWUQuerySetCopyQueryRequest::getUpdateSuperFiles() { return m_UpdateSuperFiles;}
bool CWUQuerySetCopyQueryRequest::getUpdateCloneFrom_isNull(){return m_UpdateCloneFrom.is_nil();}
bool CWUQuerySetCopyQueryRequest::getUpdateCloneFrom() { return m_UpdateCloneFrom;}
bool CWUQuerySetCopyQueryRequest::getAppendCluster_isNull(){return m_AppendCluster.is_nil();}
bool CWUQuerySetCopyQueryRequest::getAppendCluster() { return m_AppendCluster;}
bool CWUQuerySetCopyQueryRequest::getIncludeFileErrors_isNull(){return m_IncludeFileErrors.is_nil();}
bool CWUQuerySetCopyQueryRequest::getIncludeFileErrors() { return m_IncludeFileErrors;}
void CWUQuerySetCopyQueryRequest::setSource(const char * val){ m_Source.set(val); }
void CWUQuerySetCopyQueryRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUQuerySetCopyQueryRequest::setCluster(const char * val){ m_Cluster.set(val); }
void CWUQuerySetCopyQueryRequest::setDaliServer(const char * val){ m_DaliServer.set(val); }
void CWUQuerySetCopyQueryRequest::setActivate_null(){ m_Activate.Nil(); }void CWUQuerySetCopyQueryRequest::setActivate(int val){ m_Activate=val; }
void CWUQuerySetCopyQueryRequest::setOverwrite_null(){ m_Overwrite.Nil(); }void CWUQuerySetCopyQueryRequest::setOverwrite(bool val){ m_Overwrite=val; }
void CWUQuerySetCopyQueryRequest::setDontCopyFiles_null(){ m_DontCopyFiles.Nil(); }void CWUQuerySetCopyQueryRequest::setDontCopyFiles(bool val){ m_DontCopyFiles=val; }
void CWUQuerySetCopyQueryRequest::setWait_null(){ m_Wait.Nil(); }void CWUQuerySetCopyQueryRequest::setWait(int val){ m_Wait=val; }
void CWUQuerySetCopyQueryRequest::setNoReload_null(){ m_NoReload.Nil(); }void CWUQuerySetCopyQueryRequest::setNoReload(bool val){ m_NoReload=val; }
void CWUQuerySetCopyQueryRequest::setMemoryLimit(const char * val){ m_memoryLimit.set(val); }
void CWUQuerySetCopyQueryRequest::setTimeLimit_null(){ m_TimeLimit.Nil(); }void CWUQuerySetCopyQueryRequest::setTimeLimit(unsigned int val){ m_TimeLimit=val; }
void CWUQuerySetCopyQueryRequest::setWarnTimeLimit_null(){ m_WarnTimeLimit.Nil(); }void CWUQuerySetCopyQueryRequest::setWarnTimeLimit(unsigned int val){ m_WarnTimeLimit=val; }
void CWUQuerySetCopyQueryRequest::setPriority(const char * val){ m_priority.set(val); }
void CWUQuerySetCopyQueryRequest::setComment(const char * val){ m_Comment.set(val); }
void CWUQuerySetCopyQueryRequest::setSourceProcess(const char * val){ m_SourceProcess.set(val); }
void CWUQuerySetCopyQueryRequest::setDestName(const char * val){ m_DestName.set(val); }
void CWUQuerySetCopyQueryRequest::setAllowForeignFiles_null(){ m_AllowForeignFiles.Nil(); }void CWUQuerySetCopyQueryRequest::setAllowForeignFiles(bool val){ m_AllowForeignFiles=val; }
void CWUQuerySetCopyQueryRequest::setUpdateSuperFiles_null(){ m_UpdateSuperFiles.Nil(); }void CWUQuerySetCopyQueryRequest::setUpdateSuperFiles(bool val){ m_UpdateSuperFiles=val; }
void CWUQuerySetCopyQueryRequest::setUpdateCloneFrom_null(){ m_UpdateCloneFrom.Nil(); }void CWUQuerySetCopyQueryRequest::setUpdateCloneFrom(bool val){ m_UpdateCloneFrom=val; }
void CWUQuerySetCopyQueryRequest::setAppendCluster_null(){ m_AppendCluster.Nil(); }void CWUQuerySetCopyQueryRequest::setAppendCluster(bool val){ m_AppendCluster=val; }
void CWUQuerySetCopyQueryRequest::setIncludeFileErrors_null(){ m_IncludeFileErrors.Nil(); }void CWUQuerySetCopyQueryRequest::setIncludeFileErrors(bool val){ m_IncludeFileErrors=val; }
extern "C"  IEspWUQuerySetCopyQueryRequest *createWUQuerySetCopyQueryRequest(const char *serv){return ((IEspWUQuerySetCopyQueryRequest *)new CWUQuerySetCopyQueryRequest(serv));}
extern "C"  IClientWUQuerySetCopyQueryRequest *createClientWUQuerySetCopyQueryRequest(const char *serv){return ((IClientWUQuerySetCopyQueryRequest *)new CWUQuerySetCopyQueryRequest(serv));}

//=======================================================
// class CWUQuerySetCopyQueryResponse Implementation
//=======================================================

CWUQuerySetCopyQueryResponse::CWUQuerySetCopyQueryResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_QueryId(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUQuerySetCopyQueryResponse::CWUQuerySetCopyQueryResponse(const char *serviceName, const char *bc)
	: m_QueryId(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryResponse");
}

CWUQuerySetCopyQueryResponse::CWUQuerySetCopyQueryResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_QueryId(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUQuerySetCopyQueryResponse::CWUQuerySetCopyQueryResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_QueryId(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUQuerySetCopyQueryResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUQuerySetCopyQueryResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryId\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUQuerySetCopyQueryResponse","FileErrors")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileErrors\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:LogicalFileError\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUQuerySetCopyQueryResponse","FileErrors"))
			CLogicalFileError::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUQuerySetCopyQueryResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUQuerySetCopyQueryResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUQuerySetCopyQueryResponse","FileErrors",1.68);
	if (!added.getValue("LogicalFileError"))
	{
		added.setValue("LogicalFileError",1);
		CLogicalFileError::getMapInfo(info,added);
	}
}

StringBuffer &CWUQuerySetCopyQueryResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryId");
	form.appendf("  <tr><td><b>QueryId: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUQuerySetCopyQueryResponse","FileErrors")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileErrors");
		form.appendf("<tr><td><b>FileErrors: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUQuerySetCopyQueryResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUQuerySetCopyQueryResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_QueryId.marshall(rpc_resp, "QueryId", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.68))
			m_FileErrors.marshall(rpc_resp, "FileErrors", "File");
	}
}


void CWUQuerySetCopyQueryResponse::copy(CWUQuerySetCopyQueryResponse &from)
{
	m_QueryId.copy(from.m_QueryId);
	m_FileErrors.copy(from.m_FileErrors);
}


void CWUQuerySetCopyQueryResponse::copy(IConstWUQuerySetCopyQueryResponse &ifrom)
{
	setQueryId(ifrom.getQueryId());
	setFileErrors(ifrom.getFileErrors());
}


void CWUQuerySetCopyQueryResponse::getAttributes(IProperties &attributes)
{
}


void CWUQuerySetCopyQueryResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_QueryId.toStr(ctx, buffer, "QueryId", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.68))
			m_FileErrors.toStr(ctx, buffer, "FileErrors", "File");
	}
}


void CWUQuerySetCopyQueryResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUQuerySetCopyQueryResponse::serializer(IEspContext* ctx, IConstWUQuerySetCopyQueryResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUQuerySetCopyQueryResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field QueryId
	{
		const char* s = src.getQueryId();
		if (s && *s)
		{
			buffer.append("<QueryId>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryId>");
		}
	}
	// field FileErrors
	if ((clientVer==-1.0 || clientVer>=1.68))
	{
		IArrayOf<IConstLogicalFileError>& v = src.getFileErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<FileErrors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CLogicalFileError::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</FileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUQuerySetCopyQueryResponse>");
}

bool CWUQuerySetCopyQueryResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_QueryId.unmarshall(rpc_request, "QueryId", basepath);
		hasValue |= m_FileErrors.unmarshall(rpc_request, "FileErrors", basepath);
	}
	return hasValue;
}

bool CWUQuerySetCopyQueryResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, soapval, "QueryId");
	hasValue |= m_FileErrors.unmarshall(ctx, soapval, "FileErrors");
	return hasValue;
}

bool CWUQuerySetCopyQueryResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_QueryId.unmarshall(ctx, params, attachments, "QueryId", basepath);
	hasValue |= m_FileErrors.unmarshall(ctx, params, attachments, "FileErrors", basepath);
	return hasValue;
}

const char * CWUQuerySetCopyQueryResponse::getQueryId() { return m_QueryId.query();}
IArrayOf<IConstLogicalFileError> & CWUQuerySetCopyQueryResponse::getFileErrors() { return (IArrayOf<IConstLogicalFileError> &) m_FileErrors; }
void CWUQuerySetCopyQueryResponse::setQueryId(const char * val){ m_QueryId.set(val); }
void CWUQuerySetCopyQueryResponse::setFileErrors(IArrayOf<IEspLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspLogicalFileError &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUQuerySetCopyQueryResponse::setFileErrors(IArrayOf<IConstLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstLogicalFileError &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUQuerySetCopyQueryResponse *createWUQuerySetCopyQueryResponse(const char *serv){return ((IEspWUQuerySetCopyQueryResponse *)new CWUQuerySetCopyQueryResponse(serv));}
extern "C"  IClientWUQuerySetCopyQueryResponse *createClientWUQuerySetCopyQueryResponse(const char *serv){return ((IClientWUQuerySetCopyQueryResponse *)new CWUQuerySetCopyQueryResponse(serv));}

//=======================================================
// class CWUCopyQuerySetRequest Implementation
//=======================================================

CWUCopyQuerySetRequest::CWUCopyQuerySetRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Source(nilRemove),m_Target(nilRemove),m_ActiveOnly(1, nilRemove,false),m_CloneActiveState(1, nilRemove,false),m_AllowForeignFiles(1, nilRemove,false),m_DfsServer(nilRemove),m_CopyFiles(1, nilRemove,false),m_OverwriteDfs(0, nilRemove,false),m_SourceProcess(nilRemove),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCopyQuerySetRequest::CWUCopyQuerySetRequest(const char *serviceName, const char *bc)
	: m_Source(nilRemove),m_Target(nilRemove),m_ActiveOnly(1, nilRemove,false),m_CloneActiveState(1, nilRemove,false),m_AllowForeignFiles(1, nilRemove,false),m_DfsServer(nilRemove),m_CopyFiles(1, nilRemove,false),m_OverwriteDfs(0, nilRemove,false),m_SourceProcess(nilRemove),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetRequest");
}

CWUCopyQuerySetRequest::CWUCopyQuerySetRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Source(nilRemove),m_Target(nilRemove),m_ActiveOnly(1, nilRemove,false),m_CloneActiveState(1, nilRemove,false),m_AllowForeignFiles(1, nilRemove,false),m_DfsServer(nilRemove),m_CopyFiles(1, nilRemove,false),m_OverwriteDfs(0, nilRemove,false),m_SourceProcess(nilRemove),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCopyQuerySetRequest::CWUCopyQuerySetRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Source(nilRemove),m_Target(nilRemove),m_ActiveOnly(1, nilRemove,false),m_CloneActiveState(1, nilRemove,false),m_AllowForeignFiles(1, nilRemove,false),m_DfsServer(nilRemove),m_CopyFiles(1, nilRemove,false),m_OverwriteDfs(0, nilRemove,false),m_SourceProcess(nilRemove),m_UpdateSuperFiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_AppendCluster(1, nilRemove,false),m_IncludeFileErrors(0, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCopyQuerySetRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Source\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"ActiveOnly\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"CloneActiveState\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AllowForeignFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DfsServer\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"CopyFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"OverwriteDfs\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourceProcess\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateSuperFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateCloneFrom\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"AppendCluster\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeFileErrors\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUCopyQuerySetRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCopyQuerySetRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUCopyQuerySetRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Source");
	form.appendf("  <tr><td><b>Source: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActiveOnly");
	
	form.appendf("  <tr><td><b>ActiveOnly? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CloneActiveState");
	
	form.appendf("  <tr><td><b>CloneActiveState? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllowForeignFiles");
	
	form.appendf("  <tr><td><b>AllowForeignFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DfsServer");
	form.appendf("  <tr><td><b>DfsServer: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CopyFiles");
	
	form.appendf("  <tr><td><b>CopyFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("OverwriteDfs");
	
	form.appendf("  <tr><td><b>OverwriteDfs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourceProcess");
	form.appendf("  <tr><td><b>SourceProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateSuperFiles");
	
	form.appendf("  <tr><td><b>UpdateSuperFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateCloneFrom");
	
	form.appendf("  <tr><td><b>UpdateCloneFrom? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AppendCluster");
	
	form.appendf("  <tr><td><b>AppendCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeFileErrors");
	
	form.appendf("  <tr><td><b>IncludeFileErrors? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCopyQuerySetRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCopyQuerySetRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Source.marshall(rpc_resp, "Source", "", "", "");
	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_ActiveOnly.marshall(rpc_resp, "ActiveOnly", "", "", "");
	m_CloneActiveState.marshall(rpc_resp, "CloneActiveState", "", "", "");
	m_AllowForeignFiles.marshall(rpc_resp, "AllowForeignFiles", "", "", "");
	m_DfsServer.marshall(rpc_resp, "DfsServer", "", "", "");
	m_CopyFiles.marshall(rpc_resp, "CopyFiles", "", "", "");
	m_OverwriteDfs.marshall(rpc_resp, "OverwriteDfs", "", "", "");
	m_SourceProcess.marshall(rpc_resp, "SourceProcess", "", "", "");
	m_UpdateSuperFiles.marshall(rpc_resp, "UpdateSuperFiles", "", "", "");
	m_UpdateCloneFrom.marshall(rpc_resp, "UpdateCloneFrom", "", "", "");
	m_AppendCluster.marshall(rpc_resp, "AppendCluster", "", "", "");
	m_IncludeFileErrors.marshall(rpc_resp, "IncludeFileErrors", "", "", "");
}


void CWUCopyQuerySetRequest::copy(CWUCopyQuerySetRequest &from)
{
	m_Source.copy(from.m_Source);
	m_Target.copy(from.m_Target);
	m_ActiveOnly.copy(from.m_ActiveOnly);
	m_CloneActiveState.copy(from.m_CloneActiveState);
	m_AllowForeignFiles.copy(from.m_AllowForeignFiles);
	m_DfsServer.copy(from.m_DfsServer);
	m_CopyFiles.copy(from.m_CopyFiles);
	m_OverwriteDfs.copy(from.m_OverwriteDfs);
	m_SourceProcess.copy(from.m_SourceProcess);
	m_UpdateSuperFiles.copy(from.m_UpdateSuperFiles);
	m_UpdateCloneFrom.copy(from.m_UpdateCloneFrom);
	m_AppendCluster.copy(from.m_AppendCluster);
	m_IncludeFileErrors.copy(from.m_IncludeFileErrors);
}


void CWUCopyQuerySetRequest::copy(IConstWUCopyQuerySetRequest &ifrom)
{
	setSource(ifrom.getSource());
	setTarget(ifrom.getTarget());
	setActiveOnly(ifrom.getActiveOnly());
	setCloneActiveState(ifrom.getCloneActiveState());
	setAllowForeignFiles(ifrom.getAllowForeignFiles());
	setDfsServer(ifrom.getDfsServer());
	setCopyFiles(ifrom.getCopyFiles());
	setOverwriteDfs(ifrom.getOverwriteDfs());
	setSourceProcess(ifrom.getSourceProcess());
	setUpdateSuperFiles(ifrom.getUpdateSuperFiles());
	setUpdateCloneFrom(ifrom.getUpdateCloneFrom());
	setAppendCluster(ifrom.getAppendCluster());
	setIncludeFileErrors(ifrom.getIncludeFileErrors());
}


void CWUCopyQuerySetRequest::getAttributes(IProperties &attributes)
{
}


void CWUCopyQuerySetRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Source.toStr(ctx, buffer, "Source", "", true, "", "");
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_ActiveOnly.toStr(ctx, buffer, "ActiveOnly", "", true, "", "");
	m_CloneActiveState.toStr(ctx, buffer, "CloneActiveState", "", true, "", "");
	m_AllowForeignFiles.toStr(ctx, buffer, "AllowForeignFiles", "", true, "", "");
	m_DfsServer.toStr(ctx, buffer, "DfsServer", "", true, "", "");
	m_CopyFiles.toStr(ctx, buffer, "CopyFiles", "", true, "", "");
	m_OverwriteDfs.toStr(ctx, buffer, "OverwriteDfs", "", true, "", "");
	m_SourceProcess.toStr(ctx, buffer, "SourceProcess", "", true, "", "");
	m_UpdateSuperFiles.toStr(ctx, buffer, "UpdateSuperFiles", "", true, "", "");
	m_UpdateCloneFrom.toStr(ctx, buffer, "UpdateCloneFrom", "", true, "", "");
	m_AppendCluster.toStr(ctx, buffer, "AppendCluster", "", true, "", "");
	m_IncludeFileErrors.toStr(ctx, buffer, "IncludeFileErrors", "", true, "", "");
}


void CWUCopyQuerySetRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCopyQuerySetRequest::serializer(IEspContext* ctx, IConstWUCopyQuerySetRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCopyQuerySetRequest>");
	// field Source
	{
		const char* s = src.getSource();
		if (s && *s)
		{
			buffer.append("<Source>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Source>");
		}
	}
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field ActiveOnly
	{
		bool b = src.getActiveOnly();
		if (b)
			buffer.appendf("<ActiveOnly>1</ActiveOnly>");
	}
	// field CloneActiveState
	{
		bool b = src.getCloneActiveState();
		if (b)
			buffer.appendf("<CloneActiveState>1</CloneActiveState>");
	}
	// field AllowForeignFiles
	{
		bool b = src.getAllowForeignFiles();
		if (b)
			buffer.appendf("<AllowForeignFiles>1</AllowForeignFiles>");
	}
	// field DfsServer
	{
		const char* s = src.getDfsServer();
		if (s && *s)
		{
			buffer.append("<DfsServer>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DfsServer>");
		}
	}
	// field CopyFiles
	{
		bool b = src.getCopyFiles();
		if (b)
			buffer.appendf("<CopyFiles>1</CopyFiles>");
	}
	// field OverwriteDfs
	{
		bool b = src.getOverwriteDfs();
		if (b)
			buffer.appendf("<OverwriteDfs>1</OverwriteDfs>");
	}
	// field SourceProcess
	{
		const char* s = src.getSourceProcess();
		if (s && *s)
		{
			buffer.append("<SourceProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourceProcess>");
		}
	}
	// field UpdateSuperFiles
	{
		bool b = src.getUpdateSuperFiles();
		if (b)
			buffer.appendf("<UpdateSuperFiles>1</UpdateSuperFiles>");
	}
	// field UpdateCloneFrom
	{
		bool b = src.getUpdateCloneFrom();
		if (b)
			buffer.appendf("<UpdateCloneFrom>1</UpdateCloneFrom>");
	}
	// field AppendCluster
	{
		bool b = src.getAppendCluster();
		if (b)
			buffer.appendf("<AppendCluster>1</AppendCluster>");
	}
	// field IncludeFileErrors
	{
		bool b = src.getIncludeFileErrors();
		if (b)
			buffer.appendf("<IncludeFileErrors>1</IncludeFileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUCopyQuerySetRequest>");
}

bool CWUCopyQuerySetRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(rpc_request, "Source", basepath);
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_ActiveOnly.unmarshall(rpc_request, "ActiveOnly", basepath);
	hasValue |= m_CloneActiveState.unmarshall(rpc_request, "CloneActiveState", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(rpc_request, "AllowForeignFiles", basepath);
	hasValue |= m_DfsServer.unmarshall(rpc_request, "DfsServer", basepath);
	hasValue |= m_CopyFiles.unmarshall(rpc_request, "CopyFiles", basepath);
	hasValue |= m_OverwriteDfs.unmarshall(rpc_request, "OverwriteDfs", basepath);
	hasValue |= m_SourceProcess.unmarshall(rpc_request, "SourceProcess", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(rpc_request, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(rpc_request, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(rpc_request, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(rpc_request, "IncludeFileErrors", basepath);
	return hasValue;
}

bool CWUCopyQuerySetRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(ctx, soapval, "Source");
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_ActiveOnly.unmarshall(ctx, soapval, "ActiveOnly");
	hasValue |= m_CloneActiveState.unmarshall(ctx, soapval, "CloneActiveState");
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, soapval, "AllowForeignFiles");
	hasValue |= m_DfsServer.unmarshall(ctx, soapval, "DfsServer");
	hasValue |= m_CopyFiles.unmarshall(ctx, soapval, "CopyFiles");
	hasValue |= m_OverwriteDfs.unmarshall(ctx, soapval, "OverwriteDfs");
	hasValue |= m_SourceProcess.unmarshall(ctx, soapval, "SourceProcess");
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, soapval, "UpdateSuperFiles");
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, soapval, "UpdateCloneFrom");
	hasValue |= m_AppendCluster.unmarshall(ctx, soapval, "AppendCluster");
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, soapval, "IncludeFileErrors");
	return hasValue;
}

bool CWUCopyQuerySetRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Source.unmarshall(ctx, params, attachments, "Source", basepath);
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_ActiveOnly.unmarshall(ctx, params, attachments, "ActiveOnly", basepath);
	hasValue |= m_CloneActiveState.unmarshall(ctx, params, attachments, "CloneActiveState", basepath);
	hasValue |= m_AllowForeignFiles.unmarshall(ctx, params, attachments, "AllowForeignFiles", basepath);
	hasValue |= m_DfsServer.unmarshall(ctx, params, attachments, "DfsServer", basepath);
	hasValue |= m_CopyFiles.unmarshall(ctx, params, attachments, "CopyFiles", basepath);
	hasValue |= m_OverwriteDfs.unmarshall(ctx, params, attachments, "OverwriteDfs", basepath);
	hasValue |= m_SourceProcess.unmarshall(ctx, params, attachments, "SourceProcess", basepath);
	hasValue |= m_UpdateSuperFiles.unmarshall(ctx, params, attachments, "UpdateSuperFiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, params, attachments, "UpdateCloneFrom", basepath);
	hasValue |= m_AppendCluster.unmarshall(ctx, params, attachments, "AppendCluster", basepath);
	hasValue |= m_IncludeFileErrors.unmarshall(ctx, params, attachments, "IncludeFileErrors", basepath);
	return hasValue;
}

const char * CWUCopyQuerySetRequest::getSource() { return m_Source.query();}
const char * CWUCopyQuerySetRequest::getTarget() { return m_Target.query();}
bool CWUCopyQuerySetRequest::getActiveOnly_isNull(){return m_ActiveOnly.is_nil();}
bool CWUCopyQuerySetRequest::getActiveOnly() { return m_ActiveOnly;}
bool CWUCopyQuerySetRequest::getCloneActiveState_isNull(){return m_CloneActiveState.is_nil();}
bool CWUCopyQuerySetRequest::getCloneActiveState() { return m_CloneActiveState;}
bool CWUCopyQuerySetRequest::getAllowForeignFiles_isNull(){return m_AllowForeignFiles.is_nil();}
bool CWUCopyQuerySetRequest::getAllowForeignFiles() { return m_AllowForeignFiles;}
const char * CWUCopyQuerySetRequest::getDfsServer() { return m_DfsServer.query();}
bool CWUCopyQuerySetRequest::getCopyFiles_isNull(){return m_CopyFiles.is_nil();}
bool CWUCopyQuerySetRequest::getCopyFiles() { return m_CopyFiles;}
bool CWUCopyQuerySetRequest::getOverwriteDfs_isNull(){return m_OverwriteDfs.is_nil();}
bool CWUCopyQuerySetRequest::getOverwriteDfs() { return m_OverwriteDfs;}
const char * CWUCopyQuerySetRequest::getSourceProcess() { return m_SourceProcess.query();}
bool CWUCopyQuerySetRequest::getUpdateSuperFiles_isNull(){return m_UpdateSuperFiles.is_nil();}
bool CWUCopyQuerySetRequest::getUpdateSuperFiles() { return m_UpdateSuperFiles;}
bool CWUCopyQuerySetRequest::getUpdateCloneFrom_isNull(){return m_UpdateCloneFrom.is_nil();}
bool CWUCopyQuerySetRequest::getUpdateCloneFrom() { return m_UpdateCloneFrom;}
bool CWUCopyQuerySetRequest::getAppendCluster_isNull(){return m_AppendCluster.is_nil();}
bool CWUCopyQuerySetRequest::getAppendCluster() { return m_AppendCluster;}
bool CWUCopyQuerySetRequest::getIncludeFileErrors_isNull(){return m_IncludeFileErrors.is_nil();}
bool CWUCopyQuerySetRequest::getIncludeFileErrors() { return m_IncludeFileErrors;}
void CWUCopyQuerySetRequest::setSource(const char * val){ m_Source.set(val); }
void CWUCopyQuerySetRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUCopyQuerySetRequest::setActiveOnly_null(){ m_ActiveOnly.Nil(); }void CWUCopyQuerySetRequest::setActiveOnly(bool val){ m_ActiveOnly=val; }
void CWUCopyQuerySetRequest::setCloneActiveState_null(){ m_CloneActiveState.Nil(); }void CWUCopyQuerySetRequest::setCloneActiveState(bool val){ m_CloneActiveState=val; }
void CWUCopyQuerySetRequest::setAllowForeignFiles_null(){ m_AllowForeignFiles.Nil(); }void CWUCopyQuerySetRequest::setAllowForeignFiles(bool val){ m_AllowForeignFiles=val; }
void CWUCopyQuerySetRequest::setDfsServer(const char * val){ m_DfsServer.set(val); }
void CWUCopyQuerySetRequest::setCopyFiles_null(){ m_CopyFiles.Nil(); }void CWUCopyQuerySetRequest::setCopyFiles(bool val){ m_CopyFiles=val; }
void CWUCopyQuerySetRequest::setOverwriteDfs_null(){ m_OverwriteDfs.Nil(); }void CWUCopyQuerySetRequest::setOverwriteDfs(bool val){ m_OverwriteDfs=val; }
void CWUCopyQuerySetRequest::setSourceProcess(const char * val){ m_SourceProcess.set(val); }
void CWUCopyQuerySetRequest::setUpdateSuperFiles_null(){ m_UpdateSuperFiles.Nil(); }void CWUCopyQuerySetRequest::setUpdateSuperFiles(bool val){ m_UpdateSuperFiles=val; }
void CWUCopyQuerySetRequest::setUpdateCloneFrom_null(){ m_UpdateCloneFrom.Nil(); }void CWUCopyQuerySetRequest::setUpdateCloneFrom(bool val){ m_UpdateCloneFrom=val; }
void CWUCopyQuerySetRequest::setAppendCluster_null(){ m_AppendCluster.Nil(); }void CWUCopyQuerySetRequest::setAppendCluster(bool val){ m_AppendCluster=val; }
void CWUCopyQuerySetRequest::setIncludeFileErrors_null(){ m_IncludeFileErrors.Nil(); }void CWUCopyQuerySetRequest::setIncludeFileErrors(bool val){ m_IncludeFileErrors=val; }
extern "C"  IEspWUCopyQuerySetRequest *createWUCopyQuerySetRequest(const char *serv){return ((IEspWUCopyQuerySetRequest *)new CWUCopyQuerySetRequest(serv));}
extern "C"  IClientWUCopyQuerySetRequest *createClientWUCopyQuerySetRequest(const char *serv){return ((IClientWUCopyQuerySetRequest *)new CWUCopyQuerySetRequest(serv));}

//=======================================================
// class CWUCopyQuerySetResponse Implementation
//=======================================================

CWUCopyQuerySetResponse::CWUCopyQuerySetResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_CopiedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCopyQuerySetResponse::CWUCopyQuerySetResponse(const char *serviceName, const char *bc)
	: m_CopiedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetResponse");
}

CWUCopyQuerySetResponse::CWUCopyQuerySetResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_CopiedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCopyQuerySetResponse::CWUCopyQuerySetResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_CopiedQueries(nilIgnore),m_ExistingQueries(nilIgnore),m_FileErrors(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCopyQuerySetResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCopyQuerySetResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"CopiedQueries\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"QueryId\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ExistingQueries\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"QueryId\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		if (!context.suppressed("WUCopyQuerySetResponse","FileErrors")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"FileErrors\">\n");
			schema.append("<xsd:complexType><xsd:sequence>\n");
			schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:LogicalFileError\"/>");
			schema.append("</xsd:sequence></xsd:complexType>");
			schema.append("</xsd:element>");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		if (!context.suppressed("WUCopyQuerySetResponse","FileErrors"))
			CLogicalFileError::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUCopyQuerySetResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCopyQuerySetResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUCopyQuerySetResponse","FileErrors",1.68);
	if (!added.getValue("LogicalFileError"))
	{
		added.setValue("LogicalFileError",1);
		CLogicalFileError::getMapInfo(info,added);
	}
}

StringBuffer &CWUCopyQuerySetResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CopiedQueries");
	form.appendf("<tr><td><b>CopiedQueries: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExistingQueries");
	form.appendf("<tr><td><b>ExistingQueries: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (!context.suppressed("WUCopyQuerySetResponse","FileErrors")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("FileErrors");
		form.appendf("<tr><td><b>FileErrors: </b></td><td>");
		form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
		form.append("</tr></table>");
		form.append("</td></tr>");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCopyQuerySetResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCopyQuerySetResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_CopiedQueries.marshall(rpc_resp, "CopiedQueries", "QueryId");
		m_ExistingQueries.marshall(rpc_resp, "ExistingQueries", "QueryId");
		if ((clientVer==-1.0 || clientVer>=1.68))
			m_FileErrors.marshall(rpc_resp, "FileErrors", "File");
	}
}


void CWUCopyQuerySetResponse::copy(CWUCopyQuerySetResponse &from)
{
	m_CopiedQueries.copy(from.m_CopiedQueries);
	m_ExistingQueries.copy(from.m_ExistingQueries);
	m_FileErrors.copy(from.m_FileErrors);
}


void CWUCopyQuerySetResponse::copy(IConstWUCopyQuerySetResponse &ifrom)
{
	setCopiedQueries(ifrom.getCopiedQueries());
	setExistingQueries(ifrom.getExistingQueries());
	setFileErrors(ifrom.getFileErrors());
}


void CWUCopyQuerySetResponse::getAttributes(IProperties &attributes)
{
}


void CWUCopyQuerySetResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_CopiedQueries.toStr(ctx, buffer, "CopiedQueries", "QueryId");
		m_ExistingQueries.toStr(ctx, buffer, "ExistingQueries", "QueryId");
		if ((clientVer==-1.0 || clientVer>=1.68))
			m_FileErrors.toStr(ctx, buffer, "FileErrors", "File");
	}
}


void CWUCopyQuerySetResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCopyQuerySetResponse::serializer(IEspContext* ctx, IConstWUCopyQuerySetResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCopyQuerySetResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field CopiedQueries
	{
		StringArray& v = src.getCopiedQueries();
		if (v.length()>0)
			buffer.append("<CopiedQueries>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<QueryId>%s</QueryId>",v.item(i));
		if (v.length()>0)
			buffer.append("</CopiedQueries>");
	}
	// field ExistingQueries
	{
		StringArray& v = src.getExistingQueries();
		if (v.length()>0)
			buffer.append("<ExistingQueries>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<QueryId>%s</QueryId>",v.item(i));
		if (v.length()>0)
			buffer.append("</ExistingQueries>");
	}
	// field FileErrors
	if ((clientVer==-1.0 || clientVer>=1.68))
	{
		IArrayOf<IConstLogicalFileError>& v = src.getFileErrors();
		int size = v.length();
		if (size>0)
			buffer.append("<FileErrors>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CLogicalFileError::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</FileErrors>");
	}
	if (keepRootTag)
		buffer.append("</WUCopyQuerySetResponse>");
}

bool CWUCopyQuerySetResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_CopiedQueries.unmarshall(rpc_request, "CopiedQueries", basepath);
		hasValue |= m_ExistingQueries.unmarshall(rpc_request, "ExistingQueries", basepath);
		hasValue |= m_FileErrors.unmarshall(rpc_request, "FileErrors", basepath);
	}
	return hasValue;
}

bool CWUCopyQuerySetResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_CopiedQueries.unmarshall(ctx, soapval, "CopiedQueries");
	hasValue |= m_ExistingQueries.unmarshall(ctx, soapval, "ExistingQueries");
	hasValue |= m_FileErrors.unmarshall(ctx, soapval, "FileErrors");
	return hasValue;
}

bool CWUCopyQuerySetResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_CopiedQueries.unmarshall(ctx, params, attachments, "CopiedQueries", basepath);
	hasValue |= m_ExistingQueries.unmarshall(ctx, params, attachments, "ExistingQueries", basepath);
	hasValue |= m_FileErrors.unmarshall(ctx, params, attachments, "FileErrors", basepath);
	return hasValue;
}

StringArray & CWUCopyQuerySetResponse::getCopiedQueries() { return (StringArray &) m_CopiedQueries; }
StringArray & CWUCopyQuerySetResponse::getExistingQueries() { return (StringArray &) m_ExistingQueries; }
IArrayOf<IConstLogicalFileError> & CWUCopyQuerySetResponse::getFileErrors() { return (IArrayOf<IConstLogicalFileError> &) m_FileErrors; }
void CWUCopyQuerySetResponse::setCopiedQueries(StringArray &val){ m_CopiedQueries->kill();  CloneArray(m_CopiedQueries.getValue(), val); }
void CWUCopyQuerySetResponse::setExistingQueries(StringArray &val){ m_ExistingQueries->kill();  CloneArray(m_ExistingQueries.getValue(), val); }
void CWUCopyQuerySetResponse::setFileErrors(IArrayOf<IEspLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IEspLogicalFileError &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUCopyQuerySetResponse::setFileErrors(IArrayOf<IConstLogicalFileError> &val)
{
	m_FileErrors->kill();
	IArrayOf<IConstLogicalFileError> &target = m_FileErrors.getValue();
	ForEachItemIn(idx, val)
	{
		IConstLogicalFileError &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUCopyQuerySetResponse *createWUCopyQuerySetResponse(const char *serv){return ((IEspWUCopyQuerySetResponse *)new CWUCopyQuerySetResponse(serv));}
extern "C"  IClientWUCopyQuerySetResponse *createClientWUCopyQuerySetResponse(const char *serv){return ((IClientWUCopyQuerySetResponse *)new CWUCopyQuerySetResponse(serv));}

//=======================================================
// class CWUGetZAPInfoRequest Implementation
//=======================================================

CWUGetZAPInfoRequest::CWUGetZAPInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetZAPInfoRequest::CWUGetZAPInfoRequest(const char *serviceName, const char *bc)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoRequest");
}

CWUGetZAPInfoRequest::CWUGetZAPInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetZAPInfoRequest::CWUGetZAPInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetZAPInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetZAPInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetZAPInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUGetZAPInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetZAPInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetZAPInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_WUID.marshall(rpc_resp, "WUID", "", "", "");
}


void CWUGetZAPInfoRequest::copy(CWUGetZAPInfoRequest &from)
{
	m_WUID.copy(from.m_WUID);
}


void CWUGetZAPInfoRequest::copy(IConstWUGetZAPInfoRequest &ifrom)
{
	setWUID(ifrom.getWUID());
}


void CWUGetZAPInfoRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetZAPInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
}


void CWUGetZAPInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetZAPInfoRequest::serializer(IEspContext* ctx, IConstWUGetZAPInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetZAPInfoRequest>");
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetZAPInfoRequest>");
}

bool CWUGetZAPInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	return hasValue;
}

bool CWUGetZAPInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	return hasValue;
}

bool CWUGetZAPInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	return hasValue;
}

const char * CWUGetZAPInfoRequest::getWUID() { return m_WUID.query();}
void CWUGetZAPInfoRequest::setWUID(const char * val){ m_WUID.set(val); }
extern "C"  IEspWUGetZAPInfoRequest *createWUGetZAPInfoRequest(const char *serv){return ((IEspWUGetZAPInfoRequest *)new CWUGetZAPInfoRequest(serv));}
extern "C"  IClientWUGetZAPInfoRequest *createClientWUGetZAPInfoRequest(const char *serv){return ((IClientWUGetZAPInfoRequest *)new CWUGetZAPInfoRequest(serv));}

//=======================================================
// class CWUGetZAPInfoResponse Implementation
//=======================================================

CWUGetZAPInfoResponse::CWUGetZAPInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilIgnore),m_ESPIPAddress(nilIgnore),m_ThorIPAddress(nilIgnore),m_BuildVersion(nilIgnore),m_Archive(nilIgnore),m_EmailTo(nilIgnore),m_EmailFrom(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetZAPInfoResponse::CWUGetZAPInfoResponse(const char *serviceName, const char *bc)
	: m_WUID(nilIgnore),m_ESPIPAddress(nilIgnore),m_ThorIPAddress(nilIgnore),m_BuildVersion(nilIgnore),m_Archive(nilIgnore),m_EmailTo(nilIgnore),m_EmailFrom(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoResponse");
}

CWUGetZAPInfoResponse::CWUGetZAPInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUID(nilIgnore),m_ESPIPAddress(nilIgnore),m_ThorIPAddress(nilIgnore),m_BuildVersion(nilIgnore),m_Archive(nilIgnore),m_EmailTo(nilIgnore),m_EmailFrom(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetZAPInfoResponse::CWUGetZAPInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUID(nilIgnore),m_ESPIPAddress(nilIgnore),m_ThorIPAddress(nilIgnore),m_BuildVersion(nilIgnore),m_Archive(nilIgnore),m_EmailTo(nilIgnore),m_EmailFrom(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetZAPInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetZAPInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ESPIPAddress\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ThorIPAddress\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BuildVersion\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Archive\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGetZAPInfoResponse","EmailTo")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EmailTo\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUGetZAPInfoResponse","EmailFrom")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EmailFrom\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetZAPInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetZAPInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGetZAPInfoResponse","EmailTo",1.73);
	info.addMinVersion("WUGetZAPInfoResponse","EmailFrom",1.73);
}

StringBuffer &CWUGetZAPInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ESPIPAddress");
	form.appendf("  <tr><td><b>ESPIPAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ThorIPAddress");
	form.appendf("  <tr><td><b>ThorIPAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BuildVersion");
	form.appendf("  <tr><td><b>BuildVersion: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Archive");
	form.appendf("  <tr><td><b>Archive: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGetZAPInfoResponse","EmailTo")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EmailTo");
		form.appendf("  <tr><td><b>EmailTo: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGetZAPInfoResponse","EmailFrom")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EmailFrom");
		form.appendf("  <tr><td><b>EmailFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetZAPInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetZAPInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_WUID.marshall(rpc_resp, "WUID", "", "", "");
		m_ESPIPAddress.marshall(rpc_resp, "ESPIPAddress", "", "", "");
		m_ThorIPAddress.marshall(rpc_resp, "ThorIPAddress", "", "", "");
		m_BuildVersion.marshall(rpc_resp, "BuildVersion", "", "", "");
		m_Archive.marshall(rpc_resp, "Archive", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.73))
			m_EmailTo.marshall(rpc_resp, "EmailTo", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.73))
			m_EmailFrom.marshall(rpc_resp, "EmailFrom", "", "", "");
	}
}


void CWUGetZAPInfoResponse::copy(CWUGetZAPInfoResponse &from)
{
	m_WUID.copy(from.m_WUID);
	m_ESPIPAddress.copy(from.m_ESPIPAddress);
	m_ThorIPAddress.copy(from.m_ThorIPAddress);
	m_BuildVersion.copy(from.m_BuildVersion);
	m_Archive.copy(from.m_Archive);
	m_EmailTo.copy(from.m_EmailTo);
	m_EmailFrom.copy(from.m_EmailFrom);
}


void CWUGetZAPInfoResponse::copy(IConstWUGetZAPInfoResponse &ifrom)
{
	setWUID(ifrom.getWUID());
	setESPIPAddress(ifrom.getESPIPAddress());
	setThorIPAddress(ifrom.getThorIPAddress());
	setBuildVersion(ifrom.getBuildVersion());
	setArchive(ifrom.getArchive());
	setEmailTo(ifrom.getEmailTo());
	setEmailFrom(ifrom.getEmailFrom());
}


void CWUGetZAPInfoResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetZAPInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
		m_ESPIPAddress.toStr(ctx, buffer, "ESPIPAddress", "", true, "", "");
		m_ThorIPAddress.toStr(ctx, buffer, "ThorIPAddress", "", true, "", "");
		m_BuildVersion.toStr(ctx, buffer, "BuildVersion", "", true, "", "");
		m_Archive.toStr(ctx, buffer, "Archive", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.73))
			m_EmailTo.toStr(ctx, buffer, "EmailTo", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.73))
			m_EmailFrom.toStr(ctx, buffer, "EmailFrom", "", true, "", "");
	}
}


void CWUGetZAPInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetZAPInfoResponse::serializer(IEspContext* ctx, IConstWUGetZAPInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetZAPInfoResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field ESPIPAddress
	{
		const char* s = src.getESPIPAddress();
		if (s && *s)
		{
			buffer.append("<ESPIPAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ESPIPAddress>");
		}
	}
	// field ThorIPAddress
	{
		const char* s = src.getThorIPAddress();
		if (s && *s)
		{
			buffer.append("<ThorIPAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ThorIPAddress>");
		}
	}
	// field BuildVersion
	{
		const char* s = src.getBuildVersion();
		if (s && *s)
		{
			buffer.append("<BuildVersion>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BuildVersion>");
		}
	}
	// field Archive
	{
		const char* s = src.getArchive();
		if (s && *s)
		{
			buffer.append("<Archive>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Archive>");
		}
	}
	// field EmailTo
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		const char* s = src.getEmailTo();
		if (s && *s)
		{
			buffer.append("<EmailTo>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EmailTo>");
		}
	}
	// field EmailFrom
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		const char* s = src.getEmailFrom();
		if (s && *s)
		{
			buffer.append("<EmailFrom>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EmailFrom>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetZAPInfoResponse>");
}

bool CWUGetZAPInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
		hasValue |= m_ESPIPAddress.unmarshall(rpc_request, "ESPIPAddress", basepath);
		hasValue |= m_ThorIPAddress.unmarshall(rpc_request, "ThorIPAddress", basepath);
		hasValue |= m_BuildVersion.unmarshall(rpc_request, "BuildVersion", basepath);
		hasValue |= m_Archive.unmarshall(rpc_request, "Archive", basepath);
		hasValue |= m_EmailTo.unmarshall(rpc_request, "EmailTo", basepath);
		hasValue |= m_EmailFrom.unmarshall(rpc_request, "EmailFrom", basepath);
	}
	return hasValue;
}

bool CWUGetZAPInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_ESPIPAddress.unmarshall(ctx, soapval, "ESPIPAddress");
	hasValue |= m_ThorIPAddress.unmarshall(ctx, soapval, "ThorIPAddress");
	hasValue |= m_BuildVersion.unmarshall(ctx, soapval, "BuildVersion");
	hasValue |= m_Archive.unmarshall(ctx, soapval, "Archive");
	hasValue |= m_EmailTo.unmarshall(ctx, soapval, "EmailTo");
	hasValue |= m_EmailFrom.unmarshall(ctx, soapval, "EmailFrom");
	return hasValue;
}

bool CWUGetZAPInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_ESPIPAddress.unmarshall(ctx, params, attachments, "ESPIPAddress", basepath);
	hasValue |= m_ThorIPAddress.unmarshall(ctx, params, attachments, "ThorIPAddress", basepath);
	hasValue |= m_BuildVersion.unmarshall(ctx, params, attachments, "BuildVersion", basepath);
	hasValue |= m_Archive.unmarshall(ctx, params, attachments, "Archive", basepath);
	hasValue |= m_EmailTo.unmarshall(ctx, params, attachments, "EmailTo", basepath);
	hasValue |= m_EmailFrom.unmarshall(ctx, params, attachments, "EmailFrom", basepath);
	return hasValue;
}

const char * CWUGetZAPInfoResponse::getWUID() { return m_WUID.query();}
const char * CWUGetZAPInfoResponse::getESPIPAddress() { return m_ESPIPAddress.query();}
const char * CWUGetZAPInfoResponse::getThorIPAddress() { return m_ThorIPAddress.query();}
const char * CWUGetZAPInfoResponse::getBuildVersion() { return m_BuildVersion.query();}
const char * CWUGetZAPInfoResponse::getArchive() { return m_Archive.query();}
const char * CWUGetZAPInfoResponse::getEmailTo() { return m_EmailTo.query();}
const char * CWUGetZAPInfoResponse::getEmailFrom() { return m_EmailFrom.query();}
void CWUGetZAPInfoResponse::setWUID(const char * val){ m_WUID.set(val); }
void CWUGetZAPInfoResponse::setESPIPAddress(const char * val){ m_ESPIPAddress.set(val); }
void CWUGetZAPInfoResponse::setThorIPAddress(const char * val){ m_ThorIPAddress.set(val); }
void CWUGetZAPInfoResponse::setBuildVersion(const char * val){ m_BuildVersion.set(val); }
void CWUGetZAPInfoResponse::setArchive(const char * val){ m_Archive.set(val); }
void CWUGetZAPInfoResponse::setEmailTo(const char * val){ m_EmailTo.set(val); }
void CWUGetZAPInfoResponse::setEmailFrom(const char * val){ m_EmailFrom.set(val); }
extern "C"  IEspWUGetZAPInfoResponse *createWUGetZAPInfoResponse(const char *serv){return ((IEspWUGetZAPInfoResponse *)new CWUGetZAPInfoResponse(serv));}
extern "C"  IClientWUGetZAPInfoResponse *createClientWUGetZAPInfoResponse(const char *serv){return ((IClientWUGetZAPInfoResponse *)new CWUGetZAPInfoResponse(serv));}

//=======================================================
// class CWUCreateZAPInfoRequest Implementation
//=======================================================

CWUCreateZAPInfoRequest::CWUCreateZAPInfoRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Wuid(nilRemove),m_ESPIPAddress(nilRemove),m_ThorIPAddress(nilRemove),m_BuildVersion(nilRemove),m_ProblemDescription(nilRemove),m_WhatChanged(nilRemove),m_WhereSlow(nilRemove),m_Password(nilRemove),m_ZAPFileName(nilRemove),m_IncludeThorSlaveLog("on", nilRemove),m_ZAPPassword(nilRemove),m_SendEmail(0, nilRemove,false),m_AttachZAPReportToEmail(0, nilRemove,false),m_EmailFrom(nilRemove),m_EmailSubject(nilRemove),m_EmailBody(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCreateZAPInfoRequest::CWUCreateZAPInfoRequest(const char *serviceName, const char *bc)
	: m_Wuid(nilRemove),m_ESPIPAddress(nilRemove),m_ThorIPAddress(nilRemove),m_BuildVersion(nilRemove),m_ProblemDescription(nilRemove),m_WhatChanged(nilRemove),m_WhereSlow(nilRemove),m_Password(nilRemove),m_ZAPFileName(nilRemove),m_IncludeThorSlaveLog("on", nilRemove),m_ZAPPassword(nilRemove),m_SendEmail(0, nilRemove,false),m_AttachZAPReportToEmail(0, nilRemove,false),m_EmailFrom(nilRemove),m_EmailSubject(nilRemove),m_EmailBody(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoRequest");
}

CWUCreateZAPInfoRequest::CWUCreateZAPInfoRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Wuid(nilRemove),m_ESPIPAddress(nilRemove),m_ThorIPAddress(nilRemove),m_BuildVersion(nilRemove),m_ProblemDescription(nilRemove),m_WhatChanged(nilRemove),m_WhereSlow(nilRemove),m_Password(nilRemove),m_ZAPFileName(nilRemove),m_IncludeThorSlaveLog("on", nilRemove),m_ZAPPassword(nilRemove),m_SendEmail(0, nilRemove,false),m_AttachZAPReportToEmail(0, nilRemove,false),m_EmailFrom(nilRemove),m_EmailSubject(nilRemove),m_EmailBody(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCreateZAPInfoRequest::CWUCreateZAPInfoRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Wuid(nilRemove),m_ESPIPAddress(nilRemove),m_ThorIPAddress(nilRemove),m_BuildVersion(nilRemove),m_ProblemDescription(nilRemove),m_WhatChanged(nilRemove),m_WhereSlow(nilRemove),m_Password(nilRemove),m_ZAPFileName(nilRemove),m_IncludeThorSlaveLog("on", nilRemove),m_ZAPPassword(nilRemove),m_SendEmail(0, nilRemove,false),m_AttachZAPReportToEmail(0, nilRemove,false),m_EmailFrom(nilRemove),m_EmailSubject(nilRemove),m_EmailBody(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCreateZAPInfoRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ESPIPAddress\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ThorIPAddress\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BuildVersion\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ProblemDescription\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WhatChanged\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WhereSlow\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUCreateZAPInfoRequest","Password")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Password\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","ZAPFileName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ZAPFileName\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","IncludeThorSlaveLog")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"on\" name=\"IncludeThorSlaveLog\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","ZAPPassword")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ZAPPassword\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","SendEmail")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"SendEmail\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","AttachZAPReportToEmail")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AttachZAPReportToEmail\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","EmailFrom")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EmailFrom\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","EmailSubject")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EmailSubject\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUCreateZAPInfoRequest","EmailBody")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"EmailBody\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUCreateZAPInfoRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCreateZAPInfoRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUCreateZAPInfoRequest","Password",1.53);
	info.addDeprVersion("WUCreateZAPInfoRequest","Password",1.7);
	info.addMinVersion("WUCreateZAPInfoRequest","ZAPFileName",1.65);
	info.addMinVersion("WUCreateZAPInfoRequest","IncludeThorSlaveLog",1.57);
	info.addMinVersion("WUCreateZAPInfoRequest","ZAPPassword",1.7);
	info.addMinVersion("WUCreateZAPInfoRequest","SendEmail",1.73);
	info.addMinVersion("WUCreateZAPInfoRequest","AttachZAPReportToEmail",1.73);
	info.addMinVersion("WUCreateZAPInfoRequest","EmailFrom",1.73);
	info.addMinVersion("WUCreateZAPInfoRequest","EmailSubject",1.73);
	info.addMinVersion("WUCreateZAPInfoRequest","EmailBody",1.73);
}

StringBuffer &CWUCreateZAPInfoRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Wuid");
	form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ESPIPAddress");
	form.appendf("  <tr><td><b>ESPIPAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ThorIPAddress");
	form.appendf("  <tr><td><b>ThorIPAddress: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("BuildVersion");
	form.appendf("  <tr><td><b>BuildVersion: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ProblemDescription");
	form.appendf("  <tr><td><b>ProblemDescription: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WhatChanged");
	form.appendf("  <tr><td><b>WhatChanged: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WhereSlow");
	form.appendf("  <tr><td><b>WhereSlow: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUCreateZAPInfoRequest","Password")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Password");
		form.appendf("  <tr><td><b>Password: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","ZAPFileName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ZAPFileName");
		form.appendf("  <tr><td><b>ZAPFileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","IncludeThorSlaveLog")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("IncludeThorSlaveLog");
		form.appendf("  <tr><td><b>IncludeThorSlaveLog: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"on\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","ZAPPassword")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ZAPPassword");
		form.appendf("  <tr><td><b>ZAPPassword: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","SendEmail")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("SendEmail");
		
	form.appendf("  <tr><td><b>SendEmail? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","AttachZAPReportToEmail")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("AttachZAPReportToEmail");
		
	form.appendf("  <tr><td><b>AttachZAPReportToEmail? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","EmailFrom")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EmailFrom");
		form.appendf("  <tr><td><b>EmailFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","EmailSubject")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EmailSubject");
		form.appendf("  <tr><td><b>EmailSubject: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUCreateZAPInfoRequest","EmailBody")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("EmailBody");
		form.appendf("  <tr><td><b>EmailBody: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCreateZAPInfoRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCreateZAPInfoRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
	m_ESPIPAddress.marshall(rpc_resp, "ESPIPAddress", "", "", "");
	m_ThorIPAddress.marshall(rpc_resp, "ThorIPAddress", "", "", "");
	m_BuildVersion.marshall(rpc_resp, "BuildVersion", "", "", "");
	m_ProblemDescription.marshall(rpc_resp, "ProblemDescription", "", "", "");
	m_WhatChanged.marshall(rpc_resp, "WhatChanged", "", "", "");
	m_WhereSlow.marshall(rpc_resp, "WhereSlow", "", "", "");
	if ((clientVer==-1.0 || (clientVer>=1.53 && clientVer<1.7)))
		m_Password.marshall(rpc_resp, "Password", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.65))
		m_ZAPFileName.marshall(rpc_resp, "ZAPFileName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_IncludeThorSlaveLog.marshall(rpc_resp, "IncludeThorSlaveLog", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.7))
		m_ZAPPassword.marshall(rpc_resp, "ZAPPassword", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_SendEmail.marshall(rpc_resp, "SendEmail", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_AttachZAPReportToEmail.marshall(rpc_resp, "AttachZAPReportToEmail", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_EmailFrom.marshall(rpc_resp, "EmailFrom", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_EmailSubject.marshall(rpc_resp, "EmailSubject", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_EmailBody.marshall(rpc_resp, "EmailBody", "", "", "");
}


void CWUCreateZAPInfoRequest::copy(CWUCreateZAPInfoRequest &from)
{
	m_Wuid.copy(from.m_Wuid);
	m_ESPIPAddress.copy(from.m_ESPIPAddress);
	m_ThorIPAddress.copy(from.m_ThorIPAddress);
	m_BuildVersion.copy(from.m_BuildVersion);
	m_ProblemDescription.copy(from.m_ProblemDescription);
	m_WhatChanged.copy(from.m_WhatChanged);
	m_WhereSlow.copy(from.m_WhereSlow);
	m_Password.copy(from.m_Password);
	m_ZAPFileName.copy(from.m_ZAPFileName);
	m_IncludeThorSlaveLog.copy(from.m_IncludeThorSlaveLog);
	m_ZAPPassword.copy(from.m_ZAPPassword);
	m_SendEmail.copy(from.m_SendEmail);
	m_AttachZAPReportToEmail.copy(from.m_AttachZAPReportToEmail);
	m_EmailFrom.copy(from.m_EmailFrom);
	m_EmailSubject.copy(from.m_EmailSubject);
	m_EmailBody.copy(from.m_EmailBody);
}


void CWUCreateZAPInfoRequest::copy(IConstWUCreateZAPInfoRequest &ifrom)
{
	setWuid(ifrom.getWuid());
	setESPIPAddress(ifrom.getESPIPAddress());
	setThorIPAddress(ifrom.getThorIPAddress());
	setBuildVersion(ifrom.getBuildVersion());
	setProblemDescription(ifrom.getProblemDescription());
	setWhatChanged(ifrom.getWhatChanged());
	setWhereSlow(ifrom.getWhereSlow());
	setPassword(ifrom.getPassword());
	setZAPFileName(ifrom.getZAPFileName());
	setIncludeThorSlaveLog(ifrom.getIncludeThorSlaveLog());
	setZAPPassword(ifrom.getZAPPassword());
	setSendEmail(ifrom.getSendEmail());
	setAttachZAPReportToEmail(ifrom.getAttachZAPReportToEmail());
	setEmailFrom(ifrom.getEmailFrom());
	setEmailSubject(ifrom.getEmailSubject());
	setEmailBody(ifrom.getEmailBody());
}


void CWUCreateZAPInfoRequest::getAttributes(IProperties &attributes)
{
}


void CWUCreateZAPInfoRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
	m_ESPIPAddress.toStr(ctx, buffer, "ESPIPAddress", "", true, "", "");
	m_ThorIPAddress.toStr(ctx, buffer, "ThorIPAddress", "", true, "", "");
	m_BuildVersion.toStr(ctx, buffer, "BuildVersion", "", true, "", "");
	m_ProblemDescription.toStr(ctx, buffer, "ProblemDescription", "", true, "", "");
	m_WhatChanged.toStr(ctx, buffer, "WhatChanged", "", true, "", "");
	m_WhereSlow.toStr(ctx, buffer, "WhereSlow", "", true, "", "");
	if ((clientVer==-1.0 || (clientVer>=1.53 && clientVer<1.7)))
		m_Password.toStr(ctx, buffer, "Password", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.65))
		m_ZAPFileName.toStr(ctx, buffer, "ZAPFileName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.57))
		m_IncludeThorSlaveLog.toStr(ctx, buffer, "IncludeThorSlaveLog", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.7))
		m_ZAPPassword.toStr(ctx, buffer, "ZAPPassword", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_SendEmail.toStr(ctx, buffer, "SendEmail", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_AttachZAPReportToEmail.toStr(ctx, buffer, "AttachZAPReportToEmail", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_EmailFrom.toStr(ctx, buffer, "EmailFrom", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_EmailSubject.toStr(ctx, buffer, "EmailSubject", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.73))
		m_EmailBody.toStr(ctx, buffer, "EmailBody", "", true, "", "");
}


void CWUCreateZAPInfoRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCreateZAPInfoRequest::serializer(IEspContext* ctx, IConstWUCreateZAPInfoRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCreateZAPInfoRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Wuid
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	// field ESPIPAddress
	{
		const char* s = src.getESPIPAddress();
		if (s && *s)
		{
			buffer.append("<ESPIPAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ESPIPAddress>");
		}
	}
	// field ThorIPAddress
	{
		const char* s = src.getThorIPAddress();
		if (s && *s)
		{
			buffer.append("<ThorIPAddress>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ThorIPAddress>");
		}
	}
	// field BuildVersion
	{
		const char* s = src.getBuildVersion();
		if (s && *s)
		{
			buffer.append("<BuildVersion>");
			encodeUtf8XML(s,buffer);
			buffer.append("</BuildVersion>");
		}
	}
	// field ProblemDescription
	{
		const char* s = src.getProblemDescription();
		if (s && *s)
		{
			buffer.append("<ProblemDescription>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ProblemDescription>");
		}
	}
	// field WhatChanged
	{
		const char* s = src.getWhatChanged();
		if (s && *s)
		{
			buffer.append("<WhatChanged>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WhatChanged>");
		}
	}
	// field WhereSlow
	{
		const char* s = src.getWhereSlow();
		if (s && *s)
		{
			buffer.append("<WhereSlow>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WhereSlow>");
		}
	}
	// field Password
	if ((clientVer==-1.0 || (clientVer>=1.53 && clientVer<1.7)))
	{
		const char* s = src.getPassword();
		if (s && *s)
		{
			buffer.append("<Password>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Password>");
		}
	}
	// field ZAPFileName
	if ((clientVer==-1.0 || clientVer>=1.65))
	{
		const char* s = src.getZAPFileName();
		if (s && *s)
		{
			buffer.append("<ZAPFileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ZAPFileName>");
		}
	}
	// field IncludeThorSlaveLog
	if ((clientVer==-1.0 || clientVer>=1.57))
	{
		const char* s = src.getIncludeThorSlaveLog();
		if (s && *s)
		{
			buffer.append("<IncludeThorSlaveLog>");
			encodeUtf8XML(s,buffer);
			buffer.append("</IncludeThorSlaveLog>");
		}
	}
	// field ZAPPassword
	if ((clientVer==-1.0 || clientVer>=1.7))
	{
		const char* s = src.getZAPPassword();
		if (s && *s)
		{
			buffer.append("<ZAPPassword>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ZAPPassword>");
		}
	}
	// field SendEmail
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		bool b = src.getSendEmail();
		if (b)
			buffer.appendf("<SendEmail>1</SendEmail>");
	}
	// field AttachZAPReportToEmail
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		bool b = src.getAttachZAPReportToEmail();
		if (b)
			buffer.appendf("<AttachZAPReportToEmail>1</AttachZAPReportToEmail>");
	}
	// field EmailFrom
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		const char* s = src.getEmailFrom();
		if (s && *s)
		{
			buffer.append("<EmailFrom>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EmailFrom>");
		}
	}
	// field EmailSubject
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		const char* s = src.getEmailSubject();
		if (s && *s)
		{
			buffer.append("<EmailSubject>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EmailSubject>");
		}
	}
	// field EmailBody
	if ((clientVer==-1.0 || clientVer>=1.73))
	{
		const char* s = src.getEmailBody();
		if (s && *s)
		{
			buffer.append("<EmailBody>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EmailBody>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUCreateZAPInfoRequest>");
}

bool CWUCreateZAPInfoRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	hasValue |= m_ESPIPAddress.unmarshall(rpc_request, "ESPIPAddress", basepath);
	hasValue |= m_ThorIPAddress.unmarshall(rpc_request, "ThorIPAddress", basepath);
	hasValue |= m_BuildVersion.unmarshall(rpc_request, "BuildVersion", basepath);
	hasValue |= m_ProblemDescription.unmarshall(rpc_request, "ProblemDescription", basepath);
	hasValue |= m_WhatChanged.unmarshall(rpc_request, "WhatChanged", basepath);
	hasValue |= m_WhereSlow.unmarshall(rpc_request, "WhereSlow", basepath);
	hasValue |= m_Password.unmarshall(rpc_request, "Password", basepath);
	hasValue |= m_ZAPFileName.unmarshall(rpc_request, "ZAPFileName", basepath);
	hasValue |= m_IncludeThorSlaveLog.unmarshall(rpc_request, "IncludeThorSlaveLog", basepath);
	hasValue |= m_ZAPPassword.unmarshall(rpc_request, "ZAPPassword", basepath);
	hasValue |= m_SendEmail.unmarshall(rpc_request, "SendEmail", basepath);
	hasValue |= m_AttachZAPReportToEmail.unmarshall(rpc_request, "AttachZAPReportToEmail", basepath);
	hasValue |= m_EmailFrom.unmarshall(rpc_request, "EmailFrom", basepath);
	hasValue |= m_EmailSubject.unmarshall(rpc_request, "EmailSubject", basepath);
	hasValue |= m_EmailBody.unmarshall(rpc_request, "EmailBody", basepath);
	return hasValue;
}

bool CWUCreateZAPInfoRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	hasValue |= m_ESPIPAddress.unmarshall(ctx, soapval, "ESPIPAddress");
	hasValue |= m_ThorIPAddress.unmarshall(ctx, soapval, "ThorIPAddress");
	hasValue |= m_BuildVersion.unmarshall(ctx, soapval, "BuildVersion");
	hasValue |= m_ProblemDescription.unmarshall(ctx, soapval, "ProblemDescription");
	hasValue |= m_WhatChanged.unmarshall(ctx, soapval, "WhatChanged");
	hasValue |= m_WhereSlow.unmarshall(ctx, soapval, "WhereSlow");
	hasValue |= m_Password.unmarshall(ctx, soapval, "Password");
	hasValue |= m_ZAPFileName.unmarshall(ctx, soapval, "ZAPFileName");
	hasValue |= m_IncludeThorSlaveLog.unmarshall(ctx, soapval, "IncludeThorSlaveLog");
	hasValue |= m_ZAPPassword.unmarshall(ctx, soapval, "ZAPPassword");
	hasValue |= m_SendEmail.unmarshall(ctx, soapval, "SendEmail");
	hasValue |= m_AttachZAPReportToEmail.unmarshall(ctx, soapval, "AttachZAPReportToEmail");
	hasValue |= m_EmailFrom.unmarshall(ctx, soapval, "EmailFrom");
	hasValue |= m_EmailSubject.unmarshall(ctx, soapval, "EmailSubject");
	hasValue |= m_EmailBody.unmarshall(ctx, soapval, "EmailBody");
	return hasValue;
}

bool CWUCreateZAPInfoRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	hasValue |= m_ESPIPAddress.unmarshall(ctx, params, attachments, "ESPIPAddress", basepath);
	hasValue |= m_ThorIPAddress.unmarshall(ctx, params, attachments, "ThorIPAddress", basepath);
	hasValue |= m_BuildVersion.unmarshall(ctx, params, attachments, "BuildVersion", basepath);
	hasValue |= m_ProblemDescription.unmarshall(ctx, params, attachments, "ProblemDescription", basepath);
	hasValue |= m_WhatChanged.unmarshall(ctx, params, attachments, "WhatChanged", basepath);
	hasValue |= m_WhereSlow.unmarshall(ctx, params, attachments, "WhereSlow", basepath);
	hasValue |= m_Password.unmarshall(ctx, params, attachments, "Password", basepath);
	hasValue |= m_ZAPFileName.unmarshall(ctx, params, attachments, "ZAPFileName", basepath);
	hasValue |= m_IncludeThorSlaveLog.unmarshall(ctx, params, attachments, "IncludeThorSlaveLog", basepath);
	hasValue |= m_ZAPPassword.unmarshall(ctx, params, attachments, "ZAPPassword", basepath);
	hasValue |= m_SendEmail.unmarshall(ctx, params, attachments, "SendEmail", basepath);
	hasValue |= m_AttachZAPReportToEmail.unmarshall(ctx, params, attachments, "AttachZAPReportToEmail", basepath);
	hasValue |= m_EmailFrom.unmarshall(ctx, params, attachments, "EmailFrom", basepath);
	hasValue |= m_EmailSubject.unmarshall(ctx, params, attachments, "EmailSubject", basepath);
	hasValue |= m_EmailBody.unmarshall(ctx, params, attachments, "EmailBody", basepath);
	return hasValue;
}

const char * CWUCreateZAPInfoRequest::getWuid() { return m_Wuid.query();}
const char * CWUCreateZAPInfoRequest::getESPIPAddress() { return m_ESPIPAddress.query();}
const char * CWUCreateZAPInfoRequest::getThorIPAddress() { return m_ThorIPAddress.query();}
const char * CWUCreateZAPInfoRequest::getBuildVersion() { return m_BuildVersion.query();}
const char * CWUCreateZAPInfoRequest::getProblemDescription() { return m_ProblemDescription.query();}
const char * CWUCreateZAPInfoRequest::getWhatChanged() { return m_WhatChanged.query();}
const char * CWUCreateZAPInfoRequest::getWhereSlow() { return m_WhereSlow.query();}
const char * CWUCreateZAPInfoRequest::getPassword() { return m_Password.query();}
const char * CWUCreateZAPInfoRequest::getZAPFileName() { return m_ZAPFileName.query();}
const char * CWUCreateZAPInfoRequest::getIncludeThorSlaveLog() { return m_IncludeThorSlaveLog.query();}
const char * CWUCreateZAPInfoRequest::getZAPPassword() { return m_ZAPPassword.query();}
bool CWUCreateZAPInfoRequest::getSendEmail_isNull(){return m_SendEmail.is_nil();}
bool CWUCreateZAPInfoRequest::getSendEmail() { return m_SendEmail;}
bool CWUCreateZAPInfoRequest::getAttachZAPReportToEmail_isNull(){return m_AttachZAPReportToEmail.is_nil();}
bool CWUCreateZAPInfoRequest::getAttachZAPReportToEmail() { return m_AttachZAPReportToEmail;}
const char * CWUCreateZAPInfoRequest::getEmailFrom() { return m_EmailFrom.query();}
const char * CWUCreateZAPInfoRequest::getEmailSubject() { return m_EmailSubject.query();}
const char * CWUCreateZAPInfoRequest::getEmailBody() { return m_EmailBody.query();}
void CWUCreateZAPInfoRequest::setWuid(const char * val){ m_Wuid.set(val); }
void CWUCreateZAPInfoRequest::setESPIPAddress(const char * val){ m_ESPIPAddress.set(val); }
void CWUCreateZAPInfoRequest::setThorIPAddress(const char * val){ m_ThorIPAddress.set(val); }
void CWUCreateZAPInfoRequest::setBuildVersion(const char * val){ m_BuildVersion.set(val); }
void CWUCreateZAPInfoRequest::setProblemDescription(const char * val){ m_ProblemDescription.set(val); }
void CWUCreateZAPInfoRequest::setWhatChanged(const char * val){ m_WhatChanged.set(val); }
void CWUCreateZAPInfoRequest::setWhereSlow(const char * val){ m_WhereSlow.set(val); }
void CWUCreateZAPInfoRequest::setPassword(const char * val){ m_Password.set(val); }
void CWUCreateZAPInfoRequest::setZAPFileName(const char * val){ m_ZAPFileName.set(val); }
void CWUCreateZAPInfoRequest::setIncludeThorSlaveLog(const char * val){ m_IncludeThorSlaveLog.set(val); }
void CWUCreateZAPInfoRequest::setZAPPassword(const char * val){ m_ZAPPassword.set(val); }
void CWUCreateZAPInfoRequest::setSendEmail_null(){ m_SendEmail.Nil(); }void CWUCreateZAPInfoRequest::setSendEmail(bool val){ m_SendEmail=val; }
void CWUCreateZAPInfoRequest::setAttachZAPReportToEmail_null(){ m_AttachZAPReportToEmail.Nil(); }void CWUCreateZAPInfoRequest::setAttachZAPReportToEmail(bool val){ m_AttachZAPReportToEmail=val; }
void CWUCreateZAPInfoRequest::setEmailFrom(const char * val){ m_EmailFrom.set(val); }
void CWUCreateZAPInfoRequest::setEmailSubject(const char * val){ m_EmailSubject.set(val); }
void CWUCreateZAPInfoRequest::setEmailBody(const char * val){ m_EmailBody.set(val); }
extern "C"  IEspWUCreateZAPInfoRequest *createWUCreateZAPInfoRequest(const char *serv){return ((IEspWUCreateZAPInfoRequest *)new CWUCreateZAPInfoRequest(serv));}
extern "C"  IClientWUCreateZAPInfoRequest *createClientWUCreateZAPInfoRequest(const char *serv){return ((IClientWUCreateZAPInfoRequest *)new CWUCreateZAPInfoRequest(serv));}

//=======================================================
// class CWUCreateZAPInfoResponse Implementation
//=======================================================

CWUCreateZAPInfoResponse::CWUCreateZAPInfoResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_thefile(nilIgnore),m_ZAPFileName(nilIgnore),m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCreateZAPInfoResponse::CWUCreateZAPInfoResponse(const char *serviceName, const char *bc)
	: m_thefile(nilIgnore),m_ZAPFileName(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoResponse");
}

CWUCreateZAPInfoResponse::CWUCreateZAPInfoResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_thefile(nilIgnore),m_ZAPFileName(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCreateZAPInfoResponse::CWUCreateZAPInfoResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_thefile(nilIgnore),m_ZAPFileName(nilIgnore), m_thefile_mimetype("application/octet-stream")
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCreateZAPInfoResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCreateZAPInfoResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"thefile\" type=\"xsd:base64Binary\"/>\n");
		if (!context.suppressed("WUCreateZAPInfoResponse","ZAPFileName")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"ZAPFileName\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUCreateZAPInfoResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCreateZAPInfoResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUCreateZAPInfoResponse","ZAPFileName",1.7);
}

StringBuffer &CWUCreateZAPInfoResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("thefile");
	form.appendf("  <tr><td><b>thefile: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUCreateZAPInfoResponse","ZAPFileName")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("ZAPFileName");
		form.appendf("  <tr><td><b>ZAPFileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCreateZAPInfoResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCreateZAPInfoResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_thefile.marshall(rpc_resp, "thefile", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.7))
			m_ZAPFileName.marshall(rpc_resp, "ZAPFileName", "", "", "");
	}
}


void CWUCreateZAPInfoResponse::copy(CWUCreateZAPInfoResponse &from)
{
	m_thefile.copy(from.m_thefile);
	m_ZAPFileName.copy(from.m_ZAPFileName);
}


void CWUCreateZAPInfoResponse::copy(IConstWUCreateZAPInfoResponse &ifrom)
{
	setThefile(ifrom.getThefile());
	setZAPFileName(ifrom.getZAPFileName());
}


void CWUCreateZAPInfoResponse::getAttributes(IProperties &attributes)
{
}


void CWUCreateZAPInfoResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_thefile.toStr(ctx, buffer, "thefile", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.7))
			m_ZAPFileName.toStr(ctx, buffer, "ZAPFileName", "", true, "", "");
	}
}


void CWUCreateZAPInfoResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCreateZAPInfoResponse::serializer(IEspContext* ctx, IConstWUCreateZAPInfoResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCreateZAPInfoResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field thefile
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getThefile().toByteArray(), src.getThefile().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<thefile>%s</thefile>",tmp.str());
	}
	// field ZAPFileName
	if ((clientVer==-1.0 || clientVer>=1.7))
	{
		const char* s = src.getZAPFileName();
		if (s && *s)
		{
			buffer.append("<ZAPFileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ZAPFileName>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUCreateZAPInfoResponse>");
}

void CWUCreateZAPInfoResponse::appendContent(IEspContext* ctx, MemoryBuffer& buffer, StringBuffer &mimetype)
{
	buffer.clear().append(m_thefile.getValue());
	mimetype.set(m_thefile_mimetype.str());
}

bool CWUCreateZAPInfoResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_thefile.unmarshall(rpc_request, "thefile", basepath);
		hasValue |= m_ZAPFileName.unmarshall(rpc_request, "ZAPFileName", basepath);
	}
	return hasValue;
}

bool CWUCreateZAPInfoResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_thefile.unmarshall(ctx, soapval, "thefile");
	hasValue |= m_ZAPFileName.unmarshall(ctx, soapval, "ZAPFileName");
	return hasValue;
}

bool CWUCreateZAPInfoResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_thefile.unmarshall(ctx, params, attachments, "thefile", basepath);
	hasValue |= m_ZAPFileName.unmarshall(ctx, params, attachments, "ZAPFileName", basepath);
	return hasValue;
}

const char *CWUCreateZAPInfoResponse::getThefile_mimetype(){ return m_thefile_mimetype.str(); }
const MemoryBuffer & CWUCreateZAPInfoResponse::getThefile() { return m_thefile.getValue();}
const char * CWUCreateZAPInfoResponse::getZAPFileName() { return m_ZAPFileName.query();}
void CWUCreateZAPInfoResponse::setThefile_mimetype(const char *  val){ m_thefile_mimetype.set(val); }
void CWUCreateZAPInfoResponse::setThefile(const MemoryBuffer & val){ m_thefile->clear().append(val); }
void CWUCreateZAPInfoResponse::setZAPFileName(const char * val){ m_ZAPFileName.set(val); }
extern "C"  IEspWUCreateZAPInfoResponse *createWUCreateZAPInfoResponse(const char *serv){return ((IEspWUCreateZAPInfoResponse *)new CWUCreateZAPInfoResponse(serv));}
extern "C"  IClientWUCreateZAPInfoResponse *createClientWUCreateZAPInfoResponse(const char *serv){return ((IClientWUCreateZAPInfoResponse *)new CWUCreateZAPInfoResponse(serv));}

//=======================================================
// class CWUCheckFeaturesRequest Implementation
//=======================================================

CWUCheckFeaturesRequest::CWUCheckFeaturesRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCheckFeaturesRequest::CWUCheckFeaturesRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesRequest");
}

CWUCheckFeaturesRequest::CWUCheckFeaturesRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCheckFeaturesRequest::CWUCheckFeaturesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCheckFeaturesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWUCheckFeaturesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCheckFeaturesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUCheckFeaturesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCheckFeaturesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCheckFeaturesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWUCheckFeaturesRequest::copy(CWUCheckFeaturesRequest &from)
{
}


void CWUCheckFeaturesRequest::copy(IConstWUCheckFeaturesRequest &ifrom)
{
}


void CWUCheckFeaturesRequest::getAttributes(IProperties &attributes)
{
}


void CWUCheckFeaturesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWUCheckFeaturesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCheckFeaturesRequest::serializer(IEspContext* ctx, IConstWUCheckFeaturesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCheckFeaturesRequest>");
	if (keepRootTag)
		buffer.append("</WUCheckFeaturesRequest>");
}

bool CWUCheckFeaturesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWUCheckFeaturesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWUCheckFeaturesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWUCheckFeaturesRequest *createWUCheckFeaturesRequest(const char *serv){return ((IEspWUCheckFeaturesRequest *)new CWUCheckFeaturesRequest(serv));}
extern "C"  IClientWUCheckFeaturesRequest *createClientWUCheckFeaturesRequest(const char *serv){return ((IClientWUCheckFeaturesRequest *)new CWUCheckFeaturesRequest(serv));}

//=======================================================
// class CDeploymentFeatures Implementation
//=======================================================

CDeploymentFeatures::CDeploymentFeatures(const char *serviceName, IRpcMessageBinding *init)
	: m_UseCompression(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeploymentFeatures");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CDeploymentFeatures::CDeploymentFeatures(const char *serviceName, const char *bc)
	: m_UseCompression(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("DeploymentFeatures");
}

StringBuffer &CDeploymentFeatures::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"UseCompression\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CDeploymentFeatures::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CDeploymentFeatures::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CDeploymentFeatures::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UseCompression");
	
	form.appendf("  <tr><td><b>UseCompression? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CDeploymentFeatures::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CDeploymentFeatures::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_UseCompression.marshall(rpc_resp, "UseCompression", "", "", "");
}


void CDeploymentFeatures::copy(CDeploymentFeatures &from)
{
	m_UseCompression.copy(from.m_UseCompression);
}


void CDeploymentFeatures::copy(IConstDeploymentFeatures &ifrom)
{
	setUseCompression(ifrom.getUseCompression());
}


void CDeploymentFeatures::getAttributes(IProperties &attributes)
{
}


void CDeploymentFeatures::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_UseCompression.toStr(ctx, buffer, "UseCompression", "", true, "", "");
}


void CDeploymentFeatures::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CDeploymentFeatures::serializer(IEspContext* ctx, IConstDeploymentFeatures &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<DeploymentFeatures>");
	// field UseCompression
	{
		bool b = src.getUseCompression();
		if (b)
			buffer.appendf("<UseCompression>1</UseCompression>");
	}
	if (keepRootTag)
		buffer.append("</DeploymentFeatures>");
}

bool CDeploymentFeatures::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_UseCompression.unmarshall(rpc_request, "UseCompression", basepath);
	return hasValue;
}

bool CDeploymentFeatures::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_UseCompression.unmarshall(ctx, soapval, "UseCompression");
	return hasValue;
}

bool CDeploymentFeatures::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_UseCompression.unmarshall(ctx, params, attachments, "UseCompression", basepath);
	return hasValue;
}

bool CDeploymentFeatures::getUseCompression() { return m_UseCompression;}
void CDeploymentFeatures::setUseCompression(bool val){ m_UseCompression=val; }
extern "C"  IEspDeploymentFeatures *createDeploymentFeatures(const char *serv, const char *msgname){return ((IEspDeploymentFeatures *)new CDeploymentFeatures(serv /*, msgname*/));}
extern "C"  IClientDeploymentFeatures *createClientDeploymentFeatures(const char *serv, const char *msgname){return ((IClientDeploymentFeatures *)new CDeploymentFeatures(serv /*, msgname*/));}

//=======================================================
// class CWUCheckFeaturesResponse Implementation
//=======================================================

CWUCheckFeaturesResponse::CWUCheckFeaturesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_BuildVersionMajor(nilIgnore),m_BuildVersionMinor(nilIgnore),m_BuildVersionPoint(nilIgnore),m_maxRequestEntityLength(nilIgnore),m_Deployment(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUCheckFeaturesResponse::CWUCheckFeaturesResponse(const char *serviceName, const char *bc)
	: m_BuildVersionMajor(nilIgnore),m_BuildVersionMinor(nilIgnore),m_BuildVersionPoint(nilIgnore),m_maxRequestEntityLength(nilIgnore),m_Deployment(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesResponse");
}

CWUCheckFeaturesResponse::CWUCheckFeaturesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_BuildVersionMajor(nilIgnore),m_BuildVersionMinor(nilIgnore),m_BuildVersionPoint(nilIgnore),m_maxRequestEntityLength(nilIgnore),m_Deployment(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUCheckFeaturesResponse::CWUCheckFeaturesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_BuildVersionMajor(nilIgnore),m_BuildVersionMinor(nilIgnore),m_BuildVersionPoint(nilIgnore),m_maxRequestEntityLength(nilIgnore),m_Deployment(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUCheckFeaturesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUCheckFeaturesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"BuildVersionMajor\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BuildVersionMinor\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"BuildVersionPoint\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"maxRequestEntityLength\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Deployment\" type=\"tns:DeploymentFeatures\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CDeploymentFeatures::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUCheckFeaturesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUCheckFeaturesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("DeploymentFeatures"))
	{
		added.setValue("DeploymentFeatures",1);
		CDeploymentFeatures::getMapInfo(info,added);
	}
}

StringBuffer &CWUCheckFeaturesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("BuildVersionMajor");
	form.appendf("  <tr><td><b>BuildVersionMajor: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("BuildVersionMinor");
	form.appendf("  <tr><td><b>BuildVersionMinor: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("BuildVersionPoint");
	form.appendf("  <tr><td><b>BuildVersionPoint: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("maxRequestEntityLength");
	form.appendf("  <tr><td><b>maxRequestEntityLength: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Deployment");
	form.append("<tr>").append("<td><b>Deployment: </b></td><td><hr/>");
	CDeploymentFeatures::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUCheckFeaturesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUCheckFeaturesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_BuildVersionMajor.marshall(rpc_resp, "BuildVersionMajor", "", "", "");
		m_BuildVersionMinor.marshall(rpc_resp, "BuildVersionMinor", "", "", "");
		m_BuildVersionPoint.marshall(rpc_resp, "BuildVersionPoint", "", "", "");
		m_maxRequestEntityLength.marshall(rpc_resp, "maxRequestEntityLength", "", "", "");
		m_Deployment.marshall(rpc_resp, "Deployment", "", "", "");
	}
}


void CWUCheckFeaturesResponse::copy(CWUCheckFeaturesResponse &from)
{
	m_BuildVersionMajor.copy(from.m_BuildVersionMajor);
	m_BuildVersionMinor.copy(from.m_BuildVersionMinor);
	m_BuildVersionPoint.copy(from.m_BuildVersionPoint);
	m_maxRequestEntityLength.copy(from.m_maxRequestEntityLength);
	m_Deployment.copy(from.m_Deployment);
}


void CWUCheckFeaturesResponse::copy(IConstWUCheckFeaturesResponse &ifrom)
{
	setBuildVersionMajor(ifrom.getBuildVersionMajor());
	setBuildVersionMinor(ifrom.getBuildVersionMinor());
	setBuildVersionPoint(ifrom.getBuildVersionPoint());
	setMaxRequestEntityLength(ifrom.getMaxRequestEntityLength());
	setDeployment(ifrom.getDeployment());
}


void CWUCheckFeaturesResponse::getAttributes(IProperties &attributes)
{
}


void CWUCheckFeaturesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_BuildVersionMajor.toStr(ctx, buffer, "BuildVersionMajor", "", true, "", "");
		m_BuildVersionMinor.toStr(ctx, buffer, "BuildVersionMinor", "", true, "", "");
		m_BuildVersionPoint.toStr(ctx, buffer, "BuildVersionPoint", "", true, "", "");
		m_maxRequestEntityLength.toStr(ctx, buffer, "maxRequestEntityLength", "", true, "", "");
		m_Deployment.toStr(ctx, buffer, "Deployment", "", false, "", "");
	}
}


void CWUCheckFeaturesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUCheckFeaturesResponse::serializer(IEspContext* ctx, IConstWUCheckFeaturesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUCheckFeaturesResponse>");
	// field BuildVersionMajor
	{
		int n = src.getBuildVersionMajor();
		if (n)
			buffer.appendf("<BuildVersionMajor>%d</BuildVersionMajor>", n);
	}
	// field BuildVersionMinor
	{
		int n = src.getBuildVersionMinor();
		if (n)
			buffer.appendf("<BuildVersionMinor>%d</BuildVersionMinor>", n);
	}
	// field BuildVersionPoint
	{
		int n = src.getBuildVersionPoint();
		if (n)
			buffer.appendf("<BuildVersionPoint>%d</BuildVersionPoint>", n);
	}
	// field maxRequestEntityLength
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=MaxRequestEntityLength
		buffer.append("<maxRequestEntityLength>");
		buffer.append(src.getMaxRequestEntityLength());
		buffer.append("</maxRequestEntityLength>");
	}
	// field Deployment
	{
		StringBuffer tmp;
		CDeploymentFeatures::serializer(ctx,src.getDeployment(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<Deployment>%s</Deployment>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUCheckFeaturesResponse>");
}

bool CWUCheckFeaturesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_BuildVersionMajor.unmarshall(rpc_request, "BuildVersionMajor", basepath);
		hasValue |= m_BuildVersionMinor.unmarshall(rpc_request, "BuildVersionMinor", basepath);
		hasValue |= m_BuildVersionPoint.unmarshall(rpc_request, "BuildVersionPoint", basepath);
		hasValue |= m_maxRequestEntityLength.unmarshall(rpc_request, "maxRequestEntityLength", basepath);
		hasValue |= m_Deployment.unmarshall(rpc_request, "Deployment", basepath);
	}
	return hasValue;
}

bool CWUCheckFeaturesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_BuildVersionMajor.unmarshall(ctx, soapval, "BuildVersionMajor");
	hasValue |= m_BuildVersionMinor.unmarshall(ctx, soapval, "BuildVersionMinor");
	hasValue |= m_BuildVersionPoint.unmarshall(ctx, soapval, "BuildVersionPoint");
	hasValue |= m_maxRequestEntityLength.unmarshall(ctx, soapval, "maxRequestEntityLength");
	hasValue |= m_Deployment.unmarshall(ctx, soapval, "Deployment");
	return hasValue;
}

bool CWUCheckFeaturesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_BuildVersionMajor.unmarshall(ctx, params, attachments, "BuildVersionMajor", basepath);
	hasValue |= m_BuildVersionMinor.unmarshall(ctx, params, attachments, "BuildVersionMinor", basepath);
	hasValue |= m_BuildVersionPoint.unmarshall(ctx, params, attachments, "BuildVersionPoint", basepath);
	hasValue |= m_maxRequestEntityLength.unmarshall(ctx, params, attachments, "maxRequestEntityLength", basepath);
	hasValue |= m_Deployment.unmarshall(ctx, params, attachments, "Deployment", basepath);
	return hasValue;
}

int CWUCheckFeaturesResponse::getBuildVersionMajor() { return m_BuildVersionMajor;}
int CWUCheckFeaturesResponse::getBuildVersionMinor() { return m_BuildVersionMinor;}
int CWUCheckFeaturesResponse::getBuildVersionPoint() { return m_BuildVersionPoint;}
unsigned int CWUCheckFeaturesResponse::getMaxRequestEntityLength() { return m_maxRequestEntityLength;}
IConstDeploymentFeatures & CWUCheckFeaturesResponse::getDeployment() { return (IConstDeploymentFeatures &) m_Deployment.getValue();}
void CWUCheckFeaturesResponse::setBuildVersionMajor(int val){ m_BuildVersionMajor=val; }
void CWUCheckFeaturesResponse::setBuildVersionMinor(int val){ m_BuildVersionMinor=val; }
void CWUCheckFeaturesResponse::setBuildVersionPoint(int val){ m_BuildVersionPoint=val; }
void CWUCheckFeaturesResponse::setMaxRequestEntityLength(unsigned int val){ m_maxRequestEntityLength=val; }
IEspDeploymentFeatures & CWUCheckFeaturesResponse::updateDeployment(){ return (IEspDeploymentFeatures &) m_Deployment.getValue(); }
void CWUCheckFeaturesResponse::setDeployment(IConstDeploymentFeatures &ifrom){ m_Deployment.copy(ifrom); }
extern "C"  IEspWUCheckFeaturesResponse *createWUCheckFeaturesResponse(const char *serv){return ((IEspWUCheckFeaturesResponse *)new CWUCheckFeaturesResponse(serv));}
extern "C"  IClientWUCheckFeaturesResponse *createClientWUCheckFeaturesResponse(const char *serv){return ((IClientWUCheckFeaturesResponse *)new CWUCheckFeaturesResponse(serv));}

//=======================================================
// class CWUStatisticItem Implementation
//=======================================================

CWUStatisticItem::CWUStatisticItem(const char *serviceName, IRpcMessageBinding *init)
	: m_Creator(nilRemove),m_CreatorType(nilRemove),m_Scope(nilRemove),m_ScopeType(nilRemove),m_Description(nilRemove),m_TimeStamp(nilRemove),m_Measure(nilRemove),m_Kind(nilRemove),m_Value(nilRemove),m_RawValue(nilRemove),m_Count(nilRemove),m_Max(nilRemove),m_Wuid(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUStatisticItem");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUStatisticItem::CWUStatisticItem(const char *serviceName, const char *bc)
	: m_Creator(nilRemove),m_CreatorType(nilRemove),m_Scope(nilRemove),m_ScopeType(nilRemove),m_Description(nilRemove),m_TimeStamp(nilRemove),m_Measure(nilRemove),m_Kind(nilRemove),m_Value(nilRemove),m_RawValue(nilRemove),m_Count(nilRemove),m_Max(nilRemove),m_Wuid(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUStatisticItem");
}

StringBuffer &CWUStatisticItem::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Creator\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CreatorType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scope\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Description\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"TimeStamp\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Measure\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Kind\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Value\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RawValue\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Count\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Max\" type=\"xsd:long\"/>\n");
		if (!context.suppressed("WUStatisticItem","Wuid")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Wuid\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUStatisticItem::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUStatisticItem::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUStatisticItem","Wuid",1.62);
}

StringBuffer &CWUStatisticItem::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Creator");
	form.appendf("  <tr><td><b>Creator: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CreatorType");
	form.appendf("  <tr><td><b>CreatorType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scope");
	form.appendf("  <tr><td><b>Scope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeType");
	form.appendf("  <tr><td><b>ScopeType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Description");
	form.appendf("  <tr><td><b>Description: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("TimeStamp");
	form.appendf("  <tr><td><b>TimeStamp: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Measure");
	form.appendf("  <tr><td><b>Measure: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Kind");
	form.appendf("  <tr><td><b>Kind: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Value");
	form.appendf("  <tr><td><b>Value: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RawValue");
	form.appendf("  <tr><td><b>RawValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Count");
	form.appendf("  <tr><td><b>Count: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Max");
	form.appendf("  <tr><td><b>Max: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUStatisticItem","Wuid")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Wuid");
		form.appendf("  <tr><td><b>Wuid: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUStatisticItem::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUStatisticItem::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Creator.marshall(rpc_resp, "Creator", "", "", "");
	m_CreatorType.marshall(rpc_resp, "CreatorType", "", "", "");
	m_Scope.marshall(rpc_resp, "Scope", "", "", "");
	m_ScopeType.marshall(rpc_resp, "ScopeType", "", "", "");
	m_Description.marshall(rpc_resp, "Description", "", "", "");
	m_TimeStamp.marshall(rpc_resp, "TimeStamp", "", "", "");
	m_Measure.marshall(rpc_resp, "Measure", "", "", "");
	m_Kind.marshall(rpc_resp, "Kind", "", "", "");
	m_Value.marshall(rpc_resp, "Value", "", "", "");
	m_RawValue.marshall(rpc_resp, "RawValue", "", "", "");
	m_Count.marshall(rpc_resp, "Count", "", "", "");
	m_Max.marshall(rpc_resp, "Max", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_Wuid.marshall(rpc_resp, "Wuid", "", "", "");
}


void CWUStatisticItem::copy(CWUStatisticItem &from)
{
	m_Creator.copy(from.m_Creator);
	m_CreatorType.copy(from.m_CreatorType);
	m_Scope.copy(from.m_Scope);
	m_ScopeType.copy(from.m_ScopeType);
	m_Description.copy(from.m_Description);
	m_TimeStamp.copy(from.m_TimeStamp);
	m_Measure.copy(from.m_Measure);
	m_Kind.copy(from.m_Kind);
	m_Value.copy(from.m_Value);
	m_RawValue.copy(from.m_RawValue);
	m_Count.copy(from.m_Count);
	m_Max.copy(from.m_Max);
	m_Wuid.copy(from.m_Wuid);
}


void CWUStatisticItem::copy(IConstWUStatisticItem &ifrom)
{
	setCreator(ifrom.getCreator());
	setCreatorType(ifrom.getCreatorType());
	setScope(ifrom.getScope());
	setScopeType(ifrom.getScopeType());
	setDescription(ifrom.getDescription());
	setTimeStamp(ifrom.getTimeStamp());
	setMeasure(ifrom.getMeasure());
	setKind(ifrom.getKind());
	setValue(ifrom.getValue());
	setRawValue(ifrom.getRawValue());
	setCount(ifrom.getCount());
	setMax(ifrom.getMax());
	setWuid(ifrom.getWuid());
}


void CWUStatisticItem::getAttributes(IProperties &attributes)
{
}


void CWUStatisticItem::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_Creator.toStr(ctx, buffer, "Creator", "", true, "", "");
	m_CreatorType.toStr(ctx, buffer, "CreatorType", "", true, "", "");
	m_Scope.toStr(ctx, buffer, "Scope", "", true, "", "");
	m_ScopeType.toStr(ctx, buffer, "ScopeType", "", true, "", "");
	m_Description.toStr(ctx, buffer, "Description", "", true, "", "");
	m_TimeStamp.toStr(ctx, buffer, "TimeStamp", "", true, "", "");
	m_Measure.toStr(ctx, buffer, "Measure", "", true, "", "");
	m_Kind.toStr(ctx, buffer, "Kind", "", true, "", "");
	m_Value.toStr(ctx, buffer, "Value", "", true, "", "");
	m_RawValue.toStr(ctx, buffer, "RawValue", "", true, "", "");
	m_Count.toStr(ctx, buffer, "Count", "", true, "", "");
	m_Max.toStr(ctx, buffer, "Max", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_Wuid.toStr(ctx, buffer, "Wuid", "", true, "", "");
}


void CWUStatisticItem::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUStatisticItem::serializer(IEspContext* ctx, IConstWUStatisticItem &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUStatisticItem>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Creator
	{
		const char* s = src.getCreator();
		if (s && *s)
		{
			buffer.append("<Creator>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Creator>");
		}
	}
	// field CreatorType
	{
		const char* s = src.getCreatorType();
		if (s && *s)
		{
			buffer.append("<CreatorType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CreatorType>");
		}
	}
	// field Scope
	{
		const char* s = src.getScope();
		if (s && *s)
		{
			buffer.append("<Scope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Scope>");
		}
	}
	// field ScopeType
	{
		const char* s = src.getScopeType();
		if (s && *s)
		{
			buffer.append("<ScopeType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ScopeType>");
		}
	}
	// field Description
	{
		const char* s = src.getDescription();
		if (s && *s)
		{
			buffer.append("<Description>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Description>");
		}
	}
	// field TimeStamp
	{
		const char* s = src.getTimeStamp();
		if (s && *s)
		{
			buffer.append("<TimeStamp>");
			encodeUtf8XML(s,buffer);
			buffer.append("</TimeStamp>");
		}
	}
	// field Measure
	{
		const char* s = src.getMeasure();
		if (s && *s)
		{
			buffer.append("<Measure>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Measure>");
		}
	}
	// field Kind
	{
		const char* s = src.getKind();
		if (s && *s)
		{
			buffer.append("<Kind>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Kind>");
		}
	}
	// field Value
	{
		const char* s = src.getValue();
		if (s && *s)
		{
			buffer.append("<Value>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Value>");
		}
	}
	// field RawValue
	{
		//*** default kind: TK_INT; type=int64, name=RawValue
		buffer.append("<RawValue>");
		buffer.append(src.getRawValue());
		buffer.append("</RawValue>");
	}
	// field Count
	{
		//*** default kind: TK_INT; type=int64, name=Count
		buffer.append("<Count>");
		buffer.append(src.getCount());
		buffer.append("</Count>");
	}
	// field Max
	{
		//*** default kind: TK_INT; type=int64, name=Max
		buffer.append("<Max>");
		buffer.append(src.getMax());
		buffer.append("</Max>");
	}
	// field Wuid
	if ((clientVer==-1.0 || clientVer>=1.62))
	{
		const char* s = src.getWuid();
		if (s && *s)
		{
			buffer.append("<Wuid>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Wuid>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUStatisticItem>");
}

bool CWUStatisticItem::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Creator.unmarshall(rpc_request, "Creator", basepath);
	hasValue |= m_CreatorType.unmarshall(rpc_request, "CreatorType", basepath);
	hasValue |= m_Scope.unmarshall(rpc_request, "Scope", basepath);
	hasValue |= m_ScopeType.unmarshall(rpc_request, "ScopeType", basepath);
	hasValue |= m_Description.unmarshall(rpc_request, "Description", basepath);
	hasValue |= m_TimeStamp.unmarshall(rpc_request, "TimeStamp", basepath);
	hasValue |= m_Measure.unmarshall(rpc_request, "Measure", basepath);
	hasValue |= m_Kind.unmarshall(rpc_request, "Kind", basepath);
	hasValue |= m_Value.unmarshall(rpc_request, "Value", basepath);
	hasValue |= m_RawValue.unmarshall(rpc_request, "RawValue", basepath);
	hasValue |= m_Count.unmarshall(rpc_request, "Count", basepath);
	hasValue |= m_Max.unmarshall(rpc_request, "Max", basepath);
	hasValue |= m_Wuid.unmarshall(rpc_request, "Wuid", basepath);
	return hasValue;
}

bool CWUStatisticItem::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Creator.unmarshall(ctx, soapval, "Creator");
	hasValue |= m_CreatorType.unmarshall(ctx, soapval, "CreatorType");
	hasValue |= m_Scope.unmarshall(ctx, soapval, "Scope");
	hasValue |= m_ScopeType.unmarshall(ctx, soapval, "ScopeType");
	hasValue |= m_Description.unmarshall(ctx, soapval, "Description");
	hasValue |= m_TimeStamp.unmarshall(ctx, soapval, "TimeStamp");
	hasValue |= m_Measure.unmarshall(ctx, soapval, "Measure");
	hasValue |= m_Kind.unmarshall(ctx, soapval, "Kind");
	hasValue |= m_Value.unmarshall(ctx, soapval, "Value");
	hasValue |= m_RawValue.unmarshall(ctx, soapval, "RawValue");
	hasValue |= m_Count.unmarshall(ctx, soapval, "Count");
	hasValue |= m_Max.unmarshall(ctx, soapval, "Max");
	hasValue |= m_Wuid.unmarshall(ctx, soapval, "Wuid");
	return hasValue;
}

bool CWUStatisticItem::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Creator.unmarshall(ctx, params, attachments, "Creator", basepath);
	hasValue |= m_CreatorType.unmarshall(ctx, params, attachments, "CreatorType", basepath);
	hasValue |= m_Scope.unmarshall(ctx, params, attachments, "Scope", basepath);
	hasValue |= m_ScopeType.unmarshall(ctx, params, attachments, "ScopeType", basepath);
	hasValue |= m_Description.unmarshall(ctx, params, attachments, "Description", basepath);
	hasValue |= m_TimeStamp.unmarshall(ctx, params, attachments, "TimeStamp", basepath);
	hasValue |= m_Measure.unmarshall(ctx, params, attachments, "Measure", basepath);
	hasValue |= m_Kind.unmarshall(ctx, params, attachments, "Kind", basepath);
	hasValue |= m_Value.unmarshall(ctx, params, attachments, "Value", basepath);
	hasValue |= m_RawValue.unmarshall(ctx, params, attachments, "RawValue", basepath);
	hasValue |= m_Count.unmarshall(ctx, params, attachments, "Count", basepath);
	hasValue |= m_Max.unmarshall(ctx, params, attachments, "Max", basepath);
	hasValue |= m_Wuid.unmarshall(ctx, params, attachments, "Wuid", basepath);
	return hasValue;
}

const char * CWUStatisticItem::getCreator() { return m_Creator.query();}
const char * CWUStatisticItem::getCreatorType() { return m_CreatorType.query();}
const char * CWUStatisticItem::getScope() { return m_Scope.query();}
const char * CWUStatisticItem::getScopeType() { return m_ScopeType.query();}
const char * CWUStatisticItem::getDescription() { return m_Description.query();}
const char * CWUStatisticItem::getTimeStamp() { return m_TimeStamp.query();}
const char * CWUStatisticItem::getMeasure() { return m_Measure.query();}
const char * CWUStatisticItem::getKind() { return m_Kind.query();}
const char * CWUStatisticItem::getValue() { return m_Value.query();}
bool CWUStatisticItem::getRawValue_isNull(){return m_RawValue.is_nil();}
__int64 CWUStatisticItem::getRawValue() { return m_RawValue;}
bool CWUStatisticItem::getCount_isNull(){return m_Count.is_nil();}
__int64 CWUStatisticItem::getCount() { return m_Count;}
bool CWUStatisticItem::getMax_isNull(){return m_Max.is_nil();}
__int64 CWUStatisticItem::getMax() { return m_Max;}
const char * CWUStatisticItem::getWuid() { return m_Wuid.query();}
void CWUStatisticItem::setCreator(const char * val){ m_Creator.set(val); }
void CWUStatisticItem::setCreatorType(const char * val){ m_CreatorType.set(val); }
void CWUStatisticItem::setScope(const char * val){ m_Scope.set(val); }
void CWUStatisticItem::setScopeType(const char * val){ m_ScopeType.set(val); }
void CWUStatisticItem::setDescription(const char * val){ m_Description.set(val); }
void CWUStatisticItem::setTimeStamp(const char * val){ m_TimeStamp.set(val); }
void CWUStatisticItem::setMeasure(const char * val){ m_Measure.set(val); }
void CWUStatisticItem::setKind(const char * val){ m_Kind.set(val); }
void CWUStatisticItem::setValue(const char * val){ m_Value.set(val); }
void CWUStatisticItem::setRawValue_null(){ m_RawValue.Nil(); }void CWUStatisticItem::setRawValue(__int64 val){ m_RawValue=val; }
void CWUStatisticItem::setCount_null(){ m_Count.Nil(); }void CWUStatisticItem::setCount(__int64 val){ m_Count=val; }
void CWUStatisticItem::setMax_null(){ m_Max.Nil(); }void CWUStatisticItem::setMax(__int64 val){ m_Max=val; }
void CWUStatisticItem::setWuid(const char * val){ m_Wuid.set(val); }
extern "C"  IEspWUStatisticItem *createWUStatisticItem(const char *serv, const char *msgname){return ((IEspWUStatisticItem *)new CWUStatisticItem(serv /*, msgname*/));}
extern "C"  IClientWUStatisticItem *createClientWUStatisticItem(const char *serv, const char *msgname){return ((IClientWUStatisticItem *)new CWUStatisticItem(serv /*, msgname*/));}

//=======================================================
// class CWUGetStatsRequest Implementation
//=======================================================

CWUGetStatsRequest::CWUGetStatsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilRemove),m_CreatorType(nilRemove),m_Creator(nilRemove),m_ScopeType(nilRemove),m_Scope(nilRemove),m_Kind(nilRemove),m_Measure(nilRemove),m_MinScopeDepth(nilRemove),m_MaxScopeDepth(nilRemove),m_IncludeGraphs(nilRemove),m_CreateDescriptions(nilRemove),m_MinValue(nilRemove),m_MaxValue(nilRemove),m_Filter(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetStatsRequest::CWUGetStatsRequest(const char *serviceName, const char *bc)
	: m_WUID(nilRemove),m_CreatorType(nilRemove),m_Creator(nilRemove),m_ScopeType(nilRemove),m_Scope(nilRemove),m_Kind(nilRemove),m_Measure(nilRemove),m_MinScopeDepth(nilRemove),m_MaxScopeDepth(nilRemove),m_IncludeGraphs(nilRemove),m_CreateDescriptions(nilRemove),m_MinValue(nilRemove),m_MaxValue(nilRemove),m_Filter(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsRequest");
}

CWUGetStatsRequest::CWUGetStatsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUID(nilRemove),m_CreatorType(nilRemove),m_Creator(nilRemove),m_ScopeType(nilRemove),m_Scope(nilRemove),m_Kind(nilRemove),m_Measure(nilRemove),m_MinScopeDepth(nilRemove),m_MaxScopeDepth(nilRemove),m_IncludeGraphs(nilRemove),m_CreateDescriptions(nilRemove),m_MinValue(nilRemove),m_MaxValue(nilRemove),m_Filter(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetStatsRequest::CWUGetStatsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUID(nilRemove),m_CreatorType(nilRemove),m_Creator(nilRemove),m_ScopeType(nilRemove),m_Scope(nilRemove),m_Kind(nilRemove),m_Measure(nilRemove),m_MinScopeDepth(nilRemove),m_MaxScopeDepth(nilRemove),m_IncludeGraphs(nilRemove),m_CreateDescriptions(nilRemove),m_MinValue(nilRemove),m_MaxValue(nilRemove),m_Filter(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetStatsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CreatorType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Creator\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scope\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Kind\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Measure\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MinScopeDepth\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxScopeDepth\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IncludeGraphs\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CreateDescriptions\" type=\"xsd:boolean\"/>\n");
		if (!context.suppressed("WUGetStatsRequest","MinValue")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MinValue\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUGetStatsRequest","MaxValue")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"MaxValue\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUGetStatsRequest","Filter")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Filter\" type=\"xsd:string\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetStatsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetStatsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGetStatsRequest","MinValue",1.62);
	info.addMinVersion("WUGetStatsRequest","MaxValue",1.62);
	info.addMinVersion("WUGetStatsRequest","Filter",1.62);
}

StringBuffer &CWUGetStatsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CreatorType");
	form.appendf("  <tr><td><b>CreatorType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Creator");
	form.appendf("  <tr><td><b>Creator: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeType");
	form.appendf("  <tr><td><b>ScopeType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scope");
	form.appendf("  <tr><td><b>Scope: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Kind");
	form.appendf("  <tr><td><b>Kind: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Measure");
	form.appendf("  <tr><td><b>Measure: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MinScopeDepth");
	form.appendf("  <tr><td><b>MinScopeDepth: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxScopeDepth");
	form.appendf("  <tr><td><b>MaxScopeDepth: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeGraphs");
	
	form.appendf("  <tr><td><b>IncludeGraphs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CreateDescriptions");
	
	form.appendf("  <tr><td><b>CreateDescriptions? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (!context.suppressed("WUGetStatsRequest","MinValue")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MinValue");
		form.appendf("  <tr><td><b>MinValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGetStatsRequest","MaxValue")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("MaxValue");
		form.appendf("  <tr><td><b>MaxValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGetStatsRequest","Filter")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Filter");
		form.appendf("  <tr><td><b>Filter: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetStatsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetStatsRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_WUID.marshall(rpc_resp, "WUID", "", "", "");
	m_CreatorType.marshall(rpc_resp, "CreatorType", "", "", "");
	m_Creator.marshall(rpc_resp, "Creator", "", "", "");
	m_ScopeType.marshall(rpc_resp, "ScopeType", "", "", "");
	m_Scope.marshall(rpc_resp, "Scope", "", "", "");
	m_Kind.marshall(rpc_resp, "Kind", "", "", "");
	m_Measure.marshall(rpc_resp, "Measure", "", "", "");
	m_MinScopeDepth.marshall(rpc_resp, "MinScopeDepth", "", "", "");
	m_MaxScopeDepth.marshall(rpc_resp, "MaxScopeDepth", "", "", "");
	m_IncludeGraphs.marshall(rpc_resp, "IncludeGraphs", "", "", "");
	m_CreateDescriptions.marshall(rpc_resp, "CreateDescriptions", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_MinValue.marshall(rpc_resp, "MinValue", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_MaxValue.marshall(rpc_resp, "MaxValue", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_Filter.marshall(rpc_resp, "Filter", "", "", "");
}


void CWUGetStatsRequest::copy(CWUGetStatsRequest &from)
{
	m_WUID.copy(from.m_WUID);
	m_CreatorType.copy(from.m_CreatorType);
	m_Creator.copy(from.m_Creator);
	m_ScopeType.copy(from.m_ScopeType);
	m_Scope.copy(from.m_Scope);
	m_Kind.copy(from.m_Kind);
	m_Measure.copy(from.m_Measure);
	m_MinScopeDepth.copy(from.m_MinScopeDepth);
	m_MaxScopeDepth.copy(from.m_MaxScopeDepth);
	m_IncludeGraphs.copy(from.m_IncludeGraphs);
	m_CreateDescriptions.copy(from.m_CreateDescriptions);
	m_MinValue.copy(from.m_MinValue);
	m_MaxValue.copy(from.m_MaxValue);
	m_Filter.copy(from.m_Filter);
}


void CWUGetStatsRequest::copy(IConstWUGetStatsRequest &ifrom)
{
	setWUID(ifrom.getWUID());
	setCreatorType(ifrom.getCreatorType());
	setCreator(ifrom.getCreator());
	setScopeType(ifrom.getScopeType());
	setScope(ifrom.getScope());
	setKind(ifrom.getKind());
	setMeasure(ifrom.getMeasure());
	setMinScopeDepth(ifrom.getMinScopeDepth());
	setMaxScopeDepth(ifrom.getMaxScopeDepth());
	setIncludeGraphs(ifrom.getIncludeGraphs());
	setCreateDescriptions(ifrom.getCreateDescriptions());
	setMinValue(ifrom.getMinValue());
	setMaxValue(ifrom.getMaxValue());
	setFilter(ifrom.getFilter());
}


void CWUGetStatsRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetStatsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
	m_CreatorType.toStr(ctx, buffer, "CreatorType", "", true, "", "");
	m_Creator.toStr(ctx, buffer, "Creator", "", true, "", "");
	m_ScopeType.toStr(ctx, buffer, "ScopeType", "", true, "", "");
	m_Scope.toStr(ctx, buffer, "Scope", "", true, "", "");
	m_Kind.toStr(ctx, buffer, "Kind", "", true, "", "");
	m_Measure.toStr(ctx, buffer, "Measure", "", true, "", "");
	m_MinScopeDepth.toStr(ctx, buffer, "MinScopeDepth", "", true, "", "");
	m_MaxScopeDepth.toStr(ctx, buffer, "MaxScopeDepth", "", true, "", "");
	m_IncludeGraphs.toStr(ctx, buffer, "IncludeGraphs", "", true, "", "");
	m_CreateDescriptions.toStr(ctx, buffer, "CreateDescriptions", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_MinValue.toStr(ctx, buffer, "MinValue", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_MaxValue.toStr(ctx, buffer, "MaxValue", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.62))
		m_Filter.toStr(ctx, buffer, "Filter", "", true, "", "");
}


void CWUGetStatsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetStatsRequest::serializer(IEspContext* ctx, IConstWUGetStatsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetStatsRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field CreatorType
	{
		const char* s = src.getCreatorType();
		if (s && *s)
		{
			buffer.append("<CreatorType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CreatorType>");
		}
	}
	// field Creator
	{
		const char* s = src.getCreator();
		if (s && *s)
		{
			buffer.append("<Creator>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Creator>");
		}
	}
	// field ScopeType
	{
		const char* s = src.getScopeType();
		if (s && *s)
		{
			buffer.append("<ScopeType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ScopeType>");
		}
	}
	// field Scope
	{
		const char* s = src.getScope();
		if (s && *s)
		{
			buffer.append("<Scope>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Scope>");
		}
	}
	// field Kind
	{
		const char* s = src.getKind();
		if (s && *s)
		{
			buffer.append("<Kind>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Kind>");
		}
	}
	// field Measure
	{
		const char* s = src.getMeasure();
		if (s && *s)
		{
			buffer.append("<Measure>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Measure>");
		}
	}
	// field MinScopeDepth
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=MinScopeDepth
		buffer.append("<MinScopeDepth>");
		buffer.append(src.getMinScopeDepth());
		buffer.append("</MinScopeDepth>");
	}
	// field MaxScopeDepth
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=MaxScopeDepth
		buffer.append("<MaxScopeDepth>");
		buffer.append(src.getMaxScopeDepth());
		buffer.append("</MaxScopeDepth>");
	}
	// field IncludeGraphs
	{
		bool b = src.getIncludeGraphs();
		if (b)
			buffer.appendf("<IncludeGraphs>1</IncludeGraphs>");
	}
	// field CreateDescriptions
	{
		bool b = src.getCreateDescriptions();
		if (b)
			buffer.appendf("<CreateDescriptions>1</CreateDescriptions>");
	}
	// field MinValue
	if ((clientVer==-1.0 || clientVer>=1.62))
	{
		//*** default kind: TK_INT; type=int64, name=MinValue
		buffer.append("<MinValue>");
		buffer.append(src.getMinValue());
		buffer.append("</MinValue>");
	}
	// field MaxValue
	if ((clientVer==-1.0 || clientVer>=1.62))
	{
		//*** default kind: TK_INT; type=int64, name=MaxValue
		buffer.append("<MaxValue>");
		buffer.append(src.getMaxValue());
		buffer.append("</MaxValue>");
	}
	// field Filter
	if ((clientVer==-1.0 || clientVer>=1.62))
	{
		const char* s = src.getFilter();
		if (s && *s)
		{
			buffer.append("<Filter>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filter>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetStatsRequest>");
}

bool CWUGetStatsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	hasValue |= m_CreatorType.unmarshall(rpc_request, "CreatorType", basepath);
	hasValue |= m_Creator.unmarshall(rpc_request, "Creator", basepath);
	hasValue |= m_ScopeType.unmarshall(rpc_request, "ScopeType", basepath);
	hasValue |= m_Scope.unmarshall(rpc_request, "Scope", basepath);
	hasValue |= m_Kind.unmarshall(rpc_request, "Kind", basepath);
	hasValue |= m_Measure.unmarshall(rpc_request, "Measure", basepath);
	hasValue |= m_MinScopeDepth.unmarshall(rpc_request, "MinScopeDepth", basepath);
	hasValue |= m_MaxScopeDepth.unmarshall(rpc_request, "MaxScopeDepth", basepath);
	hasValue |= m_IncludeGraphs.unmarshall(rpc_request, "IncludeGraphs", basepath);
	hasValue |= m_CreateDescriptions.unmarshall(rpc_request, "CreateDescriptions", basepath);
	hasValue |= m_MinValue.unmarshall(rpc_request, "MinValue", basepath);
	hasValue |= m_MaxValue.unmarshall(rpc_request, "MaxValue", basepath);
	hasValue |= m_Filter.unmarshall(rpc_request, "Filter", basepath);
	return hasValue;
}

bool CWUGetStatsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_CreatorType.unmarshall(ctx, soapval, "CreatorType");
	hasValue |= m_Creator.unmarshall(ctx, soapval, "Creator");
	hasValue |= m_ScopeType.unmarshall(ctx, soapval, "ScopeType");
	hasValue |= m_Scope.unmarshall(ctx, soapval, "Scope");
	hasValue |= m_Kind.unmarshall(ctx, soapval, "Kind");
	hasValue |= m_Measure.unmarshall(ctx, soapval, "Measure");
	hasValue |= m_MinScopeDepth.unmarshall(ctx, soapval, "MinScopeDepth");
	hasValue |= m_MaxScopeDepth.unmarshall(ctx, soapval, "MaxScopeDepth");
	hasValue |= m_IncludeGraphs.unmarshall(ctx, soapval, "IncludeGraphs");
	hasValue |= m_CreateDescriptions.unmarshall(ctx, soapval, "CreateDescriptions");
	hasValue |= m_MinValue.unmarshall(ctx, soapval, "MinValue");
	hasValue |= m_MaxValue.unmarshall(ctx, soapval, "MaxValue");
	hasValue |= m_Filter.unmarshall(ctx, soapval, "Filter");
	return hasValue;
}

bool CWUGetStatsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_CreatorType.unmarshall(ctx, params, attachments, "CreatorType", basepath);
	hasValue |= m_Creator.unmarshall(ctx, params, attachments, "Creator", basepath);
	hasValue |= m_ScopeType.unmarshall(ctx, params, attachments, "ScopeType", basepath);
	hasValue |= m_Scope.unmarshall(ctx, params, attachments, "Scope", basepath);
	hasValue |= m_Kind.unmarshall(ctx, params, attachments, "Kind", basepath);
	hasValue |= m_Measure.unmarshall(ctx, params, attachments, "Measure", basepath);
	hasValue |= m_MinScopeDepth.unmarshall(ctx, params, attachments, "MinScopeDepth", basepath);
	hasValue |= m_MaxScopeDepth.unmarshall(ctx, params, attachments, "MaxScopeDepth", basepath);
	hasValue |= m_IncludeGraphs.unmarshall(ctx, params, attachments, "IncludeGraphs", basepath);
	hasValue |= m_CreateDescriptions.unmarshall(ctx, params, attachments, "CreateDescriptions", basepath);
	hasValue |= m_MinValue.unmarshall(ctx, params, attachments, "MinValue", basepath);
	hasValue |= m_MaxValue.unmarshall(ctx, params, attachments, "MaxValue", basepath);
	hasValue |= m_Filter.unmarshall(ctx, params, attachments, "Filter", basepath);
	return hasValue;
}

const char * CWUGetStatsRequest::getWUID() { return m_WUID.query();}
const char * CWUGetStatsRequest::getCreatorType() { return m_CreatorType.query();}
const char * CWUGetStatsRequest::getCreator() { return m_Creator.query();}
const char * CWUGetStatsRequest::getScopeType() { return m_ScopeType.query();}
const char * CWUGetStatsRequest::getScope() { return m_Scope.query();}
const char * CWUGetStatsRequest::getKind() { return m_Kind.query();}
const char * CWUGetStatsRequest::getMeasure() { return m_Measure.query();}
bool CWUGetStatsRequest::getMinScopeDepth_isNull(){return m_MinScopeDepth.is_nil();}
unsigned int CWUGetStatsRequest::getMinScopeDepth() { return m_MinScopeDepth;}
bool CWUGetStatsRequest::getMaxScopeDepth_isNull(){return m_MaxScopeDepth.is_nil();}
unsigned int CWUGetStatsRequest::getMaxScopeDepth() { return m_MaxScopeDepth;}
bool CWUGetStatsRequest::getIncludeGraphs_isNull(){return m_IncludeGraphs.is_nil();}
bool CWUGetStatsRequest::getIncludeGraphs() { return m_IncludeGraphs;}
bool CWUGetStatsRequest::getCreateDescriptions_isNull(){return m_CreateDescriptions.is_nil();}
bool CWUGetStatsRequest::getCreateDescriptions() { return m_CreateDescriptions;}
bool CWUGetStatsRequest::getMinValue_isNull(){return m_MinValue.is_nil();}
__int64 CWUGetStatsRequest::getMinValue() { return m_MinValue;}
bool CWUGetStatsRequest::getMaxValue_isNull(){return m_MaxValue.is_nil();}
__int64 CWUGetStatsRequest::getMaxValue() { return m_MaxValue;}
const char * CWUGetStatsRequest::getFilter() { return m_Filter.query();}
void CWUGetStatsRequest::setWUID(const char * val){ m_WUID.set(val); }
void CWUGetStatsRequest::setCreatorType(const char * val){ m_CreatorType.set(val); }
void CWUGetStatsRequest::setCreator(const char * val){ m_Creator.set(val); }
void CWUGetStatsRequest::setScopeType(const char * val){ m_ScopeType.set(val); }
void CWUGetStatsRequest::setScope(const char * val){ m_Scope.set(val); }
void CWUGetStatsRequest::setKind(const char * val){ m_Kind.set(val); }
void CWUGetStatsRequest::setMeasure(const char * val){ m_Measure.set(val); }
void CWUGetStatsRequest::setMinScopeDepth_null(){ m_MinScopeDepth.Nil(); }void CWUGetStatsRequest::setMinScopeDepth(unsigned int val){ m_MinScopeDepth=val; }
void CWUGetStatsRequest::setMaxScopeDepth_null(){ m_MaxScopeDepth.Nil(); }void CWUGetStatsRequest::setMaxScopeDepth(unsigned int val){ m_MaxScopeDepth=val; }
void CWUGetStatsRequest::setIncludeGraphs_null(){ m_IncludeGraphs.Nil(); }void CWUGetStatsRequest::setIncludeGraphs(bool val){ m_IncludeGraphs=val; }
void CWUGetStatsRequest::setCreateDescriptions_null(){ m_CreateDescriptions.Nil(); }void CWUGetStatsRequest::setCreateDescriptions(bool val){ m_CreateDescriptions=val; }
void CWUGetStatsRequest::setMinValue_null(){ m_MinValue.Nil(); }void CWUGetStatsRequest::setMinValue(__int64 val){ m_MinValue=val; }
void CWUGetStatsRequest::setMaxValue_null(){ m_MaxValue.Nil(); }void CWUGetStatsRequest::setMaxValue(__int64 val){ m_MaxValue=val; }
void CWUGetStatsRequest::setFilter(const char * val){ m_Filter.set(val); }
extern "C"  IEspWUGetStatsRequest *createWUGetStatsRequest(const char *serv){return ((IEspWUGetStatsRequest *)new CWUGetStatsRequest(serv));}
extern "C"  IClientWUGetStatsRequest *createClientWUGetStatsRequest(const char *serv){return ((IClientWUGetStatsRequest *)new CWUGetStatsRequest(serv));}

//=======================================================
// class CWUGetStatsResponse Implementation
//=======================================================

CWUGetStatsResponse::CWUGetStatsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilIgnore),m_Statistics(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetStatsResponse::CWUGetStatsResponse(const char *serviceName, const char *bc)
	: m_WUID(nilIgnore),m_Statistics(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsResponse");
}

CWUGetStatsResponse::CWUGetStatsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUID(nilIgnore),m_Statistics(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetStatsResponse::CWUGetStatsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUID(nilIgnore),m_Statistics(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetStatsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetStatsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Statistics\" type=\"tns:ArrayOfWUStatisticItem\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUStatisticItem::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUStatisticItem") && added.getValue("ArrayOfWUStatisticItem")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUStatisticItem\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUStatisticItem\" type=\"tns:WUStatisticItem\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUStatisticItem",1);
	}
	return schema;
}

void CWUGetStatsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetStatsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUStatisticItem"))
	{
		added.setValue("WUStatisticItem",1);
		CWUStatisticItem::getMapInfo(info,added);
	}
}

StringBuffer &CWUGetStatsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Statistics");
	form.appendf("<tr><td><b>Statistics: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetStatsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetStatsResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_WUID.marshall(rpc_resp, "WUID", "", "", "");
		m_Statistics.marshall(rpc_resp, "Statistics", "WUStatisticItem");
	}
}


void CWUGetStatsResponse::copy(CWUGetStatsResponse &from)
{
	m_WUID.copy(from.m_WUID);
	m_Statistics.copy(from.m_Statistics);
}


void CWUGetStatsResponse::copy(IConstWUGetStatsResponse &ifrom)
{
	setWUID(ifrom.getWUID());
	setStatistics(ifrom.getStatistics());
}


void CWUGetStatsResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetStatsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
		m_Statistics.toStr(ctx, buffer, "Statistics", "WUStatisticItem");
	}
}


void CWUGetStatsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetStatsResponse::serializer(IEspContext* ctx, IConstWUGetStatsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetStatsResponse>");
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field Statistics
	{
		IArrayOf<IConstWUStatisticItem>& v = src.getStatistics();
		int size = v.length();
		if (size>0)
			buffer.append("<Statistics>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUStatisticItem::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</Statistics>");
	}
	if (keepRootTag)
		buffer.append("</WUGetStatsResponse>");
}

bool CWUGetStatsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
		hasValue |= m_Statistics.unmarshall(rpc_request, "Statistics", basepath);
	}
	return hasValue;
}

bool CWUGetStatsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_Statistics.unmarshall(ctx, soapval, "Statistics");
	return hasValue;
}

bool CWUGetStatsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_Statistics.unmarshall(ctx, params, attachments, "Statistics", basepath);
	return hasValue;
}

const char * CWUGetStatsResponse::getWUID() { return m_WUID.query();}
IArrayOf<IConstWUStatisticItem> & CWUGetStatsResponse::getStatistics() { return (IArrayOf<IConstWUStatisticItem> &) m_Statistics; }
void CWUGetStatsResponse::setWUID(const char * val){ m_WUID.set(val); }
void CWUGetStatsResponse::setStatistics(IArrayOf<IEspWUStatisticItem> &val)
{
	m_Statistics->kill();
	IArrayOf<IConstWUStatisticItem> &target = m_Statistics.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUStatisticItem &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetStatsResponse::setStatistics(IArrayOf<IConstWUStatisticItem> &val)
{
	m_Statistics->kill();
	IArrayOf<IConstWUStatisticItem> &target = m_Statistics.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUStatisticItem &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUGetStatsResponse *createWUGetStatsResponse(const char *serv){return ((IEspWUGetStatsResponse *)new CWUGetStatsResponse(serv));}
extern "C"  IClientWUGetStatsResponse *createClientWUGetStatsResponse(const char *serv){return ((IClientWUGetStatsResponse *)new CWUGetStatsResponse(serv));}

//=======================================================
// class CWUArchiveFile Implementation
//=======================================================

CWUArchiveFile::CWUArchiveFile(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_Key(nilRemove),m_SourcePath(nilRemove),m_Path(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUArchiveFile");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUArchiveFile::CWUArchiveFile(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_Key(nilRemove),m_SourcePath(nilRemove),m_Path(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUArchiveFile");
}

StringBuffer &CWUArchiveFile::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Key\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourcePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Path\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUArchiveFile::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUArchiveFile::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUArchiveFile::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Key");
	form.appendf("  <tr><td><b>Key: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourcePath");
	form.appendf("  <tr><td><b>SourcePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Path");
	form.appendf("  <tr><td><b>Path: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUArchiveFile::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUArchiveFile::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_Key.marshall(rpc_resp, "Key", "", "", "");
	m_SourcePath.marshall(rpc_resp, "SourcePath", "", "", "");
	m_Path.marshall(rpc_resp, "Path", "", "", "");
}


void CWUArchiveFile::copy(CWUArchiveFile &from)
{
	m_Name.copy(from.m_Name);
	m_Key.copy(from.m_Key);
	m_SourcePath.copy(from.m_SourcePath);
	m_Path.copy(from.m_Path);
}


void CWUArchiveFile::copy(IConstWUArchiveFile &ifrom)
{
	setName(ifrom.getName());
	setKey(ifrom.getKey());
	setSourcePath(ifrom.getSourcePath());
	setPath(ifrom.getPath());
}


void CWUArchiveFile::getAttributes(IProperties &attributes)
{
}


void CWUArchiveFile::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_Key.toStr(ctx, buffer, "Key", "", true, "", "");
	m_SourcePath.toStr(ctx, buffer, "SourcePath", "", true, "", "");
	m_Path.toStr(ctx, buffer, "Path", "", true, "", "");
}


void CWUArchiveFile::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUArchiveFile::serializer(IEspContext* ctx, IConstWUArchiveFile &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUArchiveFile>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field Key
	{
		const char* s = src.getKey();
		if (s && *s)
		{
			buffer.append("<Key>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Key>");
		}
	}
	// field SourcePath
	{
		const char* s = src.getSourcePath();
		if (s && *s)
		{
			buffer.append("<SourcePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourcePath>");
		}
	}
	// field Path
	{
		const char* s = src.getPath();
		if (s && *s)
		{
			buffer.append("<Path>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Path>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUArchiveFile>");
}

bool CWUArchiveFile::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_Key.unmarshall(rpc_request, "Key", basepath);
	hasValue |= m_SourcePath.unmarshall(rpc_request, "SourcePath", basepath);
	hasValue |= m_Path.unmarshall(rpc_request, "Path", basepath);
	return hasValue;
}

bool CWUArchiveFile::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_Key.unmarshall(ctx, soapval, "Key");
	hasValue |= m_SourcePath.unmarshall(ctx, soapval, "SourcePath");
	hasValue |= m_Path.unmarshall(ctx, soapval, "Path");
	return hasValue;
}

bool CWUArchiveFile::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_Key.unmarshall(ctx, params, attachments, "Key", basepath);
	hasValue |= m_SourcePath.unmarshall(ctx, params, attachments, "SourcePath", basepath);
	hasValue |= m_Path.unmarshall(ctx, params, attachments, "Path", basepath);
	return hasValue;
}

const char * CWUArchiveFile::getName() { return m_Name.query();}
const char * CWUArchiveFile::getKey() { return m_Key.query();}
const char * CWUArchiveFile::getSourcePath() { return m_SourcePath.query();}
const char * CWUArchiveFile::getPath() { return m_Path.query();}
void CWUArchiveFile::setName(const char * val){ m_Name.set(val); }
void CWUArchiveFile::setKey(const char * val){ m_Key.set(val); }
void CWUArchiveFile::setSourcePath(const char * val){ m_SourcePath.set(val); }
void CWUArchiveFile::setPath(const char * val){ m_Path.set(val); }
extern "C"  IEspWUArchiveFile *createWUArchiveFile(const char *serv, const char *msgname){return ((IEspWUArchiveFile *)new CWUArchiveFile(serv /*, msgname*/));}
extern "C"  IClientWUArchiveFile *createClientWUArchiveFile(const char *serv, const char *msgname){return ((IClientWUArchiveFile *)new CWUArchiveFile(serv /*, msgname*/));}

//=======================================================
// class CWUArchiveModule Implementation
//=======================================================

CWUArchiveModule::CWUArchiveModule(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_FullName(nilRemove),m_Flags(nilRemove),m_Key(nilRemove),m_Plugin(nilRemove),m_SourcePath(nilRemove),m_Version(nilRemove),m_Path(nilRemove),m_ArchiveModules(nilRemove),m_Files(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUArchiveModule");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUArchiveModule::CWUArchiveModule(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_FullName(nilRemove),m_Flags(nilRemove),m_Key(nilRemove),m_Plugin(nilRemove),m_SourcePath(nilRemove),m_Version(nilRemove),m_Path(nilRemove),m_ArchiveModules(nilRemove),m_Files(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUArchiveModule");
}

StringBuffer &CWUArchiveModule::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FullName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Flags\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Key\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Plugin\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourcePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Version\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Path\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ArchiveModules\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ArchiveModule\" type=\"tns:WUArchiveModule\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Files\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:WUArchiveFile\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUArchiveFile::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUArchiveModule::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUArchiveModule::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUArchiveFile"))
	{
		added.setValue("WUArchiveFile",1);
		CWUArchiveFile::getMapInfo(info,added);
	}
}

StringBuffer &CWUArchiveModule::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FullName");
	form.appendf("  <tr><td><b>FullName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Flags");
	form.appendf("  <tr><td><b>Flags: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Key");
	form.appendf("  <tr><td><b>Key: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Plugin");
	form.appendf("  <tr><td><b>Plugin: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourcePath");
	form.appendf("  <tr><td><b>SourcePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Version");
	form.appendf("  <tr><td><b>Version: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Path");
	form.appendf("  <tr><td><b>Path: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ArchiveModules");
	form.appendf("<tr><td><b>ArchiveModules: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Files");
	form.appendf("<tr><td><b>Files: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUArchiveModule::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUArchiveModule::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_FullName.marshall(rpc_resp, "FullName", "", "", "");
	m_Flags.marshall(rpc_resp, "Flags", "", "", "");
	m_Key.marshall(rpc_resp, "Key", "", "", "");
	m_Plugin.marshall(rpc_resp, "Plugin", "", "", "");
	m_SourcePath.marshall(rpc_resp, "SourcePath", "", "", "");
	m_Version.marshall(rpc_resp, "Version", "", "", "");
	m_Path.marshall(rpc_resp, "Path", "", "", "");
	m_ArchiveModules.marshall(rpc_resp, "ArchiveModules", "ArchiveModule");
	m_Files.marshall(rpc_resp, "Files", "File");
}


void CWUArchiveModule::copy(CWUArchiveModule &from)
{
	m_Name.copy(from.m_Name);
	m_FullName.copy(from.m_FullName);
	m_Flags.copy(from.m_Flags);
	m_Key.copy(from.m_Key);
	m_Plugin.copy(from.m_Plugin);
	m_SourcePath.copy(from.m_SourcePath);
	m_Version.copy(from.m_Version);
	m_Path.copy(from.m_Path);
	m_ArchiveModules.copy(from.m_ArchiveModules);
	m_Files.copy(from.m_Files);
}


void CWUArchiveModule::copy(IConstWUArchiveModule &ifrom)
{
	setName(ifrom.getName());
	setFullName(ifrom.getFullName());
	setFlags(ifrom.getFlags());
	setKey(ifrom.getKey());
	setPlugin(ifrom.getPlugin());
	setSourcePath(ifrom.getSourcePath());
	setVersion(ifrom.getVersion());
	setPath(ifrom.getPath());
	setArchiveModules(ifrom.getArchiveModules());
	setFiles(ifrom.getFiles());
}


void CWUArchiveModule::getAttributes(IProperties &attributes)
{
}


void CWUArchiveModule::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_FullName.toStr(ctx, buffer, "FullName", "", true, "", "");
	m_Flags.toStr(ctx, buffer, "Flags", "", true, "", "");
	m_Key.toStr(ctx, buffer, "Key", "", true, "", "");
	m_Plugin.toStr(ctx, buffer, "Plugin", "", true, "", "");
	m_SourcePath.toStr(ctx, buffer, "SourcePath", "", true, "", "");
	m_Version.toStr(ctx, buffer, "Version", "", true, "", "");
	m_Path.toStr(ctx, buffer, "Path", "", true, "", "");
	m_ArchiveModules.toStr(ctx, buffer, "ArchiveModules", "ArchiveModule");
	m_Files.toStr(ctx, buffer, "Files", "File");
}


void CWUArchiveModule::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUArchiveModule::serializer(IEspContext* ctx, IConstWUArchiveModule &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUArchiveModule>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field FullName
	{
		const char* s = src.getFullName();
		if (s && *s)
		{
			buffer.append("<FullName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FullName>");
		}
	}
	// field Flags
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=Flags
		buffer.append("<Flags>");
		buffer.append(src.getFlags());
		buffer.append("</Flags>");
	}
	// field Key
	{
		const char* s = src.getKey();
		if (s && *s)
		{
			buffer.append("<Key>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Key>");
		}
	}
	// field Plugin
	{
		const char* s = src.getPlugin();
		if (s && *s)
		{
			buffer.append("<Plugin>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Plugin>");
		}
	}
	// field SourcePath
	{
		const char* s = src.getSourcePath();
		if (s && *s)
		{
			buffer.append("<SourcePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourcePath>");
		}
	}
	// field Version
	{
		const char* s = src.getVersion();
		if (s && *s)
		{
			buffer.append("<Version>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Version>");
		}
	}
	// field Path
	{
		const char* s = src.getPath();
		if (s && *s)
		{
			buffer.append("<Path>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Path>");
		}
	}
	// field ArchiveModules
	{
		IArrayOf<IConstWUArchiveModule>& v = src.getArchiveModules();
		int size = v.length();
		if (size>0)
			buffer.append("<ArchiveModules>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<ArchiveModule>");
			CWUArchiveModule::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</ArchiveModule>");
		}
		if (size>0)
			buffer.append("</ArchiveModules>");
	}
	// field Files
	{
		IArrayOf<IConstWUArchiveFile>& v = src.getFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<Files>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CWUArchiveFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</Files>");
	}
	if (keepRootTag)
		buffer.append("</WUArchiveModule>");
}

bool CWUArchiveModule::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_FullName.unmarshall(rpc_request, "FullName", basepath);
	hasValue |= m_Flags.unmarshall(rpc_request, "Flags", basepath);
	hasValue |= m_Key.unmarshall(rpc_request, "Key", basepath);
	hasValue |= m_Plugin.unmarshall(rpc_request, "Plugin", basepath);
	hasValue |= m_SourcePath.unmarshall(rpc_request, "SourcePath", basepath);
	hasValue |= m_Version.unmarshall(rpc_request, "Version", basepath);
	hasValue |= m_Path.unmarshall(rpc_request, "Path", basepath);
	hasValue |= m_ArchiveModules.unmarshall(rpc_request, "ArchiveModules", basepath);
	hasValue |= m_Files.unmarshall(rpc_request, "Files", basepath);
	return hasValue;
}

bool CWUArchiveModule::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_FullName.unmarshall(ctx, soapval, "FullName");
	hasValue |= m_Flags.unmarshall(ctx, soapval, "Flags");
	hasValue |= m_Key.unmarshall(ctx, soapval, "Key");
	hasValue |= m_Plugin.unmarshall(ctx, soapval, "Plugin");
	hasValue |= m_SourcePath.unmarshall(ctx, soapval, "SourcePath");
	hasValue |= m_Version.unmarshall(ctx, soapval, "Version");
	hasValue |= m_Path.unmarshall(ctx, soapval, "Path");
	hasValue |= m_ArchiveModules.unmarshall(ctx, soapval, "ArchiveModules");
	hasValue |= m_Files.unmarshall(ctx, soapval, "Files");
	return hasValue;
}

bool CWUArchiveModule::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_FullName.unmarshall(ctx, params, attachments, "FullName", basepath);
	hasValue |= m_Flags.unmarshall(ctx, params, attachments, "Flags", basepath);
	hasValue |= m_Key.unmarshall(ctx, params, attachments, "Key", basepath);
	hasValue |= m_Plugin.unmarshall(ctx, params, attachments, "Plugin", basepath);
	hasValue |= m_SourcePath.unmarshall(ctx, params, attachments, "SourcePath", basepath);
	hasValue |= m_Version.unmarshall(ctx, params, attachments, "Version", basepath);
	hasValue |= m_Path.unmarshall(ctx, params, attachments, "Path", basepath);
	hasValue |= m_ArchiveModules.unmarshall(ctx, params, attachments, "ArchiveModules", basepath);
	hasValue |= m_Files.unmarshall(ctx, params, attachments, "Files", basepath);
	return hasValue;
}

const char * CWUArchiveModule::getName() { return m_Name.query();}
const char * CWUArchiveModule::getFullName() { return m_FullName.query();}
bool CWUArchiveModule::getFlags_isNull(){return m_Flags.is_nil();}
unsigned int CWUArchiveModule::getFlags() { return m_Flags;}
const char * CWUArchiveModule::getKey() { return m_Key.query();}
const char * CWUArchiveModule::getPlugin() { return m_Plugin.query();}
const char * CWUArchiveModule::getSourcePath() { return m_SourcePath.query();}
const char * CWUArchiveModule::getVersion() { return m_Version.query();}
const char * CWUArchiveModule::getPath() { return m_Path.query();}
IArrayOf<IConstWUArchiveModule> & CWUArchiveModule::getArchiveModules() { return (IArrayOf<IConstWUArchiveModule> &) m_ArchiveModules; }
IArrayOf<IConstWUArchiveFile> & CWUArchiveModule::getFiles() { return (IArrayOf<IConstWUArchiveFile> &) m_Files; }
void CWUArchiveModule::setName(const char * val){ m_Name.set(val); }
void CWUArchiveModule::setFullName(const char * val){ m_FullName.set(val); }
void CWUArchiveModule::setFlags_null(){ m_Flags.Nil(); }void CWUArchiveModule::setFlags(unsigned int val){ m_Flags=val; }
void CWUArchiveModule::setKey(const char * val){ m_Key.set(val); }
void CWUArchiveModule::setPlugin(const char * val){ m_Plugin.set(val); }
void CWUArchiveModule::setSourcePath(const char * val){ m_SourcePath.set(val); }
void CWUArchiveModule::setVersion(const char * val){ m_Version.set(val); }
void CWUArchiveModule::setPath(const char * val){ m_Path.set(val); }
void CWUArchiveModule::setArchiveModules(IArrayOf<IEspWUArchiveModule> &val)
{
	m_ArchiveModules->kill();
	IArrayOf<IConstWUArchiveModule> &target = m_ArchiveModules.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUArchiveModule &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUArchiveModule::setArchiveModules(IArrayOf<IConstWUArchiveModule> &val)
{
	m_ArchiveModules->kill();
	IArrayOf<IConstWUArchiveModule> &target = m_ArchiveModules.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUArchiveModule &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUArchiveModule::setFiles(IArrayOf<IEspWUArchiveFile> &val)
{
	m_Files->kill();
	IArrayOf<IConstWUArchiveFile> &target = m_Files.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUArchiveFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUArchiveModule::setFiles(IArrayOf<IConstWUArchiveFile> &val)
{
	m_Files->kill();
	IArrayOf<IConstWUArchiveFile> &target = m_Files.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUArchiveFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUArchiveModule *createWUArchiveModule(const char *serv, const char *msgname){return ((IEspWUArchiveModule *)new CWUArchiveModule(serv /*, msgname*/));}
extern "C"  IClientWUArchiveModule *createClientWUArchiveModule(const char *serv, const char *msgname){return ((IClientWUArchiveModule *)new CWUArchiveModule(serv /*, msgname*/));}

//=======================================================
// class CWUListArchiveFilesRequest Implementation
//=======================================================

CWUListArchiveFilesRequest::CWUListArchiveFilesRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListArchiveFilesRequest::CWUListArchiveFilesRequest(const char *serviceName, const char *bc)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesRequest");
}

CWUListArchiveFilesRequest::CWUListArchiveFilesRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListArchiveFilesRequest::CWUListArchiveFilesRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUID(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListArchiveFilesRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUListArchiveFilesRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListArchiveFilesRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUListArchiveFilesRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListArchiveFilesRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListArchiveFilesRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_WUID.marshall(rpc_resp, "WUID", "", "", "");
}


void CWUListArchiveFilesRequest::copy(CWUListArchiveFilesRequest &from)
{
	m_WUID.copy(from.m_WUID);
}


void CWUListArchiveFilesRequest::copy(IConstWUListArchiveFilesRequest &ifrom)
{
	setWUID(ifrom.getWUID());
}


void CWUListArchiveFilesRequest::getAttributes(IProperties &attributes)
{
}


void CWUListArchiveFilesRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
}


void CWUListArchiveFilesRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListArchiveFilesRequest::serializer(IEspContext* ctx, IConstWUListArchiveFilesRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListArchiveFilesRequest>");
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUListArchiveFilesRequest>");
}

bool CWUListArchiveFilesRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	return hasValue;
}

bool CWUListArchiveFilesRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	return hasValue;
}

bool CWUListArchiveFilesRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	return hasValue;
}

const char * CWUListArchiveFilesRequest::getWUID() { return m_WUID.query();}
void CWUListArchiveFilesRequest::setWUID(const char * val){ m_WUID.set(val); }
extern "C"  IEspWUListArchiveFilesRequest *createWUListArchiveFilesRequest(const char *serv){return ((IEspWUListArchiveFilesRequest *)new CWUListArchiveFilesRequest(serv));}
extern "C"  IClientWUListArchiveFilesRequest *createClientWUListArchiveFilesRequest(const char *serv){return ((IClientWUListArchiveFilesRequest *)new CWUListArchiveFilesRequest(serv));}

//=======================================================
// class CWUListArchiveFilesResponse Implementation
//=======================================================

CWUListArchiveFilesResponse::CWUListArchiveFilesResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ArchiveModules(nilRemove),m_Files(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUListArchiveFilesResponse::CWUListArchiveFilesResponse(const char *serviceName, const char *bc)
	: m_ArchiveModules(nilRemove),m_Files(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesResponse");
}

CWUListArchiveFilesResponse::CWUListArchiveFilesResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ArchiveModules(nilRemove),m_Files(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUListArchiveFilesResponse::CWUListArchiveFilesResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ArchiveModules(nilRemove),m_Files(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUListArchiveFilesResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUListArchiveFilesResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ArchiveModules\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"ArchiveModule\" type=\"tns:WUArchiveModule\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Files\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"File\" type=\"tns:WUArchiveFile\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Message\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUArchiveModule::getXsdDefinition(context, request, schema, added);
		CWUArchiveFile::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUListArchiveFilesResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUListArchiveFilesResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUArchiveFile"))
	{
		added.setValue("WUArchiveFile",1);
		CWUArchiveFile::getMapInfo(info,added);
	}
	if (!added.getValue("WUArchiveModule"))
	{
		added.setValue("WUArchiveModule",1);
		CWUArchiveModule::getMapInfo(info,added);
	}
}

StringBuffer &CWUListArchiveFilesResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ArchiveModules");
	form.appendf("<tr><td><b>ArchiveModules: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Files");
	form.appendf("<tr><td><b>Files: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Message");
	form.appendf("  <tr><td><b>Message: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUListArchiveFilesResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUListArchiveFilesResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ArchiveModules.marshall(rpc_resp, "ArchiveModules", "ArchiveModule");
		m_Files.marshall(rpc_resp, "Files", "File");
		m_Message.marshall(rpc_resp, "Message", "", "", "");
	}
}


void CWUListArchiveFilesResponse::copy(CWUListArchiveFilesResponse &from)
{
	m_ArchiveModules.copy(from.m_ArchiveModules);
	m_Files.copy(from.m_Files);
	m_Message.copy(from.m_Message);
}


void CWUListArchiveFilesResponse::copy(IConstWUListArchiveFilesResponse &ifrom)
{
	setArchiveModules(ifrom.getArchiveModules());
	setFiles(ifrom.getFiles());
	setMessage(ifrom.getMessage());
}


void CWUListArchiveFilesResponse::getAttributes(IProperties &attributes)
{
}


void CWUListArchiveFilesResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ArchiveModules.toStr(ctx, buffer, "ArchiveModules", "ArchiveModule");
		m_Files.toStr(ctx, buffer, "Files", "File");
		m_Message.toStr(ctx, buffer, "Message", "", true, "", "");
	}
}


void CWUListArchiveFilesResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUListArchiveFilesResponse::serializer(IEspContext* ctx, IConstWUListArchiveFilesResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUListArchiveFilesResponse>");
	// field ArchiveModules
	{
		IArrayOf<IConstWUArchiveModule>& v = src.getArchiveModules();
		int size = v.length();
		if (size>0)
			buffer.append("<ArchiveModules>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<ArchiveModule>");
			CWUArchiveModule::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</ArchiveModule>");
		}
		if (size>0)
			buffer.append("</ArchiveModules>");
	}
	// field Files
	{
		IArrayOf<IConstWUArchiveFile>& v = src.getFiles();
		int size = v.length();
		if (size>0)
			buffer.append("<Files>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<File>");
			CWUArchiveFile::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</File>");
		}
		if (size>0)
			buffer.append("</Files>");
	}
	// field Message
	{
		const char* s = src.getMessage();
		if (s && *s)
		{
			buffer.append("<Message>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Message>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUListArchiveFilesResponse>");
}

bool CWUListArchiveFilesResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ArchiveModules.unmarshall(rpc_request, "ArchiveModules", basepath);
		hasValue |= m_Files.unmarshall(rpc_request, "Files", basepath);
		hasValue |= m_Message.unmarshall(rpc_request, "Message", basepath);
	}
	return hasValue;
}

bool CWUListArchiveFilesResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ArchiveModules.unmarshall(ctx, soapval, "ArchiveModules");
	hasValue |= m_Files.unmarshall(ctx, soapval, "Files");
	hasValue |= m_Message.unmarshall(ctx, soapval, "Message");
	return hasValue;
}

bool CWUListArchiveFilesResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ArchiveModules.unmarshall(ctx, params, attachments, "ArchiveModules", basepath);
	hasValue |= m_Files.unmarshall(ctx, params, attachments, "Files", basepath);
	hasValue |= m_Message.unmarshall(ctx, params, attachments, "Message", basepath);
	return hasValue;
}

IArrayOf<IConstWUArchiveModule> & CWUListArchiveFilesResponse::getArchiveModules() { return (IArrayOf<IConstWUArchiveModule> &) m_ArchiveModules; }
IArrayOf<IConstWUArchiveFile> & CWUListArchiveFilesResponse::getFiles() { return (IArrayOf<IConstWUArchiveFile> &) m_Files; }
const char * CWUListArchiveFilesResponse::getMessage() { return m_Message.query();}
void CWUListArchiveFilesResponse::setArchiveModules(IArrayOf<IEspWUArchiveModule> &val)
{
	m_ArchiveModules->kill();
	IArrayOf<IConstWUArchiveModule> &target = m_ArchiveModules.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUArchiveModule &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUListArchiveFilesResponse::setArchiveModules(IArrayOf<IConstWUArchiveModule> &val)
{
	m_ArchiveModules->kill();
	IArrayOf<IConstWUArchiveModule> &target = m_ArchiveModules.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUArchiveModule &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUListArchiveFilesResponse::setFiles(IArrayOf<IEspWUArchiveFile> &val)
{
	m_Files->kill();
	IArrayOf<IConstWUArchiveFile> &target = m_Files.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUArchiveFile &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUListArchiveFilesResponse::setFiles(IArrayOf<IConstWUArchiveFile> &val)
{
	m_Files->kill();
	IArrayOf<IConstWUArchiveFile> &target = m_Files.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUArchiveFile &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUListArchiveFilesResponse::setMessage(const char * val){ m_Message.set(val); }
extern "C"  IEspWUListArchiveFilesResponse *createWUListArchiveFilesResponse(const char *serv){return ((IEspWUListArchiveFilesResponse *)new CWUListArchiveFilesResponse(serv));}
extern "C"  IClientWUListArchiveFilesResponse *createClientWUListArchiveFilesResponse(const char *serv){return ((IClientWUListArchiveFilesResponse *)new CWUListArchiveFilesResponse(serv));}

//=======================================================
// class CWUGetArchiveFileRequest Implementation
//=======================================================

CWUGetArchiveFileRequest::CWUGetArchiveFileRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilRemove),m_ModuleName(nilRemove),m_FileName(nilRemove),m_Path(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetArchiveFileRequest::CWUGetArchiveFileRequest(const char *serviceName, const char *bc)
	: m_WUID(nilRemove),m_ModuleName(nilRemove),m_FileName(nilRemove),m_Path(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileRequest");
}

CWUGetArchiveFileRequest::CWUGetArchiveFileRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUID(nilRemove),m_ModuleName(nilRemove),m_FileName(nilRemove),m_Path(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetArchiveFileRequest::CWUGetArchiveFileRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUID(nilRemove),m_ModuleName(nilRemove),m_FileName(nilRemove),m_Path(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetArchiveFileRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ModuleName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"FileName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Path\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetArchiveFileRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetArchiveFileRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUGetArchiveFileRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ModuleName");
	form.appendf("  <tr><td><b>ModuleName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("FileName");
	form.appendf("  <tr><td><b>FileName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Path");
	form.appendf("  <tr><td><b>Path: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetArchiveFileRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetArchiveFileRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_WUID.marshall(rpc_resp, "WUID", "", "", "");
	m_ModuleName.marshall(rpc_resp, "ModuleName", "", "", "");
	m_FileName.marshall(rpc_resp, "FileName", "", "", "");
	m_Path.marshall(rpc_resp, "Path", "", "", "");
}


void CWUGetArchiveFileRequest::copy(CWUGetArchiveFileRequest &from)
{
	m_WUID.copy(from.m_WUID);
	m_ModuleName.copy(from.m_ModuleName);
	m_FileName.copy(from.m_FileName);
	m_Path.copy(from.m_Path);
}


void CWUGetArchiveFileRequest::copy(IConstWUGetArchiveFileRequest &ifrom)
{
	setWUID(ifrom.getWUID());
	setModuleName(ifrom.getModuleName());
	setFileName(ifrom.getFileName());
	setPath(ifrom.getPath());
}


void CWUGetArchiveFileRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetArchiveFileRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
	m_ModuleName.toStr(ctx, buffer, "ModuleName", "", true, "", "");
	m_FileName.toStr(ctx, buffer, "FileName", "", true, "", "");
	m_Path.toStr(ctx, buffer, "Path", "", true, "", "");
}


void CWUGetArchiveFileRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetArchiveFileRequest::serializer(IEspContext* ctx, IConstWUGetArchiveFileRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetArchiveFileRequest>");
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field ModuleName
	{
		const char* s = src.getModuleName();
		if (s && *s)
		{
			buffer.append("<ModuleName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ModuleName>");
		}
	}
	// field FileName
	{
		const char* s = src.getFileName();
		if (s && *s)
		{
			buffer.append("<FileName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</FileName>");
		}
	}
	// field Path
	{
		const char* s = src.getPath();
		if (s && *s)
		{
			buffer.append("<Path>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Path>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetArchiveFileRequest>");
}

bool CWUGetArchiveFileRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	hasValue |= m_ModuleName.unmarshall(rpc_request, "ModuleName", basepath);
	hasValue |= m_FileName.unmarshall(rpc_request, "FileName", basepath);
	hasValue |= m_Path.unmarshall(rpc_request, "Path", basepath);
	return hasValue;
}

bool CWUGetArchiveFileRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_ModuleName.unmarshall(ctx, soapval, "ModuleName");
	hasValue |= m_FileName.unmarshall(ctx, soapval, "FileName");
	hasValue |= m_Path.unmarshall(ctx, soapval, "Path");
	return hasValue;
}

bool CWUGetArchiveFileRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_ModuleName.unmarshall(ctx, params, attachments, "ModuleName", basepath);
	hasValue |= m_FileName.unmarshall(ctx, params, attachments, "FileName", basepath);
	hasValue |= m_Path.unmarshall(ctx, params, attachments, "Path", basepath);
	return hasValue;
}

const char * CWUGetArchiveFileRequest::getWUID() { return m_WUID.query();}
const char * CWUGetArchiveFileRequest::getModuleName() { return m_ModuleName.query();}
const char * CWUGetArchiveFileRequest::getFileName() { return m_FileName.query();}
const char * CWUGetArchiveFileRequest::getPath() { return m_Path.query();}
void CWUGetArchiveFileRequest::setWUID(const char * val){ m_WUID.set(val); }
void CWUGetArchiveFileRequest::setModuleName(const char * val){ m_ModuleName.set(val); }
void CWUGetArchiveFileRequest::setFileName(const char * val){ m_FileName.set(val); }
void CWUGetArchiveFileRequest::setPath(const char * val){ m_Path.set(val); }
extern "C"  IEspWUGetArchiveFileRequest *createWUGetArchiveFileRequest(const char *serv){return ((IEspWUGetArchiveFileRequest *)new CWUGetArchiveFileRequest(serv));}
extern "C"  IClientWUGetArchiveFileRequest *createClientWUGetArchiveFileRequest(const char *serv){return ((IClientWUGetArchiveFileRequest *)new CWUGetArchiveFileRequest(serv));}

//=======================================================
// class CWUGetArchiveFileResponse Implementation
//=======================================================

CWUGetArchiveFileResponse::CWUGetArchiveFileResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_File(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetArchiveFileResponse::CWUGetArchiveFileResponse(const char *serviceName, const char *bc)
	: m_File(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileResponse");
}

CWUGetArchiveFileResponse::CWUGetArchiveFileResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_File(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetArchiveFileResponse::CWUGetArchiveFileResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_File(nilRemove),m_Message(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetArchiveFileResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetArchiveFileResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"File\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Message\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetArchiveFileResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetArchiveFileResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUGetArchiveFileResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("File");
	form.appendf("  <tr><td><b>File: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Message");
	form.appendf("  <tr><td><b>Message: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetArchiveFileResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetArchiveFileResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_File.marshall(rpc_resp, "File", "", "", "");
		m_Message.marshall(rpc_resp, "Message", "", "", "");
	}
}


void CWUGetArchiveFileResponse::copy(CWUGetArchiveFileResponse &from)
{
	m_File.copy(from.m_File);
	m_Message.copy(from.m_Message);
}


void CWUGetArchiveFileResponse::copy(IConstWUGetArchiveFileResponse &ifrom)
{
	setFile(ifrom.getFile());
	setMessage(ifrom.getMessage());
}


void CWUGetArchiveFileResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetArchiveFileResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_File.toStr(ctx, buffer, "File", "", true, "", "");
		m_Message.toStr(ctx, buffer, "Message", "", true, "", "");
	}
}


void CWUGetArchiveFileResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetArchiveFileResponse::serializer(IEspContext* ctx, IConstWUGetArchiveFileResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetArchiveFileResponse>");
	// field File
	{
		const char* s = src.getFile();
		if (s && *s)
		{
			buffer.append("<File>");
			encodeUtf8XML(s,buffer);
			buffer.append("</File>");
		}
	}
	// field Message
	{
		const char* s = src.getMessage();
		if (s && *s)
		{
			buffer.append("<Message>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Message>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUGetArchiveFileResponse>");
}

bool CWUGetArchiveFileResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_File.unmarshall(rpc_request, "File", basepath);
		hasValue |= m_Message.unmarshall(rpc_request, "Message", basepath);
	}
	return hasValue;
}

bool CWUGetArchiveFileResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_File.unmarshall(ctx, soapval, "File");
	hasValue |= m_Message.unmarshall(ctx, soapval, "Message");
	return hasValue;
}

bool CWUGetArchiveFileResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_File.unmarshall(ctx, params, attachments, "File", basepath);
	hasValue |= m_Message.unmarshall(ctx, params, attachments, "Message", basepath);
	return hasValue;
}

const char * CWUGetArchiveFileResponse::getFile() { return m_File.query();}
const char * CWUGetArchiveFileResponse::getMessage() { return m_Message.query();}
void CWUGetArchiveFileResponse::setFile(const char * val){ m_File.set(val); }
void CWUGetArchiveFileResponse::setMessage(const char * val){ m_Message.set(val); }
extern "C"  IEspWUGetArchiveFileResponse *createWUGetArchiveFileResponse(const char *serv){return ((IEspWUGetArchiveFileResponse *)new CWUGetArchiveFileResponse(serv));}
extern "C"  IClientWUGetArchiveFileResponse *createClientWUGetArchiveFileResponse(const char *serv){return ((IClientWUGetArchiveFileResponse *)new CWUGetArchiveFileResponse(serv));}

//=======================================================
// class CWUGetNumFileToCopyRequest Implementation
//=======================================================

CWUGetNumFileToCopyRequest::CWUGetNumFileToCopyRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_ClusterName(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetNumFileToCopyRequest::CWUGetNumFileToCopyRequest(const char *serviceName, const char *bc)
	: m_ClusterName(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyRequest");
}

CWUGetNumFileToCopyRequest::CWUGetNumFileToCopyRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ClusterName(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetNumFileToCopyRequest::CWUGetNumFileToCopyRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ClusterName(nilRemove),m_PageSize(0, nilRemove,false),m_PageStartFrom(0, nilRemove,false),m_Sortby(nilRemove),m_Descending(0, nilRemove,false),m_CacheHint(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetNumFileToCopyRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ClusterName\" type=\"xsd:string\"/>\n");
		if (!context.suppressed("WUGetNumFileToCopyRequest","PageSize")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PageSize\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUGetNumFileToCopyRequest","PageStartFrom")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"PageStartFrom\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUGetNumFileToCopyRequest","Sortby")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Sortby\" type=\"xsd:string\"/>\n");
		}
		if (!context.suppressed("WUGetNumFileToCopyRequest","Descending")) {
			schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Descending\" type=\"xsd:boolean\"/>\n");
		}
		if (!context.suppressed("WUGetNumFileToCopyRequest","CacheHint")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWUGetNumFileToCopyRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetNumFileToCopyRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGetNumFileToCopyRequest","PageSize",1.69);
	info.addMinVersion("WUGetNumFileToCopyRequest","PageStartFrom",1.69);
	info.addMinVersion("WUGetNumFileToCopyRequest","Sortby",1.69);
	info.addMinVersion("WUGetNumFileToCopyRequest","Descending",1.69);
	info.addMinVersion("WUGetNumFileToCopyRequest","CacheHint",1.69);
}

StringBuffer &CWUGetNumFileToCopyRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ClusterName");
	form.appendf("  <tr><td><b>ClusterName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (!context.suppressed("WUGetNumFileToCopyRequest","PageSize")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageSize");
		form.appendf("  <tr><td><b>PageSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGetNumFileToCopyRequest","PageStartFrom")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("PageStartFrom");
		form.appendf("  <tr><td><b>PageStartFrom: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGetNumFileToCopyRequest","Sortby")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Sortby");
		form.appendf("  <tr><td><b>Sortby: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGetNumFileToCopyRequest","Descending")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Descending");
		
	form.appendf("  <tr><td><b>Descending? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	}
	if (!context.suppressed("WUGetNumFileToCopyRequest","CacheHint")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CacheHint");
		form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetNumFileToCopyRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetNumFileToCopyRequest::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ClusterName.marshall(rpc_resp, "ClusterName", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_PageSize.marshall(rpc_resp, "PageSize", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_PageStartFrom.marshall(rpc_resp, "PageStartFrom", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Sortby.marshall(rpc_resp, "Sortby", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Descending.marshall(rpc_resp, "Descending", "", "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
}


void CWUGetNumFileToCopyRequest::copy(CWUGetNumFileToCopyRequest &from)
{
	m_ClusterName.copy(from.m_ClusterName);
	m_PageSize.copy(from.m_PageSize);
	m_PageStartFrom.copy(from.m_PageStartFrom);
	m_Sortby.copy(from.m_Sortby);
	m_Descending.copy(from.m_Descending);
	m_CacheHint.copy(from.m_CacheHint);
}


void CWUGetNumFileToCopyRequest::copy(IConstWUGetNumFileToCopyRequest &ifrom)
{
	setClusterName(ifrom.getClusterName());
	setPageSize(ifrom.getPageSize());
	setPageStartFrom(ifrom.getPageStartFrom());
	setSortby(ifrom.getSortby());
	setDescending(ifrom.getDescending());
	setCacheHint(ifrom.getCacheHint());
}


void CWUGetNumFileToCopyRequest::getAttributes(IProperties &attributes)
{
}


void CWUGetNumFileToCopyRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	m_ClusterName.toStr(ctx, buffer, "ClusterName", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_PageSize.toStr(ctx, buffer, "PageSize", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_PageStartFrom.toStr(ctx, buffer, "PageStartFrom", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Sortby.toStr(ctx, buffer, "Sortby", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_Descending.toStr(ctx, buffer, "Descending", "", true, "", "");
	if ((clientVer==-1.0 || clientVer>=1.69))
		m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
}


void CWUGetNumFileToCopyRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetNumFileToCopyRequest::serializer(IEspContext* ctx, IConstWUGetNumFileToCopyRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetNumFileToCopyRequest>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field ClusterName
	{
		const char* s = src.getClusterName();
		if (s && *s)
		{
			buffer.append("<ClusterName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ClusterName>");
		}
	}
	// field PageSize
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		//*** default kind: TK_INT; type=int64, name=PageSize
		buffer.append("<PageSize>");
		buffer.append(src.getPageSize());
		buffer.append("</PageSize>");
	}
	// field PageStartFrom
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		//*** default kind: TK_INT; type=int64, name=PageStartFrom
		buffer.append("<PageStartFrom>");
		buffer.append(src.getPageStartFrom());
		buffer.append("</PageStartFrom>");
	}
	// field Sortby
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		const char* s = src.getSortby();
		if (s && *s)
		{
			buffer.append("<Sortby>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Sortby>");
		}
	}
	// field Descending
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		bool b = src.getDescending();
		if (b)
			buffer.appendf("<Descending>1</Descending>");
	}
	// field CacheHint
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	if (keepRootTag)
		buffer.append("</WUGetNumFileToCopyRequest>");
}

bool CWUGetNumFileToCopyRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(rpc_request, "ClusterName", basepath);
	hasValue |= m_PageSize.unmarshall(rpc_request, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(rpc_request, "PageStartFrom", basepath);
	hasValue |= m_Sortby.unmarshall(rpc_request, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(rpc_request, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
	return hasValue;
}

bool CWUGetNumFileToCopyRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, soapval, "ClusterName");
	hasValue |= m_PageSize.unmarshall(ctx, soapval, "PageSize");
	hasValue |= m_PageStartFrom.unmarshall(ctx, soapval, "PageStartFrom");
	hasValue |= m_Sortby.unmarshall(ctx, soapval, "Sortby");
	hasValue |= m_Descending.unmarshall(ctx, soapval, "Descending");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	return hasValue;
}

bool CWUGetNumFileToCopyRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ClusterName.unmarshall(ctx, params, attachments, "ClusterName", basepath);
	hasValue |= m_PageSize.unmarshall(ctx, params, attachments, "PageSize", basepath);
	hasValue |= m_PageStartFrom.unmarshall(ctx, params, attachments, "PageStartFrom", basepath);
	hasValue |= m_Sortby.unmarshall(ctx, params, attachments, "Sortby", basepath);
	hasValue |= m_Descending.unmarshall(ctx, params, attachments, "Descending", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	return hasValue;
}

const char * CWUGetNumFileToCopyRequest::getClusterName() { return m_ClusterName.query();}
bool CWUGetNumFileToCopyRequest::getPageSize_isNull(){return m_PageSize.is_nil();}
__int64 CWUGetNumFileToCopyRequest::getPageSize() { return m_PageSize;}
bool CWUGetNumFileToCopyRequest::getPageStartFrom_isNull(){return m_PageStartFrom.is_nil();}
__int64 CWUGetNumFileToCopyRequest::getPageStartFrom() { return m_PageStartFrom;}
const char * CWUGetNumFileToCopyRequest::getSortby() { return m_Sortby.query();}
bool CWUGetNumFileToCopyRequest::getDescending_isNull(){return m_Descending.is_nil();}
bool CWUGetNumFileToCopyRequest::getDescending() { return m_Descending;}
bool CWUGetNumFileToCopyRequest::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CWUGetNumFileToCopyRequest::getCacheHint() { return m_CacheHint;}
void CWUGetNumFileToCopyRequest::setClusterName(const char * val){ m_ClusterName.set(val); }
void CWUGetNumFileToCopyRequest::setPageSize_null(){ m_PageSize.Nil(); }void CWUGetNumFileToCopyRequest::setPageSize(__int64 val){ m_PageSize=val; }
void CWUGetNumFileToCopyRequest::setPageStartFrom_null(){ m_PageStartFrom.Nil(); }void CWUGetNumFileToCopyRequest::setPageStartFrom(__int64 val){ m_PageStartFrom=val; }
void CWUGetNumFileToCopyRequest::setSortby(const char * val){ m_Sortby.set(val); }
void CWUGetNumFileToCopyRequest::setDescending_null(){ m_Descending.Nil(); }void CWUGetNumFileToCopyRequest::setDescending(bool val){ m_Descending=val; }
void CWUGetNumFileToCopyRequest::setCacheHint_null(){ m_CacheHint.Nil(); }void CWUGetNumFileToCopyRequest::setCacheHint(__int64 val){ m_CacheHint=val; }
extern "C"  IEspWUGetNumFileToCopyRequest *createWUGetNumFileToCopyRequest(const char *serv){return ((IEspWUGetNumFileToCopyRequest *)new CWUGetNumFileToCopyRequest(serv));}
extern "C"  IClientWUGetNumFileToCopyRequest *createClientWUGetNumFileToCopyRequest(const char *serv){return ((IClientWUGetNumFileToCopyRequest *)new CWUGetNumFileToCopyRequest(serv));}

//=======================================================
// class CWUGetNumFileToCopyResponse Implementation
//=======================================================

CWUGetNumFileToCopyResponse::CWUGetNumFileToCopyResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Endpoints(nilRemove),m_CacheHint(nilRemove),m_Total(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUGetNumFileToCopyResponse::CWUGetNumFileToCopyResponse(const char *serviceName, const char *bc)
	: m_Endpoints(nilRemove),m_CacheHint(nilRemove),m_Total(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyResponse");
}

CWUGetNumFileToCopyResponse::CWUGetNumFileToCopyResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Endpoints(nilRemove),m_CacheHint(nilRemove),m_Total(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUGetNumFileToCopyResponse::CWUGetNumFileToCopyResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Endpoints(nilRemove),m_CacheHint(nilRemove),m_Total(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUGetNumFileToCopyResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUGetNumFileToCopyResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Endpoints\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Endpoint\" type=\"tns:ClusterEndpoint\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!context.suppressed("WUGetNumFileToCopyResponse","CacheHint")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"CacheHint\" type=\"xsd:long\"/>\n");
		}
		if (!context.suppressed("WUGetNumFileToCopyResponse","Total")) {
			schema.append("<xsd:element minOccurs=\"0\" name=\"Total\" type=\"xsd:long\"/>\n");
		}
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CClusterEndpoint::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUGetNumFileToCopyResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUGetNumFileToCopyResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	info.addMinVersion("WUGetNumFileToCopyResponse","CacheHint",1.69);
	info.addMinVersion("WUGetNumFileToCopyResponse","Total",1.69);
	if (!added.getValue("ClusterEndpoint"))
	{
		added.setValue("ClusterEndpoint",1);
		CClusterEndpoint::getMapInfo(info,added);
	}
}

StringBuffer &CWUGetNumFileToCopyResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Endpoints");
	form.appendf("<tr><td><b>Endpoints: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (!context.suppressed("WUGetNumFileToCopyResponse","CacheHint")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("CacheHint");
		form.appendf("  <tr><td><b>CacheHint: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (!context.suppressed("WUGetNumFileToCopyResponse","Total")) {
		extfix.clear();
		if (prefix && *prefix)
			extfix.append(prefix).append(".");
		extfix.append("Total");
		form.appendf("  <tr><td><b>Total: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
		form.append("</td></tr>\n");
	}
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUGetNumFileToCopyResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUGetNumFileToCopyResponse::serialize(IRpcMessage& rpc_resp)
{
	IEspContext* ctx = rpc_resp.queryContext();
	double clientVer= ctx ? ctx->getClientVersion() : -1; /* no context gets everything */
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Endpoints.marshall(rpc_resp, "Endpoints", "Endpoint");
		if ((clientVer==-1.0 || clientVer>=1.69))
			m_CacheHint.marshall(rpc_resp, "CacheHint", "", "", "");
		if ((clientVer==-1.0 || clientVer>=1.69))
			m_Total.marshall(rpc_resp, "Total", "", "", "");
	}
}


void CWUGetNumFileToCopyResponse::copy(CWUGetNumFileToCopyResponse &from)
{
	m_Endpoints.copy(from.m_Endpoints);
	m_CacheHint.copy(from.m_CacheHint);
	m_Total.copy(from.m_Total);
}


void CWUGetNumFileToCopyResponse::copy(IConstWUGetNumFileToCopyResponse &ifrom)
{
	setEndpoints(ifrom.getEndpoints());
	setCacheHint(ifrom.getCacheHint());
	setTotal(ifrom.getTotal());
}


void CWUGetNumFileToCopyResponse::getAttributes(IProperties &attributes)
{
}


void CWUGetNumFileToCopyResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		double clientVer = ctx ? ctx->getClientVersion() : -1;
		m_Endpoints.toStr(ctx, buffer, "Endpoints", "Endpoint");
		if ((clientVer==-1.0 || clientVer>=1.69))
			m_CacheHint.toStr(ctx, buffer, "CacheHint", "", true, "", "");
		if ((clientVer==-1.0 || clientVer>=1.69))
			m_Total.toStr(ctx, buffer, "Total", "", true, "", "");
	}
}


void CWUGetNumFileToCopyResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUGetNumFileToCopyResponse::serializer(IEspContext* ctx, IConstWUGetNumFileToCopyResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUGetNumFileToCopyResponse>");
	double clientVer = ctx ? ctx->getClientVersion() : -1;
	// field Endpoints
	{
		IArrayOf<IConstClusterEndpoint>& v = src.getEndpoints();
		int size = v.length();
		if (size>0)
			buffer.append("<Endpoints>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Endpoint>");
			CClusterEndpoint::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Endpoint>");
		}
		if (size>0)
			buffer.append("</Endpoints>");
	}
	// field CacheHint
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		//*** default kind: TK_INT; type=int64, name=CacheHint
		buffer.append("<CacheHint>");
		buffer.append(src.getCacheHint());
		buffer.append("</CacheHint>");
	}
	// field Total
	if ((clientVer==-1.0 || clientVer>=1.69))
	{
		//*** default kind: TK_INT; type=int64, name=Total
		buffer.append("<Total>");
		buffer.append(src.getTotal());
		buffer.append("</Total>");
	}
	if (keepRootTag)
		buffer.append("</WUGetNumFileToCopyResponse>");
}

bool CWUGetNumFileToCopyResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Endpoints.unmarshall(rpc_request, "Endpoints", basepath);
		hasValue |= m_CacheHint.unmarshall(rpc_request, "CacheHint", basepath);
		hasValue |= m_Total.unmarshall(rpc_request, "Total", basepath);
	}
	return hasValue;
}

bool CWUGetNumFileToCopyResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Endpoints.unmarshall(ctx, soapval, "Endpoints");
	hasValue |= m_CacheHint.unmarshall(ctx, soapval, "CacheHint");
	hasValue |= m_Total.unmarshall(ctx, soapval, "Total");
	return hasValue;
}

bool CWUGetNumFileToCopyResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Endpoints.unmarshall(ctx, params, attachments, "Endpoints", basepath);
	hasValue |= m_CacheHint.unmarshall(ctx, params, attachments, "CacheHint", basepath);
	hasValue |= m_Total.unmarshall(ctx, params, attachments, "Total", basepath);
	return hasValue;
}

IArrayOf<IConstClusterEndpoint> & CWUGetNumFileToCopyResponse::getEndpoints() { return (IArrayOf<IConstClusterEndpoint> &) m_Endpoints; }
bool CWUGetNumFileToCopyResponse::getCacheHint_isNull(){return m_CacheHint.is_nil();}
__int64 CWUGetNumFileToCopyResponse::getCacheHint() { return m_CacheHint;}
bool CWUGetNumFileToCopyResponse::getTotal_isNull(){return m_Total.is_nil();}
__int64 CWUGetNumFileToCopyResponse::getTotal() { return m_Total;}
void CWUGetNumFileToCopyResponse::setEndpoints(IArrayOf<IEspClusterEndpoint> &val)
{
	m_Endpoints->kill();
	IArrayOf<IConstClusterEndpoint> &target = m_Endpoints.getValue();
	ForEachItemIn(idx, val)
	{
		IEspClusterEndpoint &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetNumFileToCopyResponse::setEndpoints(IArrayOf<IConstClusterEndpoint> &val)
{
	m_Endpoints->kill();
	IArrayOf<IConstClusterEndpoint> &target = m_Endpoints.getValue();
	ForEachItemIn(idx, val)
	{
		IConstClusterEndpoint &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUGetNumFileToCopyResponse::setCacheHint_null(){ m_CacheHint.Nil(); }void CWUGetNumFileToCopyResponse::setCacheHint(__int64 val){ m_CacheHint=val; }
void CWUGetNumFileToCopyResponse::setTotal_null(){ m_Total.Nil(); }void CWUGetNumFileToCopyResponse::setTotal(__int64 val){ m_Total=val; }
extern "C"  IEspWUGetNumFileToCopyResponse *createWUGetNumFileToCopyResponse(const char *serv){return ((IEspWUGetNumFileToCopyResponse *)new CWUGetNumFileToCopyResponse(serv));}
extern "C"  IClientWUGetNumFileToCopyResponse *createClientWUGetNumFileToCopyResponse(const char *serv){return ((IClientWUGetNumFileToCopyResponse *)new CWUGetNumFileToCopyResponse(serv));}

//=======================================================
// class CWUPropertyFilter Implementation
//=======================================================

CWUPropertyFilter::CWUPropertyFilter(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_ExactValue(nilIgnore),m_MinValue(nilIgnore),m_MaxValue(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPropertyFilter");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUPropertyFilter::CWUPropertyFilter(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_ExactValue(nilIgnore),m_MinValue(nilIgnore),m_MaxValue(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPropertyFilter");
}

StringBuffer &CWUPropertyFilter::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ExactValue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MinValue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxValue\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUPropertyFilter::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUPropertyFilter::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUPropertyFilter::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExactValue");
	form.appendf("  <tr><td><b>ExactValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MinValue");
	form.appendf("  <tr><td><b>MinValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MaxValue");
	form.appendf("  <tr><td><b>MaxValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUPropertyFilter::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUPropertyFilter::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_ExactValue.marshall(rpc_resp, "ExactValue", "", "", "");
	m_MinValue.marshall(rpc_resp, "MinValue", "", "", "");
	m_MaxValue.marshall(rpc_resp, "MaxValue", "", "", "");
}


void CWUPropertyFilter::copy(CWUPropertyFilter &from)
{
	m_Name.copy(from.m_Name);
	m_ExactValue.copy(from.m_ExactValue);
	m_MinValue.copy(from.m_MinValue);
	m_MaxValue.copy(from.m_MaxValue);
}


void CWUPropertyFilter::copy(IConstWUPropertyFilter &ifrom)
{
	setName(ifrom.getName());
	setExactValue(ifrom.getExactValue());
	setMinValue(ifrom.getMinValue());
	setMaxValue(ifrom.getMaxValue());
}


void CWUPropertyFilter::getAttributes(IProperties &attributes)
{
}


void CWUPropertyFilter::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_ExactValue.toStr(ctx, buffer, "ExactValue", "", true, "", "");
	m_MinValue.toStr(ctx, buffer, "MinValue", "", true, "", "");
	m_MaxValue.toStr(ctx, buffer, "MaxValue", "", true, "", "");
}


void CWUPropertyFilter::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUPropertyFilter::serializer(IEspContext* ctx, IConstWUPropertyFilter &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUPropertyFilter>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field ExactValue
	{
		const char* s = src.getExactValue();
		if (s && *s)
		{
			buffer.append("<ExactValue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ExactValue>");
		}
	}
	// field MinValue
	{
		const char* s = src.getMinValue();
		if (s && *s)
		{
			buffer.append("<MinValue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MinValue>");
		}
	}
	// field MaxValue
	{
		const char* s = src.getMaxValue();
		if (s && *s)
		{
			buffer.append("<MaxValue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MaxValue>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUPropertyFilter>");
}

bool CWUPropertyFilter::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_ExactValue.unmarshall(rpc_request, "ExactValue", basepath);
	hasValue |= m_MinValue.unmarshall(rpc_request, "MinValue", basepath);
	hasValue |= m_MaxValue.unmarshall(rpc_request, "MaxValue", basepath);
	return hasValue;
}

bool CWUPropertyFilter::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_ExactValue.unmarshall(ctx, soapval, "ExactValue");
	hasValue |= m_MinValue.unmarshall(ctx, soapval, "MinValue");
	hasValue |= m_MaxValue.unmarshall(ctx, soapval, "MaxValue");
	return hasValue;
}

bool CWUPropertyFilter::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_ExactValue.unmarshall(ctx, params, attachments, "ExactValue", basepath);
	hasValue |= m_MinValue.unmarshall(ctx, params, attachments, "MinValue", basepath);
	hasValue |= m_MaxValue.unmarshall(ctx, params, attachments, "MaxValue", basepath);
	return hasValue;
}

const char * CWUPropertyFilter::getName() { return m_Name.query();}
const char * CWUPropertyFilter::getExactValue() { return m_ExactValue.query();}
const char * CWUPropertyFilter::getMinValue() { return m_MinValue.query();}
const char * CWUPropertyFilter::getMaxValue() { return m_MaxValue.query();}
void CWUPropertyFilter::setName(const char * val){ m_Name.set(val); }
void CWUPropertyFilter::setExactValue(const char * val){ m_ExactValue.set(val); }
void CWUPropertyFilter::setMinValue(const char * val){ m_MinValue.set(val); }
void CWUPropertyFilter::setMaxValue(const char * val){ m_MaxValue.set(val); }
extern "C"  IEspWUPropertyFilter *createWUPropertyFilter(const char *serv, const char *msgname){return ((IEspWUPropertyFilter *)new CWUPropertyFilter(serv /*, msgname*/));}
extern "C"  IClientWUPropertyFilter *createClientWUPropertyFilter(const char *serv, const char *msgname){return ((IClientWUPropertyFilter *)new CWUPropertyFilter(serv /*, msgname*/));}

//=======================================================
// class CWUScopeFilter Implementation
//=======================================================

CWUScopeFilter::CWUScopeFilter(const char *serviceName, IRpcMessageBinding *init)
	: m_MaxDepth(nilIgnore),m_Scopes(nilIgnore),m_Ids(nilIgnore),m_ScopeTypes(nilIgnore),m_PropertyFilters(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScopeFilter");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUScopeFilter::CWUScopeFilter(const char *serviceName, const char *bc)
	: m_MaxDepth(nilIgnore),m_Scopes(nilIgnore),m_Ids(nilIgnore),m_ScopeTypes(nilIgnore),m_PropertyFilters(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScopeFilter");
}

StringBuffer &CWUScopeFilter::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"9999\" name=\"MaxDepth\" type=\"xsd:integer\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scopes\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"Scope\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Ids\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"id\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeTypes\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"ScopeType\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PropertyFilters\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"PropertyFilter\" type=\"tns:WUPropertyFilter\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUPropertyFilter::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUScopeFilter::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUScopeFilter::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUPropertyFilter"))
	{
		added.setValue("WUPropertyFilter",1);
		CWUPropertyFilter::getMapInfo(info,added);
	}
}

StringBuffer &CWUScopeFilter::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MaxDepth");
	form.appendf("  <tr><td><b>MaxDepth: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"9999\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scopes");
	form.appendf("<tr><td><b>Scopes: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Ids");
	form.appendf("<tr><td><b>Ids: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeTypes");
	form.appendf("<tr><td><b>ScopeTypes: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PropertyFilters");
	form.appendf("<tr><td><b>PropertyFilters: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUScopeFilter::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUScopeFilter::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_MaxDepth.marshall(rpc_resp, "MaxDepth", "", "", "");
	m_Scopes.marshall(rpc_resp, "Scopes", "Scope");
	m_Ids.marshall(rpc_resp, "Ids", "id");
	m_ScopeTypes.marshall(rpc_resp, "ScopeTypes", "ScopeType");
	m_PropertyFilters.marshall(rpc_resp, "PropertyFilters", "PropertyFilter");
}


void CWUScopeFilter::copy(CWUScopeFilter &from)
{
	m_MaxDepth.copy(from.m_MaxDepth);
	m_Scopes.copy(from.m_Scopes);
	m_Ids.copy(from.m_Ids);
	m_ScopeTypes.copy(from.m_ScopeTypes);
	m_PropertyFilters.copy(from.m_PropertyFilters);
}


void CWUScopeFilter::copy(IConstWUScopeFilter &ifrom)
{
	setMaxDepth(ifrom.getMaxDepth());
	setScopes(ifrom.getScopes());
	setIds(ifrom.getIds());
	setScopeTypes(ifrom.getScopeTypes());
	setPropertyFilters(ifrom.getPropertyFilters());
}


void CWUScopeFilter::getAttributes(IProperties &attributes)
{
}


void CWUScopeFilter::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_MaxDepth.toStr(ctx, buffer, "MaxDepth", "", true, "", "");
	m_Scopes.toStr(ctx, buffer, "Scopes", "Scope");
	m_Ids.toStr(ctx, buffer, "Ids", "id");
	m_ScopeTypes.toStr(ctx, buffer, "ScopeTypes", "ScopeType");
	m_PropertyFilters.toStr(ctx, buffer, "PropertyFilters", "PropertyFilter");
}


void CWUScopeFilter::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUScopeFilter::serializer(IEspContext* ctx, IConstWUScopeFilter &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUScopeFilter>");
	// field MaxDepth
	{
		int n = src.getMaxDepth();
		if (n)
			buffer.appendf("<MaxDepth>%d</MaxDepth>", n);
	}
	// field Scopes
	{
		StringArray& v = src.getScopes();
		if (v.length()>0)
			buffer.append("<Scopes>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Scope>%s</Scope>",v.item(i));
		if (v.length()>0)
			buffer.append("</Scopes>");
	}
	// field Ids
	{
		StringArray& v = src.getIds();
		if (v.length()>0)
			buffer.append("<Ids>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<id>%s</id>",v.item(i));
		if (v.length()>0)
			buffer.append("</Ids>");
	}
	// field ScopeTypes
	{
		StringArray& v = src.getScopeTypes();
		if (v.length()>0)
			buffer.append("<ScopeTypes>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<ScopeType>%s</ScopeType>",v.item(i));
		if (v.length()>0)
			buffer.append("</ScopeTypes>");
	}
	// field PropertyFilters
	{
		IArrayOf<IConstWUPropertyFilter>& v = src.getPropertyFilters();
		int size = v.length();
		if (size>0)
			buffer.append("<PropertyFilters>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<PropertyFilter>");
			CWUPropertyFilter::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</PropertyFilter>");
		}
		if (size>0)
			buffer.append("</PropertyFilters>");
	}
	if (keepRootTag)
		buffer.append("</WUScopeFilter>");
}

bool CWUScopeFilter::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_MaxDepth.unmarshall(rpc_request, "MaxDepth", basepath);
	hasValue |= m_Scopes.unmarshall(rpc_request, "Scopes", basepath);
	hasValue |= m_Ids.unmarshall(rpc_request, "Ids", basepath);
	hasValue |= m_ScopeTypes.unmarshall(rpc_request, "ScopeTypes", basepath);
	hasValue |= m_PropertyFilters.unmarshall(rpc_request, "PropertyFilters", basepath);
	return hasValue;
}

bool CWUScopeFilter::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_MaxDepth.unmarshall(ctx, soapval, "MaxDepth");
	hasValue |= m_Scopes.unmarshall(ctx, soapval, "Scopes");
	hasValue |= m_Ids.unmarshall(ctx, soapval, "Ids");
	hasValue |= m_ScopeTypes.unmarshall(ctx, soapval, "ScopeTypes");
	hasValue |= m_PropertyFilters.unmarshall(ctx, soapval, "PropertyFilters");
	return hasValue;
}

bool CWUScopeFilter::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_MaxDepth.unmarshall(ctx, params, attachments, "MaxDepth", basepath);
	hasValue |= m_Scopes.unmarshall(ctx, params, attachments, "Scopes", basepath);
	hasValue |= m_Ids.unmarshall(ctx, params, attachments, "Ids", basepath);
	hasValue |= m_ScopeTypes.unmarshall(ctx, params, attachments, "ScopeTypes", basepath);
	hasValue |= m_PropertyFilters.unmarshall(ctx, params, attachments, "PropertyFilters", basepath);
	return hasValue;
}

int CWUScopeFilter::getMaxDepth() { return m_MaxDepth;}
StringArray & CWUScopeFilter::getScopes() { return (StringArray &) m_Scopes; }
StringArray & CWUScopeFilter::getIds() { return (StringArray &) m_Ids; }
StringArray & CWUScopeFilter::getScopeTypes() { return (StringArray &) m_ScopeTypes; }
IArrayOf<IConstWUPropertyFilter> & CWUScopeFilter::getPropertyFilters() { return (IArrayOf<IConstWUPropertyFilter> &) m_PropertyFilters; }
void CWUScopeFilter::setMaxDepth(int val){ m_MaxDepth=val; }
void CWUScopeFilter::setScopes(StringArray &val){ m_Scopes->kill();  CloneArray(m_Scopes.getValue(), val); }
void CWUScopeFilter::setIds(StringArray &val){ m_Ids->kill();  CloneArray(m_Ids.getValue(), val); }
void CWUScopeFilter::setScopeTypes(StringArray &val){ m_ScopeTypes->kill();  CloneArray(m_ScopeTypes.getValue(), val); }
void CWUScopeFilter::setPropertyFilters(IArrayOf<IEspWUPropertyFilter> &val)
{
	m_PropertyFilters->kill();
	IArrayOf<IConstWUPropertyFilter> &target = m_PropertyFilters.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUPropertyFilter &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUScopeFilter::setPropertyFilters(IArrayOf<IConstWUPropertyFilter> &val)
{
	m_PropertyFilters->kill();
	IArrayOf<IConstWUPropertyFilter> &target = m_PropertyFilters.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUPropertyFilter &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUScopeFilter *createWUScopeFilter(const char *serv, const char *msgname){return ((IEspWUScopeFilter *)new CWUScopeFilter(serv /*, msgname*/));}
extern "C"  IClientWUScopeFilter *createClientWUScopeFilter(const char *serv, const char *msgname){return ((IClientWUScopeFilter *)new CWUScopeFilter(serv /*, msgname*/));}

//=======================================================
// class CWUNestedFilter Implementation
//=======================================================

CWUNestedFilter::CWUNestedFilter(const char *serviceName, IRpcMessageBinding *init)
	: m_Depth(9999, nilIgnore,false),m_ScopeTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUNestedFilter");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUNestedFilter::CWUNestedFilter(const char *serviceName, const char *bc)
	: m_Depth(9999, nilIgnore,false),m_ScopeTypes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUNestedFilter");
}

StringBuffer &CWUNestedFilter::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"9999\" name=\"Depth\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeTypes\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"ScopeType\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUNestedFilter::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUNestedFilter::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUNestedFilter::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Depth");
	form.appendf("  <tr><td><b>Depth: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"9999\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeTypes");
	form.appendf("<tr><td><b>ScopeTypes: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUNestedFilter::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUNestedFilter::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Depth.marshall(rpc_resp, "Depth", "", "", "");
	m_ScopeTypes.marshall(rpc_resp, "ScopeTypes", "ScopeType");
}


void CWUNestedFilter::copy(CWUNestedFilter &from)
{
	m_Depth.copy(from.m_Depth);
	m_ScopeTypes.copy(from.m_ScopeTypes);
}


void CWUNestedFilter::copy(IConstWUNestedFilter &ifrom)
{
	setDepth(ifrom.getDepth());
	setScopeTypes(ifrom.getScopeTypes());
}


void CWUNestedFilter::getAttributes(IProperties &attributes)
{
}


void CWUNestedFilter::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Depth.toStr(ctx, buffer, "Depth", "", true, "", "");
	m_ScopeTypes.toStr(ctx, buffer, "ScopeTypes", "ScopeType");
}


void CWUNestedFilter::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUNestedFilter::serializer(IEspContext* ctx, IConstWUNestedFilter &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUNestedFilter>");
	// field Depth
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=Depth
		buffer.append("<Depth>");
		buffer.append(src.getDepth());
		buffer.append("</Depth>");
	}
	// field ScopeTypes
	{
		StringArray& v = src.getScopeTypes();
		if (v.length()>0)
			buffer.append("<ScopeTypes>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<ScopeType>%s</ScopeType>",v.item(i));
		if (v.length()>0)
			buffer.append("</ScopeTypes>");
	}
	if (keepRootTag)
		buffer.append("</WUNestedFilter>");
}

bool CWUNestedFilter::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Depth.unmarshall(rpc_request, "Depth", basepath);
	hasValue |= m_ScopeTypes.unmarshall(rpc_request, "ScopeTypes", basepath);
	return hasValue;
}

bool CWUNestedFilter::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Depth.unmarshall(ctx, soapval, "Depth");
	hasValue |= m_ScopeTypes.unmarshall(ctx, soapval, "ScopeTypes");
	return hasValue;
}

bool CWUNestedFilter::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Depth.unmarshall(ctx, params, attachments, "Depth", basepath);
	hasValue |= m_ScopeTypes.unmarshall(ctx, params, attachments, "ScopeTypes", basepath);
	return hasValue;
}

unsigned int CWUNestedFilter::getDepth() { return m_Depth;}
StringArray & CWUNestedFilter::getScopeTypes() { return (StringArray &) m_ScopeTypes; }
void CWUNestedFilter::setDepth(unsigned int val){ m_Depth=val; }
void CWUNestedFilter::setScopeTypes(StringArray &val){ m_ScopeTypes->kill();  CloneArray(m_ScopeTypes.getValue(), val); }
extern "C"  IEspWUNestedFilter *createWUNestedFilter(const char *serv, const char *msgname){return ((IEspWUNestedFilter *)new CWUNestedFilter(serv /*, msgname*/));}
extern "C"  IClientWUNestedFilter *createClientWUNestedFilter(const char *serv, const char *msgname){return ((IClientWUNestedFilter *)new CWUNestedFilter(serv /*, msgname*/));}

//=======================================================
// class CWUExtraProperties Implementation
//=======================================================

CWUExtraProperties::CWUExtraProperties(const char *serviceName, IRpcMessageBinding *init)
	: m_scopeType(nilIgnore),m_Properties(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExtraProperties");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUExtraProperties::CWUExtraProperties(const char *serviceName, const char *bc)
	: m_scopeType(nilIgnore),m_Properties(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUExtraProperties");
}

StringBuffer &CWUExtraProperties::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"scopeType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Properties\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"Property\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUExtraProperties::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUExtraProperties::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUExtraProperties::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("scopeType");
	form.appendf("  <tr><td><b>scopeType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Properties");
	form.appendf("<tr><td><b>Properties: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUExtraProperties::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUExtraProperties::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_scopeType.marshall(rpc_resp, "scopeType", "", "", "");
	m_Properties.marshall(rpc_resp, "Properties", "Property");
}


void CWUExtraProperties::copy(CWUExtraProperties &from)
{
	m_scopeType.copy(from.m_scopeType);
	m_Properties.copy(from.m_Properties);
}


void CWUExtraProperties::copy(IConstWUExtraProperties &ifrom)
{
	setScopeType(ifrom.getScopeType());
	setProperties(ifrom.getProperties());
}


void CWUExtraProperties::getAttributes(IProperties &attributes)
{
}


void CWUExtraProperties::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_scopeType.toStr(ctx, buffer, "scopeType", "", true, "", "");
	m_Properties.toStr(ctx, buffer, "Properties", "Property");
}


void CWUExtraProperties::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUExtraProperties::serializer(IEspContext* ctx, IConstWUExtraProperties &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUExtraProperties>");
	// field scopeType
	{
		const char* s = src.getScopeType();
		if (s && *s)
		{
			buffer.append("<scopeType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</scopeType>");
		}
	}
	// field Properties
	{
		StringArray& v = src.getProperties();
		if (v.length()>0)
			buffer.append("<Properties>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Property>%s</Property>",v.item(i));
		if (v.length()>0)
			buffer.append("</Properties>");
	}
	if (keepRootTag)
		buffer.append("</WUExtraProperties>");
}

bool CWUExtraProperties::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_scopeType.unmarshall(rpc_request, "scopeType", basepath);
	hasValue |= m_Properties.unmarshall(rpc_request, "Properties", basepath);
	return hasValue;
}

bool CWUExtraProperties::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_scopeType.unmarshall(ctx, soapval, "scopeType");
	hasValue |= m_Properties.unmarshall(ctx, soapval, "Properties");
	return hasValue;
}

bool CWUExtraProperties::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_scopeType.unmarshall(ctx, params, attachments, "scopeType", basepath);
	hasValue |= m_Properties.unmarshall(ctx, params, attachments, "Properties", basepath);
	return hasValue;
}

const char * CWUExtraProperties::getScopeType() { return m_scopeType.query();}
StringArray & CWUExtraProperties::getProperties() { return (StringArray &) m_Properties; }
void CWUExtraProperties::setScopeType(const char * val){ m_scopeType.set(val); }
void CWUExtraProperties::setProperties(StringArray &val){ m_Properties->kill();  CloneArray(m_Properties.getValue(), val); }
extern "C"  IEspWUExtraProperties *createWUExtraProperties(const char *serv, const char *msgname){return ((IEspWUExtraProperties *)new CWUExtraProperties(serv /*, msgname*/));}
extern "C"  IClientWUExtraProperties *createClientWUExtraProperties(const char *serv, const char *msgname){return ((IClientWUExtraProperties *)new CWUExtraProperties(serv /*, msgname*/));}

//=======================================================
// class CWUPropertiesToReturn Implementation
//=======================================================

CWUPropertiesToReturn::CWUPropertiesToReturn(const char *serviceName, IRpcMessageBinding *init)
	: m_AllStatistics(0, nilIgnore,false),m_AllAttributes(0, nilIgnore,false),m_AllHints(0, nilIgnore,false),m_AllScopes(0, nilIgnore,false),m_AllProperties(0, nilIgnore,false),m_MinVersion(nilIgnore),m_Measure(nilIgnore),m_Properties(nilIgnore),m_ExtraProperties(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPropertiesToReturn");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUPropertiesToReturn::CWUPropertiesToReturn(const char *serviceName, const char *bc)
	: m_AllStatistics(0, nilIgnore,false),m_AllAttributes(0, nilIgnore,false),m_AllHints(0, nilIgnore,false),m_AllScopes(0, nilIgnore,false),m_AllProperties(0, nilIgnore,false),m_MinVersion(nilIgnore),m_Measure(nilIgnore),m_Properties(nilIgnore),m_ExtraProperties(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPropertiesToReturn");
}

StringBuffer &CWUPropertiesToReturn::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllStatistics\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllAttributes\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllHints\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllScopes\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllProperties\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MinVersion\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Measure\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Properties\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"Property\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ExtraProperties\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Extra\" type=\"tns:WUExtraProperties\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUExtraProperties::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUPropertiesToReturn::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUPropertiesToReturn::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUExtraProperties"))
	{
		added.setValue("WUExtraProperties",1);
		CWUExtraProperties::getMapInfo(info,added);
	}
}

StringBuffer &CWUPropertiesToReturn::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllStatistics");
	
	form.appendf("  <tr><td><b>AllStatistics? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllAttributes");
	
	form.appendf("  <tr><td><b>AllAttributes? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllHints");
	
	form.appendf("  <tr><td><b>AllHints? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllScopes");
	
	form.appendf("  <tr><td><b>AllScopes? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllProperties");
	
	form.appendf("  <tr><td><b>AllProperties? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MinVersion");
	form.appendf("  <tr><td><b>MinVersion: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Measure");
	form.appendf("  <tr><td><b>Measure: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Properties");
	form.appendf("<tr><td><b>Properties: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ExtraProperties");
	form.appendf("<tr><td><b>ExtraProperties: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUPropertiesToReturn::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUPropertiesToReturn::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_AllStatistics.marshall(rpc_resp, "AllStatistics", "", "", "");
	m_AllAttributes.marshall(rpc_resp, "AllAttributes", "", "", "");
	m_AllHints.marshall(rpc_resp, "AllHints", "", "", "");
	m_AllScopes.marshall(rpc_resp, "AllScopes", "", "", "");
	m_AllProperties.marshall(rpc_resp, "AllProperties", "", "", "");
	m_MinVersion.marshall(rpc_resp, "MinVersion", "", "", "");
	m_Measure.marshall(rpc_resp, "Measure", "", "", "");
	m_Properties.marshall(rpc_resp, "Properties", "Property");
	m_ExtraProperties.marshall(rpc_resp, "ExtraProperties", "Extra");
}


void CWUPropertiesToReturn::copy(CWUPropertiesToReturn &from)
{
	m_AllStatistics.copy(from.m_AllStatistics);
	m_AllAttributes.copy(from.m_AllAttributes);
	m_AllHints.copy(from.m_AllHints);
	m_AllScopes.copy(from.m_AllScopes);
	m_AllProperties.copy(from.m_AllProperties);
	m_MinVersion.copy(from.m_MinVersion);
	m_Measure.copy(from.m_Measure);
	m_Properties.copy(from.m_Properties);
	m_ExtraProperties.copy(from.m_ExtraProperties);
}


void CWUPropertiesToReturn::copy(IConstWUPropertiesToReturn &ifrom)
{
	setAllStatistics(ifrom.getAllStatistics());
	setAllAttributes(ifrom.getAllAttributes());
	setAllHints(ifrom.getAllHints());
	setAllScopes(ifrom.getAllScopes());
	setAllProperties(ifrom.getAllProperties());
	setMinVersion(ifrom.getMinVersion());
	setMeasure(ifrom.getMeasure());
	setProperties(ifrom.getProperties());
	setExtraProperties(ifrom.getExtraProperties());
}


void CWUPropertiesToReturn::getAttributes(IProperties &attributes)
{
}


void CWUPropertiesToReturn::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_AllStatistics.toStr(ctx, buffer, "AllStatistics", "", true, "", "");
	m_AllAttributes.toStr(ctx, buffer, "AllAttributes", "", true, "", "");
	m_AllHints.toStr(ctx, buffer, "AllHints", "", true, "", "");
	m_AllScopes.toStr(ctx, buffer, "AllScopes", "", true, "", "");
	m_AllProperties.toStr(ctx, buffer, "AllProperties", "", true, "", "");
	m_MinVersion.toStr(ctx, buffer, "MinVersion", "", true, "", "");
	m_Measure.toStr(ctx, buffer, "Measure", "", true, "", "");
	m_Properties.toStr(ctx, buffer, "Properties", "Property");
	m_ExtraProperties.toStr(ctx, buffer, "ExtraProperties", "Extra");
}


void CWUPropertiesToReturn::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUPropertiesToReturn::serializer(IEspContext* ctx, IConstWUPropertiesToReturn &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUPropertiesToReturn>");
	// field AllStatistics
	{
		bool b = src.getAllStatistics();
		if (b)
			buffer.appendf("<AllStatistics>1</AllStatistics>");
	}
	// field AllAttributes
	{
		bool b = src.getAllAttributes();
		if (b)
			buffer.appendf("<AllAttributes>1</AllAttributes>");
	}
	// field AllHints
	{
		bool b = src.getAllHints();
		if (b)
			buffer.appendf("<AllHints>1</AllHints>");
	}
	// field AllScopes
	{
		bool b = src.getAllScopes();
		if (b)
			buffer.appendf("<AllScopes>1</AllScopes>");
	}
	// field AllProperties
	{
		bool b = src.getAllProperties();
		if (b)
			buffer.appendf("<AllProperties>1</AllProperties>");
	}
	// field MinVersion
	{
		const char* s = src.getMinVersion();
		if (s && *s)
		{
			buffer.append("<MinVersion>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MinVersion>");
		}
	}
	// field Measure
	{
		const char* s = src.getMeasure();
		if (s && *s)
		{
			buffer.append("<Measure>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Measure>");
		}
	}
	// field Properties
	{
		StringArray& v = src.getProperties();
		if (v.length()>0)
			buffer.append("<Properties>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Property>%s</Property>",v.item(i));
		if (v.length()>0)
			buffer.append("</Properties>");
	}
	// field ExtraProperties
	{
		IArrayOf<IConstWUExtraProperties>& v = src.getExtraProperties();
		int size = v.length();
		if (size>0)
			buffer.append("<ExtraProperties>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Extra>");
			CWUExtraProperties::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Extra>");
		}
		if (size>0)
			buffer.append("</ExtraProperties>");
	}
	if (keepRootTag)
		buffer.append("</WUPropertiesToReturn>");
}

bool CWUPropertiesToReturn::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_AllStatistics.unmarshall(rpc_request, "AllStatistics", basepath);
	hasValue |= m_AllAttributes.unmarshall(rpc_request, "AllAttributes", basepath);
	hasValue |= m_AllHints.unmarshall(rpc_request, "AllHints", basepath);
	hasValue |= m_AllScopes.unmarshall(rpc_request, "AllScopes", basepath);
	hasValue |= m_AllProperties.unmarshall(rpc_request, "AllProperties", basepath);
	hasValue |= m_MinVersion.unmarshall(rpc_request, "MinVersion", basepath);
	hasValue |= m_Measure.unmarshall(rpc_request, "Measure", basepath);
	hasValue |= m_Properties.unmarshall(rpc_request, "Properties", basepath);
	hasValue |= m_ExtraProperties.unmarshall(rpc_request, "ExtraProperties", basepath);
	return hasValue;
}

bool CWUPropertiesToReturn::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_AllStatistics.unmarshall(ctx, soapval, "AllStatistics");
	hasValue |= m_AllAttributes.unmarshall(ctx, soapval, "AllAttributes");
	hasValue |= m_AllHints.unmarshall(ctx, soapval, "AllHints");
	hasValue |= m_AllScopes.unmarshall(ctx, soapval, "AllScopes");
	hasValue |= m_AllProperties.unmarshall(ctx, soapval, "AllProperties");
	hasValue |= m_MinVersion.unmarshall(ctx, soapval, "MinVersion");
	hasValue |= m_Measure.unmarshall(ctx, soapval, "Measure");
	hasValue |= m_Properties.unmarshall(ctx, soapval, "Properties");
	hasValue |= m_ExtraProperties.unmarshall(ctx, soapval, "ExtraProperties");
	return hasValue;
}

bool CWUPropertiesToReturn::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_AllStatistics.unmarshall(ctx, params, attachments, "AllStatistics", basepath);
	hasValue |= m_AllAttributes.unmarshall(ctx, params, attachments, "AllAttributes", basepath);
	hasValue |= m_AllHints.unmarshall(ctx, params, attachments, "AllHints", basepath);
	hasValue |= m_AllScopes.unmarshall(ctx, params, attachments, "AllScopes", basepath);
	hasValue |= m_AllProperties.unmarshall(ctx, params, attachments, "AllProperties", basepath);
	hasValue |= m_MinVersion.unmarshall(ctx, params, attachments, "MinVersion", basepath);
	hasValue |= m_Measure.unmarshall(ctx, params, attachments, "Measure", basepath);
	hasValue |= m_Properties.unmarshall(ctx, params, attachments, "Properties", basepath);
	hasValue |= m_ExtraProperties.unmarshall(ctx, params, attachments, "ExtraProperties", basepath);
	return hasValue;
}

bool CWUPropertiesToReturn::getAllStatistics() { return m_AllStatistics;}
bool CWUPropertiesToReturn::getAllAttributes() { return m_AllAttributes;}
bool CWUPropertiesToReturn::getAllHints() { return m_AllHints;}
bool CWUPropertiesToReturn::getAllScopes() { return m_AllScopes;}
bool CWUPropertiesToReturn::getAllProperties() { return m_AllProperties;}
const char * CWUPropertiesToReturn::getMinVersion() { return m_MinVersion.query();}
const char * CWUPropertiesToReturn::getMeasure() { return m_Measure.query();}
StringArray & CWUPropertiesToReturn::getProperties() { return (StringArray &) m_Properties; }
IArrayOf<IConstWUExtraProperties> & CWUPropertiesToReturn::getExtraProperties() { return (IArrayOf<IConstWUExtraProperties> &) m_ExtraProperties; }
void CWUPropertiesToReturn::setAllStatistics(bool val){ m_AllStatistics=val; }
void CWUPropertiesToReturn::setAllAttributes(bool val){ m_AllAttributes=val; }
void CWUPropertiesToReturn::setAllHints(bool val){ m_AllHints=val; }
void CWUPropertiesToReturn::setAllScopes(bool val){ m_AllScopes=val; }
void CWUPropertiesToReturn::setAllProperties(bool val){ m_AllProperties=val; }
void CWUPropertiesToReturn::setMinVersion(const char * val){ m_MinVersion.set(val); }
void CWUPropertiesToReturn::setMeasure(const char * val){ m_Measure.set(val); }
void CWUPropertiesToReturn::setProperties(StringArray &val){ m_Properties->kill();  CloneArray(m_Properties.getValue(), val); }
void CWUPropertiesToReturn::setExtraProperties(IArrayOf<IEspWUExtraProperties> &val)
{
	m_ExtraProperties->kill();
	IArrayOf<IConstWUExtraProperties> &target = m_ExtraProperties.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUExtraProperties &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUPropertiesToReturn::setExtraProperties(IArrayOf<IConstWUExtraProperties> &val)
{
	m_ExtraProperties->kill();
	IArrayOf<IConstWUExtraProperties> &target = m_ExtraProperties.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUExtraProperties &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUPropertiesToReturn *createWUPropertiesToReturn(const char *serv, const char *msgname){return ((IEspWUPropertiesToReturn *)new CWUPropertiesToReturn(serv /*, msgname*/));}
extern "C"  IClientWUPropertiesToReturn *createClientWUPropertiesToReturn(const char *serv, const char *msgname){return ((IClientWUPropertiesToReturn *)new CWUPropertiesToReturn(serv /*, msgname*/));}

//=======================================================
// class CWUScopeOptions Implementation
//=======================================================

CWUScopeOptions::CWUScopeOptions(const char *serviceName, IRpcMessageBinding *init)
	: m_IncludeMatchedScopesInResults(1, nilIgnore,false),m_IncludeScope(1, nilIgnore,false),m_IncludeId(0, nilIgnore,false),m_IncludeScopeType(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScopeOptions");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUScopeOptions::CWUScopeOptions(const char *serviceName, const char *bc)
	: m_IncludeMatchedScopesInResults(1, nilIgnore,false),m_IncludeScope(1, nilIgnore,false),m_IncludeId(0, nilIgnore,false),m_IncludeScopeType(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUScopeOptions");
}

StringBuffer &CWUScopeOptions::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeMatchedScopesInResults\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeScope\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeId\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeScopeType\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUScopeOptions::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUScopeOptions::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUScopeOptions::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeMatchedScopesInResults");
	
	form.appendf("  <tr><td><b>IncludeMatchedScopesInResults? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeScope");
	
	form.appendf("  <tr><td><b>IncludeScope? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeId");
	
	form.appendf("  <tr><td><b>IncludeId? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeScopeType");
	
	form.appendf("  <tr><td><b>IncludeScopeType? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUScopeOptions::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUScopeOptions::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_IncludeMatchedScopesInResults.marshall(rpc_resp, "IncludeMatchedScopesInResults", "", "", "");
	m_IncludeScope.marshall(rpc_resp, "IncludeScope", "", "", "");
	m_IncludeId.marshall(rpc_resp, "IncludeId", "", "", "");
	m_IncludeScopeType.marshall(rpc_resp, "IncludeScopeType", "", "", "");
}


void CWUScopeOptions::copy(CWUScopeOptions &from)
{
	m_IncludeMatchedScopesInResults.copy(from.m_IncludeMatchedScopesInResults);
	m_IncludeScope.copy(from.m_IncludeScope);
	m_IncludeId.copy(from.m_IncludeId);
	m_IncludeScopeType.copy(from.m_IncludeScopeType);
}


void CWUScopeOptions::copy(IConstWUScopeOptions &ifrom)
{
	setIncludeMatchedScopesInResults(ifrom.getIncludeMatchedScopesInResults());
	setIncludeScope(ifrom.getIncludeScope());
	setIncludeId(ifrom.getIncludeId());
	setIncludeScopeType(ifrom.getIncludeScopeType());
}


void CWUScopeOptions::getAttributes(IProperties &attributes)
{
}


void CWUScopeOptions::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_IncludeMatchedScopesInResults.toStr(ctx, buffer, "IncludeMatchedScopesInResults", "", true, "", "");
	m_IncludeScope.toStr(ctx, buffer, "IncludeScope", "", true, "", "");
	m_IncludeId.toStr(ctx, buffer, "IncludeId", "", true, "", "");
	m_IncludeScopeType.toStr(ctx, buffer, "IncludeScopeType", "", true, "", "");
}


void CWUScopeOptions::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUScopeOptions::serializer(IEspContext* ctx, IConstWUScopeOptions &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUScopeOptions>");
	// field IncludeMatchedScopesInResults
	{
		bool b = src.getIncludeMatchedScopesInResults();
		if (b)
			buffer.appendf("<IncludeMatchedScopesInResults>1</IncludeMatchedScopesInResults>");
	}
	// field IncludeScope
	{
		bool b = src.getIncludeScope();
		if (b)
			buffer.appendf("<IncludeScope>1</IncludeScope>");
	}
	// field IncludeId
	{
		bool b = src.getIncludeId();
		if (b)
			buffer.appendf("<IncludeId>1</IncludeId>");
	}
	// field IncludeScopeType
	{
		bool b = src.getIncludeScopeType();
		if (b)
			buffer.appendf("<IncludeScopeType>1</IncludeScopeType>");
	}
	if (keepRootTag)
		buffer.append("</WUScopeOptions>");
}

bool CWUScopeOptions::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_IncludeMatchedScopesInResults.unmarshall(rpc_request, "IncludeMatchedScopesInResults", basepath);
	hasValue |= m_IncludeScope.unmarshall(rpc_request, "IncludeScope", basepath);
	hasValue |= m_IncludeId.unmarshall(rpc_request, "IncludeId", basepath);
	hasValue |= m_IncludeScopeType.unmarshall(rpc_request, "IncludeScopeType", basepath);
	return hasValue;
}

bool CWUScopeOptions::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_IncludeMatchedScopesInResults.unmarshall(ctx, soapval, "IncludeMatchedScopesInResults");
	hasValue |= m_IncludeScope.unmarshall(ctx, soapval, "IncludeScope");
	hasValue |= m_IncludeId.unmarshall(ctx, soapval, "IncludeId");
	hasValue |= m_IncludeScopeType.unmarshall(ctx, soapval, "IncludeScopeType");
	return hasValue;
}

bool CWUScopeOptions::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_IncludeMatchedScopesInResults.unmarshall(ctx, params, attachments, "IncludeMatchedScopesInResults", basepath);
	hasValue |= m_IncludeScope.unmarshall(ctx, params, attachments, "IncludeScope", basepath);
	hasValue |= m_IncludeId.unmarshall(ctx, params, attachments, "IncludeId", basepath);
	hasValue |= m_IncludeScopeType.unmarshall(ctx, params, attachments, "IncludeScopeType", basepath);
	return hasValue;
}

bool CWUScopeOptions::getIncludeMatchedScopesInResults() { return m_IncludeMatchedScopesInResults;}
bool CWUScopeOptions::getIncludeScope() { return m_IncludeScope;}
bool CWUScopeOptions::getIncludeId() { return m_IncludeId;}
bool CWUScopeOptions::getIncludeScopeType() { return m_IncludeScopeType;}
void CWUScopeOptions::setIncludeMatchedScopesInResults(bool val){ m_IncludeMatchedScopesInResults=val; }
void CWUScopeOptions::setIncludeScope(bool val){ m_IncludeScope=val; }
void CWUScopeOptions::setIncludeId(bool val){ m_IncludeId=val; }
void CWUScopeOptions::setIncludeScopeType(bool val){ m_IncludeScopeType=val; }
extern "C"  IEspWUScopeOptions *createWUScopeOptions(const char *serv, const char *msgname){return ((IEspWUScopeOptions *)new CWUScopeOptions(serv /*, msgname*/));}
extern "C"  IClientWUScopeOptions *createClientWUScopeOptions(const char *serv, const char *msgname){return ((IClientWUScopeOptions *)new CWUScopeOptions(serv /*, msgname*/));}

//=======================================================
// class CWUPropertyOptions Implementation
//=======================================================

CWUPropertyOptions::CWUPropertyOptions(const char *serviceName, IRpcMessageBinding *init)
	: m_IncludeName(1, nilIgnore,false),m_IncludeRawValue(0, nilIgnore,false),m_IncludeFormatted(1, nilIgnore,false),m_IncludeMeasure(1, nilIgnore,false),m_IncludeCreator(0, nilIgnore,false),m_IncludeCreatorType(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPropertyOptions");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUPropertyOptions::CWUPropertyOptions(const char *serviceName, const char *bc)
	: m_IncludeName(1, nilIgnore,false),m_IncludeRawValue(0, nilIgnore,false),m_IncludeFormatted(1, nilIgnore,false),m_IncludeMeasure(1, nilIgnore,false),m_IncludeCreator(0, nilIgnore,false),m_IncludeCreatorType(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUPropertyOptions");
}

StringBuffer &CWUPropertyOptions::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeName\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeRawValue\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeFormatted\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"true\" name=\"IncludeMeasure\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeCreator\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"IncludeCreatorType\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUPropertyOptions::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUPropertyOptions::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUPropertyOptions::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeName");
	
	form.appendf("  <tr><td><b>IncludeName? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeRawValue");
	
	form.appendf("  <tr><td><b>IncludeRawValue? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeFormatted");
	
	form.appendf("  <tr><td><b>IncludeFormatted? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeMeasure");
	
	form.appendf("  <tr><td><b>IncludeMeasure? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\" checked=\"1\" /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeCreator");
	
	form.appendf("  <tr><td><b>IncludeCreator? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IncludeCreatorType");
	
	form.appendf("  <tr><td><b>IncludeCreatorType? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUPropertyOptions::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUPropertyOptions::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_IncludeName.marshall(rpc_resp, "IncludeName", "", "", "");
	m_IncludeRawValue.marshall(rpc_resp, "IncludeRawValue", "", "", "");
	m_IncludeFormatted.marshall(rpc_resp, "IncludeFormatted", "", "", "");
	m_IncludeMeasure.marshall(rpc_resp, "IncludeMeasure", "", "", "");
	m_IncludeCreator.marshall(rpc_resp, "IncludeCreator", "", "", "");
	m_IncludeCreatorType.marshall(rpc_resp, "IncludeCreatorType", "", "", "");
}


void CWUPropertyOptions::copy(CWUPropertyOptions &from)
{
	m_IncludeName.copy(from.m_IncludeName);
	m_IncludeRawValue.copy(from.m_IncludeRawValue);
	m_IncludeFormatted.copy(from.m_IncludeFormatted);
	m_IncludeMeasure.copy(from.m_IncludeMeasure);
	m_IncludeCreator.copy(from.m_IncludeCreator);
	m_IncludeCreatorType.copy(from.m_IncludeCreatorType);
}


void CWUPropertyOptions::copy(IConstWUPropertyOptions &ifrom)
{
	setIncludeName(ifrom.getIncludeName());
	setIncludeRawValue(ifrom.getIncludeRawValue());
	setIncludeFormatted(ifrom.getIncludeFormatted());
	setIncludeMeasure(ifrom.getIncludeMeasure());
	setIncludeCreator(ifrom.getIncludeCreator());
	setIncludeCreatorType(ifrom.getIncludeCreatorType());
}


void CWUPropertyOptions::getAttributes(IProperties &attributes)
{
}


void CWUPropertyOptions::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_IncludeName.toStr(ctx, buffer, "IncludeName", "", true, "", "");
	m_IncludeRawValue.toStr(ctx, buffer, "IncludeRawValue", "", true, "", "");
	m_IncludeFormatted.toStr(ctx, buffer, "IncludeFormatted", "", true, "", "");
	m_IncludeMeasure.toStr(ctx, buffer, "IncludeMeasure", "", true, "", "");
	m_IncludeCreator.toStr(ctx, buffer, "IncludeCreator", "", true, "", "");
	m_IncludeCreatorType.toStr(ctx, buffer, "IncludeCreatorType", "", true, "", "");
}


void CWUPropertyOptions::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUPropertyOptions::serializer(IEspContext* ctx, IConstWUPropertyOptions &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUPropertyOptions>");
	// field IncludeName
	{
		bool b = src.getIncludeName();
		if (b)
			buffer.appendf("<IncludeName>1</IncludeName>");
	}
	// field IncludeRawValue
	{
		bool b = src.getIncludeRawValue();
		if (b)
			buffer.appendf("<IncludeRawValue>1</IncludeRawValue>");
	}
	// field IncludeFormatted
	{
		bool b = src.getIncludeFormatted();
		if (b)
			buffer.appendf("<IncludeFormatted>1</IncludeFormatted>");
	}
	// field IncludeMeasure
	{
		bool b = src.getIncludeMeasure();
		if (b)
			buffer.appendf("<IncludeMeasure>1</IncludeMeasure>");
	}
	// field IncludeCreator
	{
		bool b = src.getIncludeCreator();
		if (b)
			buffer.appendf("<IncludeCreator>1</IncludeCreator>");
	}
	// field IncludeCreatorType
	{
		bool b = src.getIncludeCreatorType();
		if (b)
			buffer.appendf("<IncludeCreatorType>1</IncludeCreatorType>");
	}
	if (keepRootTag)
		buffer.append("</WUPropertyOptions>");
}

bool CWUPropertyOptions::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_IncludeName.unmarshall(rpc_request, "IncludeName", basepath);
	hasValue |= m_IncludeRawValue.unmarshall(rpc_request, "IncludeRawValue", basepath);
	hasValue |= m_IncludeFormatted.unmarshall(rpc_request, "IncludeFormatted", basepath);
	hasValue |= m_IncludeMeasure.unmarshall(rpc_request, "IncludeMeasure", basepath);
	hasValue |= m_IncludeCreator.unmarshall(rpc_request, "IncludeCreator", basepath);
	hasValue |= m_IncludeCreatorType.unmarshall(rpc_request, "IncludeCreatorType", basepath);
	return hasValue;
}

bool CWUPropertyOptions::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_IncludeName.unmarshall(ctx, soapval, "IncludeName");
	hasValue |= m_IncludeRawValue.unmarshall(ctx, soapval, "IncludeRawValue");
	hasValue |= m_IncludeFormatted.unmarshall(ctx, soapval, "IncludeFormatted");
	hasValue |= m_IncludeMeasure.unmarshall(ctx, soapval, "IncludeMeasure");
	hasValue |= m_IncludeCreator.unmarshall(ctx, soapval, "IncludeCreator");
	hasValue |= m_IncludeCreatorType.unmarshall(ctx, soapval, "IncludeCreatorType");
	return hasValue;
}

bool CWUPropertyOptions::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_IncludeName.unmarshall(ctx, params, attachments, "IncludeName", basepath);
	hasValue |= m_IncludeRawValue.unmarshall(ctx, params, attachments, "IncludeRawValue", basepath);
	hasValue |= m_IncludeFormatted.unmarshall(ctx, params, attachments, "IncludeFormatted", basepath);
	hasValue |= m_IncludeMeasure.unmarshall(ctx, params, attachments, "IncludeMeasure", basepath);
	hasValue |= m_IncludeCreator.unmarshall(ctx, params, attachments, "IncludeCreator", basepath);
	hasValue |= m_IncludeCreatorType.unmarshall(ctx, params, attachments, "IncludeCreatorType", basepath);
	return hasValue;
}

bool CWUPropertyOptions::getIncludeName() { return m_IncludeName;}
bool CWUPropertyOptions::getIncludeRawValue() { return m_IncludeRawValue;}
bool CWUPropertyOptions::getIncludeFormatted() { return m_IncludeFormatted;}
bool CWUPropertyOptions::getIncludeMeasure() { return m_IncludeMeasure;}
bool CWUPropertyOptions::getIncludeCreator() { return m_IncludeCreator;}
bool CWUPropertyOptions::getIncludeCreatorType() { return m_IncludeCreatorType;}
void CWUPropertyOptions::setIncludeName(bool val){ m_IncludeName=val; }
void CWUPropertyOptions::setIncludeRawValue(bool val){ m_IncludeRawValue=val; }
void CWUPropertyOptions::setIncludeFormatted(bool val){ m_IncludeFormatted=val; }
void CWUPropertyOptions::setIncludeMeasure(bool val){ m_IncludeMeasure=val; }
void CWUPropertyOptions::setIncludeCreator(bool val){ m_IncludeCreator=val; }
void CWUPropertyOptions::setIncludeCreatorType(bool val){ m_IncludeCreatorType=val; }
extern "C"  IEspWUPropertyOptions *createWUPropertyOptions(const char *serv, const char *msgname){return ((IEspWUPropertyOptions *)new CWUPropertyOptions(serv /*, msgname*/));}
extern "C"  IClientWUPropertyOptions *createClientWUPropertyOptions(const char *serv, const char *msgname){return ((IClientWUPropertyOptions *)new CWUPropertyOptions(serv /*, msgname*/));}

//=======================================================
// class CWUDetailsRequest Implementation
//=======================================================

CWUDetailsRequest::CWUDetailsRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_WUID(nilIgnore),m_ScopeFilter(serviceName, nilIgnore),m_NestedFilter(serviceName, nilIgnore),m_PropertiesToReturn(serviceName, nilIgnore),m_Filter(nilIgnore),m_ScopeOptions(serviceName, nilIgnore),m_PropertyOptions(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDetailsRequest::CWUDetailsRequest(const char *serviceName, const char *bc)
	: m_WUID(nilIgnore),m_ScopeFilter(serviceName, nilIgnore),m_NestedFilter(serviceName, nilIgnore),m_PropertiesToReturn(serviceName, nilIgnore),m_Filter(nilIgnore),m_ScopeOptions(serviceName, nilIgnore),m_PropertyOptions(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsRequest");
}

CWUDetailsRequest::CWUDetailsRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_WUID(nilIgnore),m_ScopeFilter(serviceName, nilIgnore),m_NestedFilter(serviceName, nilIgnore),m_PropertiesToReturn(serviceName, nilIgnore),m_Filter(nilIgnore),m_ScopeOptions(serviceName, nilIgnore),m_PropertyOptions(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDetailsRequest::CWUDetailsRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_WUID(nilIgnore),m_ScopeFilter(serviceName, nilIgnore),m_NestedFilter(serviceName, nilIgnore),m_PropertiesToReturn(serviceName, nilIgnore),m_Filter(nilIgnore),m_ScopeOptions(serviceName, nilIgnore),m_PropertyOptions(serviceName, nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDetailsRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeFilter\" type=\"tns:WUScopeFilter\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"NestedFilter\" type=\"tns:WUNestedFilter\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PropertiesToReturn\" type=\"tns:WUPropertiesToReturn\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Filter\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeOptions\" type=\"tns:WUScopeOptions\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"PropertyOptions\" type=\"tns:WUPropertyOptions\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUScopeFilter::getXsdDefinition(context, request, schema, added);
		CWUNestedFilter::getXsdDefinition(context, request, schema, added);
		CWUPropertiesToReturn::getXsdDefinition(context, request, schema, added);
		CWUScopeOptions::getXsdDefinition(context, request, schema, added);
		CWUPropertyOptions::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUDetailsRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDetailsRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUNestedFilter"))
	{
		added.setValue("WUNestedFilter",1);
		CWUNestedFilter::getMapInfo(info,added);
	}
	if (!added.getValue("WUPropertiesToReturn"))
	{
		added.setValue("WUPropertiesToReturn",1);
		CWUPropertiesToReturn::getMapInfo(info,added);
	}
	if (!added.getValue("WUPropertyOptions"))
	{
		added.setValue("WUPropertyOptions",1);
		CWUPropertyOptions::getMapInfo(info,added);
	}
	if (!added.getValue("WUScopeFilter"))
	{
		added.setValue("WUScopeFilter",1);
		CWUScopeFilter::getMapInfo(info,added);
	}
	if (!added.getValue("WUScopeOptions"))
	{
		added.setValue("WUScopeOptions",1);
		CWUScopeOptions::getMapInfo(info,added);
	}
}

StringBuffer &CWUDetailsRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeFilter");
	form.append("<tr>").append("<td><b>ScopeFilter: </b></td><td><hr/>");
	CWUScopeFilter::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NestedFilter");
	form.append("<tr>").append("<td><b>NestedFilter: </b></td><td><hr/>");
	CWUNestedFilter::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PropertiesToReturn");
	form.append("<tr>").append("<td><b>PropertiesToReturn: </b></td><td><hr/>");
	CWUPropertiesToReturn::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Filter");
	form.appendf("  <tr><td><b>Filter: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeOptions");
	form.append("<tr>").append("<td><b>ScopeOptions: </b></td><td><hr/>");
	CWUScopeOptions::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("PropertyOptions");
	form.append("<tr>").append("<td><b>PropertyOptions: </b></td><td><hr/>");
	CWUPropertyOptions::getHtmlForm(context, request, serv, method, form, false, extfix.str());
	form.append("<hr/></td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDetailsRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDetailsRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_WUID.marshall(rpc_resp, "WUID", "", "", "");
	m_ScopeFilter.marshall(rpc_resp, "ScopeFilter", "", "", "");
	m_NestedFilter.marshall(rpc_resp, "NestedFilter", "", "", "");
	m_PropertiesToReturn.marshall(rpc_resp, "PropertiesToReturn", "", "", "");
	m_Filter.marshall(rpc_resp, "Filter", "", "", "");
	m_ScopeOptions.marshall(rpc_resp, "ScopeOptions", "", "", "");
	m_PropertyOptions.marshall(rpc_resp, "PropertyOptions", "", "", "");
}


void CWUDetailsRequest::copy(CWUDetailsRequest &from)
{
	m_WUID.copy(from.m_WUID);
	m_ScopeFilter.copy(from.m_ScopeFilter);
	m_NestedFilter.copy(from.m_NestedFilter);
	m_PropertiesToReturn.copy(from.m_PropertiesToReturn);
	m_Filter.copy(from.m_Filter);
	m_ScopeOptions.copy(from.m_ScopeOptions);
	m_PropertyOptions.copy(from.m_PropertyOptions);
}


void CWUDetailsRequest::copy(IConstWUDetailsRequest &ifrom)
{
	setWUID(ifrom.getWUID());
	setScopeFilter(ifrom.getScopeFilter());
	setNestedFilter(ifrom.getNestedFilter());
	setPropertiesToReturn(ifrom.getPropertiesToReturn());
	setFilter(ifrom.getFilter());
	setScopeOptions(ifrom.getScopeOptions());
	setPropertyOptions(ifrom.getPropertyOptions());
}


void CWUDetailsRequest::getAttributes(IProperties &attributes)
{
}


void CWUDetailsRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
	m_ScopeFilter.toStr(ctx, buffer, "ScopeFilter", "", false, "", "");
	m_NestedFilter.toStr(ctx, buffer, "NestedFilter", "", false, "", "");
	m_PropertiesToReturn.toStr(ctx, buffer, "PropertiesToReturn", "", false, "", "");
	m_Filter.toStr(ctx, buffer, "Filter", "", true, "", "");
	m_ScopeOptions.toStr(ctx, buffer, "ScopeOptions", "", false, "", "");
	m_PropertyOptions.toStr(ctx, buffer, "PropertyOptions", "", false, "", "");
}


void CWUDetailsRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDetailsRequest::serializer(IEspContext* ctx, IConstWUDetailsRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDetailsRequest>");
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field ScopeFilter
	{
		StringBuffer tmp;
		CWUScopeFilter::serializer(ctx,src.getScopeFilter(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ScopeFilter>%s</ScopeFilter>",tmp.str());
	}
	// field NestedFilter
	{
		StringBuffer tmp;
		CWUNestedFilter::serializer(ctx,src.getNestedFilter(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<NestedFilter>%s</NestedFilter>",tmp.str());
	}
	// field PropertiesToReturn
	{
		StringBuffer tmp;
		CWUPropertiesToReturn::serializer(ctx,src.getPropertiesToReturn(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<PropertiesToReturn>%s</PropertiesToReturn>",tmp.str());
	}
	// field Filter
	{
		const char* s = src.getFilter();
		if (s && *s)
		{
			buffer.append("<Filter>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Filter>");
		}
	}
	// field ScopeOptions
	{
		StringBuffer tmp;
		CWUScopeOptions::serializer(ctx,src.getScopeOptions(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<ScopeOptions>%s</ScopeOptions>",tmp.str());
	}
	// field PropertyOptions
	{
		StringBuffer tmp;
		CWUPropertyOptions::serializer(ctx,src.getPropertyOptions(), tmp, false);
		if (tmp.length()>0)
			buffer.appendf("<PropertyOptions>%s</PropertyOptions>",tmp.str());
	}
	if (keepRootTag)
		buffer.append("</WUDetailsRequest>");
}

bool CWUDetailsRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	hasValue |= m_ScopeFilter.unmarshall(rpc_request, "ScopeFilter", basepath);
	hasValue |= m_NestedFilter.unmarshall(rpc_request, "NestedFilter", basepath);
	hasValue |= m_PropertiesToReturn.unmarshall(rpc_request, "PropertiesToReturn", basepath);
	hasValue |= m_Filter.unmarshall(rpc_request, "Filter", basepath);
	hasValue |= m_ScopeOptions.unmarshall(rpc_request, "ScopeOptions", basepath);
	hasValue |= m_PropertyOptions.unmarshall(rpc_request, "PropertyOptions", basepath);
	return hasValue;
}

bool CWUDetailsRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_ScopeFilter.unmarshall(ctx, soapval, "ScopeFilter");
	hasValue |= m_NestedFilter.unmarshall(ctx, soapval, "NestedFilter");
	hasValue |= m_PropertiesToReturn.unmarshall(ctx, soapval, "PropertiesToReturn");
	hasValue |= m_Filter.unmarshall(ctx, soapval, "Filter");
	hasValue |= m_ScopeOptions.unmarshall(ctx, soapval, "ScopeOptions");
	hasValue |= m_PropertyOptions.unmarshall(ctx, soapval, "PropertyOptions");
	return hasValue;
}

bool CWUDetailsRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_ScopeFilter.unmarshall(ctx, params, attachments, "ScopeFilter", basepath);
	hasValue |= m_NestedFilter.unmarshall(ctx, params, attachments, "NestedFilter", basepath);
	hasValue |= m_PropertiesToReturn.unmarshall(ctx, params, attachments, "PropertiesToReturn", basepath);
	hasValue |= m_Filter.unmarshall(ctx, params, attachments, "Filter", basepath);
	hasValue |= m_ScopeOptions.unmarshall(ctx, params, attachments, "ScopeOptions", basepath);
	hasValue |= m_PropertyOptions.unmarshall(ctx, params, attachments, "PropertyOptions", basepath);
	return hasValue;
}

const char * CWUDetailsRequest::getWUID() { return m_WUID.query();}
IConstWUScopeFilter & CWUDetailsRequest::getScopeFilter() { return (IConstWUScopeFilter &) m_ScopeFilter.getValue();}
IConstWUNestedFilter & CWUDetailsRequest::getNestedFilter() { return (IConstWUNestedFilter &) m_NestedFilter.getValue();}
IConstWUPropertiesToReturn & CWUDetailsRequest::getPropertiesToReturn() { return (IConstWUPropertiesToReturn &) m_PropertiesToReturn.getValue();}
const char * CWUDetailsRequest::getFilter() { return m_Filter.query();}
IConstWUScopeOptions & CWUDetailsRequest::getScopeOptions() { return (IConstWUScopeOptions &) m_ScopeOptions.getValue();}
IConstWUPropertyOptions & CWUDetailsRequest::getPropertyOptions() { return (IConstWUPropertyOptions &) m_PropertyOptions.getValue();}
void CWUDetailsRequest::setWUID(const char * val){ m_WUID.set(val); }
IEspWUScopeFilter & CWUDetailsRequest::updateScopeFilter(){ return (IEspWUScopeFilter &) m_ScopeFilter.getValue(); }
void CWUDetailsRequest::setScopeFilter(IConstWUScopeFilter &ifrom){ m_ScopeFilter.copy(ifrom); }
IEspWUNestedFilter & CWUDetailsRequest::updateNestedFilter(){ return (IEspWUNestedFilter &) m_NestedFilter.getValue(); }
void CWUDetailsRequest::setNestedFilter(IConstWUNestedFilter &ifrom){ m_NestedFilter.copy(ifrom); }
IEspWUPropertiesToReturn & CWUDetailsRequest::updatePropertiesToReturn(){ return (IEspWUPropertiesToReturn &) m_PropertiesToReturn.getValue(); }
void CWUDetailsRequest::setPropertiesToReturn(IConstWUPropertiesToReturn &ifrom){ m_PropertiesToReturn.copy(ifrom); }
void CWUDetailsRequest::setFilter(const char * val){ m_Filter.set(val); }
IEspWUScopeOptions & CWUDetailsRequest::updateScopeOptions(){ return (IEspWUScopeOptions &) m_ScopeOptions.getValue(); }
void CWUDetailsRequest::setScopeOptions(IConstWUScopeOptions &ifrom){ m_ScopeOptions.copy(ifrom); }
IEspWUPropertyOptions & CWUDetailsRequest::updatePropertyOptions(){ return (IEspWUPropertyOptions &) m_PropertyOptions.getValue(); }
void CWUDetailsRequest::setPropertyOptions(IConstWUPropertyOptions &ifrom){ m_PropertyOptions.copy(ifrom); }
extern "C"  IEspWUDetailsRequest *createWUDetailsRequest(const char *serv){return ((IEspWUDetailsRequest *)new CWUDetailsRequest(serv));}
extern "C"  IClientWUDetailsRequest *createClientWUDetailsRequest(const char *serv){return ((IClientWUDetailsRequest *)new CWUDetailsRequest(serv));}

//=======================================================
// class CWUResponseProperty Implementation
//=======================================================

CWUResponseProperty::CWUResponseProperty(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilRemove),m_RawValue(nilRemove),m_Formatted(nilRemove),m_Measure(nilRemove),m_Creator(nilRemove),m_CreatorType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResponseProperty");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResponseProperty::CWUResponseProperty(const char *serviceName, const char *bc)
	: m_Name(nilRemove),m_RawValue(nilRemove),m_Formatted(nilRemove),m_Measure(nilRemove),m_Creator(nilRemove),m_CreatorType(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResponseProperty");
}

StringBuffer &CWUResponseProperty::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RawValue\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Formatted\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Measure\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Creator\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"CreatorType\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUResponseProperty::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResponseProperty::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUResponseProperty::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RawValue");
	form.appendf("  <tr><td><b>RawValue: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Formatted");
	form.appendf("  <tr><td><b>Formatted: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Measure");
	form.appendf("  <tr><td><b>Measure: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Creator");
	form.appendf("  <tr><td><b>Creator: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("CreatorType");
	form.appendf("  <tr><td><b>CreatorType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResponseProperty::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResponseProperty::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_RawValue.marshall(rpc_resp, "RawValue", "", "", "");
	m_Formatted.marshall(rpc_resp, "Formatted", "", "", "");
	m_Measure.marshall(rpc_resp, "Measure", "", "", "");
	m_Creator.marshall(rpc_resp, "Creator", "", "", "");
	m_CreatorType.marshall(rpc_resp, "CreatorType", "", "", "");
}


void CWUResponseProperty::copy(CWUResponseProperty &from)
{
	m_Name.copy(from.m_Name);
	m_RawValue.copy(from.m_RawValue);
	m_Formatted.copy(from.m_Formatted);
	m_Measure.copy(from.m_Measure);
	m_Creator.copy(from.m_Creator);
	m_CreatorType.copy(from.m_CreatorType);
}


void CWUResponseProperty::copy(IConstWUResponseProperty &ifrom)
{
	setName(ifrom.getName());
	setRawValue(ifrom.getRawValue());
	setFormatted(ifrom.getFormatted());
	setMeasure(ifrom.getMeasure());
	setCreator(ifrom.getCreator());
	setCreatorType(ifrom.getCreatorType());
}


void CWUResponseProperty::getAttributes(IProperties &attributes)
{
}


void CWUResponseProperty::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_RawValue.toStr(ctx, buffer, "RawValue", "", true, "", "");
	m_Formatted.toStr(ctx, buffer, "Formatted", "", true, "", "");
	m_Measure.toStr(ctx, buffer, "Measure", "", true, "", "");
	m_Creator.toStr(ctx, buffer, "Creator", "", true, "", "");
	m_CreatorType.toStr(ctx, buffer, "CreatorType", "", true, "", "");
}


void CWUResponseProperty::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResponseProperty::serializer(IEspContext* ctx, IConstWUResponseProperty &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResponseProperty>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field RawValue
	{
		const char* s = src.getRawValue();
		if (s && *s)
		{
			buffer.append("<RawValue>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RawValue>");
		}
	}
	// field Formatted
	{
		const char* s = src.getFormatted();
		if (s && *s)
		{
			buffer.append("<Formatted>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Formatted>");
		}
	}
	// field Measure
	{
		const char* s = src.getMeasure();
		if (s && *s)
		{
			buffer.append("<Measure>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Measure>");
		}
	}
	// field Creator
	{
		const char* s = src.getCreator();
		if (s && *s)
		{
			buffer.append("<Creator>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Creator>");
		}
	}
	// field CreatorType
	{
		const char* s = src.getCreatorType();
		if (s && *s)
		{
			buffer.append("<CreatorType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</CreatorType>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUResponseProperty>");
}

bool CWUResponseProperty::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_RawValue.unmarshall(rpc_request, "RawValue", basepath);
	hasValue |= m_Formatted.unmarshall(rpc_request, "Formatted", basepath);
	hasValue |= m_Measure.unmarshall(rpc_request, "Measure", basepath);
	hasValue |= m_Creator.unmarshall(rpc_request, "Creator", basepath);
	hasValue |= m_CreatorType.unmarshall(rpc_request, "CreatorType", basepath);
	return hasValue;
}

bool CWUResponseProperty::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_RawValue.unmarshall(ctx, soapval, "RawValue");
	hasValue |= m_Formatted.unmarshall(ctx, soapval, "Formatted");
	hasValue |= m_Measure.unmarshall(ctx, soapval, "Measure");
	hasValue |= m_Creator.unmarshall(ctx, soapval, "Creator");
	hasValue |= m_CreatorType.unmarshall(ctx, soapval, "CreatorType");
	return hasValue;
}

bool CWUResponseProperty::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_RawValue.unmarshall(ctx, params, attachments, "RawValue", basepath);
	hasValue |= m_Formatted.unmarshall(ctx, params, attachments, "Formatted", basepath);
	hasValue |= m_Measure.unmarshall(ctx, params, attachments, "Measure", basepath);
	hasValue |= m_Creator.unmarshall(ctx, params, attachments, "Creator", basepath);
	hasValue |= m_CreatorType.unmarshall(ctx, params, attachments, "CreatorType", basepath);
	return hasValue;
}

const char * CWUResponseProperty::getName() { return m_Name.query();}
const char * CWUResponseProperty::getRawValue() { return m_RawValue.query();}
const char * CWUResponseProperty::getFormatted() { return m_Formatted.query();}
const char * CWUResponseProperty::getMeasure() { return m_Measure.query();}
const char * CWUResponseProperty::getCreator() { return m_Creator.query();}
const char * CWUResponseProperty::getCreatorType() { return m_CreatorType.query();}
void CWUResponseProperty::setName(const char * val){ m_Name.set(val); }
void CWUResponseProperty::setRawValue(const char * val){ m_RawValue.set(val); }
void CWUResponseProperty::setFormatted(const char * val){ m_Formatted.set(val); }
void CWUResponseProperty::setMeasure(const char * val){ m_Measure.set(val); }
void CWUResponseProperty::setCreator(const char * val){ m_Creator.set(val); }
void CWUResponseProperty::setCreatorType(const char * val){ m_CreatorType.set(val); }
extern "C"  IEspWUResponseProperty *createWUResponseProperty(const char *serv, const char *msgname){return ((IEspWUResponseProperty *)new CWUResponseProperty(serv /*, msgname*/));}
extern "C"  IClientWUResponseProperty *createClientWUResponseProperty(const char *serv, const char *msgname){return ((IClientWUResponseProperty *)new CWUResponseProperty(serv /*, msgname*/));}

//=======================================================
// class CWUResponseScope Implementation
//=======================================================

CWUResponseScope::CWUResponseScope(const char *serviceName, IRpcMessageBinding *init)
	: m_ScopeName(nilRemove),m_Id(nilRemove),m_ScopeType(nilRemove),m_Properties(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResponseScope");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUResponseScope::CWUResponseScope(const char *serviceName, const char *bc)
	: m_ScopeName(nilRemove),m_Id(nilRemove),m_ScopeType(nilRemove),m_Properties(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUResponseScope");
}

StringBuffer &CWUResponseScope::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeName\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Id\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeType\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Properties\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Property\" type=\"tns:WUResponseProperty\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUResponseProperty::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUResponseScope::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUResponseScope::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUResponseProperty"))
	{
		added.setValue("WUResponseProperty",1);
		CWUResponseProperty::getMapInfo(info,added);
	}
}

StringBuffer &CWUResponseScope::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeName");
	form.appendf("  <tr><td><b>ScopeName: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Id");
	form.appendf("  <tr><td><b>Id: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeType");
	form.appendf("  <tr><td><b>ScopeType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Properties");
	form.appendf("<tr><td><b>Properties: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUResponseScope::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUResponseScope::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_ScopeName.marshall(rpc_resp, "ScopeName", "", "", "");
	m_Id.marshall(rpc_resp, "Id", "", "", "");
	m_ScopeType.marshall(rpc_resp, "ScopeType", "", "", "");
	m_Properties.marshall(rpc_resp, "Properties", "Property");
}


void CWUResponseScope::copy(CWUResponseScope &from)
{
	m_ScopeName.copy(from.m_ScopeName);
	m_Id.copy(from.m_Id);
	m_ScopeType.copy(from.m_ScopeType);
	m_Properties.copy(from.m_Properties);
}


void CWUResponseScope::copy(IConstWUResponseScope &ifrom)
{
	setScopeName(ifrom.getScopeName());
	setId(ifrom.getId());
	setScopeType(ifrom.getScopeType());
	setProperties(ifrom.getProperties());
}


void CWUResponseScope::getAttributes(IProperties &attributes)
{
}


void CWUResponseScope::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_ScopeName.toStr(ctx, buffer, "ScopeName", "", true, "", "");
	m_Id.toStr(ctx, buffer, "Id", "", true, "", "");
	m_ScopeType.toStr(ctx, buffer, "ScopeType", "", true, "", "");
	m_Properties.toStr(ctx, buffer, "Properties", "Property");
}


void CWUResponseScope::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUResponseScope::serializer(IEspContext* ctx, IConstWUResponseScope &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUResponseScope>");
	// field ScopeName
	{
		const char* s = src.getScopeName();
		if (s && *s)
		{
			buffer.append("<ScopeName>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ScopeName>");
		}
	}
	// field Id
	{
		const char* s = src.getId();
		if (s && *s)
		{
			buffer.append("<Id>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Id>");
		}
	}
	// field ScopeType
	{
		const char* s = src.getScopeType();
		if (s && *s)
		{
			buffer.append("<ScopeType>");
			encodeUtf8XML(s,buffer);
			buffer.append("</ScopeType>");
		}
	}
	// field Properties
	{
		IArrayOf<IConstWUResponseProperty>& v = src.getProperties();
		int size = v.length();
		if (size>0)
			buffer.append("<Properties>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Property>");
			CWUResponseProperty::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Property>");
		}
		if (size>0)
			buffer.append("</Properties>");
	}
	if (keepRootTag)
		buffer.append("</WUResponseScope>");
}

bool CWUResponseScope::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_ScopeName.unmarshall(rpc_request, "ScopeName", basepath);
	hasValue |= m_Id.unmarshall(rpc_request, "Id", basepath);
	hasValue |= m_ScopeType.unmarshall(rpc_request, "ScopeType", basepath);
	hasValue |= m_Properties.unmarshall(rpc_request, "Properties", basepath);
	return hasValue;
}

bool CWUResponseScope::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ScopeName.unmarshall(ctx, soapval, "ScopeName");
	hasValue |= m_Id.unmarshall(ctx, soapval, "Id");
	hasValue |= m_ScopeType.unmarshall(ctx, soapval, "ScopeType");
	hasValue |= m_Properties.unmarshall(ctx, soapval, "Properties");
	return hasValue;
}

bool CWUResponseScope::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ScopeName.unmarshall(ctx, params, attachments, "ScopeName", basepath);
	hasValue |= m_Id.unmarshall(ctx, params, attachments, "Id", basepath);
	hasValue |= m_ScopeType.unmarshall(ctx, params, attachments, "ScopeType", basepath);
	hasValue |= m_Properties.unmarshall(ctx, params, attachments, "Properties", basepath);
	return hasValue;
}

const char * CWUResponseScope::getScopeName() { return m_ScopeName.query();}
const char * CWUResponseScope::getId() { return m_Id.query();}
const char * CWUResponseScope::getScopeType() { return m_ScopeType.query();}
IArrayOf<IConstWUResponseProperty> & CWUResponseScope::getProperties() { return (IArrayOf<IConstWUResponseProperty> &) m_Properties; }
void CWUResponseScope::setScopeName(const char * val){ m_ScopeName.set(val); }
void CWUResponseScope::setId(const char * val){ m_Id.set(val); }
void CWUResponseScope::setScopeType(const char * val){ m_ScopeType.set(val); }
void CWUResponseScope::setProperties(IArrayOf<IEspWUResponseProperty> &val)
{
	m_Properties->kill();
	IArrayOf<IConstWUResponseProperty> &target = m_Properties.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUResponseProperty &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUResponseScope::setProperties(IArrayOf<IConstWUResponseProperty> &val)
{
	m_Properties->kill();
	IArrayOf<IConstWUResponseProperty> &target = m_Properties.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUResponseProperty &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUResponseScope *createWUResponseScope(const char *serv, const char *msgname){return ((IEspWUResponseScope *)new CWUResponseScope(serv /*, msgname*/));}
extern "C"  IClientWUResponseScope *createClientWUResponseScope(const char *serv, const char *msgname){return ((IClientWUResponseScope *)new CWUResponseScope(serv /*, msgname*/));}

//=======================================================
// class CWUDetailsResponse Implementation
//=======================================================

CWUDetailsResponse::CWUDetailsResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_MaxVersion(nilIgnore),m_WUID(nilIgnore),m_Scopes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDetailsResponse::CWUDetailsResponse(const char *serviceName, const char *bc)
	: m_MaxVersion(nilIgnore),m_WUID(nilIgnore),m_Scopes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsResponse");
}

CWUDetailsResponse::CWUDetailsResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_MaxVersion(nilIgnore),m_WUID(nilIgnore),m_Scopes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDetailsResponse::CWUDetailsResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_MaxVersion(nilIgnore),m_WUID(nilIgnore),m_Scopes(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDetailsResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"MaxVersion\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Scopes\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Scope\" type=\"tns:WUResponseScope\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUResponseScope::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUDetailsResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDetailsResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUResponseScope"))
	{
		added.setValue("WUResponseScope",1);
		CWUResponseScope::getMapInfo(info,added);
	}
}

StringBuffer &CWUDetailsResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MaxVersion");
	form.appendf("  <tr><td><b>MaxVersion: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Scopes");
	form.appendf("<tr><td><b>Scopes: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDetailsResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDetailsResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_MaxVersion.marshall(rpc_resp, "MaxVersion", "", "", "");
		m_WUID.marshall(rpc_resp, "WUID", "", "", "");
		m_Scopes.marshall(rpc_resp, "Scopes", "Scope");
	}
}


void CWUDetailsResponse::copy(CWUDetailsResponse &from)
{
	m_MaxVersion.copy(from.m_MaxVersion);
	m_WUID.copy(from.m_WUID);
	m_Scopes.copy(from.m_Scopes);
}


void CWUDetailsResponse::copy(IConstWUDetailsResponse &ifrom)
{
	setMaxVersion(ifrom.getMaxVersion());
	setWUID(ifrom.getWUID());
	setScopes(ifrom.getScopes());
}


void CWUDetailsResponse::getAttributes(IProperties &attributes)
{
}


void CWUDetailsResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_MaxVersion.toStr(ctx, buffer, "MaxVersion", "", true, "", "");
		m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
		m_Scopes.toStr(ctx, buffer, "Scopes", "Scope");
	}
}


void CWUDetailsResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDetailsResponse::serializer(IEspContext* ctx, IConstWUDetailsResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDetailsResponse>");
	// field MaxVersion
	{
		const char* s = src.getMaxVersion();
		if (s && *s)
		{
			buffer.append("<MaxVersion>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MaxVersion>");
		}
	}
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field Scopes
	{
		IArrayOf<IConstWUResponseScope>& v = src.getScopes();
		int size = v.length();
		if (size>0)
			buffer.append("<Scopes>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Scope>");
			CWUResponseScope::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Scope>");
		}
		if (size>0)
			buffer.append("</Scopes>");
	}
	if (keepRootTag)
		buffer.append("</WUDetailsResponse>");
}

bool CWUDetailsResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_MaxVersion.unmarshall(rpc_request, "MaxVersion", basepath);
		hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
		hasValue |= m_Scopes.unmarshall(rpc_request, "Scopes", basepath);
	}
	return hasValue;
}

bool CWUDetailsResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_MaxVersion.unmarshall(ctx, soapval, "MaxVersion");
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_Scopes.unmarshall(ctx, soapval, "Scopes");
	return hasValue;
}

bool CWUDetailsResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_MaxVersion.unmarshall(ctx, params, attachments, "MaxVersion", basepath);
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_Scopes.unmarshall(ctx, params, attachments, "Scopes", basepath);
	return hasValue;
}

const char * CWUDetailsResponse::getMaxVersion() { return m_MaxVersion.query();}
const char * CWUDetailsResponse::getWUID() { return m_WUID.query();}
IArrayOf<IConstWUResponseScope> & CWUDetailsResponse::getScopes() { return (IArrayOf<IConstWUResponseScope> &) m_Scopes; }
void CWUDetailsResponse::setMaxVersion(const char * val){ m_MaxVersion.set(val); }
void CWUDetailsResponse::setWUID(const char * val){ m_WUID.set(val); }
void CWUDetailsResponse::setScopes(IArrayOf<IEspWUResponseScope> &val)
{
	m_Scopes->kill();
	IArrayOf<IConstWUResponseScope> &target = m_Scopes.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUResponseScope &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUDetailsResponse::setScopes(IArrayOf<IConstWUResponseScope> &val)
{
	m_Scopes->kill();
	IArrayOf<IConstWUResponseScope> &target = m_Scopes.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUResponseScope &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUDetailsResponse *createWUDetailsResponse(const char *serv){return ((IEspWUDetailsResponse *)new CWUDetailsResponse(serv));}
extern "C"  IClientWUDetailsResponse *createClientWUDetailsResponse(const char *serv){return ((IClientWUDetailsResponse *)new CWUDetailsResponse(serv));}

//=======================================================
// class CWUDetailsMetaProperty Implementation
//=======================================================

CWUDetailsMetaProperty::CWUDetailsMetaProperty(const char *serviceName, IRpcMessageBinding *init)
	: m_Name(nilIgnore),m_ValueType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaProperty");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDetailsMetaProperty::CWUDetailsMetaProperty(const char *serviceName, const char *bc)
	: m_Name(nilIgnore),m_ValueType(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaProperty");
}

StringBuffer &CWUDetailsMetaProperty::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ValueType\" type=\"tns:WUDetailsAttrValueType\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXWUDetailsAttrValueType::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUDetailsMetaProperty::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDetailsMetaProperty::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUDetailsAttrValueType"))
	{
		added.setValue("WUDetailsAttrValueType",1);
		CXWUDetailsAttrValueType::getMapInfo(info,added);
	}
}

StringBuffer &CWUDetailsMetaProperty::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ValueType");
	form.appendf("  <tr><td><b>ValueType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDetailsMetaProperty::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDetailsMetaProperty::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_ValueType.marshall(rpc_resp, "ValueType", "", "", "");
}


void CWUDetailsMetaProperty::copy(CWUDetailsMetaProperty &from)
{
	m_Name.copy(from.m_Name);
	m_ValueType.copy(from.m_ValueType);
}


void CWUDetailsMetaProperty::copy(IConstWUDetailsMetaProperty &ifrom)
{
	setName(ifrom.getName());
	setValueType(ifrom.getValueType());
}


void CWUDetailsMetaProperty::getAttributes(IProperties &attributes)
{
}


void CWUDetailsMetaProperty::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_ValueType.toStr(ctx, buffer, "ValueType", "", true, "", "");
}


void CWUDetailsMetaProperty::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDetailsMetaProperty::serializer(IEspContext* ctx, IConstWUDetailsMetaProperty &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDetailsMetaProperty>");
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field ValueType
	{
		const char* s = src.getValueTypeAsString();
		buffer.append("<ValueType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</ValueType>");
	}
	if (keepRootTag)
		buffer.append("</WUDetailsMetaProperty>");
}

bool CWUDetailsMetaProperty::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_ValueType.unmarshall(rpc_request, "ValueType", basepath);
	return hasValue;
}

bool CWUDetailsMetaProperty::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_ValueType.unmarshall(ctx, soapval, "ValueType");
	return hasValue;
}

bool CWUDetailsMetaProperty::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_ValueType.unmarshall(ctx, params, attachments, "ValueType", basepath);
	return hasValue;
}

const char * CWUDetailsMetaProperty::getName() { return m_Name.query();}
CWUDetailsAttrValueType CWUDetailsMetaProperty::getValueType() { return m_ValueType.getValue(); }
const char* CWUDetailsMetaProperty::getValueTypeAsString() {  return (const char*)m_ValueType; }
void CWUDetailsMetaProperty::setName(const char * val){ m_Name.set(val); }
void CWUDetailsMetaProperty::setValueType(CWUDetailsAttrValueType val) { m_ValueType.setValue(val); }
void CWUDetailsMetaProperty::setValueType(const char* val) { m_ValueType.setValue(val); }
extern "C"  IEspWUDetailsMetaProperty *createWUDetailsMetaProperty(const char *serv, const char *msgname){return ((IEspWUDetailsMetaProperty *)new CWUDetailsMetaProperty(serv /*, msgname*/));}
extern "C"  IClientWUDetailsMetaProperty *createClientWUDetailsMetaProperty(const char *serv, const char *msgname){return ((IClientWUDetailsMetaProperty *)new CWUDetailsMetaProperty(serv /*, msgname*/));}

//=======================================================
// class CWUDetailsActivityInfo Implementation
//=======================================================

CWUDetailsActivityInfo::CWUDetailsActivityInfo(const char *serviceName, IRpcMessageBinding *init)
	: m_Kind(nilIgnore),m_Name(nilIgnore),m_IsSink(nilIgnore),m_IsSource(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsActivityInfo");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDetailsActivityInfo::CWUDetailsActivityInfo(const char *serviceName, const char *bc)
	: m_Kind(nilIgnore),m_Name(nilIgnore),m_IsSink(nilIgnore),m_IsSource(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsActivityInfo");
}

StringBuffer &CWUDetailsActivityInfo::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Kind\" type=\"xsd:unsignedInt\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Name\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsSink\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"IsSource\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUDetailsActivityInfo::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDetailsActivityInfo::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUDetailsActivityInfo::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("Kind");
	form.appendf("  <tr><td><b>Kind: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Name");
	form.appendf("  <tr><td><b>Name: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsSink");
	
	form.appendf("  <tr><td><b>IsSink? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("IsSource");
	
	form.appendf("  <tr><td><b>IsSource? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDetailsActivityInfo::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDetailsActivityInfo::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Kind.marshall(rpc_resp, "Kind", "", "", "");
	m_Name.marshall(rpc_resp, "Name", "", "", "");
	m_IsSink.marshall(rpc_resp, "IsSink", "", "", "");
	m_IsSource.marshall(rpc_resp, "IsSource", "", "", "");
}


void CWUDetailsActivityInfo::copy(CWUDetailsActivityInfo &from)
{
	m_Kind.copy(from.m_Kind);
	m_Name.copy(from.m_Name);
	m_IsSink.copy(from.m_IsSink);
	m_IsSource.copy(from.m_IsSource);
}


void CWUDetailsActivityInfo::copy(IConstWUDetailsActivityInfo &ifrom)
{
	setKind(ifrom.getKind());
	setName(ifrom.getName());
	setIsSink(ifrom.getIsSink());
	setIsSource(ifrom.getIsSource());
}


void CWUDetailsActivityInfo::getAttributes(IProperties &attributes)
{
}


void CWUDetailsActivityInfo::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Kind.toStr(ctx, buffer, "Kind", "", true, "", "");
	m_Name.toStr(ctx, buffer, "Name", "", true, "", "");
	m_IsSink.toStr(ctx, buffer, "IsSink", "", true, "", "");
	m_IsSource.toStr(ctx, buffer, "IsSource", "", true, "", "");
}


void CWUDetailsActivityInfo::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDetailsActivityInfo::serializer(IEspContext* ctx, IConstWUDetailsActivityInfo &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDetailsActivityInfo>");
	// field Kind
	{
		//*** default kind: TK_UNSIGNED; type=(null), name=Kind
		buffer.append("<Kind>");
		buffer.append(src.getKind());
		buffer.append("</Kind>");
	}
	// field Name
	{
		const char* s = src.getName();
		if (s && *s)
		{
			buffer.append("<Name>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Name>");
		}
	}
	// field IsSink
	{
		bool b = src.getIsSink();
		if (b)
			buffer.appendf("<IsSink>1</IsSink>");
	}
	// field IsSource
	{
		bool b = src.getIsSource();
		if (b)
			buffer.appendf("<IsSource>1</IsSource>");
	}
	if (keepRootTag)
		buffer.append("</WUDetailsActivityInfo>");
}

bool CWUDetailsActivityInfo::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Kind.unmarshall(rpc_request, "Kind", basepath);
	hasValue |= m_Name.unmarshall(rpc_request, "Name", basepath);
	hasValue |= m_IsSink.unmarshall(rpc_request, "IsSink", basepath);
	hasValue |= m_IsSource.unmarshall(rpc_request, "IsSource", basepath);
	return hasValue;
}

bool CWUDetailsActivityInfo::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Kind.unmarshall(ctx, soapval, "Kind");
	hasValue |= m_Name.unmarshall(ctx, soapval, "Name");
	hasValue |= m_IsSink.unmarshall(ctx, soapval, "IsSink");
	hasValue |= m_IsSource.unmarshall(ctx, soapval, "IsSource");
	return hasValue;
}

bool CWUDetailsActivityInfo::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Kind.unmarshall(ctx, params, attachments, "Kind", basepath);
	hasValue |= m_Name.unmarshall(ctx, params, attachments, "Name", basepath);
	hasValue |= m_IsSink.unmarshall(ctx, params, attachments, "IsSink", basepath);
	hasValue |= m_IsSource.unmarshall(ctx, params, attachments, "IsSource", basepath);
	return hasValue;
}

unsigned int CWUDetailsActivityInfo::getKind() { return m_Kind;}
const char * CWUDetailsActivityInfo::getName() { return m_Name.query();}
bool CWUDetailsActivityInfo::getIsSink() { return m_IsSink;}
bool CWUDetailsActivityInfo::getIsSource() { return m_IsSource;}
void CWUDetailsActivityInfo::setKind(unsigned int val){ m_Kind=val; }
void CWUDetailsActivityInfo::setName(const char * val){ m_Name.set(val); }
void CWUDetailsActivityInfo::setIsSink(bool val){ m_IsSink=val; }
void CWUDetailsActivityInfo::setIsSource(bool val){ m_IsSource=val; }
extern "C"  IEspWUDetailsActivityInfo *createWUDetailsActivityInfo(const char *serv, const char *msgname){return ((IEspWUDetailsActivityInfo *)new CWUDetailsActivityInfo(serv /*, msgname*/));}
extern "C"  IClientWUDetailsActivityInfo *createClientWUDetailsActivityInfo(const char *serv, const char *msgname){return ((IClientWUDetailsActivityInfo *)new CWUDetailsActivityInfo(serv /*, msgname*/));}

//=======================================================
// class CWUDetailsMetaRequest Implementation
//=======================================================

CWUDetailsMetaRequest::CWUDetailsMetaRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDetailsMetaRequest::CWUDetailsMetaRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaRequest");
}

CWUDetailsMetaRequest::CWUDetailsMetaRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDetailsMetaRequest::CWUDetailsMetaRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDetailsMetaRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWUDetailsMetaRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDetailsMetaRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUDetailsMetaRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDetailsMetaRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDetailsMetaRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWUDetailsMetaRequest::copy(CWUDetailsMetaRequest &from)
{
}


void CWUDetailsMetaRequest::copy(IConstWUDetailsMetaRequest &ifrom)
{
}


void CWUDetailsMetaRequest::getAttributes(IProperties &attributes)
{
}


void CWUDetailsMetaRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWUDetailsMetaRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDetailsMetaRequest::serializer(IEspContext* ctx, IConstWUDetailsMetaRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDetailsMetaRequest>");
	if (keepRootTag)
		buffer.append("</WUDetailsMetaRequest>");
}

bool CWUDetailsMetaRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWUDetailsMetaRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWUDetailsMetaRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWUDetailsMetaRequest *createWUDetailsMetaRequest(const char *serv){return ((IEspWUDetailsMetaRequest *)new CWUDetailsMetaRequest(serv));}
extern "C"  IClientWUDetailsMetaRequest *createClientWUDetailsMetaRequest(const char *serv){return ((IClientWUDetailsMetaRequest *)new CWUDetailsMetaRequest(serv));}

//=======================================================
// class CWUDetailsMetaResponse Implementation
//=======================================================

CWUDetailsMetaResponse::CWUDetailsMetaResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Properties(nilIgnore),m_ScopeTypes(nilIgnore),m_Measures(nilIgnore),m_Activities(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUDetailsMetaResponse::CWUDetailsMetaResponse(const char *serviceName, const char *bc)
	: m_Properties(nilIgnore),m_ScopeTypes(nilIgnore),m_Measures(nilIgnore),m_Activities(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaResponse");
}

CWUDetailsMetaResponse::CWUDetailsMetaResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Properties(nilIgnore),m_ScopeTypes(nilIgnore),m_Measures(nilIgnore),m_Activities(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUDetailsMetaResponse::CWUDetailsMetaResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Properties(nilIgnore),m_ScopeTypes(nilIgnore),m_Measures(nilIgnore),m_Activities(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUDetailsMetaResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUDetailsMetaResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Properties\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Property\" type=\"tns:WUDetailsMetaProperty\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ScopeTypes\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"ScopeType\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Measures\">");
		schema.append("<xsd:complexType><xsd:sequence>");
		schema.append("<xsd:element name=\"Measure\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n");
		schema.append("</xsd:sequence></xsd:complexType>\n");
		schema.append("</xsd:element>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Activities\">\n");
		schema.append("<xsd:complexType><xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Activity\" type=\"tns:WUDetailsActivityInfo\"/>");
		schema.append("</xsd:sequence></xsd:complexType>");
		schema.append("</xsd:element>");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUDetailsMetaProperty::getXsdDefinition(context, request, schema, added);
		CWUDetailsActivityInfo::getXsdDefinition(context, request, schema, added);
	}
	return schema;
}

void CWUDetailsMetaResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUDetailsMetaResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUDetailsActivityInfo"))
	{
		added.setValue("WUDetailsActivityInfo",1);
		CWUDetailsActivityInfo::getMapInfo(info,added);
	}
	if (!added.getValue("WUDetailsMetaProperty"))
	{
		added.setValue("WUDetailsMetaProperty",1);
		CWUDetailsMetaProperty::getMapInfo(info,added);
	}
}

StringBuffer &CWUDetailsMetaResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Properties");
	form.appendf("<tr><td><b>Properties: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ScopeTypes");
	form.appendf("<tr><td><b>ScopeTypes: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Measures");
	form.appendf("<tr><td><b>Measures: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Activities");
	form.appendf("<tr><td><b>Activities: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUDetailsMetaResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUDetailsMetaResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Properties.marshall(rpc_resp, "Properties", "Property");
		m_ScopeTypes.marshall(rpc_resp, "ScopeTypes", "ScopeType");
		m_Measures.marshall(rpc_resp, "Measures", "Measure");
		m_Activities.marshall(rpc_resp, "Activities", "Activity");
	}
}


void CWUDetailsMetaResponse::copy(CWUDetailsMetaResponse &from)
{
	m_Properties.copy(from.m_Properties);
	m_ScopeTypes.copy(from.m_ScopeTypes);
	m_Measures.copy(from.m_Measures);
	m_Activities.copy(from.m_Activities);
}


void CWUDetailsMetaResponse::copy(IConstWUDetailsMetaResponse &ifrom)
{
	setProperties(ifrom.getProperties());
	setScopeTypes(ifrom.getScopeTypes());
	setMeasures(ifrom.getMeasures());
	setActivities(ifrom.getActivities());
}


void CWUDetailsMetaResponse::getAttributes(IProperties &attributes)
{
}


void CWUDetailsMetaResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Properties.toStr(ctx, buffer, "Properties", "Property");
		m_ScopeTypes.toStr(ctx, buffer, "ScopeTypes", "ScopeType");
		m_Measures.toStr(ctx, buffer, "Measures", "Measure");
		m_Activities.toStr(ctx, buffer, "Activities", "Activity");
	}
}


void CWUDetailsMetaResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUDetailsMetaResponse::serializer(IEspContext* ctx, IConstWUDetailsMetaResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUDetailsMetaResponse>");
	// field Properties
	{
		IArrayOf<IConstWUDetailsMetaProperty>& v = src.getProperties();
		int size = v.length();
		if (size>0)
			buffer.append("<Properties>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Property>");
			CWUDetailsMetaProperty::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Property>");
		}
		if (size>0)
			buffer.append("</Properties>");
	}
	// field ScopeTypes
	{
		StringArray& v = src.getScopeTypes();
		if (v.length()>0)
			buffer.append("<ScopeTypes>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<ScopeType>%s</ScopeType>",v.item(i));
		if (v.length()>0)
			buffer.append("</ScopeTypes>");
	}
	// field Measures
	{
		StringArray& v = src.getMeasures();
		if (v.length()>0)
			buffer.append("<Measures>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Measure>%s</Measure>",v.item(i));
		if (v.length()>0)
			buffer.append("</Measures>");
	}
	// field Activities
	{
		IArrayOf<IConstWUDetailsActivityInfo>& v = src.getActivities();
		int size = v.length();
		if (size>0)
			buffer.append("<Activities>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Activity>");
			CWUDetailsActivityInfo::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Activity>");
		}
		if (size>0)
			buffer.append("</Activities>");
	}
	if (keepRootTag)
		buffer.append("</WUDetailsMetaResponse>");
}

bool CWUDetailsMetaResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Properties.unmarshall(rpc_request, "Properties", basepath);
		hasValue |= m_ScopeTypes.unmarshall(rpc_request, "ScopeTypes", basepath);
		hasValue |= m_Measures.unmarshall(rpc_request, "Measures", basepath);
		hasValue |= m_Activities.unmarshall(rpc_request, "Activities", basepath);
	}
	return hasValue;
}

bool CWUDetailsMetaResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Properties.unmarshall(ctx, soapval, "Properties");
	hasValue |= m_ScopeTypes.unmarshall(ctx, soapval, "ScopeTypes");
	hasValue |= m_Measures.unmarshall(ctx, soapval, "Measures");
	hasValue |= m_Activities.unmarshall(ctx, soapval, "Activities");
	return hasValue;
}

bool CWUDetailsMetaResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Properties.unmarshall(ctx, params, attachments, "Properties", basepath);
	hasValue |= m_ScopeTypes.unmarshall(ctx, params, attachments, "ScopeTypes", basepath);
	hasValue |= m_Measures.unmarshall(ctx, params, attachments, "Measures", basepath);
	hasValue |= m_Activities.unmarshall(ctx, params, attachments, "Activities", basepath);
	return hasValue;
}

IArrayOf<IConstWUDetailsMetaProperty> & CWUDetailsMetaResponse::getProperties() { return (IArrayOf<IConstWUDetailsMetaProperty> &) m_Properties; }
StringArray & CWUDetailsMetaResponse::getScopeTypes() { return (StringArray &) m_ScopeTypes; }
StringArray & CWUDetailsMetaResponse::getMeasures() { return (StringArray &) m_Measures; }
IArrayOf<IConstWUDetailsActivityInfo> & CWUDetailsMetaResponse::getActivities() { return (IArrayOf<IConstWUDetailsActivityInfo> &) m_Activities; }
void CWUDetailsMetaResponse::setProperties(IArrayOf<IEspWUDetailsMetaProperty> &val)
{
	m_Properties->kill();
	IArrayOf<IConstWUDetailsMetaProperty> &target = m_Properties.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUDetailsMetaProperty &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUDetailsMetaResponse::setProperties(IArrayOf<IConstWUDetailsMetaProperty> &val)
{
	m_Properties->kill();
	IArrayOf<IConstWUDetailsMetaProperty> &target = m_Properties.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUDetailsMetaProperty &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUDetailsMetaResponse::setScopeTypes(StringArray &val){ m_ScopeTypes->kill();  CloneArray(m_ScopeTypes.getValue(), val); }
void CWUDetailsMetaResponse::setMeasures(StringArray &val){ m_Measures->kill();  CloneArray(m_Measures.getValue(), val); }
void CWUDetailsMetaResponse::setActivities(IArrayOf<IEspWUDetailsActivityInfo> &val)
{
	m_Activities->kill();
	IArrayOf<IConstWUDetailsActivityInfo> &target = m_Activities.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUDetailsActivityInfo &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUDetailsMetaResponse::setActivities(IArrayOf<IConstWUDetailsActivityInfo> &val)
{
	m_Activities->kill();
	IArrayOf<IConstWUDetailsActivityInfo> &target = m_Activities.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUDetailsActivityInfo &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUDetailsMetaResponse *createWUDetailsMetaResponse(const char *serv){return ((IEspWUDetailsMetaResponse *)new CWUDetailsMetaResponse(serv));}
extern "C"  IClientWUDetailsMetaResponse *createClientWUDetailsMetaResponse(const char *serv){return ((IClientWUDetailsMetaResponse *)new CWUDetailsMetaResponse(serv));}

//=======================================================
// class CWUEclDefinitionActionResult Implementation
//=======================================================

CWUEclDefinitionActionResult::CWUEclDefinitionActionResult(const char *serviceName, IRpcMessageBinding *init)
	: m_EclDefinition(nilRemove),m_Action(nilRemove),m_WUID(nilRemove),m_QueryID(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionResult");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUEclDefinitionActionResult::CWUEclDefinitionActionResult(const char *serviceName, const char *bc)
	: m_EclDefinition(nilRemove),m_Action(nilRemove),m_WUID(nilRemove),m_QueryID(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionResult");
}

StringBuffer &CWUEclDefinitionActionResult::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:complexType name=\"%s\">\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EclDefinition\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Action\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"WUID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"QueryID\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType>\n");
		}
	}
	return schema;
}

void CWUEclDefinitionActionResult::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUEclDefinitionActionResult::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWUEclDefinitionActionResult::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EclDefinition");
	form.appendf("  <tr><td><b>EclDefinition: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Action");
	form.appendf("  <tr><td><b>Action: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("WUID");
	form.appendf("  <tr><td><b>WUID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("QueryID");
	form.appendf("  <tr><td><b>QueryID: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUEclDefinitionActionResult::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUEclDefinitionActionResult::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_EclDefinition.marshall(rpc_resp, "EclDefinition", "", "", "");
	m_Action.marshall(rpc_resp, "Action", "", "", "");
	m_WUID.marshall(rpc_resp, "WUID", "", "", "");
	m_QueryID.marshall(rpc_resp, "QueryID", "", "", "");
	m_Result.marshall(rpc_resp, "Result", "", "", "");
}


void CWUEclDefinitionActionResult::copy(CWUEclDefinitionActionResult &from)
{
	m_EclDefinition.copy(from.m_EclDefinition);
	m_Action.copy(from.m_Action);
	m_WUID.copy(from.m_WUID);
	m_QueryID.copy(from.m_QueryID);
	m_Result.copy(from.m_Result);
}


void CWUEclDefinitionActionResult::copy(IConstWUEclDefinitionActionResult &ifrom)
{
	setEclDefinition(ifrom.getEclDefinition());
	setAction(ifrom.getAction());
	setWUID(ifrom.getWUID());
	setQueryID(ifrom.getQueryID());
	setResult(ifrom.getResult());
}


void CWUEclDefinitionActionResult::getAttributes(IProperties &attributes)
{
}


void CWUEclDefinitionActionResult::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_EclDefinition.toStr(ctx, buffer, "EclDefinition", "", true, "", "");
	m_Action.toStr(ctx, buffer, "Action", "", true, "", "");
	m_WUID.toStr(ctx, buffer, "WUID", "", true, "", "");
	m_QueryID.toStr(ctx, buffer, "QueryID", "", true, "", "");
	m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
}


void CWUEclDefinitionActionResult::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUEclDefinitionActionResult::serializer(IEspContext* ctx, IConstWUEclDefinitionActionResult &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUEclDefinitionActionResult>");
	// field EclDefinition
	{
		const char* s = src.getEclDefinition();
		if (s && *s)
		{
			buffer.append("<EclDefinition>");
			encodeUtf8XML(s,buffer);
			buffer.append("</EclDefinition>");
		}
	}
	// field Action
	{
		const char* s = src.getAction();
		if (s && *s)
		{
			buffer.append("<Action>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Action>");
		}
	}
	// field WUID
	{
		const char* s = src.getWUID();
		if (s && *s)
		{
			buffer.append("<WUID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</WUID>");
		}
	}
	// field QueryID
	{
		const char* s = src.getQueryID();
		if (s && *s)
		{
			buffer.append("<QueryID>");
			encodeUtf8XML(s,buffer);
			buffer.append("</QueryID>");
		}
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</WUEclDefinitionActionResult>");
}

bool CWUEclDefinitionActionResult::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_EclDefinition.unmarshall(rpc_request, "EclDefinition", basepath);
	hasValue |= m_Action.unmarshall(rpc_request, "Action", basepath);
	hasValue |= m_WUID.unmarshall(rpc_request, "WUID", basepath);
	hasValue |= m_QueryID.unmarshall(rpc_request, "QueryID", basepath);
	hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	return hasValue;
}

bool CWUEclDefinitionActionResult::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EclDefinition.unmarshall(ctx, soapval, "EclDefinition");
	hasValue |= m_Action.unmarshall(ctx, soapval, "Action");
	hasValue |= m_WUID.unmarshall(ctx, soapval, "WUID");
	hasValue |= m_QueryID.unmarshall(ctx, soapval, "QueryID");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWUEclDefinitionActionResult::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EclDefinition.unmarshall(ctx, params, attachments, "EclDefinition", basepath);
	hasValue |= m_Action.unmarshall(ctx, params, attachments, "Action", basepath);
	hasValue |= m_WUID.unmarshall(ctx, params, attachments, "WUID", basepath);
	hasValue |= m_QueryID.unmarshall(ctx, params, attachments, "QueryID", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWUEclDefinitionActionResult::getEclDefinition() { return m_EclDefinition.query();}
const char * CWUEclDefinitionActionResult::getAction() { return m_Action.query();}
const char * CWUEclDefinitionActionResult::getWUID() { return m_WUID.query();}
const char * CWUEclDefinitionActionResult::getQueryID() { return m_QueryID.query();}
const char * CWUEclDefinitionActionResult::getResult() { return m_Result.query();}
void CWUEclDefinitionActionResult::setEclDefinition(const char * val){ m_EclDefinition.set(val); }
void CWUEclDefinitionActionResult::setAction(const char * val){ m_Action.set(val); }
void CWUEclDefinitionActionResult::setWUID(const char * val){ m_WUID.set(val); }
void CWUEclDefinitionActionResult::setQueryID(const char * val){ m_QueryID.set(val); }
void CWUEclDefinitionActionResult::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspWUEclDefinitionActionResult *createWUEclDefinitionActionResult(const char *serv, const char *msgname){return ((IEspWUEclDefinitionActionResult *)new CWUEclDefinitionActionResult(serv /*, msgname*/));}
extern "C"  IClientWUEclDefinitionActionResult *createClientWUEclDefinitionActionResult(const char *serv, const char *msgname){return ((IClientWUEclDefinitionActionResult *)new CWUEclDefinitionActionResult(serv /*, msgname*/));}

//=======================================================
// class CWUEclDefinitionActionRequest Implementation
//=======================================================

CWUEclDefinitionActionRequest::CWUEclDefinitionActionRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_EclDefinitions(nilRemove),m_ActionType(nilRemove),m_Target(nilRemove),m_RemoteDali(nilRemove),m_SourceProcess(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_MemoryLimit(nilRemove),m_DeletePrevious(0, nilRemove,false),m_SuspendPrevious(0, nilRemove,false),m_NoActivate(0, nilRemove,false),m_NoReload(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_AllowForeign(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperfiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_DontAppendCluster(0, nilRemove,false),m_MsToWait(-1, nilRemove,false),m_TimeLimit(-1, nilRemove,false),m_WarnTimeLimit(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUEclDefinitionActionRequest::CWUEclDefinitionActionRequest(const char *serviceName, const char *bc)
	: m_EclDefinitions(nilRemove),m_ActionType(nilRemove),m_Target(nilRemove),m_RemoteDali(nilRemove),m_SourceProcess(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_MemoryLimit(nilRemove),m_DeletePrevious(0, nilRemove,false),m_SuspendPrevious(0, nilRemove,false),m_NoActivate(0, nilRemove,false),m_NoReload(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_AllowForeign(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperfiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_DontAppendCluster(0, nilRemove,false),m_MsToWait(-1, nilRemove,false),m_TimeLimit(-1, nilRemove,false),m_WarnTimeLimit(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionRequest");
}

CWUEclDefinitionActionRequest::CWUEclDefinitionActionRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_EclDefinitions(nilRemove),m_ActionType(nilRemove),m_Target(nilRemove),m_RemoteDali(nilRemove),m_SourceProcess(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_MemoryLimit(nilRemove),m_DeletePrevious(0, nilRemove,false),m_SuspendPrevious(0, nilRemove,false),m_NoActivate(0, nilRemove,false),m_NoReload(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_AllowForeign(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperfiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_DontAppendCluster(0, nilRemove,false),m_MsToWait(-1, nilRemove,false),m_TimeLimit(-1, nilRemove,false),m_WarnTimeLimit(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUEclDefinitionActionRequest::CWUEclDefinitionActionRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_EclDefinitions(nilRemove),m_ActionType(nilRemove),m_Target(nilRemove),m_RemoteDali(nilRemove),m_SourceProcess(nilRemove),m_Priority(nilRemove),m_Comment(nilRemove),m_MemoryLimit(nilRemove),m_DeletePrevious(0, nilRemove,false),m_SuspendPrevious(0, nilRemove,false),m_NoActivate(0, nilRemove,false),m_NoReload(0, nilRemove,false),m_DontCopyFiles(0, nilRemove,false),m_AllowForeign(0, nilRemove,false),m_UpdateDfs(0, nilRemove,false),m_UpdateSuperfiles(0, nilRemove,false),m_UpdateCloneFrom(0, nilRemove,false),m_DontAppendCluster(0, nilRemove,false),m_MsToWait(-1, nilRemove,false),m_TimeLimit(-1, nilRemove,false),m_WarnTimeLimit(-1, nilRemove,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUEclDefinitionActionRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"EclDefinitions\" type=\"tns:EspStringArray\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionType\" type=\"tns:EclDefinitionActions\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Target\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"RemoteDali\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"SourceProcess\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Priority\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Comment\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"MemoryLimit\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"DeletePrevious\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"SuspendPrevious\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoActivate\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"NoReload\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"DontCopyFiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"AllowForeign\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateDfs\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateSuperfiles\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"UpdateCloneFrom\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"DontAppendCluster\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"MsToWait\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"TimeLimit\" type=\"xsd:int\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"-1\" name=\"WarnTimeLimit\" type=\"xsd:int\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CXEclDefinitionActions::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("EspStringArray")==NULL) {
		addEspNativeArray(schema,"string","EspStringArray");
		added.setValue("EspStringArray",1);
	}
	return schema;
}

void CWUEclDefinitionActionRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUEclDefinitionActionRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("EclDefinitionActions"))
	{
		added.setValue("EclDefinitionActions",1);
		CXEclDefinitionActions::getMapInfo(info,added);
	}
}

StringBuffer &CWUEclDefinitionActionRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("EclDefinitions");
	form.appendf("<tr><td><b>EclDefinitions: </b></td><td>");
	form.appendf("<textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea>", extfix.str());
	form.append("</td></tr>");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionType");
	form.appendf("  <tr><td><b>ActionType: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Target");
	form.appendf("  <tr><td><b>Target: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("RemoteDali");
	form.appendf("  <tr><td><b>RemoteDali: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SourceProcess");
	form.appendf("  <tr><td><b>SourceProcess: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Priority");
	form.appendf("  <tr><td><b>Priority: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Comment");
	form.appendf("  <tr><td><b>Comment: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("MemoryLimit");
	form.appendf("  <tr><td><b>MemoryLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DeletePrevious");
	
	form.appendf("  <tr><td><b>DeletePrevious? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("SuspendPrevious");
	
	form.appendf("  <tr><td><b>SuspendPrevious? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoActivate");
	
	form.appendf("  <tr><td><b>NoActivate? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("NoReload");
	
	form.appendf("  <tr><td><b>NoReload? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DontCopyFiles");
	
	form.appendf("  <tr><td><b>DontCopyFiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("AllowForeign");
	
	form.appendf("  <tr><td><b>AllowForeign? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateDfs");
	
	form.appendf("  <tr><td><b>UpdateDfs? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateSuperfiles");
	
	form.appendf("  <tr><td><b>UpdateSuperfiles? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("UpdateCloneFrom");
	
	form.appendf("  <tr><td><b>UpdateCloneFrom? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DontAppendCluster");
	
	form.appendf("  <tr><td><b>DontAppendCluster? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("MsToWait");
	form.appendf("  <tr><td><b>MsToWait: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("TimeLimit");
	form.appendf("  <tr><td><b>TimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix) extfix.append(prefix).append(".");
		extfix.append("WarnTimeLimit");
	form.appendf("  <tr><td><b>WarnTimeLimit: </b></td><td><input type=\"text\" name=\"%s\" size=\"20\"	 value=\"-1\"/>", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUEclDefinitionActionRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUEclDefinitionActionRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_EclDefinitions.marshall(rpc_resp, "EclDefinitions", "Item");
	m_ActionType.marshall(rpc_resp, "ActionType", "", "", "");
	m_Target.marshall(rpc_resp, "Target", "", "", "");
	m_RemoteDali.marshall(rpc_resp, "RemoteDali", "", "", "");
	m_SourceProcess.marshall(rpc_resp, "SourceProcess", "", "", "");
	m_Priority.marshall(rpc_resp, "Priority", "", "", "");
	m_Comment.marshall(rpc_resp, "Comment", "", "", "");
	m_MemoryLimit.marshall(rpc_resp, "MemoryLimit", "", "", "");
	m_DeletePrevious.marshall(rpc_resp, "DeletePrevious", "", "", "");
	m_SuspendPrevious.marshall(rpc_resp, "SuspendPrevious", "", "", "");
	m_NoActivate.marshall(rpc_resp, "NoActivate", "", "", "");
	m_NoReload.marshall(rpc_resp, "NoReload", "", "", "");
	m_DontCopyFiles.marshall(rpc_resp, "DontCopyFiles", "", "", "");
	m_AllowForeign.marshall(rpc_resp, "AllowForeign", "", "", "");
	m_UpdateDfs.marshall(rpc_resp, "UpdateDfs", "", "", "");
	m_UpdateSuperfiles.marshall(rpc_resp, "UpdateSuperfiles", "", "", "");
	m_UpdateCloneFrom.marshall(rpc_resp, "UpdateCloneFrom", "", "", "");
	m_DontAppendCluster.marshall(rpc_resp, "DontAppendCluster", "", "", "");
	m_MsToWait.marshall(rpc_resp, "MsToWait", "", "", "");
	m_TimeLimit.marshall(rpc_resp, "TimeLimit", "", "", "");
	m_WarnTimeLimit.marshall(rpc_resp, "WarnTimeLimit", "", "", "");
}


void CWUEclDefinitionActionRequest::copy(CWUEclDefinitionActionRequest &from)
{
	m_EclDefinitions.copy(from.m_EclDefinitions);
	m_ActionType.copy(from.m_ActionType);
	m_Target.copy(from.m_Target);
	m_RemoteDali.copy(from.m_RemoteDali);
	m_SourceProcess.copy(from.m_SourceProcess);
	m_Priority.copy(from.m_Priority);
	m_Comment.copy(from.m_Comment);
	m_MemoryLimit.copy(from.m_MemoryLimit);
	m_DeletePrevious.copy(from.m_DeletePrevious);
	m_SuspendPrevious.copy(from.m_SuspendPrevious);
	m_NoActivate.copy(from.m_NoActivate);
	m_NoReload.copy(from.m_NoReload);
	m_DontCopyFiles.copy(from.m_DontCopyFiles);
	m_AllowForeign.copy(from.m_AllowForeign);
	m_UpdateDfs.copy(from.m_UpdateDfs);
	m_UpdateSuperfiles.copy(from.m_UpdateSuperfiles);
	m_UpdateCloneFrom.copy(from.m_UpdateCloneFrom);
	m_DontAppendCluster.copy(from.m_DontAppendCluster);
	m_MsToWait.copy(from.m_MsToWait);
	m_TimeLimit.copy(from.m_TimeLimit);
	m_WarnTimeLimit.copy(from.m_WarnTimeLimit);
}


void CWUEclDefinitionActionRequest::copy(IConstWUEclDefinitionActionRequest &ifrom)
{
	setEclDefinitions(ifrom.getEclDefinitions());
	setActionType(ifrom.getActionType());
	setTarget(ifrom.getTarget());
	setRemoteDali(ifrom.getRemoteDali());
	setSourceProcess(ifrom.getSourceProcess());
	setPriority(ifrom.getPriority());
	setComment(ifrom.getComment());
	setMemoryLimit(ifrom.getMemoryLimit());
	setDeletePrevious(ifrom.getDeletePrevious());
	setSuspendPrevious(ifrom.getSuspendPrevious());
	setNoActivate(ifrom.getNoActivate());
	setNoReload(ifrom.getNoReload());
	setDontCopyFiles(ifrom.getDontCopyFiles());
	setAllowForeign(ifrom.getAllowForeign());
	setUpdateDfs(ifrom.getUpdateDfs());
	setUpdateSuperfiles(ifrom.getUpdateSuperfiles());
	setUpdateCloneFrom(ifrom.getUpdateCloneFrom());
	setDontAppendCluster(ifrom.getDontAppendCluster());
	setMsToWait(ifrom.getMsToWait());
	setTimeLimit(ifrom.getTimeLimit());
	setWarnTimeLimit(ifrom.getWarnTimeLimit());
}


void CWUEclDefinitionActionRequest::getAttributes(IProperties &attributes)
{
}


void CWUEclDefinitionActionRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_EclDefinitions.toStr(ctx, buffer, "EclDefinitions", "Item");
	m_ActionType.toStr(ctx, buffer, "ActionType", "", true, "", "");
	m_Target.toStr(ctx, buffer, "Target", "", true, "", "");
	m_RemoteDali.toStr(ctx, buffer, "RemoteDali", "", true, "", "");
	m_SourceProcess.toStr(ctx, buffer, "SourceProcess", "", true, "", "");
	m_Priority.toStr(ctx, buffer, "Priority", "", true, "", "");
	m_Comment.toStr(ctx, buffer, "Comment", "", true, "", "");
	m_MemoryLimit.toStr(ctx, buffer, "MemoryLimit", "", true, "", "");
	m_DeletePrevious.toStr(ctx, buffer, "DeletePrevious", "", true, "", "");
	m_SuspendPrevious.toStr(ctx, buffer, "SuspendPrevious", "", true, "", "");
	m_NoActivate.toStr(ctx, buffer, "NoActivate", "", true, "", "");
	m_NoReload.toStr(ctx, buffer, "NoReload", "", true, "", "");
	m_DontCopyFiles.toStr(ctx, buffer, "DontCopyFiles", "", true, "", "");
	m_AllowForeign.toStr(ctx, buffer, "AllowForeign", "", true, "", "");
	m_UpdateDfs.toStr(ctx, buffer, "UpdateDfs", "", true, "", "");
	m_UpdateSuperfiles.toStr(ctx, buffer, "UpdateSuperfiles", "", true, "", "");
	m_UpdateCloneFrom.toStr(ctx, buffer, "UpdateCloneFrom", "", true, "", "");
	m_DontAppendCluster.toStr(ctx, buffer, "DontAppendCluster", "", true, "", "");
	m_MsToWait.toStr(ctx, buffer, "MsToWait", "", true, "", "");
	m_TimeLimit.toStr(ctx, buffer, "TimeLimit", "", true, "", "");
	m_WarnTimeLimit.toStr(ctx, buffer, "WarnTimeLimit", "", true, "", "");
}


void CWUEclDefinitionActionRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUEclDefinitionActionRequest::serializer(IEspContext* ctx, IConstWUEclDefinitionActionRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUEclDefinitionActionRequest>");
	// field EclDefinitions
	{
		StringArray& v = src.getEclDefinitions();
		if (v.length()>0)
			buffer.append("<EclDefinitions>");
		for (size32_t i=0;i<v.length();i++)
			buffer.appendf("<Item>%s</Item>",v.item(i));
		if (v.length()>0)
			buffer.append("</EclDefinitions>");
	}
	// field ActionType
	{
		const char* s = src.getActionTypeAsString();
		buffer.append("<ActionType>");
		encodeUtf8XML(s,buffer);
		buffer.append("</ActionType>");
	}
	// field Target
	{
		const char* s = src.getTarget();
		if (s && *s)
		{
			buffer.append("<Target>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Target>");
		}
	}
	// field RemoteDali
	{
		const char* s = src.getRemoteDali();
		if (s && *s)
		{
			buffer.append("<RemoteDali>");
			encodeUtf8XML(s,buffer);
			buffer.append("</RemoteDali>");
		}
	}
	// field SourceProcess
	{
		const char* s = src.getSourceProcess();
		if (s && *s)
		{
			buffer.append("<SourceProcess>");
			encodeUtf8XML(s,buffer);
			buffer.append("</SourceProcess>");
		}
	}
	// field Priority
	{
		const char* s = src.getPriority();
		if (s && *s)
		{
			buffer.append("<Priority>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Priority>");
		}
	}
	// field Comment
	{
		const char* s = src.getComment();
		if (s && *s)
		{
			buffer.append("<Comment>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Comment>");
		}
	}
	// field MemoryLimit
	{
		const char* s = src.getMemoryLimit();
		if (s && *s)
		{
			buffer.append("<MemoryLimit>");
			encodeUtf8XML(s,buffer);
			buffer.append("</MemoryLimit>");
		}
	}
	// field DeletePrevious
	{
		bool b = src.getDeletePrevious();
		if (b)
			buffer.appendf("<DeletePrevious>1</DeletePrevious>");
	}
	// field SuspendPrevious
	{
		bool b = src.getSuspendPrevious();
		if (b)
			buffer.appendf("<SuspendPrevious>1</SuspendPrevious>");
	}
	// field NoActivate
	{
		bool b = src.getNoActivate();
		if (b)
			buffer.appendf("<NoActivate>1</NoActivate>");
	}
	// field NoReload
	{
		bool b = src.getNoReload();
		if (b)
			buffer.appendf("<NoReload>1</NoReload>");
	}
	// field DontCopyFiles
	{
		bool b = src.getDontCopyFiles();
		if (b)
			buffer.appendf("<DontCopyFiles>1</DontCopyFiles>");
	}
	// field AllowForeign
	{
		bool b = src.getAllowForeign();
		if (b)
			buffer.appendf("<AllowForeign>1</AllowForeign>");
	}
	// field UpdateDfs
	{
		bool b = src.getUpdateDfs();
		if (b)
			buffer.appendf("<UpdateDfs>1</UpdateDfs>");
	}
	// field UpdateSuperfiles
	{
		bool b = src.getUpdateSuperfiles();
		if (b)
			buffer.appendf("<UpdateSuperfiles>1</UpdateSuperfiles>");
	}
	// field UpdateCloneFrom
	{
		bool b = src.getUpdateCloneFrom();
		if (b)
			buffer.appendf("<UpdateCloneFrom>1</UpdateCloneFrom>");
	}
	// field DontAppendCluster
	{
		bool b = src.getDontAppendCluster();
		if (b)
			buffer.appendf("<DontAppendCluster>1</DontAppendCluster>");
	}
	// field MsToWait
	{
		int n = src.getMsToWait();
		if (n)
			buffer.appendf("<MsToWait>%d</MsToWait>", n);
	}
	// field TimeLimit
	{
		int n = src.getTimeLimit();
		if (n)
			buffer.appendf("<TimeLimit>%d</TimeLimit>", n);
	}
	// field WarnTimeLimit
	{
		int n = src.getWarnTimeLimit();
		if (n)
			buffer.appendf("<WarnTimeLimit>%d</WarnTimeLimit>", n);
	}
	if (keepRootTag)
		buffer.append("</WUEclDefinitionActionRequest>");
}

bool CWUEclDefinitionActionRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_EclDefinitions.unmarshall(rpc_request, "EclDefinitions", basepath);
	hasValue |= m_ActionType.unmarshall(rpc_request, "ActionType", basepath);
	hasValue |= m_Target.unmarshall(rpc_request, "Target", basepath);
	hasValue |= m_RemoteDali.unmarshall(rpc_request, "RemoteDali", basepath);
	hasValue |= m_SourceProcess.unmarshall(rpc_request, "SourceProcess", basepath);
	hasValue |= m_Priority.unmarshall(rpc_request, "Priority", basepath);
	hasValue |= m_Comment.unmarshall(rpc_request, "Comment", basepath);
	hasValue |= m_MemoryLimit.unmarshall(rpc_request, "MemoryLimit", basepath);
	hasValue |= m_DeletePrevious.unmarshall(rpc_request, "DeletePrevious", basepath);
	hasValue |= m_SuspendPrevious.unmarshall(rpc_request, "SuspendPrevious", basepath);
	hasValue |= m_NoActivate.unmarshall(rpc_request, "NoActivate", basepath);
	hasValue |= m_NoReload.unmarshall(rpc_request, "NoReload", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(rpc_request, "DontCopyFiles", basepath);
	hasValue |= m_AllowForeign.unmarshall(rpc_request, "AllowForeign", basepath);
	hasValue |= m_UpdateDfs.unmarshall(rpc_request, "UpdateDfs", basepath);
	hasValue |= m_UpdateSuperfiles.unmarshall(rpc_request, "UpdateSuperfiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(rpc_request, "UpdateCloneFrom", basepath);
	hasValue |= m_DontAppendCluster.unmarshall(rpc_request, "DontAppendCluster", basepath);
	hasValue |= m_MsToWait.unmarshall(rpc_request, "MsToWait", basepath);
	hasValue |= m_TimeLimit.unmarshall(rpc_request, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(rpc_request, "WarnTimeLimit", basepath);
	return hasValue;
}

bool CWUEclDefinitionActionRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_EclDefinitions.unmarshall(ctx, soapval, "EclDefinitions");
	hasValue |= m_ActionType.unmarshall(ctx, soapval, "ActionType");
	hasValue |= m_Target.unmarshall(ctx, soapval, "Target");
	hasValue |= m_RemoteDali.unmarshall(ctx, soapval, "RemoteDali");
	hasValue |= m_SourceProcess.unmarshall(ctx, soapval, "SourceProcess");
	hasValue |= m_Priority.unmarshall(ctx, soapval, "Priority");
	hasValue |= m_Comment.unmarshall(ctx, soapval, "Comment");
	hasValue |= m_MemoryLimit.unmarshall(ctx, soapval, "MemoryLimit");
	hasValue |= m_DeletePrevious.unmarshall(ctx, soapval, "DeletePrevious");
	hasValue |= m_SuspendPrevious.unmarshall(ctx, soapval, "SuspendPrevious");
	hasValue |= m_NoActivate.unmarshall(ctx, soapval, "NoActivate");
	hasValue |= m_NoReload.unmarshall(ctx, soapval, "NoReload");
	hasValue |= m_DontCopyFiles.unmarshall(ctx, soapval, "DontCopyFiles");
	hasValue |= m_AllowForeign.unmarshall(ctx, soapval, "AllowForeign");
	hasValue |= m_UpdateDfs.unmarshall(ctx, soapval, "UpdateDfs");
	hasValue |= m_UpdateSuperfiles.unmarshall(ctx, soapval, "UpdateSuperfiles");
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, soapval, "UpdateCloneFrom");
	hasValue |= m_DontAppendCluster.unmarshall(ctx, soapval, "DontAppendCluster");
	hasValue |= m_MsToWait.unmarshall(ctx, soapval, "MsToWait");
	hasValue |= m_TimeLimit.unmarshall(ctx, soapval, "TimeLimit");
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, soapval, "WarnTimeLimit");
	return hasValue;
}

bool CWUEclDefinitionActionRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_EclDefinitions.unmarshall(ctx, params, attachments, "EclDefinitions", basepath);
	hasValue |= m_ActionType.unmarshall(ctx, params, attachments, "ActionType", basepath);
	hasValue |= m_Target.unmarshall(ctx, params, attachments, "Target", basepath);
	hasValue |= m_RemoteDali.unmarshall(ctx, params, attachments, "RemoteDali", basepath);
	hasValue |= m_SourceProcess.unmarshall(ctx, params, attachments, "SourceProcess", basepath);
	hasValue |= m_Priority.unmarshall(ctx, params, attachments, "Priority", basepath);
	hasValue |= m_Comment.unmarshall(ctx, params, attachments, "Comment", basepath);
	hasValue |= m_MemoryLimit.unmarshall(ctx, params, attachments, "MemoryLimit", basepath);
	hasValue |= m_DeletePrevious.unmarshall(ctx, params, attachments, "DeletePrevious", basepath);
	hasValue |= m_SuspendPrevious.unmarshall(ctx, params, attachments, "SuspendPrevious", basepath);
	hasValue |= m_NoActivate.unmarshall(ctx, params, attachments, "NoActivate", basepath);
	hasValue |= m_NoReload.unmarshall(ctx, params, attachments, "NoReload", basepath);
	hasValue |= m_DontCopyFiles.unmarshall(ctx, params, attachments, "DontCopyFiles", basepath);
	hasValue |= m_AllowForeign.unmarshall(ctx, params, attachments, "AllowForeign", basepath);
	hasValue |= m_UpdateDfs.unmarshall(ctx, params, attachments, "UpdateDfs", basepath);
	hasValue |= m_UpdateSuperfiles.unmarshall(ctx, params, attachments, "UpdateSuperfiles", basepath);
	hasValue |= m_UpdateCloneFrom.unmarshall(ctx, params, attachments, "UpdateCloneFrom", basepath);
	hasValue |= m_DontAppendCluster.unmarshall(ctx, params, attachments, "DontAppendCluster", basepath);
	hasValue |= m_MsToWait.unmarshall(ctx, params, attachments, "MsToWait", basepath);
	hasValue |= m_TimeLimit.unmarshall(ctx, params, attachments, "TimeLimit", basepath);
	hasValue |= m_WarnTimeLimit.unmarshall(ctx, params, attachments, "WarnTimeLimit", basepath);
	return hasValue;
}

StringArray & CWUEclDefinitionActionRequest::getEclDefinitions() { return (StringArray &) m_EclDefinitions; }
CEclDefinitionActions CWUEclDefinitionActionRequest::getActionType() { return m_ActionType.getValue(); }
const char* CWUEclDefinitionActionRequest::getActionTypeAsString() {  return (const char*)m_ActionType; }
const char * CWUEclDefinitionActionRequest::getTarget() { return m_Target.query();}
const char * CWUEclDefinitionActionRequest::getRemoteDali() { return m_RemoteDali.query();}
const char * CWUEclDefinitionActionRequest::getSourceProcess() { return m_SourceProcess.query();}
const char * CWUEclDefinitionActionRequest::getPriority() { return m_Priority.query();}
const char * CWUEclDefinitionActionRequest::getComment() { return m_Comment.query();}
const char * CWUEclDefinitionActionRequest::getMemoryLimit() { return m_MemoryLimit.query();}
bool CWUEclDefinitionActionRequest::getDeletePrevious_isNull(){return m_DeletePrevious.is_nil();}
bool CWUEclDefinitionActionRequest::getDeletePrevious() { return m_DeletePrevious;}
bool CWUEclDefinitionActionRequest::getSuspendPrevious_isNull(){return m_SuspendPrevious.is_nil();}
bool CWUEclDefinitionActionRequest::getSuspendPrevious() { return m_SuspendPrevious;}
bool CWUEclDefinitionActionRequest::getNoActivate_isNull(){return m_NoActivate.is_nil();}
bool CWUEclDefinitionActionRequest::getNoActivate() { return m_NoActivate;}
bool CWUEclDefinitionActionRequest::getNoReload_isNull(){return m_NoReload.is_nil();}
bool CWUEclDefinitionActionRequest::getNoReload() { return m_NoReload;}
bool CWUEclDefinitionActionRequest::getDontCopyFiles_isNull(){return m_DontCopyFiles.is_nil();}
bool CWUEclDefinitionActionRequest::getDontCopyFiles() { return m_DontCopyFiles;}
bool CWUEclDefinitionActionRequest::getAllowForeign_isNull(){return m_AllowForeign.is_nil();}
bool CWUEclDefinitionActionRequest::getAllowForeign() { return m_AllowForeign;}
bool CWUEclDefinitionActionRequest::getUpdateDfs_isNull(){return m_UpdateDfs.is_nil();}
bool CWUEclDefinitionActionRequest::getUpdateDfs() { return m_UpdateDfs;}
bool CWUEclDefinitionActionRequest::getUpdateSuperfiles_isNull(){return m_UpdateSuperfiles.is_nil();}
bool CWUEclDefinitionActionRequest::getUpdateSuperfiles() { return m_UpdateSuperfiles;}
bool CWUEclDefinitionActionRequest::getUpdateCloneFrom_isNull(){return m_UpdateCloneFrom.is_nil();}
bool CWUEclDefinitionActionRequest::getUpdateCloneFrom() { return m_UpdateCloneFrom;}
bool CWUEclDefinitionActionRequest::getDontAppendCluster_isNull(){return m_DontAppendCluster.is_nil();}
bool CWUEclDefinitionActionRequest::getDontAppendCluster() { return m_DontAppendCluster;}
bool CWUEclDefinitionActionRequest::getMsToWait_isNull(){return m_MsToWait.is_nil();}
int CWUEclDefinitionActionRequest::getMsToWait() { return m_MsToWait;}
bool CWUEclDefinitionActionRequest::getTimeLimit_isNull(){return m_TimeLimit.is_nil();}
int CWUEclDefinitionActionRequest::getTimeLimit() { return m_TimeLimit;}
bool CWUEclDefinitionActionRequest::getWarnTimeLimit_isNull(){return m_WarnTimeLimit.is_nil();}
int CWUEclDefinitionActionRequest::getWarnTimeLimit() { return m_WarnTimeLimit;}
void CWUEclDefinitionActionRequest::setEclDefinitions(StringArray &val){ m_EclDefinitions->kill();  CloneArray(m_EclDefinitions.getValue(), val); }
void CWUEclDefinitionActionRequest::setActionType(CEclDefinitionActions val) { m_ActionType.setValue(val); }
void CWUEclDefinitionActionRequest::setActionType(const char* val) { m_ActionType.setValue(val); }
void CWUEclDefinitionActionRequest::setTarget(const char * val){ m_Target.set(val); }
void CWUEclDefinitionActionRequest::setRemoteDali(const char * val){ m_RemoteDali.set(val); }
void CWUEclDefinitionActionRequest::setSourceProcess(const char * val){ m_SourceProcess.set(val); }
void CWUEclDefinitionActionRequest::setPriority(const char * val){ m_Priority.set(val); }
void CWUEclDefinitionActionRequest::setComment(const char * val){ m_Comment.set(val); }
void CWUEclDefinitionActionRequest::setMemoryLimit(const char * val){ m_MemoryLimit.set(val); }
void CWUEclDefinitionActionRequest::setDeletePrevious_null(){ m_DeletePrevious.Nil(); }void CWUEclDefinitionActionRequest::setDeletePrevious(bool val){ m_DeletePrevious=val; }
void CWUEclDefinitionActionRequest::setSuspendPrevious_null(){ m_SuspendPrevious.Nil(); }void CWUEclDefinitionActionRequest::setSuspendPrevious(bool val){ m_SuspendPrevious=val; }
void CWUEclDefinitionActionRequest::setNoActivate_null(){ m_NoActivate.Nil(); }void CWUEclDefinitionActionRequest::setNoActivate(bool val){ m_NoActivate=val; }
void CWUEclDefinitionActionRequest::setNoReload_null(){ m_NoReload.Nil(); }void CWUEclDefinitionActionRequest::setNoReload(bool val){ m_NoReload=val; }
void CWUEclDefinitionActionRequest::setDontCopyFiles_null(){ m_DontCopyFiles.Nil(); }void CWUEclDefinitionActionRequest::setDontCopyFiles(bool val){ m_DontCopyFiles=val; }
void CWUEclDefinitionActionRequest::setAllowForeign_null(){ m_AllowForeign.Nil(); }void CWUEclDefinitionActionRequest::setAllowForeign(bool val){ m_AllowForeign=val; }
void CWUEclDefinitionActionRequest::setUpdateDfs_null(){ m_UpdateDfs.Nil(); }void CWUEclDefinitionActionRequest::setUpdateDfs(bool val){ m_UpdateDfs=val; }
void CWUEclDefinitionActionRequest::setUpdateSuperfiles_null(){ m_UpdateSuperfiles.Nil(); }void CWUEclDefinitionActionRequest::setUpdateSuperfiles(bool val){ m_UpdateSuperfiles=val; }
void CWUEclDefinitionActionRequest::setUpdateCloneFrom_null(){ m_UpdateCloneFrom.Nil(); }void CWUEclDefinitionActionRequest::setUpdateCloneFrom(bool val){ m_UpdateCloneFrom=val; }
void CWUEclDefinitionActionRequest::setDontAppendCluster_null(){ m_DontAppendCluster.Nil(); }void CWUEclDefinitionActionRequest::setDontAppendCluster(bool val){ m_DontAppendCluster=val; }
void CWUEclDefinitionActionRequest::setMsToWait_null(){ m_MsToWait.Nil(); }void CWUEclDefinitionActionRequest::setMsToWait(int val){ m_MsToWait=val; }
void CWUEclDefinitionActionRequest::setTimeLimit_null(){ m_TimeLimit.Nil(); }void CWUEclDefinitionActionRequest::setTimeLimit(int val){ m_TimeLimit=val; }
void CWUEclDefinitionActionRequest::setWarnTimeLimit_null(){ m_WarnTimeLimit.Nil(); }void CWUEclDefinitionActionRequest::setWarnTimeLimit(int val){ m_WarnTimeLimit=val; }
extern "C"  IEspWUEclDefinitionActionRequest *createWUEclDefinitionActionRequest(const char *serv){return ((IEspWUEclDefinitionActionRequest *)new CWUEclDefinitionActionRequest(serv));}
extern "C"  IClientWUEclDefinitionActionRequest *createClientWUEclDefinitionActionRequest(const char *serv){return ((IClientWUEclDefinitionActionRequest *)new CWUEclDefinitionActionRequest(serv));}

//=======================================================
// class CWUEclDefinitionActionResponse Implementation
//=======================================================

CWUEclDefinitionActionResponse::CWUEclDefinitionActionResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWUEclDefinitionActionResponse::CWUEclDefinitionActionResponse(const char *serviceName, const char *bc)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionResponse");
}

CWUEclDefinitionActionResponse::CWUEclDefinitionActionResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWUEclDefinitionActionResponse::CWUEclDefinitionActionResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_ActionResults(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WUEclDefinitionActionResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWUEclDefinitionActionResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"ActionResults\" type=\"tns:ArrayOfWUEclDefinitionActionResult\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	if (!(flags & 0x10)  || (flags & 0x100))
	{
		CWUEclDefinitionActionResult::getXsdDefinition(context, request, schema, added);
	}
	if (added.getValue("WUEclDefinitionActionResult") && added.getValue("ArrayOfWUEclDefinitionActionResult")==NULL) {
		schema.append("<xsd:complexType name=\"ArrayOfWUEclDefinitionActionResult\">\n");
		schema.append("<xsd:sequence>\n");
		schema.append("<xsd:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WUEclDefinitionActionResult\" type=\"tns:WUEclDefinitionActionResult\"/>\n");
		schema.append("</xsd:sequence>\n");
		schema.append("</xsd:complexType>\n");
		added.setValue("ArrayOfWUEclDefinitionActionResult",1);
	}
	return schema;
}

void CWUEclDefinitionActionResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWUEclDefinitionActionResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
	if (!added.getValue("WUEclDefinitionActionResult"))
	{
		added.setValue("WUEclDefinitionActionResult",1);
		CWUEclDefinitionActionResult::getMapInfo(info,added);
	}
}

StringBuffer &CWUEclDefinitionActionResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("ActionResults");
	form.appendf("<tr><td><b>ActionResults: </b></td><td>");
	form.appendf("<table><tr><td><textarea name=\"%s\" cols=\"50\" rows=\"5\"></textarea></td>", extfix.str());
	form.append("</tr></table>");
	form.append("</td></tr>");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWUEclDefinitionActionResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWUEclDefinitionActionResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_ActionResults.marshall(rpc_resp, "ActionResults", "WUEclDefinitionActionResult");
	}
}


void CWUEclDefinitionActionResponse::copy(CWUEclDefinitionActionResponse &from)
{
	m_ActionResults.copy(from.m_ActionResults);
}


void CWUEclDefinitionActionResponse::copy(IConstWUEclDefinitionActionResponse &ifrom)
{
	setActionResults(ifrom.getActionResults());
}


void CWUEclDefinitionActionResponse::getAttributes(IProperties &attributes)
{
}


void CWUEclDefinitionActionResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_ActionResults.toStr(ctx, buffer, "ActionResults", "WUEclDefinitionActionResult");
	}
}


void CWUEclDefinitionActionResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWUEclDefinitionActionResponse::serializer(IEspContext* ctx, IConstWUEclDefinitionActionResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WUEclDefinitionActionResponse>");
	// field ActionResults
	{
		IArrayOf<IConstWUEclDefinitionActionResult>& v = src.getActionResults();
		int size = v.length();
		if (size>0)
			buffer.append("<ActionResults>");
		for (int i=0;i<size;i++)
		{
			buffer.append("<Item>");
			CWUEclDefinitionActionResult::serializer(ctx,v.item(i),buffer,false);
			buffer.append("</Item>");
		}
		if (size>0)
			buffer.append("</ActionResults>");
	}
	if (keepRootTag)
		buffer.append("</WUEclDefinitionActionResponse>");
}

bool CWUEclDefinitionActionResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_ActionResults.unmarshall(rpc_request, "ActionResults", basepath);
	}
	return hasValue;
}

bool CWUEclDefinitionActionResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, soapval, "ActionResults");
	return hasValue;
}

bool CWUEclDefinitionActionResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_ActionResults.unmarshall(ctx, params, attachments, "ActionResults", basepath);
	return hasValue;
}

IArrayOf<IConstWUEclDefinitionActionResult> & CWUEclDefinitionActionResponse::getActionResults() { return (IArrayOf<IConstWUEclDefinitionActionResult> &) m_ActionResults; }
void CWUEclDefinitionActionResponse::setActionResults(IArrayOf<IEspWUEclDefinitionActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUEclDefinitionActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IEspWUEclDefinitionActionResult &item = (val).item(idx);
		item.Link();
		target.append(item);
	}
}
void CWUEclDefinitionActionResponse::setActionResults(IArrayOf<IConstWUEclDefinitionActionResult> &val)
{
	m_ActionResults->kill();
	IArrayOf<IConstWUEclDefinitionActionResult> &target = m_ActionResults.getValue();
	ForEachItemIn(idx, val)
	{
		IConstWUEclDefinitionActionResult &item = val.item(idx);
		item.Link();
		target.append(item);
	}
}
extern "C"  IEspWUEclDefinitionActionResponse *createWUEclDefinitionActionResponse(const char *serv){return ((IEspWUEclDefinitionActionResponse *)new CWUEclDefinitionActionResponse(serv));}
extern "C"  IClientWUEclDefinitionActionResponse *createClientWUEclDefinitionActionResponse(const char *serv){return ((IClientWUEclDefinitionActionResponse *)new CWUEclDefinitionActionResponse(serv));}

//=======================================================
// class CWsWorkunitsPingRequest Implementation
//=======================================================

CWsWorkunitsPingRequest::CWsWorkunitsPingRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsWorkunitsPingRequest::CWsWorkunitsPingRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingRequest");
}

CWsWorkunitsPingRequest::CWsWorkunitsPingRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsWorkunitsPingRequest::CWsWorkunitsPingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsWorkunitsPingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsWorkunitsPingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsWorkunitsPingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsWorkunitsPingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsWorkunitsPingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsWorkunitsPingRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWsWorkunitsPingRequest::copy(CWsWorkunitsPingRequest &from)
{
}


void CWsWorkunitsPingRequest::copy(IConstWsWorkunitsPingRequest &ifrom)
{
}


void CWsWorkunitsPingRequest::getAttributes(IProperties &attributes)
{
}


void CWsWorkunitsPingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWsWorkunitsPingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsWorkunitsPingRequest::serializer(IEspContext* ctx, IConstWsWorkunitsPingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsWorkunitsPingRequest>");
	if (keepRootTag)
		buffer.append("</WsWorkunitsPingRequest>");
}

bool CWsWorkunitsPingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWsWorkunitsPingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsWorkunitsPingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsWorkunitsPingRequest *createWsWorkunitsPingRequest(const char *serv){return ((IEspWsWorkunitsPingRequest *)new CWsWorkunitsPingRequest(serv));}
extern "C"  IClientWsWorkunitsPingRequest *createClientWsWorkunitsPingRequest(const char *serv){return ((IClientWsWorkunitsPingRequest *)new CWsWorkunitsPingRequest(serv));}

//=======================================================
// class CWsWorkunitsPingResponse Implementation
//=======================================================

CWsWorkunitsPingResponse::CWsWorkunitsPingResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsWorkunitsPingResponse::CWsWorkunitsPingResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingResponse");
}

CWsWorkunitsPingResponse::CWsWorkunitsPingResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsWorkunitsPingResponse::CWsWorkunitsPingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsWorkunitsPingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsWorkunitsPingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsWorkunitsPingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsWorkunitsPingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsWorkunitsPingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsWorkunitsPingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsWorkunitsPingResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWsWorkunitsPingResponse::copy(CWsWorkunitsPingResponse &from)
{
}


void CWsWorkunitsPingResponse::copy(IConstWsWorkunitsPingResponse &ifrom)
{
}


void CWsWorkunitsPingResponse::getAttributes(IProperties &attributes)
{
}


void CWsWorkunitsPingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWsWorkunitsPingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsWorkunitsPingResponse::serializer(IEspContext* ctx, IConstWsWorkunitsPingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsWorkunitsPingResponse>");
	if (keepRootTag)
		buffer.append("</WsWorkunitsPingResponse>");
}

bool CWsWorkunitsPingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWsWorkunitsPingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsWorkunitsPingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsWorkunitsPingResponse *createWsWorkunitsPingResponse(const char *serv){return ((IEspWsWorkunitsPingResponse *)new CWsWorkunitsPingResponse(serv));}
extern "C"  IClientWsWorkunitsPingResponse *createClientWsWorkunitsPingResponse(const char *serv){return ((IClientWsWorkunitsPingResponse *)new CWsWorkunitsPingResponse(serv));}

//=======================================================
// class CWsWorkunitsSoapBinding Implementation
//=======================================================

CWsWorkunitsSoapBinding::CWsWorkunitsSoapBinding(http_soap_log_level level):CHttpSoapBinding(NULL, NULL, NULL, level)
{
	init_strings();
	setWsdlVersion(1.74);
}

CWsWorkunitsSoapBinding::CWsWorkunitsSoapBinding(IPropertyTree* cfg, const char *bindname, const char *procname, http_soap_log_level level):CHttpSoapBinding(cfg, bindname, procname, level)
{
	init_strings(); 
	setWsdlVersion(1.74);

}

void CWsWorkunitsSoapBinding::init_strings()
{
	addMethodDescription("GVCAjaxGraph", "Stub for Ajax GVC Graph.");
	setCacheTimeout("WUClusterJobQueueXLS", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUClusterJobSummaryXLS", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUClusterJobXLS", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUDetailsMeta", 600, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUFile", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGVCGraphInfo", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetArchiveFile", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetDependancyTrees", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetGraph", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetGraphNameAndTypes", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetNumFileToCopy", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetStats", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetThorJobList", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGetThorJobQueue", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGraphInfo", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUGraphTiming", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUInfo", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUInfoDetails", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUJobList", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WULightWeightQuery", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUListArchiveFiles", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUListLocalFileRequired", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUListQueries", 60, 0);
	m_cacheMethodCount++;
	setCacheGroupID("WUListQueries", "ESPWsWUQS");
	setCacheTimeout("WUListQueriesUsingFile", 60, 0);
	m_cacheMethodCount++;
	setCacheGroupID("WUListQueriesUsingFile", "ESPWsWUQS");
	setCacheTimeout("WUMultiQuerysetDetails", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUQuery", 60, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUQueryDetails", 60, 0);
	m_cacheMethodCount++;
	setCacheGroupID("WUQueryDetails", "ESPWsWUQS");
	setCacheTimeout("WUQueryFiles", 60, 0);
	m_cacheMethodCount++;
	setCacheGroupID("WUQueryFiles", "ESPWsWUQS");
	setCacheTimeout("WUQueryGetGraph", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUQueryGetSummaryStats", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUQuerysetDetails", 60, 0);
	m_cacheMethodCount++;
	setCacheGroupID("WUQuerysetDetails", "ESPWsWUQS");
	setCacheTimeout("WUQuerysets", 60, 0);
	m_cacheMethodCount++;
	setCacheGroupID("WUQuerysets", "ESPWsWUQS");
	setCacheTimeout("WUResult", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUResultBin", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUResultSummary", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUResultView", 30, 0);
	m_cacheMethodCount++;
	setCacheTimeout("WUShowScheduled", 60, 0);
	m_cacheMethodCount++;
	setCacheGroupID(nullptr, "ESPWsWUs");
}

int CWsWorkunitsSoapBinding::processRequest(IRpcMessage* rpc_call, IRpcMessage* rpc_response)
{
	if(rpc_call == NULL || rpc_response == NULL)
		return -1;

	IEspContext *ctx=rpc_call->queryContext();
	DBGLOG("Client version: %g", ctx->getClientVersion());
	StringBuffer serviceName;
	double clientVer=(ctx) ? ctx->getClientVersion() : 0.0;
	qualifyServiceName(*ctx, ctx->queryServiceName(NULL), NULL, serviceName, NULL);
	CRpcCall* thecall = static_cast<CRpcCall *>(rpc_call);
	CRpcResponse* response = static_cast<CRpcResponse*>(rpc_response);
	CHttpRequest* httprequest = thecall->getHttpReq();
	CHttpResponse* httpresponse = response->getHttpResp();

	Owned<IEspWsWorkunits> iserv = (IEspWsWorkunits*)getService();
	if(iserv == NULL)
	{
		response->set_status(SOAP_SERVER_ERROR);
		response->set_err("Service not available");
		DBGLOG("Service not available");
		return -1;
	}
	if (thecall->get_name() == NULL)
	{
		response->set_status(SOAP_CLIENT_ERROR);
		response->set_err("No service method specified");
		ERRLOG("No service method specified");
		return -1;
	}

	IEspContext& context = *rpc_call->queryContext();

	if(!stricmp(thecall->get_name(), "GVCAjaxGraph")||!stricmp(thecall->get_name(), "GVCAjaxGraphRequest"))
	{
		Owned<CGVCAjaxGraphRequest> esp_request = new CGVCAjaxGraphRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CGVCAjaxGraphResponse> esp_response = new CGVCAjaxGraphResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "GVCAjaxGraph");
			iserv->onGVCAjaxGraph(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "GVCAjaxGraph");
		response->set_name("GVCAjaxGraphResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "Ping")||!stricmp(thecall->get_name(), "WsWorkunitsPingRequest"))
	{
		Owned<CWsWorkunitsPingRequest> esp_request = new CWsWorkunitsPingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWsWorkunitsPingResponse> esp_response = new CWsWorkunitsPingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "Ping");
			iserv->onPing(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "Ping");
		response->set_name("WsWorkunitsPingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUAbort")||!stricmp(thecall->get_name(), "WUAbortRequest"))
	{
		Owned<CWUAbortRequest> esp_request = new CWUAbortRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUAbortResponse> esp_response = new CWUAbortResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUAbort");
			iserv->onWUAbort(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUAbort");
		response->set_name("WUAbortResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUAction")||!stricmp(thecall->get_name(), "WUActionRequest"))
	{
		Owned<CWUActionRequest> esp_request = new CWUActionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUActionResponse> esp_response = new CWUActionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUAction");
			iserv->onWUAction(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUAction");
		response->set_name("WUActionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUAddLocalFileToWorkunit")||!stricmp(thecall->get_name(), "WUAddLocalFileToWorkunitRequest"))
	{
		Owned<CWUAddLocalFileToWorkunitRequest> esp_request = new CWUAddLocalFileToWorkunitRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUAddLocalFileToWorkunitResponse> esp_response = new CWUAddLocalFileToWorkunitResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUAddLocalFileToWorkunit");
			iserv->onWUAddLocalFileToWorkunit(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUAddLocalFileToWorkunit");
		response->set_name("WUAddLocalFileToWorkunitResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCDebug")||!stricmp(thecall->get_name(), "WUDebugRequest"))
	{
		Owned<CWUDebugRequest> esp_request = new CWUDebugRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUDebugResponse> esp_response = new CWUDebugResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCDebug");
			iserv->onWUCDebug(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCDebug");
		response->set_name("WUDebugResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCheckFeatures")||!stricmp(thecall->get_name(), "WUCheckFeaturesRequest"))
	{
		Owned<CWUCheckFeaturesRequest> esp_request = new CWUCheckFeaturesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUCheckFeaturesResponse> esp_response = new CWUCheckFeaturesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCheckFeatures");
			iserv->onWUCheckFeatures(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCheckFeatures");
		response->set_name("WUCheckFeaturesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUClusterJobQueueLOG")||!stricmp(thecall->get_name(), "WUClusterJobQueueLOGRequest"))
	{
		Owned<CWUClusterJobQueueLOGRequest> esp_request = new CWUClusterJobQueueLOGRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUClusterJobQueueLOGResponse> esp_response = new CWUClusterJobQueueLOGResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobQueueLOG");
			iserv->onWUClusterJobQueueLOG(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUClusterJobQueueLOG");
		response->set_name("WUClusterJobQueueLOGResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUClusterJobQueueXLS")||!stricmp(thecall->get_name(), "WUClusterJobQueueXLSRequest"))
	{
		Owned<CWUClusterJobQueueXLSRequest> esp_request = new CWUClusterJobQueueXLSRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUClusterJobQueueXLSResponse> esp_response = new CWUClusterJobQueueXLSResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobQueueXLS");
			iserv->onWUClusterJobQueueXLS(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUClusterJobQueueXLS");
		response->set_name("WUClusterJobQueueXLSResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUClusterJobSummaryXLS")||!stricmp(thecall->get_name(), "WUClusterJobSummaryXLSRequest"))
	{
		Owned<CWUClusterJobSummaryXLSRequest> esp_request = new CWUClusterJobSummaryXLSRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUClusterJobSummaryXLSResponse> esp_response = new CWUClusterJobSummaryXLSResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobSummaryXLS");
			iserv->onWUClusterJobSummaryXLS(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUClusterJobSummaryXLS");
		response->set_name("WUClusterJobSummaryXLSResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUClusterJobXLS")||!stricmp(thecall->get_name(), "WUClusterJobXLSRequest"))
	{
		Owned<CWUClusterJobXLSRequest> esp_request = new CWUClusterJobXLSRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUClusterJobXLSResponse> esp_response = new CWUClusterJobXLSResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobXLS");
			iserv->onWUClusterJobXLS(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUClusterJobXLS");
		response->set_name("WUClusterJobXLSResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCompileECL")||!stricmp(thecall->get_name(), "WUCompileECLRequest"))
	{
		Owned<CWUCompileECLRequest> esp_request = new CWUCompileECLRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUCompileECLResponse> esp_response = new CWUCompileECLResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCompileECL");
			iserv->onWUCompileECL(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCompileECL");
		response->set_name("WUCompileECLResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCopyLogicalFiles")||!stricmp(thecall->get_name(), "WUCopyLogicalFilesRequest"))
	{
		Owned<CWUCopyLogicalFilesRequest> esp_request = new CWUCopyLogicalFilesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUCopyLogicalFilesResponse> esp_response = new CWUCopyLogicalFilesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCopyLogicalFiles");
			iserv->onWUCopyLogicalFiles(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUQS");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCopyLogicalFiles");
		response->set_name("WUCopyLogicalFilesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCopyQuerySet")||!stricmp(thecall->get_name(), "WUCopyQuerySetRequest"))
	{
		Owned<CWUCopyQuerySetRequest> esp_request = new CWUCopyQuerySetRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUCopyQuerySetResponse> esp_response = new CWUCopyQuerySetResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCopyQuerySet");
			iserv->onWUCopyQuerySet(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUQS");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCopyQuerySet");
		response->set_name("WUCopyQuerySetResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCreate")||!stricmp(thecall->get_name(), "WUCreateRequest"))
	{
		Owned<CWUCreateRequest> esp_request = new CWUCreateRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUCreateResponse> esp_response = new CWUCreateResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("OwnWorkunitsAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCreate");
			iserv->onWUCreate(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCreate");
		response->set_name("WUCreateResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCreateAndUpdate")||!stricmp(thecall->get_name(), "WUUpdateRequest"))
	{
		Owned<CWUUpdateRequest> esp_request = new CWUUpdateRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUUpdateResponse> esp_response = new CWUUpdateResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		accessmap.setValue("OwnWorkunitsAccess", SecAccess_Write);
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCreateAndUpdate");
			iserv->onWUCreateAndUpdate(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCreateAndUpdate");
		response->set_name("WUUpdateResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUCreateZAPInfo")||!stricmp(thecall->get_name(), "WUCreateZAPInfoRequest"))
	{
		Owned<CWUCreateZAPInfoRequest> esp_request = new CWUCreateZAPInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUCreateZAPInfoResponse> esp_response = new CWUCreateZAPInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCreateZAPInfo");
			iserv->onWUCreateZAPInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUCreateZAPInfo");
		response->set_name("WUCreateZAPInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUDelete")||!stricmp(thecall->get_name(), "WUDeleteRequest"))
	{
		Owned<CWUDeleteRequest> esp_request = new CWUDeleteRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUDeleteResponse> esp_response = new CWUDeleteResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDelete");
			iserv->onWUDelete(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUDelete");
		response->set_name("WUDeleteResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUDeployWorkunit")||!stricmp(thecall->get_name(), "WUDeployWorkunitRequest"))
	{
		Owned<CWUDeployWorkunitRequest> esp_request = new CWUDeployWorkunitRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUDeployWorkunitResponse> esp_response = new CWUDeployWorkunitResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDeployWorkunit");
			iserv->onWUDeployWorkunit(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUDeployWorkunit");
		response->set_name("WUDeployWorkunitResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUDetails")||!stricmp(thecall->get_name(), "WUDetailsRequest"))
	{
		Owned<CWUDetailsRequest> esp_request = new CWUDetailsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUDetailsResponse> esp_response = new CWUDetailsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.71)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDetails");
			iserv->onWUDetails(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUDetails");
		response->set_name("WUDetailsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUDetailsMeta")||!stricmp(thecall->get_name(), "WUDetailsMetaRequest"))
	{
		Owned<CWUDetailsMetaRequest> esp_request = new CWUDetailsMetaRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUDetailsMetaResponse> esp_response = new CWUDetailsMetaResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.71)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDetailsMeta");
			iserv->onWUDetailsMeta(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUDetailsMeta");
		response->set_name("WUDetailsMetaResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUEclDefinitionAction")||!stricmp(thecall->get_name(), "WUEclDefinitionActionRequest"))
	{
		Owned<CWUEclDefinitionActionRequest> esp_request = new CWUEclDefinitionActionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUEclDefinitionActionResponse> esp_response = new CWUEclDefinitionActionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.72)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUEclDefinitionAction");
			iserv->onWUEclDefinitionAction(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUEclDefinitionAction");
		response->set_name("WUEclDefinitionActionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUExport")||!stricmp(thecall->get_name(), "WUExportRequest"))
	{
		Owned<CWUExportRequest> esp_request = new CWUExportRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUExportResponse> esp_response = new CWUExportResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUExport");
			iserv->onWUExport(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUExport");
		response->set_name("WUExportResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUFile")||!stricmp(thecall->get_name(), "WULogFileRequest"))
	{
		Owned<CWULogFileRequest> esp_request = new CWULogFileRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWULogFileResponse> esp_response = new CWULogFileResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUFile");
			iserv->onWUFile(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUFile");
		response->set_name("WULogFileResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUFullResult")||!stricmp(thecall->get_name(), "WUFullResultRequest"))
	{
		Owned<CWUFullResultRequest> esp_request = new CWUFullResultRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUFullResultResponse> esp_response = new CWUFullResultResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUFullResult");
			iserv->onWUFullResult(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUFullResult");
		response->set_name("WUFullResultResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGVCGraphInfo")||!stricmp(thecall->get_name(), "WUGVCGraphInfoRequest"))
	{
		Owned<CWUGVCGraphInfoRequest> esp_request = new CWUGVCGraphInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGVCGraphInfoResponse> esp_response = new CWUGVCGraphInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGVCGraphInfo");
			iserv->onWUGVCGraphInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGVCGraphInfo");
		response->set_name("WUGVCGraphInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetArchiveFile")||!stricmp(thecall->get_name(), "WUGetArchiveFileRequest"))
	{
		Owned<CWUGetArchiveFileRequest> esp_request = new CWUGetArchiveFileRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetArchiveFileResponse> esp_response = new CWUGetArchiveFileResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.57)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetArchiveFile");
			iserv->onWUGetArchiveFile(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetArchiveFile");
		response->set_name("WUGetArchiveFileResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetDependancyTrees")||!stricmp(thecall->get_name(), "WUGetDependancyTreesRequest"))
	{
		Owned<CWUGetDependancyTreesRequest> esp_request = new CWUGetDependancyTreesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetDependancyTreesResponse> esp_response = new CWUGetDependancyTreesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetDependancyTrees");
			iserv->onWUGetDependancyTrees(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetDependancyTrees");
		response->set_name("WUGetDependancyTreesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetGraph")||!stricmp(thecall->get_name(), "WUGetGraphRequest"))
	{
		Owned<CWUGetGraphRequest> esp_request = new CWUGetGraphRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetGraphResponse> esp_response = new CWUGetGraphResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetGraph");
			iserv->onWUGetGraph(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetGraph");
		response->set_name("WUGetGraphResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetGraphNameAndTypes")||!stricmp(thecall->get_name(), "WUGetGraphNameAndTypesRequest"))
	{
		Owned<CWUGetGraphNameAndTypesRequest> esp_request = new CWUGetGraphNameAndTypesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetGraphNameAndTypesResponse> esp_response = new CWUGetGraphNameAndTypesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.57)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetGraphNameAndTypes");
			iserv->onWUGetGraphNameAndTypes(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetGraphNameAndTypes");
		response->set_name("WUGetGraphNameAndTypesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetNumFileToCopy")||!stricmp(thecall->get_name(), "WUGetNumFileToCopyRequest"))
	{
		Owned<CWUGetNumFileToCopyRequest> esp_request = new CWUGetNumFileToCopyRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetNumFileToCopyResponse> esp_response = new CWUGetNumFileToCopyResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.61)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetNumFileToCopy");
			iserv->onWUGetNumFileToCopy(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetNumFileToCopy");
		response->set_name("WUGetNumFileToCopyResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetStats")||!stricmp(thecall->get_name(), "WUGetStatsRequest"))
	{
		Owned<CWUGetStatsRequest> esp_request = new CWUGetStatsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetStatsResponse> esp_response = new CWUGetStatsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetStats");
			iserv->onWUGetStats(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetStats");
		response->set_name("WUGetStatsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetThorJobList")||!stricmp(thecall->get_name(), "WUGetThorJobListRequest"))
	{
		Owned<CWUGetThorJobListRequest> esp_request = new CWUGetThorJobListRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetThorJobListResponse> esp_response = new CWUGetThorJobListResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.74)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetThorJobList");
			iserv->onWUGetThorJobList(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetThorJobList");
		response->set_name("WUGetThorJobListResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetThorJobQueue")||!stricmp(thecall->get_name(), "WUGetThorJobQueueRequest"))
	{
		Owned<CWUGetThorJobQueueRequest> esp_request = new CWUGetThorJobQueueRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetThorJobQueueResponse> esp_response = new CWUGetThorJobQueueResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.74)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetThorJobQueue");
			iserv->onWUGetThorJobQueue(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetThorJobQueue");
		response->set_name("WUGetThorJobQueueResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGetZAPInfo")||!stricmp(thecall->get_name(), "WUGetZAPInfoRequest"))
	{
		Owned<CWUGetZAPInfoRequest> esp_request = new CWUGetZAPInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGetZAPInfoResponse> esp_response = new CWUGetZAPInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetZAPInfo");
			iserv->onWUGetZAPInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGetZAPInfo");
		response->set_name("WUGetZAPInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGraphInfo")||!stricmp(thecall->get_name(), "WUGraphInfoRequest"))
	{
		Owned<CWUGraphInfoRequest> esp_request = new CWUGraphInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGraphInfoResponse> esp_response = new CWUGraphInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGraphInfo");
			iserv->onWUGraphInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGraphInfo");
		response->set_name("WUGraphInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUGraphTiming")||!stricmp(thecall->get_name(), "WUGraphTimingRequest"))
	{
		Owned<CWUGraphTimingRequest> esp_request = new CWUGraphTimingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUGraphTimingResponse> esp_response = new CWUGraphTimingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGraphTiming");
			iserv->onWUGraphTiming(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUGraphTiming");
		response->set_name("WUGraphTimingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUInfo")||!stricmp(thecall->get_name(), "WUInfoRequest"))
	{
		Owned<CWUInfoRequest> esp_request = new CWUInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUInfoResponse> esp_response = new CWUInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUInfo");
			iserv->onWUInfo(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUInfo");
		response->set_name("WUInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUInfoDetails")||!stricmp(thecall->get_name(), "WUInfoRequest"))
	{
		Owned<CWUInfoRequest> esp_request = new CWUInfoRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUInfoResponse> esp_response = new CWUInfoResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUInfoDetails");
			iserv->onWUInfoDetails(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUInfoDetails");
		response->set_name("WUInfoResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUJobList")||!stricmp(thecall->get_name(), "WUJobListRequest"))
	{
		Owned<CWUJobListRequest> esp_request = new CWUJobListRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUJobListResponse> esp_response = new CWUJobListResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUJobList");
			iserv->onWUJobList(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUJobList");
		response->set_name("WUJobListResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WULightWeightQuery")||!stricmp(thecall->get_name(), "WULightWeightQueryRequest"))
	{
		Owned<CWULightWeightQueryRequest> esp_request = new CWULightWeightQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWULightWeightQueryResponse> esp_response = new CWULightWeightQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.57)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WULightWeightQuery");
			iserv->onWULightWeightQuery(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WULightWeightQuery");
		response->set_name("WULightWeightQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUListArchiveFiles")||!stricmp(thecall->get_name(), "WUListArchiveFilesRequest"))
	{
		Owned<CWUListArchiveFilesRequest> esp_request = new CWUListArchiveFilesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUListArchiveFilesResponse> esp_response = new CWUListArchiveFilesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.57)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUListArchiveFiles");
			iserv->onWUListArchiveFiles(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUListArchiveFiles");
		response->set_name("WUListArchiveFilesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUListLocalFileRequired")||!stricmp(thecall->get_name(), "WUListLocalFileRequiredRequest"))
	{
		Owned<CWUListLocalFileRequiredRequest> esp_request = new CWUListLocalFileRequiredRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUListLocalFileRequiredResponse> esp_response = new CWUListLocalFileRequiredResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUListLocalFileRequired");
			iserv->onWUListLocalFileRequired(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUListLocalFileRequired");
		response->set_name("WUListLocalFileRequiredResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUListQueries")||!stricmp(thecall->get_name(), "WUListQueriesRequest"))
	{
		Owned<CWUListQueriesRequest> esp_request = new CWUListQueriesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUListQueriesResponse> esp_response = new CWUListQueriesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUListQueries");
			iserv->onWUListQueries(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUListQueries");
		response->set_name("WUListQueriesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUListQueriesUsingFile")||!stricmp(thecall->get_name(), "WUListQueriesUsingFileRequest"))
	{
		Owned<CWUListQueriesUsingFileRequest> esp_request = new CWUListQueriesUsingFileRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUListQueriesUsingFileResponse> esp_response = new CWUListQueriesUsingFileResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUListQueriesUsingFile");
			iserv->onWUListQueriesUsingFile(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUListQueriesUsingFile");
		response->set_name("WUListQueriesUsingFileResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUMultiQuerysetDetails")||!stricmp(thecall->get_name(), "WUMultiQuerySetDetailsRequest"))
	{
		Owned<CWUMultiQuerySetDetailsRequest> esp_request = new CWUMultiQuerySetDetailsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUMultiQuerySetDetailsResponse> esp_response = new CWUMultiQuerySetDetailsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUMultiQuerysetDetails");
			iserv->onWUMultiQuerysetDetails(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUMultiQuerysetDetails");
		response->set_name("WUMultiQuerySetDetailsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUProcessGraph")||!stricmp(thecall->get_name(), "WUProcessGraphRequest"))
	{
		Owned<CWUProcessGraphRequest> esp_request = new CWUProcessGraphRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUProcessGraphResponse> esp_response = new CWUProcessGraphResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUProcessGraph");
			iserv->onWUProcessGraph(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUProcessGraph");
		response->set_name("WUProcessGraphResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUProtect")||!stricmp(thecall->get_name(), "WUProtectRequest"))
	{
		Owned<CWUProtectRequest> esp_request = new CWUProtectRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUProtectResponse> esp_response = new CWUProtectResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUProtect");
			iserv->onWUProtect(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUProtect");
		response->set_name("WUProtectResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUPublishWorkunit")||!stricmp(thecall->get_name(), "WUPublishWorkunitRequest"))
	{
		Owned<CWUPublishWorkunitRequest> esp_request = new CWUPublishWorkunitRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUPublishWorkunitResponse> esp_response = new CWUPublishWorkunitResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUPublishWorkunit");
			iserv->onWUPublishWorkunit(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUPublishWorkunit");
		response->set_name("WUPublishWorkunitResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUPushEvent")||!stricmp(thecall->get_name(), "WUPushEventRequest"))
	{
		Owned<CWUPushEventRequest> esp_request = new CWUPushEventRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUPushEventResponse> esp_response = new CWUPushEventResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUPushEvent");
			iserv->onWUPushEvent(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUPushEvent");
		response->set_name("WUPushEventResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuery")||!stricmp(thecall->get_name(), "WUQueryRequest"))
	{
		Owned<CWUQueryRequest> esp_request = new CWUQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQueryResponse> esp_response = new CWUQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuery");
			iserv->onWUQuery(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuery");
		response->set_name("WUQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQueryConfig")||!stricmp(thecall->get_name(), "WUQueryConfigRequest"))
	{
		Owned<CWUQueryConfigRequest> esp_request = new CWUQueryConfigRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQueryConfigResponse> esp_response = new CWUQueryConfigResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryConfig");
			iserv->onWUQueryConfig(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQueryConfig");
		response->set_name("WUQueryConfigResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQueryDetails")||!stricmp(thecall->get_name(), "WUQueryDetailsRequest"))
	{
		Owned<CWUQueryDetailsRequest> esp_request = new CWUQueryDetailsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQueryDetailsResponse> esp_response = new CWUQueryDetailsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryDetails");
			iserv->onWUQueryDetails(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQueryDetails");
		response->set_name("WUQueryDetailsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQueryFiles")||!stricmp(thecall->get_name(), "WUQueryFilesRequest"))
	{
		Owned<CWUQueryFilesRequest> esp_request = new CWUQueryFilesRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQueryFilesResponse> esp_response = new CWUQueryFilesResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryFiles");
			iserv->onWUQueryFiles(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQueryFiles");
		response->set_name("WUQueryFilesResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQueryGetGraph")||!stricmp(thecall->get_name(), "WUQueryGetGraphRequest"))
	{
		Owned<CWUQueryGetGraphRequest> esp_request = new CWUQueryGetGraphRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQueryGetGraphResponse> esp_response = new CWUQueryGetGraphResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryGetGraph");
			iserv->onWUQueryGetGraph(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQueryGetGraph");
		response->set_name("WUQueryGetGraphResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQueryGetSummaryStats")||!stricmp(thecall->get_name(), "WUQueryGetSummaryStatsRequest"))
	{
		Owned<CWUQueryGetSummaryStatsRequest> esp_request = new CWUQueryGetSummaryStatsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQueryGetSummaryStatsResponse> esp_response = new CWUQueryGetSummaryStatsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.72)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryGetSummaryStats");
			iserv->onWUQueryGetSummaryStats(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQueryGetSummaryStats");
		response->set_name("WUQueryGetSummaryStatsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuerysetAliasAction")||!stricmp(thecall->get_name(), "WUQuerySetAliasActionRequest"))
	{
		Owned<CWUQuerySetAliasActionRequest> esp_request = new CWUQuerySetAliasActionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQuerySetAliasActionResponse> esp_response = new CWUQuerySetAliasActionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetAliasAction");
			iserv->onWUQuerysetAliasAction(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUQS");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuerysetAliasAction");
		response->set_name("WUQuerySetAliasActionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuerysetCopyQuery")||!stricmp(thecall->get_name(), "WUQuerySetCopyQueryRequest"))
	{
		Owned<CWUQuerySetCopyQueryRequest> esp_request = new CWUQuerySetCopyQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQuerySetCopyQueryResponse> esp_response = new CWUQuerySetCopyQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetCopyQuery");
			iserv->onWUQuerysetCopyQuery(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUQS");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuerysetCopyQuery");
		response->set_name("WUQuerySetCopyQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuerysetDetails")||!stricmp(thecall->get_name(), "WUQuerySetDetailsRequest"))
	{
		Owned<CWUQuerySetDetailsRequest> esp_request = new CWUQuerySetDetailsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQuerySetDetailsResponse> esp_response = new CWUQuerySetDetailsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetDetails");
			iserv->onWUQuerysetDetails(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuerysetDetails");
		response->set_name("WUQuerySetDetailsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuerysetExport")||!stricmp(thecall->get_name(), "WUQuerysetExportRequest"))
	{
		Owned<CWUQuerysetExportRequest> esp_request = new CWUQuerysetExportRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQuerysetExportResponse> esp_response = new CWUQuerysetExportResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.71)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetExport");
			iserv->onWUQuerysetExport(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuerysetExport");
		response->set_name("WUQuerysetExportResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuerysetImport")||!stricmp(thecall->get_name(), "WUQuerysetImportRequest"))
	{
		Owned<CWUQuerysetImportRequest> esp_request = new CWUQuerysetImportRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQuerysetImportResponse> esp_response = new CWUQuerysetImportResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.71)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetImport");
			iserv->onWUQuerysetImport(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUQS");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuerysetImport");
		response->set_name("WUQuerysetImportResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuerysetQueryAction")||!stricmp(thecall->get_name(), "WUQuerySetQueryActionRequest"))
	{
		Owned<CWUQuerySetQueryActionRequest> esp_request = new CWUQuerySetQueryActionRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQuerySetQueryActionResponse> esp_response = new CWUQuerySetQueryActionResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetQueryAction");
			iserv->onWUQuerysetQueryAction(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUQS");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuerysetQueryAction");
		response->set_name("WUQuerySetQueryActionResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUQuerysets")||!stricmp(thecall->get_name(), "WUQuerysetsRequest"))
	{
		Owned<CWUQuerysetsRequest> esp_request = new CWUQuerysetsRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUQuerysetsResponse> esp_response = new CWUQuerysetsResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysets");
			iserv->onWUQuerysets(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUQuerysets");
		response->set_name("WUQuerysetsResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WURecreateQuery")||!stricmp(thecall->get_name(), "WURecreateQueryRequest"))
	{
		Owned<CWURecreateQueryRequest> esp_request = new CWURecreateQueryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWURecreateQueryResponse> esp_response = new CWURecreateQueryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.7)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WURecreateQuery");
			iserv->onWURecreateQuery(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WURecreateQuery");
		response->set_name("WURecreateQueryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUResubmit")||!stricmp(thecall->get_name(), "WUResubmitRequest"))
	{
		Owned<CWUResubmitRequest> esp_request = new CWUResubmitRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUResubmitResponse> esp_response = new CWUResubmitResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResubmit");
			iserv->onWUResubmit(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUResubmit");
		response->set_name("WUResubmitResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUResult")||!stricmp(thecall->get_name(), "WUResultRequest"))
	{
		Owned<CWUResultRequest> esp_request = new CWUResultRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUResultResponse> esp_response = new CWUResultResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResult");
			iserv->onWUResult(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUResult");
		response->set_name("WUResultResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUResultBin")||!stricmp(thecall->get_name(), "WUResultBinRequest"))
	{
		Owned<CWUResultBinRequest> esp_request = new CWUResultBinRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUResultBinResponse> esp_response = new CWUResultBinResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResultBin");
			iserv->onWUResultBin(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUResultBin");
		response->set_name("WUResultBinResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUResultSummary")||!stricmp(thecall->get_name(), "WUResultSummaryRequest"))
	{
		Owned<CWUResultSummaryRequest> esp_request = new CWUResultSummaryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUResultSummaryResponse> esp_response = new CWUResultSummaryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResultSummary");
			iserv->onWUResultSummary(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUResultSummary");
		response->set_name("WUResultSummaryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUResultView")||!stricmp(thecall->get_name(), "WUResultViewRequest"))
	{
		Owned<CWUResultViewRequest> esp_request = new CWUResultViewRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUResultViewResponse> esp_response = new CWUResultViewResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResultView");
			iserv->onWUResultView(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUResultView");
		response->set_name("WUResultViewResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WURun")||!stricmp(thecall->get_name(), "WURunRequest"))
	{
		Owned<CWURunRequest> esp_request = new CWURunRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWURunResponse> esp_response = new CWURunResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WURun");
			iserv->onWURun(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WURun");
		response->set_name("WURunResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUSchedule")||!stricmp(thecall->get_name(), "WUScheduleRequest"))
	{
		Owned<CWUScheduleRequest> esp_request = new CWUScheduleRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUScheduleResponse> esp_response = new CWUScheduleResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUSchedule");
			iserv->onWUSchedule(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUSchedule");
		response->set_name("WUScheduleResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUShowScheduled")||!stricmp(thecall->get_name(), "WUShowScheduledRequest"))
	{
		Owned<CWUShowScheduledRequest> esp_request = new CWUShowScheduledRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUShowScheduledResponse> esp_response = new CWUShowScheduledResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUShowScheduled");
			iserv->onWUShowScheduled(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUShowScheduled");
		response->set_name("WUShowScheduledResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUSubmit")||!stricmp(thecall->get_name(), "WUSubmitRequest"))
	{
		Owned<CWUSubmitRequest> esp_request = new CWUSubmitRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUSubmitResponse> esp_response = new CWUSubmitResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUSubmit");
			iserv->onWUSubmit(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUSubmit");
		response->set_name("WUSubmitResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUSyntaxCheckECL")||!stricmp(thecall->get_name(), "WUSyntaxCheckRequest"))
	{
		Owned<CWUSyntaxCheckRequest> esp_request = new CWUSyntaxCheckRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUSyntaxCheckResponse> esp_response = new CWUSyntaxCheckResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUSyntaxCheckECL");
			iserv->onWUSyntaxCheckECL(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUSyntaxCheckECL");
		response->set_name("WUSyntaxCheckResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUUpdate")||!stricmp(thecall->get_name(), "WUUpdateRequest"))
	{
		Owned<CWUUpdateRequest> esp_request = new CWUUpdateRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUUpdateResponse> esp_response = new CWUUpdateResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUUpdate");
			iserv->onWUUpdate(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUs");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUUpdate");
		response->set_name("WUUpdateResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUUpdateQueryEntry")||!stricmp(thecall->get_name(), "WUUpdateQueryEntryRequest"))
	{
		Owned<CWUUpdateQueryEntryRequest> esp_request = new CWUUpdateQueryEntryRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUUpdateQueryEntryResponse> esp_response = new CWUUpdateQueryEntryResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			if (clientVer!=-1.0 && clientVer<1.59)
				throw MakeStringException(-1, "Client version is too old, please update your client application.");			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUUpdateQueryEntry");
			iserv->onWUUpdateQueryEntry(context, *esp_request, *esp_response);
			clearCacheByGroupID("ESPWsWUQS");
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUUpdateQueryEntry");
		response->set_name("WUUpdateQueryEntryResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUWaitCompiled")||!stricmp(thecall->get_name(), "WUWaitRequest"))
	{
		Owned<CWUWaitRequest> esp_request = new CWUWaitRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUWaitResponse> esp_response = new CWUWaitResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUWaitCompiled");
			iserv->onWUWaitCompiled(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUWaitCompiled");
		response->set_name("WUWaitResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WUWaitComplete")||!stricmp(thecall->get_name(), "WUWaitRequest"))
	{
		Owned<CWUWaitRequest> esp_request = new CWUWaitRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWUWaitResponse> esp_response = new CWUWaitResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsWorkunits::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUWaitComplete");
			iserv->onWUWaitComplete(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsWorkunits", "WUWaitComplete");
		response->set_name("WUWaitResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	response->set_status(SOAP_CLIENT_ERROR);
	StringBuffer msg, svcName;
	msg.appendf("Method %s not available in service %s",thecall->get_name(),getServiceName(svcName).str());
	ERRLOG("%s", msg.str());
	response->set_err(msg);
	return -1;
}

int CWsWorkunitsSoapBinding::getXsdDefinition(IEspContext &context, CHttpRequest* request, StringBuffer &content, const char *service, const char *method, bool mda)
{
	BoolHash added;
	if (context.getClientVersion()<=0)
		context.setClientVersion(1.74);

	DBGLOG("Client version: %g", context.getClientVersion());
	bool fullservice = (!Utils::strcasecmp(service, "WsWorkunits"));
	bool allMethods = (method==NULL || *method==0);
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "GVCAjaxGraph"))) || Utils::strcasecmp(method, "GVCAjaxGraph")==0)
	{
		CGVCAjaxGraphRequest::getMapInfo(context.queryMapInfo());
		CGVCAjaxGraphResponse::getMapInfo(context.queryMapInfo());
		CGVCAjaxGraphRequest::getXsdDefinition(context, request, "GVCAjaxGraph", content, added);
		CGVCAjaxGraphResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Ping"))) || Utils::strcasecmp(method, "Ping")==0)
	{
		CWsWorkunitsPingRequest::getMapInfo(context.queryMapInfo());
		CWsWorkunitsPingResponse::getMapInfo(context.queryMapInfo());
		CWsWorkunitsPingRequest::getXsdDefinition(context, request, "Ping", content, added);
		CWsWorkunitsPingResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUAbort"))) || Utils::strcasecmp(method, "WUAbort")==0)
	{
		CWUAbortRequest::getMapInfo(context.queryMapInfo());
		CWUAbortResponse::getMapInfo(context.queryMapInfo());
		CWUAbortRequest::getXsdDefinition(context, request, "WUAbort", content, added);
		CWUAbortResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUAction"))) || Utils::strcasecmp(method, "WUAction")==0)
	{
		CWUActionRequest::getMapInfo(context.queryMapInfo());
		CWUActionResponse::getMapInfo(context.queryMapInfo());
		CWUActionRequest::getXsdDefinition(context, request, "WUAction", content, added);
		CWUActionResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUAddLocalFileToWorkunit"))) || Utils::strcasecmp(method, "WUAddLocalFileToWorkunit")==0)
	{
		CWUAddLocalFileToWorkunitRequest::getMapInfo(context.queryMapInfo());
		CWUAddLocalFileToWorkunitResponse::getMapInfo(context.queryMapInfo());
		CWUAddLocalFileToWorkunitRequest::getXsdDefinition(context, request, "WUAddLocalFileToWorkunit", content, added);
		CWUAddLocalFileToWorkunitResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCDebug"))) || Utils::strcasecmp(method, "WUCDebug")==0)
	{
		CWUDebugRequest::getMapInfo(context.queryMapInfo());
		CWUDebugResponse::getMapInfo(context.queryMapInfo());
		CWUDebugRequest::getXsdDefinition(context, request, "WUCDebug", content, added);
		CWUDebugResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCheckFeatures"))) || Utils::strcasecmp(method, "WUCheckFeatures")==0)
	{
		CWUCheckFeaturesRequest::getMapInfo(context.queryMapInfo());
		CWUCheckFeaturesResponse::getMapInfo(context.queryMapInfo());
		CWUCheckFeaturesRequest::getXsdDefinition(context, request, "WUCheckFeatures", content, added);
		CWUCheckFeaturesResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUClusterJobQueueLOG"))) || Utils::strcasecmp(method, "WUClusterJobQueueLOG")==0)
	{
		CWUClusterJobQueueLOGRequest::getMapInfo(context.queryMapInfo());
		CWUClusterJobQueueLOGResponse::getMapInfo(context.queryMapInfo());
		CWUClusterJobQueueLOGRequest::getXsdDefinition(context, request, "WUClusterJobQueueLOG", content, added);
		CWUClusterJobQueueLOGResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUClusterJobQueueXLS"))) || Utils::strcasecmp(method, "WUClusterJobQueueXLS")==0)
	{
		CWUClusterJobQueueXLSRequest::getMapInfo(context.queryMapInfo());
		CWUClusterJobQueueXLSResponse::getMapInfo(context.queryMapInfo());
		CWUClusterJobQueueXLSRequest::getXsdDefinition(context, request, "WUClusterJobQueueXLS", content, added);
		CWUClusterJobQueueXLSResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUClusterJobSummaryXLS"))) || Utils::strcasecmp(method, "WUClusterJobSummaryXLS")==0)
	{
		CWUClusterJobSummaryXLSRequest::getMapInfo(context.queryMapInfo());
		CWUClusterJobSummaryXLSResponse::getMapInfo(context.queryMapInfo());
		CWUClusterJobSummaryXLSRequest::getXsdDefinition(context, request, "WUClusterJobSummaryXLS", content, added);
		CWUClusterJobSummaryXLSResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUClusterJobXLS"))) || Utils::strcasecmp(method, "WUClusterJobXLS")==0)
	{
		CWUClusterJobXLSRequest::getMapInfo(context.queryMapInfo());
		CWUClusterJobXLSResponse::getMapInfo(context.queryMapInfo());
		CWUClusterJobXLSRequest::getXsdDefinition(context, request, "WUClusterJobXLS", content, added);
		CWUClusterJobXLSResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCompileECL"))) || Utils::strcasecmp(method, "WUCompileECL")==0)
	{
		CWUCompileECLRequest::getMapInfo(context.queryMapInfo());
		CWUCompileECLResponse::getMapInfo(context.queryMapInfo());
		CWUCompileECLRequest::getXsdDefinition(context, request, "WUCompileECL", content, added);
		CWUCompileECLResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCopyLogicalFiles"))) || Utils::strcasecmp(method, "WUCopyLogicalFiles")==0)
	{
		CWUCopyLogicalFilesRequest::getMapInfo(context.queryMapInfo());
		CWUCopyLogicalFilesResponse::getMapInfo(context.queryMapInfo());
		CWUCopyLogicalFilesRequest::getXsdDefinition(context, request, "WUCopyLogicalFiles", content, added);
		CWUCopyLogicalFilesResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCopyQuerySet"))) || Utils::strcasecmp(method, "WUCopyQuerySet")==0)
	{
		CWUCopyQuerySetRequest::getMapInfo(context.queryMapInfo());
		CWUCopyQuerySetResponse::getMapInfo(context.queryMapInfo());
		CWUCopyQuerySetRequest::getXsdDefinition(context, request, "WUCopyQuerySet", content, added);
		CWUCopyQuerySetResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCreate"))) || Utils::strcasecmp(method, "WUCreate")==0)
	{
		CWUCreateRequest::getMapInfo(context.queryMapInfo());
		CWUCreateResponse::getMapInfo(context.queryMapInfo());
		CWUCreateRequest::getXsdDefinition(context, request, "WUCreate", content, added);
		CWUCreateResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCreateAndUpdate"))) || Utils::strcasecmp(method, "WUCreateAndUpdate")==0)
	{
		CWUUpdateRequest::getMapInfo(context.queryMapInfo());
		CWUUpdateResponse::getMapInfo(context.queryMapInfo());
		CWUUpdateRequest::getXsdDefinition(context, request, "WUCreateAndUpdate", content, added);
		CWUUpdateResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUCreateZAPInfo"))) || Utils::strcasecmp(method, "WUCreateZAPInfo")==0)
	{
		CWUCreateZAPInfoRequest::getMapInfo(context.queryMapInfo());
		CWUCreateZAPInfoResponse::getMapInfo(context.queryMapInfo());
		CWUCreateZAPInfoRequest::getXsdDefinition(context, request, "WUCreateZAPInfo", content, added);
		CWUCreateZAPInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUDelete"))) || Utils::strcasecmp(method, "WUDelete")==0)
	{
		CWUDeleteRequest::getMapInfo(context.queryMapInfo());
		CWUDeleteResponse::getMapInfo(context.queryMapInfo());
		CWUDeleteRequest::getXsdDefinition(context, request, "WUDelete", content, added);
		CWUDeleteResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUDeployWorkunit"))) || Utils::strcasecmp(method, "WUDeployWorkunit")==0)
	{
		CWUDeployWorkunitRequest::getMapInfo(context.queryMapInfo());
		CWUDeployWorkunitResponse::getMapInfo(context.queryMapInfo());
		CWUDeployWorkunitRequest::getXsdDefinition(context, request, "WUDeployWorkunit", content, added);
		CWUDeployWorkunitResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUDetails"))) || Utils::strcasecmp(method, "WUDetails")==0)
	{
		if (context.getClientVersion()>=1.71) {
			CWUDetailsRequest::getMapInfo(context.queryMapInfo());
			CWUDetailsResponse::getMapInfo(context.queryMapInfo());
			CWUDetailsRequest::getXsdDefinition(context, request, "WUDetails", content, added);
			CWUDetailsResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUDetailsMeta"))) || Utils::strcasecmp(method, "WUDetailsMeta")==0)
	{
		if (context.getClientVersion()>=1.71) {
			CWUDetailsMetaRequest::getMapInfo(context.queryMapInfo());
			CWUDetailsMetaResponse::getMapInfo(context.queryMapInfo());
			CWUDetailsMetaRequest::getXsdDefinition(context, request, "WUDetailsMeta", content, added);
			CWUDetailsMetaResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUEclDefinitionAction"))) || Utils::strcasecmp(method, "WUEclDefinitionAction")==0)
	{
		if (context.getClientVersion()>=1.72) {
			CWUEclDefinitionActionRequest::getMapInfo(context.queryMapInfo());
			CWUEclDefinitionActionResponse::getMapInfo(context.queryMapInfo());
			CWUEclDefinitionActionRequest::getXsdDefinition(context, request, "WUEclDefinitionAction", content, added);
			CWUEclDefinitionActionResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUExport"))) || Utils::strcasecmp(method, "WUExport")==0)
	{
		CWUExportRequest::getMapInfo(context.queryMapInfo());
		CWUExportResponse::getMapInfo(context.queryMapInfo());
		CWUExportRequest::getXsdDefinition(context, request, "WUExport", content, added);
		CWUExportResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUFile"))) || Utils::strcasecmp(method, "WUFile")==0)
	{
		CWULogFileRequest::getMapInfo(context.queryMapInfo());
		CWULogFileResponse::getMapInfo(context.queryMapInfo());
		CWULogFileRequest::getXsdDefinition(context, request, "WUFile", content, added);
		CWULogFileResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUFullResult"))) || Utils::strcasecmp(method, "WUFullResult")==0)
	{
		CWUFullResultRequest::getMapInfo(context.queryMapInfo());
		CWUFullResultResponse::getMapInfo(context.queryMapInfo());
		CWUFullResultRequest::getXsdDefinition(context, request, "WUFullResult", content, added);
		CWUFullResultResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGVCGraphInfo"))) || Utils::strcasecmp(method, "WUGVCGraphInfo")==0)
	{
		CWUGVCGraphInfoRequest::getMapInfo(context.queryMapInfo());
		CWUGVCGraphInfoResponse::getMapInfo(context.queryMapInfo());
		CWUGVCGraphInfoRequest::getXsdDefinition(context, request, "WUGVCGraphInfo", content, added);
		CWUGVCGraphInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetArchiveFile"))) || Utils::strcasecmp(method, "WUGetArchiveFile")==0)
	{
		if (context.getClientVersion()>=1.57) {
			CWUGetArchiveFileRequest::getMapInfo(context.queryMapInfo());
			CWUGetArchiveFileResponse::getMapInfo(context.queryMapInfo());
			CWUGetArchiveFileRequest::getXsdDefinition(context, request, "WUGetArchiveFile", content, added);
			CWUGetArchiveFileResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetDependancyTrees"))) || Utils::strcasecmp(method, "WUGetDependancyTrees")==0)
	{
		CWUGetDependancyTreesRequest::getMapInfo(context.queryMapInfo());
		CWUGetDependancyTreesResponse::getMapInfo(context.queryMapInfo());
		CWUGetDependancyTreesRequest::getXsdDefinition(context, request, "WUGetDependancyTrees", content, added);
		CWUGetDependancyTreesResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetGraph"))) || Utils::strcasecmp(method, "WUGetGraph")==0)
	{
		CWUGetGraphRequest::getMapInfo(context.queryMapInfo());
		CWUGetGraphResponse::getMapInfo(context.queryMapInfo());
		CWUGetGraphRequest::getXsdDefinition(context, request, "WUGetGraph", content, added);
		CWUGetGraphResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetGraphNameAndTypes"))) || Utils::strcasecmp(method, "WUGetGraphNameAndTypes")==0)
	{
		if (context.getClientVersion()>=1.57) {
			CWUGetGraphNameAndTypesRequest::getMapInfo(context.queryMapInfo());
			CWUGetGraphNameAndTypesResponse::getMapInfo(context.queryMapInfo());
			CWUGetGraphNameAndTypesRequest::getXsdDefinition(context, request, "WUGetGraphNameAndTypes", content, added);
			CWUGetGraphNameAndTypesResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetNumFileToCopy"))) || Utils::strcasecmp(method, "WUGetNumFileToCopy")==0)
	{
		if (context.getClientVersion()>=1.61) {
			CWUGetNumFileToCopyRequest::getMapInfo(context.queryMapInfo());
			CWUGetNumFileToCopyResponse::getMapInfo(context.queryMapInfo());
			CWUGetNumFileToCopyRequest::getXsdDefinition(context, request, "WUGetNumFileToCopy", content, added);
			CWUGetNumFileToCopyResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetStats"))) || Utils::strcasecmp(method, "WUGetStats")==0)
	{
		CWUGetStatsRequest::getMapInfo(context.queryMapInfo());
		CWUGetStatsResponse::getMapInfo(context.queryMapInfo());
		CWUGetStatsRequest::getXsdDefinition(context, request, "WUGetStats", content, added);
		CWUGetStatsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetThorJobList"))) || Utils::strcasecmp(method, "WUGetThorJobList")==0)
	{
		if (context.getClientVersion()>=1.74) {
			CWUGetThorJobListRequest::getMapInfo(context.queryMapInfo());
			CWUGetThorJobListResponse::getMapInfo(context.queryMapInfo());
			CWUGetThorJobListRequest::getXsdDefinition(context, request, "WUGetThorJobList", content, added);
			CWUGetThorJobListResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetThorJobQueue"))) || Utils::strcasecmp(method, "WUGetThorJobQueue")==0)
	{
		if (context.getClientVersion()>=1.74) {
			CWUGetThorJobQueueRequest::getMapInfo(context.queryMapInfo());
			CWUGetThorJobQueueResponse::getMapInfo(context.queryMapInfo());
			CWUGetThorJobQueueRequest::getXsdDefinition(context, request, "WUGetThorJobQueue", content, added);
			CWUGetThorJobQueueResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGetZAPInfo"))) || Utils::strcasecmp(method, "WUGetZAPInfo")==0)
	{
		CWUGetZAPInfoRequest::getMapInfo(context.queryMapInfo());
		CWUGetZAPInfoResponse::getMapInfo(context.queryMapInfo());
		CWUGetZAPInfoRequest::getXsdDefinition(context, request, "WUGetZAPInfo", content, added);
		CWUGetZAPInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGraphInfo"))) || Utils::strcasecmp(method, "WUGraphInfo")==0)
	{
		CWUGraphInfoRequest::getMapInfo(context.queryMapInfo());
		CWUGraphInfoResponse::getMapInfo(context.queryMapInfo());
		CWUGraphInfoRequest::getXsdDefinition(context, request, "WUGraphInfo", content, added);
		CWUGraphInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUGraphTiming"))) || Utils::strcasecmp(method, "WUGraphTiming")==0)
	{
		CWUGraphTimingRequest::getMapInfo(context.queryMapInfo());
		CWUGraphTimingResponse::getMapInfo(context.queryMapInfo());
		CWUGraphTimingRequest::getXsdDefinition(context, request, "WUGraphTiming", content, added);
		CWUGraphTimingResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUInfo"))) || Utils::strcasecmp(method, "WUInfo")==0)
	{
		CWUInfoRequest::getMapInfo(context.queryMapInfo());
		CWUInfoResponse::getMapInfo(context.queryMapInfo());
		CWUInfoRequest::getXsdDefinition(context, request, "WUInfo", content, added);
		CWUInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUInfoDetails"))) || Utils::strcasecmp(method, "WUInfoDetails")==0)
	{
		CWUInfoRequest::getMapInfo(context.queryMapInfo());
		CWUInfoResponse::getMapInfo(context.queryMapInfo());
		CWUInfoRequest::getXsdDefinition(context, request, "WUInfoDetails", content, added);
		CWUInfoResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUJobList"))) || Utils::strcasecmp(method, "WUJobList")==0)
	{
		CWUJobListRequest::getMapInfo(context.queryMapInfo());
		CWUJobListResponse::getMapInfo(context.queryMapInfo());
		CWUJobListRequest::getXsdDefinition(context, request, "WUJobList", content, added);
		CWUJobListResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WULightWeightQuery"))) || Utils::strcasecmp(method, "WULightWeightQuery")==0)
	{
		if (context.getClientVersion()>=1.57) {
			CWULightWeightQueryRequest::getMapInfo(context.queryMapInfo());
			CWULightWeightQueryResponse::getMapInfo(context.queryMapInfo());
			CWULightWeightQueryRequest::getXsdDefinition(context, request, "WULightWeightQuery", content, added);
			CWULightWeightQueryResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUListArchiveFiles"))) || Utils::strcasecmp(method, "WUListArchiveFiles")==0)
	{
		if (context.getClientVersion()>=1.57) {
			CWUListArchiveFilesRequest::getMapInfo(context.queryMapInfo());
			CWUListArchiveFilesResponse::getMapInfo(context.queryMapInfo());
			CWUListArchiveFilesRequest::getXsdDefinition(context, request, "WUListArchiveFiles", content, added);
			CWUListArchiveFilesResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUListLocalFileRequired"))) || Utils::strcasecmp(method, "WUListLocalFileRequired")==0)
	{
		CWUListLocalFileRequiredRequest::getMapInfo(context.queryMapInfo());
		CWUListLocalFileRequiredResponse::getMapInfo(context.queryMapInfo());
		CWUListLocalFileRequiredRequest::getXsdDefinition(context, request, "WUListLocalFileRequired", content, added);
		CWUListLocalFileRequiredResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUListQueries"))) || Utils::strcasecmp(method, "WUListQueries")==0)
	{
		CWUListQueriesRequest::getMapInfo(context.queryMapInfo());
		CWUListQueriesResponse::getMapInfo(context.queryMapInfo());
		CWUListQueriesRequest::getXsdDefinition(context, request, "WUListQueries", content, added);
		CWUListQueriesResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUListQueriesUsingFile"))) || Utils::strcasecmp(method, "WUListQueriesUsingFile")==0)
	{
		CWUListQueriesUsingFileRequest::getMapInfo(context.queryMapInfo());
		CWUListQueriesUsingFileResponse::getMapInfo(context.queryMapInfo());
		CWUListQueriesUsingFileRequest::getXsdDefinition(context, request, "WUListQueriesUsingFile", content, added);
		CWUListQueriesUsingFileResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUMultiQuerysetDetails"))) || Utils::strcasecmp(method, "WUMultiQuerysetDetails")==0)
	{
		CWUMultiQuerySetDetailsRequest::getMapInfo(context.queryMapInfo());
		CWUMultiQuerySetDetailsResponse::getMapInfo(context.queryMapInfo());
		CWUMultiQuerySetDetailsRequest::getXsdDefinition(context, request, "WUMultiQuerysetDetails", content, added);
		CWUMultiQuerySetDetailsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUProcessGraph"))) || Utils::strcasecmp(method, "WUProcessGraph")==0)
	{
		CWUProcessGraphRequest::getMapInfo(context.queryMapInfo());
		CWUProcessGraphResponse::getMapInfo(context.queryMapInfo());
		CWUProcessGraphRequest::getXsdDefinition(context, request, "WUProcessGraph", content, added);
		CWUProcessGraphResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUProtect"))) || Utils::strcasecmp(method, "WUProtect")==0)
	{
		CWUProtectRequest::getMapInfo(context.queryMapInfo());
		CWUProtectResponse::getMapInfo(context.queryMapInfo());
		CWUProtectRequest::getXsdDefinition(context, request, "WUProtect", content, added);
		CWUProtectResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUPublishWorkunit"))) || Utils::strcasecmp(method, "WUPublishWorkunit")==0)
	{
		CWUPublishWorkunitRequest::getMapInfo(context.queryMapInfo());
		CWUPublishWorkunitResponse::getMapInfo(context.queryMapInfo());
		CWUPublishWorkunitRequest::getXsdDefinition(context, request, "WUPublishWorkunit", content, added);
		CWUPublishWorkunitResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUPushEvent"))) || Utils::strcasecmp(method, "WUPushEvent")==0)
	{
		CWUPushEventRequest::getMapInfo(context.queryMapInfo());
		CWUPushEventResponse::getMapInfo(context.queryMapInfo());
		CWUPushEventRequest::getXsdDefinition(context, request, "WUPushEvent", content, added);
		CWUPushEventResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuery"))) || Utils::strcasecmp(method, "WUQuery")==0)
	{
		CWUQueryRequest::getMapInfo(context.queryMapInfo());
		CWUQueryResponse::getMapInfo(context.queryMapInfo());
		CWUQueryRequest::getXsdDefinition(context, request, "WUQuery", content, added);
		CWUQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQueryConfig"))) || Utils::strcasecmp(method, "WUQueryConfig")==0)
	{
		CWUQueryConfigRequest::getMapInfo(context.queryMapInfo());
		CWUQueryConfigResponse::getMapInfo(context.queryMapInfo());
		CWUQueryConfigRequest::getXsdDefinition(context, request, "WUQueryConfig", content, added);
		CWUQueryConfigResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQueryDetails"))) || Utils::strcasecmp(method, "WUQueryDetails")==0)
	{
		CWUQueryDetailsRequest::getMapInfo(context.queryMapInfo());
		CWUQueryDetailsResponse::getMapInfo(context.queryMapInfo());
		CWUQueryDetailsRequest::getXsdDefinition(context, request, "WUQueryDetails", content, added);
		CWUQueryDetailsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQueryFiles"))) || Utils::strcasecmp(method, "WUQueryFiles")==0)
	{
		CWUQueryFilesRequest::getMapInfo(context.queryMapInfo());
		CWUQueryFilesResponse::getMapInfo(context.queryMapInfo());
		CWUQueryFilesRequest::getXsdDefinition(context, request, "WUQueryFiles", content, added);
		CWUQueryFilesResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQueryGetGraph"))) || Utils::strcasecmp(method, "WUQueryGetGraph")==0)
	{
		CWUQueryGetGraphRequest::getMapInfo(context.queryMapInfo());
		CWUQueryGetGraphResponse::getMapInfo(context.queryMapInfo());
		CWUQueryGetGraphRequest::getXsdDefinition(context, request, "WUQueryGetGraph", content, added);
		CWUQueryGetGraphResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQueryGetSummaryStats"))) || Utils::strcasecmp(method, "WUQueryGetSummaryStats")==0)
	{
		if (context.getClientVersion()>=1.72) {
			CWUQueryGetSummaryStatsRequest::getMapInfo(context.queryMapInfo());
			CWUQueryGetSummaryStatsResponse::getMapInfo(context.queryMapInfo());
			CWUQueryGetSummaryStatsRequest::getXsdDefinition(context, request, "WUQueryGetSummaryStats", content, added);
			CWUQueryGetSummaryStatsResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuerysetAliasAction"))) || Utils::strcasecmp(method, "WUQuerysetAliasAction")==0)
	{
		CWUQuerySetAliasActionRequest::getMapInfo(context.queryMapInfo());
		CWUQuerySetAliasActionResponse::getMapInfo(context.queryMapInfo());
		CWUQuerySetAliasActionRequest::getXsdDefinition(context, request, "WUQuerysetAliasAction", content, added);
		CWUQuerySetAliasActionResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuerysetCopyQuery"))) || Utils::strcasecmp(method, "WUQuerysetCopyQuery")==0)
	{
		CWUQuerySetCopyQueryRequest::getMapInfo(context.queryMapInfo());
		CWUQuerySetCopyQueryResponse::getMapInfo(context.queryMapInfo());
		CWUQuerySetCopyQueryRequest::getXsdDefinition(context, request, "WUQuerysetCopyQuery", content, added);
		CWUQuerySetCopyQueryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuerysetDetails"))) || Utils::strcasecmp(method, "WUQuerysetDetails")==0)
	{
		CWUQuerySetDetailsRequest::getMapInfo(context.queryMapInfo());
		CWUQuerySetDetailsResponse::getMapInfo(context.queryMapInfo());
		CWUQuerySetDetailsRequest::getXsdDefinition(context, request, "WUQuerysetDetails", content, added);
		CWUQuerySetDetailsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuerysetExport"))) || Utils::strcasecmp(method, "WUQuerysetExport")==0)
	{
		if (context.getClientVersion()>=1.71) {
			CWUQuerysetExportRequest::getMapInfo(context.queryMapInfo());
			CWUQuerysetExportResponse::getMapInfo(context.queryMapInfo());
			CWUQuerysetExportRequest::getXsdDefinition(context, request, "WUQuerysetExport", content, added);
			CWUQuerysetExportResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuerysetImport"))) || Utils::strcasecmp(method, "WUQuerysetImport")==0)
	{
		if (context.getClientVersion()>=1.71) {
			CWUQuerysetImportRequest::getMapInfo(context.queryMapInfo());
			CWUQuerysetImportResponse::getMapInfo(context.queryMapInfo());
			CWUQuerysetImportRequest::getXsdDefinition(context, request, "WUQuerysetImport", content, added);
			CWUQuerysetImportResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuerysetQueryAction"))) || Utils::strcasecmp(method, "WUQuerysetQueryAction")==0)
	{
		CWUQuerySetQueryActionRequest::getMapInfo(context.queryMapInfo());
		CWUQuerySetQueryActionResponse::getMapInfo(context.queryMapInfo());
		CWUQuerySetQueryActionRequest::getXsdDefinition(context, request, "WUQuerysetQueryAction", content, added);
		CWUQuerySetQueryActionResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUQuerysets"))) || Utils::strcasecmp(method, "WUQuerysets")==0)
	{
		CWUQuerysetsRequest::getMapInfo(context.queryMapInfo());
		CWUQuerysetsResponse::getMapInfo(context.queryMapInfo());
		CWUQuerysetsRequest::getXsdDefinition(context, request, "WUQuerysets", content, added);
		CWUQuerysetsResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WURecreateQuery"))) || Utils::strcasecmp(method, "WURecreateQuery")==0)
	{
		if (context.getClientVersion()>=1.7) {
			CWURecreateQueryRequest::getMapInfo(context.queryMapInfo());
			CWURecreateQueryResponse::getMapInfo(context.queryMapInfo());
			CWURecreateQueryRequest::getXsdDefinition(context, request, "WURecreateQuery", content, added);
			CWURecreateQueryResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUResubmit"))) || Utils::strcasecmp(method, "WUResubmit")==0)
	{
		CWUResubmitRequest::getMapInfo(context.queryMapInfo());
		CWUResubmitResponse::getMapInfo(context.queryMapInfo());
		CWUResubmitRequest::getXsdDefinition(context, request, "WUResubmit", content, added);
		CWUResubmitResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUResult"))) || Utils::strcasecmp(method, "WUResult")==0)
	{
		CWUResultRequest::getMapInfo(context.queryMapInfo());
		CWUResultResponse::getMapInfo(context.queryMapInfo());
		CWUResultRequest::getXsdDefinition(context, request, "WUResult", content, added);
		CWUResultResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUResultBin"))) || Utils::strcasecmp(method, "WUResultBin")==0)
	{
		CWUResultBinRequest::getMapInfo(context.queryMapInfo());
		CWUResultBinResponse::getMapInfo(context.queryMapInfo());
		CWUResultBinRequest::getXsdDefinition(context, request, "WUResultBin", content, added);
		CWUResultBinResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUResultSummary"))) || Utils::strcasecmp(method, "WUResultSummary")==0)
	{
		CWUResultSummaryRequest::getMapInfo(context.queryMapInfo());
		CWUResultSummaryResponse::getMapInfo(context.queryMapInfo());
		CWUResultSummaryRequest::getXsdDefinition(context, request, "WUResultSummary", content, added);
		CWUResultSummaryResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUResultView"))) || Utils::strcasecmp(method, "WUResultView")==0)
	{
		CWUResultViewRequest::getMapInfo(context.queryMapInfo());
		CWUResultViewResponse::getMapInfo(context.queryMapInfo());
		CWUResultViewRequest::getXsdDefinition(context, request, "WUResultView", content, added);
		CWUResultViewResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WURun"))) || Utils::strcasecmp(method, "WURun")==0)
	{
		CWURunRequest::getMapInfo(context.queryMapInfo());
		CWURunResponse::getMapInfo(context.queryMapInfo());
		CWURunRequest::getXsdDefinition(context, request, "WURun", content, added);
		CWURunResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUSchedule"))) || Utils::strcasecmp(method, "WUSchedule")==0)
	{
		CWUScheduleRequest::getMapInfo(context.queryMapInfo());
		CWUScheduleResponse::getMapInfo(context.queryMapInfo());
		CWUScheduleRequest::getXsdDefinition(context, request, "WUSchedule", content, added);
		CWUScheduleResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUShowScheduled"))) || Utils::strcasecmp(method, "WUShowScheduled")==0)
	{
		CWUShowScheduledRequest::getMapInfo(context.queryMapInfo());
		CWUShowScheduledResponse::getMapInfo(context.queryMapInfo());
		CWUShowScheduledRequest::getXsdDefinition(context, request, "WUShowScheduled", content, added);
		CWUShowScheduledResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUSubmit"))) || Utils::strcasecmp(method, "WUSubmit")==0)
	{
		CWUSubmitRequest::getMapInfo(context.queryMapInfo());
		CWUSubmitResponse::getMapInfo(context.queryMapInfo());
		CWUSubmitRequest::getXsdDefinition(context, request, "WUSubmit", content, added);
		CWUSubmitResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUSyntaxCheckECL"))) || Utils::strcasecmp(method, "WUSyntaxCheckECL")==0)
	{
		CWUSyntaxCheckRequest::getMapInfo(context.queryMapInfo());
		CWUSyntaxCheckResponse::getMapInfo(context.queryMapInfo());
		CWUSyntaxCheckRequest::getXsdDefinition(context, request, "WUSyntaxCheckECL", content, added);
		CWUSyntaxCheckResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUUpdate"))) || Utils::strcasecmp(method, "WUUpdate")==0)
	{
		CWUUpdateRequest::getMapInfo(context.queryMapInfo());
		CWUUpdateResponse::getMapInfo(context.queryMapInfo());
		CWUUpdateRequest::getXsdDefinition(context, request, "WUUpdate", content, added);
		CWUUpdateResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUUpdateQueryEntry"))) || Utils::strcasecmp(method, "WUUpdateQueryEntry")==0)
	{
		if (context.getClientVersion()>=1.59) {
			CWUUpdateQueryEntryRequest::getMapInfo(context.queryMapInfo());
			CWUUpdateQueryEntryResponse::getMapInfo(context.queryMapInfo());
			CWUUpdateQueryEntryRequest::getXsdDefinition(context, request, "WUUpdateQueryEntry", content, added);
			CWUUpdateQueryEntryResponse::getXsdDefinition(context, request, content, added);
		}
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUWaitCompiled"))) || Utils::strcasecmp(method, "WUWaitCompiled")==0)
	{
		CWUWaitRequest::getMapInfo(context.queryMapInfo());
		CWUWaitResponse::getMapInfo(context.queryMapInfo());
		CWUWaitRequest::getXsdDefinition(context, request, "WUWaitCompiled", content, added);
		CWUWaitResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WUWaitComplete"))) || Utils::strcasecmp(method, "WUWaitComplete")==0)
	{
		CWUWaitRequest::getMapInfo(context.queryMapInfo());
		CWUWaitResponse::getMapInfo(context.queryMapInfo());
		CWUWaitRequest::getXsdDefinition(context, request, "WUWaitComplete", content, added);
		CWUWaitResponse::getXsdDefinition(context, request, content, added);
	}
	return 0;
}

int CWsWorkunitsSoapBinding::getMethodHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &page, bool bIncludeFormTag)
{
	DBGLOG("Client version: %g", context.getClientVersion());
	if (Utils::strcasecmp(method, "GVCAjaxGraph")==0)
	{
		CGVCAjaxGraphRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "Ping")==0)
	{
		CWsWorkunitsPingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUAbort")==0)
	{
		CWUAbortRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUAction")==0)
	{
		CWUActionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUAddLocalFileToWorkunit")==0)
	{
		CWUAddLocalFileToWorkunitRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCDebug")==0)
	{
		CWUDebugRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCheckFeatures")==0)
	{
		CWUCheckFeaturesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUClusterJobQueueLOG")==0)
	{
		CWUClusterJobQueueLOGRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUClusterJobQueueXLS")==0)
	{
		CWUClusterJobQueueXLSRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUClusterJobSummaryXLS")==0)
	{
		CWUClusterJobSummaryXLSRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUClusterJobXLS")==0)
	{
		CWUClusterJobXLSRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCompileECL")==0)
	{
		CWUCompileECLRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCopyLogicalFiles")==0)
	{
		CWUCopyLogicalFilesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCopyQuerySet")==0)
	{
		CWUCopyQuerySetRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCreate")==0)
	{
		CWUCreateRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCreateAndUpdate")==0)
	{
		CWUUpdateRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUCreateZAPInfo")==0)
	{
		CWUCreateZAPInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUDelete")==0)
	{
		CWUDeleteRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUDeployWorkunit")==0)
	{
		CWUDeployWorkunitRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUDetails")==0)
	{
		CWUDetailsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUDetailsMeta")==0)
	{
		CWUDetailsMetaRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUEclDefinitionAction")==0)
	{
		CWUEclDefinitionActionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUExport")==0)
	{
		CWUExportRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUFile")==0)
	{
		CWULogFileRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUFullResult")==0)
	{
		CWUFullResultRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGVCGraphInfo")==0)
	{
		CWUGVCGraphInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetArchiveFile")==0)
	{
		CWUGetArchiveFileRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetDependancyTrees")==0)
	{
		CWUGetDependancyTreesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetGraph")==0)
	{
		CWUGetGraphRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetGraphNameAndTypes")==0)
	{
		CWUGetGraphNameAndTypesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetNumFileToCopy")==0)
	{
		CWUGetNumFileToCopyRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetStats")==0)
	{
		CWUGetStatsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetThorJobList")==0)
	{
		CWUGetThorJobListRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetThorJobQueue")==0)
	{
		CWUGetThorJobQueueRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGetZAPInfo")==0)
	{
		CWUGetZAPInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGraphInfo")==0)
	{
		CWUGraphInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUGraphTiming")==0)
	{
		CWUGraphTimingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUInfo")==0)
	{
		CWUInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUInfoDetails")==0)
	{
		CWUInfoRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUJobList")==0)
	{
		CWUJobListRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WULightWeightQuery")==0)
	{
		CWULightWeightQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUListArchiveFiles")==0)
	{
		CWUListArchiveFilesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUListLocalFileRequired")==0)
	{
		CWUListLocalFileRequiredRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUListQueries")==0)
	{
		CWUListQueriesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUListQueriesUsingFile")==0)
	{
		CWUListQueriesUsingFileRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUMultiQuerysetDetails")==0)
	{
		CWUMultiQuerySetDetailsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUProcessGraph")==0)
	{
		CWUProcessGraphRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUProtect")==0)
	{
		CWUProtectRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUPublishWorkunit")==0)
	{
		CWUPublishWorkunitRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUPushEvent")==0)
	{
		CWUPushEventRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuery")==0)
	{
		CWUQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQueryConfig")==0)
	{
		CWUQueryConfigRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQueryDetails")==0)
	{
		CWUQueryDetailsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQueryFiles")==0)
	{
		CWUQueryFilesRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQueryGetGraph")==0)
	{
		CWUQueryGetGraphRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQueryGetSummaryStats")==0)
	{
		CWUQueryGetSummaryStatsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuerysetAliasAction")==0)
	{
		CWUQuerySetAliasActionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuerysetCopyQuery")==0)
	{
		CWUQuerySetCopyQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuerysetDetails")==0)
	{
		CWUQuerySetDetailsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuerysetExport")==0)
	{
		CWUQuerysetExportRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuerysetImport")==0)
	{
		CWUQuerysetImportRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuerysetQueryAction")==0)
	{
		CWUQuerySetQueryActionRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUQuerysets")==0)
	{
		CWUQuerysetsRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WURecreateQuery")==0)
	{
		CWURecreateQueryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUResubmit")==0)
	{
		CWUResubmitRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUResult")==0)
	{
		CWUResultRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUResultBin")==0)
	{
		CWUResultBinRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUResultSummary")==0)
	{
		CWUResultSummaryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUResultView")==0)
	{
		CWUResultViewRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WURun")==0)
	{
		CWURunRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUSchedule")==0)
	{
		CWUScheduleRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUShowScheduled")==0)
	{
		CWUShowScheduledRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUSubmit")==0)
	{
		CWUSubmitRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUSyntaxCheckECL")==0)
	{
		CWUSyntaxCheckRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUUpdate")==0)
	{
		CWUUpdateRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUUpdateQueryEntry")==0)
	{
		CWUUpdateQueryEntryRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUWaitCompiled")==0)
	{
		CWUWaitRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WUWaitComplete")==0)
	{
		CWUWaitRequest::getHtmlForm(context, request, serv, method, page);
	}
	return 0;
}

int CWsWorkunitsSoapBinding::getQualifiedNames(IEspContext& ctx, MethodInfoArray & methods)
{
	double ver = ctx.getClientVersion();
	if (ver<=0)
		ver = getWsdlVersion();
	const char *servname=ctx.queryServiceName(NULL);
	bool fullservice = (!stricmp(servname, "esp")||!stricmp(servname, "WsWorkunits"));
	if ((fullservice || isMethodInSubService(ctx, servname, "GVCAjaxGraph")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("GVCAjaxGraph", "GVCAjaxGraph", "GVCAjaxGraphResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Ping")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Ping", "Ping", "WsWorkunitsPingResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUAbort")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUAbort", "WUAbort", "WUAbortResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUAction")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUAction", "WUAction", "WUActionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUAddLocalFileToWorkunit")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUAddLocalFileToWorkunit", "WUAddLocalFileToWorkunit", "WUAddLocalFileToWorkunitResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCDebug")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCDebug", "WUCDebug", "WUDebugResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCheckFeatures")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCheckFeatures", "WUCheckFeatures", "WUCheckFeaturesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUClusterJobQueueLOG")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUClusterJobQueueLOG", "WUClusterJobQueueLOG", "WUClusterJobQueueLOGResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUClusterJobQueueXLS")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUClusterJobQueueXLS", "WUClusterJobQueueXLS", "WUClusterJobQueueXLSResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUClusterJobSummaryXLS")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUClusterJobSummaryXLS", "WUClusterJobSummaryXLS", "WUClusterJobSummaryXLSResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUClusterJobXLS")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUClusterJobXLS", "WUClusterJobXLS", "WUClusterJobXLSResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCompileECL")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCompileECL", "WUCompileECL", "WUCompileECLResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCopyLogicalFiles")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCopyLogicalFiles", "WUCopyLogicalFiles", "WUCopyLogicalFilesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCopyQuerySet")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCopyQuerySet", "WUCopyQuerySet", "WUCopyQuerySetResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCreate")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCreate", "WUCreate", "WUCreateResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCreateAndUpdate")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCreateAndUpdate", "WUCreateAndUpdate", "WUUpdateResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUCreateZAPInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUCreateZAPInfo", "WUCreateZAPInfo", "WUCreateZAPInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUDelete")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUDelete", "WUDelete", "WUDeleteResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUDeployWorkunit")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUDeployWorkunit", "WUDeployWorkunit", "WUDeployWorkunitResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUDetails")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.71, -1))
		methods.append(*new CMethodInfo("WUDetails", "WUDetails", "WUDetailsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUDetailsMeta")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.71, -1))
		methods.append(*new CMethodInfo("WUDetailsMeta", "WUDetailsMeta", "WUDetailsMetaResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUEclDefinitionAction")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.72, -1))
		methods.append(*new CMethodInfo("WUEclDefinitionAction", "WUEclDefinitionAction", "WUEclDefinitionActionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUExport")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUExport", "WUExport", "WUExportResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUFile")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUFile", "WUFile", "WULogFileResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUFullResult")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUFullResult", "WUFullResult", "WUFullResultResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGVCGraphInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUGVCGraphInfo", "WUGVCGraphInfo", "WUGVCGraphInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetArchiveFile")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.57, -1))
		methods.append(*new CMethodInfo("WUGetArchiveFile", "WUGetArchiveFile", "WUGetArchiveFileResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetDependancyTrees")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUGetDependancyTrees", "WUGetDependancyTrees", "WUGetDependancyTreesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetGraph")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUGetGraph", "WUGetGraph", "WUGetGraphResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetGraphNameAndTypes")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.57, -1))
		methods.append(*new CMethodInfo("WUGetGraphNameAndTypes", "WUGetGraphNameAndTypes", "WUGetGraphNameAndTypesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetNumFileToCopy")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.61, -1))
		methods.append(*new CMethodInfo("WUGetNumFileToCopy", "WUGetNumFileToCopy", "WUGetNumFileToCopyResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetStats")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUGetStats", "WUGetStats", "WUGetStatsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetThorJobList")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.74, -1))
		methods.append(*new CMethodInfo("WUGetThorJobList", "WUGetThorJobList", "WUGetThorJobListResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetThorJobQueue")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.74, -1))
		methods.append(*new CMethodInfo("WUGetThorJobQueue", "WUGetThorJobQueue", "WUGetThorJobQueueResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGetZAPInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUGetZAPInfo", "WUGetZAPInfo", "WUGetZAPInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGraphInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUGraphInfo", "WUGraphInfo", "WUGraphInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUGraphTiming")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUGraphTiming", "WUGraphTiming", "WUGraphTimingResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUInfo")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUInfo", "WUInfo", "WUInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUInfoDetails")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUInfoDetails", "WUInfoDetails", "WUInfoResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUJobList")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUJobList", "WUJobList", "WUJobListResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WULightWeightQuery")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.57, -1))
		methods.append(*new CMethodInfo("WULightWeightQuery", "WULightWeightQuery", "WULightWeightQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUListArchiveFiles")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.57, -1))
		methods.append(*new CMethodInfo("WUListArchiveFiles", "WUListArchiveFiles", "WUListArchiveFilesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUListLocalFileRequired")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUListLocalFileRequired", "WUListLocalFileRequired", "WUListLocalFileRequiredResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUListQueries")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUListQueries", "WUListQueries", "WUListQueriesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUListQueriesUsingFile")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUListQueriesUsingFile", "WUListQueriesUsingFile", "WUListQueriesUsingFileResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUMultiQuerysetDetails")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUMultiQuerysetDetails", "WUMultiQuerysetDetails", "WUMultiQuerySetDetailsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUProcessGraph")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUProcessGraph", "WUProcessGraph", "WUProcessGraphResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUProtect")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUProtect", "WUProtect", "WUProtectResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUPublishWorkunit")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUPublishWorkunit", "WUPublishWorkunit", "WUPublishWorkunitResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUPushEvent")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUPushEvent", "WUPushEvent", "WUPushEventResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuery")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQuery", "WUQuery", "WUQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQueryConfig")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQueryConfig", "WUQueryConfig", "WUQueryConfigResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQueryDetails")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQueryDetails", "WUQueryDetails", "WUQueryDetailsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQueryFiles")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQueryFiles", "WUQueryFiles", "WUQueryFilesResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQueryGetGraph")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQueryGetGraph", "WUQueryGetGraph", "WUQueryGetGraphResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQueryGetSummaryStats")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.72, -1))
		methods.append(*new CMethodInfo("WUQueryGetSummaryStats", "WUQueryGetSummaryStats", "WUQueryGetSummaryStatsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuerysetAliasAction")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQuerysetAliasAction", "WUQuerysetAliasAction", "WUQuerySetAliasActionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuerysetCopyQuery")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQuerysetCopyQuery", "WUQuerysetCopyQuery", "WUQuerySetCopyQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuerysetDetails")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQuerysetDetails", "WUQuerysetDetails", "WUQuerySetDetailsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuerysetExport")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.71, -1))
		methods.append(*new CMethodInfo("WUQuerysetExport", "WUQuerysetExport", "WUQuerysetExportResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuerysetImport")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.71, -1))
		methods.append(*new CMethodInfo("WUQuerysetImport", "WUQuerysetImport", "WUQuerysetImportResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuerysetQueryAction")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQuerysetQueryAction", "WUQuerysetQueryAction", "WUQuerySetQueryActionResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUQuerysets")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUQuerysets", "WUQuerysets", "WUQuerysetsResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WURecreateQuery")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.7, -1))
		methods.append(*new CMethodInfo("WURecreateQuery", "WURecreateQuery", "WURecreateQueryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUResubmit")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUResubmit", "WUResubmit", "WUResubmitResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUResult")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUResult", "WUResult", "WUResultResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUResultBin")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUResultBin", "WUResultBin", "WUResultBinResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUResultSummary")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUResultSummary", "WUResultSummary", "WUResultSummaryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUResultView")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUResultView", "WUResultView", "WUResultViewResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WURun")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WURun", "WURun", "WURunResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUSchedule")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUSchedule", "WUSchedule", "WUScheduleResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUShowScheduled")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUShowScheduled", "WUShowScheduled", "WUShowScheduledResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUSubmit")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUSubmit", "WUSubmit", "WUSubmitResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUSyntaxCheckECL")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUSyntaxCheckECL", "WUSyntaxCheckECL", "WUSyntaxCheckResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUUpdate")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUUpdate", "WUUpdate", "WUUpdateResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUUpdateQueryEntry")) && ctx.isMethodAllowed(ver,NULL, NULL, 1.59, -1))
		methods.append(*new CMethodInfo("WUUpdateQueryEntry", "WUUpdateQueryEntry", "WUUpdateQueryEntryResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUWaitCompiled")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUWaitCompiled", "WUWaitCompiled", "WUWaitResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WUWaitComplete")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WUWaitComplete", "WUWaitComplete", "WUWaitResponse"));
	return methods.ordinality();
}

StringBuffer & CWsWorkunitsSoapBinding::getServiceName(StringBuffer &resp)
{
	resp.append("WsWorkunits");
	return resp;
}

bool CWsWorkunitsSoapBinding::isValidServiceName(IEspContext &context, const char *name)
{
	if (!Utils::strcasecmp(name, "WsWorkunits"))
		return true;
	else
		return (hasSubService(context, name));
}

bool CWsWorkunitsSoapBinding::qualifyMethodName(IEspContext &context, const char *methname, StringBuffer *methQName)
{
	if (!methname || !*methname)
	{
		if (methQName!=NULL)
			methQName->clear();
		return true;
	}
	if (Utils::strcasecmp(methname, "GVCAjaxGraph")==0)
	{
		if (methQName!=NULL)
			methQName->set("GVCAjaxGraph");
		return true;
	}
	if (Utils::strcasecmp(methname, "Ping")==0)
	{
		if (methQName!=NULL)
			methQName->set("Ping");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUAbort")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUAbort");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUAction")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUAction");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUAddLocalFileToWorkunit")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUAddLocalFileToWorkunit");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCDebug")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCDebug");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCheckFeatures")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCheckFeatures");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUClusterJobQueueLOG")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUClusterJobQueueLOG");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUClusterJobQueueXLS")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUClusterJobQueueXLS");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUClusterJobSummaryXLS")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUClusterJobSummaryXLS");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUClusterJobXLS")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUClusterJobXLS");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCompileECL")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCompileECL");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCopyLogicalFiles")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCopyLogicalFiles");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCopyQuerySet")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCopyQuerySet");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCreate")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCreate");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCreateAndUpdate")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCreateAndUpdate");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUCreateZAPInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUCreateZAPInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUDelete")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUDelete");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUDeployWorkunit")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUDeployWorkunit");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUDetails")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUDetails");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUDetailsMeta")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUDetailsMeta");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUEclDefinitionAction")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUEclDefinitionAction");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUExport")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUExport");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUFile")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUFile");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUFullResult")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUFullResult");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGVCGraphInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGVCGraphInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetArchiveFile")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetArchiveFile");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetDependancyTrees")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetDependancyTrees");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetGraph")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetGraph");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetGraphNameAndTypes")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetGraphNameAndTypes");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetNumFileToCopy")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetNumFileToCopy");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetStats")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetStats");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetThorJobList")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetThorJobList");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetThorJobQueue")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetThorJobQueue");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGetZAPInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGetZAPInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGraphInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGraphInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUGraphTiming")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUGraphTiming");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUInfo")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUInfo");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUInfoDetails")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUInfoDetails");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUJobList")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUJobList");
		return true;
	}
	if (Utils::strcasecmp(methname, "WULightWeightQuery")==0)
	{
		if (methQName!=NULL)
			methQName->set("WULightWeightQuery");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUListArchiveFiles")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUListArchiveFiles");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUListLocalFileRequired")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUListLocalFileRequired");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUListQueries")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUListQueries");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUListQueriesUsingFile")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUListQueriesUsingFile");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUMultiQuerysetDetails")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUMultiQuerysetDetails");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUProcessGraph")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUProcessGraph");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUProtect")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUProtect");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUPublishWorkunit")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUPublishWorkunit");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUPushEvent")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUPushEvent");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuery")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuery");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQueryConfig")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQueryConfig");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQueryDetails")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQueryDetails");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQueryFiles")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQueryFiles");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQueryGetGraph")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQueryGetGraph");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQueryGetSummaryStats")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQueryGetSummaryStats");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuerysetAliasAction")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuerysetAliasAction");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuerysetCopyQuery")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuerysetCopyQuery");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuerysetDetails")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuerysetDetails");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuerysetExport")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuerysetExport");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuerysetImport")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuerysetImport");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuerysetQueryAction")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuerysetQueryAction");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUQuerysets")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUQuerysets");
		return true;
	}
	if (Utils::strcasecmp(methname, "WURecreateQuery")==0)
	{
		if (methQName!=NULL)
			methQName->set("WURecreateQuery");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUResubmit")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUResubmit");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUResult")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUResult");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUResultBin")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUResultBin");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUResultSummary")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUResultSummary");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUResultView")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUResultView");
		return true;
	}
	if (Utils::strcasecmp(methname, "WURun")==0)
	{
		if (methQName!=NULL)
			methQName->set("WURun");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUSchedule")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUSchedule");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUShowScheduled")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUShowScheduled");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUSubmit")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUSubmit");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUSyntaxCheckECL")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUSyntaxCheckECL");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUUpdate")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUUpdate");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUUpdateQueryEntry")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUUpdateQueryEntry");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUWaitCompiled")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUWaitCompiled");
		return true;
	}
	if (Utils::strcasecmp(methname, "WUWaitComplete")==0)
	{
		if (methQName!=NULL)
			methQName->set("WUWaitComplete");
		return true;
	}
	return false;
}

bool CWsWorkunitsSoapBinding::qualifyServiceName(IEspContext &context, const char *servname, const char *methname, StringBuffer &servQName, StringBuffer *methQName)
{
	servQName.clear();
	if (!Utils::strcasecmp(servname, "WsWorkunits"))
	{
		servQName.append("WsWorkunits");
		return qualifyMethodName(context, methname, methQName);
	}
	return qualifySubServiceName(context, servname, methname, servQName, methQName);
}

int CWsWorkunitsSoapBinding::onGetFile(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	StringBuffer mimetype;
	MemoryBuffer content;

	StringBuffer filepath;
	getBaseFilePath(filepath);
	if (strchr("\\/", filepath.charAt(filepath.length()-1))==NULL)
		filepath.append("/");
	filepath.append(pathex);
	response->httpContentFromFile(filepath.str());
	response->send();
	return 0;
}

int CWsWorkunitsSoapBinding::onGetForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	return onGetNotFound(context, request, response, service);
}
int CWsWorkunitsSoapBinding::onGetXForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	return EspHttpBinding::onGetXForm(context, request, response, service, method);
}

int CWsWorkunitsSoapBinding::onGetService(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	return onGetQuery(context, request, response, service, method);
}

 IRpcRequestBinding *CWsWorkunitsSoapBinding::createReqBinding(IEspContext &context, IHttpMessage *ireq, const char *service, const char *method)
{
	CHttpRequest *request=static_cast<CHttpRequest*>(ireq);
	IProperties *props = (request) ? request->queryParameters() : NULL;

	if (!stricmp(method, "GVCAjaxGraph") || !stricmp(method, "GVCAjaxGraphRequest"))
		return new CGVCAjaxGraphRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "Ping") || !stricmp(method, "WsWorkunitsPingRequest"))
		return new CWsWorkunitsPingRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUAbort") || !stricmp(method, "WUAbortRequest"))
		return new CWUAbortRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUAction") || !stricmp(method, "WUActionRequest"))
		return new CWUActionRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUAddLocalFileToWorkunit") || !stricmp(method, "WUAddLocalFileToWorkunitRequest"))
		return new CWUAddLocalFileToWorkunitRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCDebug") || !stricmp(method, "WUDebugRequest"))
		return new CWUDebugRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCheckFeatures") || !stricmp(method, "WUCheckFeaturesRequest"))
		return new CWUCheckFeaturesRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUClusterJobQueueLOG") || !stricmp(method, "WUClusterJobQueueLOGRequest"))
		return new CWUClusterJobQueueLOGRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUClusterJobQueueXLS") || !stricmp(method, "WUClusterJobQueueXLSRequest"))
		return new CWUClusterJobQueueXLSRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUClusterJobSummaryXLS") || !stricmp(method, "WUClusterJobSummaryXLSRequest"))
		return new CWUClusterJobSummaryXLSRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUClusterJobXLS") || !stricmp(method, "WUClusterJobXLSRequest"))
		return new CWUClusterJobXLSRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCompileECL") || !stricmp(method, "WUCompileECLRequest"))
		return new CWUCompileECLRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCopyLogicalFiles") || !stricmp(method, "WUCopyLogicalFilesRequest"))
		return new CWUCopyLogicalFilesRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCopyQuerySet") || !stricmp(method, "WUCopyQuerySetRequest"))
		return new CWUCopyQuerySetRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCreate") || !stricmp(method, "WUCreateRequest"))
		return new CWUCreateRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCreateAndUpdate") || !stricmp(method, "WUUpdateRequest"))
		return new CWUUpdateRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUCreateZAPInfo") || !stricmp(method, "WUCreateZAPInfoRequest"))
		return new CWUCreateZAPInfoRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUDelete") || !stricmp(method, "WUDeleteRequest"))
		return new CWUDeleteRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUDeployWorkunit") || !stricmp(method, "WUDeployWorkunitRequest"))
		return new CWUDeployWorkunitRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUDetails") || !stricmp(method, "WUDetailsRequest"))
		return new CWUDetailsRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUDetailsMeta") || !stricmp(method, "WUDetailsMetaRequest"))
		return new CWUDetailsMetaRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUEclDefinitionAction") || !stricmp(method, "WUEclDefinitionActionRequest"))
		return new CWUEclDefinitionActionRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUExport") || !stricmp(method, "WUExportRequest"))
		return new CWUExportRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUFile") || !stricmp(method, "WULogFileRequest"))
		return new CWULogFileRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUFullResult") || !stricmp(method, "WUFullResultRequest"))
		return new CWUFullResultRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGVCGraphInfo") || !stricmp(method, "WUGVCGraphInfoRequest"))
		return new CWUGVCGraphInfoRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetArchiveFile") || !stricmp(method, "WUGetArchiveFileRequest"))
		return new CWUGetArchiveFileRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetDependancyTrees") || !stricmp(method, "WUGetDependancyTreesRequest"))
		return new CWUGetDependancyTreesRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetGraph") || !stricmp(method, "WUGetGraphRequest"))
		return new CWUGetGraphRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetGraphNameAndTypes") || !stricmp(method, "WUGetGraphNameAndTypesRequest"))
		return new CWUGetGraphNameAndTypesRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetNumFileToCopy") || !stricmp(method, "WUGetNumFileToCopyRequest"))
		return new CWUGetNumFileToCopyRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetStats") || !stricmp(method, "WUGetStatsRequest"))
		return new CWUGetStatsRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetThorJobList") || !stricmp(method, "WUGetThorJobListRequest"))
		return new CWUGetThorJobListRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetThorJobQueue") || !stricmp(method, "WUGetThorJobQueueRequest"))
		return new CWUGetThorJobQueueRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGetZAPInfo") || !stricmp(method, "WUGetZAPInfoRequest"))
		return new CWUGetZAPInfoRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGraphInfo") || !stricmp(method, "WUGraphInfoRequest"))
		return new CWUGraphInfoRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUGraphTiming") || !stricmp(method, "WUGraphTimingRequest"))
		return new CWUGraphTimingRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUInfo") || !stricmp(method, "WUInfoRequest"))
		return new CWUInfoRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUInfoDetails") || !stricmp(method, "WUInfoRequest"))
		return new CWUInfoRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUJobList") || !stricmp(method, "WUJobListRequest"))
		return new CWUJobListRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WULightWeightQuery") || !stricmp(method, "WULightWeightQueryRequest"))
		return new CWULightWeightQueryRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUListArchiveFiles") || !stricmp(method, "WUListArchiveFilesRequest"))
		return new CWUListArchiveFilesRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUListLocalFileRequired") || !stricmp(method, "WUListLocalFileRequiredRequest"))
		return new CWUListLocalFileRequiredRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUListQueries") || !stricmp(method, "WUListQueriesRequest"))
		return new CWUListQueriesRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUListQueriesUsingFile") || !stricmp(method, "WUListQueriesUsingFileRequest"))
		return new CWUListQueriesUsingFileRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUMultiQuerysetDetails") || !stricmp(method, "WUMultiQuerySetDetailsRequest"))
		return new CWUMultiQuerySetDetailsRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUProcessGraph") || !stricmp(method, "WUProcessGraphRequest"))
		return new CWUProcessGraphRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUProtect") || !stricmp(method, "WUProtectRequest"))
		return new CWUProtectRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUPublishWorkunit") || !stricmp(method, "WUPublishWorkunitRequest"))
		return new CWUPublishWorkunitRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUPushEvent") || !stricmp(method, "WUPushEventRequest"))
		return new CWUPushEventRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuery") || !stricmp(method, "WUQueryRequest"))
		return new CWUQueryRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQueryConfig") || !stricmp(method, "WUQueryConfigRequest"))
		return new CWUQueryConfigRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQueryDetails") || !stricmp(method, "WUQueryDetailsRequest"))
		return new CWUQueryDetailsRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQueryFiles") || !stricmp(method, "WUQueryFilesRequest"))
		return new CWUQueryFilesRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQueryGetGraph") || !stricmp(method, "WUQueryGetGraphRequest"))
		return new CWUQueryGetGraphRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQueryGetSummaryStats") || !stricmp(method, "WUQueryGetSummaryStatsRequest"))
		return new CWUQueryGetSummaryStatsRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuerysetAliasAction") || !stricmp(method, "WUQuerySetAliasActionRequest"))
		return new CWUQuerySetAliasActionRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuerysetCopyQuery") || !stricmp(method, "WUQuerySetCopyQueryRequest"))
		return new CWUQuerySetCopyQueryRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuerysetDetails") || !stricmp(method, "WUQuerySetDetailsRequest"))
		return new CWUQuerySetDetailsRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuerysetExport") || !stricmp(method, "WUQuerysetExportRequest"))
		return new CWUQuerysetExportRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuerysetImport") || !stricmp(method, "WUQuerysetImportRequest"))
		return new CWUQuerysetImportRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuerysetQueryAction") || !stricmp(method, "WUQuerySetQueryActionRequest"))
		return new CWUQuerySetQueryActionRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUQuerysets") || !stricmp(method, "WUQuerysetsRequest"))
		return new CWUQuerysetsRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WURecreateQuery") || !stricmp(method, "WURecreateQueryRequest"))
		return new CWURecreateQueryRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUResubmit") || !stricmp(method, "WUResubmitRequest"))
		return new CWUResubmitRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUResult") || !stricmp(method, "WUResultRequest"))
		return new CWUResultRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUResultBin") || !stricmp(method, "WUResultBinRequest"))
		return new CWUResultBinRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUResultSummary") || !stricmp(method, "WUResultSummaryRequest"))
		return new CWUResultSummaryRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUResultView") || !stricmp(method, "WUResultViewRequest"))
		return new CWUResultViewRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WURun") || !stricmp(method, "WURunRequest"))
		return new CWURunRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUSchedule") || !stricmp(method, "WUScheduleRequest"))
		return new CWUScheduleRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUShowScheduled") || !stricmp(method, "WUShowScheduledRequest"))
		return new CWUShowScheduledRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUSubmit") || !stricmp(method, "WUSubmitRequest"))
		return new CWUSubmitRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUSyntaxCheckECL") || !stricmp(method, "WUSyntaxCheckRequest"))
		return new CWUSyntaxCheckRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUUpdate") || !stricmp(method, "WUUpdateRequest"))
		return new CWUUpdateRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUUpdateQueryEntry") || !stricmp(method, "WUUpdateQueryEntryRequest"))
		return new CWUUpdateQueryEntryRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUWaitCompiled") || !stricmp(method, "WUWaitRequest"))
		return new CWUWaitRequest(&context, "WsWorkunits", props, NULL);
	if (!stricmp(method, "WUWaitComplete") || !stricmp(method, "WUWaitRequest"))
		return new CWUWaitRequest(&context, "WsWorkunits", props, NULL);
	return NULL;
}

int CWsWorkunitsSoapBinding::onGetInstantQuery(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if (context.getClientVersion()<=0)
		context.setClientVersion(1.74);

	if(request == NULL || response == NULL)
		return -1;
	StringBuffer respStr;
	Owned<IEspWsWorkunits> iserv = (IEspWsWorkunits*)getService();
	if(iserv == NULL)
	{
		respStr.append("Service not available");
		response->setContent(respStr.str());
		response->setContentType("text/html");
		response->send();
	}
	else
	{
		Owned<CSoapResponseBinding> esp_response;
		StringBuffer source;
		IEspContext& context = *request->queryContext();
		if(!stricmp(method, "GVCAjaxGraph")||!stricmp(method, "GVCAjaxGraphRequest"))
		{
			Owned<CGVCAjaxGraphRequest> esp_request = new CGVCAjaxGraphRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CGVCAjaxGraphResponse> esp_response = new CGVCAjaxGraphResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onGVCAjaxGraph(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "GVCAjaxGraph", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/GvcGraph.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "Ping")||!stricmp(method, "WsWorkunitsPingRequest"))
		{
			Owned<CWsWorkunitsPingRequest> esp_request = new CWsWorkunitsPingRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWsWorkunitsPingResponse* resp = new CWsWorkunitsPingResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "Ping");
				iserv->onPing(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "Ping", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUAbort")||!stricmp(method, "WUAbortRequest"))
		{
			Owned<CWUAbortRequest> esp_request = new CWUAbortRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUAbortResponse* resp = new CWUAbortResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUAbort");
				iserv->onWUAbort(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUAbort", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUAction")||!stricmp(method, "WUActionRequest"))
		{
			Owned<CWUActionRequest> esp_request = new CWUActionRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUActionResponse> esp_response = new CWUActionResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUAction(*request->queryContext(), *esp_request.get(), *esp_response.get());
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUAction", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/wuaction_results.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUAddLocalFileToWorkunit")||!stricmp(method, "WUAddLocalFileToWorkunitRequest"))
		{
			Owned<CWUAddLocalFileToWorkunitRequest> esp_request = new CWUAddLocalFileToWorkunitRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUAddLocalFileToWorkunitResponse* resp = new CWUAddLocalFileToWorkunitResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUAddLocalFileToWorkunit");
				iserv->onWUAddLocalFileToWorkunit(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUAddLocalFileToWorkunit", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUCDebug")||!stricmp(method, "WUDebugRequest"))
		{
			Owned<CWUDebugRequest> esp_request = new CWUDebugRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUDebugResponse* resp = new CWUDebugResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCDebug");
				iserv->onWUCDebug(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCDebug", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUCheckFeatures")||!stricmp(method, "WUCheckFeaturesRequest"))
		{
			Owned<CWUCheckFeaturesRequest> esp_request = new CWUCheckFeaturesRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUCheckFeaturesResponse* resp = new CWUCheckFeaturesResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCheckFeatures");
				iserv->onWUCheckFeatures(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCheckFeatures", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUClusterJobQueueLOG")||!stricmp(method, "WUClusterJobQueueLOGRequest"))
		{
			Owned<CWUClusterJobQueueLOGRequest> esp_request = new CWUClusterJobQueueLOGRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUClusterJobQueueLOGResponse* resp = new CWUClusterJobQueueLOGResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobQueueLOG");
				iserv->onWUClusterJobQueueLOG(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUClusterJobQueueLOG", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUClusterJobQueueXLS")||!stricmp(method, "WUClusterJobQueueXLSRequest"))
		{
			Owned<CWUClusterJobQueueXLSRequest> esp_request = new CWUClusterJobQueueXLSRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUClusterJobQueueXLSResponse* resp = new CWUClusterJobQueueXLSResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobQueueXLS");
				iserv->onWUClusterJobQueueXLS(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUClusterJobQueueXLS", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUClusterJobSummaryXLS")||!stricmp(method, "WUClusterJobSummaryXLSRequest"))
		{
			Owned<CWUClusterJobSummaryXLSRequest> esp_request = new CWUClusterJobSummaryXLSRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUClusterJobSummaryXLSResponse* resp = new CWUClusterJobSummaryXLSResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobSummaryXLS");
				iserv->onWUClusterJobSummaryXLS(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUClusterJobSummaryXLS", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUClusterJobXLS")||!stricmp(method, "WUClusterJobXLSRequest"))
		{
			Owned<CWUClusterJobXLSRequest> esp_request = new CWUClusterJobXLSRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUClusterJobXLSResponse* resp = new CWUClusterJobXLSResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUClusterJobXLS");
				iserv->onWUClusterJobXLS(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUClusterJobXLS", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUCompileECL")||!stricmp(method, "WUCompileECLRequest"))
		{
			Owned<CWUCompileECLRequest> esp_request = new CWUCompileECLRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUCompileECLResponse* resp = new CWUCompileECLResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCompileECL");
				iserv->onWUCompileECL(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCompileECL", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUCopyLogicalFiles")||!stricmp(method, "WUCopyLogicalFilesRequest"))
		{
			Owned<CWUCopyLogicalFilesRequest> esp_request = new CWUCopyLogicalFilesRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUCopyLogicalFilesResponse> esp_response = new CWUCopyLogicalFilesResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUCopyLogicalFiles(*request->queryContext(), *esp_request.get(), *esp_response.get());
				clearCacheByGroupID("ESPWsWUQS");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCopyLogicalFiles", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/WUCopyLogicalFiles.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUCopyQuerySet")||!stricmp(method, "WUCopyQuerySetRequest"))
		{
			Owned<CWUCopyQuerySetRequest> esp_request = new CWUCopyQuerySetRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUCopyQuerySetResponse* resp = new CWUCopyQuerySetResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCopyQuerySet");
				iserv->onWUCopyQuerySet(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUQS");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCopyQuerySet", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUCreate")||!stricmp(method, "WUCreateRequest"))
		{
			Owned<CWUCreateRequest> esp_request = new CWUCreateRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUCreateResponse* resp = new CWUCreateResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("OwnWorkunitsAccess", SecAccess_Write);
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCreate");
				iserv->onWUCreate(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCreate", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUCreateAndUpdate")||!stricmp(method, "WUUpdateRequest"))
		{
			Owned<CWUUpdateRequest> esp_request = new CWUUpdateRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUUpdateResponse* resp = new CWUUpdateResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			accessmap.setValue("OwnWorkunitsAccess", SecAccess_Write);
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCreateAndUpdate");
				iserv->onWUCreateAndUpdate(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCreateAndUpdate", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUCreateZAPInfo")||!stricmp(method, "WUCreateZAPInfoRequest"))
		{
			Owned<CWUCreateZAPInfoRequest> esp_request = new CWUCreateZAPInfoRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUCreateZAPInfoResponse* resp = new CWUCreateZAPInfoResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUCreateZAPInfo");
				iserv->onWUCreateZAPInfo(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUCreateZAPInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUDelete")||!stricmp(method, "WUDeleteRequest"))
		{
			Owned<CWUDeleteRequest> esp_request = new CWUDeleteRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUDeleteResponse* resp = new CWUDeleteResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDelete");
				iserv->onWUDelete(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUDelete", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUDeployWorkunit")||!stricmp(method, "WUDeployWorkunitRequest"))
		{
			Owned<CWUDeployWorkunitRequest> esp_request = new CWUDeployWorkunitRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUDeployWorkunitResponse* resp = new CWUDeployWorkunitResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDeployWorkunit");
				iserv->onWUDeployWorkunit(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUDeployWorkunit", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUDetails")||!stricmp(method, "WUDetailsRequest"))
		{
			Owned<CWUDetailsRequest> esp_request = new CWUDetailsRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUDetailsResponse* resp = new CWUDetailsResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDetails");
				iserv->onWUDetails(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUDetails", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUDetailsMeta")||!stricmp(method, "WUDetailsMetaRequest"))
		{
			Owned<CWUDetailsMetaRequest> esp_request = new CWUDetailsMetaRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUDetailsMetaResponse* resp = new CWUDetailsMetaResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUDetailsMeta");
				iserv->onWUDetailsMeta(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUDetailsMeta", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUEclDefinitionAction")||!stricmp(method, "WUEclDefinitionActionRequest"))
		{
			Owned<CWUEclDefinitionActionRequest> esp_request = new CWUEclDefinitionActionRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUEclDefinitionActionResponse* resp = new CWUEclDefinitionActionResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUEclDefinitionAction");
				iserv->onWUEclDefinitionAction(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUEclDefinitionAction", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUExport")||!stricmp(method, "WUExportRequest"))
		{
			Owned<CWUExportRequest> esp_request = new CWUExportRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUExportResponse* resp = new CWUExportResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUExport");
				iserv->onWUExport(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUExport", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUFile")||!stricmp(method, "WULogFileRequest"))
		{
			Owned<CWULogFileRequest> esp_request = new CWULogFileRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWULogFileResponse* resp = new CWULogFileResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUFile");
				iserv->onWUFile(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUFile", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUFullResult")||!stricmp(method, "WUFullResultRequest"))
		{
			Owned<CWUFullResultRequest> esp_request = new CWUFullResultRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUFullResultResponse* resp = new CWUFullResultResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUFullResult");
				iserv->onWUFullResult(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUFullResult", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGVCGraphInfo")||!stricmp(method, "WUGVCGraphInfoRequest"))
		{
			Owned<CWUGVCGraphInfoRequest> esp_request = new CWUGVCGraphInfoRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUGVCGraphInfoResponse> esp_response = new CWUGVCGraphInfoResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUGVCGraphInfo(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGVCGraphInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/graph_gvc.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUGetArchiveFile")||!stricmp(method, "WUGetArchiveFileRequest"))
		{
			Owned<CWUGetArchiveFileRequest> esp_request = new CWUGetArchiveFileRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetArchiveFileResponse* resp = new CWUGetArchiveFileResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetArchiveFile");
				iserv->onWUGetArchiveFile(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetArchiveFile", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetDependancyTrees")||!stricmp(method, "WUGetDependancyTreesRequest"))
		{
			Owned<CWUGetDependancyTreesRequest> esp_request = new CWUGetDependancyTreesRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetDependancyTreesResponse* resp = new CWUGetDependancyTreesResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetDependancyTrees");
				iserv->onWUGetDependancyTrees(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetDependancyTrees", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetGraph")||!stricmp(method, "WUGetGraphRequest"))
		{
			Owned<CWUGetGraphRequest> esp_request = new CWUGetGraphRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetGraphResponse* resp = new CWUGetGraphResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetGraph");
				iserv->onWUGetGraph(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetGraph", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetGraphNameAndTypes")||!stricmp(method, "WUGetGraphNameAndTypesRequest"))
		{
			Owned<CWUGetGraphNameAndTypesRequest> esp_request = new CWUGetGraphNameAndTypesRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetGraphNameAndTypesResponse* resp = new CWUGetGraphNameAndTypesResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetGraphNameAndTypes");
				iserv->onWUGetGraphNameAndTypes(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetGraphNameAndTypes", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetNumFileToCopy")||!stricmp(method, "WUGetNumFileToCopyRequest"))
		{
			Owned<CWUGetNumFileToCopyRequest> esp_request = new CWUGetNumFileToCopyRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetNumFileToCopyResponse* resp = new CWUGetNumFileToCopyResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetNumFileToCopy");
				iserv->onWUGetNumFileToCopy(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetNumFileToCopy", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetStats")||!stricmp(method, "WUGetStatsRequest"))
		{
			Owned<CWUGetStatsRequest> esp_request = new CWUGetStatsRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetStatsResponse* resp = new CWUGetStatsResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetStats");
				iserv->onWUGetStats(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetStats", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetThorJobList")||!stricmp(method, "WUGetThorJobListRequest"))
		{
			Owned<CWUGetThorJobListRequest> esp_request = new CWUGetThorJobListRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetThorJobListResponse* resp = new CWUGetThorJobListResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetThorJobList");
				iserv->onWUGetThorJobList(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetThorJobList", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetThorJobQueue")||!stricmp(method, "WUGetThorJobQueueRequest"))
		{
			Owned<CWUGetThorJobQueueRequest> esp_request = new CWUGetThorJobQueueRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUGetThorJobQueueResponse* resp = new CWUGetThorJobQueueResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUGetThorJobQueue");
				iserv->onWUGetThorJobQueue(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetThorJobQueue", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUGetZAPInfo")||!stricmp(method, "WUGetZAPInfoRequest"))
		{
			Owned<CWUGetZAPInfoRequest> esp_request = new CWUGetZAPInfoRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUGetZAPInfoResponse> esp_response = new CWUGetZAPInfoResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUGetZAPInfo(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGetZAPInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/WUZAPInfoForm.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUGraphInfo")||!stricmp(method, "WUGraphInfoRequest"))
		{
			Owned<CWUGraphInfoRequest> esp_request = new CWUGraphInfoRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUGraphInfoResponse> esp_response = new CWUGraphInfoResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUGraphInfo(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGraphInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/graph.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUGraphTiming")||!stricmp(method, "WUGraphTimingRequest"))
		{
			Owned<CWUGraphTimingRequest> esp_request = new CWUGraphTimingRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUGraphTimingResponse> esp_response = new CWUGraphTimingResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUGraphTiming(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUGraphTiming", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/wuid.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUInfo")||!stricmp(method, "WUInfoRequest"))
		{
			Owned<CWUInfoRequest> esp_request = new CWUInfoRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUInfoResponse> esp_response = new CWUInfoResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUInfo(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUInfo", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/wuid.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUInfoDetails")||!stricmp(method, "WUInfoRequest"))
		{
			Owned<CWUInfoRequest> esp_request = new CWUInfoRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUInfoResponse> esp_response = new CWUInfoResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUInfoDetails(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUInfoDetails", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/wuiddetails.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUJobList")||!stricmp(method, "WUJobListRequest"))
		{
			Owned<CWUJobListRequest> esp_request = new CWUJobListRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUJobListResponse> esp_response = new CWUJobListResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUJobList(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUJobList", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/wuid_jobs.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WULightWeightQuery")||!stricmp(method, "WULightWeightQueryRequest"))
		{
			Owned<CWULightWeightQueryRequest> esp_request = new CWULightWeightQueryRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWULightWeightQueryResponse* resp = new CWULightWeightQueryResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WULightWeightQuery");
				iserv->onWULightWeightQuery(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WULightWeightQuery", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUListArchiveFiles")||!stricmp(method, "WUListArchiveFilesRequest"))
		{
			Owned<CWUListArchiveFilesRequest> esp_request = new CWUListArchiveFilesRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUListArchiveFilesResponse* resp = new CWUListArchiveFilesResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUListArchiveFiles");
				iserv->onWUListArchiveFiles(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUListArchiveFiles", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUListLocalFileRequired")||!stricmp(method, "WUListLocalFileRequiredRequest"))
		{
			Owned<CWUListLocalFileRequiredRequest> esp_request = new CWUListLocalFileRequiredRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUListLocalFileRequiredResponse* resp = new CWUListLocalFileRequiredResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUListLocalFileRequired");
				iserv->onWUListLocalFileRequired(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUListLocalFileRequired", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUListQueries")||!stricmp(method, "WUListQueriesRequest"))
		{
			Owned<CWUListQueriesRequest> esp_request = new CWUListQueriesRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUListQueriesResponse* resp = new CWUListQueriesResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUListQueries");
				iserv->onWUListQueries(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUListQueries", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUListQueriesUsingFile")||!stricmp(method, "WUListQueriesUsingFileRequest"))
		{
			Owned<CWUListQueriesUsingFileRequest> esp_request = new CWUListQueriesUsingFileRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUListQueriesUsingFileResponse> esp_response = new CWUListQueriesUsingFileResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUListQueriesUsingFile(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUListQueriesUsingFile", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/QueriesUsingFile.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUMultiQuerysetDetails")||!stricmp(method, "WUMultiQuerySetDetailsRequest"))
		{
			Owned<CWUMultiQuerySetDetailsRequest> esp_request = new CWUMultiQuerySetDetailsRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUMultiQuerySetDetailsResponse* resp = new CWUMultiQuerySetDetailsResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUMultiQuerysetDetails");
				iserv->onWUMultiQuerysetDetails(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUMultiQuerysetDetails", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUProcessGraph")||!stricmp(method, "WUProcessGraphRequest"))
		{
			Owned<CWUProcessGraphRequest> esp_request = new CWUProcessGraphRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUProcessGraphResponse> esp_response = new CWUProcessGraphResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUProcessGraph(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUProcessGraph", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/graphStats.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUProtect")||!stricmp(method, "WUProtectRequest"))
		{
			Owned<CWUProtectRequest> esp_request = new CWUProtectRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUProtectResponse* resp = new CWUProtectResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUProtect");
				iserv->onWUProtect(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUProtect", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUPublishWorkunit")||!stricmp(method, "WUPublishWorkunitRequest"))
		{
			Owned<CWUPublishWorkunitRequest> esp_request = new CWUPublishWorkunitRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUPublishWorkunitResponse> esp_response = new CWUPublishWorkunitResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUPublishWorkunit(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUPublishWorkunit", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/WUPublishWorkunit.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUPushEvent")||!stricmp(method, "WUPushEventRequest"))
		{
			Owned<CWUPushEventRequest> esp_request = new CWUPushEventRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUPushEventResponse* resp = new CWUPushEventResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUPushEvent");
				iserv->onWUPushEvent(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUPushEvent", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQuery")||!stricmp(method, "WUQueryRequest"))
		{
			Owned<CWUQueryRequest> esp_request = new CWUQueryRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUQueryResponse> esp_response = new CWUQueryResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUQuery(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuery", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/workunits.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUQueryConfig")||!stricmp(method, "WUQueryConfigRequest"))
		{
			Owned<CWUQueryConfigRequest> esp_request = new CWUQueryConfigRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQueryConfigResponse* resp = new CWUQueryConfigResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryConfig");
				iserv->onWUQueryConfig(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQueryConfig", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQueryDetails")||!stricmp(method, "WUQueryDetailsRequest"))
		{
			Owned<CWUQueryDetailsRequest> esp_request = new CWUQueryDetailsRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUQueryDetailsResponse> esp_response = new CWUQueryDetailsResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUQueryDetails(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQueryDetails", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/WUQueryDetails.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUQueryFiles")||!stricmp(method, "WUQueryFilesRequest"))
		{
			Owned<CWUQueryFilesRequest> esp_request = new CWUQueryFilesRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQueryFilesResponse* resp = new CWUQueryFilesResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryFiles");
				iserv->onWUQueryFiles(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQueryFiles", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQueryGetGraph")||!stricmp(method, "WUQueryGetGraphRequest"))
		{
			Owned<CWUQueryGetGraphRequest> esp_request = new CWUQueryGetGraphRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQueryGetGraphResponse* resp = new CWUQueryGetGraphResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryGetGraph");
				iserv->onWUQueryGetGraph(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQueryGetGraph", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQueryGetSummaryStats")||!stricmp(method, "WUQueryGetSummaryStatsRequest"))
		{
			Owned<CWUQueryGetSummaryStatsRequest> esp_request = new CWUQueryGetSummaryStatsRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQueryGetSummaryStatsResponse* resp = new CWUQueryGetSummaryStatsResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQueryGetSummaryStats");
				iserv->onWUQueryGetSummaryStats(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQueryGetSummaryStats", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQuerysetAliasAction")||!stricmp(method, "WUQuerySetAliasActionRequest"))
		{
			Owned<CWUQuerySetAliasActionRequest> esp_request = new CWUQuerySetAliasActionRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQuerySetAliasActionResponse* resp = new CWUQuerySetAliasActionResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetAliasAction");
				iserv->onWUQuerysetAliasAction(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUQS");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuerysetAliasAction", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQuerysetCopyQuery")||!stricmp(method, "WUQuerySetCopyQueryRequest"))
		{
			Owned<CWUQuerySetCopyQueryRequest> esp_request = new CWUQuerySetCopyQueryRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQuerySetCopyQueryResponse* resp = new CWUQuerySetCopyQueryResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetCopyQuery");
				iserv->onWUQuerysetCopyQuery(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUQS");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuerysetCopyQuery", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQuerysetDetails")||!stricmp(method, "WUQuerySetDetailsRequest"))
		{
			Owned<CWUQuerySetDetailsRequest> esp_request = new CWUQuerySetDetailsRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUQuerySetDetailsResponse> esp_response = new CWUQuerySetDetailsResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUQuerysetDetails(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuerysetDetails", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/WUQuerysetQueries.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUQuerysetExport")||!stricmp(method, "WUQuerysetExportRequest"))
		{
			Owned<CWUQuerysetExportRequest> esp_request = new CWUQuerysetExportRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQuerysetExportResponse* resp = new CWUQuerysetExportResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetExport");
				iserv->onWUQuerysetExport(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuerysetExport", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQuerysetImport")||!stricmp(method, "WUQuerysetImportRequest"))
		{
			Owned<CWUQuerysetImportRequest> esp_request = new CWUQuerysetImportRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQuerysetImportResponse* resp = new CWUQuerysetImportResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetImport");
				iserv->onWUQuerysetImport(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUQS");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuerysetImport", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQuerysetQueryAction")||!stricmp(method, "WUQuerySetQueryActionRequest"))
		{
			Owned<CWUQuerySetQueryActionRequest> esp_request = new CWUQuerySetQueryActionRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUQuerySetQueryActionResponse* resp = new CWUQuerySetQueryActionResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUQuerysetQueryAction");
				iserv->onWUQuerysetQueryAction(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUQS");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuerysetQueryAction", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUQuerysets")||!stricmp(method, "WUQuerysetsRequest"))
		{
			Owned<CWUQuerysetsRequest> esp_request = new CWUQuerysetsRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUQuerysetsResponse> esp_response = new CWUQuerysetsResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUQuerysets(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUQuerysets", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/WUQuerysets.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WURecreateQuery")||!stricmp(method, "WURecreateQueryRequest"))
		{
			Owned<CWURecreateQueryRequest> esp_request = new CWURecreateQueryRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWURecreateQueryResponse* resp = new CWURecreateQueryResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WURecreateQuery");
				iserv->onWURecreateQuery(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WURecreateQuery", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUResubmit")||!stricmp(method, "WUResubmitRequest"))
		{
			Owned<CWUResubmitRequest> esp_request = new CWUResubmitRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUResubmitResponse* resp = new CWUResubmitResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResubmit");
				iserv->onWUResubmit(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUResubmit", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUResult")||!stricmp(method, "WUResultRequest"))
		{
			Owned<CWUResultRequest> esp_request = new CWUResultRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUResultResponse> esp_response = new CWUResultResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUResult(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUResult", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/result.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUResultBin")||!stricmp(method, "WUResultBinRequest"))
		{
			Owned<CWUResultBinRequest> esp_request = new CWUResultBinRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUResultBinResponse* resp = new CWUResultBinResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResultBin");
				iserv->onWUResultBin(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUResultBin", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUResultSummary")||!stricmp(method, "WUResultSummaryRequest"))
		{
			Owned<CWUResultSummaryRequest> esp_request = new CWUResultSummaryRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUResultSummaryResponse* resp = new CWUResultSummaryResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResultSummary");
				iserv->onWUResultSummary(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUResultSummary", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUResultView")||!stricmp(method, "WUResultViewRequest"))
		{
			Owned<CWUResultViewRequest> esp_request = new CWUResultViewRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUResultViewResponse* resp = new CWUResultViewResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUResultView");
				iserv->onWUResultView(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUResultView", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WURun")||!stricmp(method, "WURunRequest"))
		{
			Owned<CWURunRequest> esp_request = new CWURunRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWURunResponse* resp = new CWURunResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WURun");
				iserv->onWURun(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WURun", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUSchedule")||!stricmp(method, "WUScheduleRequest"))
		{
			Owned<CWUScheduleRequest> esp_request = new CWUScheduleRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUScheduleResponse* resp = new CWUScheduleResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUSchedule");
				iserv->onWUSchedule(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUSchedule", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUShowScheduled")||!stricmp(method, "WUShowScheduledRequest"))
		{
			Owned<CWUShowScheduledRequest> esp_request = new CWUShowScheduledRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			Owned<CWUShowScheduledResponse> esp_response = new CWUShowScheduledResponse("WsWorkunits");
			StringBuffer source;
			source.appendf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				iserv->onWUShowScheduled(*request->queryContext(), *esp_request.get(), *esp_response.get());
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUShowScheduled", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
			{
				response->redirect(*request, esp_response->getRedirectUrl());
			}
			else
			{
				IProperties *props=request->queryParameters();
				if (skipXslt(context))
				{
					MemoryBuffer content;
					StringBuffer mimetype;
					esp_response->appendContent(&context,content, mimetype);
					onBeforeSendResponse(context,request,content,service,method);
					response->setContent(content.length(), content.toByteArray());
					response->setContentType(mimetype.str());
				}
				else
				{
					StringBuffer xml;
					StringBuffer sResponse;
					esp_response->serializeStruct(&context, xml, NULL);

					xslTransform(xml.str(), "/esp/xslt/scheduledwus.xslt", sResponse.clear(), context.queryXslParameters());
					response->setContentType("text/html");
					response->setContent(sResponse.str());
				}
				response->send();
			}
			return 0;
		}
		if(!stricmp(method, "WUSubmit")||!stricmp(method, "WUSubmitRequest"))
		{
			Owned<CWUSubmitRequest> esp_request = new CWUSubmitRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUSubmitResponse* resp = new CWUSubmitResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUSubmit");
				iserv->onWUSubmit(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUSubmit", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUSyntaxCheckECL")||!stricmp(method, "WUSyntaxCheckRequest"))
		{
			Owned<CWUSyntaxCheckRequest> esp_request = new CWUSyntaxCheckRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUSyntaxCheckResponse* resp = new CWUSyntaxCheckResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUSyntaxCheckECL");
				iserv->onWUSyntaxCheckECL(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUSyntaxCheckECL", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUUpdate")||!stricmp(method, "WUUpdateRequest"))
		{
			Owned<CWUUpdateRequest> esp_request = new CWUUpdateRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUUpdateResponse* resp = new CWUUpdateResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUUpdate");
				iserv->onWUUpdate(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUs");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUUpdate", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUUpdateQueryEntry")||!stricmp(method, "WUUpdateQueryEntryRequest"))
		{
			Owned<CWUUpdateQueryEntryRequest> esp_request = new CWUUpdateQueryEntryRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUUpdateQueryEntryResponse* resp = new CWUUpdateQueryEntryResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUUpdateQueryEntry");
				iserv->onWUUpdateQueryEntry(context, *esp_request.get(), *resp);
				clearCacheByGroupID("ESPWsWUQS");
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUUpdateQueryEntry", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUWaitCompiled")||!stricmp(method, "WUWaitRequest"))
		{
			Owned<CWUWaitRequest> esp_request = new CWUWaitRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUWaitResponse* resp = new CWUWaitResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUWaitCompiled");
				iserv->onWUWaitCompiled(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUWaitCompiled", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WUWaitComplete")||!stricmp(method, "WUWaitRequest"))
		{
			Owned<CWUWaitRequest> esp_request = new CWUWaitRequest(&context, "WsWorkunits", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWUWaitResponse* resp = new CWUWaitResponse("WsWorkunits");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsWorkunits::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsWorkunits", "WUWaitComplete");
				iserv->onWUWaitComplete(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsWorkunits", "WUWaitComplete", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}

		if (esp_response.get())
		{
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
				response->redirect(*request, esp_response->getRedirectUrl());
			else
			{
				MemoryBuffer content;
				StringBuffer mimetype;
				esp_response->appendContent(&context,content, mimetype);
				onBeforeSendResponse(context,request,content,service,method);
				response->setContent(content.length(), content.toByteArray());
				response->setContentType(mimetype.str());
				response->send();
			}
			return 0;
		}
	}
	return onGetNotFound(context, request,  response, service);
}





//=======================================================
// client util methods
//=======================================================

//------ method GVCAjaxGraph ---------

IClientGVCAjaxGraphRequest * CClientWsWorkunits::createGVCAjaxGraphRequest()
{
	CGVCAjaxGraphRequest* request = new CGVCAjaxGraphRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("GVCAjaxGraph");
	return request;
}

IClientGVCAjaxGraphResponse * CClientWsWorkunits::GVCAjaxGraph(IClientGVCAjaxGraphRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CGVCAjaxGraphRequest* esprequest = static_cast<CGVCAjaxGraphRequest*>(request);
	CGVCAjaxGraphResponse* espresponse = new CGVCAjaxGraphResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_GVCAjaxGraph(IClientGVCAjaxGraphRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CGVCAjaxGraphRequest* esprequest = static_cast<CGVCAjaxGraphRequest*>(request);
	esprequest->setMethod("GVCAjaxGraph");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientGVCAjaxGraphResponse *CClientWsWorkunits::GVCAjaxGraphFn(const char * Name_, const char * GraphName_, int SubGraphId_, bool SubGraphOnly_)
{
	Owned<IClientGVCAjaxGraphRequest> req =  createGVCAjaxGraphRequest();
	req->setName(Name_);
	req->setGraphName(GraphName_);
	req->setSubGraphId(SubGraphId_);
	req->setSubGraphOnly(SubGraphOnly_);
	return GVCAjaxGraph(req.get());
}

//------ method Ping ---------

IClientWsWorkunitsPingRequest * CClientWsWorkunits::createPingRequest()
{
	CWsWorkunitsPingRequest* request = new CWsWorkunitsPingRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("Ping");
	return request;
}

IClientWsWorkunitsPingResponse * CClientWsWorkunits::Ping(IClientWsWorkunitsPingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsWorkunitsPingRequest* esprequest = static_cast<CWsWorkunitsPingRequest*>(request);
	CWsWorkunitsPingResponse* espresponse = new CWsWorkunitsPingResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_Ping(IClientWsWorkunitsPingRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsWorkunitsPingRequest* esprequest = static_cast<CWsWorkunitsPingRequest*>(request);
	esprequest->setMethod("Ping");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWsWorkunitsPingResponse *CClientWsWorkunits::PingFn()
{
	Owned<IClientWsWorkunitsPingRequest> req =  createPingRequest();
	return Ping(req.get());
}

//------ method WUAbort ---------

IClientWUAbortRequest * CClientWsWorkunits::createWUAbortRequest()
{
	CWUAbortRequest* request = new CWUAbortRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUAbort");
	return request;
}

IClientWUAbortResponse * CClientWsWorkunits::WUAbort(IClientWUAbortRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUAbortRequest* esprequest = static_cast<CWUAbortRequest*>(request);
	CWUAbortResponse* espresponse = new CWUAbortResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUAbort(IClientWUAbortRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUAbortRequest* esprequest = static_cast<CWUAbortRequest*>(request);
	esprequest->setMethod("WUAbort");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUAbortResponse *CClientWsWorkunits::WUAbortFn(StringArray &Wuids_, int BlockTillFinishTimer_)
{
	Owned<IClientWUAbortRequest> req =  createWUAbortRequest();
	req->setWuids(Wuids_);
	req->setBlockTillFinishTimer(BlockTillFinishTimer_);
	return WUAbort(req.get());
}

//------ method WUAction ---------

IClientWUActionRequest * CClientWsWorkunits::createWUActionRequest()
{
	CWUActionRequest* request = new CWUActionRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUAction");
	return request;
}

IClientWUActionResponse * CClientWsWorkunits::WUAction(IClientWUActionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUActionRequest* esprequest = static_cast<CWUActionRequest*>(request);
	CWUActionResponse* espresponse = new CWUActionResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUAction(IClientWUActionRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUActionRequest* esprequest = static_cast<CWUActionRequest*>(request);
	esprequest->setMethod("WUAction");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUActionResponse *CClientWsWorkunits::WUActionFn(StringArray &Wuids_, const char * ActionType_, CECLWUActions WUActionType_, const char * Cluster_, const char * Owner_, const char * State_, const char * StartDate_, const char * EndDate_, const char * ECL_, const char * Jobname_, const char * Test_, const char * CurrentPage_, const char * PageSize_, const char * Sortby_, bool Descending_, const char * EventServer_, const char * EventName_, const char * PageFrom_, int BlockTillFinishTimer_)
{
	Owned<IClientWUActionRequest> req =  createWUActionRequest();
	req->setWuids(Wuids_);
	req->setActionType(ActionType_);
	req->setWUActionType(WUActionType_);
	req->setCluster(Cluster_);
	req->setOwner(Owner_);
	req->setState(State_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setECL(ECL_);
	req->setJobname(Jobname_);
	req->setTest(Test_);
	req->setCurrentPage(CurrentPage_);
	req->setPageSize(PageSize_);
	req->setSortby(Sortby_);
	req->setDescending(Descending_);
	req->setEventServer(EventServer_);
	req->setEventName(EventName_);
	req->setPageFrom(PageFrom_);
	req->setBlockTillFinishTimer(BlockTillFinishTimer_);
	return WUAction(req.get());
}

//------ method WUAddLocalFileToWorkunit ---------

IClientWUAddLocalFileToWorkunitRequest * CClientWsWorkunits::createWUAddLocalFileToWorkunitRequest()
{
	CWUAddLocalFileToWorkunitRequest* request = new CWUAddLocalFileToWorkunitRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUAddLocalFileToWorkunit");
	return request;
}

IClientWUAddLocalFileToWorkunitResponse * CClientWsWorkunits::WUAddLocalFileToWorkunit(IClientWUAddLocalFileToWorkunitRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUAddLocalFileToWorkunitRequest* esprequest = static_cast<CWUAddLocalFileToWorkunitRequest*>(request);
	CWUAddLocalFileToWorkunitResponse* espresponse = new CWUAddLocalFileToWorkunitResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUAddLocalFileToWorkunit(IClientWUAddLocalFileToWorkunitRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUAddLocalFileToWorkunitRequest* esprequest = static_cast<CWUAddLocalFileToWorkunitRequest*>(request);
	esprequest->setMethod("WUAddLocalFileToWorkunit");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUAddLocalFileToWorkunitResponse *CClientWsWorkunits::WUAddLocalFileToWorkunitFn(const char * Wuid_, const char * Name_, const char * Val_, const char * DefVal_, int Type_, int Length_)
{
	Owned<IClientWUAddLocalFileToWorkunitRequest> req =  createWUAddLocalFileToWorkunitRequest();
	req->setWuid(Wuid_);
	req->setName(Name_);
	req->setVal(Val_);
	req->setDefVal(DefVal_);
	req->setType(Type_);
	req->setLength(Length_);
	return WUAddLocalFileToWorkunit(req.get());
}

//------ method WUCDebug ---------

IClientWUDebugRequest * CClientWsWorkunits::createWUCDebugRequest()
{
	CWUDebugRequest* request = new CWUDebugRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCDebug");
	return request;
}

IClientWUDebugResponse * CClientWsWorkunits::WUCDebug(IClientWUDebugRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDebugRequest* esprequest = static_cast<CWUDebugRequest*>(request);
	CWUDebugResponse* espresponse = new CWUDebugResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCDebug(IClientWUDebugRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDebugRequest* esprequest = static_cast<CWUDebugRequest*>(request);
	esprequest->setMethod("WUCDebug");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUDebugResponse *CClientWsWorkunits::WUCDebugFn(const char * Wuid_, const char * Command_)
{
	Owned<IClientWUDebugRequest> req =  createWUCDebugRequest();
	req->setWuid(Wuid_);
	req->setCommand(Command_);
	return WUCDebug(req.get());
}

//------ method WUCheckFeatures ---------

IClientWUCheckFeaturesRequest * CClientWsWorkunits::createWUCheckFeaturesRequest()
{
	CWUCheckFeaturesRequest* request = new CWUCheckFeaturesRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCheckFeatures");
	return request;
}

IClientWUCheckFeaturesResponse * CClientWsWorkunits::WUCheckFeatures(IClientWUCheckFeaturesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCheckFeaturesRequest* esprequest = static_cast<CWUCheckFeaturesRequest*>(request);
	CWUCheckFeaturesResponse* espresponse = new CWUCheckFeaturesResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCheckFeatures(IClientWUCheckFeaturesRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCheckFeaturesRequest* esprequest = static_cast<CWUCheckFeaturesRequest*>(request);
	esprequest->setMethod("WUCheckFeatures");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUCheckFeaturesResponse *CClientWsWorkunits::WUCheckFeaturesFn()
{
	Owned<IClientWUCheckFeaturesRequest> req =  createWUCheckFeaturesRequest();
	return WUCheckFeatures(req.get());
}

//------ method WUClusterJobQueueLOG ---------

IClientWUClusterJobQueueLOGRequest * CClientWsWorkunits::createWUClusterJobQueueLOGRequest()
{
	CWUClusterJobQueueLOGRequest* request = new CWUClusterJobQueueLOGRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUClusterJobQueueLOG");
	return request;
}

IClientWUClusterJobQueueLOGResponse * CClientWsWorkunits::WUClusterJobQueueLOG(IClientWUClusterJobQueueLOGRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobQueueLOGRequest* esprequest = static_cast<CWUClusterJobQueueLOGRequest*>(request);
	CWUClusterJobQueueLOGResponse* espresponse = new CWUClusterJobQueueLOGResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUClusterJobQueueLOG(IClientWUClusterJobQueueLOGRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobQueueLOGRequest* esprequest = static_cast<CWUClusterJobQueueLOGRequest*>(request);
	esprequest->setMethod("WUClusterJobQueueLOG");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUClusterJobQueueLOGResponse *CClientWsWorkunits::WUClusterJobQueueLOGFn(const char * Cluster_, const char * StartDate_, const char * EndDate_)
{
	Owned<IClientWUClusterJobQueueLOGRequest> req =  createWUClusterJobQueueLOGRequest();
	req->setCluster(Cluster_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	return WUClusterJobQueueLOG(req.get());
}

//------ method WUClusterJobQueueXLS ---------

IClientWUClusterJobQueueXLSRequest * CClientWsWorkunits::createWUClusterJobQueueXLSRequest()
{
	CWUClusterJobQueueXLSRequest* request = new CWUClusterJobQueueXLSRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUClusterJobQueueXLS");
	return request;
}

IClientWUClusterJobQueueXLSResponse * CClientWsWorkunits::WUClusterJobQueueXLS(IClientWUClusterJobQueueXLSRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobQueueXLSRequest* esprequest = static_cast<CWUClusterJobQueueXLSRequest*>(request);
	CWUClusterJobQueueXLSResponse* espresponse = new CWUClusterJobQueueXLSResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUClusterJobQueueXLS(IClientWUClusterJobQueueXLSRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobQueueXLSRequest* esprequest = static_cast<CWUClusterJobQueueXLSRequest*>(request);
	esprequest->setMethod("WUClusterJobQueueXLS");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUClusterJobQueueXLSResponse *CClientWsWorkunits::WUClusterJobQueueXLSFn(const char * Cluster_, const char * StartDate_, const char * EndDate_, const char * ShowType_)
{
	Owned<IClientWUClusterJobQueueXLSRequest> req =  createWUClusterJobQueueXLSRequest();
	req->setCluster(Cluster_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setShowType(ShowType_);
	return WUClusterJobQueueXLS(req.get());
}

//------ method WUClusterJobSummaryXLS ---------

IClientWUClusterJobSummaryXLSRequest * CClientWsWorkunits::createWUClusterJobSummaryXLSRequest()
{
	CWUClusterJobSummaryXLSRequest* request = new CWUClusterJobSummaryXLSRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUClusterJobSummaryXLS");
	return request;
}

IClientWUClusterJobSummaryXLSResponse * CClientWsWorkunits::WUClusterJobSummaryXLS(IClientWUClusterJobSummaryXLSRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobSummaryXLSRequest* esprequest = static_cast<CWUClusterJobSummaryXLSRequest*>(request);
	CWUClusterJobSummaryXLSResponse* espresponse = new CWUClusterJobSummaryXLSResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUClusterJobSummaryXLS(IClientWUClusterJobSummaryXLSRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobSummaryXLSRequest* esprequest = static_cast<CWUClusterJobSummaryXLSRequest*>(request);
	esprequest->setMethod("WUClusterJobSummaryXLS");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUClusterJobSummaryXLSResponse *CClientWsWorkunits::WUClusterJobSummaryXLSFn(const char * Cluster_, const char * StartDate_, const char * EndDate_, bool ShowAll_, const char * BusinessStartTime_, const char * BusinessEndTime_)
{
	Owned<IClientWUClusterJobSummaryXLSRequest> req =  createWUClusterJobSummaryXLSRequest();
	req->setCluster(Cluster_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setShowAll(ShowAll_);
	req->setBusinessStartTime(BusinessStartTime_);
	req->setBusinessEndTime(BusinessEndTime_);
	return WUClusterJobSummaryXLS(req.get());
}

//------ method WUClusterJobXLS ---------

IClientWUClusterJobXLSRequest * CClientWsWorkunits::createWUClusterJobXLSRequest()
{
	CWUClusterJobXLSRequest* request = new CWUClusterJobXLSRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUClusterJobXLS");
	return request;
}

IClientWUClusterJobXLSResponse * CClientWsWorkunits::WUClusterJobXLS(IClientWUClusterJobXLSRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobXLSRequest* esprequest = static_cast<CWUClusterJobXLSRequest*>(request);
	CWUClusterJobXLSResponse* espresponse = new CWUClusterJobXLSResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUClusterJobXLS(IClientWUClusterJobXLSRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUClusterJobXLSRequest* esprequest = static_cast<CWUClusterJobXLSRequest*>(request);
	esprequest->setMethod("WUClusterJobXLS");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUClusterJobXLSResponse *CClientWsWorkunits::WUClusterJobXLSFn(const char * Cluster_, const char * StartDate_, const char * EndDate_, bool ShowAll_, const char * BusinessStartTime_, const char * BusinessEndTime_)
{
	Owned<IClientWUClusterJobXLSRequest> req =  createWUClusterJobXLSRequest();
	req->setCluster(Cluster_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setShowAll(ShowAll_);
	req->setBusinessStartTime(BusinessStartTime_);
	req->setBusinessEndTime(BusinessEndTime_);
	return WUClusterJobXLS(req.get());
}

//------ method WUCompileECL ---------

IClientWUCompileECLRequest * CClientWsWorkunits::createWUCompileECLRequest()
{
	CWUCompileECLRequest* request = new CWUCompileECLRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCompileECL");
	return request;
}

IClientWUCompileECLResponse * CClientWsWorkunits::WUCompileECL(IClientWUCompileECLRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCompileECLRequest* esprequest = static_cast<CWUCompileECLRequest*>(request);
	CWUCompileECLResponse* espresponse = new CWUCompileECLResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCompileECL(IClientWUCompileECLRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCompileECLRequest* esprequest = static_cast<CWUCompileECLRequest*>(request);
	esprequest->setMethod("WUCompileECL");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUCompileECLResponse *CClientWsWorkunits::WUCompileECLFn(const char * ECL_, const char * ModuleName_, const char * AttributeName_, const char * Queue_, const char * Cluster_, const char * Snapshot_, bool IncludeDependencies_, bool IncludeComplexity_, int TimeToWait_)
{
	Owned<IClientWUCompileECLRequest> req =  createWUCompileECLRequest();
	req->setECL(ECL_);
	req->setModuleName(ModuleName_);
	req->setAttributeName(AttributeName_);
	req->setQueue(Queue_);
	req->setCluster(Cluster_);
	req->setSnapshot(Snapshot_);
	req->setIncludeDependencies(IncludeDependencies_);
	req->setIncludeComplexity(IncludeComplexity_);
	req->setTimeToWait(TimeToWait_);
	return WUCompileECL(req.get());
}

//------ method WUCopyLogicalFiles ---------

IClientWUCopyLogicalFilesRequest * CClientWsWorkunits::createWUCopyLogicalFilesRequest()
{
	CWUCopyLogicalFilesRequest* request = new CWUCopyLogicalFilesRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCopyLogicalFiles");
	return request;
}

IClientWUCopyLogicalFilesResponse * CClientWsWorkunits::WUCopyLogicalFiles(IClientWUCopyLogicalFilesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCopyLogicalFilesRequest* esprequest = static_cast<CWUCopyLogicalFilesRequest*>(request);
	CWUCopyLogicalFilesResponse* espresponse = new CWUCopyLogicalFilesResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCopyLogicalFiles(IClientWUCopyLogicalFilesRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCopyLogicalFilesRequest* esprequest = static_cast<CWUCopyLogicalFilesRequest*>(request);
	esprequest->setMethod("WUCopyLogicalFiles");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUCopyLogicalFilesResponse *CClientWsWorkunits::WUCopyLogicalFilesFn(const char * Wuid_, const char * Cluster_, bool CopyLocal_)
{
	Owned<IClientWUCopyLogicalFilesRequest> req =  createWUCopyLogicalFilesRequest();
	req->setWuid(Wuid_);
	req->setCluster(Cluster_);
	req->setCopyLocal(CopyLocal_);
	return WUCopyLogicalFiles(req.get());
}

//------ method WUCopyQuerySet ---------

IClientWUCopyQuerySetRequest * CClientWsWorkunits::createWUCopyQuerySetRequest()
{
	CWUCopyQuerySetRequest* request = new CWUCopyQuerySetRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCopyQuerySet");
	return request;
}

IClientWUCopyQuerySetResponse * CClientWsWorkunits::WUCopyQuerySet(IClientWUCopyQuerySetRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCopyQuerySetRequest* esprequest = static_cast<CWUCopyQuerySetRequest*>(request);
	CWUCopyQuerySetResponse* espresponse = new CWUCopyQuerySetResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCopyQuerySet(IClientWUCopyQuerySetRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCopyQuerySetRequest* esprequest = static_cast<CWUCopyQuerySetRequest*>(request);
	esprequest->setMethod("WUCopyQuerySet");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUCopyQuerySetResponse *CClientWsWorkunits::WUCopyQuerySetFn(const char * Source_, const char * Target_, bool ActiveOnly_, bool CloneActiveState_, bool AllowForeignFiles_, const char * DfsServer_, bool CopyFiles_, bool OverwriteDfs_, const char * SourceProcess_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_, bool IncludeFileErrors_)
{
	Owned<IClientWUCopyQuerySetRequest> req =  createWUCopyQuerySetRequest();
	req->setSource(Source_);
	req->setTarget(Target_);
	req->setActiveOnly(ActiveOnly_);
	req->setCloneActiveState(CloneActiveState_);
	req->setAllowForeignFiles(AllowForeignFiles_);
	req->setDfsServer(DfsServer_);
	req->setCopyFiles(CopyFiles_);
	req->setOverwriteDfs(OverwriteDfs_);
	req->setSourceProcess(SourceProcess_);
	req->setUpdateSuperFiles(UpdateSuperFiles_);
	req->setUpdateCloneFrom(UpdateCloneFrom_);
	req->setAppendCluster(AppendCluster_);
	req->setIncludeFileErrors(IncludeFileErrors_);
	return WUCopyQuerySet(req.get());
}

//------ method WUCreate ---------

IClientWUCreateRequest * CClientWsWorkunits::createWUCreateRequest()
{
	CWUCreateRequest* request = new CWUCreateRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCreate");
	return request;
}

IClientWUCreateResponse * CClientWsWorkunits::WUCreate(IClientWUCreateRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCreateRequest* esprequest = static_cast<CWUCreateRequest*>(request);
	CWUCreateResponse* espresponse = new CWUCreateResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCreate(IClientWUCreateRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCreateRequest* esprequest = static_cast<CWUCreateRequest*>(request);
	esprequest->setMethod("WUCreate");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUCreateResponse *CClientWsWorkunits::WUCreateFn()
{
	Owned<IClientWUCreateRequest> req =  createWUCreateRequest();
	return WUCreate(req.get());
}

//------ method WUCreateAndUpdate ---------

IClientWUUpdateRequest * CClientWsWorkunits::createWUCreateAndUpdateRequest()
{
	CWUUpdateRequest* request = new CWUUpdateRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCreateAndUpdate");
	return request;
}

IClientWUUpdateResponse * CClientWsWorkunits::WUCreateAndUpdate(IClientWUUpdateRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUUpdateRequest* esprequest = static_cast<CWUUpdateRequest*>(request);
	CWUUpdateResponse* espresponse = new CWUUpdateResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCreateAndUpdate(IClientWUUpdateRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUUpdateRequest* esprequest = static_cast<CWUUpdateRequest*>(request);
	esprequest->setMethod("WUCreateAndUpdate");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUUpdateResponse *CClientWsWorkunits::WUCreateAndUpdateFn(const char * Wuid_, int State_, int StateOrig_, const char * Jobname_, const char * JobnameOrig_, const char * QueryText_, int Action_, const char * Description_, const char * DescriptionOrig_, bool AddDrilldownFields_, int ResultLimit_, bool Protected_, bool ProtectedOrig_, int PriorityClass_, int PriorityLevel_, const char * Scope_, const char * ScopeOrig_, const char * ClusterSelection_, const char * ClusterOrig_, const char * XmlParams_, const char * ThorSlaveIP_, const char * QueryMainDefinition_, IArrayOf<IConstDebugValue> &DebugValues_, IArrayOf<IConstApplicationValue> &ApplicationValues_)
{
	Owned<IClientWUUpdateRequest> req =  createWUCreateAndUpdateRequest();
	req->setWuid(Wuid_);
	req->setState(State_);
	req->setStateOrig(StateOrig_);
	req->setJobname(Jobname_);
	req->setJobnameOrig(JobnameOrig_);
	req->setQueryText(QueryText_);
	req->setAction(Action_);
	req->setDescription(Description_);
	req->setDescriptionOrig(DescriptionOrig_);
	req->setAddDrilldownFields(AddDrilldownFields_);
	req->setResultLimit(ResultLimit_);
	req->setProtected(Protected_);
	req->setProtectedOrig(ProtectedOrig_);
	req->setPriorityClass(PriorityClass_);
	req->setPriorityLevel(PriorityLevel_);
	req->setScope(Scope_);
	req->setScopeOrig(ScopeOrig_);
	req->setClusterSelection(ClusterSelection_);
	req->setClusterOrig(ClusterOrig_);
	req->setXmlParams(XmlParams_);
	req->setThorSlaveIP(ThorSlaveIP_);
	req->setQueryMainDefinition(QueryMainDefinition_);
	req->setDebugValues(DebugValues_);
	req->setApplicationValues(ApplicationValues_);
	return WUCreateAndUpdate(req.get());
}

//------ method WUCreateZAPInfo ---------

IClientWUCreateZAPInfoRequest * CClientWsWorkunits::createWUCreateZAPInfoRequest()
{
	CWUCreateZAPInfoRequest* request = new CWUCreateZAPInfoRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUCreateZAPInfo");
	return request;
}

IClientWUCreateZAPInfoResponse * CClientWsWorkunits::WUCreateZAPInfo(IClientWUCreateZAPInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCreateZAPInfoRequest* esprequest = static_cast<CWUCreateZAPInfoRequest*>(request);
	CWUCreateZAPInfoResponse* espresponse = new CWUCreateZAPInfoResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUCreateZAPInfo(IClientWUCreateZAPInfoRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUCreateZAPInfoRequest* esprequest = static_cast<CWUCreateZAPInfoRequest*>(request);
	esprequest->setMethod("WUCreateZAPInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUCreateZAPInfoResponse *CClientWsWorkunits::WUCreateZAPInfoFn(const char * Wuid_, const char * ESPIPAddress_, const char * ThorIPAddress_, const char * BuildVersion_, const char * ProblemDescription_, const char * WhatChanged_, const char * WhereSlow_, const char * Password_, const char * ZAPFileName_, const char * IncludeThorSlaveLog_, const char * ZAPPassword_, bool SendEmail_, bool AttachZAPReportToEmail_, const char * EmailFrom_, const char * EmailSubject_, const char * EmailBody_)
{
	Owned<IClientWUCreateZAPInfoRequest> req =  createWUCreateZAPInfoRequest();
	req->setWuid(Wuid_);
	req->setESPIPAddress(ESPIPAddress_);
	req->setThorIPAddress(ThorIPAddress_);
	req->setBuildVersion(BuildVersion_);
	req->setProblemDescription(ProblemDescription_);
	req->setWhatChanged(WhatChanged_);
	req->setWhereSlow(WhereSlow_);
	req->setPassword(Password_);
	req->setZAPFileName(ZAPFileName_);
	req->setIncludeThorSlaveLog(IncludeThorSlaveLog_);
	req->setZAPPassword(ZAPPassword_);
	req->setSendEmail(SendEmail_);
	req->setAttachZAPReportToEmail(AttachZAPReportToEmail_);
	req->setEmailFrom(EmailFrom_);
	req->setEmailSubject(EmailSubject_);
	req->setEmailBody(EmailBody_);
	return WUCreateZAPInfo(req.get());
}

//------ method WUDelete ---------

IClientWUDeleteRequest * CClientWsWorkunits::createWUDeleteRequest()
{
	CWUDeleteRequest* request = new CWUDeleteRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUDelete");
	return request;
}

IClientWUDeleteResponse * CClientWsWorkunits::WUDelete(IClientWUDeleteRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDeleteRequest* esprequest = static_cast<CWUDeleteRequest*>(request);
	CWUDeleteResponse* espresponse = new CWUDeleteResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUDelete(IClientWUDeleteRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDeleteRequest* esprequest = static_cast<CWUDeleteRequest*>(request);
	esprequest->setMethod("WUDelete");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUDeleteResponse *CClientWsWorkunits::WUDeleteFn(StringArray &Wuids_, int BlockTillFinishTimer_)
{
	Owned<IClientWUDeleteRequest> req =  createWUDeleteRequest();
	req->setWuids(Wuids_);
	req->setBlockTillFinishTimer(BlockTillFinishTimer_);
	return WUDelete(req.get());
}

//------ method WUDeployWorkunit ---------

IClientWUDeployWorkunitRequest * CClientWsWorkunits::createWUDeployWorkunitRequest()
{
	CWUDeployWorkunitRequest* request = new CWUDeployWorkunitRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUDeployWorkunit");
	return request;
}

IClientWUDeployWorkunitResponse * CClientWsWorkunits::WUDeployWorkunit(IClientWUDeployWorkunitRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDeployWorkunitRequest* esprequest = static_cast<CWUDeployWorkunitRequest*>(request);
	CWUDeployWorkunitResponse* espresponse = new CWUDeployWorkunitResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUDeployWorkunit(IClientWUDeployWorkunitRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDeployWorkunitRequest* esprequest = static_cast<CWUDeployWorkunitRequest*>(request);
	esprequest->setMethod("WUDeployWorkunit");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUDeployWorkunitResponse *CClientWsWorkunits::WUDeployWorkunitFn(const char * Cluster_, const char * Name_, int Wait_, const char * ObjType_, const char * FileName_, const MemoryBuffer & Object_, int ResultLimit_, const char * QueryMainDefinition_, const char * Snapshot_, IArrayOf<IConstNamedValue> &DebugValues_)
{
	Owned<IClientWUDeployWorkunitRequest> req =  createWUDeployWorkunitRequest();
	req->setCluster(Cluster_);
	req->setName(Name_);
	req->setWait(Wait_);
	req->setObjType(ObjType_);
	req->setFileName(FileName_);
	req->setObject(Object_);
	req->setResultLimit(ResultLimit_);
	req->setQueryMainDefinition(QueryMainDefinition_);
	req->setSnapshot(Snapshot_);
	req->setDebugValues(DebugValues_);
	return WUDeployWorkunit(req.get());
}

//------ method WUDetails ---------

IClientWUDetailsRequest * CClientWsWorkunits::createWUDetailsRequest()
{
	CWUDetailsRequest* request = new CWUDetailsRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUDetails");
	return request;
}

IClientWUDetailsResponse * CClientWsWorkunits::WUDetails(IClientWUDetailsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDetailsRequest* esprequest = static_cast<CWUDetailsRequest*>(request);
	CWUDetailsResponse* espresponse = new CWUDetailsResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUDetails(IClientWUDetailsRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDetailsRequest* esprequest = static_cast<CWUDetailsRequest*>(request);
	esprequest->setMethod("WUDetails");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUDetailsResponse *CClientWsWorkunits::WUDetailsFn(const char * WUID_, IConstWUScopeFilter &ScopeFilter_, IConstWUNestedFilter &NestedFilter_, IConstWUPropertiesToReturn &PropertiesToReturn_, const char * Filter_, IConstWUScopeOptions &ScopeOptions_, IConstWUPropertyOptions &PropertyOptions_)
{
	Owned<IClientWUDetailsRequest> req =  createWUDetailsRequest();
	req->setWUID(WUID_);
	req->setScopeFilter(ScopeFilter_);
	req->setNestedFilter(NestedFilter_);
	req->setPropertiesToReturn(PropertiesToReturn_);
	req->setFilter(Filter_);
	req->setScopeOptions(ScopeOptions_);
	req->setPropertyOptions(PropertyOptions_);
	return WUDetails(req.get());
}

//------ method WUDetailsMeta ---------

IClientWUDetailsMetaRequest * CClientWsWorkunits::createWUDetailsMetaRequest()
{
	CWUDetailsMetaRequest* request = new CWUDetailsMetaRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUDetailsMeta");
	return request;
}

IClientWUDetailsMetaResponse * CClientWsWorkunits::WUDetailsMeta(IClientWUDetailsMetaRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDetailsMetaRequest* esprequest = static_cast<CWUDetailsMetaRequest*>(request);
	CWUDetailsMetaResponse* espresponse = new CWUDetailsMetaResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUDetailsMeta(IClientWUDetailsMetaRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUDetailsMetaRequest* esprequest = static_cast<CWUDetailsMetaRequest*>(request);
	esprequest->setMethod("WUDetailsMeta");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUDetailsMetaResponse *CClientWsWorkunits::WUDetailsMetaFn()
{
	Owned<IClientWUDetailsMetaRequest> req =  createWUDetailsMetaRequest();
	return WUDetailsMeta(req.get());
}

//------ method WUEclDefinitionAction ---------

IClientWUEclDefinitionActionRequest * CClientWsWorkunits::createWUEclDefinitionActionRequest()
{
	CWUEclDefinitionActionRequest* request = new CWUEclDefinitionActionRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUEclDefinitionAction");
	return request;
}

IClientWUEclDefinitionActionResponse * CClientWsWorkunits::WUEclDefinitionAction(IClientWUEclDefinitionActionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUEclDefinitionActionRequest* esprequest = static_cast<CWUEclDefinitionActionRequest*>(request);
	CWUEclDefinitionActionResponse* espresponse = new CWUEclDefinitionActionResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUEclDefinitionAction(IClientWUEclDefinitionActionRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUEclDefinitionActionRequest* esprequest = static_cast<CWUEclDefinitionActionRequest*>(request);
	esprequest->setMethod("WUEclDefinitionAction");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUEclDefinitionActionResponse *CClientWsWorkunits::WUEclDefinitionActionFn(StringArray &EclDefinitions_, CEclDefinitionActions ActionType_, const char * Target_, const char * RemoteDali_, const char * SourceProcess_, const char * Priority_, const char * Comment_, const char * MemoryLimit_, bool DeletePrevious_, bool SuspendPrevious_, bool NoActivate_, bool NoReload_, bool DontCopyFiles_, bool AllowForeign_, bool UpdateDfs_, bool UpdateSuperfiles_, bool UpdateCloneFrom_, bool DontAppendCluster_, int MsToWait_, int TimeLimit_, int WarnTimeLimit_)
{
	Owned<IClientWUEclDefinitionActionRequest> req =  createWUEclDefinitionActionRequest();
	req->setEclDefinitions(EclDefinitions_);
	req->setActionType(ActionType_);
	req->setTarget(Target_);
	req->setRemoteDali(RemoteDali_);
	req->setSourceProcess(SourceProcess_);
	req->setPriority(Priority_);
	req->setComment(Comment_);
	req->setMemoryLimit(MemoryLimit_);
	req->setDeletePrevious(DeletePrevious_);
	req->setSuspendPrevious(SuspendPrevious_);
	req->setNoActivate(NoActivate_);
	req->setNoReload(NoReload_);
	req->setDontCopyFiles(DontCopyFiles_);
	req->setAllowForeign(AllowForeign_);
	req->setUpdateDfs(UpdateDfs_);
	req->setUpdateSuperfiles(UpdateSuperfiles_);
	req->setUpdateCloneFrom(UpdateCloneFrom_);
	req->setDontAppendCluster(DontAppendCluster_);
	req->setMsToWait(MsToWait_);
	req->setTimeLimit(TimeLimit_);
	req->setWarnTimeLimit(WarnTimeLimit_);
	return WUEclDefinitionAction(req.get());
}

//------ method WUExport ---------

IClientWUExportRequest * CClientWsWorkunits::createWUExportRequest()
{
	CWUExportRequest* request = new CWUExportRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUExport");
	return request;
}

IClientWUExportResponse * CClientWsWorkunits::WUExport(IClientWUExportRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUExportRequest* esprequest = static_cast<CWUExportRequest*>(request);
	CWUExportResponse* espresponse = new CWUExportResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUExport(IClientWUExportRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUExportRequest* esprequest = static_cast<CWUExportRequest*>(request);
	esprequest->setMethod("WUExport");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUExportResponse *CClientWsWorkunits::WUExportFn(const char * Cluster_, const char * Owner_, const char * State_, const char * StartDate_, const char * EndDate_, const char * ECL_, const char * Jobname_)
{
	Owned<IClientWUExportRequest> req =  createWUExportRequest();
	req->setCluster(Cluster_);
	req->setOwner(Owner_);
	req->setState(State_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setECL(ECL_);
	req->setJobname(Jobname_);
	return WUExport(req.get());
}

//------ method WUFile ---------

IClientWULogFileRequest * CClientWsWorkunits::createWUFileRequest()
{
	CWULogFileRequest* request = new CWULogFileRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUFile");
	return request;
}

IClientWULogFileResponse * CClientWsWorkunits::WUFile(IClientWULogFileRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWULogFileRequest* esprequest = static_cast<CWULogFileRequest*>(request);
	CWULogFileResponse* espresponse = new CWULogFileResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUFile(IClientWULogFileRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWULogFileRequest* esprequest = static_cast<CWULogFileRequest*>(request);
	esprequest->setMethod("WUFile");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWULogFileResponse *CClientWsWorkunits::WUFileFn(const char * Name_, const char * Wuid_, const char * Type_, int Option_, const char * SlaveIP_, const char * IPAddress_, const char * Description_, const char * QuerySet_, const char * Query_, const char * Process_, const char * ClusterGroup_, const char * LogDate_, int SlaveNumber_, __int64 SizeLimit_, const char * PlainText_)
{
	Owned<IClientWULogFileRequest> req =  createWUFileRequest();
	req->setName(Name_);
	req->setWuid(Wuid_);
	req->setType(Type_);
	req->setOption(Option_);
	req->setSlaveIP(SlaveIP_);
	req->setIPAddress(IPAddress_);
	req->setDescription(Description_);
	req->setQuerySet(QuerySet_);
	req->setQuery(Query_);
	req->setProcess(Process_);
	req->setClusterGroup(ClusterGroup_);
	req->setLogDate(LogDate_);
	req->setSlaveNumber(SlaveNumber_);
	req->setSizeLimit(SizeLimit_);
	req->setPlainText(PlainText_);
	return WUFile(req.get());
}

//------ method WUFullResult ---------

IClientWUFullResultRequest * CClientWsWorkunits::createWUFullResultRequest()
{
	CWUFullResultRequest* request = new CWUFullResultRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUFullResult");
	return request;
}

IClientWUFullResultResponse * CClientWsWorkunits::WUFullResult(IClientWUFullResultRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUFullResultRequest* esprequest = static_cast<CWUFullResultRequest*>(request);
	CWUFullResultResponse* espresponse = new CWUFullResultResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUFullResult(IClientWUFullResultRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUFullResultRequest* esprequest = static_cast<CWUFullResultRequest*>(request);
	esprequest->setMethod("WUFullResult");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUFullResultResponse *CClientWsWorkunits::WUFullResultFn(const char * Wuid_, bool NoRootTag_, CWUExceptionSeverity ExceptionSeverity_)
{
	Owned<IClientWUFullResultRequest> req =  createWUFullResultRequest();
	req->setWuid(Wuid_);
	req->setNoRootTag(NoRootTag_);
	req->setExceptionSeverity(ExceptionSeverity_);
	return WUFullResult(req.get());
}

//------ method WUGVCGraphInfo ---------

IClientWUGVCGraphInfoRequest * CClientWsWorkunits::createWUGVCGraphInfoRequest()
{
	CWUGVCGraphInfoRequest* request = new CWUGVCGraphInfoRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGVCGraphInfo");
	return request;
}

IClientWUGVCGraphInfoResponse * CClientWsWorkunits::WUGVCGraphInfo(IClientWUGVCGraphInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGVCGraphInfoRequest* esprequest = static_cast<CWUGVCGraphInfoRequest*>(request);
	CWUGVCGraphInfoResponse* espresponse = new CWUGVCGraphInfoResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGVCGraphInfo(IClientWUGVCGraphInfoRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGVCGraphInfoRequest* esprequest = static_cast<CWUGVCGraphInfoRequest*>(request);
	esprequest->setMethod("WUGVCGraphInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGVCGraphInfoResponse *CClientWsWorkunits::WUGVCGraphInfoFn(const char * Wuid_, const char * Name_, const char * GID_, int BatchWU_, int SubgraphId_)
{
	Owned<IClientWUGVCGraphInfoRequest> req =  createWUGVCGraphInfoRequest();
	req->setWuid(Wuid_);
	req->setName(Name_);
	req->setGID(GID_);
	req->setBatchWU(BatchWU_);
	req->setSubgraphId(SubgraphId_);
	return WUGVCGraphInfo(req.get());
}

//------ method WUGetArchiveFile ---------

IClientWUGetArchiveFileRequest * CClientWsWorkunits::createWUGetArchiveFileRequest()
{
	CWUGetArchiveFileRequest* request = new CWUGetArchiveFileRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetArchiveFile");
	return request;
}

IClientWUGetArchiveFileResponse * CClientWsWorkunits::WUGetArchiveFile(IClientWUGetArchiveFileRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetArchiveFileRequest* esprequest = static_cast<CWUGetArchiveFileRequest*>(request);
	CWUGetArchiveFileResponse* espresponse = new CWUGetArchiveFileResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetArchiveFile(IClientWUGetArchiveFileRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetArchiveFileRequest* esprequest = static_cast<CWUGetArchiveFileRequest*>(request);
	esprequest->setMethod("WUGetArchiveFile");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetArchiveFileResponse *CClientWsWorkunits::WUGetArchiveFileFn(const char * WUID_, const char * ModuleName_, const char * FileName_, const char * Path_)
{
	Owned<IClientWUGetArchiveFileRequest> req =  createWUGetArchiveFileRequest();
	req->setWUID(WUID_);
	req->setModuleName(ModuleName_);
	req->setFileName(FileName_);
	req->setPath(Path_);
	return WUGetArchiveFile(req.get());
}

//------ method WUGetDependancyTrees ---------

IClientWUGetDependancyTreesRequest * CClientWsWorkunits::createWUGetDependancyTreesRequest()
{
	CWUGetDependancyTreesRequest* request = new CWUGetDependancyTreesRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetDependancyTrees");
	return request;
}

IClientWUGetDependancyTreesResponse * CClientWsWorkunits::WUGetDependancyTrees(IClientWUGetDependancyTreesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetDependancyTreesRequest* esprequest = static_cast<CWUGetDependancyTreesRequest*>(request);
	CWUGetDependancyTreesResponse* espresponse = new CWUGetDependancyTreesResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetDependancyTrees(IClientWUGetDependancyTreesRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetDependancyTreesRequest* esprequest = static_cast<CWUGetDependancyTreesRequest*>(request);
	esprequest->setMethod("WUGetDependancyTrees");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetDependancyTreesResponse *CClientWsWorkunits::WUGetDependancyTreesFn(const char * Cluster_, const char * Queue_, const char * Snapshot_, const char * Items_, const char * TimeoutMilliSec_)
{
	Owned<IClientWUGetDependancyTreesRequest> req =  createWUGetDependancyTreesRequest();
	req->setCluster(Cluster_);
	req->setQueue(Queue_);
	req->setSnapshot(Snapshot_);
	req->setItems(Items_);
	req->setTimeoutMilliSec(TimeoutMilliSec_);
	return WUGetDependancyTrees(req.get());
}

//------ method WUGetGraph ---------

IClientWUGetGraphRequest * CClientWsWorkunits::createWUGetGraphRequest()
{
	CWUGetGraphRequest* request = new CWUGetGraphRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetGraph");
	return request;
}

IClientWUGetGraphResponse * CClientWsWorkunits::WUGetGraph(IClientWUGetGraphRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetGraphRequest* esprequest = static_cast<CWUGetGraphRequest*>(request);
	CWUGetGraphResponse* espresponse = new CWUGetGraphResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetGraph(IClientWUGetGraphRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetGraphRequest* esprequest = static_cast<CWUGetGraphRequest*>(request);
	esprequest->setMethod("WUGetGraph");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetGraphResponse *CClientWsWorkunits::WUGetGraphFn(const char * Wuid_, const char * GraphName_, const char * SubGraphId_)
{
	Owned<IClientWUGetGraphRequest> req =  createWUGetGraphRequest();
	req->setWuid(Wuid_);
	req->setGraphName(GraphName_);
	req->setSubGraphId(SubGraphId_);
	return WUGetGraph(req.get());
}

//------ method WUGetGraphNameAndTypes ---------

IClientWUGetGraphNameAndTypesRequest * CClientWsWorkunits::createWUGetGraphNameAndTypesRequest()
{
	CWUGetGraphNameAndTypesRequest* request = new CWUGetGraphNameAndTypesRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetGraphNameAndTypes");
	return request;
}

IClientWUGetGraphNameAndTypesResponse * CClientWsWorkunits::WUGetGraphNameAndTypes(IClientWUGetGraphNameAndTypesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetGraphNameAndTypesRequest* esprequest = static_cast<CWUGetGraphNameAndTypesRequest*>(request);
	CWUGetGraphNameAndTypesResponse* espresponse = new CWUGetGraphNameAndTypesResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetGraphNameAndTypes(IClientWUGetGraphNameAndTypesRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetGraphNameAndTypesRequest* esprequest = static_cast<CWUGetGraphNameAndTypesRequest*>(request);
	esprequest->setMethod("WUGetGraphNameAndTypes");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetGraphNameAndTypesResponse *CClientWsWorkunits::WUGetGraphNameAndTypesFn(const char * Wuid_, const char * Type_)
{
	Owned<IClientWUGetGraphNameAndTypesRequest> req =  createWUGetGraphNameAndTypesRequest();
	req->setWuid(Wuid_);
	req->setType(Type_);
	return WUGetGraphNameAndTypes(req.get());
}

//------ method WUGetNumFileToCopy ---------

IClientWUGetNumFileToCopyRequest * CClientWsWorkunits::createWUGetNumFileToCopyRequest()
{
	CWUGetNumFileToCopyRequest* request = new CWUGetNumFileToCopyRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetNumFileToCopy");
	return request;
}

IClientWUGetNumFileToCopyResponse * CClientWsWorkunits::WUGetNumFileToCopy(IClientWUGetNumFileToCopyRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetNumFileToCopyRequest* esprequest = static_cast<CWUGetNumFileToCopyRequest*>(request);
	CWUGetNumFileToCopyResponse* espresponse = new CWUGetNumFileToCopyResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetNumFileToCopy(IClientWUGetNumFileToCopyRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetNumFileToCopyRequest* esprequest = static_cast<CWUGetNumFileToCopyRequest*>(request);
	esprequest->setMethod("WUGetNumFileToCopy");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetNumFileToCopyResponse *CClientWsWorkunits::WUGetNumFileToCopyFn(const char * ClusterName_, __int64 PageSize_, __int64 PageStartFrom_, const char * Sortby_, bool Descending_, __int64 CacheHint_)
{
	Owned<IClientWUGetNumFileToCopyRequest> req =  createWUGetNumFileToCopyRequest();
	req->setClusterName(ClusterName_);
	req->setPageSize(PageSize_);
	req->setPageStartFrom(PageStartFrom_);
	req->setSortby(Sortby_);
	req->setDescending(Descending_);
	req->setCacheHint(CacheHint_);
	return WUGetNumFileToCopy(req.get());
}

//------ method WUGetStats ---------

IClientWUGetStatsRequest * CClientWsWorkunits::createWUGetStatsRequest()
{
	CWUGetStatsRequest* request = new CWUGetStatsRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetStats");
	return request;
}

IClientWUGetStatsResponse * CClientWsWorkunits::WUGetStats(IClientWUGetStatsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetStatsRequest* esprequest = static_cast<CWUGetStatsRequest*>(request);
	CWUGetStatsResponse* espresponse = new CWUGetStatsResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetStats(IClientWUGetStatsRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetStatsRequest* esprequest = static_cast<CWUGetStatsRequest*>(request);
	esprequest->setMethod("WUGetStats");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetStatsResponse *CClientWsWorkunits::WUGetStatsFn(const char * WUID_, const char * CreatorType_, const char * Creator_, const char * ScopeType_, const char * Scope_, const char * Kind_, const char * Measure_, unsigned int MinScopeDepth_, unsigned int MaxScopeDepth_, bool IncludeGraphs_, bool CreateDescriptions_, __int64 MinValue_, __int64 MaxValue_, const char * Filter_)
{
	Owned<IClientWUGetStatsRequest> req =  createWUGetStatsRequest();
	req->setWUID(WUID_);
	req->setCreatorType(CreatorType_);
	req->setCreator(Creator_);
	req->setScopeType(ScopeType_);
	req->setScope(Scope_);
	req->setKind(Kind_);
	req->setMeasure(Measure_);
	req->setMinScopeDepth(MinScopeDepth_);
	req->setMaxScopeDepth(MaxScopeDepth_);
	req->setIncludeGraphs(IncludeGraphs_);
	req->setCreateDescriptions(CreateDescriptions_);
	req->setMinValue(MinValue_);
	req->setMaxValue(MaxValue_);
	req->setFilter(Filter_);
	return WUGetStats(req.get());
}

//------ method WUGetThorJobList ---------

IClientWUGetThorJobListRequest * CClientWsWorkunits::createWUGetThorJobListRequest()
{
	CWUGetThorJobListRequest* request = new CWUGetThorJobListRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetThorJobList");
	return request;
}

IClientWUGetThorJobListResponse * CClientWsWorkunits::WUGetThorJobList(IClientWUGetThorJobListRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetThorJobListRequest* esprequest = static_cast<CWUGetThorJobListRequest*>(request);
	CWUGetThorJobListResponse* espresponse = new CWUGetThorJobListResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetThorJobList(IClientWUGetThorJobListRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetThorJobListRequest* esprequest = static_cast<CWUGetThorJobListRequest*>(request);
	esprequest->setMethod("WUGetThorJobList");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetThorJobListResponse *CClientWsWorkunits::WUGetThorJobListFn(const char * Cluster_, const char * StartDate_, const char * EndDate_, unsigned int MaxJobsToReturn_)
{
	Owned<IClientWUGetThorJobListRequest> req =  createWUGetThorJobListRequest();
	req->setCluster(Cluster_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setMaxJobsToReturn(MaxJobsToReturn_);
	return WUGetThorJobList(req.get());
}

//------ method WUGetThorJobQueue ---------

IClientWUGetThorJobQueueRequest * CClientWsWorkunits::createWUGetThorJobQueueRequest()
{
	CWUGetThorJobQueueRequest* request = new CWUGetThorJobQueueRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetThorJobQueue");
	return request;
}

IClientWUGetThorJobQueueResponse * CClientWsWorkunits::WUGetThorJobQueue(IClientWUGetThorJobQueueRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetThorJobQueueRequest* esprequest = static_cast<CWUGetThorJobQueueRequest*>(request);
	CWUGetThorJobQueueResponse* espresponse = new CWUGetThorJobQueueResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetThorJobQueue(IClientWUGetThorJobQueueRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetThorJobQueueRequest* esprequest = static_cast<CWUGetThorJobQueueRequest*>(request);
	esprequest->setMethod("WUGetThorJobQueue");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetThorJobQueueResponse *CClientWsWorkunits::WUGetThorJobQueueFn(const char * Cluster_, const char * StartDate_, const char * EndDate_, unsigned int MaxJobQueueItemsToReturn_)
{
	Owned<IClientWUGetThorJobQueueRequest> req =  createWUGetThorJobQueueRequest();
	req->setCluster(Cluster_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setMaxJobQueueItemsToReturn(MaxJobQueueItemsToReturn_);
	return WUGetThorJobQueue(req.get());
}

//------ method WUGetZAPInfo ---------

IClientWUGetZAPInfoRequest * CClientWsWorkunits::createWUGetZAPInfoRequest()
{
	CWUGetZAPInfoRequest* request = new CWUGetZAPInfoRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGetZAPInfo");
	return request;
}

IClientWUGetZAPInfoResponse * CClientWsWorkunits::WUGetZAPInfo(IClientWUGetZAPInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetZAPInfoRequest* esprequest = static_cast<CWUGetZAPInfoRequest*>(request);
	CWUGetZAPInfoResponse* espresponse = new CWUGetZAPInfoResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGetZAPInfo(IClientWUGetZAPInfoRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGetZAPInfoRequest* esprequest = static_cast<CWUGetZAPInfoRequest*>(request);
	esprequest->setMethod("WUGetZAPInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGetZAPInfoResponse *CClientWsWorkunits::WUGetZAPInfoFn(const char * WUID_)
{
	Owned<IClientWUGetZAPInfoRequest> req =  createWUGetZAPInfoRequest();
	req->setWUID(WUID_);
	return WUGetZAPInfo(req.get());
}

//------ method WUGraphInfo ---------

IClientWUGraphInfoRequest * CClientWsWorkunits::createWUGraphInfoRequest()
{
	CWUGraphInfoRequest* request = new CWUGraphInfoRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGraphInfo");
	return request;
}

IClientWUGraphInfoResponse * CClientWsWorkunits::WUGraphInfo(IClientWUGraphInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGraphInfoRequest* esprequest = static_cast<CWUGraphInfoRequest*>(request);
	CWUGraphInfoResponse* espresponse = new CWUGraphInfoResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGraphInfo(IClientWUGraphInfoRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGraphInfoRequest* esprequest = static_cast<CWUGraphInfoRequest*>(request);
	esprequest->setMethod("WUGraphInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGraphInfoResponse *CClientWsWorkunits::WUGraphInfoFn(const char * Wuid_, const char * Name_, const char * GID_, int BatchWU_)
{
	Owned<IClientWUGraphInfoRequest> req =  createWUGraphInfoRequest();
	req->setWuid(Wuid_);
	req->setName(Name_);
	req->setGID(GID_);
	req->setBatchWU(BatchWU_);
	return WUGraphInfo(req.get());
}

//------ method WUGraphTiming ---------

IClientWUGraphTimingRequest * CClientWsWorkunits::createWUGraphTimingRequest()
{
	CWUGraphTimingRequest* request = new CWUGraphTimingRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUGraphTiming");
	return request;
}

IClientWUGraphTimingResponse * CClientWsWorkunits::WUGraphTiming(IClientWUGraphTimingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGraphTimingRequest* esprequest = static_cast<CWUGraphTimingRequest*>(request);
	CWUGraphTimingResponse* espresponse = new CWUGraphTimingResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUGraphTiming(IClientWUGraphTimingRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUGraphTimingRequest* esprequest = static_cast<CWUGraphTimingRequest*>(request);
	esprequest->setMethod("WUGraphTiming");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUGraphTimingResponse *CClientWsWorkunits::WUGraphTimingFn(const char * Wuid_)
{
	Owned<IClientWUGraphTimingRequest> req =  createWUGraphTimingRequest();
	req->setWuid(Wuid_);
	return WUGraphTiming(req.get());
}

//------ method WUInfo ---------

IClientWUInfoRequest * CClientWsWorkunits::createWUInfoRequest()
{
	CWUInfoRequest* request = new CWUInfoRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUInfo");
	return request;
}

IClientWUInfoResponse * CClientWsWorkunits::WUInfo(IClientWUInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUInfoRequest* esprequest = static_cast<CWUInfoRequest*>(request);
	CWUInfoResponse* espresponse = new CWUInfoResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUInfo(IClientWUInfoRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUInfoRequest* esprequest = static_cast<CWUInfoRequest*>(request);
	esprequest->setMethod("WUInfo");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUInfoResponse *CClientWsWorkunits::WUInfoFn(const char * Wuid_, bool TruncateEclTo64k_, const char * Type_, bool IncludeExceptions_, bool IncludeGraphs_, bool IncludeSourceFiles_, bool IncludeResults_, bool IncludeResultsViewNames_, bool IncludeVariables_, bool IncludeTimers_, bool IncludeDebugValues_, bool IncludeApplicationValues_, bool IncludeWorkflows_, bool IncludeXmlSchemas_, bool IncludeResourceURLs_, bool IncludeECL_, bool IncludeHelpers_, bool IncludeAllowedClusters_, bool IncludeTotalClusterTime_, bool SuppressResultSchemas_, const char * ThorSlaveIP_)
{
	Owned<IClientWUInfoRequest> req =  createWUInfoRequest();
	req->setWuid(Wuid_);
	req->setTruncateEclTo64k(TruncateEclTo64k_);
	req->setType(Type_);
	req->setIncludeExceptions(IncludeExceptions_);
	req->setIncludeGraphs(IncludeGraphs_);
	req->setIncludeSourceFiles(IncludeSourceFiles_);
	req->setIncludeResults(IncludeResults_);
	req->setIncludeResultsViewNames(IncludeResultsViewNames_);
	req->setIncludeVariables(IncludeVariables_);
	req->setIncludeTimers(IncludeTimers_);
	req->setIncludeDebugValues(IncludeDebugValues_);
	req->setIncludeApplicationValues(IncludeApplicationValues_);
	req->setIncludeWorkflows(IncludeWorkflows_);
	req->setIncludeXmlSchemas(IncludeXmlSchemas_);
	req->setIncludeResourceURLs(IncludeResourceURLs_);
	req->setIncludeECL(IncludeECL_);
	req->setIncludeHelpers(IncludeHelpers_);
	req->setIncludeAllowedClusters(IncludeAllowedClusters_);
	req->setIncludeTotalClusterTime(IncludeTotalClusterTime_);
	req->setSuppressResultSchemas(SuppressResultSchemas_);
	req->setThorSlaveIP(ThorSlaveIP_);
	return WUInfo(req.get());
}

//------ method WUInfoDetails ---------

IClientWUInfoRequest * CClientWsWorkunits::createWUInfoDetailsRequest()
{
	CWUInfoRequest* request = new CWUInfoRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUInfoDetails");
	return request;
}

IClientWUInfoResponse * CClientWsWorkunits::WUInfoDetails(IClientWUInfoRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUInfoRequest* esprequest = static_cast<CWUInfoRequest*>(request);
	CWUInfoResponse* espresponse = new CWUInfoResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUInfoDetails(IClientWUInfoRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUInfoRequest* esprequest = static_cast<CWUInfoRequest*>(request);
	esprequest->setMethod("WUInfoDetails");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUInfoResponse *CClientWsWorkunits::WUInfoDetailsFn(const char * Wuid_, bool TruncateEclTo64k_, const char * Type_, bool IncludeExceptions_, bool IncludeGraphs_, bool IncludeSourceFiles_, bool IncludeResults_, bool IncludeResultsViewNames_, bool IncludeVariables_, bool IncludeTimers_, bool IncludeDebugValues_, bool IncludeApplicationValues_, bool IncludeWorkflows_, bool IncludeXmlSchemas_, bool IncludeResourceURLs_, bool IncludeECL_, bool IncludeHelpers_, bool IncludeAllowedClusters_, bool IncludeTotalClusterTime_, bool SuppressResultSchemas_, const char * ThorSlaveIP_)
{
	Owned<IClientWUInfoRequest> req =  createWUInfoDetailsRequest();
	req->setWuid(Wuid_);
	req->setTruncateEclTo64k(TruncateEclTo64k_);
	req->setType(Type_);
	req->setIncludeExceptions(IncludeExceptions_);
	req->setIncludeGraphs(IncludeGraphs_);
	req->setIncludeSourceFiles(IncludeSourceFiles_);
	req->setIncludeResults(IncludeResults_);
	req->setIncludeResultsViewNames(IncludeResultsViewNames_);
	req->setIncludeVariables(IncludeVariables_);
	req->setIncludeTimers(IncludeTimers_);
	req->setIncludeDebugValues(IncludeDebugValues_);
	req->setIncludeApplicationValues(IncludeApplicationValues_);
	req->setIncludeWorkflows(IncludeWorkflows_);
	req->setIncludeXmlSchemas(IncludeXmlSchemas_);
	req->setIncludeResourceURLs(IncludeResourceURLs_);
	req->setIncludeECL(IncludeECL_);
	req->setIncludeHelpers(IncludeHelpers_);
	req->setIncludeAllowedClusters(IncludeAllowedClusters_);
	req->setIncludeTotalClusterTime(IncludeTotalClusterTime_);
	req->setSuppressResultSchemas(SuppressResultSchemas_);
	req->setThorSlaveIP(ThorSlaveIP_);
	return WUInfoDetails(req.get());
}

//------ method WUJobList ---------

IClientWUJobListRequest * CClientWsWorkunits::createWUJobListRequest()
{
	CWUJobListRequest* request = new CWUJobListRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUJobList");
	return request;
}

IClientWUJobListResponse * CClientWsWorkunits::WUJobList(IClientWUJobListRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUJobListRequest* esprequest = static_cast<CWUJobListRequest*>(request);
	CWUJobListResponse* espresponse = new CWUJobListResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUJobList(IClientWUJobListRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUJobListRequest* esprequest = static_cast<CWUJobListRequest*>(request);
	esprequest->setMethod("WUJobList");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUJobListResponse *CClientWsWorkunits::WUJobListFn(const char * Cluster_, const char * Process_, const char * StartDate_, const char * EndDate_, bool ShowAll_, int BusinessStartHour_, int BusinessEndHour_)
{
	Owned<IClientWUJobListRequest> req =  createWUJobListRequest();
	req->setCluster(Cluster_);
	req->setProcess(Process_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setShowAll(ShowAll_);
	req->setBusinessStartHour(BusinessStartHour_);
	req->setBusinessEndHour(BusinessEndHour_);
	return WUJobList(req.get());
}

//------ method WULightWeightQuery ---------

IClientWULightWeightQueryRequest * CClientWsWorkunits::createWULightWeightQueryRequest()
{
	CWULightWeightQueryRequest* request = new CWULightWeightQueryRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WULightWeightQuery");
	return request;
}

IClientWULightWeightQueryResponse * CClientWsWorkunits::WULightWeightQuery(IClientWULightWeightQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWULightWeightQueryRequest* esprequest = static_cast<CWULightWeightQueryRequest*>(request);
	CWULightWeightQueryResponse* espresponse = new CWULightWeightQueryResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WULightWeightQuery(IClientWULightWeightQueryRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWULightWeightQueryRequest* esprequest = static_cast<CWULightWeightQueryRequest*>(request);
	esprequest->setMethod("WULightWeightQuery");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWULightWeightQueryResponse *CClientWsWorkunits::WULightWeightQueryFn(const char * Wuid_, const char * Type_, const char * Cluster_, const char * Owner_, const char * JobName_, const char * StartDate_, const char * EndDate_, const char * BeforeWU_, const char * AfterWU_, const char * State_, IArrayOf<IConstApplicationValue> &ApplicationValues_, __int64 PageStartFrom_, unsigned int PageSize_, const char * SortBy_, bool Descending_, __int64 CacheHint_)
{
	Owned<IClientWULightWeightQueryRequest> req =  createWULightWeightQueryRequest();
	req->setWuid(Wuid_);
	req->setType(Type_);
	req->setCluster(Cluster_);
	req->setOwner(Owner_);
	req->setJobName(JobName_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setBeforeWU(BeforeWU_);
	req->setAfterWU(AfterWU_);
	req->setState(State_);
	req->setApplicationValues(ApplicationValues_);
	req->setPageStartFrom(PageStartFrom_);
	req->setPageSize(PageSize_);
	req->setSortBy(SortBy_);
	req->setDescending(Descending_);
	req->setCacheHint(CacheHint_);
	return WULightWeightQuery(req.get());
}

//------ method WUListArchiveFiles ---------

IClientWUListArchiveFilesRequest * CClientWsWorkunits::createWUListArchiveFilesRequest()
{
	CWUListArchiveFilesRequest* request = new CWUListArchiveFilesRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUListArchiveFiles");
	return request;
}

IClientWUListArchiveFilesResponse * CClientWsWorkunits::WUListArchiveFiles(IClientWUListArchiveFilesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListArchiveFilesRequest* esprequest = static_cast<CWUListArchiveFilesRequest*>(request);
	CWUListArchiveFilesResponse* espresponse = new CWUListArchiveFilesResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUListArchiveFiles(IClientWUListArchiveFilesRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListArchiveFilesRequest* esprequest = static_cast<CWUListArchiveFilesRequest*>(request);
	esprequest->setMethod("WUListArchiveFiles");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUListArchiveFilesResponse *CClientWsWorkunits::WUListArchiveFilesFn(const char * WUID_)
{
	Owned<IClientWUListArchiveFilesRequest> req =  createWUListArchiveFilesRequest();
	req->setWUID(WUID_);
	return WUListArchiveFiles(req.get());
}

//------ method WUListLocalFileRequired ---------

IClientWUListLocalFileRequiredRequest * CClientWsWorkunits::createWUListLocalFileRequiredRequest()
{
	CWUListLocalFileRequiredRequest* request = new CWUListLocalFileRequiredRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUListLocalFileRequired");
	return request;
}

IClientWUListLocalFileRequiredResponse * CClientWsWorkunits::WUListLocalFileRequired(IClientWUListLocalFileRequiredRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListLocalFileRequiredRequest* esprequest = static_cast<CWUListLocalFileRequiredRequest*>(request);
	CWUListLocalFileRequiredResponse* espresponse = new CWUListLocalFileRequiredResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUListLocalFileRequired(IClientWUListLocalFileRequiredRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListLocalFileRequiredRequest* esprequest = static_cast<CWUListLocalFileRequiredRequest*>(request);
	esprequest->setMethod("WUListLocalFileRequired");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUListLocalFileRequiredResponse *CClientWsWorkunits::WUListLocalFileRequiredFn(const char * Wuid_)
{
	Owned<IClientWUListLocalFileRequiredRequest> req =  createWUListLocalFileRequiredRequest();
	req->setWuid(Wuid_);
	return WUListLocalFileRequired(req.get());
}

//------ method WUListQueries ---------

IClientWUListQueriesRequest * CClientWsWorkunits::createWUListQueriesRequest()
{
	CWUListQueriesRequest* request = new CWUListQueriesRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUListQueries");
	return request;
}

IClientWUListQueriesResponse * CClientWsWorkunits::WUListQueries(IClientWUListQueriesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListQueriesRequest* esprequest = static_cast<CWUListQueriesRequest*>(request);
	CWUListQueriesResponse* espresponse = new CWUListQueriesResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUListQueries(IClientWUListQueriesRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListQueriesRequest* esprequest = static_cast<CWUListQueriesRequest*>(request);
	esprequest->setMethod("WUListQueries");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUListQueriesResponse *CClientWsWorkunits::WUListQueriesFn(const char * QuerySetName_, const char * ClusterName_, const char * LibraryName_, __int64 MemoryLimitLow_, __int64 MemoryLimitHigh_, unsigned int TimeLimitLow_, unsigned int TimeLimitHigh_, unsigned int WarnTimeLimitLow_, unsigned int WarnTimeLimitHigh_, unsigned int PriorityLow_, unsigned int PriorityHigh_, bool Activated_, bool SuspendedByUser_, const char * WUID_, const char * QueryID_, const char * QueryName_, const char * PublishedBy_, unsigned int PageSize_, unsigned int PageStartFrom_, const char * Sortby_, bool Descending_, __int64 CacheHint_, const char * FileName_, bool CheckAllNodes_)
{
	Owned<IClientWUListQueriesRequest> req =  createWUListQueriesRequest();
	req->setQuerySetName(QuerySetName_);
	req->setClusterName(ClusterName_);
	req->setLibraryName(LibraryName_);
	req->setMemoryLimitLow(MemoryLimitLow_);
	req->setMemoryLimitHigh(MemoryLimitHigh_);
	req->setTimeLimitLow(TimeLimitLow_);
	req->setTimeLimitHigh(TimeLimitHigh_);
	req->setWarnTimeLimitLow(WarnTimeLimitLow_);
	req->setWarnTimeLimitHigh(WarnTimeLimitHigh_);
	req->setPriorityLow(PriorityLow_);
	req->setPriorityHigh(PriorityHigh_);
	req->setActivated(Activated_);
	req->setSuspendedByUser(SuspendedByUser_);
	req->setWUID(WUID_);
	req->setQueryID(QueryID_);
	req->setQueryName(QueryName_);
	req->setPublishedBy(PublishedBy_);
	req->setPageSize(PageSize_);
	req->setPageStartFrom(PageStartFrom_);
	req->setSortby(Sortby_);
	req->setDescending(Descending_);
	req->setCacheHint(CacheHint_);
	req->setFileName(FileName_);
	req->setCheckAllNodes(CheckAllNodes_);
	return WUListQueries(req.get());
}

//------ method WUListQueriesUsingFile ---------

IClientWUListQueriesUsingFileRequest * CClientWsWorkunits::createWUListQueriesUsingFileRequest()
{
	CWUListQueriesUsingFileRequest* request = new CWUListQueriesUsingFileRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUListQueriesUsingFile");
	return request;
}

IClientWUListQueriesUsingFileResponse * CClientWsWorkunits::WUListQueriesUsingFile(IClientWUListQueriesUsingFileRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListQueriesUsingFileRequest* esprequest = static_cast<CWUListQueriesUsingFileRequest*>(request);
	CWUListQueriesUsingFileResponse* espresponse = new CWUListQueriesUsingFileResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUListQueriesUsingFile(IClientWUListQueriesUsingFileRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUListQueriesUsingFileRequest* esprequest = static_cast<CWUListQueriesUsingFileRequest*>(request);
	esprequest->setMethod("WUListQueriesUsingFile");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUListQueriesUsingFileResponse *CClientWsWorkunits::WUListQueriesUsingFileFn(const char * Target_, const char * Process_, const char * FileName_)
{
	Owned<IClientWUListQueriesUsingFileRequest> req =  createWUListQueriesUsingFileRequest();
	req->setTarget(Target_);
	req->setProcess(Process_);
	req->setFileName(FileName_);
	return WUListQueriesUsingFile(req.get());
}

//------ method WUMultiQuerysetDetails ---------

IClientWUMultiQuerySetDetailsRequest * CClientWsWorkunits::createWUMultiQuerysetDetailsRequest()
{
	CWUMultiQuerySetDetailsRequest* request = new CWUMultiQuerySetDetailsRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUMultiQuerysetDetails");
	return request;
}

IClientWUMultiQuerySetDetailsResponse * CClientWsWorkunits::WUMultiQuerysetDetails(IClientWUMultiQuerySetDetailsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUMultiQuerySetDetailsRequest* esprequest = static_cast<CWUMultiQuerySetDetailsRequest*>(request);
	CWUMultiQuerySetDetailsResponse* espresponse = new CWUMultiQuerySetDetailsResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUMultiQuerysetDetails(IClientWUMultiQuerySetDetailsRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUMultiQuerySetDetailsRequest* esprequest = static_cast<CWUMultiQuerySetDetailsRequest*>(request);
	esprequest->setMethod("WUMultiQuerysetDetails");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUMultiQuerySetDetailsResponse *CClientWsWorkunits::WUMultiQuerysetDetailsFn(const char * ClusterName_, const char * QuerySetName_, const char * Filter_, CWUQuerySetFilterType FilterType_, bool CheckAllNodes_)
{
	Owned<IClientWUMultiQuerySetDetailsRequest> req =  createWUMultiQuerysetDetailsRequest();
	req->setClusterName(ClusterName_);
	req->setQuerySetName(QuerySetName_);
	req->setFilter(Filter_);
	req->setFilterType(FilterType_);
	req->setCheckAllNodes(CheckAllNodes_);
	return WUMultiQuerysetDetails(req.get());
}

//------ method WUProcessGraph ---------

IClientWUProcessGraphRequest * CClientWsWorkunits::createWUProcessGraphRequest()
{
	CWUProcessGraphRequest* request = new CWUProcessGraphRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUProcessGraph");
	return request;
}

IClientWUProcessGraphResponse * CClientWsWorkunits::WUProcessGraph(IClientWUProcessGraphRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUProcessGraphRequest* esprequest = static_cast<CWUProcessGraphRequest*>(request);
	CWUProcessGraphResponse* espresponse = new CWUProcessGraphResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUProcessGraph(IClientWUProcessGraphRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUProcessGraphRequest* esprequest = static_cast<CWUProcessGraphRequest*>(request);
	esprequest->setMethod("WUProcessGraph");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUProcessGraphResponse *CClientWsWorkunits::WUProcessGraphFn(const char * Wuid_, const char * Name_)
{
	Owned<IClientWUProcessGraphRequest> req =  createWUProcessGraphRequest();
	req->setWuid(Wuid_);
	req->setName(Name_);
	return WUProcessGraph(req.get());
}

//------ method WUProtect ---------

IClientWUProtectRequest * CClientWsWorkunits::createWUProtectRequest()
{
	CWUProtectRequest* request = new CWUProtectRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUProtect");
	return request;
}

IClientWUProtectResponse * CClientWsWorkunits::WUProtect(IClientWUProtectRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUProtectRequest* esprequest = static_cast<CWUProtectRequest*>(request);
	CWUProtectResponse* espresponse = new CWUProtectResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUProtect(IClientWUProtectRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUProtectRequest* esprequest = static_cast<CWUProtectRequest*>(request);
	esprequest->setMethod("WUProtect");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUProtectResponse *CClientWsWorkunits::WUProtectFn(StringArray &Wuids_, bool Protect_)
{
	Owned<IClientWUProtectRequest> req =  createWUProtectRequest();
	req->setWuids(Wuids_);
	req->setProtect(Protect_);
	return WUProtect(req.get());
}

//------ method WUPublishWorkunit ---------

IClientWUPublishWorkunitRequest * CClientWsWorkunits::createWUPublishWorkunitRequest()
{
	CWUPublishWorkunitRequest* request = new CWUPublishWorkunitRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUPublishWorkunit");
	return request;
}

IClientWUPublishWorkunitResponse * CClientWsWorkunits::WUPublishWorkunit(IClientWUPublishWorkunitRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUPublishWorkunitRequest* esprequest = static_cast<CWUPublishWorkunitRequest*>(request);
	CWUPublishWorkunitResponse* espresponse = new CWUPublishWorkunitResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUPublishWorkunit(IClientWUPublishWorkunitRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUPublishWorkunitRequest* esprequest = static_cast<CWUPublishWorkunitRequest*>(request);
	esprequest->setMethod("WUPublishWorkunit");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUPublishWorkunitResponse *CClientWsWorkunits::WUPublishWorkunitFn(const char * Wuid_, const char * Cluster_, const char * JobName_, int Activate_, bool NotifyCluster_, int Wait_, bool NoReload_, bool UpdateWorkUnitName_, const char * memoryLimit_, unsigned int TimeLimit_, unsigned int WarnTimeLimit_, const char * Priority_, const char * RemoteDali_, const char * Comment_, bool DontCopyFiles_, const char * SourceProcess_, bool AllowForeignFiles_, bool UpdateDfs_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_, bool IncludeFileErrors_)
{
	Owned<IClientWUPublishWorkunitRequest> req =  createWUPublishWorkunitRequest();
	req->setWuid(Wuid_);
	req->setCluster(Cluster_);
	req->setJobName(JobName_);
	req->setActivate(Activate_);
	req->setNotifyCluster(NotifyCluster_);
	req->setWait(Wait_);
	req->setNoReload(NoReload_);
	req->setUpdateWorkUnitName(UpdateWorkUnitName_);
	req->setMemoryLimit(memoryLimit_);
	req->setTimeLimit(TimeLimit_);
	req->setWarnTimeLimit(WarnTimeLimit_);
	req->setPriority(Priority_);
	req->setRemoteDali(RemoteDali_);
	req->setComment(Comment_);
	req->setDontCopyFiles(DontCopyFiles_);
	req->setSourceProcess(SourceProcess_);
	req->setAllowForeignFiles(AllowForeignFiles_);
	req->setUpdateDfs(UpdateDfs_);
	req->setUpdateSuperFiles(UpdateSuperFiles_);
	req->setUpdateCloneFrom(UpdateCloneFrom_);
	req->setAppendCluster(AppendCluster_);
	req->setIncludeFileErrors(IncludeFileErrors_);
	return WUPublishWorkunit(req.get());
}

//------ method WUPushEvent ---------

IClientWUPushEventRequest * CClientWsWorkunits::createWUPushEventRequest()
{
	CWUPushEventRequest* request = new CWUPushEventRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUPushEvent");
	return request;
}

IClientWUPushEventResponse * CClientWsWorkunits::WUPushEvent(IClientWUPushEventRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUPushEventRequest* esprequest = static_cast<CWUPushEventRequest*>(request);
	CWUPushEventResponse* espresponse = new CWUPushEventResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUPushEvent(IClientWUPushEventRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUPushEventRequest* esprequest = static_cast<CWUPushEventRequest*>(request);
	esprequest->setMethod("WUPushEvent");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUPushEventResponse *CClientWsWorkunits::WUPushEventFn(const char * EventName_, const char * EventText_)
{
	Owned<IClientWUPushEventRequest> req =  createWUPushEventRequest();
	req->setEventName(EventName_);
	req->setEventText(EventText_);
	return WUPushEvent(req.get());
}

//------ method WUQuery ---------

IClientWUQueryRequest * CClientWsWorkunits::createWUQueryRequest()
{
	CWUQueryRequest* request = new CWUQueryRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuery");
	return request;
}

IClientWUQueryResponse * CClientWsWorkunits::WUQuery(IClientWUQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryRequest* esprequest = static_cast<CWUQueryRequest*>(request);
	CWUQueryResponse* espresponse = new CWUQueryResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuery(IClientWUQueryRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryRequest* esprequest = static_cast<CWUQueryRequest*>(request);
	esprequest->setMethod("WUQuery");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQueryResponse *CClientWsWorkunits::WUQueryFn(const char * Wuid_, const char * Type_, const char * Cluster_, const char * RoxieCluster_, const char * Owner_, const char * State_, const char * StartDate_, const char * EndDate_, const char * ECL_, const char * Jobname_, const char * LogicalFile_, const char * LogicalFileSearchType_, const char * ApplicationName_, const char * ApplicationKey_, const char * ApplicationData_, IArrayOf<IConstApplicationValue> &ApplicationValues_, const char * BeforeWU_, const char * AfterWU_, const char * After_, const char * Before_, int Count_, __int64 PageSize_, __int64 PageStartFrom_, __int64 PageEndAt_, int LastNDays_, const char * Sortby_, bool Descending_, __int64 CacheHint_)
{
	Owned<IClientWUQueryRequest> req =  createWUQueryRequest();
	req->setWuid(Wuid_);
	req->setType(Type_);
	req->setCluster(Cluster_);
	req->setRoxieCluster(RoxieCluster_);
	req->setOwner(Owner_);
	req->setState(State_);
	req->setStartDate(StartDate_);
	req->setEndDate(EndDate_);
	req->setECL(ECL_);
	req->setJobname(Jobname_);
	req->setLogicalFile(LogicalFile_);
	req->setLogicalFileSearchType(LogicalFileSearchType_);
	req->setApplicationName(ApplicationName_);
	req->setApplicationKey(ApplicationKey_);
	req->setApplicationData(ApplicationData_);
	req->setApplicationValues(ApplicationValues_);
	req->setBeforeWU(BeforeWU_);
	req->setAfterWU(AfterWU_);
	req->setAfter(After_);
	req->setBefore(Before_);
	req->setCount(Count_);
	req->setPageSize(PageSize_);
	req->setPageStartFrom(PageStartFrom_);
	req->setPageEndAt(PageEndAt_);
	req->setLastNDays(LastNDays_);
	req->setSortby(Sortby_);
	req->setDescending(Descending_);
	req->setCacheHint(CacheHint_);
	return WUQuery(req.get());
}

//------ method WUQueryConfig ---------

IClientWUQueryConfigRequest * CClientWsWorkunits::createWUQueryConfigRequest()
{
	CWUQueryConfigRequest* request = new CWUQueryConfigRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQueryConfig");
	return request;
}

IClientWUQueryConfigResponse * CClientWsWorkunits::WUQueryConfig(IClientWUQueryConfigRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryConfigRequest* esprequest = static_cast<CWUQueryConfigRequest*>(request);
	CWUQueryConfigResponse* espresponse = new CWUQueryConfigResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQueryConfig(IClientWUQueryConfigRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryConfigRequest* esprequest = static_cast<CWUQueryConfigRequest*>(request);
	esprequest->setMethod("WUQueryConfig");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQueryConfigResponse *CClientWsWorkunits::WUQueryConfigFn(const char * Target_, const char * QueryId_, int Wait_, bool NoReload_, const char * memoryLimit_, unsigned int TimeLimit_, unsigned int WarnTimeLimit_, const char * Priority_, const char * Comment_)
{
	Owned<IClientWUQueryConfigRequest> req =  createWUQueryConfigRequest();
	req->setTarget(Target_);
	req->setQueryId(QueryId_);
	req->setWait(Wait_);
	req->setNoReload(NoReload_);
	req->setMemoryLimit(memoryLimit_);
	req->setTimeLimit(TimeLimit_);
	req->setWarnTimeLimit(WarnTimeLimit_);
	req->setPriority(Priority_);
	req->setComment(Comment_);
	return WUQueryConfig(req.get());
}

//------ method WUQueryDetails ---------

IClientWUQueryDetailsRequest * CClientWsWorkunits::createWUQueryDetailsRequest()
{
	CWUQueryDetailsRequest* request = new CWUQueryDetailsRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQueryDetails");
	return request;
}

IClientWUQueryDetailsResponse * CClientWsWorkunits::WUQueryDetails(IClientWUQueryDetailsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryDetailsRequest* esprequest = static_cast<CWUQueryDetailsRequest*>(request);
	CWUQueryDetailsResponse* espresponse = new CWUQueryDetailsResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQueryDetails(IClientWUQueryDetailsRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryDetailsRequest* esprequest = static_cast<CWUQueryDetailsRequest*>(request);
	esprequest->setMethod("WUQueryDetails");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQueryDetailsResponse *CClientWsWorkunits::WUQueryDetailsFn(const char * QueryId_, const char * QuerySet_, bool IncludeStateOnClusters_, bool IncludeSuperFiles_, bool IncludeWsEclAddresses_, bool CheckAllNodes_)
{
	Owned<IClientWUQueryDetailsRequest> req =  createWUQueryDetailsRequest();
	req->setQueryId(QueryId_);
	req->setQuerySet(QuerySet_);
	req->setIncludeStateOnClusters(IncludeStateOnClusters_);
	req->setIncludeSuperFiles(IncludeSuperFiles_);
	req->setIncludeWsEclAddresses(IncludeWsEclAddresses_);
	req->setCheckAllNodes(CheckAllNodes_);
	return WUQueryDetails(req.get());
}

//------ method WUQueryFiles ---------

IClientWUQueryFilesRequest * CClientWsWorkunits::createWUQueryFilesRequest()
{
	CWUQueryFilesRequest* request = new CWUQueryFilesRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQueryFiles");
	return request;
}

IClientWUQueryFilesResponse * CClientWsWorkunits::WUQueryFiles(IClientWUQueryFilesRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryFilesRequest* esprequest = static_cast<CWUQueryFilesRequest*>(request);
	CWUQueryFilesResponse* espresponse = new CWUQueryFilesResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQueryFiles(IClientWUQueryFilesRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryFilesRequest* esprequest = static_cast<CWUQueryFilesRequest*>(request);
	esprequest->setMethod("WUQueryFiles");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQueryFilesResponse *CClientWsWorkunits::WUQueryFilesFn(const char * Target_, const char * QueryId_)
{
	Owned<IClientWUQueryFilesRequest> req =  createWUQueryFilesRequest();
	req->setTarget(Target_);
	req->setQueryId(QueryId_);
	return WUQueryFiles(req.get());
}

//------ method WUQueryGetGraph ---------

IClientWUQueryGetGraphRequest * CClientWsWorkunits::createWUQueryGetGraphRequest()
{
	CWUQueryGetGraphRequest* request = new CWUQueryGetGraphRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQueryGetGraph");
	return request;
}

IClientWUQueryGetGraphResponse * CClientWsWorkunits::WUQueryGetGraph(IClientWUQueryGetGraphRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryGetGraphRequest* esprequest = static_cast<CWUQueryGetGraphRequest*>(request);
	CWUQueryGetGraphResponse* espresponse = new CWUQueryGetGraphResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQueryGetGraph(IClientWUQueryGetGraphRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryGetGraphRequest* esprequest = static_cast<CWUQueryGetGraphRequest*>(request);
	esprequest->setMethod("WUQueryGetGraph");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQueryGetGraphResponse *CClientWsWorkunits::WUQueryGetGraphFn(const char * Target_, const char * QueryId_, const char * GraphName_, const char * SubGraphId_)
{
	Owned<IClientWUQueryGetGraphRequest> req =  createWUQueryGetGraphRequest();
	req->setTarget(Target_);
	req->setQueryId(QueryId_);
	req->setGraphName(GraphName_);
	req->setSubGraphId(SubGraphId_);
	return WUQueryGetGraph(req.get());
}

//------ method WUQueryGetSummaryStats ---------

IClientWUQueryGetSummaryStatsRequest * CClientWsWorkunits::createWUQueryGetSummaryStatsRequest()
{
	CWUQueryGetSummaryStatsRequest* request = new CWUQueryGetSummaryStatsRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQueryGetSummaryStats");
	return request;
}

IClientWUQueryGetSummaryStatsResponse * CClientWsWorkunits::WUQueryGetSummaryStats(IClientWUQueryGetSummaryStatsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryGetSummaryStatsRequest* esprequest = static_cast<CWUQueryGetSummaryStatsRequest*>(request);
	CWUQueryGetSummaryStatsResponse* espresponse = new CWUQueryGetSummaryStatsResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQueryGetSummaryStats(IClientWUQueryGetSummaryStatsRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQueryGetSummaryStatsRequest* esprequest = static_cast<CWUQueryGetSummaryStatsRequest*>(request);
	esprequest->setMethod("WUQueryGetSummaryStats");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQueryGetSummaryStatsResponse *CClientWsWorkunits::WUQueryGetSummaryStatsFn(const char * Target_, const char * QueryId_, const char * FromTime_, const char * ToTime_)
{
	Owned<IClientWUQueryGetSummaryStatsRequest> req =  createWUQueryGetSummaryStatsRequest();
	req->setTarget(Target_);
	req->setQueryId(QueryId_);
	req->setFromTime(FromTime_);
	req->setToTime(ToTime_);
	return WUQueryGetSummaryStats(req.get());
}

//------ method WUQuerysetAliasAction ---------

IClientWUQuerySetAliasActionRequest * CClientWsWorkunits::createWUQuerysetAliasActionRequest()
{
	CWUQuerySetAliasActionRequest* request = new CWUQuerySetAliasActionRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuerysetAliasAction");
	return request;
}

IClientWUQuerySetAliasActionResponse * CClientWsWorkunits::WUQuerysetAliasAction(IClientWUQuerySetAliasActionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetAliasActionRequest* esprequest = static_cast<CWUQuerySetAliasActionRequest*>(request);
	CWUQuerySetAliasActionResponse* espresponse = new CWUQuerySetAliasActionResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuerysetAliasAction(IClientWUQuerySetAliasActionRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetAliasActionRequest* esprequest = static_cast<CWUQuerySetAliasActionRequest*>(request);
	esprequest->setMethod("WUQuerysetAliasAction");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQuerySetAliasActionResponse *CClientWsWorkunits::WUQuerysetAliasActionFn(CQuerySetAliasActionTypes Action_, const char * QuerySetName_, IArrayOf<IConstQuerySetAliasActionItem> &Aliases_)
{
	Owned<IClientWUQuerySetAliasActionRequest> req =  createWUQuerysetAliasActionRequest();
	req->setAction(Action_);
	req->setQuerySetName(QuerySetName_);
	req->setAliases(Aliases_);
	return WUQuerysetAliasAction(req.get());
}

//------ method WUQuerysetCopyQuery ---------

IClientWUQuerySetCopyQueryRequest * CClientWsWorkunits::createWUQuerysetCopyQueryRequest()
{
	CWUQuerySetCopyQueryRequest* request = new CWUQuerySetCopyQueryRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuerysetCopyQuery");
	return request;
}

IClientWUQuerySetCopyQueryResponse * CClientWsWorkunits::WUQuerysetCopyQuery(IClientWUQuerySetCopyQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetCopyQueryRequest* esprequest = static_cast<CWUQuerySetCopyQueryRequest*>(request);
	CWUQuerySetCopyQueryResponse* espresponse = new CWUQuerySetCopyQueryResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuerysetCopyQuery(IClientWUQuerySetCopyQueryRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetCopyQueryRequest* esprequest = static_cast<CWUQuerySetCopyQueryRequest*>(request);
	esprequest->setMethod("WUQuerysetCopyQuery");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQuerySetCopyQueryResponse *CClientWsWorkunits::WUQuerysetCopyQueryFn(const char * Source_, const char * Target_, const char * Cluster_, const char * DaliServer_, int Activate_, bool Overwrite_, bool DontCopyFiles_, int Wait_, bool NoReload_, const char * memoryLimit_, unsigned int TimeLimit_, unsigned int WarnTimeLimit_, const char * priority_, const char * Comment_, const char * SourceProcess_, const char * DestName_, bool AllowForeignFiles_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_, bool IncludeFileErrors_)
{
	Owned<IClientWUQuerySetCopyQueryRequest> req =  createWUQuerysetCopyQueryRequest();
	req->setSource(Source_);
	req->setTarget(Target_);
	req->setCluster(Cluster_);
	req->setDaliServer(DaliServer_);
	req->setActivate(Activate_);
	req->setOverwrite(Overwrite_);
	req->setDontCopyFiles(DontCopyFiles_);
	req->setWait(Wait_);
	req->setNoReload(NoReload_);
	req->setMemoryLimit(memoryLimit_);
	req->setTimeLimit(TimeLimit_);
	req->setWarnTimeLimit(WarnTimeLimit_);
	req->setPriority(priority_);
	req->setComment(Comment_);
	req->setSourceProcess(SourceProcess_);
	req->setDestName(DestName_);
	req->setAllowForeignFiles(AllowForeignFiles_);
	req->setUpdateSuperFiles(UpdateSuperFiles_);
	req->setUpdateCloneFrom(UpdateCloneFrom_);
	req->setAppendCluster(AppendCluster_);
	req->setIncludeFileErrors(IncludeFileErrors_);
	return WUQuerysetCopyQuery(req.get());
}

//------ method WUQuerysetDetails ---------

IClientWUQuerySetDetailsRequest * CClientWsWorkunits::createWUQuerysetDetailsRequest()
{
	CWUQuerySetDetailsRequest* request = new CWUQuerySetDetailsRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuerysetDetails");
	return request;
}

IClientWUQuerySetDetailsResponse * CClientWsWorkunits::WUQuerysetDetails(IClientWUQuerySetDetailsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetDetailsRequest* esprequest = static_cast<CWUQuerySetDetailsRequest*>(request);
	CWUQuerySetDetailsResponse* espresponse = new CWUQuerySetDetailsResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuerysetDetails(IClientWUQuerySetDetailsRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetDetailsRequest* esprequest = static_cast<CWUQuerySetDetailsRequest*>(request);
	esprequest->setMethod("WUQuerysetDetails");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQuerySetDetailsResponse *CClientWsWorkunits::WUQuerysetDetailsFn(const char * QuerySetName_, const char * Filter_, const char * ClusterName_, CWUQuerySetFilterType FilterType_, bool CheckAllNodes_)
{
	Owned<IClientWUQuerySetDetailsRequest> req =  createWUQuerysetDetailsRequest();
	req->setQuerySetName(QuerySetName_);
	req->setFilter(Filter_);
	req->setClusterName(ClusterName_);
	req->setFilterType(FilterType_);
	req->setCheckAllNodes(CheckAllNodes_);
	return WUQuerysetDetails(req.get());
}

//------ method WUQuerysetExport ---------

IClientWUQuerysetExportRequest * CClientWsWorkunits::createWUQuerysetExportRequest()
{
	CWUQuerysetExportRequest* request = new CWUQuerysetExportRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuerysetExport");
	return request;
}

IClientWUQuerysetExportResponse * CClientWsWorkunits::WUQuerysetExport(IClientWUQuerysetExportRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerysetExportRequest* esprequest = static_cast<CWUQuerysetExportRequest*>(request);
	CWUQuerysetExportResponse* espresponse = new CWUQuerysetExportResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuerysetExport(IClientWUQuerysetExportRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerysetExportRequest* esprequest = static_cast<CWUQuerysetExportRequest*>(request);
	esprequest->setMethod("WUQuerysetExport");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQuerysetExportResponse *CClientWsWorkunits::WUQuerysetExportFn(const char * Target_, bool Compress_, bool ActiveOnly_, bool Protect_)
{
	Owned<IClientWUQuerysetExportRequest> req =  createWUQuerysetExportRequest();
	req->setTarget(Target_);
	req->setCompress(Compress_);
	req->setActiveOnly(ActiveOnly_);
	req->setProtect(Protect_);
	return WUQuerysetExport(req.get());
}

//------ method WUQuerysetImport ---------

IClientWUQuerysetImportRequest * CClientWsWorkunits::createWUQuerysetImportRequest()
{
	CWUQuerysetImportRequest* request = new CWUQuerysetImportRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuerysetImport");
	return request;
}

IClientWUQuerysetImportResponse * CClientWsWorkunits::WUQuerysetImport(IClientWUQuerysetImportRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerysetImportRequest* esprequest = static_cast<CWUQuerysetImportRequest*>(request);
	CWUQuerysetImportResponse* espresponse = new CWUQuerysetImportResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuerysetImport(IClientWUQuerysetImportRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerysetImportRequest* esprequest = static_cast<CWUQuerysetImportRequest*>(request);
	esprequest->setMethod("WUQuerysetImport");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQuerysetImportResponse *CClientWsWorkunits::WUQuerysetImportFn(const char * Target_, const char * QueryMask_, bool Replace_, bool ActiveOnly_, CQuerysetImportActivation Activation_, bool Compressed_, const MemoryBuffer & Data_, bool AllowForeignFiles_, const char * DfsServer_, bool CopyFiles_, bool OverwriteDfs_, const char * SourceProcess_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_, bool IncludeFileErrors_)
{
	Owned<IClientWUQuerysetImportRequest> req =  createWUQuerysetImportRequest();
	req->setTarget(Target_);
	req->setQueryMask(QueryMask_);
	req->setReplace(Replace_);
	req->setActiveOnly(ActiveOnly_);
	req->setActivation(Activation_);
	req->setCompressed(Compressed_);
	req->setData(Data_);
	req->setAllowForeignFiles(AllowForeignFiles_);
	req->setDfsServer(DfsServer_);
	req->setCopyFiles(CopyFiles_);
	req->setOverwriteDfs(OverwriteDfs_);
	req->setSourceProcess(SourceProcess_);
	req->setUpdateSuperFiles(UpdateSuperFiles_);
	req->setUpdateCloneFrom(UpdateCloneFrom_);
	req->setAppendCluster(AppendCluster_);
	req->setIncludeFileErrors(IncludeFileErrors_);
	return WUQuerysetImport(req.get());
}

//------ method WUQuerysetQueryAction ---------

IClientWUQuerySetQueryActionRequest * CClientWsWorkunits::createWUQuerysetQueryActionRequest()
{
	CWUQuerySetQueryActionRequest* request = new CWUQuerySetQueryActionRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuerysetQueryAction");
	return request;
}

IClientWUQuerySetQueryActionResponse * CClientWsWorkunits::WUQuerysetQueryAction(IClientWUQuerySetQueryActionRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetQueryActionRequest* esprequest = static_cast<CWUQuerySetQueryActionRequest*>(request);
	CWUQuerySetQueryActionResponse* espresponse = new CWUQuerySetQueryActionResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuerysetQueryAction(IClientWUQuerySetQueryActionRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerySetQueryActionRequest* esprequest = static_cast<CWUQuerySetQueryActionRequest*>(request);
	esprequest->setMethod("WUQuerysetQueryAction");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQuerySetQueryActionResponse *CClientWsWorkunits::WUQuerysetQueryActionFn(CQuerySetQueryActionTypes Action_, const char * QuerySetName_, IArrayOf<IConstQuerySetQueryActionItem> &Queries_)
{
	Owned<IClientWUQuerySetQueryActionRequest> req =  createWUQuerysetQueryActionRequest();
	req->setAction(Action_);
	req->setQuerySetName(QuerySetName_);
	req->setQueries(Queries_);
	return WUQuerysetQueryAction(req.get());
}

//------ method WUQuerysets ---------

IClientWUQuerysetsRequest * CClientWsWorkunits::createWUQuerysetsRequest()
{
	CWUQuerysetsRequest* request = new CWUQuerysetsRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUQuerysets");
	return request;
}

IClientWUQuerysetsResponse * CClientWsWorkunits::WUQuerysets(IClientWUQuerysetsRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerysetsRequest* esprequest = static_cast<CWUQuerysetsRequest*>(request);
	CWUQuerysetsResponse* espresponse = new CWUQuerysetsResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUQuerysets(IClientWUQuerysetsRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUQuerysetsRequest* esprequest = static_cast<CWUQuerysetsRequest*>(request);
	esprequest->setMethod("WUQuerysets");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUQuerysetsResponse *CClientWsWorkunits::WUQuerysetsFn(bool test_)
{
	Owned<IClientWUQuerysetsRequest> req =  createWUQuerysetsRequest();
	req->setTest(test_);
	return WUQuerysets(req.get());
}

//------ method WURecreateQuery ---------

IClientWURecreateQueryRequest * CClientWsWorkunits::createWURecreateQueryRequest()
{
	CWURecreateQueryRequest* request = new CWURecreateQueryRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WURecreateQuery");
	return request;
}

IClientWURecreateQueryResponse * CClientWsWorkunits::WURecreateQuery(IClientWURecreateQueryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWURecreateQueryRequest* esprequest = static_cast<CWURecreateQueryRequest*>(request);
	CWURecreateQueryResponse* espresponse = new CWURecreateQueryResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WURecreateQuery(IClientWURecreateQueryRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWURecreateQueryRequest* esprequest = static_cast<CWURecreateQueryRequest*>(request);
	esprequest->setMethod("WURecreateQuery");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWURecreateQueryResponse *CClientWsWorkunits::WURecreateQueryFn(const char * Target_, const char * QueryId_, IArrayOf<IConstNamedValue> &DebugValues_, const char * DestTarget_, bool Republish_, CWUQueryActivationMode Activate_, bool NoReload_, const char * MemoryLimit_, unsigned int TimeLimit_, unsigned int WarnTimeLimit_, const char * Priority_, const char * Comment_, const char * RemoteDali_, bool DontCopyFiles_, const char * SourceProcess_, bool AllowForeignFiles_, bool UpdateDfs_, bool UpdateSuperFiles_, bool UpdateCloneFrom_, bool AppendCluster_, bool IncludeFileErrors_, int Wait_)
{
	Owned<IClientWURecreateQueryRequest> req =  createWURecreateQueryRequest();
	req->setTarget(Target_);
	req->setQueryId(QueryId_);
	req->setDebugValues(DebugValues_);
	req->setDestTarget(DestTarget_);
	req->setRepublish(Republish_);
	req->setActivate(Activate_);
	req->setNoReload(NoReload_);
	req->setMemoryLimit(MemoryLimit_);
	req->setTimeLimit(TimeLimit_);
	req->setWarnTimeLimit(WarnTimeLimit_);
	req->setPriority(Priority_);
	req->setComment(Comment_);
	req->setRemoteDali(RemoteDali_);
	req->setDontCopyFiles(DontCopyFiles_);
	req->setSourceProcess(SourceProcess_);
	req->setAllowForeignFiles(AllowForeignFiles_);
	req->setUpdateDfs(UpdateDfs_);
	req->setUpdateSuperFiles(UpdateSuperFiles_);
	req->setUpdateCloneFrom(UpdateCloneFrom_);
	req->setAppendCluster(AppendCluster_);
	req->setIncludeFileErrors(IncludeFileErrors_);
	req->setWait(Wait_);
	return WURecreateQuery(req.get());
}

//------ method WUResubmit ---------

IClientWUResubmitRequest * CClientWsWorkunits::createWUResubmitRequest()
{
	CWUResubmitRequest* request = new CWUResubmitRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUResubmit");
	return request;
}

IClientWUResubmitResponse * CClientWsWorkunits::WUResubmit(IClientWUResubmitRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResubmitRequest* esprequest = static_cast<CWUResubmitRequest*>(request);
	CWUResubmitResponse* espresponse = new CWUResubmitResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUResubmit(IClientWUResubmitRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResubmitRequest* esprequest = static_cast<CWUResubmitRequest*>(request);
	esprequest->setMethod("WUResubmit");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUResubmitResponse *CClientWsWorkunits::WUResubmitFn(StringArray &Wuids_, bool Recompile_, int BlockTillFinishTimer_, bool ResetWorkflow_, bool CloneWorkunit_)
{
	Owned<IClientWUResubmitRequest> req =  createWUResubmitRequest();
	req->setWuids(Wuids_);
	req->setRecompile(Recompile_);
	req->setBlockTillFinishTimer(BlockTillFinishTimer_);
	req->setResetWorkflow(ResetWorkflow_);
	req->setCloneWorkunit(CloneWorkunit_);
	return WUResubmit(req.get());
}

//------ method WUResult ---------

IClientWUResultRequest * CClientWsWorkunits::createWUResultRequest()
{
	CWUResultRequest* request = new CWUResultRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUResult");
	return request;
}

IClientWUResultResponse * CClientWsWorkunits::WUResult(IClientWUResultRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultRequest* esprequest = static_cast<CWUResultRequest*>(request);
	CWUResultResponse* espresponse = new CWUResultResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUResult(IClientWUResultRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultRequest* esprequest = static_cast<CWUResultRequest*>(request);
	esprequest->setMethod("WUResult");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUResultResponse *CClientWsWorkunits::WUResultFn(const char * Wuid_, int Sequence_, const char * ResultName_, const char * LogicalName_, const char * Cluster_, bool SuppressXmlSchema_, bool BypassCachedResult_, IArrayOf<IConstNamedValue> &FilterBy_, __int64 Start_, int Count_)
{
	Owned<IClientWUResultRequest> req =  createWUResultRequest();
	req->setWuid(Wuid_);
	req->setSequence(Sequence_);
	req->setResultName(ResultName_);
	req->setLogicalName(LogicalName_);
	req->setCluster(Cluster_);
	req->setSuppressXmlSchema(SuppressXmlSchema_);
	req->setBypassCachedResult(BypassCachedResult_);
	req->setFilterBy(FilterBy_);
	req->setStart(Start_);
	req->setCount(Count_);
	return WUResult(req.get());
}

//------ method WUResultBin ---------

IClientWUResultBinRequest * CClientWsWorkunits::createWUResultBinRequest()
{
	CWUResultBinRequest* request = new CWUResultBinRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUResultBin");
	return request;
}

IClientWUResultBinResponse * CClientWsWorkunits::WUResultBin(IClientWUResultBinRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultBinRequest* esprequest = static_cast<CWUResultBinRequest*>(request);
	CWUResultBinResponse* espresponse = new CWUResultBinResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUResultBin(IClientWUResultBinRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultBinRequest* esprequest = static_cast<CWUResultBinRequest*>(request);
	esprequest->setMethod("WUResultBin");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUResultBinResponse *CClientWsWorkunits::WUResultBinFn(const char * LogicalName_, const char * Wuid_, const char * ResultName_, int Sequence_, const char * Format_, const char * Cluster_, IArrayOf<IConstNamedValue> &FilterBy_, __int64 Start_, int Count_)
{
	Owned<IClientWUResultBinRequest> req =  createWUResultBinRequest();
	req->setLogicalName(LogicalName_);
	req->setWuid(Wuid_);
	req->setResultName(ResultName_);
	req->setSequence(Sequence_);
	req->setFormat(Format_);
	req->setCluster(Cluster_);
	req->setFilterBy(FilterBy_);
	req->setStart(Start_);
	req->setCount(Count_);
	return WUResultBin(req.get());
}

//------ method WUResultSummary ---------

IClientWUResultSummaryRequest * CClientWsWorkunits::createWUResultSummaryRequest()
{
	CWUResultSummaryRequest* request = new CWUResultSummaryRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUResultSummary");
	return request;
}

IClientWUResultSummaryResponse * CClientWsWorkunits::WUResultSummary(IClientWUResultSummaryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultSummaryRequest* esprequest = static_cast<CWUResultSummaryRequest*>(request);
	CWUResultSummaryResponse* espresponse = new CWUResultSummaryResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUResultSummary(IClientWUResultSummaryRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultSummaryRequest* esprequest = static_cast<CWUResultSummaryRequest*>(request);
	esprequest->setMethod("WUResultSummary");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUResultSummaryResponse *CClientWsWorkunits::WUResultSummaryFn(const char * Wuid_, int Sequence_)
{
	Owned<IClientWUResultSummaryRequest> req =  createWUResultSummaryRequest();
	req->setWuid(Wuid_);
	req->setSequence(Sequence_);
	return WUResultSummary(req.get());
}

//------ method WUResultView ---------

IClientWUResultViewRequest * CClientWsWorkunits::createWUResultViewRequest()
{
	CWUResultViewRequest* request = new CWUResultViewRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUResultView");
	return request;
}

IClientWUResultViewResponse * CClientWsWorkunits::WUResultView(IClientWUResultViewRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultViewRequest* esprequest = static_cast<CWUResultViewRequest*>(request);
	CWUResultViewResponse* espresponse = new CWUResultViewResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUResultView(IClientWUResultViewRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUResultViewRequest* esprequest = static_cast<CWUResultViewRequest*>(request);
	esprequest->setMethod("WUResultView");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUResultViewResponse *CClientWsWorkunits::WUResultViewFn(const char * Wuid_, const char * ViewName_, int Sequence_, const char * ResultName_)
{
	Owned<IClientWUResultViewRequest> req =  createWUResultViewRequest();
	req->setWuid(Wuid_);
	req->setViewName(ViewName_);
	req->setSequence(Sequence_);
	req->setResultName(ResultName_);
	return WUResultView(req.get());
}

//------ method WURun ---------

IClientWURunRequest * CClientWsWorkunits::createWURunRequest()
{
	CWURunRequest* request = new CWURunRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WURun");
	return request;
}

IClientWURunResponse * CClientWsWorkunits::WURun(IClientWURunRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWURunRequest* esprequest = static_cast<CWURunRequest*>(request);
	CWURunResponse* espresponse = new CWURunResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WURun(IClientWURunRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWURunRequest* esprequest = static_cast<CWURunRequest*>(request);
	esprequest->setMethod("WURun");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWURunResponse *CClientWsWorkunits::WURunFn(const char * QuerySet_, const char * Query_, const char * Wuid_, bool CloneWorkunit_, const char * Cluster_, int Wait_, const char * Input_, bool NoRootTag_, IArrayOf<IConstNamedValue> &DebugValues_, IArrayOf<IConstNamedValue> &Variables_, IArrayOf<IConstApplicationValue> &ApplicationValues_, CWUExceptionSeverity ExceptionSeverity_)
{
	Owned<IClientWURunRequest> req =  createWURunRequest();
	req->setQuerySet(QuerySet_);
	req->setQuery(Query_);
	req->setWuid(Wuid_);
	req->setCloneWorkunit(CloneWorkunit_);
	req->setCluster(Cluster_);
	req->setWait(Wait_);
	req->setInput(Input_);
	req->setNoRootTag(NoRootTag_);
	req->setDebugValues(DebugValues_);
	req->setVariables(Variables_);
	req->setApplicationValues(ApplicationValues_);
	req->setExceptionSeverity(ExceptionSeverity_);
	return WURun(req.get());
}

//------ method WUSchedule ---------

IClientWUScheduleRequest * CClientWsWorkunits::createWUScheduleRequest()
{
	CWUScheduleRequest* request = new CWUScheduleRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUSchedule");
	return request;
}

IClientWUScheduleResponse * CClientWsWorkunits::WUSchedule(IClientWUScheduleRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUScheduleRequest* esprequest = static_cast<CWUScheduleRequest*>(request);
	CWUScheduleResponse* espresponse = new CWUScheduleResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUSchedule(IClientWUScheduleRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUScheduleRequest* esprequest = static_cast<CWUScheduleRequest*>(request);
	esprequest->setMethod("WUSchedule");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUScheduleResponse *CClientWsWorkunits::WUScheduleFn(const char * Wuid_, const char * Cluster_, const char * Queue_, const char * Snapshot_, const char * When_, int MaxRunTime_)
{
	Owned<IClientWUScheduleRequest> req =  createWUScheduleRequest();
	req->setWuid(Wuid_);
	req->setCluster(Cluster_);
	req->setQueue(Queue_);
	req->setSnapshot(Snapshot_);
	req->setWhen(When_);
	req->setMaxRunTime(MaxRunTime_);
	return WUSchedule(req.get());
}

//------ method WUShowScheduled ---------

IClientWUShowScheduledRequest * CClientWsWorkunits::createWUShowScheduledRequest()
{
	CWUShowScheduledRequest* request = new CWUShowScheduledRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUShowScheduled");
	return request;
}

IClientWUShowScheduledResponse * CClientWsWorkunits::WUShowScheduled(IClientWUShowScheduledRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUShowScheduledRequest* esprequest = static_cast<CWUShowScheduledRequest*>(request);
	CWUShowScheduledResponse* espresponse = new CWUShowScheduledResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUShowScheduled(IClientWUShowScheduledRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUShowScheduledRequest* esprequest = static_cast<CWUShowScheduledRequest*>(request);
	esprequest->setMethod("WUShowScheduled");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUShowScheduledResponse *CClientWsWorkunits::WUShowScheduledFn(const char * Cluster_, const char * EventName_, const char * PushEventName_, const char * PushEventText_, const char * State_, const char * JobName_)
{
	Owned<IClientWUShowScheduledRequest> req =  createWUShowScheduledRequest();
	req->setCluster(Cluster_);
	req->setEventName(EventName_);
	req->setPushEventName(PushEventName_);
	req->setPushEventText(PushEventText_);
	req->setState(State_);
	req->setJobName(JobName_);
	return WUShowScheduled(req.get());
}

//------ method WUSubmit ---------

IClientWUSubmitRequest * CClientWsWorkunits::createWUSubmitRequest()
{
	CWUSubmitRequest* request = new CWUSubmitRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUSubmit");
	return request;
}

IClientWUSubmitResponse * CClientWsWorkunits::WUSubmit(IClientWUSubmitRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUSubmitRequest* esprequest = static_cast<CWUSubmitRequest*>(request);
	CWUSubmitResponse* espresponse = new CWUSubmitResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUSubmit(IClientWUSubmitRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUSubmitRequest* esprequest = static_cast<CWUSubmitRequest*>(request);
	esprequest->setMethod("WUSubmit");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUSubmitResponse *CClientWsWorkunits::WUSubmitFn(const char * Wuid_, const char * Cluster_, const char * Queue_, const char * Snapshot_, int MaxRunTime_, int BlockTillFinishTimer_, bool SyntaxCheck_, bool NotifyCluster_)
{
	Owned<IClientWUSubmitRequest> req =  createWUSubmitRequest();
	req->setWuid(Wuid_);
	req->setCluster(Cluster_);
	req->setQueue(Queue_);
	req->setSnapshot(Snapshot_);
	req->setMaxRunTime(MaxRunTime_);
	req->setBlockTillFinishTimer(BlockTillFinishTimer_);
	req->setSyntaxCheck(SyntaxCheck_);
	req->setNotifyCluster(NotifyCluster_);
	return WUSubmit(req.get());
}

//------ method WUSyntaxCheckECL ---------

IClientWUSyntaxCheckRequest * CClientWsWorkunits::createWUSyntaxCheckECLRequest()
{
	CWUSyntaxCheckRequest* request = new CWUSyntaxCheckRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUSyntaxCheckECL");
	return request;
}

IClientWUSyntaxCheckResponse * CClientWsWorkunits::WUSyntaxCheckECL(IClientWUSyntaxCheckRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUSyntaxCheckRequest* esprequest = static_cast<CWUSyntaxCheckRequest*>(request);
	CWUSyntaxCheckResponse* espresponse = new CWUSyntaxCheckResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUSyntaxCheckECL(IClientWUSyntaxCheckRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUSyntaxCheckRequest* esprequest = static_cast<CWUSyntaxCheckRequest*>(request);
	esprequest->setMethod("WUSyntaxCheckECL");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUSyntaxCheckResponse *CClientWsWorkunits::WUSyntaxCheckECLFn(const char * ECL_, const char * ModuleName_, const char * AttributeName_, const char * Queue_, const char * Cluster_, const char * Snapshot_, int TimeToWait_, IArrayOf<IConstDebugValue> &DebugValues_)
{
	Owned<IClientWUSyntaxCheckRequest> req =  createWUSyntaxCheckECLRequest();
	req->setECL(ECL_);
	req->setModuleName(ModuleName_);
	req->setAttributeName(AttributeName_);
	req->setQueue(Queue_);
	req->setCluster(Cluster_);
	req->setSnapshot(Snapshot_);
	req->setTimeToWait(TimeToWait_);
	req->setDebugValues(DebugValues_);
	return WUSyntaxCheckECL(req.get());
}

//------ method WUUpdate ---------

IClientWUUpdateRequest * CClientWsWorkunits::createWUUpdateRequest()
{
	CWUUpdateRequest* request = new CWUUpdateRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUUpdate");
	return request;
}

IClientWUUpdateResponse * CClientWsWorkunits::WUUpdate(IClientWUUpdateRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUUpdateRequest* esprequest = static_cast<CWUUpdateRequest*>(request);
	CWUUpdateResponse* espresponse = new CWUUpdateResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUUpdate(IClientWUUpdateRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUUpdateRequest* esprequest = static_cast<CWUUpdateRequest*>(request);
	esprequest->setMethod("WUUpdate");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUUpdateResponse *CClientWsWorkunits::WUUpdateFn(const char * Wuid_, int State_, int StateOrig_, const char * Jobname_, const char * JobnameOrig_, const char * QueryText_, int Action_, const char * Description_, const char * DescriptionOrig_, bool AddDrilldownFields_, int ResultLimit_, bool Protected_, bool ProtectedOrig_, int PriorityClass_, int PriorityLevel_, const char * Scope_, const char * ScopeOrig_, const char * ClusterSelection_, const char * ClusterOrig_, const char * XmlParams_, const char * ThorSlaveIP_, const char * QueryMainDefinition_, IArrayOf<IConstDebugValue> &DebugValues_, IArrayOf<IConstApplicationValue> &ApplicationValues_)
{
	Owned<IClientWUUpdateRequest> req =  createWUUpdateRequest();
	req->setWuid(Wuid_);
	req->setState(State_);
	req->setStateOrig(StateOrig_);
	req->setJobname(Jobname_);
	req->setJobnameOrig(JobnameOrig_);
	req->setQueryText(QueryText_);
	req->setAction(Action_);
	req->setDescription(Description_);
	req->setDescriptionOrig(DescriptionOrig_);
	req->setAddDrilldownFields(AddDrilldownFields_);
	req->setResultLimit(ResultLimit_);
	req->setProtected(Protected_);
	req->setProtectedOrig(ProtectedOrig_);
	req->setPriorityClass(PriorityClass_);
	req->setPriorityLevel(PriorityLevel_);
	req->setScope(Scope_);
	req->setScopeOrig(ScopeOrig_);
	req->setClusterSelection(ClusterSelection_);
	req->setClusterOrig(ClusterOrig_);
	req->setXmlParams(XmlParams_);
	req->setThorSlaveIP(ThorSlaveIP_);
	req->setQueryMainDefinition(QueryMainDefinition_);
	req->setDebugValues(DebugValues_);
	req->setApplicationValues(ApplicationValues_);
	return WUUpdate(req.get());
}

//------ method WUUpdateQueryEntry ---------

IClientWUUpdateQueryEntryRequest * CClientWsWorkunits::createWUUpdateQueryEntryRequest()
{
	CWUUpdateQueryEntryRequest* request = new CWUUpdateQueryEntryRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUUpdateQueryEntry");
	return request;
}

IClientWUUpdateQueryEntryResponse * CClientWsWorkunits::WUUpdateQueryEntry(IClientWUUpdateQueryEntryRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUUpdateQueryEntryRequest* esprequest = static_cast<CWUUpdateQueryEntryRequest*>(request);
	CWUUpdateQueryEntryResponse* espresponse = new CWUUpdateQueryEntryResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUUpdateQueryEntry(IClientWUUpdateQueryEntryRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUUpdateQueryEntryRequest* esprequest = static_cast<CWUUpdateQueryEntryRequest*>(request);
	esprequest->setMethod("WUUpdateQueryEntry");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUUpdateQueryEntryResponse *CClientWsWorkunits::WUUpdateQueryEntryFn(const char * QuerySet_, const char * QueryId_, const char * Comment_)
{
	Owned<IClientWUUpdateQueryEntryRequest> req =  createWUUpdateQueryEntryRequest();
	req->setQuerySet(QuerySet_);
	req->setQueryId(QueryId_);
	req->setComment(Comment_);
	return WUUpdateQueryEntry(req.get());
}

//------ method WUWaitCompiled ---------

IClientWUWaitRequest * CClientWsWorkunits::createWUWaitCompiledRequest()
{
	CWUWaitRequest* request = new CWUWaitRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUWaitCompiled");
	return request;
}

IClientWUWaitResponse * CClientWsWorkunits::WUWaitCompiled(IClientWUWaitRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUWaitRequest* esprequest = static_cast<CWUWaitRequest*>(request);
	CWUWaitResponse* espresponse = new CWUWaitResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUWaitCompiled(IClientWUWaitRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUWaitRequest* esprequest = static_cast<CWUWaitRequest*>(request);
	esprequest->setMethod("WUWaitCompiled");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUWaitResponse *CClientWsWorkunits::WUWaitCompiledFn(const char * Wuid_, int Wait_, bool ReturnOnWait_)
{
	Owned<IClientWUWaitRequest> req =  createWUWaitCompiledRequest();
	req->setWuid(Wuid_);
	req->setWait(Wait_);
	req->setReturnOnWait(ReturnOnWait_);
	return WUWaitCompiled(req.get());
}

//------ method WUWaitComplete ---------

IClientWUWaitRequest * CClientWsWorkunits::createWUWaitCompleteRequest()
{
	CWUWaitRequest* request = new CWUWaitRequest("WsWorkunits");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	request->setMsgName("WUWaitComplete");
	return request;
}

IClientWUWaitResponse * CClientWsWorkunits::WUWaitComplete(IClientWUWaitRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUWaitRequest* esprequest = static_cast<CWUWaitRequest*>(request);
	CWUWaitResponse* espresponse = new CWUWaitResponse("WsWorkunits");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsWorkunits::async_WUWaitComplete(IClientWUWaitRequest *request, IClientWsWorkunitsEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWUWaitRequest* esprequest = static_cast<CWUWaitRequest*>(request);
	esprequest->setMethod("WUWaitComplete");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsWorkunits::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWUWaitResponse *CClientWsWorkunits::WUWaitCompleteFn(const char * Wuid_, int Wait_, bool ReturnOnWait_)
{
	Owned<IClientWUWaitRequest> req =  createWUWaitCompleteRequest();
	req->setWuid(Wuid_);
	req->setWait(Wait_);
	req->setReturnOnWait(ReturnOnWait_);
	return WUWaitComplete(req.get());
}

int CClientWsWorkunits::transferThunkEvent(void *data)
{
	IRpcResponseBinding *response = (IRpcResponseBinding *)data;
	if (response!=NULL)
	{
		IClientWsWorkunitsEvents *eventSink = (IClientWsWorkunitsEvents *)response->getEventSink();
		response->lock();

		if (stricmp(response->getMethod(), "GVCAjaxGraph")==0)
		{
			IClientGVCAjaxGraphResponse* icresp = dynamic_cast<IClientGVCAjaxGraphResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onGVCAjaxGraphComplete(icresp, response->queryState());
				else
					eventSink->onGVCAjaxGraphError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "Ping")==0)
		{
			IClientWsWorkunitsPingResponse* icresp = dynamic_cast<IClientWsWorkunitsPingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onPingComplete(icresp, response->queryState());
				else
					eventSink->onPingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUAbort")==0)
		{
			IClientWUAbortResponse* icresp = dynamic_cast<IClientWUAbortResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUAbortComplete(icresp, response->queryState());
				else
					eventSink->onWUAbortError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUAction")==0)
		{
			IClientWUActionResponse* icresp = dynamic_cast<IClientWUActionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUActionComplete(icresp, response->queryState());
				else
					eventSink->onWUActionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUAddLocalFileToWorkunit")==0)
		{
			IClientWUAddLocalFileToWorkunitResponse* icresp = dynamic_cast<IClientWUAddLocalFileToWorkunitResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUAddLocalFileToWorkunitComplete(icresp, response->queryState());
				else
					eventSink->onWUAddLocalFileToWorkunitError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCDebug")==0)
		{
			IClientWUDebugResponse* icresp = dynamic_cast<IClientWUDebugResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCDebugComplete(icresp, response->queryState());
				else
					eventSink->onWUCDebugError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCheckFeatures")==0)
		{
			IClientWUCheckFeaturesResponse* icresp = dynamic_cast<IClientWUCheckFeaturesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCheckFeaturesComplete(icresp, response->queryState());
				else
					eventSink->onWUCheckFeaturesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUClusterJobQueueLOG")==0)
		{
			IClientWUClusterJobQueueLOGResponse* icresp = dynamic_cast<IClientWUClusterJobQueueLOGResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUClusterJobQueueLOGComplete(icresp, response->queryState());
				else
					eventSink->onWUClusterJobQueueLOGError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUClusterJobQueueXLS")==0)
		{
			IClientWUClusterJobQueueXLSResponse* icresp = dynamic_cast<IClientWUClusterJobQueueXLSResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUClusterJobQueueXLSComplete(icresp, response->queryState());
				else
					eventSink->onWUClusterJobQueueXLSError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUClusterJobSummaryXLS")==0)
		{
			IClientWUClusterJobSummaryXLSResponse* icresp = dynamic_cast<IClientWUClusterJobSummaryXLSResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUClusterJobSummaryXLSComplete(icresp, response->queryState());
				else
					eventSink->onWUClusterJobSummaryXLSError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUClusterJobXLS")==0)
		{
			IClientWUClusterJobXLSResponse* icresp = dynamic_cast<IClientWUClusterJobXLSResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUClusterJobXLSComplete(icresp, response->queryState());
				else
					eventSink->onWUClusterJobXLSError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCompileECL")==0)
		{
			IClientWUCompileECLResponse* icresp = dynamic_cast<IClientWUCompileECLResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCompileECLComplete(icresp, response->queryState());
				else
					eventSink->onWUCompileECLError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCopyLogicalFiles")==0)
		{
			IClientWUCopyLogicalFilesResponse* icresp = dynamic_cast<IClientWUCopyLogicalFilesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCopyLogicalFilesComplete(icresp, response->queryState());
				else
					eventSink->onWUCopyLogicalFilesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCopyQuerySet")==0)
		{
			IClientWUCopyQuerySetResponse* icresp = dynamic_cast<IClientWUCopyQuerySetResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCopyQuerySetComplete(icresp, response->queryState());
				else
					eventSink->onWUCopyQuerySetError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCreate")==0)
		{
			IClientWUCreateResponse* icresp = dynamic_cast<IClientWUCreateResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCreateComplete(icresp, response->queryState());
				else
					eventSink->onWUCreateError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCreateAndUpdate")==0)
		{
			IClientWUUpdateResponse* icresp = dynamic_cast<IClientWUUpdateResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCreateAndUpdateComplete(icresp, response->queryState());
				else
					eventSink->onWUCreateAndUpdateError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUCreateZAPInfo")==0)
		{
			IClientWUCreateZAPInfoResponse* icresp = dynamic_cast<IClientWUCreateZAPInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUCreateZAPInfoComplete(icresp, response->queryState());
				else
					eventSink->onWUCreateZAPInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUDelete")==0)
		{
			IClientWUDeleteResponse* icresp = dynamic_cast<IClientWUDeleteResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUDeleteComplete(icresp, response->queryState());
				else
					eventSink->onWUDeleteError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUDeployWorkunit")==0)
		{
			IClientWUDeployWorkunitResponse* icresp = dynamic_cast<IClientWUDeployWorkunitResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUDeployWorkunitComplete(icresp, response->queryState());
				else
					eventSink->onWUDeployWorkunitError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUDetails")==0)
		{
			IClientWUDetailsResponse* icresp = dynamic_cast<IClientWUDetailsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUDetailsComplete(icresp, response->queryState());
				else
					eventSink->onWUDetailsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUDetailsMeta")==0)
		{
			IClientWUDetailsMetaResponse* icresp = dynamic_cast<IClientWUDetailsMetaResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUDetailsMetaComplete(icresp, response->queryState());
				else
					eventSink->onWUDetailsMetaError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUEclDefinitionAction")==0)
		{
			IClientWUEclDefinitionActionResponse* icresp = dynamic_cast<IClientWUEclDefinitionActionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUEclDefinitionActionComplete(icresp, response->queryState());
				else
					eventSink->onWUEclDefinitionActionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUExport")==0)
		{
			IClientWUExportResponse* icresp = dynamic_cast<IClientWUExportResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUExportComplete(icresp, response->queryState());
				else
					eventSink->onWUExportError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUFile")==0)
		{
			IClientWULogFileResponse* icresp = dynamic_cast<IClientWULogFileResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUFileComplete(icresp, response->queryState());
				else
					eventSink->onWUFileError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUFullResult")==0)
		{
			IClientWUFullResultResponse* icresp = dynamic_cast<IClientWUFullResultResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUFullResultComplete(icresp, response->queryState());
				else
					eventSink->onWUFullResultError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGVCGraphInfo")==0)
		{
			IClientWUGVCGraphInfoResponse* icresp = dynamic_cast<IClientWUGVCGraphInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGVCGraphInfoComplete(icresp, response->queryState());
				else
					eventSink->onWUGVCGraphInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetArchiveFile")==0)
		{
			IClientWUGetArchiveFileResponse* icresp = dynamic_cast<IClientWUGetArchiveFileResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetArchiveFileComplete(icresp, response->queryState());
				else
					eventSink->onWUGetArchiveFileError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetDependancyTrees")==0)
		{
			IClientWUGetDependancyTreesResponse* icresp = dynamic_cast<IClientWUGetDependancyTreesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetDependancyTreesComplete(icresp, response->queryState());
				else
					eventSink->onWUGetDependancyTreesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetGraph")==0)
		{
			IClientWUGetGraphResponse* icresp = dynamic_cast<IClientWUGetGraphResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetGraphComplete(icresp, response->queryState());
				else
					eventSink->onWUGetGraphError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetGraphNameAndTypes")==0)
		{
			IClientWUGetGraphNameAndTypesResponse* icresp = dynamic_cast<IClientWUGetGraphNameAndTypesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetGraphNameAndTypesComplete(icresp, response->queryState());
				else
					eventSink->onWUGetGraphNameAndTypesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetNumFileToCopy")==0)
		{
			IClientWUGetNumFileToCopyResponse* icresp = dynamic_cast<IClientWUGetNumFileToCopyResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetNumFileToCopyComplete(icresp, response->queryState());
				else
					eventSink->onWUGetNumFileToCopyError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetStats")==0)
		{
			IClientWUGetStatsResponse* icresp = dynamic_cast<IClientWUGetStatsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetStatsComplete(icresp, response->queryState());
				else
					eventSink->onWUGetStatsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetThorJobList")==0)
		{
			IClientWUGetThorJobListResponse* icresp = dynamic_cast<IClientWUGetThorJobListResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetThorJobListComplete(icresp, response->queryState());
				else
					eventSink->onWUGetThorJobListError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetThorJobQueue")==0)
		{
			IClientWUGetThorJobQueueResponse* icresp = dynamic_cast<IClientWUGetThorJobQueueResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetThorJobQueueComplete(icresp, response->queryState());
				else
					eventSink->onWUGetThorJobQueueError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGetZAPInfo")==0)
		{
			IClientWUGetZAPInfoResponse* icresp = dynamic_cast<IClientWUGetZAPInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGetZAPInfoComplete(icresp, response->queryState());
				else
					eventSink->onWUGetZAPInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGraphInfo")==0)
		{
			IClientWUGraphInfoResponse* icresp = dynamic_cast<IClientWUGraphInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGraphInfoComplete(icresp, response->queryState());
				else
					eventSink->onWUGraphInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUGraphTiming")==0)
		{
			IClientWUGraphTimingResponse* icresp = dynamic_cast<IClientWUGraphTimingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUGraphTimingComplete(icresp, response->queryState());
				else
					eventSink->onWUGraphTimingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUInfo")==0)
		{
			IClientWUInfoResponse* icresp = dynamic_cast<IClientWUInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUInfoComplete(icresp, response->queryState());
				else
					eventSink->onWUInfoError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUInfoDetails")==0)
		{
			IClientWUInfoResponse* icresp = dynamic_cast<IClientWUInfoResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUInfoDetailsComplete(icresp, response->queryState());
				else
					eventSink->onWUInfoDetailsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUJobList")==0)
		{
			IClientWUJobListResponse* icresp = dynamic_cast<IClientWUJobListResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUJobListComplete(icresp, response->queryState());
				else
					eventSink->onWUJobListError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WULightWeightQuery")==0)
		{
			IClientWULightWeightQueryResponse* icresp = dynamic_cast<IClientWULightWeightQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWULightWeightQueryComplete(icresp, response->queryState());
				else
					eventSink->onWULightWeightQueryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUListArchiveFiles")==0)
		{
			IClientWUListArchiveFilesResponse* icresp = dynamic_cast<IClientWUListArchiveFilesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUListArchiveFilesComplete(icresp, response->queryState());
				else
					eventSink->onWUListArchiveFilesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUListLocalFileRequired")==0)
		{
			IClientWUListLocalFileRequiredResponse* icresp = dynamic_cast<IClientWUListLocalFileRequiredResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUListLocalFileRequiredComplete(icresp, response->queryState());
				else
					eventSink->onWUListLocalFileRequiredError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUListQueries")==0)
		{
			IClientWUListQueriesResponse* icresp = dynamic_cast<IClientWUListQueriesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUListQueriesComplete(icresp, response->queryState());
				else
					eventSink->onWUListQueriesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUListQueriesUsingFile")==0)
		{
			IClientWUListQueriesUsingFileResponse* icresp = dynamic_cast<IClientWUListQueriesUsingFileResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUListQueriesUsingFileComplete(icresp, response->queryState());
				else
					eventSink->onWUListQueriesUsingFileError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUMultiQuerysetDetails")==0)
		{
			IClientWUMultiQuerySetDetailsResponse* icresp = dynamic_cast<IClientWUMultiQuerySetDetailsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUMultiQuerysetDetailsComplete(icresp, response->queryState());
				else
					eventSink->onWUMultiQuerysetDetailsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUProcessGraph")==0)
		{
			IClientWUProcessGraphResponse* icresp = dynamic_cast<IClientWUProcessGraphResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUProcessGraphComplete(icresp, response->queryState());
				else
					eventSink->onWUProcessGraphError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUProtect")==0)
		{
			IClientWUProtectResponse* icresp = dynamic_cast<IClientWUProtectResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUProtectComplete(icresp, response->queryState());
				else
					eventSink->onWUProtectError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUPublishWorkunit")==0)
		{
			IClientWUPublishWorkunitResponse* icresp = dynamic_cast<IClientWUPublishWorkunitResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUPublishWorkunitComplete(icresp, response->queryState());
				else
					eventSink->onWUPublishWorkunitError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUPushEvent")==0)
		{
			IClientWUPushEventResponse* icresp = dynamic_cast<IClientWUPushEventResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUPushEventComplete(icresp, response->queryState());
				else
					eventSink->onWUPushEventError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuery")==0)
		{
			IClientWUQueryResponse* icresp = dynamic_cast<IClientWUQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQueryComplete(icresp, response->queryState());
				else
					eventSink->onWUQueryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQueryConfig")==0)
		{
			IClientWUQueryConfigResponse* icresp = dynamic_cast<IClientWUQueryConfigResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQueryConfigComplete(icresp, response->queryState());
				else
					eventSink->onWUQueryConfigError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQueryDetails")==0)
		{
			IClientWUQueryDetailsResponse* icresp = dynamic_cast<IClientWUQueryDetailsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQueryDetailsComplete(icresp, response->queryState());
				else
					eventSink->onWUQueryDetailsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQueryFiles")==0)
		{
			IClientWUQueryFilesResponse* icresp = dynamic_cast<IClientWUQueryFilesResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQueryFilesComplete(icresp, response->queryState());
				else
					eventSink->onWUQueryFilesError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQueryGetGraph")==0)
		{
			IClientWUQueryGetGraphResponse* icresp = dynamic_cast<IClientWUQueryGetGraphResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQueryGetGraphComplete(icresp, response->queryState());
				else
					eventSink->onWUQueryGetGraphError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQueryGetSummaryStats")==0)
		{
			IClientWUQueryGetSummaryStatsResponse* icresp = dynamic_cast<IClientWUQueryGetSummaryStatsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQueryGetSummaryStatsComplete(icresp, response->queryState());
				else
					eventSink->onWUQueryGetSummaryStatsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuerysetAliasAction")==0)
		{
			IClientWUQuerySetAliasActionResponse* icresp = dynamic_cast<IClientWUQuerySetAliasActionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQuerysetAliasActionComplete(icresp, response->queryState());
				else
					eventSink->onWUQuerysetAliasActionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuerysetCopyQuery")==0)
		{
			IClientWUQuerySetCopyQueryResponse* icresp = dynamic_cast<IClientWUQuerySetCopyQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQuerysetCopyQueryComplete(icresp, response->queryState());
				else
					eventSink->onWUQuerysetCopyQueryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuerysetDetails")==0)
		{
			IClientWUQuerySetDetailsResponse* icresp = dynamic_cast<IClientWUQuerySetDetailsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQuerysetDetailsComplete(icresp, response->queryState());
				else
					eventSink->onWUQuerysetDetailsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuerysetExport")==0)
		{
			IClientWUQuerysetExportResponse* icresp = dynamic_cast<IClientWUQuerysetExportResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQuerysetExportComplete(icresp, response->queryState());
				else
					eventSink->onWUQuerysetExportError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuerysetImport")==0)
		{
			IClientWUQuerysetImportResponse* icresp = dynamic_cast<IClientWUQuerysetImportResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQuerysetImportComplete(icresp, response->queryState());
				else
					eventSink->onWUQuerysetImportError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuerysetQueryAction")==0)
		{
			IClientWUQuerySetQueryActionResponse* icresp = dynamic_cast<IClientWUQuerySetQueryActionResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQuerysetQueryActionComplete(icresp, response->queryState());
				else
					eventSink->onWUQuerysetQueryActionError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUQuerysets")==0)
		{
			IClientWUQuerysetsResponse* icresp = dynamic_cast<IClientWUQuerysetsResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUQuerysetsComplete(icresp, response->queryState());
				else
					eventSink->onWUQuerysetsError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WURecreateQuery")==0)
		{
			IClientWURecreateQueryResponse* icresp = dynamic_cast<IClientWURecreateQueryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWURecreateQueryComplete(icresp, response->queryState());
				else
					eventSink->onWURecreateQueryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUResubmit")==0)
		{
			IClientWUResubmitResponse* icresp = dynamic_cast<IClientWUResubmitResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUResubmitComplete(icresp, response->queryState());
				else
					eventSink->onWUResubmitError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUResult")==0)
		{
			IClientWUResultResponse* icresp = dynamic_cast<IClientWUResultResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUResultComplete(icresp, response->queryState());
				else
					eventSink->onWUResultError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUResultBin")==0)
		{
			IClientWUResultBinResponse* icresp = dynamic_cast<IClientWUResultBinResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUResultBinComplete(icresp, response->queryState());
				else
					eventSink->onWUResultBinError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUResultSummary")==0)
		{
			IClientWUResultSummaryResponse* icresp = dynamic_cast<IClientWUResultSummaryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUResultSummaryComplete(icresp, response->queryState());
				else
					eventSink->onWUResultSummaryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUResultView")==0)
		{
			IClientWUResultViewResponse* icresp = dynamic_cast<IClientWUResultViewResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUResultViewComplete(icresp, response->queryState());
				else
					eventSink->onWUResultViewError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WURun")==0)
		{
			IClientWURunResponse* icresp = dynamic_cast<IClientWURunResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWURunComplete(icresp, response->queryState());
				else
					eventSink->onWURunError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUSchedule")==0)
		{
			IClientWUScheduleResponse* icresp = dynamic_cast<IClientWUScheduleResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUScheduleComplete(icresp, response->queryState());
				else
					eventSink->onWUScheduleError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUShowScheduled")==0)
		{
			IClientWUShowScheduledResponse* icresp = dynamic_cast<IClientWUShowScheduledResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUShowScheduledComplete(icresp, response->queryState());
				else
					eventSink->onWUShowScheduledError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUSubmit")==0)
		{
			IClientWUSubmitResponse* icresp = dynamic_cast<IClientWUSubmitResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUSubmitComplete(icresp, response->queryState());
				else
					eventSink->onWUSubmitError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUSyntaxCheckECL")==0)
		{
			IClientWUSyntaxCheckResponse* icresp = dynamic_cast<IClientWUSyntaxCheckResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUSyntaxCheckECLComplete(icresp, response->queryState());
				else
					eventSink->onWUSyntaxCheckECLError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUUpdate")==0)
		{
			IClientWUUpdateResponse* icresp = dynamic_cast<IClientWUUpdateResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUUpdateComplete(icresp, response->queryState());
				else
					eventSink->onWUUpdateError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUUpdateQueryEntry")==0)
		{
			IClientWUUpdateQueryEntryResponse* icresp = dynamic_cast<IClientWUUpdateQueryEntryResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUUpdateQueryEntryComplete(icresp, response->queryState());
				else
					eventSink->onWUUpdateQueryEntryError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUWaitCompiled")==0)
		{
			IClientWUWaitResponse* icresp = dynamic_cast<IClientWUWaitResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUWaitCompiledComplete(icresp, response->queryState());
				else
					eventSink->onWUWaitCompiledError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WUWaitComplete")==0)
		{
			IClientWUWaitResponse* icresp = dynamic_cast<IClientWUWaitResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWUWaitCompleteComplete(icresp, response->queryState());
				else
					eventSink->onWUWaitCompleteError(icresp,response->queryState());
			}
		}
		response->unlock();
	}
	return 0;
}

static IRpcResponseBinding* createWsWorkunitsResponseObject(IRpcRequestBinding *request)
{
	const char* method = request->getMethod();
	if (stricmp(method, "GVCAjaxGraph")==0)
		return new CGVCAjaxGraphResponse("WsWorkunits", request);
	if (stricmp(method, "Ping")==0)
		return new CWsWorkunitsPingResponse("WsWorkunits", request);
	if (stricmp(method, "WUAbort")==0)
		return new CWUAbortResponse("WsWorkunits", request);
	if (stricmp(method, "WUAction")==0)
		return new CWUActionResponse("WsWorkunits", request);
	if (stricmp(method, "WUAddLocalFileToWorkunit")==0)
		return new CWUAddLocalFileToWorkunitResponse("WsWorkunits", request);
	if (stricmp(method, "WUCDebug")==0)
		return new CWUDebugResponse("WsWorkunits", request);
	if (stricmp(method, "WUCheckFeatures")==0)
		return new CWUCheckFeaturesResponse("WsWorkunits", request);
	if (stricmp(method, "WUClusterJobQueueLOG")==0)
		return new CWUClusterJobQueueLOGResponse("WsWorkunits", request);
	if (stricmp(method, "WUClusterJobQueueXLS")==0)
		return new CWUClusterJobQueueXLSResponse("WsWorkunits", request);
	if (stricmp(method, "WUClusterJobSummaryXLS")==0)
		return new CWUClusterJobSummaryXLSResponse("WsWorkunits", request);
	if (stricmp(method, "WUClusterJobXLS")==0)
		return new CWUClusterJobXLSResponse("WsWorkunits", request);
	if (stricmp(method, "WUCompileECL")==0)
		return new CWUCompileECLResponse("WsWorkunits", request);
	if (stricmp(method, "WUCopyLogicalFiles")==0)
		return new CWUCopyLogicalFilesResponse("WsWorkunits", request);
	if (stricmp(method, "WUCopyQuerySet")==0)
		return new CWUCopyQuerySetResponse("WsWorkunits", request);
	if (stricmp(method, "WUCreate")==0)
		return new CWUCreateResponse("WsWorkunits", request);
	if (stricmp(method, "WUCreateAndUpdate")==0)
		return new CWUUpdateResponse("WsWorkunits", request);
	if (stricmp(method, "WUCreateZAPInfo")==0)
		return new CWUCreateZAPInfoResponse("WsWorkunits", request);
	if (stricmp(method, "WUDelete")==0)
		return new CWUDeleteResponse("WsWorkunits", request);
	if (stricmp(method, "WUDeployWorkunit")==0)
		return new CWUDeployWorkunitResponse("WsWorkunits", request);
	if (stricmp(method, "WUDetails")==0)
		return new CWUDetailsResponse("WsWorkunits", request);
	if (stricmp(method, "WUDetailsMeta")==0)
		return new CWUDetailsMetaResponse("WsWorkunits", request);
	if (stricmp(method, "WUEclDefinitionAction")==0)
		return new CWUEclDefinitionActionResponse("WsWorkunits", request);
	if (stricmp(method, "WUExport")==0)
		return new CWUExportResponse("WsWorkunits", request);
	if (stricmp(method, "WUFile")==0)
		return new CWULogFileResponse("WsWorkunits", request);
	if (stricmp(method, "WUFullResult")==0)
		return new CWUFullResultResponse("WsWorkunits", request);
	if (stricmp(method, "WUGVCGraphInfo")==0)
		return new CWUGVCGraphInfoResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetArchiveFile")==0)
		return new CWUGetArchiveFileResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetDependancyTrees")==0)
		return new CWUGetDependancyTreesResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetGraph")==0)
		return new CWUGetGraphResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetGraphNameAndTypes")==0)
		return new CWUGetGraphNameAndTypesResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetNumFileToCopy")==0)
		return new CWUGetNumFileToCopyResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetStats")==0)
		return new CWUGetStatsResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetThorJobList")==0)
		return new CWUGetThorJobListResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetThorJobQueue")==0)
		return new CWUGetThorJobQueueResponse("WsWorkunits", request);
	if (stricmp(method, "WUGetZAPInfo")==0)
		return new CWUGetZAPInfoResponse("WsWorkunits", request);
	if (stricmp(method, "WUGraphInfo")==0)
		return new CWUGraphInfoResponse("WsWorkunits", request);
	if (stricmp(method, "WUGraphTiming")==0)
		return new CWUGraphTimingResponse("WsWorkunits", request);
	if (stricmp(method, "WUInfo")==0)
		return new CWUInfoResponse("WsWorkunits", request);
	if (stricmp(method, "WUInfoDetails")==0)
		return new CWUInfoResponse("WsWorkunits", request);
	if (stricmp(method, "WUJobList")==0)
		return new CWUJobListResponse("WsWorkunits", request);
	if (stricmp(method, "WULightWeightQuery")==0)
		return new CWULightWeightQueryResponse("WsWorkunits", request);
	if (stricmp(method, "WUListArchiveFiles")==0)
		return new CWUListArchiveFilesResponse("WsWorkunits", request);
	if (stricmp(method, "WUListLocalFileRequired")==0)
		return new CWUListLocalFileRequiredResponse("WsWorkunits", request);
	if (stricmp(method, "WUListQueries")==0)
		return new CWUListQueriesResponse("WsWorkunits", request);
	if (stricmp(method, "WUListQueriesUsingFile")==0)
		return new CWUListQueriesUsingFileResponse("WsWorkunits", request);
	if (stricmp(method, "WUMultiQuerysetDetails")==0)
		return new CWUMultiQuerySetDetailsResponse("WsWorkunits", request);
	if (stricmp(method, "WUProcessGraph")==0)
		return new CWUProcessGraphResponse("WsWorkunits", request);
	if (stricmp(method, "WUProtect")==0)
		return new CWUProtectResponse("WsWorkunits", request);
	if (stricmp(method, "WUPublishWorkunit")==0)
		return new CWUPublishWorkunitResponse("WsWorkunits", request);
	if (stricmp(method, "WUPushEvent")==0)
		return new CWUPushEventResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuery")==0)
		return new CWUQueryResponse("WsWorkunits", request);
	if (stricmp(method, "WUQueryConfig")==0)
		return new CWUQueryConfigResponse("WsWorkunits", request);
	if (stricmp(method, "WUQueryDetails")==0)
		return new CWUQueryDetailsResponse("WsWorkunits", request);
	if (stricmp(method, "WUQueryFiles")==0)
		return new CWUQueryFilesResponse("WsWorkunits", request);
	if (stricmp(method, "WUQueryGetGraph")==0)
		return new CWUQueryGetGraphResponse("WsWorkunits", request);
	if (stricmp(method, "WUQueryGetSummaryStats")==0)
		return new CWUQueryGetSummaryStatsResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuerysetAliasAction")==0)
		return new CWUQuerySetAliasActionResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuerysetCopyQuery")==0)
		return new CWUQuerySetCopyQueryResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuerysetDetails")==0)
		return new CWUQuerySetDetailsResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuerysetExport")==0)
		return new CWUQuerysetExportResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuerysetImport")==0)
		return new CWUQuerysetImportResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuerysetQueryAction")==0)
		return new CWUQuerySetQueryActionResponse("WsWorkunits", request);
	if (stricmp(method, "WUQuerysets")==0)
		return new CWUQuerysetsResponse("WsWorkunits", request);
	if (stricmp(method, "WURecreateQuery")==0)
		return new CWURecreateQueryResponse("WsWorkunits", request);
	if (stricmp(method, "WUResubmit")==0)
		return new CWUResubmitResponse("WsWorkunits", request);
	if (stricmp(method, "WUResult")==0)
		return new CWUResultResponse("WsWorkunits", request);
	if (stricmp(method, "WUResultBin")==0)
		return new CWUResultBinResponse("WsWorkunits", request);
	if (stricmp(method, "WUResultSummary")==0)
		return new CWUResultSummaryResponse("WsWorkunits", request);
	if (stricmp(method, "WUResultView")==0)
		return new CWUResultViewResponse("WsWorkunits", request);
	if (stricmp(method, "WURun")==0)
		return new CWURunResponse("WsWorkunits", request);
	if (stricmp(method, "WUSchedule")==0)
		return new CWUScheduleResponse("WsWorkunits", request);
	if (stricmp(method, "WUShowScheduled")==0)
		return new CWUShowScheduledResponse("WsWorkunits", request);
	if (stricmp(method, "WUSubmit")==0)
		return new CWUSubmitResponse("WsWorkunits", request);
	if (stricmp(method, "WUSyntaxCheckECL")==0)
		return new CWUSyntaxCheckResponse("WsWorkunits", request);
	if (stricmp(method, "WUUpdate")==0)
		return new CWUUpdateResponse("WsWorkunits", request);
	if (stricmp(method, "WUUpdateQueryEntry")==0)
		return new CWUUpdateQueryEntryResponse("WsWorkunits", request);
	if (stricmp(method, "WUWaitCompiled")==0)
		return new CWUWaitResponse("WsWorkunits", request);
	if (stricmp(method, "WUWaitComplete")==0)
		return new CWUWaitResponse("WsWorkunits", request);
	return NULL;
}

#ifdef _WIN32
void CClientWsWorkunits::espWorkerThread(void* data)
#else
void *CClientWsWorkunits::espWorkerThread(void *data)
#endif
{
	IRpcRequestBinding *request = (IRpcRequestBinding *) data;

	if (request != NULL)
	{
		request->lock();
		IRpcResponseBinding *response=createWsWorkunitsResponseObject(request);
		if (response!=NULL)
		{
			try{
				request->post(*response);
			}
			catch(IException* ex){
				StringBuffer errorStr;
				ex->errorMessage(errorStr);
				ERRLOG("CClientWsWorkunits::espWorkerThread(%s)--Exception caught while posting async request: %s", request->getMethod(), errorStr.str());
				ex->Release();
			}
			catch(...){
				ERRLOG("Unknown exception caught while posting async request");
			}
		}
#ifdef USE_CLIENT_THREAD
		ThunkToClientThread(request->getThunkHandle(), transferThunkEvent, (void *)response);
#else
		transferThunkEvent((void *)response);
#endif
		request->unlock();
		if(request->queryState()!=NULL)
			request->queryState()->Release();

		if(response!=NULL)
			response->Release();

		request->Release();
	}
#if defined(_WIN32)
#else
	return (void *) 0 ;
#endif
}



extern "C" IClientWsWorkunits * createWsWorkunitsClient() {  return new CClientWsWorkunits(); }


#endif //ws_workunits_ESPGEN_INCLUDED
