// *** Include file generated by HIDL Version 1.3 from ws_esdlconfig.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_esdlconfig_SCM_INCL
#define ws_esdlconfig_SCM_INCL

#include "esp.hpp"



#include "common_esp.ipp"
#include "ws_topology_esp.ipp"

interface IConstEchoRequest : extends IEspRequest
{
	virtual const char * getRequest()=0;
};

interface IEspEchoRequest : extends IConstEchoRequest
{
	virtual void setRequest(const char * val)=0;
	virtual void copy(IConstEchoRequest &from)=0;
};

interface IClientEchoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setRequest(const char * val)=0;
};



interface IConstEchoResponse : extends IEspResponse
{
	virtual const char * getResponse()=0;
};

interface IEspEchoResponse : extends IConstEchoResponse
{
	virtual void setResponse(const char * val)=0;
	virtual void copy(IConstEchoResponse &from)=0;
};

interface IClientEchoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getResponse()=0;
};



interface IConstBaseESDLStatus : extends IEspStruct
{
	virtual int getCode()=0;
	virtual const char * getDescription()=0;
};

interface IEspBaseESDLStatus : extends IConstBaseESDLStatus
{
	virtual void setCode(int val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void copy(IConstBaseESDLStatus &from)=0;
};

interface IClientBaseESDLStatus : extends IInterface
{
	virtual void setCode(int val)=0;
	virtual void setDescription(const char * val)=0;
	virtual int getCode()=0;
	virtual const char * getDescription()=0;
};



interface IConstMethodConfig : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual IArrayOf<IConstNamedValue> & getAttributes()=0;
	virtual const char * getElements()=0;
	virtual const char * getXML()=0;
};

interface IEspMethodConfig : extends IConstMethodConfig
{
	virtual void setName(const char * val)=0;
	virtual void setAttributes(IArrayOf<IEspNamedValue> &val)=0;
	virtual void setAttributes(IArrayOf<IConstNamedValue> &val)=0;
	virtual void setElements(const char * val)=0;
	virtual void setXML(const char * val)=0;
	virtual void copy(IConstMethodConfig &from)=0;
};

interface IClientMethodConfig : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setAttributes(IArrayOf<IEspNamedValue> &val)=0;
	virtual void setAttributes(IArrayOf<IConstNamedValue> &val)=0;
	virtual void setElements(const char * val)=0;
	virtual void setXML(const char * val)=0;
	virtual const char * getName()=0;
	virtual IArrayOf<IConstNamedValue> & getAttributes()=0;
	virtual const char * getElements()=0;
	virtual const char * getXML()=0;
};



interface IConstESDLConfiguration : extends IEspStruct
{
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
};

interface IEspESDLConfiguration : extends IConstESDLConfiguration
{
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual void copy(IConstESDLConfiguration &from)=0;
};

interface IClientESDLConfiguration : extends IInterface
{
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
};



interface IConstPublishHistory : extends IEspStruct
{
	virtual const char * getPublishBy()=0;
	virtual const char * getCreatedTime()=0;
	virtual const char * getLastEditBy()=0;
	virtual const char * getLastEditTime()=0;
};

interface IEspPublishHistory : extends IConstPublishHistory
{
	virtual void setPublishBy(const char * val)=0;
	virtual void setCreatedTime(const char * val)=0;
	virtual void setLastEditBy(const char * val)=0;
	virtual void setLastEditTime(const char * val)=0;
	virtual void copy(IConstPublishHistory &from)=0;
};

interface IClientPublishHistory : extends IInterface
{
	virtual void setPublishBy(const char * val)=0;
	virtual void setCreatedTime(const char * val)=0;
	virtual void setLastEditBy(const char * val)=0;
	virtual void setLastEditTime(const char * val)=0;
	virtual const char * getPublishBy()=0;
	virtual const char * getCreatedTime()=0;
	virtual const char * getLastEditBy()=0;
	virtual const char * getLastEditTime()=0;
};



interface IConstESDLBinding : extends IEspStruct
{
	virtual const char * getId()=0;
	virtual const char * getEspProcess()=0;
	virtual int getPort()=0;
	virtual const char * getEspBinding()=0;
	virtual IConstPublishHistory & getHistory()=0;
};

interface IEspESDLBinding : extends IConstESDLBinding
{
	virtual void setId(const char * val)=0;
	virtual void setEspProcess(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void setEspBinding(const char * val)=0;
	virtual IEspPublishHistory & updateHistory()=0;
	virtual void setHistory(IConstPublishHistory &ifrom)=0;
	virtual void copy(IConstESDLBinding &from)=0;
};

interface IClientESDLBinding : extends IInterface
{
	virtual void setId(const char * val)=0;
	virtual void setEspProcess(const char * val)=0;
	virtual void setPort(int val)=0;
	virtual void setEspBinding(const char * val)=0;
	virtual IEspPublishHistory & updateHistory()=0;
	virtual void setHistory(IConstPublishHistory &ifrom)=0;
	virtual const char * getId()=0;
	virtual const char * getEspProcess()=0;
	virtual int getPort()=0;
	virtual const char * getEspBinding()=0;
	virtual IConstPublishHistory & getHistory()=0;
};



interface IConstESDLService : extends IEspStruct
{
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
	virtual const char * getName()=0;
};

interface IEspESDLService : extends IConstESDLService
{
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual void setName(const char * val)=0;
	virtual void copy(IConstESDLService &from)=0;
};

interface IClientESDLService : extends IInterface
{
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual void setName(const char * val)=0;
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
	virtual const char * getName()=0;
};



interface IConstESDLDefinition : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual int getSeq()=0;
	virtual const char * getId()=0;
	virtual const char * getInterface()=0;
	virtual StringArray & getESDLServices()=0;
	virtual IArrayOf<IConstESDLService> & getServices()=0;
	virtual IConstPublishHistory & getHistory()=0;
};

interface IEspESDLDefinition : extends IConstESDLDefinition
{
	virtual void setName(const char * val)=0;
	virtual void setSeq(int val)=0;
	virtual void setId(const char * val)=0;
	virtual void setInterface(const char * val)=0;
	virtual void setESDLServices(StringArray &val)=0;
	virtual void setServices(IArrayOf<IEspESDLService> &val)=0;
	virtual void setServices(IArrayOf<IConstESDLService> &val)=0;
	virtual IEspPublishHistory & updateHistory()=0;
	virtual void setHistory(IConstPublishHistory &ifrom)=0;
	virtual void copy(IConstESDLDefinition &from)=0;
};

interface IClientESDLDefinition : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setSeq(int val)=0;
	virtual void setId(const char * val)=0;
	virtual void setInterface(const char * val)=0;
	virtual void setESDLServices(StringArray &val)=0;
	virtual void setServices(IArrayOf<IEspESDLService> &val)=0;
	virtual void setServices(IArrayOf<IConstESDLService> &val)=0;
	virtual IEspPublishHistory & updateHistory()=0;
	virtual void setHistory(IConstPublishHistory &ifrom)=0;
	virtual const char * getName()=0;
	virtual int getSeq()=0;
	virtual const char * getId()=0;
	virtual const char * getInterface()=0;
	virtual StringArray & getESDLServices()=0;
	virtual IArrayOf<IConstESDLService> & getServices()=0;
	virtual IConstPublishHistory & getHistory()=0;
};



//ESPStruct ESDLBindingContents : ESDLBinding
interface IConstESDLBindingContents : extends IEspStruct
{
	virtual IConstESDLDefinition & getDefinition()=0;
	virtual IConstESDLConfiguration & getConfiguration()=0;
	virtual IConstPublishHistory & getHistory()=0;
};

interface IEspESDLBindingContents : extends IConstESDLBindingContents
{
	virtual IEspESDLDefinition & updateDefinition()=0;
	virtual void setDefinition(IConstESDLDefinition &ifrom)=0;
	virtual IEspESDLConfiguration & updateConfiguration()=0;
	virtual void setConfiguration(IConstESDLConfiguration &ifrom)=0;
	virtual IEspPublishHistory & updateHistory()=0;
	virtual void setHistory(IConstPublishHistory &ifrom)=0;
	virtual void copy(IConstESDLBindingContents &from)=0;
};

interface IClientESDLBindingContents : extends IInterface
{
	virtual IEspESDLDefinition & updateDefinition()=0;
	virtual void setDefinition(IConstESDLDefinition &ifrom)=0;
	virtual IEspESDLConfiguration & updateConfiguration()=0;
	virtual void setConfiguration(IConstESDLConfiguration &ifrom)=0;
	virtual IEspPublishHistory & updateHistory()=0;
	virtual void setHistory(IConstPublishHistory &ifrom)=0;
	virtual IConstESDLDefinition & getDefinition()=0;
	virtual IConstESDLConfiguration & getConfiguration()=0;
	virtual IConstPublishHistory & getHistory()=0;
};



interface IConstGetESDLDefinitionRequest : extends IEspRequest
{
	virtual const char * getId()=0;
	virtual const char * getName()=0;
	virtual bool getSeq_isNull()=0;
	virtual int getSeq()=0;
	virtual const char * getServiceName()=0;
	virtual bool getReportMethodsAvailable_isNull()=0;
	virtual bool getReportMethodsAvailable()=0;
};

interface IEspGetESDLDefinitionRequest : extends IConstGetESDLDefinitionRequest
{
	virtual void setId(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setSeq_null()=0;
	virtual void setSeq(int val)=0;
	virtual void setServiceName(const char * val)=0;
	virtual void setReportMethodsAvailable_null()=0;
	virtual void setReportMethodsAvailable(bool val)=0;
	virtual void copy(IConstGetESDLDefinitionRequest &from)=0;
};

interface IClientGetESDLDefinitionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setId(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setSeq_null()=0;
	virtual void setSeq(int val)=0;
	virtual void setServiceName(const char * val)=0;
	virtual void setReportMethodsAvailable_null()=0;
	virtual void setReportMethodsAvailable(bool val)=0;
};



interface IConstGetESDLDefinitionResponse : extends IEspResponse
{
	virtual const char * getId()=0;
	virtual StringArray & getESDLServices()=0;
	virtual const char * getXMLDefinition()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
	virtual IConstESDLDefinition & getDefinition()=0;
};

interface IEspGetESDLDefinitionResponse : extends IConstGetESDLDefinitionResponse
{
	virtual void setId(const char * val)=0;
	virtual void setESDLServices(StringArray &val)=0;
	virtual void setXMLDefinition(const char * val)=0;
	virtual IEspBaseESDLStatus & updateStatus()=0;
	virtual void setStatus(IConstBaseESDLStatus &ifrom)=0;
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual IEspESDLDefinition & updateDefinition()=0;
	virtual void setDefinition(IConstESDLDefinition &ifrom)=0;
	virtual void copy(IConstGetESDLDefinitionResponse &from)=0;
};

interface IClientGetESDLDefinitionResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getId()=0;
	virtual StringArray & getESDLServices()=0;
	virtual const char * getXMLDefinition()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
	virtual IConstESDLDefinition & getDefinition()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstPublishESDLDefinitionRequest : extends IEspRequest
{
	virtual const char * getServiceName()=0;
	virtual const char * getXMLDefinition()=0;
	virtual bool getDeletePrevious()=0;
	virtual bool getEchoDefinition()=0;
};

interface IEspPublishESDLDefinitionRequest : extends IConstPublishESDLDefinitionRequest
{
	virtual void setServiceName(const char * val)=0;
	virtual void setXMLDefinition(const char * val)=0;
	virtual void setDeletePrevious(bool val)=0;
	virtual void setEchoDefinition(bool val)=0;
	virtual void copy(IConstPublishESDLDefinitionRequest &from)=0;
};

interface IClientPublishESDLDefinitionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setServiceName(const char * val)=0;
	virtual void setXMLDefinition(const char * val)=0;
	virtual void setDeletePrevious(bool val)=0;
	virtual void setEchoDefinition(bool val)=0;
};



interface IConstPublishESDLDefinitionResponse : extends IEspResponse
{
	virtual const char * getServiceName()=0;
	virtual bool getEsdlVersion_isNull()=0;
	virtual int getEsdlVersion()=0;
	virtual bool getDeletePrevious_isNull()=0;
	virtual bool getDeletePrevious()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual StringArray & getESDLServices()=0;
	virtual const char * getXMLDefinition()=0;
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
	virtual IConstESDLDefinition & getDefinition()=0;
};

interface IEspPublishESDLDefinitionResponse : extends IConstPublishESDLDefinitionResponse
{
	virtual void setServiceName(const char * val)=0;
	virtual void setEsdlVersion_null()=0;
	virtual void setEsdlVersion(int val)=0;
	virtual void setDeletePrevious_null()=0;
	virtual void setDeletePrevious(bool val)=0;
	virtual IEspBaseESDLStatus & updateStatus()=0;
	virtual void setStatus(IConstBaseESDLStatus &ifrom)=0;
	virtual void setESDLServices(StringArray &val)=0;
	virtual void setXMLDefinition(const char * val)=0;
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual IEspESDLDefinition & updateDefinition()=0;
	virtual void setDefinition(IConstESDLDefinition &ifrom)=0;
	virtual void copy(IConstPublishESDLDefinitionResponse &from)=0;
};

interface IClientPublishESDLDefinitionResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getServiceName()=0;
	virtual bool getEsdlVersion_isNull()=0;
	virtual int getEsdlVersion()=0;
	virtual bool getDeletePrevious_isNull()=0;
	virtual bool getDeletePrevious()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual StringArray & getESDLServices()=0;
	virtual const char * getXMLDefinition()=0;
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
	virtual IConstESDLDefinition & getDefinition()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstPublishESDLBindingRequest : extends IEspRequest
{
	virtual const char * getEspProcName()=0;
	virtual const char * getEspBindingName()=0;
	virtual const char * getEspPort()=0;
	virtual const char * getEsdlDefinitionID()=0;
	virtual const char * getEsdlServiceName()=0;
	virtual const char * getEspServiceName()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual const char * getConfig()=0;
	virtual IArrayOf<IConstMethodConfig> & getMethods()=0;
	virtual bool getEchoBinding_isNull()=0;
	virtual bool getEchoBinding()=0;
};

interface IEspPublishESDLBindingRequest : extends IConstPublishESDLBindingRequest
{
	virtual void setEspProcName(const char * val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual void setEsdlDefinitionID(const char * val)=0;
	virtual void setEsdlServiceName(const char * val)=0;
	virtual void setEspServiceName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setConfig(const char * val)=0;
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual void setEchoBinding_null()=0;
	virtual void setEchoBinding(bool val)=0;
	virtual void copy(IConstPublishESDLBindingRequest &from)=0;
};

interface IClientPublishESDLBindingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEspProcName(const char * val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual void setEsdlDefinitionID(const char * val)=0;
	virtual void setEsdlServiceName(const char * val)=0;
	virtual void setEspServiceName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setConfig(const char * val)=0;
	virtual void setMethods(IArrayOf<IEspMethodConfig> &val)=0;
	virtual void setMethods(IArrayOf<IConstMethodConfig> &val)=0;
	virtual void setEchoBinding_null()=0;
	virtual void setEchoBinding(bool val)=0;
};



interface IConstPublishESDLBindingResponse : extends IEspResponse
{
	virtual const char * getEsdlDefinitionID()=0;
	virtual bool getOverwrite()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getEspPort()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;
};

interface IEspPublishESDLBindingResponse : extends IConstPublishESDLBindingResponse
{
	virtual void setEsdlDefinitionID(const char * val)=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setEspProcName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual IEspBaseESDLStatus & updateStatus()=0;
	virtual void setStatus(IConstBaseESDLStatus &ifrom)=0;
	virtual IEspESDLBindingContents & updateESDLBinding()=0;
	virtual void setESDLBinding(IConstESDLBindingContents &ifrom)=0;
	virtual void copy(IConstPublishESDLBindingResponse &from)=0;
};

interface IClientPublishESDLBindingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getEsdlDefinitionID()=0;
	virtual bool getOverwrite()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getEspPort()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstListDESDLEspBindingsReq : extends IEspRequest
{
	virtual bool getIncludeESDLBindingInfo_isNull()=0;
	virtual bool getIncludeESDLBindingInfo()=0;
};

interface IEspListDESDLEspBindingsReq : extends IConstListDESDLEspBindingsReq
{
	virtual void setIncludeESDLBindingInfo_null()=0;
	virtual void setIncludeESDLBindingInfo(bool val)=0;
	virtual void copy(IConstListDESDLEspBindingsReq &from)=0;
};

interface IClientListDESDLEspBindingsReq : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIncludeESDLBindingInfo_null()=0;
	virtual void setIncludeESDLBindingInfo(bool val)=0;
};



interface IConstTpBindingEx : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getService()=0;
	virtual const char * getServiceType()=0;
	virtual const char * getBindingType()=0;
	virtual const char * getServiceBuildSet()=0;
	virtual const char * getPort()=0;
	virtual const char * getProtocol()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;
};

interface IEspTpBindingEx : extends IConstTpBindingEx
{
	virtual void setName(const char * val)=0;
	virtual void setService(const char * val)=0;
	virtual void setServiceType(const char * val)=0;
	virtual void setBindingType(const char * val)=0;
	virtual void setServiceBuildSet(const char * val)=0;
	virtual void setPort(const char * val)=0;
	virtual void setProtocol(const char * val)=0;
	virtual IEspESDLBindingContents & updateESDLBinding()=0;
	virtual void setESDLBinding(IConstESDLBindingContents &ifrom)=0;
	virtual void copy(IConstTpBindingEx &from)=0;
};

interface IClientTpBindingEx : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setService(const char * val)=0;
	virtual void setServiceType(const char * val)=0;
	virtual void setBindingType(const char * val)=0;
	virtual void setServiceBuildSet(const char * val)=0;
	virtual void setPort(const char * val)=0;
	virtual void setProtocol(const char * val)=0;
	virtual IEspESDLBindingContents & updateESDLBinding()=0;
	virtual void setESDLBinding(IConstESDLBindingContents &ifrom)=0;
	virtual const char * getName()=0;
	virtual const char * getService()=0;
	virtual const char * getServiceType()=0;
	virtual const char * getBindingType()=0;
	virtual const char * getServiceBuildSet()=0;
	virtual const char * getPort()=0;
	virtual const char * getProtocol()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;
};



interface IConstESPServerEx : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpBindingEx> & getTpBindingEx()=0;
};

interface IEspESPServerEx : extends IConstESPServerEx
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpBindingEx(IArrayOf<IEspTpBindingEx> &val)=0;
	virtual void setTpBindingEx(IArrayOf<IConstTpBindingEx> &val)=0;
	virtual void copy(IConstESPServerEx &from)=0;
};

interface IClientESPServerEx : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setBuild(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void setLogDirectory(const char * val)=0;
	virtual void setTpBindingEx(IArrayOf<IEspTpBindingEx> &val)=0;
	virtual void setTpBindingEx(IArrayOf<IConstTpBindingEx> &val)=0;
	virtual const char * getName()=0;
	virtual const char * getDescription()=0;
	virtual const char * getBuild()=0;
	virtual const char * getType()=0;
	virtual const char * getPath()=0;
	virtual const char * getLogDirectory()=0;
	virtual IArrayOf<IConstTpBindingEx> & getTpBindingEx()=0;
};



interface IConstListDESDLEspBindingsResp : extends IEspResponse
{
	virtual IArrayOf<IConstESPServerEx> & getESPServers()=0;
};

interface IEspListDESDLEspBindingsResp : extends IConstListDESDLEspBindingsResp
{
	virtual void setESPServers(IArrayOf<IEspESPServerEx> &val)=0;
	virtual void setESPServers(IArrayOf<IConstESPServerEx> &val)=0;
	virtual void copy(IConstListDESDLEspBindingsResp &from)=0;
};

interface IClientListDESDLEspBindingsResp : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstESPServerEx> & getESPServers()=0;
};



interface IConstConfigureESDLBindingMethodRequest : extends IEspRequest
{
	virtual const char * getEsdlBindingId()=0;
	virtual const char * getMethodName()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getEspBindingName()=0;
	virtual const char * getEspPort()=0;
	virtual const char * getEsdlDefinitionID()=0;
	virtual const char * getEsdlServiceName()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual const char * getConfig()=0;
	virtual IConstMethodConfig & getMethodStructure()=0;
	virtual bool getEchoBinding_isNull()=0;
	virtual bool getEchoBinding()=0;
};

interface IEspConfigureESDLBindingMethodRequest : extends IConstConfigureESDLBindingMethodRequest
{
	virtual void setEsdlBindingId(const char * val)=0;
	virtual void setMethodName(const char * val)=0;
	virtual void setEspProcName(const char * val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual void setEsdlDefinitionID(const char * val)=0;
	virtual void setEsdlServiceName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setConfig(const char * val)=0;
	virtual IEspMethodConfig & updateMethodStructure()=0;
	virtual void setMethodStructure(IConstMethodConfig &ifrom)=0;
	virtual void setEchoBinding_null()=0;
	virtual void setEchoBinding(bool val)=0;
	virtual void copy(IConstConfigureESDLBindingMethodRequest &from)=0;
};

interface IClientConfigureESDLBindingMethodRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEsdlBindingId(const char * val)=0;
	virtual void setMethodName(const char * val)=0;
	virtual void setEspProcName(const char * val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual void setEsdlDefinitionID(const char * val)=0;
	virtual void setEsdlServiceName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setConfig(const char * val)=0;
	virtual IEspMethodConfig & updateMethodStructure()=0;
	virtual void setMethodStructure(IConstMethodConfig &ifrom)=0;
	virtual void setEchoBinding_null()=0;
	virtual void setEchoBinding(bool val)=0;
};



interface IConstConfigureESDLBindingMethodResponse : extends IEspResponse
{
	virtual const char * getEspProcName()=0;
	virtual const char * getServiceName()=0;
	virtual bool getServiceEsdlVersion_isNull()=0;
	virtual int getServiceEsdlVersion()=0;
	virtual const char * getEspBindingName()=0;
	virtual const char * getEsdlDefinitionID()=0;
	virtual const char * getEsdlServiceName()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;
};

interface IEspConfigureESDLBindingMethodResponse : extends IConstConfigureESDLBindingMethodResponse
{
	virtual void setEspProcName(const char * val)=0;
	virtual void setServiceName(const char * val)=0;
	virtual void setServiceEsdlVersion_null()=0;
	virtual void setServiceEsdlVersion(int val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEsdlDefinitionID(const char * val)=0;
	virtual void setEsdlServiceName(const char * val)=0;
	virtual IEspBaseESDLStatus & updateStatus()=0;
	virtual void setStatus(IConstBaseESDLStatus &ifrom)=0;
	virtual IEspESDLBindingContents & updateESDLBinding()=0;
	virtual void setESDLBinding(IConstESDLBindingContents &ifrom)=0;
	virtual void copy(IConstConfigureESDLBindingMethodResponse &from)=0;
};

interface IClientConfigureESDLBindingMethodResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getServiceName()=0;
	virtual bool getServiceEsdlVersion_isNull()=0;
	virtual int getServiceEsdlVersion()=0;
	virtual const char * getEspBindingName()=0;
	virtual const char * getEsdlDefinitionID()=0;
	virtual const char * getEsdlServiceName()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstConfigureESDLBindingLogTransformRequest : extends IEspRequest
{
	virtual const char * getEsdlBindingId()=0;
	virtual const char * getLogTransformName()=0;
	virtual bool getOverwrite_isNull()=0;
	virtual bool getOverwrite()=0;
	virtual bool getEncoded_isNull()=0;
	virtual bool getEncoded()=0;
	virtual const char * getConfig()=0;
	virtual bool getEchoBinding_isNull()=0;
	virtual bool getEchoBinding()=0;
};

interface IEspConfigureESDLBindingLogTransformRequest : extends IConstConfigureESDLBindingLogTransformRequest
{
	virtual void setEsdlBindingId(const char * val)=0;
	virtual void setLogTransformName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setEncoded_null()=0;
	virtual void setEncoded(bool val)=0;
	virtual void setConfig(const char * val)=0;
	virtual void setEchoBinding_null()=0;
	virtual void setEchoBinding(bool val)=0;
	virtual void copy(IConstConfigureESDLBindingLogTransformRequest &from)=0;
};

interface IClientConfigureESDLBindingLogTransformRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEsdlBindingId(const char * val)=0;
	virtual void setLogTransformName(const char * val)=0;
	virtual void setOverwrite_null()=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setEncoded_null()=0;
	virtual void setEncoded(bool val)=0;
	virtual void setConfig(const char * val)=0;
	virtual void setEchoBinding_null()=0;
	virtual void setEchoBinding(bool val)=0;
};



interface IConstConfigureESDLBindingLogTransformResponse : extends IEspResponse
{
	virtual const char * getEspProcName()=0;
	virtual const char * getEspBindingName()=0;
	virtual const char * getEsdlDefinitionID()=0;
	virtual const char * getEsdlServiceName()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;
};

interface IEspConfigureESDLBindingLogTransformResponse : extends IConstConfigureESDLBindingLogTransformResponse
{
	virtual void setEspProcName(const char * val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEsdlDefinitionID(const char * val)=0;
	virtual void setEsdlServiceName(const char * val)=0;
	virtual IEspBaseESDLStatus & updateStatus()=0;
	virtual void setStatus(IConstBaseESDLStatus &ifrom)=0;
	virtual IEspESDLBindingContents & updateESDLBinding()=0;
	virtual void setESDLBinding(IConstESDLBindingContents &ifrom)=0;
	virtual void copy(IConstConfigureESDLBindingLogTransformResponse &from)=0;
};

interface IClientConfigureESDLBindingLogTransformResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getEspBindingName()=0;
	virtual const char * getEsdlDefinitionID()=0;
	virtual const char * getEsdlServiceName()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetESDLBindingRequest : extends IEspRequest
{
	virtual const char * getEsdlBindingId()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getEspBindingName()=0;
	virtual const char * getEspPort()=0;
	virtual bool getIncludeInterfaceDefinition()=0;
	virtual bool getReportMethodsAvailable()=0;
};

interface IEspGetESDLBindingRequest : extends IConstGetESDLBindingRequest
{
	virtual void setEsdlBindingId(const char * val)=0;
	virtual void setEspProcName(const char * val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual void setIncludeInterfaceDefinition(bool val)=0;
	virtual void setReportMethodsAvailable(bool val)=0;
	virtual void copy(IConstGetESDLBindingRequest &from)=0;
};

interface IClientGetESDLBindingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setEsdlBindingId(const char * val)=0;
	virtual void setEspProcName(const char * val)=0;
	virtual void setEspBindingName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual void setIncludeInterfaceDefinition(bool val)=0;
	virtual void setReportMethodsAvailable(bool val)=0;
};



interface IConstGetESDLBindingResponse : extends IEspResponse
{
	virtual const char * getServiceName()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getBindingName()=0;
	virtual const char * getEspPort()=0;
	virtual const char * getConfigXML()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
};

interface IEspGetESDLBindingResponse : extends IConstGetESDLBindingResponse
{
	virtual void setServiceName(const char * val)=0;
	virtual void setEspProcName(const char * val)=0;
	virtual void setBindingName(const char * val)=0;
	virtual void setEspPort(const char * val)=0;
	virtual void setConfigXML(const char * val)=0;
	virtual IEspESDLBindingContents & updateESDLBinding()=0;
	virtual void setESDLBinding(IConstESDLBindingContents &ifrom)=0;
	virtual IEspBaseESDLStatus & updateStatus()=0;
	virtual void setStatus(IConstBaseESDLStatus &ifrom)=0;
	virtual void copy(IConstGetESDLBindingResponse &from)=0;
};

interface IClientGetESDLBindingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getServiceName()=0;
	virtual const char * getEspProcName()=0;
	virtual const char * getBindingName()=0;
	virtual const char * getEspPort()=0;
	virtual const char * getConfigXML()=0;
	virtual IConstESDLBindingContents & getESDLBinding()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstDeleteESDLDefinitionRequest : extends IEspRequest
{
	virtual const char * getId()=0;
	virtual const char * getName()=0;
	virtual const char * getVersion()=0;
};

interface IEspDeleteESDLDefinitionRequest : extends IConstDeleteESDLDefinitionRequest
{
	virtual void setId(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setVersion(const char * val)=0;
	virtual void copy(IConstDeleteESDLDefinitionRequest &from)=0;
};

interface IClientDeleteESDLDefinitionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setId(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setVersion(const char * val)=0;
};



interface IConstDeleteESDLBindingRequest : extends IEspRequest
{
	virtual const char * getId()=0;
	virtual const char * getEspProcess()=0;
	virtual const char * getEspBinding()=0;
};

interface IEspDeleteESDLBindingRequest : extends IConstDeleteESDLBindingRequest
{
	virtual void setId(const char * val)=0;
	virtual void setEspProcess(const char * val)=0;
	virtual void setEspBinding(const char * val)=0;
	virtual void copy(IConstDeleteESDLBindingRequest &from)=0;
};

interface IClientDeleteESDLBindingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setId(const char * val)=0;
	virtual void setEspProcess(const char * val)=0;
	virtual void setEspBinding(const char * val)=0;
};



interface IConstDeleteESDLRegistryEntryResponse : extends IEspResponse
{
	virtual const char * getDeletedTree()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;
};

interface IEspDeleteESDLRegistryEntryResponse : extends IConstDeleteESDLRegistryEntryResponse
{
	virtual void setDeletedTree(const char * val)=0;
	virtual IEspBaseESDLStatus & updateStatus()=0;
	virtual void setStatus(IConstBaseESDLStatus &ifrom)=0;
	virtual void copy(IConstDeleteESDLRegistryEntryResponse &from)=0;
};

interface IClientDeleteESDLRegistryEntryResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getDeletedTree()=0;
	virtual IConstBaseESDLStatus & getStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstListESDLDefinitionsRequest : extends IEspRequest
{
};

interface IEspListESDLDefinitionsRequest : extends IConstListESDLDefinitionsRequest
{
	virtual void copy(IConstListESDLDefinitionsRequest &from)=0;
};

interface IClientListESDLDefinitionsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstListESDLDefinitionsResponse : extends IEspResponse
{
	virtual IArrayOf<IConstESDLDefinition> & getDefinitions()=0;
};

interface IEspListESDLDefinitionsResponse : extends IConstListESDLDefinitionsResponse
{
	virtual void setDefinitions(IArrayOf<IEspESDLDefinition> &val)=0;
	virtual void setDefinitions(IArrayOf<IConstESDLDefinition> &val)=0;
	virtual void copy(IConstListESDLDefinitionsResponse &from)=0;
};

interface IClientListESDLDefinitionsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstESDLDefinition> & getDefinitions()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstEspPortStruct : extends IEspStruct
{
	virtual int getValue()=0;
	virtual IArrayOf<IConstESDLBinding> & getBindings()=0;
};

interface IEspEspPortStruct : extends IConstEspPortStruct
{
	virtual void setValue(int val)=0;
	virtual void setBindings(IArrayOf<IEspESDLBinding> &val)=0;
	virtual void setBindings(IArrayOf<IConstESDLBinding> &val)=0;
	virtual void copy(IConstEspPortStruct &from)=0;
};

interface IClientEspPortStruct : extends IInterface
{
	virtual void setValue(int val)=0;
	virtual void setBindings(IArrayOf<IEspESDLBinding> &val)=0;
	virtual void setBindings(IArrayOf<IConstESDLBinding> &val)=0;
	virtual int getValue()=0;
	virtual IArrayOf<IConstESDLBinding> & getBindings()=0;
};



interface IConstEspProcessStruct : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual IArrayOf<IConstEspPortStruct> & getPorts()=0;
};

interface IEspEspProcessStruct : extends IConstEspProcessStruct
{
	virtual void setName(const char * val)=0;
	virtual void setPorts(IArrayOf<IEspEspPortStruct> &val)=0;
	virtual void setPorts(IArrayOf<IConstEspPortStruct> &val)=0;
	virtual void copy(IConstEspProcessStruct &from)=0;
};

interface IClientEspProcessStruct : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setPorts(IArrayOf<IEspEspPortStruct> &val)=0;
	virtual void setPorts(IArrayOf<IConstEspPortStruct> &val)=0;
	virtual const char * getName()=0;
	virtual IArrayOf<IConstEspPortStruct> & getPorts()=0;
};



interface IConstListESDLBindingsRequest : extends IEspRequest
{
};

interface IEspListESDLBindingsRequest : extends IConstListESDLBindingsRequest
{
	virtual void copy(IConstListESDLBindingsRequest &from)=0;
};

interface IClientListESDLBindingsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};



interface IConstListESDLBindingsResponse : extends IEspResponse
{
	virtual const char * getBindingsXML()=0;
	virtual IArrayOf<IConstESDLBinding> & getBindings()=0;
	virtual IArrayOf<IConstEspProcessStruct> & getEspProcesses()=0;
};

interface IEspListESDLBindingsResponse : extends IConstListESDLBindingsResponse
{
	virtual void setBindingsXML(const char * val)=0;
	virtual void setBindings(IArrayOf<IEspESDLBinding> &val)=0;
	virtual void setBindings(IArrayOf<IConstESDLBinding> &val)=0;
	virtual void setEspProcesses(IArrayOf<IEspEspProcessStruct> &val)=0;
	virtual void setEspProcesses(IArrayOf<IConstEspProcessStruct> &val)=0;
	virtual void copy(IConstListESDLBindingsResponse &from)=0;
};

interface IClientListESDLBindingsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getBindingsXML()=0;
	virtual IArrayOf<IConstESDLBinding> & getBindings()=0;
	virtual IArrayOf<IConstEspProcessStruct> & getEspProcesses()=0;

	virtual const IMultiException& getExceptions()=0;
};



#define VERSION_FOR_ESDLCMD "1.5"
interface IConstWsESDLConfigPingRequest : extends IEspRequest
{
};

interface IEspWsESDLConfigPingRequest : extends IConstWsESDLConfigPingRequest
{
	virtual void copy(IConstWsESDLConfigPingRequest &from)=0;
};

interface IClientWsESDLConfigPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstWsESDLConfigPingResponse : extends IEspResponse
{
};

interface IEspWsESDLConfigPingResponse : extends IConstWsESDLConfigPingResponse
{
	virtual void copy(IConstWsESDLConfigPingResponse &from)=0;
};

interface IClientWsESDLConfigPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspWsESDLConfig : extends IEspService
{
	virtual bool onConfigureESDLBindingLogTransform(IEspContext &context, IEspConfigureESDLBindingLogTransformRequest &req, IEspConfigureESDLBindingLogTransformResponse &resp)=0;
	virtual bool onConfigureESDLBindingMethod(IEspContext &context, IEspConfigureESDLBindingMethodRequest &req, IEspConfigureESDLBindingMethodResponse &resp)=0;
	virtual bool onDeleteESDLBinding(IEspContext &context, IEspDeleteESDLBindingRequest &req, IEspDeleteESDLRegistryEntryResponse &resp)=0;
	virtual bool onDeleteESDLDefinition(IEspContext &context, IEspDeleteESDLDefinitionRequest &req, IEspDeleteESDLRegistryEntryResponse &resp)=0;
	virtual bool onEcho(IEspContext &context, IEspEchoRequest &req, IEspEchoResponse &resp)=0;
	virtual bool onGetESDLBinding(IEspContext &context, IEspGetESDLBindingRequest &req, IEspGetESDLBindingResponse &resp)=0;
	virtual bool onGetESDLDefinition(IEspContext &context, IEspGetESDLDefinitionRequest &req, IEspGetESDLDefinitionResponse &resp)=0;
	virtual bool onListDESDLEspBindings(IEspContext &context, IEspListDESDLEspBindingsReq &req, IEspListDESDLEspBindingsResp &resp)=0;
	virtual bool onListESDLBindings(IEspContext &context, IEspListESDLBindingsRequest &req, IEspListESDLBindingsResponse &resp)=0;
	virtual bool onListESDLDefinitions(IEspContext &context, IEspListESDLDefinitionsRequest &req, IEspListESDLDefinitionsResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspWsESDLConfigPingRequest &req, IEspWsESDLConfigPingResponse &resp)=0;
	virtual bool onPublishESDLBinding(IEspContext &context, IEspPublishESDLBindingRequest &req, IEspPublishESDLBindingResponse &resp)=0;
	virtual bool onPublishESDLDefinition(IEspContext &context, IEspPublishESDLDefinitionRequest &req, IEspPublishESDLDefinitionResponse &resp)=0;
};

interface IClientWsESDLConfigEvents : extends IInterface
{
	virtual int onConfigureESDLBindingLogTransformComplete(IClientConfigureESDLBindingLogTransformResponse *resp,IInterface* state)=0;
	virtual int onConfigureESDLBindingLogTransformError(IClientConfigureESDLBindingLogTransformResponse *resp,IInterface* state)=0;
	virtual int onConfigureESDLBindingMethodComplete(IClientConfigureESDLBindingMethodResponse *resp,IInterface* state)=0;
	virtual int onConfigureESDLBindingMethodError(IClientConfigureESDLBindingMethodResponse *resp,IInterface* state)=0;
	virtual int onDeleteESDLBindingComplete(IClientDeleteESDLRegistryEntryResponse *resp,IInterface* state)=0;
	virtual int onDeleteESDLBindingError(IClientDeleteESDLRegistryEntryResponse *resp,IInterface* state)=0;
	virtual int onDeleteESDLDefinitionComplete(IClientDeleteESDLRegistryEntryResponse *resp,IInterface* state)=0;
	virtual int onDeleteESDLDefinitionError(IClientDeleteESDLRegistryEntryResponse *resp,IInterface* state)=0;
	virtual int onEchoComplete(IClientEchoResponse *resp,IInterface* state)=0;
	virtual int onEchoError(IClientEchoResponse *resp,IInterface* state)=0;
	virtual int onGetESDLBindingComplete(IClientGetESDLBindingResponse *resp,IInterface* state)=0;
	virtual int onGetESDLBindingError(IClientGetESDLBindingResponse *resp,IInterface* state)=0;
	virtual int onGetESDLDefinitionComplete(IClientGetESDLDefinitionResponse *resp,IInterface* state)=0;
	virtual int onGetESDLDefinitionError(IClientGetESDLDefinitionResponse *resp,IInterface* state)=0;
	virtual int onListDESDLEspBindingsComplete(IClientListDESDLEspBindingsResp *resp,IInterface* state)=0;
	virtual int onListDESDLEspBindingsError(IClientListDESDLEspBindingsResp *resp,IInterface* state)=0;
	virtual int onListESDLBindingsComplete(IClientListESDLBindingsResponse *resp,IInterface* state)=0;
	virtual int onListESDLBindingsError(IClientListESDLBindingsResponse *resp,IInterface* state)=0;
	virtual int onListESDLDefinitionsComplete(IClientListESDLDefinitionsResponse *resp,IInterface* state)=0;
	virtual int onListESDLDefinitionsError(IClientListESDLDefinitionsResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientWsESDLConfigPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientWsESDLConfigPingResponse *resp,IInterface* state)=0;
	virtual int onPublishESDLBindingComplete(IClientPublishESDLBindingResponse *resp,IInterface* state)=0;
	virtual int onPublishESDLBindingError(IClientPublishESDLBindingResponse *resp,IInterface* state)=0;
	virtual int onPublishESDLDefinitionComplete(IClientPublishESDLDefinitionResponse *resp,IInterface* state)=0;
	virtual int onPublishESDLDefinitionError(IClientPublishESDLDefinitionResponse *resp,IInterface* state)=0;
};

interface IClientWsESDLConfig : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientConfigureESDLBindingLogTransformRequest * createConfigureESDLBindingLogTransformRequest()=0;
	virtual IClientConfigureESDLBindingLogTransformResponse * ConfigureESDLBindingLogTransform(IClientConfigureESDLBindingLogTransformRequest *request)=0;
	virtual void async_ConfigureESDLBindingLogTransform(IClientConfigureESDLBindingLogTransformRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientConfigureESDLBindingMethodRequest * createConfigureESDLBindingMethodRequest()=0;
	virtual IClientConfigureESDLBindingMethodResponse * ConfigureESDLBindingMethod(IClientConfigureESDLBindingMethodRequest *request)=0;
	virtual void async_ConfigureESDLBindingMethod(IClientConfigureESDLBindingMethodRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientDeleteESDLBindingRequest * createDeleteESDLBindingRequest()=0;
	virtual IClientDeleteESDLRegistryEntryResponse * DeleteESDLBinding(IClientDeleteESDLBindingRequest *request)=0;
	virtual void async_DeleteESDLBinding(IClientDeleteESDLBindingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientDeleteESDLDefinitionRequest * createDeleteESDLDefinitionRequest()=0;
	virtual IClientDeleteESDLRegistryEntryResponse * DeleteESDLDefinition(IClientDeleteESDLDefinitionRequest *request)=0;
	virtual void async_DeleteESDLDefinition(IClientDeleteESDLDefinitionRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientEchoRequest * createEchoRequest()=0;
	virtual IClientEchoResponse * Echo(IClientEchoRequest *request)=0;
	virtual void async_Echo(IClientEchoRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientGetESDLBindingRequest * createGetESDLBindingRequest()=0;
	virtual IClientGetESDLBindingResponse * GetESDLBinding(IClientGetESDLBindingRequest *request)=0;
	virtual void async_GetESDLBinding(IClientGetESDLBindingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientGetESDLDefinitionRequest * createGetESDLDefinitionRequest()=0;
	virtual IClientGetESDLDefinitionResponse * GetESDLDefinition(IClientGetESDLDefinitionRequest *request)=0;
	virtual void async_GetESDLDefinition(IClientGetESDLDefinitionRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientListDESDLEspBindingsReq * createListDESDLEspBindingsRequest()=0;
	virtual IClientListDESDLEspBindingsResp * ListDESDLEspBindings(IClientListDESDLEspBindingsReq *request)=0;
	virtual void async_ListDESDLEspBindings(IClientListDESDLEspBindingsReq *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientListESDLBindingsRequest * createListESDLBindingsRequest()=0;
	virtual IClientListESDLBindingsResponse * ListESDLBindings(IClientListESDLBindingsRequest *request)=0;
	virtual void async_ListESDLBindings(IClientListESDLBindingsRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientListESDLDefinitionsRequest * createListESDLDefinitionsRequest()=0;
	virtual IClientListESDLDefinitionsResponse * ListESDLDefinitions(IClientListESDLDefinitionsRequest *request)=0;
	virtual void async_ListESDLDefinitions(IClientListESDLDefinitionsRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientWsESDLConfigPingRequest * createPingRequest()=0;
	virtual IClientWsESDLConfigPingResponse * Ping(IClientWsESDLConfigPingRequest *request)=0;
	virtual void async_Ping(IClientWsESDLConfigPingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientPublishESDLBindingRequest * createPublishESDLBindingRequest()=0;
	virtual IClientPublishESDLBindingResponse * PublishESDLBinding(IClientPublishESDLBindingRequest *request)=0;
	virtual void async_PublishESDLBinding(IClientPublishESDLBindingRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;

	virtual IClientPublishESDLDefinitionRequest * createPublishESDLDefinitionRequest()=0;
	virtual IClientPublishESDLDefinitionResponse * PublishESDLDefinition(IClientPublishESDLDefinitionRequest *request)=0;
	virtual void async_PublishESDLDefinition(IClientPublishESDLDefinitionRequest *request, IClientWsESDLConfigEvents *events,IInterface* state=0)=0;


	virtual IClientConfigureESDLBindingLogTransformResponse *ConfigureESDLBindingLogTransformFn(const char * EsdlBindingId_, const char * LogTransformName_, bool Overwrite_, bool Encoded_, const char * Config_, bool EchoBinding_)=0;

	virtual IClientConfigureESDLBindingMethodResponse *ConfigureESDLBindingMethodFn(const char * EsdlBindingId_, const char * MethodName_, const char * EspProcName_, const char * EspBindingName_, const char * EspPort_, const char * EsdlDefinitionID_, const char * EsdlServiceName_, bool Overwrite_, const char * Config_, IConstMethodConfig &MethodStructure_, bool EchoBinding_)=0;

	virtual IClientDeleteESDLRegistryEntryResponse *DeleteESDLBindingFn(const char * Id_, const char * EspProcess_, const char * EspBinding_)=0;

	virtual IClientDeleteESDLRegistryEntryResponse *DeleteESDLDefinitionFn(const char * Id_, const char * Name_, const char * Version_)=0;

	virtual IClientEchoResponse *EchoFn(const char * Request_)=0;

	virtual IClientGetESDLBindingResponse *GetESDLBindingFn(const char * EsdlBindingId_, const char * EspProcName_, const char * EspBindingName_, const char * EspPort_, bool IncludeInterfaceDefinition_, bool ReportMethodsAvailable_)=0;

	virtual IClientGetESDLDefinitionResponse *GetESDLDefinitionFn(const char * Id_, const char * Name_, int Seq_, const char * ServiceName_, bool ReportMethodsAvailable_)=0;

	virtual IClientListDESDLEspBindingsResp *ListDESDLEspBindingsFn(bool IncludeESDLBindingInfo_)=0;

	virtual IClientListESDLBindingsResponse *ListESDLBindingsFn()=0;

	virtual IClientListESDLDefinitionsResponse *ListESDLDefinitionsFn()=0;

	virtual IClientWsESDLConfigPingResponse *PingFn()=0;

	virtual IClientPublishESDLBindingResponse *PublishESDLBindingFn(const char * EspProcName_, const char * EspBindingName_, const char * EspPort_, const char * EsdlDefinitionID_, const char * EsdlServiceName_, const char * EspServiceName_, bool Overwrite_, const char * Config_, IArrayOf<IConstMethodConfig> &Methods_, bool EchoBinding_)=0;

	virtual IClientPublishESDLDefinitionResponse *PublishESDLDefinitionFn(const char * ServiceName_, const char * XMLDefinition_, bool DeletePrevious_, bool EchoDefinition_)=0;
};



#ifndef WsESDLConfig_API
#define WsESDLConfig_API
#endif //WsESDLConfig_API



extern "C" WsESDLConfig_API IClientWsESDLConfig * createWsESDLConfigClient();


extern "C"  IEspEchoRequest *createEchoRequest(const char *serv=NULL);
extern "C"  IClientEchoRequest *createClientEchoRequest(const char *serv=NULL);
extern "C"  IEspEchoResponse *createEchoResponse(const char *serv=NULL);
extern "C"  IClientEchoResponse *createClientEchoResponse(const char *serv=NULL);
extern "C"  IEspBaseESDLStatus *createBaseESDLStatus(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientBaseESDLStatus *createClientBaseESDLStatus(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspMethodConfig *createMethodConfig(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientMethodConfig *createClientMethodConfig(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspESDLConfiguration *createESDLConfiguration(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientESDLConfiguration *createClientESDLConfiguration(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspPublishHistory *createPublishHistory(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientPublishHistory *createClientPublishHistory(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspESDLBinding *createESDLBinding(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientESDLBinding *createClientESDLBinding(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspESDLService *createESDLService(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientESDLService *createClientESDLService(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspESDLDefinition *createESDLDefinition(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientESDLDefinition *createClientESDLDefinition(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspESDLBindingContents *createESDLBindingContents(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientESDLBindingContents *createClientESDLBindingContents(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetESDLDefinitionRequest *createGetESDLDefinitionRequest(const char *serv=NULL);
extern "C"  IClientGetESDLDefinitionRequest *createClientGetESDLDefinitionRequest(const char *serv=NULL);
extern "C"  IEspGetESDLDefinitionResponse *createGetESDLDefinitionResponse(const char *serv=NULL);
extern "C"  IClientGetESDLDefinitionResponse *createClientGetESDLDefinitionResponse(const char *serv=NULL);
extern "C"  IEspPublishESDLDefinitionRequest *createPublishESDLDefinitionRequest(const char *serv=NULL);
extern "C"  IClientPublishESDLDefinitionRequest *createClientPublishESDLDefinitionRequest(const char *serv=NULL);
extern "C"  IEspPublishESDLDefinitionResponse *createPublishESDLDefinitionResponse(const char *serv=NULL);
extern "C"  IClientPublishESDLDefinitionResponse *createClientPublishESDLDefinitionResponse(const char *serv=NULL);
extern "C"  IEspPublishESDLBindingRequest *createPublishESDLBindingRequest(const char *serv=NULL);
extern "C"  IClientPublishESDLBindingRequest *createClientPublishESDLBindingRequest(const char *serv=NULL);
extern "C"  IEspPublishESDLBindingResponse *createPublishESDLBindingResponse(const char *serv=NULL);
extern "C"  IClientPublishESDLBindingResponse *createClientPublishESDLBindingResponse(const char *serv=NULL);
extern "C"  IEspListDESDLEspBindingsReq *createListDESDLEspBindingsReq(const char *serv=NULL);
extern "C"  IClientListDESDLEspBindingsReq *createClientListDESDLEspBindingsReq(const char *serv=NULL);
extern "C"  IEspTpBindingEx *createTpBindingEx(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTpBindingEx *createClientTpBindingEx(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspESPServerEx *createESPServerEx(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientESPServerEx *createClientESPServerEx(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspListDESDLEspBindingsResp *createListDESDLEspBindingsResp(const char *serv=NULL);
extern "C"  IClientListDESDLEspBindingsResp *createClientListDESDLEspBindingsResp(const char *serv=NULL);
extern "C"  IEspConfigureESDLBindingMethodRequest *createConfigureESDLBindingMethodRequest(const char *serv=NULL);
extern "C"  IClientConfigureESDLBindingMethodRequest *createClientConfigureESDLBindingMethodRequest(const char *serv=NULL);
extern "C"  IEspConfigureESDLBindingMethodResponse *createConfigureESDLBindingMethodResponse(const char *serv=NULL);
extern "C"  IClientConfigureESDLBindingMethodResponse *createClientConfigureESDLBindingMethodResponse(const char *serv=NULL);
extern "C"  IEspConfigureESDLBindingLogTransformRequest *createConfigureESDLBindingLogTransformRequest(const char *serv=NULL);
extern "C"  IClientConfigureESDLBindingLogTransformRequest *createClientConfigureESDLBindingLogTransformRequest(const char *serv=NULL);
extern "C"  IEspConfigureESDLBindingLogTransformResponse *createConfigureESDLBindingLogTransformResponse(const char *serv=NULL);
extern "C"  IClientConfigureESDLBindingLogTransformResponse *createClientConfigureESDLBindingLogTransformResponse(const char *serv=NULL);
extern "C"  IEspGetESDLBindingRequest *createGetESDLBindingRequest(const char *serv=NULL);
extern "C"  IClientGetESDLBindingRequest *createClientGetESDLBindingRequest(const char *serv=NULL);
extern "C"  IEspGetESDLBindingResponse *createGetESDLBindingResponse(const char *serv=NULL);
extern "C"  IClientGetESDLBindingResponse *createClientGetESDLBindingResponse(const char *serv=NULL);
extern "C"  IEspDeleteESDLDefinitionRequest *createDeleteESDLDefinitionRequest(const char *serv=NULL);
extern "C"  IClientDeleteESDLDefinitionRequest *createClientDeleteESDLDefinitionRequest(const char *serv=NULL);
extern "C"  IEspDeleteESDLBindingRequest *createDeleteESDLBindingRequest(const char *serv=NULL);
extern "C"  IClientDeleteESDLBindingRequest *createClientDeleteESDLBindingRequest(const char *serv=NULL);
extern "C"  IEspDeleteESDLRegistryEntryResponse *createDeleteESDLRegistryEntryResponse(const char *serv=NULL);
extern "C"  IClientDeleteESDLRegistryEntryResponse *createClientDeleteESDLRegistryEntryResponse(const char *serv=NULL);
extern "C"  IEspListESDLDefinitionsRequest *createListESDLDefinitionsRequest(const char *serv=NULL);
extern "C"  IClientListESDLDefinitionsRequest *createClientListESDLDefinitionsRequest(const char *serv=NULL);
extern "C"  IEspListESDLDefinitionsResponse *createListESDLDefinitionsResponse(const char *serv=NULL);
extern "C"  IClientListESDLDefinitionsResponse *createClientListESDLDefinitionsResponse(const char *serv=NULL);
extern "C"  IEspEspPortStruct *createEspPortStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientEspPortStruct *createClientEspPortStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspEspProcessStruct *createEspProcessStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientEspProcessStruct *createClientEspProcessStruct(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspListESDLBindingsRequest *createListESDLBindingsRequest(const char *serv=NULL);
extern "C"  IClientListESDLBindingsRequest *createClientListESDLBindingsRequest(const char *serv=NULL);
extern "C"  IEspListESDLBindingsResponse *createListESDLBindingsResponse(const char *serv=NULL);
extern "C"  IClientListESDLBindingsResponse *createClientListESDLBindingsResponse(const char *serv=NULL);
extern "C"  IEspWsESDLConfigPingRequest *createWsESDLConfigPingRequest(const char *serv=NULL);
extern "C"  IClientWsESDLConfigPingRequest *createClientWsESDLConfigPingRequest(const char *serv=NULL);
extern "C"  IEspWsESDLConfigPingResponse *createWsESDLConfigPingResponse(const char *serv=NULL);
extern "C"  IClientWsESDLConfigPingResponse *createClientWsESDLConfigPingResponse(const char *serv=NULL);

#endif // _ws_esdlconfig_SCM_INCL
//end
